                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module SPI
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _enc28j60_init_rx_buffer
                                     12 	.globl _printf
                                     13 	.globl _TF1
                                     14 	.globl _TR1
                                     15 	.globl _TF0
                                     16 	.globl _TR0
                                     17 	.globl _IE1
                                     18 	.globl _IT1
                                     19 	.globl _IE0
                                     20 	.globl _IT0
                                     21 	.globl _SM0
                                     22 	.globl _SM1
                                     23 	.globl _SM2
                                     24 	.globl _REN
                                     25 	.globl _TB8
                                     26 	.globl _RB8
                                     27 	.globl _TI
                                     28 	.globl _RI
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _F1
                                     36 	.globl _P
                                     37 	.globl _RD
                                     38 	.globl _WR
                                     39 	.globl _T1
                                     40 	.globl _T0
                                     41 	.globl _INT1
                                     42 	.globl _INT0
                                     43 	.globl _TXD0
                                     44 	.globl _TXD
                                     45 	.globl _RXD0
                                     46 	.globl _RXD
                                     47 	.globl _P3_7
                                     48 	.globl _P3_6
                                     49 	.globl _P3_5
                                     50 	.globl _P3_4
                                     51 	.globl _P3_3
                                     52 	.globl _P3_2
                                     53 	.globl _P3_1
                                     54 	.globl _P3_0
                                     55 	.globl _P2_7
                                     56 	.globl _P2_6
                                     57 	.globl _P2_5
                                     58 	.globl _P2_4
                                     59 	.globl _P2_3
                                     60 	.globl _P2_2
                                     61 	.globl _P2_1
                                     62 	.globl _P2_0
                                     63 	.globl _P1_7
                                     64 	.globl _P1_6
                                     65 	.globl _P1_5
                                     66 	.globl _P1_4
                                     67 	.globl _P1_3
                                     68 	.globl _P1_2
                                     69 	.globl _P1_1
                                     70 	.globl _P1_0
                                     71 	.globl _P0_7
                                     72 	.globl _P0_6
                                     73 	.globl _P0_5
                                     74 	.globl _P0_4
                                     75 	.globl _P0_3
                                     76 	.globl _P0_2
                                     77 	.globl _P0_1
                                     78 	.globl _P0_0
                                     79 	.globl _PS
                                     80 	.globl _PT1
                                     81 	.globl _PX1
                                     82 	.globl _PT0
                                     83 	.globl _PX0
                                     84 	.globl _EA
                                     85 	.globl _ES
                                     86 	.globl _ET1
                                     87 	.globl _EX1
                                     88 	.globl _ET0
                                     89 	.globl _EX0
                                     90 	.globl _BREG_F7
                                     91 	.globl _BREG_F6
                                     92 	.globl _BREG_F5
                                     93 	.globl _BREG_F4
                                     94 	.globl _BREG_F3
                                     95 	.globl _BREG_F2
                                     96 	.globl _BREG_F1
                                     97 	.globl _BREG_F0
                                     98 	.globl _P5_7
                                     99 	.globl _P5_6
                                    100 	.globl _P5_5
                                    101 	.globl _P5_4
                                    102 	.globl _P5_3
                                    103 	.globl _P5_2
                                    104 	.globl _P5_1
                                    105 	.globl _P5_0
                                    106 	.globl _P4_7
                                    107 	.globl _P4_6
                                    108 	.globl _P4_5
                                    109 	.globl _P4_4
                                    110 	.globl _P4_3
                                    111 	.globl _P4_2
                                    112 	.globl _P4_1
                                    113 	.globl _P4_0
                                    114 	.globl _PX0L
                                    115 	.globl _PT0L
                                    116 	.globl _PX1L
                                    117 	.globl _PT1L
                                    118 	.globl _PSL
                                    119 	.globl _PT2L
                                    120 	.globl _PPCL
                                    121 	.globl _EC
                                    122 	.globl _CCF0
                                    123 	.globl _CCF1
                                    124 	.globl _CCF2
                                    125 	.globl _CCF3
                                    126 	.globl _CCF4
                                    127 	.globl _CR
                                    128 	.globl _CF
                                    129 	.globl _TF2
                                    130 	.globl _EXF2
                                    131 	.globl _RCLK
                                    132 	.globl _TCLK
                                    133 	.globl _EXEN2
                                    134 	.globl _TR2
                                    135 	.globl _C_T2
                                    136 	.globl _CP_RL2
                                    137 	.globl _T2CON_7
                                    138 	.globl _T2CON_6
                                    139 	.globl _T2CON_5
                                    140 	.globl _T2CON_4
                                    141 	.globl _T2CON_3
                                    142 	.globl _T2CON_2
                                    143 	.globl _T2CON_1
                                    144 	.globl _T2CON_0
                                    145 	.globl _PT2
                                    146 	.globl _ET2
                                    147 	.globl _TMOD
                                    148 	.globl _TL1
                                    149 	.globl _TL0
                                    150 	.globl _TH1
                                    151 	.globl _TH0
                                    152 	.globl _TCON
                                    153 	.globl _SP
                                    154 	.globl _SCON
                                    155 	.globl _SBUF0
                                    156 	.globl _SBUF
                                    157 	.globl _PSW
                                    158 	.globl _PCON
                                    159 	.globl _P3
                                    160 	.globl _P2
                                    161 	.globl _P1
                                    162 	.globl _P0
                                    163 	.globl _IP
                                    164 	.globl _IE
                                    165 	.globl _DP0L
                                    166 	.globl _DPL
                                    167 	.globl _DP0H
                                    168 	.globl _DPH
                                    169 	.globl _B
                                    170 	.globl _ACC
                                    171 	.globl _EECON
                                    172 	.globl _KBF
                                    173 	.globl _KBE
                                    174 	.globl _KBLS
                                    175 	.globl _BRL
                                    176 	.globl _BDRCON
                                    177 	.globl _T2MOD
                                    178 	.globl _SPDAT
                                    179 	.globl _SPSTA
                                    180 	.globl _SPCON
                                    181 	.globl _SADEN
                                    182 	.globl _SADDR
                                    183 	.globl _WDTPRG
                                    184 	.globl _WDTRST
                                    185 	.globl _P5
                                    186 	.globl _P4
                                    187 	.globl _IPH1
                                    188 	.globl _IPL1
                                    189 	.globl _IPH0
                                    190 	.globl _IPL0
                                    191 	.globl _IEN1
                                    192 	.globl _IEN0
                                    193 	.globl _CMOD
                                    194 	.globl _CL
                                    195 	.globl _CH
                                    196 	.globl _CCON
                                    197 	.globl _CCAPM4
                                    198 	.globl _CCAPM3
                                    199 	.globl _CCAPM2
                                    200 	.globl _CCAPM1
                                    201 	.globl _CCAPM0
                                    202 	.globl _CCAP4L
                                    203 	.globl _CCAP3L
                                    204 	.globl _CCAP2L
                                    205 	.globl _CCAP1L
                                    206 	.globl _CCAP0L
                                    207 	.globl _CCAP4H
                                    208 	.globl _CCAP3H
                                    209 	.globl _CCAP2H
                                    210 	.globl _CCAP1H
                                    211 	.globl _CCAP0H
                                    212 	.globl _CKCON1
                                    213 	.globl _CKCON0
                                    214 	.globl _CKRL
                                    215 	.globl _AUXR1
                                    216 	.globl _AUXR
                                    217 	.globl _TH2
                                    218 	.globl _TL2
                                    219 	.globl _RCAP2H
                                    220 	.globl _RCAP2L
                                    221 	.globl _T2CON
                                    222 	.globl _spi_buffer_write_PARM_3
                                    223 	.globl _spi_buffer_write_PARM_2
                                    224 	.globl _spi_buffer_read_PARM_3
                                    225 	.globl _spi_buffer_read_PARM_2
                                    226 	.globl _buffer_init_PARM_2
                                    227 	.globl _mac_spi_read_PARM_2
                                    228 	.globl _phy_spi_write_PARM_2
                                    229 	.globl _eth_spi_read_PARM_2
                                    230 	.globl _spi_control_write_PARM_3
                                    231 	.globl _spi_control_write_PARM_2
                                    232 	.globl _SPI_ReadByte
                                    233 	.globl _spi_set_autoinc
                                    234 	.globl _select_reg_bank
                                    235 	.globl _spi_control_write
                                    236 	.globl _configure_SPI
                                    237 	.globl _SPI_send
                                    238 	.globl _enc_reset
                                    239 	.globl _eth_spi_read
                                    240 	.globl _phy_spi_write
                                    241 	.globl _mac_spi_read
                                    242 	.globl _phy_spi_read
                                    243 	.globl _busy_wait
                                    244 	.globl _buffer_init
                                    245 	.globl _spi_buffer_read
                                    246 	.globl _spi_buffer_write
                                    247 	.globl _init_ENC
                                    248 	.globl _init_MAC
                                    249 ;--------------------------------------------------------
                                    250 ; special function registers
                                    251 ;--------------------------------------------------------
                                    252 	.area RSEG    (ABS,DATA)
      000000                        253 	.org 0x0000
                           0000C8   254 _T2CON	=	0x00c8
                           0000CA   255 _RCAP2L	=	0x00ca
                           0000CB   256 _RCAP2H	=	0x00cb
                           0000CC   257 _TL2	=	0x00cc
                           0000CD   258 _TH2	=	0x00cd
                           00008E   259 _AUXR	=	0x008e
                           0000A2   260 _AUXR1	=	0x00a2
                           000097   261 _CKRL	=	0x0097
                           00008F   262 _CKCON0	=	0x008f
                           0000AF   263 _CKCON1	=	0x00af
                           0000FA   264 _CCAP0H	=	0x00fa
                           0000FB   265 _CCAP1H	=	0x00fb
                           0000FC   266 _CCAP2H	=	0x00fc
                           0000FD   267 _CCAP3H	=	0x00fd
                           0000FE   268 _CCAP4H	=	0x00fe
                           0000EA   269 _CCAP0L	=	0x00ea
                           0000EB   270 _CCAP1L	=	0x00eb
                           0000EC   271 _CCAP2L	=	0x00ec
                           0000ED   272 _CCAP3L	=	0x00ed
                           0000EE   273 _CCAP4L	=	0x00ee
                           0000DA   274 _CCAPM0	=	0x00da
                           0000DB   275 _CCAPM1	=	0x00db
                           0000DC   276 _CCAPM2	=	0x00dc
                           0000DD   277 _CCAPM3	=	0x00dd
                           0000DE   278 _CCAPM4	=	0x00de
                           0000D8   279 _CCON	=	0x00d8
                           0000F9   280 _CH	=	0x00f9
                           0000E9   281 _CL	=	0x00e9
                           0000D9   282 _CMOD	=	0x00d9
                           0000A8   283 _IEN0	=	0x00a8
                           0000B1   284 _IEN1	=	0x00b1
                           0000B8   285 _IPL0	=	0x00b8
                           0000B7   286 _IPH0	=	0x00b7
                           0000B2   287 _IPL1	=	0x00b2
                           0000B3   288 _IPH1	=	0x00b3
                           0000C0   289 _P4	=	0x00c0
                           0000E8   290 _P5	=	0x00e8
                           0000A6   291 _WDTRST	=	0x00a6
                           0000A7   292 _WDTPRG	=	0x00a7
                           0000A9   293 _SADDR	=	0x00a9
                           0000B9   294 _SADEN	=	0x00b9
                           0000C3   295 _SPCON	=	0x00c3
                           0000C4   296 _SPSTA	=	0x00c4
                           0000C5   297 _SPDAT	=	0x00c5
                           0000C9   298 _T2MOD	=	0x00c9
                           00009B   299 _BDRCON	=	0x009b
                           00009A   300 _BRL	=	0x009a
                           00009C   301 _KBLS	=	0x009c
                           00009D   302 _KBE	=	0x009d
                           00009E   303 _KBF	=	0x009e
                           0000D2   304 _EECON	=	0x00d2
                           0000E0   305 _ACC	=	0x00e0
                           0000F0   306 _B	=	0x00f0
                           000083   307 _DPH	=	0x0083
                           000083   308 _DP0H	=	0x0083
                           000082   309 _DPL	=	0x0082
                           000082   310 _DP0L	=	0x0082
                           0000A8   311 _IE	=	0x00a8
                           0000B8   312 _IP	=	0x00b8
                           000080   313 _P0	=	0x0080
                           000090   314 _P1	=	0x0090
                           0000A0   315 _P2	=	0x00a0
                           0000B0   316 _P3	=	0x00b0
                           000087   317 _PCON	=	0x0087
                           0000D0   318 _PSW	=	0x00d0
                           000099   319 _SBUF	=	0x0099
                           000099   320 _SBUF0	=	0x0099
                           000098   321 _SCON	=	0x0098
                           000081   322 _SP	=	0x0081
                           000088   323 _TCON	=	0x0088
                           00008C   324 _TH0	=	0x008c
                           00008D   325 _TH1	=	0x008d
                           00008A   326 _TL0	=	0x008a
                           00008B   327 _TL1	=	0x008b
                           000089   328 _TMOD	=	0x0089
                                    329 ;--------------------------------------------------------
                                    330 ; special function bits
                                    331 ;--------------------------------------------------------
                                    332 	.area RSEG    (ABS,DATA)
      000000                        333 	.org 0x0000
                           0000AD   334 _ET2	=	0x00ad
                           0000BD   335 _PT2	=	0x00bd
                           0000C8   336 _T2CON_0	=	0x00c8
                           0000C9   337 _T2CON_1	=	0x00c9
                           0000CA   338 _T2CON_2	=	0x00ca
                           0000CB   339 _T2CON_3	=	0x00cb
                           0000CC   340 _T2CON_4	=	0x00cc
                           0000CD   341 _T2CON_5	=	0x00cd
                           0000CE   342 _T2CON_6	=	0x00ce
                           0000CF   343 _T2CON_7	=	0x00cf
                           0000C8   344 _CP_RL2	=	0x00c8
                           0000C9   345 _C_T2	=	0x00c9
                           0000CA   346 _TR2	=	0x00ca
                           0000CB   347 _EXEN2	=	0x00cb
                           0000CC   348 _TCLK	=	0x00cc
                           0000CD   349 _RCLK	=	0x00cd
                           0000CE   350 _EXF2	=	0x00ce
                           0000CF   351 _TF2	=	0x00cf
                           0000DF   352 _CF	=	0x00df
                           0000DE   353 _CR	=	0x00de
                           0000DC   354 _CCF4	=	0x00dc
                           0000DB   355 _CCF3	=	0x00db
                           0000DA   356 _CCF2	=	0x00da
                           0000D9   357 _CCF1	=	0x00d9
                           0000D8   358 _CCF0	=	0x00d8
                           0000AE   359 _EC	=	0x00ae
                           0000BE   360 _PPCL	=	0x00be
                           0000BD   361 _PT2L	=	0x00bd
                           0000BC   362 _PSL	=	0x00bc
                           0000BB   363 _PT1L	=	0x00bb
                           0000BA   364 _PX1L	=	0x00ba
                           0000B9   365 _PT0L	=	0x00b9
                           0000B8   366 _PX0L	=	0x00b8
                           0000C0   367 _P4_0	=	0x00c0
                           0000C1   368 _P4_1	=	0x00c1
                           0000C2   369 _P4_2	=	0x00c2
                           0000C3   370 _P4_3	=	0x00c3
                           0000C4   371 _P4_4	=	0x00c4
                           0000C5   372 _P4_5	=	0x00c5
                           0000C6   373 _P4_6	=	0x00c6
                           0000C7   374 _P4_7	=	0x00c7
                           0000E8   375 _P5_0	=	0x00e8
                           0000E9   376 _P5_1	=	0x00e9
                           0000EA   377 _P5_2	=	0x00ea
                           0000EB   378 _P5_3	=	0x00eb
                           0000EC   379 _P5_4	=	0x00ec
                           0000ED   380 _P5_5	=	0x00ed
                           0000EE   381 _P5_6	=	0x00ee
                           0000EF   382 _P5_7	=	0x00ef
                           0000F0   383 _BREG_F0	=	0x00f0
                           0000F1   384 _BREG_F1	=	0x00f1
                           0000F2   385 _BREG_F2	=	0x00f2
                           0000F3   386 _BREG_F3	=	0x00f3
                           0000F4   387 _BREG_F4	=	0x00f4
                           0000F5   388 _BREG_F5	=	0x00f5
                           0000F6   389 _BREG_F6	=	0x00f6
                           0000F7   390 _BREG_F7	=	0x00f7
                           0000A8   391 _EX0	=	0x00a8
                           0000A9   392 _ET0	=	0x00a9
                           0000AA   393 _EX1	=	0x00aa
                           0000AB   394 _ET1	=	0x00ab
                           0000AC   395 _ES	=	0x00ac
                           0000AF   396 _EA	=	0x00af
                           0000B8   397 _PX0	=	0x00b8
                           0000B9   398 _PT0	=	0x00b9
                           0000BA   399 _PX1	=	0x00ba
                           0000BB   400 _PT1	=	0x00bb
                           0000BC   401 _PS	=	0x00bc
                           000080   402 _P0_0	=	0x0080
                           000081   403 _P0_1	=	0x0081
                           000082   404 _P0_2	=	0x0082
                           000083   405 _P0_3	=	0x0083
                           000084   406 _P0_4	=	0x0084
                           000085   407 _P0_5	=	0x0085
                           000086   408 _P0_6	=	0x0086
                           000087   409 _P0_7	=	0x0087
                           000090   410 _P1_0	=	0x0090
                           000091   411 _P1_1	=	0x0091
                           000092   412 _P1_2	=	0x0092
                           000093   413 _P1_3	=	0x0093
                           000094   414 _P1_4	=	0x0094
                           000095   415 _P1_5	=	0x0095
                           000096   416 _P1_6	=	0x0096
                           000097   417 _P1_7	=	0x0097
                           0000A0   418 _P2_0	=	0x00a0
                           0000A1   419 _P2_1	=	0x00a1
                           0000A2   420 _P2_2	=	0x00a2
                           0000A3   421 _P2_3	=	0x00a3
                           0000A4   422 _P2_4	=	0x00a4
                           0000A5   423 _P2_5	=	0x00a5
                           0000A6   424 _P2_6	=	0x00a6
                           0000A7   425 _P2_7	=	0x00a7
                           0000B0   426 _P3_0	=	0x00b0
                           0000B1   427 _P3_1	=	0x00b1
                           0000B2   428 _P3_2	=	0x00b2
                           0000B3   429 _P3_3	=	0x00b3
                           0000B4   430 _P3_4	=	0x00b4
                           0000B5   431 _P3_5	=	0x00b5
                           0000B6   432 _P3_6	=	0x00b6
                           0000B7   433 _P3_7	=	0x00b7
                           0000B0   434 _RXD	=	0x00b0
                           0000B0   435 _RXD0	=	0x00b0
                           0000B1   436 _TXD	=	0x00b1
                           0000B1   437 _TXD0	=	0x00b1
                           0000B2   438 _INT0	=	0x00b2
                           0000B3   439 _INT1	=	0x00b3
                           0000B4   440 _T0	=	0x00b4
                           0000B5   441 _T1	=	0x00b5
                           0000B6   442 _WR	=	0x00b6
                           0000B7   443 _RD	=	0x00b7
                           0000D0   444 _P	=	0x00d0
                           0000D1   445 _F1	=	0x00d1
                           0000D2   446 _OV	=	0x00d2
                           0000D3   447 _RS0	=	0x00d3
                           0000D4   448 _RS1	=	0x00d4
                           0000D5   449 _F0	=	0x00d5
                           0000D6   450 _AC	=	0x00d6
                           0000D7   451 _CY	=	0x00d7
                           000098   452 _RI	=	0x0098
                           000099   453 _TI	=	0x0099
                           00009A   454 _RB8	=	0x009a
                           00009B   455 _TB8	=	0x009b
                           00009C   456 _REN	=	0x009c
                           00009D   457 _SM2	=	0x009d
                           00009E   458 _SM1	=	0x009e
                           00009F   459 _SM0	=	0x009f
                           000088   460 _IT0	=	0x0088
                           000089   461 _IE0	=	0x0089
                           00008A   462 _IT1	=	0x008a
                           00008B   463 _IE1	=	0x008b
                           00008C   464 _TR0	=	0x008c
                           00008D   465 _TF0	=	0x008d
                           00008E   466 _TR1	=	0x008e
                           00008F   467 _TF1	=	0x008f
                                    468 ;--------------------------------------------------------
                                    469 ; overlayable register banks
                                    470 ;--------------------------------------------------------
                                    471 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        472 	.ds 8
                                    473 ;--------------------------------------------------------
                                    474 ; internal ram data
                                    475 ;--------------------------------------------------------
                                    476 	.area DSEG    (DATA)
                                    477 ;--------------------------------------------------------
                                    478 ; overlayable items in internal ram
                                    479 ;--------------------------------------------------------
                                    480 ;--------------------------------------------------------
                                    481 ; indirectly addressable internal ram data
                                    482 ;--------------------------------------------------------
                                    483 	.area ISEG    (DATA)
                                    484 ;--------------------------------------------------------
                                    485 ; absolute internal ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area IABS    (ABS,DATA)
                                    488 	.area IABS    (ABS,DATA)
                                    489 ;--------------------------------------------------------
                                    490 ; bit data
                                    491 ;--------------------------------------------------------
                                    492 	.area BSEG    (BIT)
                                    493 ;--------------------------------------------------------
                                    494 ; paged external ram data
                                    495 ;--------------------------------------------------------
                                    496 	.area PSEG    (PAG,XDATA)
                                    497 ;--------------------------------------------------------
                                    498 ; uninitialized external ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area XSEG    (XDATA)
      000000                        501 _SPI_ReadByte_received_data_10000_66:
      000000                        502 	.ds 1
      000001                        503 _select_reg_bank_bank_10000_70:
      000001                        504 	.ds 1
      000002                        505 _select_reg_bank_data_10001_72:
      000002                        506 	.ds 1
      000003                        507 _spi_control_write_PARM_2:
      000003                        508 	.ds 1
      000004                        509 _spi_control_write_PARM_3:
      000004                        510 	.ds 1
      000005                        511 _spi_control_write_reg_bank_10000_75:
      000005                        512 	.ds 1
      000006                        513 _SPI_send_data_10000_79:
      000006                        514 	.ds 1
      000007                        515 _eth_spi_read_PARM_2:
      000007                        516 	.ds 1
      000008                        517 _eth_spi_read_addr_10000_84:
      000008                        518 	.ds 1
      000009                        519 _phy_spi_write_PARM_2:
      000009                        520 	.ds 2
      00000B                        521 _phy_spi_write_addr_10000_88:
      00000B                        522 	.ds 1
      00000C                        523 _mac_spi_read_PARM_2:
      00000C                        524 	.ds 1
      00000D                        525 _mac_spi_read_addr_10000_90:
      00000D                        526 	.ds 1
      00000E                        527 _phy_spi_read_addr_10000_94:
      00000E                        528 	.ds 1
      00000F                        529 _busy_wait_data_10000_98:
      00000F                        530 	.ds 1
      000010                        531 _buffer_init_PARM_2:
      000010                        532 	.ds 2
      000012                        533 _buffer_init_start_address_10000_100:
      000012                        534 	.ds 2
      000014                        535 _spi_buffer_read_PARM_2:
      000014                        536 	.ds 2
      000016                        537 _spi_buffer_read_PARM_3:
      000016                        538 	.ds 3
      000019                        539 _spi_buffer_read_num_bytes_10000_104:
      000019                        540 	.ds 2
      00001B                        541 _spi_buffer_read_i_20002_111:
      00001B                        542 	.ds 2
      00001D                        543 _spi_buffer_write_PARM_2:
      00001D                        544 	.ds 2
      00001F                        545 _spi_buffer_write_PARM_3:
      00001F                        546 	.ds 3
      000022                        547 _spi_buffer_write_num_bytes_10000_113:
      000022                        548 	.ds 2
      000024                        549 _spi_buffer_write_i_20002_120:
      000024                        550 	.ds 2
                                    551 ;--------------------------------------------------------
                                    552 ; absolute external ram data
                                    553 ;--------------------------------------------------------
                                    554 	.area XABS    (ABS,XDATA)
                                    555 ;--------------------------------------------------------
                                    556 ; initialized external ram data
                                    557 ;--------------------------------------------------------
                                    558 	.area XISEG   (XDATA)
                                    559 	.area HOME    (CODE)
                                    560 	.area GSINIT0 (CODE)
                                    561 	.area GSINIT1 (CODE)
                                    562 	.area GSINIT2 (CODE)
                                    563 	.area GSINIT3 (CODE)
                                    564 	.area GSINIT4 (CODE)
                                    565 	.area GSINIT5 (CODE)
                                    566 	.area GSINIT  (CODE)
                                    567 	.area GSFINAL (CODE)
                                    568 	.area CSEG    (CODE)
                                    569 ;--------------------------------------------------------
                                    570 ; global & static initialisations
                                    571 ;--------------------------------------------------------
                                    572 	.area HOME    (CODE)
                                    573 	.area GSINIT  (CODE)
                                    574 	.area GSFINAL (CODE)
                                    575 	.area GSINIT  (CODE)
                                    576 ;--------------------------------------------------------
                                    577 ; Home
                                    578 ;--------------------------------------------------------
                                    579 	.area HOME    (CODE)
                                    580 	.area HOME    (CODE)
                                    581 ;--------------------------------------------------------
                                    582 ; code
                                    583 ;--------------------------------------------------------
                                    584 	.area CSEG    (CODE)
                                    585 ;------------------------------------------------------------
                                    586 ;Allocation info for local variables in function 'SPI_ReadByte'
                                    587 ;------------------------------------------------------------
                                    588 ;received_data             Allocated with name '_SPI_ReadByte_received_data_10000_66'
                                    589 ;------------------------------------------------------------
                                    590 ;	SPI.c:4: uint8_t SPI_ReadByte(void)
                                    591 ;	-----------------------------------------
                                    592 ;	 function SPI_ReadByte
                                    593 ;	-----------------------------------------
      000000                        594 _SPI_ReadByte:
                           000007   595 	ar7 = 0x07
                           000006   596 	ar6 = 0x06
                           000005   597 	ar5 = 0x05
                           000004   598 	ar4 = 0x04
                           000003   599 	ar3 = 0x03
                           000002   600 	ar2 = 0x02
                           000001   601 	ar1 = 0x01
                           000000   602 	ar0 = 0x00
                                    603 ;	SPI.c:9: SPDAT = 0xFF;
      000000 75 C5 FF         [24]  604 	mov	_SPDAT,#0xff
                                    605 ;	SPI.c:12: while (!(SPSTA & 0x80)) {
      000003                        606 00101$:
      000003 E5 C4            [12]  607 	mov	a,_SPSTA
      000005 30 E7 FB         [24]  608 	jnb	acc.7,00101$
                                    609 ;	SPI.c:17: received_data = SPDAT;
      000008 90r00r00         [24]  610 	mov	dptr,#_SPI_ReadByte_received_data_10000_66
      00000B E5 C5            [12]  611 	mov	a,_SPDAT
      00000D F0               [24]  612 	movx	@dptr,a
                                    613 ;	SPI.c:19: return received_data;
      00000E E0               [24]  614 	movx	a,@dptr
                                    615 ;	SPI.c:20: }
      00000F F5 82            [12]  616 	mov	dpl,a
      000011 22               [24]  617 	ret
                                    618 ;------------------------------------------------------------
                                    619 ;Allocation info for local variables in function 'spi_set_autoinc'
                                    620 ;------------------------------------------------------------
                                    621 ;	SPI.c:22: void spi_set_autoinc(void)
                                    622 ;	-----------------------------------------
                                    623 ;	 function spi_set_autoinc
                                    624 ;	-----------------------------------------
      000012                        625 _spi_set_autoinc:
                                    626 ;	SPI.c:24: CS_LOW;                          // Pull CS low to select the ENC28J60
                                    627 ;	assignBit
      000012 C2 91            [12]  628 	clr	_P1_1
                                    629 ;	SPI.c:26: SPI_send(0x5E);                  // Write ECON2 register address
      000014 75 82 5E         [24]  630 	mov	dpl, #0x5e
      000017 12r01r13         [24]  631 	lcall	_SPI_send
                                    632 ;	SPI.c:27: SPI_send(0x80);                  // Set the AUTOINC bit
      00001A 75 82 80         [24]  633 	mov	dpl, #0x80
      00001D 12r01r13         [24]  634 	lcall	_SPI_send
                                    635 ;	SPI.c:29: CS_HIGH;                         // Pull CS high to deselect the ENC28J60
                                    636 ;	assignBit
      000020 D2 91            [12]  637 	setb	_P1_1
                                    638 ;	SPI.c:30: }
      000022 22               [24]  639 	ret
                                    640 ;------------------------------------------------------------
                                    641 ;Allocation info for local variables in function 'select_reg_bank'
                                    642 ;------------------------------------------------------------
                                    643 ;bank                      Allocated with name '_select_reg_bank_bank_10000_70'
                                    644 ;data                      Allocated with name '_select_reg_bank_data_10001_72'
                                    645 ;i                         Allocated with name '_select_reg_bank_i_20001_74'
                                    646 ;------------------------------------------------------------
                                    647 ;	SPI.c:33: void select_reg_bank(uint8_t bank)
                                    648 ;	-----------------------------------------
                                    649 ;	 function select_reg_bank
                                    650 ;	-----------------------------------------
      000023                        651 _select_reg_bank:
      000023 E5 82            [12]  652 	mov	a,dpl
      000025 90r00r01         [24]  653 	mov	dptr,#_select_reg_bank_bank_10000_70
      000028 F0               [24]  654 	movx	@dptr,a
                                    655 ;	SPI.c:35: CS_LOW;
                                    656 ;	assignBit
      000029 C2 91            [12]  657 	clr	_P1_1
                                    658 ;	SPI.c:36: SPI_send(0X1F); // Send the address
      00002B 75 82 1F         [24]  659 	mov	dpl, #0x1f
      00002E 12r01r13         [24]  660 	lcall	_SPI_send
                                    661 ;	SPI.c:37: uint8_t data = SPI_ReadByte(); // Read the data
      000031 12r00r00         [24]  662 	lcall	_SPI_ReadByte
      000034 AF 82            [24]  663 	mov	r7, dpl
                                    664 ;	SPI.c:38: CS_HIGH;
                                    665 ;	assignBit
      000036 D2 91            [12]  666 	setb	_P1_1
                                    667 ;	SPI.c:41: data &= ~0x03; // Clear the last two bits
      000038 53 07 FC         [24]  668 	anl	ar7,#0xfc
                                    669 ;	SPI.c:42: switch (bank)
      00003B 90r00r01         [24]  670 	mov	dptr,#_select_reg_bank_bank_10000_70
      00003E E0               [24]  671 	movx	a,@dptr
      00003F FE               [12]  672 	mov  r6,a
      000040 24 FC            [12]  673 	add	a,#0xff - 0x03
      000042 40 30            [24]  674 	jc	00105$
      000044 EE               [12]  675 	mov	a,r6
      000045 2E               [12]  676 	add	a,r6
                                    677 ;	SPI.c:44: case 0:
      000046 90r00r4A         [24]  678 	mov	dptr,#00133$
      000049 73               [24]  679 	jmp	@a+dptr
      00004A                        680 00133$:
      00004A 80 06            [24]  681 	sjmp	00101$
      00004C 80 0B            [24]  682 	sjmp	00102$
      00004E 80 12            [24]  683 	sjmp	00103$
      000050 80 19            [24]  684 	sjmp	00104$
      000052                        685 00101$:
                                    686 ;	SPI.c:45: data |= 0x00; // Last two bits: 00
      000052 90r00r02         [24]  687 	mov	dptr,#_select_reg_bank_data_10001_72
      000055 EF               [12]  688 	mov	a,r7
      000056 F0               [24]  689 	movx	@dptr,a
                                    690 ;	SPI.c:46: break;
                                    691 ;	SPI.c:47: case 1:
      000057 80 31            [24]  692 	sjmp	00115$
      000059                        693 00102$:
                                    694 ;	SPI.c:48: data |= 0x01; // Last two bits: 01
      000059 90r00r02         [24]  695 	mov	dptr,#_select_reg_bank_data_10001_72
      00005C 74 01            [12]  696 	mov	a,#0x01
      00005E 4F               [12]  697 	orl	a,r7
      00005F F0               [24]  698 	movx	@dptr,a
                                    699 ;	SPI.c:49: break;
                                    700 ;	SPI.c:50: case 2:
      000060 80 28            [24]  701 	sjmp	00115$
      000062                        702 00103$:
                                    703 ;	SPI.c:51: data |= 0x02; // Last two bits: 10
      000062 90r00r02         [24]  704 	mov	dptr,#_select_reg_bank_data_10001_72
      000065 74 02            [12]  705 	mov	a,#0x02
      000067 4F               [12]  706 	orl	a,r7
      000068 F0               [24]  707 	movx	@dptr,a
                                    708 ;	SPI.c:52: break;
                                    709 ;	SPI.c:53: case 3:
      000069 80 1F            [24]  710 	sjmp	00115$
      00006B                        711 00104$:
                                    712 ;	SPI.c:54: data |= 0x03; // Last two bits: 11
      00006B 90r00r02         [24]  713 	mov	dptr,#_select_reg_bank_data_10001_72
      00006E 74 03            [12]  714 	mov	a,#0x03
      000070 4F               [12]  715 	orl	a,r7
      000071 F0               [24]  716 	movx	@dptr,a
                                    717 ;	SPI.c:55: break;
                                    718 ;	SPI.c:56: default:
      000072 80 16            [24]  719 	sjmp	00115$
      000074                        720 00105$:
                                    721 ;	SPI.c:57: printf("wrong bank");
      000074 74r00            [12]  722 	mov	a,#___str_0
      000076 C0 E0            [24]  723 	push	acc
      000078 74s00            [12]  724 	mov	a,#(___str_0 >> 8)
      00007A C0 E0            [24]  725 	push	acc
      00007C 74 80            [12]  726 	mov	a,#0x80
      00007E C0 E0            [24]  727 	push	acc
      000080 12r00r00         [24]  728 	lcall	_printf
      000083 15 81            [12]  729 	dec	sp
      000085 15 81            [12]  730 	dec	sp
      000087 15 81            [12]  731 	dec	sp
                                    732 ;	SPI.c:58: return;
                                    733 ;	SPI.c:61: for (int i = 0; i < 16; i++); // Delay
      000089 22               [24]  734 	ret
      00008A                        735 00115$:
      00008A 7F 00            [12]  736 	mov	r7,#0x00
      00008C                        737 00109$:
      00008C BF 10 00         [24]  738 	cjne	r7,#0x10,00134$
      00008F                        739 00134$:
      00008F 50 03            [24]  740 	jnc	00107$
      000091 0F               [12]  741 	inc	r7
      000092 80 F8            [24]  742 	sjmp	00109$
      000094                        743 00107$:
                                    744 ;	SPI.c:63: CS_LOW;
                                    745 ;	assignBit
      000094 C2 91            [12]  746 	clr	_P1_1
                                    747 ;	SPI.c:64: SPI_send(0x5F);
      000096 75 82 5F         [24]  748 	mov	dpl, #0x5f
      000099 12r01r13         [24]  749 	lcall	_SPI_send
                                    750 ;	SPI.c:65: SPI_send(data); // Send the modified data
      00009C 90r00r02         [24]  751 	mov	dptr,#_select_reg_bank_data_10001_72
      00009F E0               [24]  752 	movx	a,@dptr
      0000A0 F5 82            [12]  753 	mov	dpl,a
      0000A2 12r01r13         [24]  754 	lcall	_SPI_send
                                    755 ;	SPI.c:66: CS_HIGH;
                                    756 ;	assignBit
      0000A5 D2 91            [12]  757 	setb	_P1_1
                                    758 ;	SPI.c:68: }
      0000A7 22               [24]  759 	ret
                                    760 ;------------------------------------------------------------
                                    761 ;Allocation info for local variables in function 'spi_control_write'
                                    762 ;------------------------------------------------------------
                                    763 ;addr                      Allocated with name '_spi_control_write_PARM_2'
                                    764 ;data                      Allocated with name '_spi_control_write_PARM_3'
                                    765 ;reg_bank                  Allocated with name '_spi_control_write_reg_bank_10000_75'
                                    766 ;opcode                    Allocated with name '_spi_control_write_opcode_10000_76'
                                    767 ;------------------------------------------------------------
                                    768 ;	SPI.c:69: void spi_control_write(uint8_t reg_bank, uint8_t addr, uint8_t data)
                                    769 ;	-----------------------------------------
                                    770 ;	 function spi_control_write
                                    771 ;	-----------------------------------------
      0000A8                        772 _spi_control_write:
      0000A8 E5 82            [12]  773 	mov	a,dpl
      0000AA 90r00r05         [24]  774 	mov	dptr,#_spi_control_write_reg_bank_10000_75
      0000AD F0               [24]  775 	movx	@dptr,a
                                    776 ;	SPI.c:72: addr = addr + opcode; // Add the opcode to the address
      0000AE 90r00r03         [24]  777 	mov	dptr,#_spi_control_write_PARM_2
      0000B1 E0               [24]  778 	movx	a,@dptr
      0000B2 24 40            [12]  779 	add	a, #0x40
      0000B4 F0               [24]  780 	movx	@dptr,a
                                    781 ;	SPI.c:74: select_reg_bank(reg_bank); // Function to select the register bank
      0000B5 90r00r05         [24]  782 	mov	dptr,#_spi_control_write_reg_bank_10000_75
      0000B8 E0               [24]  783 	movx	a,@dptr
      0000B9 F5 82            [12]  784 	mov	dpl,a
      0000BB 12r00r23         [24]  785 	lcall	_select_reg_bank
                                    786 ;	SPI.c:77: CS_LOW;
                                    787 ;	assignBit
      0000BE C2 91            [12]  788 	clr	_P1_1
                                    789 ;	SPI.c:80: SPI_send(addr);
      0000C0 90r00r03         [24]  790 	mov	dptr,#_spi_control_write_PARM_2
      0000C3 E0               [24]  791 	movx	a,@dptr
      0000C4 FF               [12]  792 	mov	r7,a
      0000C5 F5 82            [12]  793 	mov	dpl,a
      0000C7 C0 07            [24]  794 	push	ar7
      0000C9 12r01r13         [24]  795 	lcall	_SPI_send
      0000CC D0 07            [24]  796 	pop	ar7
                                    797 ;	SPI.c:83: SPI_send(data);
      0000CE 90r00r04         [24]  798 	mov	dptr,#_spi_control_write_PARM_3
      0000D1 E0               [24]  799 	movx	a,@dptr
      0000D2 FE               [12]  800 	mov	r6,a
      0000D3 F5 82            [12]  801 	mov	dpl,a
      0000D5 C0 07            [24]  802 	push	ar7
      0000D7 C0 06            [24]  803 	push	ar6
      0000D9 12r01r13         [24]  804 	lcall	_SPI_send
      0000DC D0 06            [24]  805 	pop	ar6
      0000DE D0 07            [24]  806 	pop	ar7
                                    807 ;	SPI.c:86: CS_HIGH;
                                    808 ;	assignBit
      0000E0 D2 91            [12]  809 	setb	_P1_1
                                    810 ;	SPI.c:89: printf("Write: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      0000E2 7D 00            [12]  811 	mov	r5,#0x00
      0000E4 7C 00            [12]  812 	mov	r4,#0x00
      0000E6 C0 06            [24]  813 	push	ar6
      0000E8 C0 05            [24]  814 	push	ar5
      0000EA C0 07            [24]  815 	push	ar7
      0000EC C0 04            [24]  816 	push	ar4
      0000EE 74r0B            [12]  817 	mov	a,#___str_1
      0000F0 C0 E0            [24]  818 	push	acc
      0000F2 74s00            [12]  819 	mov	a,#(___str_1 >> 8)
      0000F4 C0 E0            [24]  820 	push	acc
      0000F6 74 80            [12]  821 	mov	a,#0x80
      0000F8 C0 E0            [24]  822 	push	acc
      0000FA 12r00r00         [24]  823 	lcall	_printf
      0000FD E5 81            [12]  824 	mov	a,sp
      0000FF 24 F9            [12]  825 	add	a,#0xf9
      000101 F5 81            [12]  826 	mov	sp,a
                                    827 ;	SPI.c:90: }
      000103 22               [24]  828 	ret
                                    829 ;------------------------------------------------------------
                                    830 ;Allocation info for local variables in function 'configure_SPI'
                                    831 ;------------------------------------------------------------
                                    832 ;	SPI.c:93: void configure_SPI(void)
                                    833 ;	-----------------------------------------
                                    834 ;	 function configure_SPI
                                    835 ;	-----------------------------------------
      000104                        836 _configure_SPI:
                                    837 ;	SPI.c:95: CS_PIN = 1;
                                    838 ;	assignBit
      000104 D2 91            [12]  839 	setb	_P1_1
                                    840 ;	SPI.c:96: SPCON = 0x00;
      000106 75 C3 00         [24]  841 	mov	_SPCON,#0x00
                                    842 ;	SPI.c:97: SPCON |= SS_DISABLE;
      000109 43 C3 20         [24]  843 	orl	_SPCON,#0x20
                                    844 ;	SPI.c:98: SPCON |= MASTER_MODE;
      00010C 43 C3 10         [24]  845 	orl	_SPCON,#0x10
                                    846 ;	SPI.c:99: SPCON |= SPI_ENABLE;
      00010F 43 C3 40         [24]  847 	orl	_SPCON,#0x40
                                    848 ;	SPI.c:100: }
      000112 22               [24]  849 	ret
                                    850 ;------------------------------------------------------------
                                    851 ;Allocation info for local variables in function 'SPI_send'
                                    852 ;------------------------------------------------------------
                                    853 ;data                      Allocated with name '_SPI_send_data_10000_79'
                                    854 ;------------------------------------------------------------
                                    855 ;	SPI.c:103: void SPI_send(uint8_t data)
                                    856 ;	-----------------------------------------
                                    857 ;	 function SPI_send
                                    858 ;	-----------------------------------------
      000113                        859 _SPI_send:
      000113 E5 82            [12]  860 	mov	a,dpl
      000115 90r00r06         [24]  861 	mov	dptr,#_SPI_send_data_10000_79
      000118 F0               [24]  862 	movx	@dptr,a
                                    863 ;	SPI.c:106: SPDAT = data;           // Config + MSB of data
      000119 E0               [24]  864 	movx	a,@dptr
      00011A F5 C5            [12]  865 	mov	_SPDAT,a
                                    866 ;	SPI.c:108: while (!(SPSTA & 0x80))
      00011C                        867 00101$:
      00011C E5 C4            [12]  868 	mov	a,_SPSTA
      00011E 30 E7 FB         [24]  869 	jnb	acc.7,00101$
                                    870 ;	SPI.c:113: }
      000121 22               [24]  871 	ret
                                    872 ;------------------------------------------------------------
                                    873 ;Allocation info for local variables in function 'enc_reset'
                                    874 ;------------------------------------------------------------
                                    875 ;	SPI.c:115: void enc_reset(void)
                                    876 ;	-----------------------------------------
                                    877 ;	 function enc_reset
                                    878 ;	-----------------------------------------
      000122                        879 _enc_reset:
                                    880 ;	SPI.c:117: CS_LOW;                    // Pull CS low to select the ENC28J60
                                    881 ;	assignBit
      000122 C2 91            [12]  882 	clr	_P1_1
                                    883 ;	SPI.c:118: SPI_send(0xFF);            // Send reset command
      000124 75 82 FF         [24]  884 	mov	dpl, #0xff
      000127 12r01r13         [24]  885 	lcall	_SPI_send
                                    886 ;	SPI.c:119: CS_HIGH;                   // Pull CS high to deselect the ENC28J60
                                    887 ;	assignBit
      00012A D2 91            [12]  888 	setb	_P1_1
                                    889 ;	SPI.c:120: }
      00012C 22               [24]  890 	ret
                                    891 ;------------------------------------------------------------
                                    892 ;Allocation info for local variables in function 'eth_spi_read'
                                    893 ;------------------------------------------------------------
                                    894 ;bank                      Allocated with name '_eth_spi_read_PARM_2'
                                    895 ;addr                      Allocated with name '_eth_spi_read_addr_10000_84'
                                    896 ;data                      Allocated with name '_eth_spi_read_data_10001_87'
                                    897 ;------------------------------------------------------------
                                    898 ;	SPI.c:122: uint8_t eth_spi_read(uint8_t addr, uint8_t bank)
                                    899 ;	-----------------------------------------
                                    900 ;	 function eth_spi_read
                                    901 ;	-----------------------------------------
      00012D                        902 _eth_spi_read:
      00012D E5 82            [12]  903 	mov	a,dpl
      00012F 90r00r08         [24]  904 	mov	dptr,#_eth_spi_read_addr_10000_84
      000132 F0               [24]  905 	movx	@dptr,a
                                    906 ;	SPI.c:124: if (addr > 0x1F) {
      000133 E0               [24]  907 	movx	a,@dptr
      000134 FF               [12]  908 	mov  r7,a
      000135 24 E0            [12]  909 	add	a,#0xff - 0x1f
      000137 50 19            [24]  910 	jnc	00102$
                                    911 ;	SPI.c:125: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      000139 74r30            [12]  912 	mov	a,#___str_2
      00013B C0 E0            [24]  913 	push	acc
      00013D 74s00            [12]  914 	mov	a,#(___str_2 >> 8)
      00013F C0 E0            [24]  915 	push	acc
      000141 74 80            [12]  916 	mov	a,#0x80
      000143 C0 E0            [24]  917 	push	acc
      000145 12r00r00         [24]  918 	lcall	_printf
      000148 15 81            [12]  919 	dec	sp
      00014A 15 81            [12]  920 	dec	sp
      00014C 15 81            [12]  921 	dec	sp
                                    922 ;	SPI.c:126: return 0;
      00014E 75 82 00         [24]  923 	mov	dpl, #0x00
      000151 22               [24]  924 	ret
      000152                        925 00102$:
                                    926 ;	SPI.c:129: select_reg_bank(bank);     // Select the appropriate bank
      000152 90r00r07         [24]  927 	mov	dptr,#_eth_spi_read_PARM_2
      000155 E0               [24]  928 	movx	a,@dptr
      000156 F5 82            [12]  929 	mov	dpl,a
      000158 C0 07            [24]  930 	push	ar7
      00015A 12r00r23         [24]  931 	lcall	_select_reg_bank
      00015D D0 07            [24]  932 	pop	ar7
                                    933 ;	SPI.c:131: CS_LOW;                    // Pull CS low to start communication
                                    934 ;	assignBit
      00015F C2 91            [12]  935 	clr	_P1_1
                                    936 ;	SPI.c:132: SPI_send(addr);            // Send the address
      000161 8F 82            [24]  937 	mov	dpl, r7
      000163 C0 07            [24]  938 	push	ar7
      000165 12r01r13         [24]  939 	lcall	_SPI_send
                                    940 ;	SPI.c:133: uint8_t data = SPI_ReadByte(); // Read the data
      000168 12r00r00         [24]  941 	lcall	_SPI_ReadByte
      00016B AE 82            [24]  942 	mov	r6, dpl
      00016D D0 07            [24]  943 	pop	ar7
                                    944 ;	SPI.c:134: CS_HIGH;                   // Pull CS high to end communication
                                    945 ;	assignBit
      00016F D2 91            [12]  946 	setb	_P1_1
                                    947 ;	SPI.c:137: printf("Read: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      000171 8E 04            [24]  948 	mov	ar4,r6
      000173 7D 00            [12]  949 	mov	r5,#0x00
      000175 7B 00            [12]  950 	mov	r3,#0x00
      000177 C0 06            [24]  951 	push	ar6
      000179 C0 04            [24]  952 	push	ar4
      00017B C0 05            [24]  953 	push	ar5
      00017D C0 07            [24]  954 	push	ar7
      00017F C0 03            [24]  955 	push	ar3
      000181 74r6A            [12]  956 	mov	a,#___str_3
      000183 C0 E0            [24]  957 	push	acc
      000185 74s00            [12]  958 	mov	a,#(___str_3 >> 8)
      000187 C0 E0            [24]  959 	push	acc
      000189 74 80            [12]  960 	mov	a,#0x80
      00018B C0 E0            [24]  961 	push	acc
      00018D 12r00r00         [24]  962 	lcall	_printf
      000190 E5 81            [12]  963 	mov	a,sp
      000192 24 F9            [12]  964 	add	a,#0xf9
      000194 F5 81            [12]  965 	mov	sp,a
      000196 D0 06            [24]  966 	pop	ar6
                                    967 ;	SPI.c:139: return data;
      000198 8E 82            [24]  968 	mov	dpl, r6
                                    969 ;	SPI.c:140: }
      00019A 22               [24]  970 	ret
                                    971 ;------------------------------------------------------------
                                    972 ;Allocation info for local variables in function 'phy_spi_write'
                                    973 ;------------------------------------------------------------
                                    974 ;data                      Allocated with name '_phy_spi_write_PARM_2'
                                    975 ;addr                      Allocated with name '_phy_spi_write_addr_10000_88'
                                    976 ;------------------------------------------------------------
                                    977 ;	SPI.c:142: void phy_spi_write(uint8_t addr, uint16_t data)
                                    978 ;	-----------------------------------------
                                    979 ;	 function phy_spi_write
                                    980 ;	-----------------------------------------
      00019B                        981 _phy_spi_write:
      00019B E5 82            [12]  982 	mov	a,dpl
      00019D 90r00r0B         [24]  983 	mov	dptr,#_phy_spi_write_addr_10000_88
      0001A0 F0               [24]  984 	movx	@dptr,a
                                    985 ;	SPI.c:144: spi_control_write(2, 0x14, addr);                      // Write PHY address
      0001A1 E0               [24]  986 	movx	a,@dptr
      0001A2 FF               [12]  987 	mov	r7,a
      0001A3 90r00r03         [24]  988 	mov	dptr,#_spi_control_write_PARM_2
      0001A6 74 14            [12]  989 	mov	a,#0x14
      0001A8 F0               [24]  990 	movx	@dptr,a
      0001A9 90r00r04         [24]  991 	mov	dptr,#_spi_control_write_PARM_3
      0001AC EF               [12]  992 	mov	a,r7
      0001AD F0               [24]  993 	movx	@dptr,a
      0001AE 75 82 02         [24]  994 	mov	dpl, #0x02
      0001B1 C0 07            [24]  995 	push	ar7
      0001B3 12r00rA8         [24]  996 	lcall	_spi_control_write
      0001B6 D0 07            [24]  997 	pop	ar7
                                    998 ;	SPI.c:145: spi_control_write(2, 0x16, (uint8_t)(data & 0xFF));    // Write LSB of data
      0001B8 90r00r09         [24]  999 	mov	dptr,#_phy_spi_write_PARM_2
      0001BB E0               [24] 1000 	movx	a,@dptr
      0001BC FD               [12] 1001 	mov	r5,a
      0001BD A3               [24] 1002 	inc	dptr
      0001BE E0               [24] 1003 	movx	a,@dptr
      0001BF FE               [12] 1004 	mov	r6,a
      0001C0 8D 04            [24] 1005 	mov	ar4,r5
      0001C2 90r00r03         [24] 1006 	mov	dptr,#_spi_control_write_PARM_2
      0001C5 74 16            [12] 1007 	mov	a,#0x16
      0001C7 F0               [24] 1008 	movx	@dptr,a
      0001C8 90r00r04         [24] 1009 	mov	dptr,#_spi_control_write_PARM_3
      0001CB EC               [12] 1010 	mov	a,r4
      0001CC F0               [24] 1011 	movx	@dptr,a
      0001CD 75 82 02         [24] 1012 	mov	dpl, #0x02
      0001D0 C0 07            [24] 1013 	push	ar7
      0001D2 C0 06            [24] 1014 	push	ar6
      0001D4 C0 05            [24] 1015 	push	ar5
      0001D6 12r00rA8         [24] 1016 	lcall	_spi_control_write
      0001D9 D0 05            [24] 1017 	pop	ar5
      0001DB D0 06            [24] 1018 	pop	ar6
      0001DD D0 07            [24] 1019 	pop	ar7
                                   1020 ;	SPI.c:146: spi_control_write(2, 0x17, (uint8_t)((data >> 8) & 0xFF)); // Write MSB of data
      0001DF 8E 04            [24] 1021 	mov	ar4,r6
      0001E1 90r00r03         [24] 1022 	mov	dptr,#_spi_control_write_PARM_2
      0001E4 74 17            [12] 1023 	mov	a,#0x17
      0001E6 F0               [24] 1024 	movx	@dptr,a
      0001E7 90r00r04         [24] 1025 	mov	dptr,#_spi_control_write_PARM_3
      0001EA EC               [12] 1026 	mov	a,r4
      0001EB F0               [24] 1027 	movx	@dptr,a
      0001EC 75 82 02         [24] 1028 	mov	dpl, #0x02
      0001EF C0 07            [24] 1029 	push	ar7
      0001F1 C0 06            [24] 1030 	push	ar6
      0001F3 C0 05            [24] 1031 	push	ar5
      0001F5 12r00rA8         [24] 1032 	lcall	_spi_control_write
      0001F8 D0 05            [24] 1033 	pop	ar5
      0001FA D0 06            [24] 1034 	pop	ar6
      0001FC D0 07            [24] 1035 	pop	ar7
                                   1036 ;	SPI.c:149: printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      0001FE 7C 00            [12] 1037 	mov	r4,#0x00
      000200 C0 05            [24] 1038 	push	ar5
      000202 C0 06            [24] 1039 	push	ar6
      000204 C0 07            [24] 1040 	push	ar7
      000206 C0 04            [24] 1041 	push	ar4
      000208 74r8E            [12] 1042 	mov	a,#___str_4
      00020A C0 E0            [24] 1043 	push	acc
      00020C 74s00            [12] 1044 	mov	a,#(___str_4 >> 8)
      00020E C0 E0            [24] 1045 	push	acc
      000210 74 80            [12] 1046 	mov	a,#0x80
      000212 C0 E0            [24] 1047 	push	acc
      000214 12r00r00         [24] 1048 	lcall	_printf
      000217 E5 81            [12] 1049 	mov	a,sp
      000219 24 F9            [12] 1050 	add	a,#0xf9
      00021B F5 81            [12] 1051 	mov	sp,a
                                   1052 ;	SPI.c:150: }
      00021D 22               [24] 1053 	ret
                                   1054 ;------------------------------------------------------------
                                   1055 ;Allocation info for local variables in function 'mac_spi_read'
                                   1056 ;------------------------------------------------------------
                                   1057 ;bank                      Allocated with name '_mac_spi_read_PARM_2'
                                   1058 ;addr                      Allocated with name '_mac_spi_read_addr_10000_90'
                                   1059 ;data                      Allocated with name '_mac_spi_read_data_10001_93'
                                   1060 ;------------------------------------------------------------
                                   1061 ;	SPI.c:152: uint8_t mac_spi_read(uint8_t addr, uint8_t bank)
                                   1062 ;	-----------------------------------------
                                   1063 ;	 function mac_spi_read
                                   1064 ;	-----------------------------------------
      00021E                       1065 _mac_spi_read:
      00021E E5 82            [12] 1066 	mov	a,dpl
      000220 90r00r0D         [24] 1067 	mov	dptr,#_mac_spi_read_addr_10000_90
      000223 F0               [24] 1068 	movx	@dptr,a
                                   1069 ;	SPI.c:154: if (addr > 0x1F) {
      000224 E0               [24] 1070 	movx	a,@dptr
      000225 FF               [12] 1071 	mov  r7,a
      000226 24 E0            [12] 1072 	add	a,#0xff - 0x1f
      000228 50 19            [24] 1073 	jnc	00102$
                                   1074 ;	SPI.c:155: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      00022A 74r30            [12] 1075 	mov	a,#___str_2
      00022C C0 E0            [24] 1076 	push	acc
      00022E 74s00            [12] 1077 	mov	a,#(___str_2 >> 8)
      000230 C0 E0            [24] 1078 	push	acc
      000232 74 80            [12] 1079 	mov	a,#0x80
      000234 C0 E0            [24] 1080 	push	acc
      000236 12r00r00         [24] 1081 	lcall	_printf
      000239 15 81            [12] 1082 	dec	sp
      00023B 15 81            [12] 1083 	dec	sp
      00023D 15 81            [12] 1084 	dec	sp
                                   1085 ;	SPI.c:156: return 0; // Return 0 if address is invalid
      00023F 75 82 00         [24] 1086 	mov	dpl, #0x00
      000242 22               [24] 1087 	ret
      000243                       1088 00102$:
                                   1089 ;	SPI.c:159: select_reg_bank(bank); // Select the appropriate register bank
      000243 90r00r0C         [24] 1090 	mov	dptr,#_mac_spi_read_PARM_2
      000246 E0               [24] 1091 	movx	a,@dptr
      000247 F5 82            [12] 1092 	mov	dpl,a
      000249 C0 07            [24] 1093 	push	ar7
      00024B 12r00r23         [24] 1094 	lcall	_select_reg_bank
      00024E D0 07            [24] 1095 	pop	ar7
                                   1096 ;	SPI.c:162: CS_LOW;
                                   1097 ;	assignBit
      000250 C2 91            [12] 1098 	clr	_P1_1
                                   1099 ;	SPI.c:165: SPI_send(addr);
      000252 8F 82            [24] 1100 	mov	dpl, r7
      000254 C0 07            [24] 1101 	push	ar7
      000256 12r01r13         [24] 1102 	lcall	_SPI_send
                                   1103 ;	SPI.c:168: uint8_t data = SPI_ReadByte();
      000259 12r00r00         [24] 1104 	lcall	_SPI_ReadByte
      00025C AE 82            [24] 1105 	mov	r6, dpl
      00025E D0 07            [24] 1106 	pop	ar7
                                   1107 ;	SPI.c:171: CS_HIGH;
                                   1108 ;	assignBit
      000260 D2 91            [12] 1109 	setb	_P1_1
                                   1110 ;	SPI.c:174: printf("Read: Address 0x%02X, Data 0x%02X\n", addr, data);
      000262 8E 04            [24] 1111 	mov	ar4,r6
      000264 7D 00            [12] 1112 	mov	r5,#0x00
      000266 7B 00            [12] 1113 	mov	r3,#0x00
      000268 C0 06            [24] 1114 	push	ar6
      00026A C0 04            [24] 1115 	push	ar4
      00026C C0 05            [24] 1116 	push	ar5
      00026E C0 07            [24] 1117 	push	ar7
      000270 C0 03            [24] 1118 	push	ar3
      000272 74rB7            [12] 1119 	mov	a,#___str_5
      000274 C0 E0            [24] 1120 	push	acc
      000276 74s00            [12] 1121 	mov	a,#(___str_5 >> 8)
      000278 C0 E0            [24] 1122 	push	acc
      00027A 74 80            [12] 1123 	mov	a,#0x80
      00027C C0 E0            [24] 1124 	push	acc
      00027E 12r00r00         [24] 1125 	lcall	_printf
      000281 E5 81            [12] 1126 	mov	a,sp
      000283 24 F9            [12] 1127 	add	a,#0xf9
      000285 F5 81            [12] 1128 	mov	sp,a
      000287 D0 06            [24] 1129 	pop	ar6
                                   1130 ;	SPI.c:176: return data;
      000289 8E 82            [24] 1131 	mov	dpl, r6
                                   1132 ;	SPI.c:177: }
      00028B 22               [24] 1133 	ret
                                   1134 ;------------------------------------------------------------
                                   1135 ;Allocation info for local variables in function 'phy_spi_read'
                                   1136 ;------------------------------------------------------------
                                   1137 ;addr                      Allocated with name '_phy_spi_read_addr_10000_94'
                                   1138 ;data_LSB                  Allocated with name '_phy_spi_read_data_LSB_10001_96'
                                   1139 ;data_MSB                  Allocated with name '_phy_spi_read_data_MSB_10001_96'
                                   1140 ;data                      Allocated with name '_phy_spi_read_data_10001_96'
                                   1141 ;------------------------------------------------------------
                                   1142 ;	SPI.c:180: uint16_t phy_spi_read(uint8_t addr)
                                   1143 ;	-----------------------------------------
                                   1144 ;	 function phy_spi_read
                                   1145 ;	-----------------------------------------
      00028C                       1146 _phy_spi_read:
      00028C E5 82            [12] 1147 	mov	a,dpl
      00028E 90r00r0E         [24] 1148 	mov	dptr,#_phy_spi_read_addr_10000_94
      000291 F0               [24] 1149 	movx	@dptr,a
                                   1150 ;	SPI.c:182: spi_control_write(2, 0x14, addr);     // Write PHY address
      000292 E0               [24] 1151 	movx	a,@dptr
      000293 FF               [12] 1152 	mov	r7,a
      000294 90r00r03         [24] 1153 	mov	dptr,#_spi_control_write_PARM_2
      000297 74 14            [12] 1154 	mov	a,#0x14
      000299 F0               [24] 1155 	movx	@dptr,a
      00029A 90r00r04         [24] 1156 	mov	dptr,#_spi_control_write_PARM_3
      00029D EF               [12] 1157 	mov	a,r7
      00029E F0               [24] 1158 	movx	@dptr,a
      00029F 75 82 02         [24] 1159 	mov	dpl, #0x02
      0002A2 C0 07            [24] 1160 	push	ar7
      0002A4 12r00rA8         [24] 1161 	lcall	_spi_control_write
      0002A7 D0 07            [24] 1162 	pop	ar7
                                   1163 ;	SPI.c:183: spi_control_write(2, 0x12, 1);        // Set MICMD.MIIRD bit
      0002A9 90r00r03         [24] 1164 	mov	dptr,#_spi_control_write_PARM_2
      0002AC 74 12            [12] 1165 	mov	a,#0x12
      0002AE F0               [24] 1166 	movx	@dptr,a
      0002AF 90r00r04         [24] 1167 	mov	dptr,#_spi_control_write_PARM_3
      0002B2 74 01            [12] 1168 	mov	a,#0x01
      0002B4 F0               [24] 1169 	movx	@dptr,a
      0002B5 75 82 02         [24] 1170 	mov	dpl, #0x02
      0002B8 C0 07            [24] 1171 	push	ar7
      0002BA 12r00rA8         [24] 1172 	lcall	_spi_control_write
                                   1173 ;	SPI.c:185: busy_wait();                          // Wait for the read to complete
      0002BD 12r03r39         [24] 1174 	lcall	_busy_wait
      0002C0 D0 07            [24] 1175 	pop	ar7
                                   1176 ;	SPI.c:187: spi_control_write(2, 0x12, 0);        // Clear MICMD.MIIRD bit
      0002C2 90r00r03         [24] 1177 	mov	dptr,#_spi_control_write_PARM_2
      0002C5 74 12            [12] 1178 	mov	a,#0x12
      0002C7 F0               [24] 1179 	movx	@dptr,a
      0002C8 90r00r04         [24] 1180 	mov	dptr,#_spi_control_write_PARM_3
      0002CB E4               [12] 1181 	clr	a
      0002CC F0               [24] 1182 	movx	@dptr,a
      0002CD 75 82 02         [24] 1183 	mov	dpl, #0x02
      0002D0 C0 07            [24] 1184 	push	ar7
      0002D2 12r00rA8         [24] 1185 	lcall	_spi_control_write
      0002D5 D0 07            [24] 1186 	pop	ar7
                                   1187 ;	SPI.c:189: uint16_t data_LSB = mac_spi_read(0x18, 2); // Read LSB of data
      0002D7 90r00r0C         [24] 1188 	mov	dptr,#_mac_spi_read_PARM_2
      0002DA 74 02            [12] 1189 	mov	a,#0x02
      0002DC F0               [24] 1190 	movx	@dptr,a
      0002DD 75 82 18         [24] 1191 	mov	dpl, #0x18
      0002E0 C0 07            [24] 1192 	push	ar7
      0002E2 12r02r1E         [24] 1193 	lcall	_mac_spi_read
      0002E5 AE 82            [24] 1194 	mov	r6, dpl
      0002E7 D0 07            [24] 1195 	pop	ar7
      0002E9 7D 00            [12] 1196 	mov	r5,#0x00
                                   1197 ;	SPI.c:190: uint16_t data_MSB = mac_spi_read(0x19, 2); // Read MSB of data
      0002EB 90r00r0C         [24] 1198 	mov	dptr,#_mac_spi_read_PARM_2
      0002EE 74 02            [12] 1199 	mov	a,#0x02
      0002F0 F0               [24] 1200 	movx	@dptr,a
      0002F1 75 82 19         [24] 1201 	mov	dpl, #0x19
      0002F4 C0 07            [24] 1202 	push	ar7
      0002F6 C0 06            [24] 1203 	push	ar6
      0002F8 C0 05            [24] 1204 	push	ar5
      0002FA 12r02r1E         [24] 1205 	lcall	_mac_spi_read
      0002FD AC 82            [24] 1206 	mov	r4, dpl
      0002FF D0 05            [24] 1207 	pop	ar5
      000301 D0 06            [24] 1208 	pop	ar6
      000303 D0 07            [24] 1209 	pop	ar7
                                   1210 ;	SPI.c:192: uint16_t data = (data_MSB << 8) | data_LSB;        // Combine MSB and LSB
      000305 8C 03            [24] 1211 	mov	ar3,r4
      000307 E4               [12] 1212 	clr	a
      000308 42 06            [12] 1213 	orl	ar6,a
      00030A EB               [12] 1214 	mov	a,r3
      00030B 42 05            [12] 1215 	orl	ar5,a
                                   1216 ;	SPI.c:195: printf("PHY Read: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      00030D 7C 00            [12] 1217 	mov	r4,#0x00
      00030F C0 06            [24] 1218 	push	ar6
      000311 C0 05            [24] 1219 	push	ar5
      000313 C0 06            [24] 1220 	push	ar6
      000315 C0 05            [24] 1221 	push	ar5
      000317 C0 07            [24] 1222 	push	ar7
      000319 C0 04            [24] 1223 	push	ar4
      00031B 74rDA            [12] 1224 	mov	a,#___str_6
      00031D C0 E0            [24] 1225 	push	acc
      00031F 74s00            [12] 1226 	mov	a,#(___str_6 >> 8)
      000321 C0 E0            [24] 1227 	push	acc
      000323 74 80            [12] 1228 	mov	a,#0x80
      000325 C0 E0            [24] 1229 	push	acc
      000327 12r00r00         [24] 1230 	lcall	_printf
      00032A E5 81            [12] 1231 	mov	a,sp
      00032C 24 F9            [12] 1232 	add	a,#0xf9
      00032E F5 81            [12] 1233 	mov	sp,a
      000330 D0 05            [24] 1234 	pop	ar5
      000332 D0 06            [24] 1235 	pop	ar6
                                   1236 ;	SPI.c:197: return data;        // Combine MSB and LSB
      000334 8E 82            [24] 1237 	mov	dpl, r6
      000336 8D 83            [24] 1238 	mov	dph, r5
                                   1239 ;	SPI.c:198: }
      000338 22               [24] 1240 	ret
                                   1241 ;------------------------------------------------------------
                                   1242 ;Allocation info for local variables in function 'busy_wait'
                                   1243 ;------------------------------------------------------------
                                   1244 ;data                      Allocated with name '_busy_wait_data_10000_98'
                                   1245 ;------------------------------------------------------------
                                   1246 ;	SPI.c:200: void busy_wait(void)
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function busy_wait
                                   1249 ;	-----------------------------------------
      000339                       1250 _busy_wait:
                                   1251 ;	SPI.c:202: uint8_t data = mac_spi_read(0x0A, 3); // Read ESTAT register (bank 3)
      000339 90r00r0C         [24] 1252 	mov	dptr,#_mac_spi_read_PARM_2
      00033C 74 03            [12] 1253 	mov	a,#0x03
      00033E F0               [24] 1254 	movx	@dptr,a
      00033F 75 82 0A         [24] 1255 	mov	dpl, #0x0a
      000342 12r02r1E         [24] 1256 	lcall	_mac_spi_read
      000345 E5 82            [12] 1257 	mov	a, dpl
      000347 90r00r0F         [24] 1258 	mov	dptr,#_busy_wait_data_10000_98
      00034A F0               [24] 1259 	movx	@dptr,a
                                   1260 ;	SPI.c:203: while (data & 0x01)
      00034B                       1261 00101$:
      00034B 90r00r0F         [24] 1262 	mov	dptr,#_busy_wait_data_10000_98
      00034E E0               [24] 1263 	movx	a,@dptr
      00034F 30 E0 14         [24] 1264 	jnb	acc.0,00104$
                                   1265 ;	SPI.c:205: data = mac_spi_read(0x0A, 3);
      000352 90r00r0C         [24] 1266 	mov	dptr,#_mac_spi_read_PARM_2
      000355 74 03            [12] 1267 	mov	a,#0x03
      000357 F0               [24] 1268 	movx	@dptr,a
      000358 75 82 0A         [24] 1269 	mov	dpl, #0x0a
      00035B 12r02r1E         [24] 1270 	lcall	_mac_spi_read
      00035E E5 82            [12] 1271 	mov	a, dpl
      000360 90r00r0F         [24] 1272 	mov	dptr,#_busy_wait_data_10000_98
      000363 F0               [24] 1273 	movx	@dptr,a
      000364 80 E5            [24] 1274 	sjmp	00101$
      000366                       1275 00104$:
                                   1276 ;	SPI.c:207: }
      000366 22               [24] 1277 	ret
                                   1278 ;------------------------------------------------------------
                                   1279 ;Allocation info for local variables in function 'buffer_init'
                                   1280 ;------------------------------------------------------------
                                   1281 ;size                      Allocated with name '_buffer_init_PARM_2'
                                   1282 ;start_address             Allocated with name '_buffer_init_start_address_10000_100'
                                   1283 ;erxst                     Allocated with name '_buffer_init_erxst_10001_103'
                                   1284 ;erxnd                     Allocated with name '_buffer_init_erxnd_10001_103'
                                   1285 ;------------------------------------------------------------
                                   1286 ;	SPI.c:209: void buffer_init(uint16_t start_address, uint16_t size)
                                   1287 ;	-----------------------------------------
                                   1288 ;	 function buffer_init
                                   1289 ;	-----------------------------------------
      000367                       1290 _buffer_init:
      000367 AF 83            [24] 1291 	mov	r7,dph
      000369 E5 82            [12] 1292 	mov	a,dpl
      00036B 90r00r12         [24] 1293 	mov	dptr,#_buffer_init_start_address_10000_100
      00036E F0               [24] 1294 	movx	@dptr,a
      00036F EF               [12] 1295 	mov	a,r7
      000370 A3               [24] 1296 	inc	dptr
      000371 F0               [24] 1297 	movx	@dptr,a
                                   1298 ;	SPI.c:211: if (start_address > 0x1FFF || (start_address + size) > 0x1FFF) {
      000372 90r00r12         [24] 1299 	mov	dptr,#_buffer_init_start_address_10000_100
      000375 E0               [24] 1300 	movx	a,@dptr
      000376 FE               [12] 1301 	mov	r6,a
      000377 A3               [24] 1302 	inc	dptr
      000378 E0               [24] 1303 	movx	a,@dptr
      000379 FF               [12] 1304 	mov	r7,a
      00037A 8E 04            [24] 1305 	mov	ar4,r6
      00037C 8F 05            [24] 1306 	mov	ar5,r7
      00037E C3               [12] 1307 	clr	c
      00037F 74 FF            [12] 1308 	mov	a,#0xff
      000381 9C               [12] 1309 	subb	a,r4
      000382 74 1F            [12] 1310 	mov	a,#0x1f
      000384 9D               [12] 1311 	subb	a,r5
      000385 40 17            [24] 1312 	jc	00101$
      000387 90r00r10         [24] 1313 	mov	dptr,#_buffer_init_PARM_2
      00038A E0               [24] 1314 	movx	a,@dptr
      00038B FA               [12] 1315 	mov	r2,a
      00038C A3               [24] 1316 	inc	dptr
      00038D E0               [24] 1317 	movx	a,@dptr
      00038E FB               [12] 1318 	mov	r3,a
      00038F EA               [12] 1319 	mov	a,r2
      000390 2E               [12] 1320 	add	a, r6
      000391 F8               [12] 1321 	mov	r0,a
      000392 EB               [12] 1322 	mov	a,r3
      000393 3F               [12] 1323 	addc	a, r7
      000394 F9               [12] 1324 	mov	r1,a
      000395 C3               [12] 1325 	clr	c
      000396 74 FF            [12] 1326 	mov	a,#0xff
      000398 98               [12] 1327 	subb	a,r0
      000399 74 1F            [12] 1328 	mov	a,#0x1f
      00039B 99               [12] 1329 	subb	a,r1
      00039C 50 2A            [24] 1330 	jnc	00102$
      00039E                       1331 00101$:
                                   1332 ;	SPI.c:212: printf("\n\rInvalid Buffer Address or Size: Start 0x%04X, Size 0x%04X\n\r", start_address, size);
      00039E 90r00r10         [24] 1333 	mov	dptr,#_buffer_init_PARM_2
      0003A1 E0               [24] 1334 	movx	a,@dptr
      0003A2 C0 E0            [24] 1335 	push	acc
      0003A4 A3               [24] 1336 	inc	dptr
      0003A5 E0               [24] 1337 	movx	a,@dptr
      0003A6 C0 E0            [24] 1338 	push	acc
      0003A8 90r00r12         [24] 1339 	mov	dptr,#_buffer_init_start_address_10000_100
      0003AB E0               [24] 1340 	movx	a,@dptr
      0003AC C0 E0            [24] 1341 	push	acc
      0003AE A3               [24] 1342 	inc	dptr
      0003AF E0               [24] 1343 	movx	a,@dptr
      0003B0 C0 E0            [24] 1344 	push	acc
      0003B2 74r02            [12] 1345 	mov	a,#___str_7
      0003B4 C0 E0            [24] 1346 	push	acc
      0003B6 74s01            [12] 1347 	mov	a,#(___str_7 >> 8)
      0003B8 C0 E0            [24] 1348 	push	acc
      0003BA 74 80            [12] 1349 	mov	a,#0x80
      0003BC C0 E0            [24] 1350 	push	acc
      0003BE 12r00r00         [24] 1351 	lcall	_printf
      0003C1 E5 81            [12] 1352 	mov	a,sp
      0003C3 24 F9            [12] 1353 	add	a,#0xf9
      0003C5 F5 81            [12] 1354 	mov	sp,a
                                   1355 ;	SPI.c:213: return;
      0003C7 22               [24] 1356 	ret
      0003C8                       1357 00102$:
                                   1358 ;	SPI.c:217: uint16_t erxst = start_address & ~1; // Make sure ERXST is even
      0003C8 53 04 FE         [24] 1359 	anl	ar4,#0xfe
                                   1360 ;	SPI.c:218: uint16_t erxnd = (start_address + size - 1) & ~1; // Make sure ERXND is even
      0003CB EA               [12] 1361 	mov	a,r2
      0003CC 2E               [12] 1362 	add	a, r6
      0003CD FE               [12] 1363 	mov	r6,a
      0003CE EB               [12] 1364 	mov	a,r3
      0003CF 3F               [12] 1365 	addc	a, r7
      0003D0 FF               [12] 1366 	mov	r7,a
      0003D1 1E               [12] 1367 	dec	r6
      0003D2 BE FF 01         [24] 1368 	cjne	r6,#0xff,00114$
      0003D5 1F               [12] 1369 	dec	r7
      0003D6                       1370 00114$:
      0003D6 53 06 FE         [24] 1371 	anl	ar6,#0xfe
                                   1372 ;	SPI.c:221: spi_control_write(0, 0x08, (uint8_t)(erxst >> 8)); // High byte of ERXST
      0003D9 8D 03            [24] 1373 	mov	ar3,r5
      0003DB 90r00r03         [24] 1374 	mov	dptr,#_spi_control_write_PARM_2
      0003DE 74 08            [12] 1375 	mov	a,#0x08
      0003E0 F0               [24] 1376 	movx	@dptr,a
      0003E1 90r00r04         [24] 1377 	mov	dptr,#_spi_control_write_PARM_3
      0003E4 EB               [12] 1378 	mov	a,r3
      0003E5 F0               [24] 1379 	movx	@dptr,a
      0003E6 75 82 00         [24] 1380 	mov	dpl, #0x00
      0003E9 C0 07            [24] 1381 	push	ar7
      0003EB C0 06            [24] 1382 	push	ar6
      0003ED C0 05            [24] 1383 	push	ar5
      0003EF C0 04            [24] 1384 	push	ar4
      0003F1 12r00rA8         [24] 1385 	lcall	_spi_control_write
      0003F4 D0 04            [24] 1386 	pop	ar4
      0003F6 D0 05            [24] 1387 	pop	ar5
      0003F8 D0 06            [24] 1388 	pop	ar6
      0003FA D0 07            [24] 1389 	pop	ar7
                                   1390 ;	SPI.c:222: spi_control_write(0, 0x09, (uint8_t)(erxst & 0xFF)); // Low byte of ERXST
      0003FC 8C 03            [24] 1391 	mov	ar3,r4
      0003FE 90r00r03         [24] 1392 	mov	dptr,#_spi_control_write_PARM_2
      000401 74 09            [12] 1393 	mov	a,#0x09
      000403 F0               [24] 1394 	movx	@dptr,a
      000404 90r00r04         [24] 1395 	mov	dptr,#_spi_control_write_PARM_3
      000407 EB               [12] 1396 	mov	a,r3
      000408 F0               [24] 1397 	movx	@dptr,a
      000409 75 82 00         [24] 1398 	mov	dpl, #0x00
      00040C C0 07            [24] 1399 	push	ar7
      00040E C0 06            [24] 1400 	push	ar6
      000410 C0 05            [24] 1401 	push	ar5
      000412 C0 04            [24] 1402 	push	ar4
      000414 12r00rA8         [24] 1403 	lcall	_spi_control_write
      000417 D0 04            [24] 1404 	pop	ar4
      000419 D0 05            [24] 1405 	pop	ar5
      00041B D0 06            [24] 1406 	pop	ar6
      00041D D0 07            [24] 1407 	pop	ar7
                                   1408 ;	SPI.c:225: spi_control_write(0, 0x0A, (uint8_t)(erxnd >> 8)); // High byte of ERXND
      00041F 8F 03            [24] 1409 	mov	ar3,r7
      000421 90r00r03         [24] 1410 	mov	dptr,#_spi_control_write_PARM_2
      000424 74 0A            [12] 1411 	mov	a,#0x0a
      000426 F0               [24] 1412 	movx	@dptr,a
      000427 90r00r04         [24] 1413 	mov	dptr,#_spi_control_write_PARM_3
      00042A EB               [12] 1414 	mov	a,r3
      00042B F0               [24] 1415 	movx	@dptr,a
      00042C 75 82 00         [24] 1416 	mov	dpl, #0x00
      00042F C0 07            [24] 1417 	push	ar7
      000431 C0 06            [24] 1418 	push	ar6
      000433 C0 05            [24] 1419 	push	ar5
      000435 C0 04            [24] 1420 	push	ar4
      000437 12r00rA8         [24] 1421 	lcall	_spi_control_write
      00043A D0 04            [24] 1422 	pop	ar4
      00043C D0 05            [24] 1423 	pop	ar5
      00043E D0 06            [24] 1424 	pop	ar6
      000440 D0 07            [24] 1425 	pop	ar7
                                   1426 ;	SPI.c:226: spi_control_write(0, 0x0B, (uint8_t)(erxnd & 0xFF)); // Low byte of ERXND
      000442 8E 03            [24] 1427 	mov	ar3,r6
      000444 90r00r03         [24] 1428 	mov	dptr,#_spi_control_write_PARM_2
      000447 74 0B            [12] 1429 	mov	a,#0x0b
      000449 F0               [24] 1430 	movx	@dptr,a
      00044A 90r00r04         [24] 1431 	mov	dptr,#_spi_control_write_PARM_3
      00044D EB               [12] 1432 	mov	a,r3
      00044E F0               [24] 1433 	movx	@dptr,a
      00044F 75 82 00         [24] 1434 	mov	dpl, #0x00
      000452 C0 07            [24] 1435 	push	ar7
      000454 C0 06            [24] 1436 	push	ar6
      000456 C0 05            [24] 1437 	push	ar5
      000458 C0 04            [24] 1438 	push	ar4
      00045A 12r00rA8         [24] 1439 	lcall	_spi_control_write
      00045D D0 04            [24] 1440 	pop	ar4
      00045F D0 05            [24] 1441 	pop	ar5
      000461 D0 06            [24] 1442 	pop	ar6
      000463 D0 07            [24] 1443 	pop	ar7
                                   1444 ;	SPI.c:228: printf("\n\rBuffer Initialized: Start 0x%04X, End 0x%04X\n\r", erxst, erxnd);
      000465 C0 06            [24] 1445 	push	ar6
      000467 C0 07            [24] 1446 	push	ar7
      000469 C0 04            [24] 1447 	push	ar4
      00046B C0 05            [24] 1448 	push	ar5
      00046D 74r40            [12] 1449 	mov	a,#___str_8
      00046F C0 E0            [24] 1450 	push	acc
      000471 74s01            [12] 1451 	mov	a,#(___str_8 >> 8)
      000473 C0 E0            [24] 1452 	push	acc
      000475 74 80            [12] 1453 	mov	a,#0x80
      000477 C0 E0            [24] 1454 	push	acc
      000479 12r00r00         [24] 1455 	lcall	_printf
      00047C E5 81            [12] 1456 	mov	a,sp
      00047E 24 F9            [12] 1457 	add	a,#0xf9
      000480 F5 81            [12] 1458 	mov	sp,a
                                   1459 ;	SPI.c:229: }
      000482 22               [24] 1460 	ret
                                   1461 ;------------------------------------------------------------
                                   1462 ;Allocation info for local variables in function 'spi_buffer_read'
                                   1463 ;------------------------------------------------------------
                                   1464 ;start_address             Allocated with name '_spi_buffer_read_PARM_2'
                                   1465 ;data_ptr                  Allocated with name '_spi_buffer_read_PARM_3'
                                   1466 ;num_bytes                 Allocated with name '_spi_buffer_read_num_bytes_10000_104'
                                   1467 ;higher_byte               Allocated with name '_spi_buffer_read_higher_byte_10001_109'
                                   1468 ;lower_byte                Allocated with name '_spi_buffer_read_lower_byte_10001_109'
                                   1469 ;opcode                    Allocated with name '_spi_buffer_read_opcode_10002_110'
                                   1470 ;i                         Allocated with name '_spi_buffer_read_i_20002_111'
                                   1471 ;------------------------------------------------------------
                                   1472 ;	SPI.c:232: void spi_buffer_read(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1473 ;	-----------------------------------------
                                   1474 ;	 function spi_buffer_read
                                   1475 ;	-----------------------------------------
      000483                       1476 _spi_buffer_read:
      000483 AF 83            [24] 1477 	mov	r7,dph
      000485 E5 82            [12] 1478 	mov	a,dpl
      000487 90r00r19         [24] 1479 	mov	dptr,#_spi_buffer_read_num_bytes_10000_104
      00048A F0               [24] 1480 	movx	@dptr,a
      00048B EF               [12] 1481 	mov	a,r7
      00048C A3               [24] 1482 	inc	dptr
      00048D F0               [24] 1483 	movx	@dptr,a
                                   1484 ;	SPI.c:234: if (num_bytes < 1) {
      00048E 90r00r19         [24] 1485 	mov	dptr,#_spi_buffer_read_num_bytes_10000_104
      000491 E0               [24] 1486 	movx	a,@dptr
      000492 FE               [12] 1487 	mov	r6,a
      000493 A3               [24] 1488 	inc	dptr
      000494 E0               [24] 1489 	movx	a,@dptr
      000495 FF               [12] 1490 	mov	r7,a
      000496 C3               [12] 1491 	clr	c
      000497 EE               [12] 1492 	mov	a,r6
      000498 94 01            [12] 1493 	subb	a,#0x01
      00049A EF               [12] 1494 	mov	a,r7
      00049B 64 80            [12] 1495 	xrl	a,#0x80
      00049D 94 80            [12] 1496 	subb	a,#0x80
      00049F 50 1A            [24] 1497 	jnc	00102$
                                   1498 ;	SPI.c:235: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      0004A1 C0 06            [24] 1499 	push	ar6
      0004A3 C0 07            [24] 1500 	push	ar7
      0004A5 74r71            [12] 1501 	mov	a,#___str_9
      0004A7 C0 E0            [24] 1502 	push	acc
      0004A9 74s01            [12] 1503 	mov	a,#(___str_9 >> 8)
      0004AB C0 E0            [24] 1504 	push	acc
      0004AD 74 80            [12] 1505 	mov	a,#0x80
      0004AF C0 E0            [24] 1506 	push	acc
      0004B1 12r00r00         [24] 1507 	lcall	_printf
      0004B4 E5 81            [12] 1508 	mov	a,sp
      0004B6 24 FB            [12] 1509 	add	a,#0xfb
      0004B8 F5 81            [12] 1510 	mov	sp,a
                                   1511 ;	SPI.c:236: return;
      0004BA 22               [24] 1512 	ret
      0004BB                       1513 00102$:
                                   1514 ;	SPI.c:238: if (start_address > 0x1FFF) {
      0004BB 90r00r14         [24] 1515 	mov	dptr,#_spi_buffer_read_PARM_2
      0004BE E0               [24] 1516 	movx	a,@dptr
      0004BF FC               [12] 1517 	mov	r4,a
      0004C0 A3               [24] 1518 	inc	dptr
      0004C1 E0               [24] 1519 	movx	a,@dptr
      0004C2 FD               [12] 1520 	mov	r5,a
      0004C3 8C 02            [24] 1521 	mov	ar2,r4
      0004C5 8D 03            [24] 1522 	mov	ar3,r5
      0004C7 C3               [12] 1523 	clr	c
      0004C8 74 FF            [12] 1524 	mov	a,#0xff
      0004CA 9A               [12] 1525 	subb	a,r2
      0004CB 74 1F            [12] 1526 	mov	a,#0x1f
      0004CD 9B               [12] 1527 	subb	a,r3
      0004CE 50 1A            [24] 1528 	jnc	00104$
                                   1529 ;	SPI.c:239: printf("\n\rInvalid address: %04X\n\r", start_address);
      0004D0 C0 04            [24] 1530 	push	ar4
      0004D2 C0 05            [24] 1531 	push	ar5
      0004D4 74r91            [12] 1532 	mov	a,#___str_10
      0004D6 C0 E0            [24] 1533 	push	acc
      0004D8 74s01            [12] 1534 	mov	a,#(___str_10 >> 8)
      0004DA C0 E0            [24] 1535 	push	acc
      0004DC 74 80            [12] 1536 	mov	a,#0x80
      0004DE C0 E0            [24] 1537 	push	acc
      0004E0 12r00r00         [24] 1538 	lcall	_printf
      0004E3 E5 81            [12] 1539 	mov	a,sp
      0004E5 24 FB            [12] 1540 	add	a,#0xfb
      0004E7 F5 81            [12] 1541 	mov	sp,a
                                   1542 ;	SPI.c:240: return;
      0004E9 22               [24] 1543 	ret
      0004EA                       1544 00104$:
                                   1545 ;	SPI.c:243: if (num_bytes > 1) {
      0004EA C3               [12] 1546 	clr	c
      0004EB 74 01            [12] 1547 	mov	a,#0x01
      0004ED 9E               [12] 1548 	subb	a,r6
      0004EE 74 80            [12] 1549 	mov	a,#(0x00 ^ 0x80)
      0004F0 8F F0            [24] 1550 	mov	b,r7
      0004F2 63 F0 80         [24] 1551 	xrl	b,#0x80
      0004F5 95 F0            [12] 1552 	subb	a,b
      0004F7 50 0B            [24] 1553 	jnc	00106$
                                   1554 ;	SPI.c:244: spi_set_autoinc();
      0004F9 C0 05            [24] 1555 	push	ar5
      0004FB C0 04            [24] 1556 	push	ar4
      0004FD 12r00r12         [24] 1557 	lcall	_spi_set_autoinc
      000500 D0 04            [24] 1558 	pop	ar4
      000502 D0 05            [24] 1559 	pop	ar5
      000504                       1560 00106$:
                                   1561 ;	SPI.c:248: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      000504 8D 07            [24] 1562 	mov	ar7,r5
                                   1563 ;	SPI.c:249: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      000506 8C 06            [24] 1564 	mov	ar6,r4
                                   1565 ;	SPI.c:251: spi_control_write(0, 0x01, higher_byte); // High byte
      000508 90r00r03         [24] 1566 	mov	dptr,#_spi_control_write_PARM_2
      00050B 74 01            [12] 1567 	mov	a,#0x01
      00050D F0               [24] 1568 	movx	@dptr,a
      00050E 90r00r04         [24] 1569 	mov	dptr,#_spi_control_write_PARM_3
      000511 EF               [12] 1570 	mov	a,r7
      000512 F0               [24] 1571 	movx	@dptr,a
      000513 75 82 00         [24] 1572 	mov	dpl, #0x00
      000516 C0 06            [24] 1573 	push	ar6
      000518 C0 05            [24] 1574 	push	ar5
      00051A C0 04            [24] 1575 	push	ar4
      00051C 12r00rA8         [24] 1576 	lcall	_spi_control_write
      00051F D0 04            [24] 1577 	pop	ar4
      000521 D0 05            [24] 1578 	pop	ar5
      000523 D0 06            [24] 1579 	pop	ar6
                                   1580 ;	SPI.c:252: spi_control_write(0, 0x00, lower_byte); // Low byte
      000525 90r00r03         [24] 1581 	mov	dptr,#_spi_control_write_PARM_2
      000528 E4               [12] 1582 	clr	a
      000529 F0               [24] 1583 	movx	@dptr,a
      00052A 90r00r04         [24] 1584 	mov	dptr,#_spi_control_write_PARM_3
      00052D EE               [12] 1585 	mov	a,r6
      00052E F0               [24] 1586 	movx	@dptr,a
      00052F 75 82 00         [24] 1587 	mov	dpl, #0x00
      000532 C0 05            [24] 1588 	push	ar5
      000534 C0 04            [24] 1589 	push	ar4
      000536 12r00rA8         [24] 1590 	lcall	_spi_control_write
                                   1591 ;	SPI.c:255: CS_LOW; // Pull CS Low
                                   1592 ;	assignBit
      000539 C2 91            [12] 1593 	clr	_P1_1
                                   1594 ;	SPI.c:256: SPI_send(opcode); // Send opcode
      00053B 75 82 3A         [24] 1595 	mov	dpl, #0x3a
      00053E 12r01r13         [24] 1596 	lcall	_SPI_send
      000541 D0 04            [24] 1597 	pop	ar4
      000543 D0 05            [24] 1598 	pop	ar5
                                   1599 ;	SPI.c:259: printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      000545 90r00r19         [24] 1600 	mov	dptr,#_spi_buffer_read_num_bytes_10000_104
      000548 E0               [24] 1601 	movx	a,@dptr
      000549 FE               [12] 1602 	mov	r6,a
      00054A A3               [24] 1603 	inc	dptr
      00054B E0               [24] 1604 	movx	a,@dptr
      00054C FF               [12] 1605 	mov	r7,a
      00054D C0 07            [24] 1606 	push	ar7
      00054F C0 06            [24] 1607 	push	ar6
      000551 C0 04            [24] 1608 	push	ar4
      000553 C0 05            [24] 1609 	push	ar5
      000555 C0 06            [24] 1610 	push	ar6
      000557 C0 07            [24] 1611 	push	ar7
      000559 74rAB            [12] 1612 	mov	a,#___str_11
      00055B C0 E0            [24] 1613 	push	acc
      00055D 74s01            [12] 1614 	mov	a,#(___str_11 >> 8)
      00055F C0 E0            [24] 1615 	push	acc
      000561 74 80            [12] 1616 	mov	a,#0x80
      000563 C0 E0            [24] 1617 	push	acc
      000565 12r00r00         [24] 1618 	lcall	_printf
      000568 E5 81            [12] 1619 	mov	a,sp
      00056A 24 F9            [12] 1620 	add	a,#0xf9
      00056C F5 81            [12] 1621 	mov	sp,a
      00056E D0 06            [24] 1622 	pop	ar6
      000570 D0 07            [24] 1623 	pop	ar7
                                   1624 ;	SPI.c:260: for (int i = 0; i < num_bytes; i++) {
      000572 90r00r1B         [24] 1625 	mov	dptr,#_spi_buffer_read_i_20002_111
      000575 E4               [12] 1626 	clr	a
      000576 F0               [24] 1627 	movx	@dptr,a
      000577 A3               [24] 1628 	inc	dptr
      000578 F0               [24] 1629 	movx	@dptr,a
      000579 90r00r16         [24] 1630 	mov	dptr,#_spi_buffer_read_PARM_3
      00057C E0               [24] 1631 	movx	a,@dptr
      00057D FB               [12] 1632 	mov	r3,a
      00057E A3               [24] 1633 	inc	dptr
      00057F E0               [24] 1634 	movx	a,@dptr
      000580 FC               [12] 1635 	mov	r4,a
      000581 A3               [24] 1636 	inc	dptr
      000582 E0               [24] 1637 	movx	a,@dptr
      000583 FD               [12] 1638 	mov	r5,a
      000584                       1639 00109$:
      000584 90r00r1B         [24] 1640 	mov	dptr,#_spi_buffer_read_i_20002_111
      000587 E0               [24] 1641 	movx	a,@dptr
      000588 F9               [12] 1642 	mov	r1,a
      000589 A3               [24] 1643 	inc	dptr
      00058A E0               [24] 1644 	movx	a,@dptr
      00058B FA               [12] 1645 	mov	r2,a
      00058C C3               [12] 1646 	clr	c
      00058D E9               [12] 1647 	mov	a,r1
      00058E 9E               [12] 1648 	subb	a,r6
      00058F EA               [12] 1649 	mov	a,r2
      000590 64 80            [12] 1650 	xrl	a,#0x80
      000592 8F F0            [24] 1651 	mov	b,r7
      000594 63 F0 80         [24] 1652 	xrl	b,#0x80
      000597 95 F0            [12] 1653 	subb	a,b
      000599 40 03            [24] 1654 	jc	00147$
      00059B 02r06r21         [24] 1655 	ljmp	00107$
      00059E                       1656 00147$:
                                   1657 ;	SPI.c:261: *data_ptr = SPI_ReadByte(); // Read data
      00059E C0 06            [24] 1658 	push	ar6
      0005A0 C0 07            [24] 1659 	push	ar7
      0005A2 C0 07            [24] 1660 	push	ar7
      0005A4 C0 06            [24] 1661 	push	ar6
      0005A6 C0 05            [24] 1662 	push	ar5
      0005A8 C0 04            [24] 1663 	push	ar4
      0005AA C0 03            [24] 1664 	push	ar3
      0005AC C0 02            [24] 1665 	push	ar2
      0005AE C0 01            [24] 1666 	push	ar1
      0005B0 12r00r00         [24] 1667 	lcall	_SPI_ReadByte
      0005B3 A8 82            [24] 1668 	mov	r0, dpl
      0005B5 D0 01            [24] 1669 	pop	ar1
      0005B7 D0 02            [24] 1670 	pop	ar2
      0005B9 D0 03            [24] 1671 	pop	ar3
      0005BB D0 04            [24] 1672 	pop	ar4
      0005BD D0 05            [24] 1673 	pop	ar5
      0005BF D0 06            [24] 1674 	pop	ar6
      0005C1 D0 07            [24] 1675 	pop	ar7
      0005C3 8B 82            [24] 1676 	mov	dpl,r3
      0005C5 8C 83            [24] 1677 	mov	dph,r4
      0005C7 8D F0            [24] 1678 	mov	b,r5
      0005C9 E8               [12] 1679 	mov	a,r0
      0005CA 12r00r00         [24] 1680 	lcall	__gptrput
      0005CD A3               [24] 1681 	inc	dptr
      0005CE AB 82            [24] 1682 	mov	r3,dpl
      0005D0 AC 83            [24] 1683 	mov	r4,dph
                                   1684 ;	SPI.c:262: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      0005D2 7F 00            [12] 1685 	mov	r7,#0x00
      0005D4 09               [12] 1686 	inc	r1
      0005D5 B9 00 01         [24] 1687 	cjne	r1,#0x00,00148$
      0005D8 0A               [12] 1688 	inc	r2
      0005D9                       1689 00148$:
      0005D9 C0 07            [24] 1690 	push	ar7
      0005DB C0 06            [24] 1691 	push	ar6
      0005DD C0 05            [24] 1692 	push	ar5
      0005DF C0 04            [24] 1693 	push	ar4
      0005E1 C0 03            [24] 1694 	push	ar3
      0005E3 C0 02            [24] 1695 	push	ar2
      0005E5 C0 01            [24] 1696 	push	ar1
      0005E7 C0 00            [24] 1697 	push	ar0
      0005E9 C0 07            [24] 1698 	push	ar7
      0005EB C0 01            [24] 1699 	push	ar1
      0005ED C0 02            [24] 1700 	push	ar2
      0005EF 74rE6            [12] 1701 	mov	a,#___str_12
      0005F1 C0 E0            [24] 1702 	push	acc
      0005F3 74s01            [12] 1703 	mov	a,#(___str_12 >> 8)
      0005F5 C0 E0            [24] 1704 	push	acc
      0005F7 74 80            [12] 1705 	mov	a,#0x80
      0005F9 C0 E0            [24] 1706 	push	acc
      0005FB 12r00r00         [24] 1707 	lcall	_printf
      0005FE E5 81            [12] 1708 	mov	a,sp
      000600 24 F9            [12] 1709 	add	a,#0xf9
      000602 F5 81            [12] 1710 	mov	sp,a
      000604 D0 01            [24] 1711 	pop	ar1
      000606 D0 02            [24] 1712 	pop	ar2
      000608 D0 03            [24] 1713 	pop	ar3
      00060A D0 04            [24] 1714 	pop	ar4
      00060C D0 05            [24] 1715 	pop	ar5
      00060E D0 06            [24] 1716 	pop	ar6
      000610 D0 07            [24] 1717 	pop	ar7
                                   1718 ;	SPI.c:263: data_ptr++;
                                   1719 ;	SPI.c:260: for (int i = 0; i < num_bytes; i++) {
      000612 90r00r1B         [24] 1720 	mov	dptr,#_spi_buffer_read_i_20002_111
      000615 E9               [12] 1721 	mov	a,r1
      000616 F0               [24] 1722 	movx	@dptr,a
      000617 EA               [12] 1723 	mov	a,r2
      000618 A3               [24] 1724 	inc	dptr
      000619 F0               [24] 1725 	movx	@dptr,a
      00061A D0 07            [24] 1726 	pop	ar7
      00061C D0 06            [24] 1727 	pop	ar6
      00061E 02r05r84         [24] 1728 	ljmp	00109$
      000621                       1729 00107$:
                                   1730 ;	SPI.c:265: CS_HIGH; // Pull CS High
                                   1731 ;	assignBit
      000621 D2 91            [12] 1732 	setb	_P1_1
                                   1733 ;	SPI.c:266: }
      000623 22               [24] 1734 	ret
                                   1735 ;------------------------------------------------------------
                                   1736 ;Allocation info for local variables in function 'spi_buffer_write'
                                   1737 ;------------------------------------------------------------
                                   1738 ;start_address             Allocated with name '_spi_buffer_write_PARM_2'
                                   1739 ;data_ptr                  Allocated with name '_spi_buffer_write_PARM_3'
                                   1740 ;num_bytes                 Allocated with name '_spi_buffer_write_num_bytes_10000_113'
                                   1741 ;higher_byte               Allocated with name '_spi_buffer_write_higher_byte_10001_118'
                                   1742 ;lower_byte                Allocated with name '_spi_buffer_write_lower_byte_10001_118'
                                   1743 ;opcode                    Allocated with name '_spi_buffer_write_opcode_10002_119'
                                   1744 ;i                         Allocated with name '_spi_buffer_write_i_20002_120'
                                   1745 ;------------------------------------------------------------
                                   1746 ;	SPI.c:269: void spi_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1747 ;	-----------------------------------------
                                   1748 ;	 function spi_buffer_write
                                   1749 ;	-----------------------------------------
      000624                       1750 _spi_buffer_write:
      000624 AF 83            [24] 1751 	mov	r7,dph
      000626 E5 82            [12] 1752 	mov	a,dpl
      000628 90r00r22         [24] 1753 	mov	dptr,#_spi_buffer_write_num_bytes_10000_113
      00062B F0               [24] 1754 	movx	@dptr,a
      00062C EF               [12] 1755 	mov	a,r7
      00062D A3               [24] 1756 	inc	dptr
      00062E F0               [24] 1757 	movx	@dptr,a
                                   1758 ;	SPI.c:271: if (num_bytes < 1)
      00062F 90r00r22         [24] 1759 	mov	dptr,#_spi_buffer_write_num_bytes_10000_113
      000632 E0               [24] 1760 	movx	a,@dptr
      000633 FE               [12] 1761 	mov	r6,a
      000634 A3               [24] 1762 	inc	dptr
      000635 E0               [24] 1763 	movx	a,@dptr
      000636 FF               [12] 1764 	mov	r7,a
      000637 C3               [12] 1765 	clr	c
      000638 EE               [12] 1766 	mov	a,r6
      000639 94 01            [12] 1767 	subb	a,#0x01
      00063B EF               [12] 1768 	mov	a,r7
      00063C 64 80            [12] 1769 	xrl	a,#0x80
      00063E 94 80            [12] 1770 	subb	a,#0x80
      000640 50 1A            [24] 1771 	jnc	00102$
                                   1772 ;	SPI.c:273: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      000642 C0 06            [24] 1773 	push	ar6
      000644 C0 07            [24] 1774 	push	ar7
      000646 74r71            [12] 1775 	mov	a,#___str_9
      000648 C0 E0            [24] 1776 	push	acc
      00064A 74s01            [12] 1777 	mov	a,#(___str_9 >> 8)
      00064C C0 E0            [24] 1778 	push	acc
      00064E 74 80            [12] 1779 	mov	a,#0x80
      000650 C0 E0            [24] 1780 	push	acc
      000652 12r00r00         [24] 1781 	lcall	_printf
      000655 E5 81            [12] 1782 	mov	a,sp
      000657 24 FB            [12] 1783 	add	a,#0xfb
      000659 F5 81            [12] 1784 	mov	sp,a
                                   1785 ;	SPI.c:274: return;
      00065B 22               [24] 1786 	ret
      00065C                       1787 00102$:
                                   1788 ;	SPI.c:276: if (start_address > 0x1FFF) {
      00065C 90r00r1D         [24] 1789 	mov	dptr,#_spi_buffer_write_PARM_2
      00065F E0               [24] 1790 	movx	a,@dptr
      000660 FC               [12] 1791 	mov	r4,a
      000661 A3               [24] 1792 	inc	dptr
      000662 E0               [24] 1793 	movx	a,@dptr
      000663 FD               [12] 1794 	mov	r5,a
      000664 8C 02            [24] 1795 	mov	ar2,r4
      000666 8D 03            [24] 1796 	mov	ar3,r5
      000668 C3               [12] 1797 	clr	c
      000669 74 FF            [12] 1798 	mov	a,#0xff
      00066B 9A               [12] 1799 	subb	a,r2
      00066C 74 1F            [12] 1800 	mov	a,#0x1f
      00066E 9B               [12] 1801 	subb	a,r3
      00066F 50 1A            [24] 1802 	jnc	00104$
                                   1803 ;	SPI.c:277: printf("\n\rInvalid address: %04X\n\r", start_address);
      000671 C0 04            [24] 1804 	push	ar4
      000673 C0 05            [24] 1805 	push	ar5
      000675 74r91            [12] 1806 	mov	a,#___str_10
      000677 C0 E0            [24] 1807 	push	acc
      000679 74s01            [12] 1808 	mov	a,#(___str_10 >> 8)
      00067B C0 E0            [24] 1809 	push	acc
      00067D 74 80            [12] 1810 	mov	a,#0x80
      00067F C0 E0            [24] 1811 	push	acc
      000681 12r00r00         [24] 1812 	lcall	_printf
      000684 E5 81            [12] 1813 	mov	a,sp
      000686 24 FB            [12] 1814 	add	a,#0xfb
      000688 F5 81            [12] 1815 	mov	sp,a
                                   1816 ;	SPI.c:278: return;
      00068A 22               [24] 1817 	ret
      00068B                       1818 00104$:
                                   1819 ;	SPI.c:282: if (num_bytes > 1) {
      00068B C3               [12] 1820 	clr	c
      00068C 74 01            [12] 1821 	mov	a,#0x01
      00068E 9E               [12] 1822 	subb	a,r6
      00068F 74 80            [12] 1823 	mov	a,#(0x00 ^ 0x80)
      000691 8F F0            [24] 1824 	mov	b,r7
      000693 63 F0 80         [24] 1825 	xrl	b,#0x80
      000696 95 F0            [12] 1826 	subb	a,b
      000698 50 0B            [24] 1827 	jnc	00106$
                                   1828 ;	SPI.c:283: spi_set_autoinc();
      00069A C0 05            [24] 1829 	push	ar5
      00069C C0 04            [24] 1830 	push	ar4
      00069E 12r00r12         [24] 1831 	lcall	_spi_set_autoinc
      0006A1 D0 04            [24] 1832 	pop	ar4
      0006A3 D0 05            [24] 1833 	pop	ar5
      0006A5                       1834 00106$:
                                   1835 ;	SPI.c:286: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      0006A5 8D 07            [24] 1836 	mov	ar7,r5
                                   1837 ;	SPI.c:287: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      0006A7 8C 06            [24] 1838 	mov	ar6,r4
                                   1839 ;	SPI.c:289: spi_control_write(0, 0x03, higher_byte); // High byte
      0006A9 90r00r03         [24] 1840 	mov	dptr,#_spi_control_write_PARM_2
      0006AC 74 03            [12] 1841 	mov	a,#0x03
      0006AE F0               [24] 1842 	movx	@dptr,a
      0006AF 90r00r04         [24] 1843 	mov	dptr,#_spi_control_write_PARM_3
      0006B2 EF               [12] 1844 	mov	a,r7
      0006B3 F0               [24] 1845 	movx	@dptr,a
      0006B4 75 82 00         [24] 1846 	mov	dpl, #0x00
      0006B7 C0 06            [24] 1847 	push	ar6
      0006B9 C0 05            [24] 1848 	push	ar5
      0006BB C0 04            [24] 1849 	push	ar4
      0006BD 12r00rA8         [24] 1850 	lcall	_spi_control_write
      0006C0 D0 04            [24] 1851 	pop	ar4
      0006C2 D0 05            [24] 1852 	pop	ar5
      0006C4 D0 06            [24] 1853 	pop	ar6
                                   1854 ;	SPI.c:290: spi_control_write(0, 0x02, lower_byte); // Low byte
      0006C6 90r00r03         [24] 1855 	mov	dptr,#_spi_control_write_PARM_2
      0006C9 74 02            [12] 1856 	mov	a,#0x02
      0006CB F0               [24] 1857 	movx	@dptr,a
      0006CC 90r00r04         [24] 1858 	mov	dptr,#_spi_control_write_PARM_3
      0006CF EE               [12] 1859 	mov	a,r6
      0006D0 F0               [24] 1860 	movx	@dptr,a
      0006D1 75 82 00         [24] 1861 	mov	dpl, #0x00
      0006D4 C0 05            [24] 1862 	push	ar5
      0006D6 C0 04            [24] 1863 	push	ar4
      0006D8 12r00rA8         [24] 1864 	lcall	_spi_control_write
                                   1865 ;	SPI.c:293: CS_LOW; // Pull CS Low
                                   1866 ;	assignBit
      0006DB C2 91            [12] 1867 	clr	_P1_1
                                   1868 ;	SPI.c:294: SPI_send(opcode); // Send opcode
      0006DD 75 82 7A         [24] 1869 	mov	dpl, #0x7a
      0006E0 12r01r13         [24] 1870 	lcall	_SPI_send
      0006E3 D0 04            [24] 1871 	pop	ar4
      0006E5 D0 05            [24] 1872 	pop	ar5
                                   1873 ;	SPI.c:297: printf("Writing %d bytes to buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      0006E7 90r00r22         [24] 1874 	mov	dptr,#_spi_buffer_write_num_bytes_10000_113
      0006EA E0               [24] 1875 	movx	a,@dptr
      0006EB FE               [12] 1876 	mov	r6,a
      0006EC A3               [24] 1877 	inc	dptr
      0006ED E0               [24] 1878 	movx	a,@dptr
      0006EE FF               [12] 1879 	mov	r7,a
      0006EF C0 07            [24] 1880 	push	ar7
      0006F1 C0 06            [24] 1881 	push	ar6
      0006F3 C0 04            [24] 1882 	push	ar4
      0006F5 C0 05            [24] 1883 	push	ar5
      0006F7 C0 06            [24] 1884 	push	ar6
      0006F9 C0 07            [24] 1885 	push	ar7
      0006FB 74rF8            [12] 1886 	mov	a,#___str_13
      0006FD C0 E0            [24] 1887 	push	acc
      0006FF 74s01            [12] 1888 	mov	a,#(___str_13 >> 8)
      000701 C0 E0            [24] 1889 	push	acc
      000703 74 80            [12] 1890 	mov	a,#0x80
      000705 C0 E0            [24] 1891 	push	acc
      000707 12r00r00         [24] 1892 	lcall	_printf
      00070A E5 81            [12] 1893 	mov	a,sp
      00070C 24 F9            [12] 1894 	add	a,#0xf9
      00070E F5 81            [12] 1895 	mov	sp,a
      000710 D0 06            [24] 1896 	pop	ar6
      000712 D0 07            [24] 1897 	pop	ar7
                                   1898 ;	SPI.c:298: for (int i = 0; i < num_bytes; i++) {
      000714 90r00r24         [24] 1899 	mov	dptr,#_spi_buffer_write_i_20002_120
      000717 E4               [12] 1900 	clr	a
      000718 F0               [24] 1901 	movx	@dptr,a
      000719 A3               [24] 1902 	inc	dptr
      00071A F0               [24] 1903 	movx	@dptr,a
      00071B 90r00r1F         [24] 1904 	mov	dptr,#_spi_buffer_write_PARM_3
      00071E E0               [24] 1905 	movx	a,@dptr
      00071F FB               [12] 1906 	mov	r3,a
      000720 A3               [24] 1907 	inc	dptr
      000721 E0               [24] 1908 	movx	a,@dptr
      000722 FC               [12] 1909 	mov	r4,a
      000723 A3               [24] 1910 	inc	dptr
      000724 E0               [24] 1911 	movx	a,@dptr
      000725 FD               [12] 1912 	mov	r5,a
      000726                       1913 00109$:
      000726 90r00r24         [24] 1914 	mov	dptr,#_spi_buffer_write_i_20002_120
      000729 E0               [24] 1915 	movx	a,@dptr
      00072A F9               [12] 1916 	mov	r1,a
      00072B A3               [24] 1917 	inc	dptr
      00072C E0               [24] 1918 	movx	a,@dptr
      00072D FA               [12] 1919 	mov	r2,a
      00072E C3               [12] 1920 	clr	c
      00072F E9               [12] 1921 	mov	a,r1
      000730 9E               [12] 1922 	subb	a,r6
      000731 EA               [12] 1923 	mov	a,r2
      000732 64 80            [12] 1924 	xrl	a,#0x80
      000734 8F F0            [24] 1925 	mov	b,r7
      000736 63 F0 80         [24] 1926 	xrl	b,#0x80
      000739 95 F0            [12] 1927 	subb	a,b
      00073B 40 03            [24] 1928 	jc	00147$
      00073D 02r07rCD         [24] 1929 	ljmp	00107$
      000740                       1930 00147$:
                                   1931 ;	SPI.c:299: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      000740 C0 06            [24] 1932 	push	ar6
      000742 C0 07            [24] 1933 	push	ar7
      000744 8B 82            [24] 1934 	mov	dpl,r3
      000746 8C 83            [24] 1935 	mov	dph,r4
      000748 8D F0            [24] 1936 	mov	b,r5
      00074A 12r00r00         [24] 1937 	lcall	__gptrget
      00074D F8               [12] 1938 	mov	r0,a
      00074E 7F 00            [12] 1939 	mov	r7,#0x00
      000750 09               [12] 1940 	inc	r1
      000751 B9 00 01         [24] 1941 	cjne	r1,#0x00,00148$
      000754 0A               [12] 1942 	inc	r2
      000755                       1943 00148$:
      000755 C0 07            [24] 1944 	push	ar7
      000757 C0 06            [24] 1945 	push	ar6
      000759 C0 05            [24] 1946 	push	ar5
      00075B C0 04            [24] 1947 	push	ar4
      00075D C0 03            [24] 1948 	push	ar3
      00075F C0 02            [24] 1949 	push	ar2
      000761 C0 01            [24] 1950 	push	ar1
      000763 C0 00            [24] 1951 	push	ar0
      000765 C0 07            [24] 1952 	push	ar7
      000767 C0 01            [24] 1953 	push	ar1
      000769 C0 02            [24] 1954 	push	ar2
      00076B 74rE6            [12] 1955 	mov	a,#___str_12
      00076D C0 E0            [24] 1956 	push	acc
      00076F 74s01            [12] 1957 	mov	a,#(___str_12 >> 8)
      000771 C0 E0            [24] 1958 	push	acc
      000773 74 80            [12] 1959 	mov	a,#0x80
      000775 C0 E0            [24] 1960 	push	acc
      000777 12r00r00         [24] 1961 	lcall	_printf
      00077A E5 81            [12] 1962 	mov	a,sp
      00077C 24 F9            [12] 1963 	add	a,#0xf9
      00077E F5 81            [12] 1964 	mov	sp,a
      000780 D0 01            [24] 1965 	pop	ar1
      000782 D0 02            [24] 1966 	pop	ar2
      000784 D0 03            [24] 1967 	pop	ar3
      000786 D0 04            [24] 1968 	pop	ar4
      000788 D0 05            [24] 1969 	pop	ar5
      00078A D0 06            [24] 1970 	pop	ar6
      00078C D0 07            [24] 1971 	pop	ar7
                                   1972 ;	SPI.c:300: SPI_send(*data_ptr); // Send data
      00078E 8B 82            [24] 1973 	mov	dpl,r3
      000790 8C 83            [24] 1974 	mov	dph,r4
      000792 8D F0            [24] 1975 	mov	b,r5
      000794 12r00r00         [24] 1976 	lcall	__gptrget
      000797 FF               [12] 1977 	mov	r7,a
      000798 A3               [24] 1978 	inc	dptr
      000799 AB 82            [24] 1979 	mov	r3,dpl
      00079B AC 83            [24] 1980 	mov	r4,dph
      00079D 8F 82            [24] 1981 	mov	dpl, r7
      00079F C0 07            [24] 1982 	push	ar7
      0007A1 C0 06            [24] 1983 	push	ar6
      0007A3 C0 05            [24] 1984 	push	ar5
      0007A5 C0 04            [24] 1985 	push	ar4
      0007A7 C0 03            [24] 1986 	push	ar3
      0007A9 C0 02            [24] 1987 	push	ar2
      0007AB C0 01            [24] 1988 	push	ar1
      0007AD 12r01r13         [24] 1989 	lcall	_SPI_send
      0007B0 D0 01            [24] 1990 	pop	ar1
      0007B2 D0 02            [24] 1991 	pop	ar2
      0007B4 D0 03            [24] 1992 	pop	ar3
      0007B6 D0 04            [24] 1993 	pop	ar4
      0007B8 D0 05            [24] 1994 	pop	ar5
      0007BA D0 06            [24] 1995 	pop	ar6
      0007BC D0 07            [24] 1996 	pop	ar7
                                   1997 ;	SPI.c:301: data_ptr++;
                                   1998 ;	SPI.c:298: for (int i = 0; i < num_bytes; i++) {
      0007BE 90r00r24         [24] 1999 	mov	dptr,#_spi_buffer_write_i_20002_120
      0007C1 E9               [12] 2000 	mov	a,r1
      0007C2 F0               [24] 2001 	movx	@dptr,a
      0007C3 EA               [12] 2002 	mov	a,r2
      0007C4 A3               [24] 2003 	inc	dptr
      0007C5 F0               [24] 2004 	movx	@dptr,a
      0007C6 D0 07            [24] 2005 	pop	ar7
      0007C8 D0 06            [24] 2006 	pop	ar6
      0007CA 02r07r26         [24] 2007 	ljmp	00109$
      0007CD                       2008 00107$:
                                   2009 ;	SPI.c:303: CS_HIGH; // Pull CS High
                                   2010 ;	assignBit
      0007CD D2 91            [12] 2011 	setb	_P1_1
                                   2012 ;	SPI.c:304: }
      0007CF 22               [24] 2013 	ret
                                   2014 ;------------------------------------------------------------
                                   2015 ;Allocation info for local variables in function 'init_ENC'
                                   2016 ;------------------------------------------------------------
                                   2017 ;	SPI.c:306: void init_ENC(void)
                                   2018 ;	-----------------------------------------
                                   2019 ;	 function init_ENC
                                   2020 ;	-----------------------------------------
      0007D0                       2021 _init_ENC:
                                   2022 ;	SPI.c:308: spi_control_write(1, 0x18, 0x41);
      0007D0 90r00r03         [24] 2023 	mov	dptr,#_spi_control_write_PARM_2
      0007D3 74 18            [12] 2024 	mov	a,#0x18
      0007D5 F0               [24] 2025 	movx	@dptr,a
      0007D6 90r00r04         [24] 2026 	mov	dptr,#_spi_control_write_PARM_3
      0007D9 74 41            [12] 2027 	mov	a,#0x41
      0007DB F0               [24] 2028 	movx	@dptr,a
      0007DC 75 82 01         [24] 2029 	mov	dpl, #0x01
      0007DF 12r00rA8         [24] 2030 	lcall	_spi_control_write
                                   2031 ;	SPI.c:310: enc28j60_init_rx_buffer(0x0000, 0x00FF);
      0007E2 90r00r00         [24] 2032 	mov	dptr,#_enc28j60_init_rx_buffer_PARM_2
      0007E5 74 FF            [12] 2033 	mov	a,#0xff
      0007E7 F0               [24] 2034 	movx	@dptr,a
      0007E8 E4               [12] 2035 	clr	a
      0007E9 A3               [24] 2036 	inc	dptr
      0007EA F0               [24] 2037 	movx	@dptr,a
      0007EB 90 00 00         [24] 2038 	mov	dptr,#0x0000
      0007EE 12r00r00         [24] 2039 	lcall	_enc28j60_init_rx_buffer
                                   2040 ;	SPI.c:312: IT0 = 1;  // Edge-triggered mode for INT0
                                   2041 ;	assignBit
      0007F1 D2 88            [12] 2042 	setb	_IT0
                                   2043 ;	SPI.c:313: EX0 = 1;  // Enable INT0
                                   2044 ;	assignBit
      0007F3 D2 A8            [12] 2045 	setb	_EX0
                                   2046 ;	SPI.c:314: EA = 1;   // Enable global interrupts
                                   2047 ;	assignBit
      0007F5 D2 AF            [12] 2048 	setb	_EA
                                   2049 ;	SPI.c:317: spi_control_write(0x02, 0x00, 0x01); // Write 0x01 to MACON1 (address 0x00 in bank 2)
      0007F7 90r00r03         [24] 2050 	mov	dptr,#_spi_control_write_PARM_2
      0007FA E4               [12] 2051 	clr	a
      0007FB F0               [24] 2052 	movx	@dptr,a
      0007FC 90r00r04         [24] 2053 	mov	dptr,#_spi_control_write_PARM_3
      0007FF 04               [12] 2054 	inc	a
      000800 F0               [24] 2055 	movx	@dptr,a
      000801 75 82 02         [24] 2056 	mov	dpl, #0x02
      000804 12r00rA8         [24] 2057 	lcall	_spi_control_write
                                   2058 ;	SPI.c:318: spi_control_write(0x02, 0x02, 0x70); // Write 0x30 to MACON3 (address 0x02 in bank 2)
      000807 90r00r03         [24] 2059 	mov	dptr,#_spi_control_write_PARM_2
      00080A 74 02            [12] 2060 	mov	a,#0x02
      00080C F0               [24] 2061 	movx	@dptr,a
      00080D 90r00r04         [24] 2062 	mov	dptr,#_spi_control_write_PARM_3
      000810 74 70            [12] 2063 	mov	a,#0x70
      000812 F0               [24] 2064 	movx	@dptr,a
      000813 75 82 02         [24] 2065 	mov	dpl, #0x02
      000816 12r00rA8         [24] 2066 	lcall	_spi_control_write
                                   2067 ;	SPI.c:319: spi_control_write(0x02, 0x03, 0x40); // Write 0x40 to MACON4 (address 0x02 in bank 2) - DEFER bit
      000819 90r00r03         [24] 2068 	mov	dptr,#_spi_control_write_PARM_2
      00081C 74 03            [12] 2069 	mov	a,#0x03
      00081E F0               [24] 2070 	movx	@dptr,a
      00081F 90r00r04         [24] 2071 	mov	dptr,#_spi_control_write_PARM_3
      000822 74 40            [12] 2072 	mov	a,#0x40
      000824 F0               [24] 2073 	movx	@dptr,a
      000825 75 82 02         [24] 2074 	mov	dpl, #0x02
      000828 12r00rA8         [24] 2075 	lcall	_spi_control_write
                                   2076 ;	SPI.c:320: spi_control_write(0x02, 0x0A, 0xEE); // Write 0xEE to MAMXFLL (low byte, address 0x0A in bank 2)
      00082B 90r00r03         [24] 2077 	mov	dptr,#_spi_control_write_PARM_2
      00082E 74 0A            [12] 2078 	mov	a,#0x0a
      000830 F0               [24] 2079 	movx	@dptr,a
      000831 90r00r04         [24] 2080 	mov	dptr,#_spi_control_write_PARM_3
      000834 74 EE            [12] 2081 	mov	a,#0xee
      000836 F0               [24] 2082 	movx	@dptr,a
      000837 75 82 02         [24] 2083 	mov	dpl, #0x02
      00083A 12r00rA8         [24] 2084 	lcall	_spi_control_write
                                   2085 ;	SPI.c:321: spi_control_write(0x02, 0x0B, 0x05); // Write 0x05 to MAMXFLH (high byte, address 0x0B in bank 2)
      00083D 90r00r03         [24] 2086 	mov	dptr,#_spi_control_write_PARM_2
      000840 74 0B            [12] 2087 	mov	a,#0x0b
      000842 F0               [24] 2088 	movx	@dptr,a
      000843 90r00r04         [24] 2089 	mov	dptr,#_spi_control_write_PARM_3
      000846 74 05            [12] 2090 	mov	a,#0x05
      000848 F0               [24] 2091 	movx	@dptr,a
      000849 75 82 02         [24] 2092 	mov	dpl, #0x02
      00084C 12r00rA8         [24] 2093 	lcall	_spi_control_write
                                   2094 ;	SPI.c:322: spi_control_write(0x02, 0x04, 0x12); // Write 0x15 to MABBIPG (address 0x04 in bank 2)
      00084F 90r00r03         [24] 2095 	mov	dptr,#_spi_control_write_PARM_2
      000852 74 04            [12] 2096 	mov	a,#0x04
      000854 F0               [24] 2097 	movx	@dptr,a
      000855 90r00r04         [24] 2098 	mov	dptr,#_spi_control_write_PARM_3
      000858 74 12            [12] 2099 	mov	a,#0x12
      00085A F0               [24] 2100 	movx	@dptr,a
      00085B 75 82 02         [24] 2101 	mov	dpl, #0x02
      00085E 12r00rA8         [24] 2102 	lcall	_spi_control_write
                                   2103 ;	SPI.c:323: spi_control_write(0x02, 0x06, 0x12); // Write 0x12 to MAIPGL (low byte, address 0x06 in bank 2)
      000861 90r00r03         [24] 2104 	mov	dptr,#_spi_control_write_PARM_2
      000864 74 06            [12] 2105 	mov	a,#0x06
      000866 F0               [24] 2106 	movx	@dptr,a
      000867 90r00r04         [24] 2107 	mov	dptr,#_spi_control_write_PARM_3
      00086A 74 12            [12] 2108 	mov	a,#0x12
      00086C F0               [24] 2109 	movx	@dptr,a
      00086D 75 82 02         [24] 2110 	mov	dpl, #0x02
      000870 12r00rA8         [24] 2111 	lcall	_spi_control_write
                                   2112 ;	SPI.c:324: spi_control_write(0x02, 0x07, 0x0C); // Write 0x12 to MAIPGH (low byte, address 0x06 in bank 2)
      000873 90r00r03         [24] 2113 	mov	dptr,#_spi_control_write_PARM_2
      000876 74 07            [12] 2114 	mov	a,#0x07
      000878 F0               [24] 2115 	movx	@dptr,a
      000879 90r00r04         [24] 2116 	mov	dptr,#_spi_control_write_PARM_3
      00087C 74 0C            [12] 2117 	mov	a,#0x0c
      00087E F0               [24] 2118 	movx	@dptr,a
      00087F 75 82 02         [24] 2119 	mov	dpl, #0x02
      000882 12r00rA8         [24] 2120 	lcall	_spi_control_write
                                   2121 ;	SPI.c:328: spi_control_write(0, 0x1B, 0x81);
      000885 90r00r03         [24] 2122 	mov	dptr,#_spi_control_write_PARM_2
      000888 74 1B            [12] 2123 	mov	a,#0x1b
      00088A F0               [24] 2124 	movx	@dptr,a
      00088B 90r00r04         [24] 2125 	mov	dptr,#_spi_control_write_PARM_3
      00088E 74 81            [12] 2126 	mov	a,#0x81
      000890 F0               [24] 2127 	movx	@dptr,a
      000891 75 82 00         [24] 2128 	mov	dpl, #0x00
                                   2129 ;	SPI.c:330: }
      000894 02r00rA8         [24] 2130 	ljmp	_spi_control_write
                                   2131 ;------------------------------------------------------------
                                   2132 ;Allocation info for local variables in function 'init_MAC'
                                   2133 ;------------------------------------------------------------
                                   2134 ;	SPI.c:332: void init_MAC(void)
                                   2135 ;	-----------------------------------------
                                   2136 ;	 function init_MAC
                                   2137 ;	-----------------------------------------
      000897                       2138 _init_MAC:
                                   2139 ;	SPI.c:335: }
      000897 22               [24] 2140 	ret
                                   2141 	.area CSEG    (CODE)
                                   2142 	.area CONST   (CODE)
                                   2143 	.area CONST   (CODE)
      000000                       2144 ___str_0:
      000000 77 72 6F 6E 67 20 62  2145 	.ascii "wrong bank"
             61 6E 6B
      00000A 00                    2146 	.db 0x00
                                   2147 	.area CSEG    (CODE)
                                   2148 	.area CONST   (CODE)
      00000B                       2149 ___str_1:
      00000B 57 72 69 74 65 3A 20  2150 	.ascii "Write: Address 0x%02X, Data 0x%02X"
             41 64 64 72 65 73 73
             20 30 78 25 30 32 58
             2C 20 44 61 74 61 20
             30 78 25 30 32 58
      00002D 0A                    2151 	.db 0x0a
      00002E 0D                    2152 	.db 0x0d
      00002F 00                    2153 	.db 0x00
                                   2154 	.area CSEG    (CODE)
                                   2155 	.area CONST   (CODE)
      000030                       2156 ___str_2:
      000030 0A                    2157 	.db 0x0a
      000031 0D                    2158 	.db 0x0d
      000032 49 6E 76 61 6C 69 64  2159 	.ascii "Invalid address: MAC register address range [0, 0x1F]"
             20 61 64 64 72 65 73
             73 3A 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 72 61 6E 67
             65 20 5B 30 2C 20 30
             78 31 46 5D
      000067 0A                    2160 	.db 0x0a
      000068 0D                    2161 	.db 0x0d
      000069 00                    2162 	.db 0x00
                                   2163 	.area CSEG    (CODE)
                                   2164 	.area CONST   (CODE)
      00006A                       2165 ___str_3:
      00006A 52 65 61 64 3A 20 41  2166 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      00008B 0A                    2167 	.db 0x0a
      00008C 0D                    2168 	.db 0x0d
      00008D 00                    2169 	.db 0x00
                                   2170 	.area CSEG    (CODE)
                                   2171 	.area CONST   (CODE)
      00008E                       2172 ___str_4:
      00008E 50 48 59 20 57 72 69  2173 	.ascii "PHY Write: Address 0x%02X, Data 0x%04X"
             74 65 3A 20 41 64 64
             72 65 73 73 20 30 78
             25 30 32 58 2C 20 44
             61 74 61 20 30 78 25
             30 34 58
      0000B4 0A                    2174 	.db 0x0a
      0000B5 0D                    2175 	.db 0x0d
      0000B6 00                    2176 	.db 0x00
                                   2177 	.area CSEG    (CODE)
                                   2178 	.area CONST   (CODE)
      0000B7                       2179 ___str_5:
      0000B7 52 65 61 64 3A 20 41  2180 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      0000D8 0A                    2181 	.db 0x0a
      0000D9 00                    2182 	.db 0x00
                                   2183 	.area CSEG    (CODE)
                                   2184 	.area CONST   (CODE)
      0000DA                       2185 ___str_6:
      0000DA 50 48 59 20 52 65 61  2186 	.ascii "PHY Read: Address 0x%02X, Data 0x%04X"
             64 3A 20 41 64 64 72
             65 73 73 20 30 78 25
             30 32 58 2C 20 44 61
             74 61 20 30 78 25 30
             34 58
      0000FF 0A                    2187 	.db 0x0a
      000100 0D                    2188 	.db 0x0d
      000101 00                    2189 	.db 0x00
                                   2190 	.area CSEG    (CODE)
                                   2191 	.area CONST   (CODE)
      000102                       2192 ___str_7:
      000102 0A                    2193 	.db 0x0a
      000103 0D                    2194 	.db 0x0d
      000104 49 6E 76 61 6C 69 64  2195 	.ascii "Invalid Buffer Address or Size: Start 0x%04X, Size 0x%04X"
             20 42 75 66 66 65 72
             20 41 64 64 72 65 73
             73 20 6F 72 20 53 69
             7A 65 3A 20 53 74 61
             72 74 20 30 78 25 30
             34 58 2C 20 53 69 7A
             65 20 30 78 25 30 34
             58
      00013D 0A                    2196 	.db 0x0a
      00013E 0D                    2197 	.db 0x0d
      00013F 00                    2198 	.db 0x00
                                   2199 	.area CSEG    (CODE)
                                   2200 	.area CONST   (CODE)
      000140                       2201 ___str_8:
      000140 0A                    2202 	.db 0x0a
      000141 0D                    2203 	.db 0x0d
      000142 42 75 66 66 65 72 20  2204 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      00016E 0A                    2205 	.db 0x0a
      00016F 0D                    2206 	.db 0x0d
      000170 00                    2207 	.db 0x00
                                   2208 	.area CSEG    (CODE)
                                   2209 	.area CONST   (CODE)
      000171                       2210 ___str_9:
      000171 0A                    2211 	.db 0x0a
      000172 0D                    2212 	.db 0x0d
      000173 49 6E 76 61 6C 69 64  2213 	.ascii "Invalid number of bytes: %d"
             20 6E 75 6D 62 65 72
             20 6F 66 20 62 79 74
             65 73 3A 20 25 64
      00018E 0A                    2214 	.db 0x0a
      00018F 0D                    2215 	.db 0x0d
      000190 00                    2216 	.db 0x00
                                   2217 	.area CSEG    (CODE)
                                   2218 	.area CONST   (CODE)
      000191                       2219 ___str_10:
      000191 0A                    2220 	.db 0x0a
      000192 0D                    2221 	.db 0x0d
      000193 49 6E 76 61 6C 69 64  2222 	.ascii "Invalid address: %04X"
             20 61 64 64 72 65 73
             73 3A 20 25 30 34 58
      0001A8 0A                    2223 	.db 0x0a
      0001A9 0D                    2224 	.db 0x0d
      0001AA 00                    2225 	.db 0x00
                                   2226 	.area CSEG    (CODE)
                                   2227 	.area CONST   (CODE)
      0001AB                       2228 ___str_11:
      0001AB 52 65 61 64 69 6E 67  2229 	.ascii "Reading %d bytes from buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 66 72 6F 6D
             20 62 75 66 66 65 72
             20 73 74 61 72 74 69
             6E 67 20 61 74 20 61
             64 64 72 65 73 73 20
             30 78 25 30 34 58 3A
      0001E3 0A                    2230 	.db 0x0a
      0001E4 0D                    2231 	.db 0x0d
      0001E5 00                    2232 	.db 0x00
                                   2233 	.area CSEG    (CODE)
                                   2234 	.area CONST   (CODE)
      0001E6                       2235 ___str_12:
      0001E6 42 79 74 65 20 25 64  2236 	.ascii "Byte %d: 0x%02X"
             3A 20 30 78 25 30 32
             58
      0001F5 0A                    2237 	.db 0x0a
      0001F6 0D                    2238 	.db 0x0d
      0001F7 00                    2239 	.db 0x00
                                   2240 	.area CSEG    (CODE)
                                   2241 	.area CONST   (CODE)
      0001F8                       2242 ___str_13:
      0001F8 57 72 69 74 69 6E 67  2243 	.ascii "Writing %d bytes to buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 74 6F 20 62
             75 66 66 65 72 20 73
             74 61 72 74 69 6E 67
             20 61 74 20 61 64 64
             72 65 73 73 20 30 78
             25 30 34 58 3A
      00022E 0A                    2244 	.db 0x0a
      00022F 0D                    2245 	.db 0x0d
      000230 00                    2246 	.db 0x00
                                   2247 	.area CSEG    (CODE)
                                   2248 	.area XINIT   (CODE)
                                   2249 	.area CABS    (ABS,CODE)
