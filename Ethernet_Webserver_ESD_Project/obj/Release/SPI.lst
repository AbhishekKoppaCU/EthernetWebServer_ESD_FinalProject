                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module SPI
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _printf
                                     12 	.globl _TF1
                                     13 	.globl _TR1
                                     14 	.globl _TF0
                                     15 	.globl _TR0
                                     16 	.globl _IE1
                                     17 	.globl _IT1
                                     18 	.globl _IE0
                                     19 	.globl _IT0
                                     20 	.globl _SM0
                                     21 	.globl _SM1
                                     22 	.globl _SM2
                                     23 	.globl _REN
                                     24 	.globl _TB8
                                     25 	.globl _RB8
                                     26 	.globl _TI
                                     27 	.globl _RI
                                     28 	.globl _CY
                                     29 	.globl _AC
                                     30 	.globl _F0
                                     31 	.globl _RS1
                                     32 	.globl _RS0
                                     33 	.globl _OV
                                     34 	.globl _F1
                                     35 	.globl _P
                                     36 	.globl _RD
                                     37 	.globl _WR
                                     38 	.globl _T1
                                     39 	.globl _T0
                                     40 	.globl _INT1
                                     41 	.globl _INT0
                                     42 	.globl _TXD0
                                     43 	.globl _TXD
                                     44 	.globl _RXD0
                                     45 	.globl _RXD
                                     46 	.globl _P3_7
                                     47 	.globl _P3_6
                                     48 	.globl _P3_5
                                     49 	.globl _P3_4
                                     50 	.globl _P3_3
                                     51 	.globl _P3_2
                                     52 	.globl _P3_1
                                     53 	.globl _P3_0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _P1_7
                                     63 	.globl _P1_6
                                     64 	.globl _P1_5
                                     65 	.globl _P1_4
                                     66 	.globl _P1_3
                                     67 	.globl _P1_2
                                     68 	.globl _P1_1
                                     69 	.globl _P1_0
                                     70 	.globl _P0_7
                                     71 	.globl _P0_6
                                     72 	.globl _P0_5
                                     73 	.globl _P0_4
                                     74 	.globl _P0_3
                                     75 	.globl _P0_2
                                     76 	.globl _P0_1
                                     77 	.globl _P0_0
                                     78 	.globl _PS
                                     79 	.globl _PT1
                                     80 	.globl _PX1
                                     81 	.globl _PT0
                                     82 	.globl _PX0
                                     83 	.globl _EA
                                     84 	.globl _ES
                                     85 	.globl _ET1
                                     86 	.globl _EX1
                                     87 	.globl _ET0
                                     88 	.globl _EX0
                                     89 	.globl _BREG_F7
                                     90 	.globl _BREG_F6
                                     91 	.globl _BREG_F5
                                     92 	.globl _BREG_F4
                                     93 	.globl _BREG_F3
                                     94 	.globl _BREG_F2
                                     95 	.globl _BREG_F1
                                     96 	.globl _BREG_F0
                                     97 	.globl _P5_7
                                     98 	.globl _P5_6
                                     99 	.globl _P5_5
                                    100 	.globl _P5_4
                                    101 	.globl _P5_3
                                    102 	.globl _P5_2
                                    103 	.globl _P5_1
                                    104 	.globl _P5_0
                                    105 	.globl _P4_7
                                    106 	.globl _P4_6
                                    107 	.globl _P4_5
                                    108 	.globl _P4_4
                                    109 	.globl _P4_3
                                    110 	.globl _P4_2
                                    111 	.globl _P4_1
                                    112 	.globl _P4_0
                                    113 	.globl _PX0L
                                    114 	.globl _PT0L
                                    115 	.globl _PX1L
                                    116 	.globl _PT1L
                                    117 	.globl _PSL
                                    118 	.globl _PT2L
                                    119 	.globl _PPCL
                                    120 	.globl _EC
                                    121 	.globl _CCF0
                                    122 	.globl _CCF1
                                    123 	.globl _CCF2
                                    124 	.globl _CCF3
                                    125 	.globl _CCF4
                                    126 	.globl _CR
                                    127 	.globl _CF
                                    128 	.globl _TF2
                                    129 	.globl _EXF2
                                    130 	.globl _RCLK
                                    131 	.globl _TCLK
                                    132 	.globl _EXEN2
                                    133 	.globl _TR2
                                    134 	.globl _C_T2
                                    135 	.globl _CP_RL2
                                    136 	.globl _T2CON_7
                                    137 	.globl _T2CON_6
                                    138 	.globl _T2CON_5
                                    139 	.globl _T2CON_4
                                    140 	.globl _T2CON_3
                                    141 	.globl _T2CON_2
                                    142 	.globl _T2CON_1
                                    143 	.globl _T2CON_0
                                    144 	.globl _PT2
                                    145 	.globl _ET2
                                    146 	.globl _TMOD
                                    147 	.globl _TL1
                                    148 	.globl _TL0
                                    149 	.globl _TH1
                                    150 	.globl _TH0
                                    151 	.globl _TCON
                                    152 	.globl _SP
                                    153 	.globl _SCON
                                    154 	.globl _SBUF0
                                    155 	.globl _SBUF
                                    156 	.globl _PSW
                                    157 	.globl _PCON
                                    158 	.globl _P3
                                    159 	.globl _P2
                                    160 	.globl _P1
                                    161 	.globl _P0
                                    162 	.globl _IP
                                    163 	.globl _IE
                                    164 	.globl _DP0L
                                    165 	.globl _DPL
                                    166 	.globl _DP0H
                                    167 	.globl _DPH
                                    168 	.globl _B
                                    169 	.globl _ACC
                                    170 	.globl _EECON
                                    171 	.globl _KBF
                                    172 	.globl _KBE
                                    173 	.globl _KBLS
                                    174 	.globl _BRL
                                    175 	.globl _BDRCON
                                    176 	.globl _T2MOD
                                    177 	.globl _SPDAT
                                    178 	.globl _SPSTA
                                    179 	.globl _SPCON
                                    180 	.globl _SADEN
                                    181 	.globl _SADDR
                                    182 	.globl _WDTPRG
                                    183 	.globl _WDTRST
                                    184 	.globl _P5
                                    185 	.globl _P4
                                    186 	.globl _IPH1
                                    187 	.globl _IPL1
                                    188 	.globl _IPH0
                                    189 	.globl _IPL0
                                    190 	.globl _IEN1
                                    191 	.globl _IEN0
                                    192 	.globl _CMOD
                                    193 	.globl _CL
                                    194 	.globl _CH
                                    195 	.globl _CCON
                                    196 	.globl _CCAPM4
                                    197 	.globl _CCAPM3
                                    198 	.globl _CCAPM2
                                    199 	.globl _CCAPM1
                                    200 	.globl _CCAPM0
                                    201 	.globl _CCAP4L
                                    202 	.globl _CCAP3L
                                    203 	.globl _CCAP2L
                                    204 	.globl _CCAP1L
                                    205 	.globl _CCAP0L
                                    206 	.globl _CCAP4H
                                    207 	.globl _CCAP3H
                                    208 	.globl _CCAP2H
                                    209 	.globl _CCAP1H
                                    210 	.globl _CCAP0H
                                    211 	.globl _CKCON1
                                    212 	.globl _CKCON0
                                    213 	.globl _CKRL
                                    214 	.globl _AUXR1
                                    215 	.globl _AUXR
                                    216 	.globl _TH2
                                    217 	.globl _TL2
                                    218 	.globl _RCAP2H
                                    219 	.globl _RCAP2L
                                    220 	.globl _T2CON
                                    221 	.globl _spi_buffer_write_PARM_3
                                    222 	.globl _spi_buffer_write_PARM_2
                                    223 	.globl _spi_buffer_read_PARM_3
                                    224 	.globl _spi_buffer_read_PARM_2
                                    225 	.globl _buffer_init_PARM_2
                                    226 	.globl _mac_spi_read_PARM_2
                                    227 	.globl _phy_spi_write_PARM_2
                                    228 	.globl _eth_spi_read_PARM_2
                                    229 	.globl _spi_control_write_PARM_3
                                    230 	.globl _spi_control_write_PARM_2
                                    231 	.globl _SPI_ReadByte
                                    232 	.globl _spi_set_autoinc
                                    233 	.globl _select_reg_bank
                                    234 	.globl _spi_control_write
                                    235 	.globl _configure_SPI
                                    236 	.globl _SPI_send
                                    237 	.globl _enc_reset
                                    238 	.globl _eth_spi_read
                                    239 	.globl _phy_spi_write
                                    240 	.globl _mac_spi_read
                                    241 	.globl _phy_spi_read
                                    242 	.globl _busy_wait
                                    243 	.globl _buffer_init
                                    244 	.globl _spi_buffer_read
                                    245 	.globl _spi_buffer_write
                                    246 ;--------------------------------------------------------
                                    247 ; special function registers
                                    248 ;--------------------------------------------------------
                                    249 	.area RSEG    (ABS,DATA)
      000000                        250 	.org 0x0000
                           0000C8   251 _T2CON	=	0x00c8
                           0000CA   252 _RCAP2L	=	0x00ca
                           0000CB   253 _RCAP2H	=	0x00cb
                           0000CC   254 _TL2	=	0x00cc
                           0000CD   255 _TH2	=	0x00cd
                           00008E   256 _AUXR	=	0x008e
                           0000A2   257 _AUXR1	=	0x00a2
                           000097   258 _CKRL	=	0x0097
                           00008F   259 _CKCON0	=	0x008f
                           0000AF   260 _CKCON1	=	0x00af
                           0000FA   261 _CCAP0H	=	0x00fa
                           0000FB   262 _CCAP1H	=	0x00fb
                           0000FC   263 _CCAP2H	=	0x00fc
                           0000FD   264 _CCAP3H	=	0x00fd
                           0000FE   265 _CCAP4H	=	0x00fe
                           0000EA   266 _CCAP0L	=	0x00ea
                           0000EB   267 _CCAP1L	=	0x00eb
                           0000EC   268 _CCAP2L	=	0x00ec
                           0000ED   269 _CCAP3L	=	0x00ed
                           0000EE   270 _CCAP4L	=	0x00ee
                           0000DA   271 _CCAPM0	=	0x00da
                           0000DB   272 _CCAPM1	=	0x00db
                           0000DC   273 _CCAPM2	=	0x00dc
                           0000DD   274 _CCAPM3	=	0x00dd
                           0000DE   275 _CCAPM4	=	0x00de
                           0000D8   276 _CCON	=	0x00d8
                           0000F9   277 _CH	=	0x00f9
                           0000E9   278 _CL	=	0x00e9
                           0000D9   279 _CMOD	=	0x00d9
                           0000A8   280 _IEN0	=	0x00a8
                           0000B1   281 _IEN1	=	0x00b1
                           0000B8   282 _IPL0	=	0x00b8
                           0000B7   283 _IPH0	=	0x00b7
                           0000B2   284 _IPL1	=	0x00b2
                           0000B3   285 _IPH1	=	0x00b3
                           0000C0   286 _P4	=	0x00c0
                           0000E8   287 _P5	=	0x00e8
                           0000A6   288 _WDTRST	=	0x00a6
                           0000A7   289 _WDTPRG	=	0x00a7
                           0000A9   290 _SADDR	=	0x00a9
                           0000B9   291 _SADEN	=	0x00b9
                           0000C3   292 _SPCON	=	0x00c3
                           0000C4   293 _SPSTA	=	0x00c4
                           0000C5   294 _SPDAT	=	0x00c5
                           0000C9   295 _T2MOD	=	0x00c9
                           00009B   296 _BDRCON	=	0x009b
                           00009A   297 _BRL	=	0x009a
                           00009C   298 _KBLS	=	0x009c
                           00009D   299 _KBE	=	0x009d
                           00009E   300 _KBF	=	0x009e
                           0000D2   301 _EECON	=	0x00d2
                           0000E0   302 _ACC	=	0x00e0
                           0000F0   303 _B	=	0x00f0
                           000083   304 _DPH	=	0x0083
                           000083   305 _DP0H	=	0x0083
                           000082   306 _DPL	=	0x0082
                           000082   307 _DP0L	=	0x0082
                           0000A8   308 _IE	=	0x00a8
                           0000B8   309 _IP	=	0x00b8
                           000080   310 _P0	=	0x0080
                           000090   311 _P1	=	0x0090
                           0000A0   312 _P2	=	0x00a0
                           0000B0   313 _P3	=	0x00b0
                           000087   314 _PCON	=	0x0087
                           0000D0   315 _PSW	=	0x00d0
                           000099   316 _SBUF	=	0x0099
                           000099   317 _SBUF0	=	0x0099
                           000098   318 _SCON	=	0x0098
                           000081   319 _SP	=	0x0081
                           000088   320 _TCON	=	0x0088
                           00008C   321 _TH0	=	0x008c
                           00008D   322 _TH1	=	0x008d
                           00008A   323 _TL0	=	0x008a
                           00008B   324 _TL1	=	0x008b
                           000089   325 _TMOD	=	0x0089
                                    326 ;--------------------------------------------------------
                                    327 ; special function bits
                                    328 ;--------------------------------------------------------
                                    329 	.area RSEG    (ABS,DATA)
      000000                        330 	.org 0x0000
                           0000AD   331 _ET2	=	0x00ad
                           0000BD   332 _PT2	=	0x00bd
                           0000C8   333 _T2CON_0	=	0x00c8
                           0000C9   334 _T2CON_1	=	0x00c9
                           0000CA   335 _T2CON_2	=	0x00ca
                           0000CB   336 _T2CON_3	=	0x00cb
                           0000CC   337 _T2CON_4	=	0x00cc
                           0000CD   338 _T2CON_5	=	0x00cd
                           0000CE   339 _T2CON_6	=	0x00ce
                           0000CF   340 _T2CON_7	=	0x00cf
                           0000C8   341 _CP_RL2	=	0x00c8
                           0000C9   342 _C_T2	=	0x00c9
                           0000CA   343 _TR2	=	0x00ca
                           0000CB   344 _EXEN2	=	0x00cb
                           0000CC   345 _TCLK	=	0x00cc
                           0000CD   346 _RCLK	=	0x00cd
                           0000CE   347 _EXF2	=	0x00ce
                           0000CF   348 _TF2	=	0x00cf
                           0000DF   349 _CF	=	0x00df
                           0000DE   350 _CR	=	0x00de
                           0000DC   351 _CCF4	=	0x00dc
                           0000DB   352 _CCF3	=	0x00db
                           0000DA   353 _CCF2	=	0x00da
                           0000D9   354 _CCF1	=	0x00d9
                           0000D8   355 _CCF0	=	0x00d8
                           0000AE   356 _EC	=	0x00ae
                           0000BE   357 _PPCL	=	0x00be
                           0000BD   358 _PT2L	=	0x00bd
                           0000BC   359 _PSL	=	0x00bc
                           0000BB   360 _PT1L	=	0x00bb
                           0000BA   361 _PX1L	=	0x00ba
                           0000B9   362 _PT0L	=	0x00b9
                           0000B8   363 _PX0L	=	0x00b8
                           0000C0   364 _P4_0	=	0x00c0
                           0000C1   365 _P4_1	=	0x00c1
                           0000C2   366 _P4_2	=	0x00c2
                           0000C3   367 _P4_3	=	0x00c3
                           0000C4   368 _P4_4	=	0x00c4
                           0000C5   369 _P4_5	=	0x00c5
                           0000C6   370 _P4_6	=	0x00c6
                           0000C7   371 _P4_7	=	0x00c7
                           0000E8   372 _P5_0	=	0x00e8
                           0000E9   373 _P5_1	=	0x00e9
                           0000EA   374 _P5_2	=	0x00ea
                           0000EB   375 _P5_3	=	0x00eb
                           0000EC   376 _P5_4	=	0x00ec
                           0000ED   377 _P5_5	=	0x00ed
                           0000EE   378 _P5_6	=	0x00ee
                           0000EF   379 _P5_7	=	0x00ef
                           0000F0   380 _BREG_F0	=	0x00f0
                           0000F1   381 _BREG_F1	=	0x00f1
                           0000F2   382 _BREG_F2	=	0x00f2
                           0000F3   383 _BREG_F3	=	0x00f3
                           0000F4   384 _BREG_F4	=	0x00f4
                           0000F5   385 _BREG_F5	=	0x00f5
                           0000F6   386 _BREG_F6	=	0x00f6
                           0000F7   387 _BREG_F7	=	0x00f7
                           0000A8   388 _EX0	=	0x00a8
                           0000A9   389 _ET0	=	0x00a9
                           0000AA   390 _EX1	=	0x00aa
                           0000AB   391 _ET1	=	0x00ab
                           0000AC   392 _ES	=	0x00ac
                           0000AF   393 _EA	=	0x00af
                           0000B8   394 _PX0	=	0x00b8
                           0000B9   395 _PT0	=	0x00b9
                           0000BA   396 _PX1	=	0x00ba
                           0000BB   397 _PT1	=	0x00bb
                           0000BC   398 _PS	=	0x00bc
                           000080   399 _P0_0	=	0x0080
                           000081   400 _P0_1	=	0x0081
                           000082   401 _P0_2	=	0x0082
                           000083   402 _P0_3	=	0x0083
                           000084   403 _P0_4	=	0x0084
                           000085   404 _P0_5	=	0x0085
                           000086   405 _P0_6	=	0x0086
                           000087   406 _P0_7	=	0x0087
                           000090   407 _P1_0	=	0x0090
                           000091   408 _P1_1	=	0x0091
                           000092   409 _P1_2	=	0x0092
                           000093   410 _P1_3	=	0x0093
                           000094   411 _P1_4	=	0x0094
                           000095   412 _P1_5	=	0x0095
                           000096   413 _P1_6	=	0x0096
                           000097   414 _P1_7	=	0x0097
                           0000A0   415 _P2_0	=	0x00a0
                           0000A1   416 _P2_1	=	0x00a1
                           0000A2   417 _P2_2	=	0x00a2
                           0000A3   418 _P2_3	=	0x00a3
                           0000A4   419 _P2_4	=	0x00a4
                           0000A5   420 _P2_5	=	0x00a5
                           0000A6   421 _P2_6	=	0x00a6
                           0000A7   422 _P2_7	=	0x00a7
                           0000B0   423 _P3_0	=	0x00b0
                           0000B1   424 _P3_1	=	0x00b1
                           0000B2   425 _P3_2	=	0x00b2
                           0000B3   426 _P3_3	=	0x00b3
                           0000B4   427 _P3_4	=	0x00b4
                           0000B5   428 _P3_5	=	0x00b5
                           0000B6   429 _P3_6	=	0x00b6
                           0000B7   430 _P3_7	=	0x00b7
                           0000B0   431 _RXD	=	0x00b0
                           0000B0   432 _RXD0	=	0x00b0
                           0000B1   433 _TXD	=	0x00b1
                           0000B1   434 _TXD0	=	0x00b1
                           0000B2   435 _INT0	=	0x00b2
                           0000B3   436 _INT1	=	0x00b3
                           0000B4   437 _T0	=	0x00b4
                           0000B5   438 _T1	=	0x00b5
                           0000B6   439 _WR	=	0x00b6
                           0000B7   440 _RD	=	0x00b7
                           0000D0   441 _P	=	0x00d0
                           0000D1   442 _F1	=	0x00d1
                           0000D2   443 _OV	=	0x00d2
                           0000D3   444 _RS0	=	0x00d3
                           0000D4   445 _RS1	=	0x00d4
                           0000D5   446 _F0	=	0x00d5
                           0000D6   447 _AC	=	0x00d6
                           0000D7   448 _CY	=	0x00d7
                           000098   449 _RI	=	0x0098
                           000099   450 _TI	=	0x0099
                           00009A   451 _RB8	=	0x009a
                           00009B   452 _TB8	=	0x009b
                           00009C   453 _REN	=	0x009c
                           00009D   454 _SM2	=	0x009d
                           00009E   455 _SM1	=	0x009e
                           00009F   456 _SM0	=	0x009f
                           000088   457 _IT0	=	0x0088
                           000089   458 _IE0	=	0x0089
                           00008A   459 _IT1	=	0x008a
                           00008B   460 _IE1	=	0x008b
                           00008C   461 _TR0	=	0x008c
                           00008D   462 _TF0	=	0x008d
                           00008E   463 _TR1	=	0x008e
                           00008F   464 _TF1	=	0x008f
                                    465 ;--------------------------------------------------------
                                    466 ; overlayable register banks
                                    467 ;--------------------------------------------------------
                                    468 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        469 	.ds 8
                                    470 ;--------------------------------------------------------
                                    471 ; internal ram data
                                    472 ;--------------------------------------------------------
                                    473 	.area DSEG    (DATA)
                                    474 ;--------------------------------------------------------
                                    475 ; overlayable items in internal ram
                                    476 ;--------------------------------------------------------
                                    477 ;--------------------------------------------------------
                                    478 ; indirectly addressable internal ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area ISEG    (DATA)
                                    481 ;--------------------------------------------------------
                                    482 ; absolute internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area IABS    (ABS,DATA)
                                    485 	.area IABS    (ABS,DATA)
                                    486 ;--------------------------------------------------------
                                    487 ; bit data
                                    488 ;--------------------------------------------------------
                                    489 	.area BSEG    (BIT)
                                    490 ;--------------------------------------------------------
                                    491 ; paged external ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area PSEG    (PAG,XDATA)
                                    494 ;--------------------------------------------------------
                                    495 ; uninitialized external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area XSEG    (XDATA)
      000000                        498 _SPI_ReadByte_received_data_10000_115:
      000000                        499 	.ds 1
      000001                        500 _select_reg_bank_bank_10000_119:
      000001                        501 	.ds 1
      000002                        502 _select_reg_bank_data_10001_121:
      000002                        503 	.ds 1
      000003                        504 _spi_control_write_PARM_2:
      000003                        505 	.ds 1
      000004                        506 _spi_control_write_PARM_3:
      000004                        507 	.ds 1
      000005                        508 _spi_control_write_reg_bank_10000_124:
      000005                        509 	.ds 1
      000006                        510 _SPI_send_data_10000_128:
      000006                        511 	.ds 1
      000007                        512 _eth_spi_read_PARM_2:
      000007                        513 	.ds 1
      000008                        514 _eth_spi_read_addr_10000_133:
      000008                        515 	.ds 1
      000009                        516 _phy_spi_write_PARM_2:
      000009                        517 	.ds 2
      00000B                        518 _phy_spi_write_addr_10000_137:
      00000B                        519 	.ds 1
      00000C                        520 _mac_spi_read_PARM_2:
      00000C                        521 	.ds 1
      00000D                        522 _mac_spi_read_addr_10000_139:
      00000D                        523 	.ds 1
      00000E                        524 _phy_spi_read_addr_10000_143:
      00000E                        525 	.ds 1
      00000F                        526 _busy_wait_data_10000_147:
      00000F                        527 	.ds 1
      000010                        528 _buffer_init_PARM_2:
      000010                        529 	.ds 2
      000012                        530 _buffer_init_start_address_10000_149:
      000012                        531 	.ds 2
      000014                        532 _spi_buffer_read_PARM_2:
      000014                        533 	.ds 2
      000016                        534 _spi_buffer_read_PARM_3:
      000016                        535 	.ds 3
      000019                        536 _spi_buffer_read_num_bytes_10000_153:
      000019                        537 	.ds 2
      00001B                        538 _spi_buffer_write_PARM_2:
      00001B                        539 	.ds 2
      00001D                        540 _spi_buffer_write_PARM_3:
      00001D                        541 	.ds 3
      000020                        542 _spi_buffer_write_num_bytes_10000_163:
      000020                        543 	.ds 2
                                    544 ;--------------------------------------------------------
                                    545 ; absolute external ram data
                                    546 ;--------------------------------------------------------
                                    547 	.area XABS    (ABS,XDATA)
                                    548 ;--------------------------------------------------------
                                    549 ; initialized external ram data
                                    550 ;--------------------------------------------------------
                                    551 	.area XISEG   (XDATA)
                                    552 	.area HOME    (CODE)
                                    553 	.area GSINIT0 (CODE)
                                    554 	.area GSINIT1 (CODE)
                                    555 	.area GSINIT2 (CODE)
                                    556 	.area GSINIT3 (CODE)
                                    557 	.area GSINIT4 (CODE)
                                    558 	.area GSINIT5 (CODE)
                                    559 	.area GSINIT  (CODE)
                                    560 	.area GSFINAL (CODE)
                                    561 	.area CSEG    (CODE)
                                    562 ;--------------------------------------------------------
                                    563 ; global & static initialisations
                                    564 ;--------------------------------------------------------
                                    565 	.area HOME    (CODE)
                                    566 	.area GSINIT  (CODE)
                                    567 	.area GSFINAL (CODE)
                                    568 	.area GSINIT  (CODE)
                                    569 ;--------------------------------------------------------
                                    570 ; Home
                                    571 ;--------------------------------------------------------
                                    572 	.area HOME    (CODE)
                                    573 	.area HOME    (CODE)
                                    574 ;--------------------------------------------------------
                                    575 ; code
                                    576 ;--------------------------------------------------------
                                    577 	.area CSEG    (CODE)
                                    578 ;------------------------------------------------------------
                                    579 ;Allocation info for local variables in function 'SPI_ReadByte'
                                    580 ;------------------------------------------------------------
                                    581 ;received_data             Allocated with name '_SPI_ReadByte_received_data_10000_115'
                                    582 ;------------------------------------------------------------
                                    583 ;	SPI.c:4: uint8_t SPI_ReadByte(void)
                                    584 ;	-----------------------------------------
                                    585 ;	 function SPI_ReadByte
                                    586 ;	-----------------------------------------
      000000                        587 _SPI_ReadByte:
                           000007   588 	ar7 = 0x07
                           000006   589 	ar6 = 0x06
                           000005   590 	ar5 = 0x05
                           000004   591 	ar4 = 0x04
                           000003   592 	ar3 = 0x03
                           000002   593 	ar2 = 0x02
                           000001   594 	ar1 = 0x01
                           000000   595 	ar0 = 0x00
                                    596 ;	SPI.c:9: SPDAT = 0xFF;
      000000 75 C5 FF         [24]  597 	mov	_SPDAT,#0xff
                                    598 ;	SPI.c:12: while (!(SPSTA & 0x80)) {
      000003                        599 00101$:
      000003 E5 C4            [12]  600 	mov	a,_SPSTA
      000005 30 E7 FB         [24]  601 	jnb	acc.7,00101$
                                    602 ;	SPI.c:17: received_data = SPDAT;
      000008 90r00r00         [24]  603 	mov	dptr,#_SPI_ReadByte_received_data_10000_115
      00000B E5 C5            [12]  604 	mov	a,_SPDAT
      00000D F0               [24]  605 	movx	@dptr,a
                                    606 ;	SPI.c:19: return received_data;
      00000E E0               [24]  607 	movx	a,@dptr
                                    608 ;	SPI.c:20: }
      00000F F5 82            [12]  609 	mov	dpl,a
      000011 22               [24]  610 	ret
                                    611 ;------------------------------------------------------------
                                    612 ;Allocation info for local variables in function 'spi_set_autoinc'
                                    613 ;------------------------------------------------------------
                                    614 ;	SPI.c:22: void spi_set_autoinc(void)
                                    615 ;	-----------------------------------------
                                    616 ;	 function spi_set_autoinc
                                    617 ;	-----------------------------------------
      000012                        618 _spi_set_autoinc:
                                    619 ;	SPI.c:24: CS_LOW;                          // Pull CS low to select the ENC28J60
                                    620 ;	assignBit
      000012 C2 91            [12]  621 	clr	_P1_1
                                    622 ;	SPI.c:26: SPI_send(0x5E);                  // Write ECON2 register address
      000014 75 82 5E         [24]  623 	mov	dpl, #0x5e
      000017 12r00rE4         [24]  624 	lcall	_SPI_send
                                    625 ;	SPI.c:27: SPI_send(0x80);                  // Set the AUTOINC bit
      00001A 75 82 80         [24]  626 	mov	dpl, #0x80
      00001D 12r00rE4         [24]  627 	lcall	_SPI_send
                                    628 ;	SPI.c:29: CS_HIGH;                         // Pull CS high to deselect the ENC28J60
                                    629 ;	assignBit
      000020 D2 91            [12]  630 	setb	_P1_1
                                    631 ;	SPI.c:30: }
      000022 22               [24]  632 	ret
                                    633 ;------------------------------------------------------------
                                    634 ;Allocation info for local variables in function 'select_reg_bank'
                                    635 ;------------------------------------------------------------
                                    636 ;bank                      Allocated with name '_select_reg_bank_bank_10000_119'
                                    637 ;data                      Allocated with name '_select_reg_bank_data_10001_121'
                                    638 ;i                         Allocated with name '_select_reg_bank_i_20001_123'
                                    639 ;------------------------------------------------------------
                                    640 ;	SPI.c:33: void select_reg_bank(uint8_t bank)
                                    641 ;	-----------------------------------------
                                    642 ;	 function select_reg_bank
                                    643 ;	-----------------------------------------
      000023                        644 _select_reg_bank:
      000023 E5 82            [12]  645 	mov	a,dpl
      000025 90r00r01         [24]  646 	mov	dptr,#_select_reg_bank_bank_10000_119
      000028 F0               [24]  647 	movx	@dptr,a
                                    648 ;	SPI.c:35: CS_LOW;
                                    649 ;	assignBit
      000029 C2 91            [12]  650 	clr	_P1_1
                                    651 ;	SPI.c:36: SPI_send(0X1F); // Send the address
      00002B 75 82 1F         [24]  652 	mov	dpl, #0x1f
      00002E 12r00rE4         [24]  653 	lcall	_SPI_send
                                    654 ;	SPI.c:37: uint8_t data = SPI_ReadByte(); // Read the data
      000031 12r00r00         [24]  655 	lcall	_SPI_ReadByte
      000034 AF 82            [24]  656 	mov	r7, dpl
                                    657 ;	SPI.c:38: CS_HIGH;
                                    658 ;	assignBit
      000036 D2 91            [12]  659 	setb	_P1_1
                                    660 ;	SPI.c:41: data &= ~0x03; // Clear the last two bits
      000038 53 07 FC         [24]  661 	anl	ar7,#0xfc
                                    662 ;	SPI.c:42: switch (bank)
      00003B 90r00r01         [24]  663 	mov	dptr,#_select_reg_bank_bank_10000_119
      00003E E0               [24]  664 	movx	a,@dptr
      00003F FE               [12]  665 	mov  r6,a
      000040 24 FC            [12]  666 	add	a,#0xff - 0x03
      000042 40 30            [24]  667 	jc	00105$
      000044 EE               [12]  668 	mov	a,r6
      000045 2E               [12]  669 	add	a,r6
                                    670 ;	SPI.c:44: case 0:
      000046 90r00r4A         [24]  671 	mov	dptr,#00133$
      000049 73               [24]  672 	jmp	@a+dptr
      00004A                        673 00133$:
      00004A 80 06            [24]  674 	sjmp	00101$
      00004C 80 0B            [24]  675 	sjmp	00102$
      00004E 80 12            [24]  676 	sjmp	00103$
      000050 80 19            [24]  677 	sjmp	00104$
      000052                        678 00101$:
                                    679 ;	SPI.c:45: data |= 0x00; // Last two bits: 00
      000052 90r00r02         [24]  680 	mov	dptr,#_select_reg_bank_data_10001_121
      000055 EF               [12]  681 	mov	a,r7
      000056 F0               [24]  682 	movx	@dptr,a
                                    683 ;	SPI.c:46: break;
                                    684 ;	SPI.c:47: case 1:
      000057 80 31            [24]  685 	sjmp	00115$
      000059                        686 00102$:
                                    687 ;	SPI.c:48: data |= 0x01; // Last two bits: 01
      000059 90r00r02         [24]  688 	mov	dptr,#_select_reg_bank_data_10001_121
      00005C 74 01            [12]  689 	mov	a,#0x01
      00005E 4F               [12]  690 	orl	a,r7
      00005F F0               [24]  691 	movx	@dptr,a
                                    692 ;	SPI.c:49: break;
                                    693 ;	SPI.c:50: case 2:
      000060 80 28            [24]  694 	sjmp	00115$
      000062                        695 00103$:
                                    696 ;	SPI.c:51: data |= 0x02; // Last two bits: 10
      000062 90r00r02         [24]  697 	mov	dptr,#_select_reg_bank_data_10001_121
      000065 74 02            [12]  698 	mov	a,#0x02
      000067 4F               [12]  699 	orl	a,r7
      000068 F0               [24]  700 	movx	@dptr,a
                                    701 ;	SPI.c:52: break;
                                    702 ;	SPI.c:53: case 3:
      000069 80 1F            [24]  703 	sjmp	00115$
      00006B                        704 00104$:
                                    705 ;	SPI.c:54: data |= 0x03; // Last two bits: 11
      00006B 90r00r02         [24]  706 	mov	dptr,#_select_reg_bank_data_10001_121
      00006E 74 03            [12]  707 	mov	a,#0x03
      000070 4F               [12]  708 	orl	a,r7
      000071 F0               [24]  709 	movx	@dptr,a
                                    710 ;	SPI.c:55: break;
                                    711 ;	SPI.c:56: default:
      000072 80 16            [24]  712 	sjmp	00115$
      000074                        713 00105$:
                                    714 ;	SPI.c:57: printf("wrong bank");
      000074 74r00            [12]  715 	mov	a,#___str_0
      000076 C0 E0            [24]  716 	push	acc
      000078 74s00            [12]  717 	mov	a,#(___str_0 >> 8)
      00007A C0 E0            [24]  718 	push	acc
      00007C 74 80            [12]  719 	mov	a,#0x80
      00007E C0 E0            [24]  720 	push	acc
      000080 12r00r00         [24]  721 	lcall	_printf
      000083 15 81            [12]  722 	dec	sp
      000085 15 81            [12]  723 	dec	sp
      000087 15 81            [12]  724 	dec	sp
                                    725 ;	SPI.c:58: return;
                                    726 ;	SPI.c:61: for (int i = 0; i < 16; i++); // Delay
      000089 22               [24]  727 	ret
      00008A                        728 00115$:
      00008A 7F 00            [12]  729 	mov	r7,#0x00
      00008C                        730 00109$:
      00008C BF 10 00         [24]  731 	cjne	r7,#0x10,00134$
      00008F                        732 00134$:
      00008F 50 03            [24]  733 	jnc	00107$
      000091 0F               [12]  734 	inc	r7
      000092 80 F8            [24]  735 	sjmp	00109$
      000094                        736 00107$:
                                    737 ;	SPI.c:63: CS_LOW;
                                    738 ;	assignBit
      000094 C2 91            [12]  739 	clr	_P1_1
                                    740 ;	SPI.c:64: SPI_send(0x5F);
      000096 75 82 5F         [24]  741 	mov	dpl, #0x5f
      000099 12r00rE4         [24]  742 	lcall	_SPI_send
                                    743 ;	SPI.c:65: SPI_send(data); // Send the modified data
      00009C 90r00r02         [24]  744 	mov	dptr,#_select_reg_bank_data_10001_121
      00009F E0               [24]  745 	movx	a,@dptr
      0000A0 F5 82            [12]  746 	mov	dpl,a
      0000A2 12r00rE4         [24]  747 	lcall	_SPI_send
                                    748 ;	SPI.c:66: CS_HIGH;
                                    749 ;	assignBit
      0000A5 D2 91            [12]  750 	setb	_P1_1
                                    751 ;	SPI.c:68: }
      0000A7 22               [24]  752 	ret
                                    753 ;------------------------------------------------------------
                                    754 ;Allocation info for local variables in function 'spi_control_write'
                                    755 ;------------------------------------------------------------
                                    756 ;addr                      Allocated with name '_spi_control_write_PARM_2'
                                    757 ;data                      Allocated with name '_spi_control_write_PARM_3'
                                    758 ;reg_bank                  Allocated with name '_spi_control_write_reg_bank_10000_124'
                                    759 ;opcode                    Allocated with name '_spi_control_write_opcode_10000_125'
                                    760 ;------------------------------------------------------------
                                    761 ;	SPI.c:69: void spi_control_write(uint8_t reg_bank, uint8_t addr, uint8_t data)
                                    762 ;	-----------------------------------------
                                    763 ;	 function spi_control_write
                                    764 ;	-----------------------------------------
      0000A8                        765 _spi_control_write:
      0000A8 E5 82            [12]  766 	mov	a,dpl
      0000AA 90r00r05         [24]  767 	mov	dptr,#_spi_control_write_reg_bank_10000_124
      0000AD F0               [24]  768 	movx	@dptr,a
                                    769 ;	SPI.c:72: addr = addr + opcode; // Add the opcode to the address
      0000AE 90r00r03         [24]  770 	mov	dptr,#_spi_control_write_PARM_2
      0000B1 E0               [24]  771 	movx	a,@dptr
      0000B2 24 40            [12]  772 	add	a, #0x40
      0000B4 F0               [24]  773 	movx	@dptr,a
                                    774 ;	SPI.c:74: select_reg_bank(reg_bank); // Function to select the register bank
      0000B5 90r00r05         [24]  775 	mov	dptr,#_spi_control_write_reg_bank_10000_124
      0000B8 E0               [24]  776 	movx	a,@dptr
      0000B9 F5 82            [12]  777 	mov	dpl,a
      0000BB 12r00r23         [24]  778 	lcall	_select_reg_bank
                                    779 ;	SPI.c:77: CS_LOW;
                                    780 ;	assignBit
      0000BE C2 91            [12]  781 	clr	_P1_1
                                    782 ;	SPI.c:80: SPI_send(addr);
      0000C0 90r00r03         [24]  783 	mov	dptr,#_spi_control_write_PARM_2
      0000C3 E0               [24]  784 	movx	a,@dptr
      0000C4 F5 82            [12]  785 	mov	dpl,a
      0000C6 12r00rE4         [24]  786 	lcall	_SPI_send
                                    787 ;	SPI.c:83: SPI_send(data);
      0000C9 90r00r04         [24]  788 	mov	dptr,#_spi_control_write_PARM_3
      0000CC E0               [24]  789 	movx	a,@dptr
      0000CD F5 82            [12]  790 	mov	dpl,a
      0000CF 12r00rE4         [24]  791 	lcall	_SPI_send
                                    792 ;	SPI.c:86: CS_HIGH;
                                    793 ;	assignBit
      0000D2 D2 91            [12]  794 	setb	_P1_1
                                    795 ;	SPI.c:90: }
      0000D4 22               [24]  796 	ret
                                    797 ;------------------------------------------------------------
                                    798 ;Allocation info for local variables in function 'configure_SPI'
                                    799 ;------------------------------------------------------------
                                    800 ;	SPI.c:93: void configure_SPI(void)
                                    801 ;	-----------------------------------------
                                    802 ;	 function configure_SPI
                                    803 ;	-----------------------------------------
      0000D5                        804 _configure_SPI:
                                    805 ;	SPI.c:95: CS_PIN = 1;
                                    806 ;	assignBit
      0000D5 D2 91            [12]  807 	setb	_P1_1
                                    808 ;	SPI.c:96: SPCON = 0x00;
      0000D7 75 C3 00         [24]  809 	mov	_SPCON,#0x00
                                    810 ;	SPI.c:97: SPCON |= SS_DISABLE;
      0000DA 43 C3 20         [24]  811 	orl	_SPCON,#0x20
                                    812 ;	SPI.c:98: SPCON |= MASTER_MODE;
      0000DD 43 C3 10         [24]  813 	orl	_SPCON,#0x10
                                    814 ;	SPI.c:99: SPCON |= SPI_ENABLE;
      0000E0 43 C3 40         [24]  815 	orl	_SPCON,#0x40
                                    816 ;	SPI.c:100: }
      0000E3 22               [24]  817 	ret
                                    818 ;------------------------------------------------------------
                                    819 ;Allocation info for local variables in function 'SPI_send'
                                    820 ;------------------------------------------------------------
                                    821 ;data                      Allocated with name '_SPI_send_data_10000_128'
                                    822 ;------------------------------------------------------------
                                    823 ;	SPI.c:103: void SPI_send(uint8_t data)
                                    824 ;	-----------------------------------------
                                    825 ;	 function SPI_send
                                    826 ;	-----------------------------------------
      0000E4                        827 _SPI_send:
      0000E4 E5 82            [12]  828 	mov	a,dpl
      0000E6 90r00r06         [24]  829 	mov	dptr,#_SPI_send_data_10000_128
      0000E9 F0               [24]  830 	movx	@dptr,a
                                    831 ;	SPI.c:106: SPDAT = data;           // Config + MSB of data
      0000EA E0               [24]  832 	movx	a,@dptr
      0000EB F5 C5            [12]  833 	mov	_SPDAT,a
                                    834 ;	SPI.c:108: while (!(SPSTA & 0x80))
      0000ED                        835 00101$:
      0000ED E5 C4            [12]  836 	mov	a,_SPSTA
      0000EF 30 E7 FB         [24]  837 	jnb	acc.7,00101$
                                    838 ;	SPI.c:113: }
      0000F2 22               [24]  839 	ret
                                    840 ;------------------------------------------------------------
                                    841 ;Allocation info for local variables in function 'enc_reset'
                                    842 ;------------------------------------------------------------
                                    843 ;	SPI.c:115: void enc_reset(void)
                                    844 ;	-----------------------------------------
                                    845 ;	 function enc_reset
                                    846 ;	-----------------------------------------
      0000F3                        847 _enc_reset:
                                    848 ;	SPI.c:117: CS_LOW;                    // Pull CS low to select the ENC28J60
                                    849 ;	assignBit
      0000F3 C2 91            [12]  850 	clr	_P1_1
                                    851 ;	SPI.c:118: SPI_send(0xFF);            // Send reset command
      0000F5 75 82 FF         [24]  852 	mov	dpl, #0xff
      0000F8 12r00rE4         [24]  853 	lcall	_SPI_send
                                    854 ;	SPI.c:119: CS_HIGH;                   // Pull CS high to deselect the ENC28J60
                                    855 ;	assignBit
      0000FB D2 91            [12]  856 	setb	_P1_1
                                    857 ;	SPI.c:120: }
      0000FD 22               [24]  858 	ret
                                    859 ;------------------------------------------------------------
                                    860 ;Allocation info for local variables in function 'eth_spi_read'
                                    861 ;------------------------------------------------------------
                                    862 ;bank                      Allocated with name '_eth_spi_read_PARM_2'
                                    863 ;addr                      Allocated with name '_eth_spi_read_addr_10000_133'
                                    864 ;data                      Allocated with name '_eth_spi_read_data_10001_136'
                                    865 ;------------------------------------------------------------
                                    866 ;	SPI.c:122: uint8_t eth_spi_read(uint8_t addr, uint8_t bank)
                                    867 ;	-----------------------------------------
                                    868 ;	 function eth_spi_read
                                    869 ;	-----------------------------------------
      0000FE                        870 _eth_spi_read:
      0000FE E5 82            [12]  871 	mov	a,dpl
      000100 90r00r08         [24]  872 	mov	dptr,#_eth_spi_read_addr_10000_133
      000103 F0               [24]  873 	movx	@dptr,a
                                    874 ;	SPI.c:124: if (addr > 0x1F) {
      000104 E0               [24]  875 	movx	a,@dptr
      000105 FF               [12]  876 	mov  r7,a
      000106 24 E0            [12]  877 	add	a,#0xff - 0x1f
      000108 50 19            [24]  878 	jnc	00102$
                                    879 ;	SPI.c:125: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      00010A 74r0B            [12]  880 	mov	a,#___str_1
      00010C C0 E0            [24]  881 	push	acc
      00010E 74s00            [12]  882 	mov	a,#(___str_1 >> 8)
      000110 C0 E0            [24]  883 	push	acc
      000112 74 80            [12]  884 	mov	a,#0x80
      000114 C0 E0            [24]  885 	push	acc
      000116 12r00r00         [24]  886 	lcall	_printf
      000119 15 81            [12]  887 	dec	sp
      00011B 15 81            [12]  888 	dec	sp
      00011D 15 81            [12]  889 	dec	sp
                                    890 ;	SPI.c:126: return 0;
      00011F 75 82 00         [24]  891 	mov	dpl, #0x00
      000122 22               [24]  892 	ret
      000123                        893 00102$:
                                    894 ;	SPI.c:129: select_reg_bank(bank);     // Select the appropriate bank
      000123 90r00r07         [24]  895 	mov	dptr,#_eth_spi_read_PARM_2
      000126 E0               [24]  896 	movx	a,@dptr
      000127 F5 82            [12]  897 	mov	dpl,a
      000129 C0 07            [24]  898 	push	ar7
      00012B 12r00r23         [24]  899 	lcall	_select_reg_bank
      00012E D0 07            [24]  900 	pop	ar7
                                    901 ;	SPI.c:131: CS_LOW;                    // Pull CS low to start communication
                                    902 ;	assignBit
      000130 C2 91            [12]  903 	clr	_P1_1
                                    904 ;	SPI.c:132: SPI_send(addr);            // Send the address
      000132 8F 82            [24]  905 	mov	dpl, r7
      000134 12r00rE4         [24]  906 	lcall	_SPI_send
                                    907 ;	SPI.c:133: uint8_t data = SPI_ReadByte(); // Read the data
      000137 12r00r00         [24]  908 	lcall	_SPI_ReadByte
      00013A AF 82            [24]  909 	mov	r7, dpl
                                    910 ;	SPI.c:134: CS_HIGH;                   // Pull CS high to end communication
                                    911 ;	assignBit
      00013C D2 91            [12]  912 	setb	_P1_1
                                    913 ;	SPI.c:139: return data;
      00013E 8F 82            [24]  914 	mov	dpl, r7
                                    915 ;	SPI.c:140: }
      000140 22               [24]  916 	ret
                                    917 ;------------------------------------------------------------
                                    918 ;Allocation info for local variables in function 'phy_spi_write'
                                    919 ;------------------------------------------------------------
                                    920 ;data                      Allocated with name '_phy_spi_write_PARM_2'
                                    921 ;addr                      Allocated with name '_phy_spi_write_addr_10000_137'
                                    922 ;------------------------------------------------------------
                                    923 ;	SPI.c:142: void phy_spi_write(uint8_t addr, uint16_t data)
                                    924 ;	-----------------------------------------
                                    925 ;	 function phy_spi_write
                                    926 ;	-----------------------------------------
      000141                        927 _phy_spi_write:
      000141 E5 82            [12]  928 	mov	a,dpl
      000143 90r00r0B         [24]  929 	mov	dptr,#_phy_spi_write_addr_10000_137
      000146 F0               [24]  930 	movx	@dptr,a
                                    931 ;	SPI.c:144: spi_control_write(2, 0x14, addr);                      // Write PHY address
      000147 E0               [24]  932 	movx	a,@dptr
      000148 FF               [12]  933 	mov	r7,a
      000149 90r00r03         [24]  934 	mov	dptr,#_spi_control_write_PARM_2
      00014C 74 14            [12]  935 	mov	a,#0x14
      00014E F0               [24]  936 	movx	@dptr,a
      00014F 90r00r04         [24]  937 	mov	dptr,#_spi_control_write_PARM_3
      000152 EF               [12]  938 	mov	a,r7
      000153 F0               [24]  939 	movx	@dptr,a
      000154 75 82 02         [24]  940 	mov	dpl, #0x02
      000157 C0 07            [24]  941 	push	ar7
      000159 12r00rA8         [24]  942 	lcall	_spi_control_write
      00015C D0 07            [24]  943 	pop	ar7
                                    944 ;	SPI.c:145: spi_control_write(2, 0x16, (uint8_t)(data & 0xFF));    // Write LSB of data
      00015E 90r00r09         [24]  945 	mov	dptr,#_phy_spi_write_PARM_2
      000161 E0               [24]  946 	movx	a,@dptr
      000162 FD               [12]  947 	mov	r5,a
      000163 A3               [24]  948 	inc	dptr
      000164 E0               [24]  949 	movx	a,@dptr
      000165 FE               [12]  950 	mov	r6,a
      000166 8D 04            [24]  951 	mov	ar4,r5
      000168 90r00r03         [24]  952 	mov	dptr,#_spi_control_write_PARM_2
      00016B 74 16            [12]  953 	mov	a,#0x16
      00016D F0               [24]  954 	movx	@dptr,a
      00016E 90r00r04         [24]  955 	mov	dptr,#_spi_control_write_PARM_3
      000171 EC               [12]  956 	mov	a,r4
      000172 F0               [24]  957 	movx	@dptr,a
      000173 75 82 02         [24]  958 	mov	dpl, #0x02
      000176 C0 07            [24]  959 	push	ar7
      000178 C0 06            [24]  960 	push	ar6
      00017A C0 05            [24]  961 	push	ar5
      00017C 12r00rA8         [24]  962 	lcall	_spi_control_write
      00017F D0 05            [24]  963 	pop	ar5
      000181 D0 06            [24]  964 	pop	ar6
      000183 D0 07            [24]  965 	pop	ar7
                                    966 ;	SPI.c:146: spi_control_write(2, 0x17, (uint8_t)((data >> 8) & 0xFF)); // Write MSB of data
      000185 8E 04            [24]  967 	mov	ar4,r6
      000187 90r00r03         [24]  968 	mov	dptr,#_spi_control_write_PARM_2
      00018A 74 17            [12]  969 	mov	a,#0x17
      00018C F0               [24]  970 	movx	@dptr,a
      00018D 90r00r04         [24]  971 	mov	dptr,#_spi_control_write_PARM_3
      000190 EC               [12]  972 	mov	a,r4
      000191 F0               [24]  973 	movx	@dptr,a
      000192 75 82 02         [24]  974 	mov	dpl, #0x02
      000195 C0 07            [24]  975 	push	ar7
      000197 C0 06            [24]  976 	push	ar6
      000199 C0 05            [24]  977 	push	ar5
      00019B 12r00rA8         [24]  978 	lcall	_spi_control_write
      00019E D0 05            [24]  979 	pop	ar5
      0001A0 D0 06            [24]  980 	pop	ar6
      0001A2 D0 07            [24]  981 	pop	ar7
                                    982 ;	SPI.c:149: printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      0001A4 7C 00            [12]  983 	mov	r4,#0x00
      0001A6 C0 05            [24]  984 	push	ar5
      0001A8 C0 06            [24]  985 	push	ar6
      0001AA C0 07            [24]  986 	push	ar7
      0001AC C0 04            [24]  987 	push	ar4
      0001AE 74r45            [12]  988 	mov	a,#___str_2
      0001B0 C0 E0            [24]  989 	push	acc
      0001B2 74s00            [12]  990 	mov	a,#(___str_2 >> 8)
      0001B4 C0 E0            [24]  991 	push	acc
      0001B6 74 80            [12]  992 	mov	a,#0x80
      0001B8 C0 E0            [24]  993 	push	acc
      0001BA 12r00r00         [24]  994 	lcall	_printf
      0001BD E5 81            [12]  995 	mov	a,sp
      0001BF 24 F9            [12]  996 	add	a,#0xf9
      0001C1 F5 81            [12]  997 	mov	sp,a
                                    998 ;	SPI.c:150: }
      0001C3 22               [24]  999 	ret
                                   1000 ;------------------------------------------------------------
                                   1001 ;Allocation info for local variables in function 'mac_spi_read'
                                   1002 ;------------------------------------------------------------
                                   1003 ;bank                      Allocated with name '_mac_spi_read_PARM_2'
                                   1004 ;addr                      Allocated with name '_mac_spi_read_addr_10000_139'
                                   1005 ;data                      Allocated with name '_mac_spi_read_data_10001_142'
                                   1006 ;------------------------------------------------------------
                                   1007 ;	SPI.c:152: uint8_t mac_spi_read(uint8_t addr, uint8_t bank)
                                   1008 ;	-----------------------------------------
                                   1009 ;	 function mac_spi_read
                                   1010 ;	-----------------------------------------
      0001C4                       1011 _mac_spi_read:
      0001C4 E5 82            [12] 1012 	mov	a,dpl
      0001C6 90r00r0D         [24] 1013 	mov	dptr,#_mac_spi_read_addr_10000_139
      0001C9 F0               [24] 1014 	movx	@dptr,a
                                   1015 ;	SPI.c:154: if (addr > 0x1F) {
      0001CA E0               [24] 1016 	movx	a,@dptr
      0001CB FF               [12] 1017 	mov  r7,a
      0001CC 24 E0            [12] 1018 	add	a,#0xff - 0x1f
      0001CE 50 19            [24] 1019 	jnc	00102$
                                   1020 ;	SPI.c:155: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      0001D0 74r0B            [12] 1021 	mov	a,#___str_1
      0001D2 C0 E0            [24] 1022 	push	acc
      0001D4 74s00            [12] 1023 	mov	a,#(___str_1 >> 8)
      0001D6 C0 E0            [24] 1024 	push	acc
      0001D8 74 80            [12] 1025 	mov	a,#0x80
      0001DA C0 E0            [24] 1026 	push	acc
      0001DC 12r00r00         [24] 1027 	lcall	_printf
      0001DF 15 81            [12] 1028 	dec	sp
      0001E1 15 81            [12] 1029 	dec	sp
      0001E3 15 81            [12] 1030 	dec	sp
                                   1031 ;	SPI.c:156: return 0; // Return 0 if address is invalid
      0001E5 75 82 00         [24] 1032 	mov	dpl, #0x00
      0001E8 22               [24] 1033 	ret
      0001E9                       1034 00102$:
                                   1035 ;	SPI.c:159: select_reg_bank(bank); // Select the appropriate register bank
      0001E9 90r00r0C         [24] 1036 	mov	dptr,#_mac_spi_read_PARM_2
      0001EC E0               [24] 1037 	movx	a,@dptr
      0001ED F5 82            [12] 1038 	mov	dpl,a
      0001EF C0 07            [24] 1039 	push	ar7
      0001F1 12r00r23         [24] 1040 	lcall	_select_reg_bank
      0001F4 D0 07            [24] 1041 	pop	ar7
                                   1042 ;	SPI.c:162: CS_LOW;
                                   1043 ;	assignBit
      0001F6 C2 91            [12] 1044 	clr	_P1_1
                                   1045 ;	SPI.c:165: SPI_send(addr);
      0001F8 8F 82            [24] 1046 	mov	dpl, r7
      0001FA 12r00rE4         [24] 1047 	lcall	_SPI_send
                                   1048 ;	SPI.c:168: uint8_t data = SPI_ReadByte();
      0001FD 12r00r00         [24] 1049 	lcall	_SPI_ReadByte
      000200 AF 82            [24] 1050 	mov	r7, dpl
                                   1051 ;	SPI.c:171: CS_HIGH;
                                   1052 ;	assignBit
      000202 D2 91            [12] 1053 	setb	_P1_1
                                   1054 ;	SPI.c:176: return data;
      000204 8F 82            [24] 1055 	mov	dpl, r7
                                   1056 ;	SPI.c:177: }
      000206 22               [24] 1057 	ret
                                   1058 ;------------------------------------------------------------
                                   1059 ;Allocation info for local variables in function 'phy_spi_read'
                                   1060 ;------------------------------------------------------------
                                   1061 ;addr                      Allocated with name '_phy_spi_read_addr_10000_143'
                                   1062 ;data_LSB                  Allocated with name '_phy_spi_read_data_LSB_10001_145'
                                   1063 ;data_MSB                  Allocated with name '_phy_spi_read_data_MSB_10001_145'
                                   1064 ;data                      Allocated with name '_phy_spi_read_data_10001_145'
                                   1065 ;------------------------------------------------------------
                                   1066 ;	SPI.c:180: uint16_t phy_spi_read(uint8_t addr)
                                   1067 ;	-----------------------------------------
                                   1068 ;	 function phy_spi_read
                                   1069 ;	-----------------------------------------
      000207                       1070 _phy_spi_read:
      000207 E5 82            [12] 1071 	mov	a,dpl
      000209 90r00r0E         [24] 1072 	mov	dptr,#_phy_spi_read_addr_10000_143
      00020C F0               [24] 1073 	movx	@dptr,a
                                   1074 ;	SPI.c:182: spi_control_write(2, 0x14, addr);     // Write PHY address
      00020D E0               [24] 1075 	movx	a,@dptr
      00020E FF               [12] 1076 	mov	r7,a
      00020F 90r00r03         [24] 1077 	mov	dptr,#_spi_control_write_PARM_2
      000212 74 14            [12] 1078 	mov	a,#0x14
      000214 F0               [24] 1079 	movx	@dptr,a
      000215 90r00r04         [24] 1080 	mov	dptr,#_spi_control_write_PARM_3
      000218 EF               [12] 1081 	mov	a,r7
      000219 F0               [24] 1082 	movx	@dptr,a
      00021A 75 82 02         [24] 1083 	mov	dpl, #0x02
      00021D 12r00rA8         [24] 1084 	lcall	_spi_control_write
                                   1085 ;	SPI.c:183: spi_control_write(2, 0x12, 1);        // Set MICMD.MIIRD bit
      000220 90r00r03         [24] 1086 	mov	dptr,#_spi_control_write_PARM_2
      000223 74 12            [12] 1087 	mov	a,#0x12
      000225 F0               [24] 1088 	movx	@dptr,a
      000226 90r00r04         [24] 1089 	mov	dptr,#_spi_control_write_PARM_3
      000229 74 01            [12] 1090 	mov	a,#0x01
      00022B F0               [24] 1091 	movx	@dptr,a
      00022C 75 82 02         [24] 1092 	mov	dpl, #0x02
      00022F 12r00rA8         [24] 1093 	lcall	_spi_control_write
                                   1094 ;	SPI.c:185: busy_wait();                          // Wait for the read to complete
      000232 12r02r79         [24] 1095 	lcall	_busy_wait
                                   1096 ;	SPI.c:187: spi_control_write(2, 0x12, 0);        // Clear MICMD.MIIRD bit
      000235 90r00r03         [24] 1097 	mov	dptr,#_spi_control_write_PARM_2
      000238 74 12            [12] 1098 	mov	a,#0x12
      00023A F0               [24] 1099 	movx	@dptr,a
      00023B 90r00r04         [24] 1100 	mov	dptr,#_spi_control_write_PARM_3
      00023E E4               [12] 1101 	clr	a
      00023F F0               [24] 1102 	movx	@dptr,a
      000240 75 82 02         [24] 1103 	mov	dpl, #0x02
      000243 12r00rA8         [24] 1104 	lcall	_spi_control_write
                                   1105 ;	SPI.c:189: uint16_t data_LSB = mac_spi_read(0x18, 2); // Read LSB of data
      000246 90r00r0C         [24] 1106 	mov	dptr,#_mac_spi_read_PARM_2
      000249 74 02            [12] 1107 	mov	a,#0x02
      00024B F0               [24] 1108 	movx	@dptr,a
      00024C 75 82 18         [24] 1109 	mov	dpl, #0x18
      00024F 12r01rC4         [24] 1110 	lcall	_mac_spi_read
      000252 AF 82            [24] 1111 	mov	r7, dpl
      000254 7E 00            [12] 1112 	mov	r6,#0x00
                                   1113 ;	SPI.c:190: uint16_t data_MSB = mac_spi_read(0x19, 2); // Read MSB of data
      000256 90r00r0C         [24] 1114 	mov	dptr,#_mac_spi_read_PARM_2
      000259 74 02            [12] 1115 	mov	a,#0x02
      00025B F0               [24] 1116 	movx	@dptr,a
      00025C 75 82 19         [24] 1117 	mov	dpl, #0x19
      00025F C0 07            [24] 1118 	push	ar7
      000261 C0 06            [24] 1119 	push	ar6
      000263 12r01rC4         [24] 1120 	lcall	_mac_spi_read
      000266 AD 82            [24] 1121 	mov	r5, dpl
      000268 D0 06            [24] 1122 	pop	ar6
      00026A D0 07            [24] 1123 	pop	ar7
                                   1124 ;	SPI.c:192: uint16_t data = (data_MSB << 8) | data_LSB;        // Combine MSB and LSB
      00026C 8D 04            [24] 1125 	mov	ar4,r5
      00026E E4               [12] 1126 	clr	a
      00026F 42 07            [12] 1127 	orl	ar7,a
      000271 EC               [12] 1128 	mov	a,r4
      000272 42 06            [12] 1129 	orl	ar6,a
                                   1130 ;	SPI.c:197: return data;        // Combine MSB and LSB
      000274 8F 82            [24] 1131 	mov	dpl, r7
      000276 8E 83            [24] 1132 	mov	dph, r6
                                   1133 ;	SPI.c:198: }
      000278 22               [24] 1134 	ret
                                   1135 ;------------------------------------------------------------
                                   1136 ;Allocation info for local variables in function 'busy_wait'
                                   1137 ;------------------------------------------------------------
                                   1138 ;data                      Allocated with name '_busy_wait_data_10000_147'
                                   1139 ;------------------------------------------------------------
                                   1140 ;	SPI.c:200: void busy_wait(void)
                                   1141 ;	-----------------------------------------
                                   1142 ;	 function busy_wait
                                   1143 ;	-----------------------------------------
      000279                       1144 _busy_wait:
                                   1145 ;	SPI.c:202: uint8_t data = mac_spi_read(0x0A, 3); // Read ESTAT register (bank 3)
      000279 90r00r0C         [24] 1146 	mov	dptr,#_mac_spi_read_PARM_2
      00027C 74 03            [12] 1147 	mov	a,#0x03
      00027E F0               [24] 1148 	movx	@dptr,a
      00027F 75 82 0A         [24] 1149 	mov	dpl, #0x0a
      000282 12r01rC4         [24] 1150 	lcall	_mac_spi_read
      000285 E5 82            [12] 1151 	mov	a, dpl
      000287 90r00r0F         [24] 1152 	mov	dptr,#_busy_wait_data_10000_147
      00028A F0               [24] 1153 	movx	@dptr,a
                                   1154 ;	SPI.c:203: while (data & 0x01)
      00028B                       1155 00101$:
      00028B 90r00r0F         [24] 1156 	mov	dptr,#_busy_wait_data_10000_147
      00028E E0               [24] 1157 	movx	a,@dptr
      00028F 30 E0 14         [24] 1158 	jnb	acc.0,00104$
                                   1159 ;	SPI.c:205: data = mac_spi_read(0x0A, 3);
      000292 90r00r0C         [24] 1160 	mov	dptr,#_mac_spi_read_PARM_2
      000295 74 03            [12] 1161 	mov	a,#0x03
      000297 F0               [24] 1162 	movx	@dptr,a
      000298 75 82 0A         [24] 1163 	mov	dpl, #0x0a
      00029B 12r01rC4         [24] 1164 	lcall	_mac_spi_read
      00029E E5 82            [12] 1165 	mov	a, dpl
      0002A0 90r00r0F         [24] 1166 	mov	dptr,#_busy_wait_data_10000_147
      0002A3 F0               [24] 1167 	movx	@dptr,a
      0002A4 80 E5            [24] 1168 	sjmp	00101$
      0002A6                       1169 00104$:
                                   1170 ;	SPI.c:207: }
      0002A6 22               [24] 1171 	ret
                                   1172 ;------------------------------------------------------------
                                   1173 ;Allocation info for local variables in function 'buffer_init'
                                   1174 ;------------------------------------------------------------
                                   1175 ;size                      Allocated with name '_buffer_init_PARM_2'
                                   1176 ;start_address             Allocated with name '_buffer_init_start_address_10000_149'
                                   1177 ;erxst                     Allocated with name '_buffer_init_erxst_10001_152'
                                   1178 ;erxnd                     Allocated with name '_buffer_init_erxnd_10001_152'
                                   1179 ;------------------------------------------------------------
                                   1180 ;	SPI.c:209: void buffer_init(uint16_t start_address, uint16_t size)
                                   1181 ;	-----------------------------------------
                                   1182 ;	 function buffer_init
                                   1183 ;	-----------------------------------------
      0002A7                       1184 _buffer_init:
      0002A7 AF 83            [24] 1185 	mov	r7,dph
      0002A9 E5 82            [12] 1186 	mov	a,dpl
      0002AB 90r00r12         [24] 1187 	mov	dptr,#_buffer_init_start_address_10000_149
      0002AE F0               [24] 1188 	movx	@dptr,a
      0002AF EF               [12] 1189 	mov	a,r7
      0002B0 A3               [24] 1190 	inc	dptr
      0002B1 F0               [24] 1191 	movx	@dptr,a
                                   1192 ;	SPI.c:211: if (start_address > 0x1FFF || (start_address + size) > 0x1FFF) {
      0002B2 90r00r12         [24] 1193 	mov	dptr,#_buffer_init_start_address_10000_149
      0002B5 E0               [24] 1194 	movx	a,@dptr
      0002B6 FE               [12] 1195 	mov	r6,a
      0002B7 A3               [24] 1196 	inc	dptr
      0002B8 E0               [24] 1197 	movx	a,@dptr
      0002B9 FF               [12] 1198 	mov	r7,a
      0002BA 8E 04            [24] 1199 	mov	ar4,r6
      0002BC 8F 05            [24] 1200 	mov	ar5,r7
      0002BE C3               [12] 1201 	clr	c
      0002BF 74 FF            [12] 1202 	mov	a,#0xff
      0002C1 9C               [12] 1203 	subb	a,r4
      0002C2 74 1F            [12] 1204 	mov	a,#0x1f
      0002C4 9D               [12] 1205 	subb	a,r5
      0002C5 40 17            [24] 1206 	jc	00101$
      0002C7 90r00r10         [24] 1207 	mov	dptr,#_buffer_init_PARM_2
      0002CA E0               [24] 1208 	movx	a,@dptr
      0002CB FA               [12] 1209 	mov	r2,a
      0002CC A3               [24] 1210 	inc	dptr
      0002CD E0               [24] 1211 	movx	a,@dptr
      0002CE FB               [12] 1212 	mov	r3,a
      0002CF EA               [12] 1213 	mov	a,r2
      0002D0 2E               [12] 1214 	add	a, r6
      0002D1 F8               [12] 1215 	mov	r0,a
      0002D2 EB               [12] 1216 	mov	a,r3
      0002D3 3F               [12] 1217 	addc	a, r7
      0002D4 F9               [12] 1218 	mov	r1,a
      0002D5 C3               [12] 1219 	clr	c
      0002D6 74 FF            [12] 1220 	mov	a,#0xff
      0002D8 98               [12] 1221 	subb	a,r0
      0002D9 74 1F            [12] 1222 	mov	a,#0x1f
      0002DB 99               [12] 1223 	subb	a,r1
      0002DC 50 2A            [24] 1224 	jnc	00102$
      0002DE                       1225 00101$:
                                   1226 ;	SPI.c:212: printf("\n\rInvalid Buffer Address or Size: Start 0x%04X, Size 0x%04X\n\r", start_address, size);
      0002DE 90r00r10         [24] 1227 	mov	dptr,#_buffer_init_PARM_2
      0002E1 E0               [24] 1228 	movx	a,@dptr
      0002E2 C0 E0            [24] 1229 	push	acc
      0002E4 A3               [24] 1230 	inc	dptr
      0002E5 E0               [24] 1231 	movx	a,@dptr
      0002E6 C0 E0            [24] 1232 	push	acc
      0002E8 90r00r12         [24] 1233 	mov	dptr,#_buffer_init_start_address_10000_149
      0002EB E0               [24] 1234 	movx	a,@dptr
      0002EC C0 E0            [24] 1235 	push	acc
      0002EE A3               [24] 1236 	inc	dptr
      0002EF E0               [24] 1237 	movx	a,@dptr
      0002F0 C0 E0            [24] 1238 	push	acc
      0002F2 74r6E            [12] 1239 	mov	a,#___str_3
      0002F4 C0 E0            [24] 1240 	push	acc
      0002F6 74s00            [12] 1241 	mov	a,#(___str_3 >> 8)
      0002F8 C0 E0            [24] 1242 	push	acc
      0002FA 74 80            [12] 1243 	mov	a,#0x80
      0002FC C0 E0            [24] 1244 	push	acc
      0002FE 12r00r00         [24] 1245 	lcall	_printf
      000301 E5 81            [12] 1246 	mov	a,sp
      000303 24 F9            [12] 1247 	add	a,#0xf9
      000305 F5 81            [12] 1248 	mov	sp,a
                                   1249 ;	SPI.c:213: return;
      000307 22               [24] 1250 	ret
      000308                       1251 00102$:
                                   1252 ;	SPI.c:217: uint16_t erxst = start_address & ~1; // Make sure ERXST is even
      000308 53 04 FE         [24] 1253 	anl	ar4,#0xfe
                                   1254 ;	SPI.c:218: uint16_t erxnd = (start_address + size - 1) & ~1; // Make sure ERXND is even
      00030B EA               [12] 1255 	mov	a,r2
      00030C 2E               [12] 1256 	add	a, r6
      00030D FE               [12] 1257 	mov	r6,a
      00030E EB               [12] 1258 	mov	a,r3
      00030F 3F               [12] 1259 	addc	a, r7
      000310 FF               [12] 1260 	mov	r7,a
      000311 1E               [12] 1261 	dec	r6
      000312 BE FF 01         [24] 1262 	cjne	r6,#0xff,00114$
      000315 1F               [12] 1263 	dec	r7
      000316                       1264 00114$:
      000316 53 06 FE         [24] 1265 	anl	ar6,#0xfe
                                   1266 ;	SPI.c:221: spi_control_write(0, 0x08, (uint8_t)(erxst >> 8)); // High byte of ERXST
      000319 8D 03            [24] 1267 	mov	ar3,r5
      00031B 90r00r03         [24] 1268 	mov	dptr,#_spi_control_write_PARM_2
      00031E 74 08            [12] 1269 	mov	a,#0x08
      000320 F0               [24] 1270 	movx	@dptr,a
      000321 90r00r04         [24] 1271 	mov	dptr,#_spi_control_write_PARM_3
      000324 EB               [12] 1272 	mov	a,r3
      000325 F0               [24] 1273 	movx	@dptr,a
      000326 75 82 00         [24] 1274 	mov	dpl, #0x00
      000329 C0 07            [24] 1275 	push	ar7
      00032B C0 06            [24] 1276 	push	ar6
      00032D C0 05            [24] 1277 	push	ar5
      00032F C0 04            [24] 1278 	push	ar4
      000331 12r00rA8         [24] 1279 	lcall	_spi_control_write
      000334 D0 04            [24] 1280 	pop	ar4
      000336 D0 05            [24] 1281 	pop	ar5
      000338 D0 06            [24] 1282 	pop	ar6
      00033A D0 07            [24] 1283 	pop	ar7
                                   1284 ;	SPI.c:222: spi_control_write(0, 0x09, (uint8_t)(erxst & 0xFF)); // Low byte of ERXST
      00033C 8C 03            [24] 1285 	mov	ar3,r4
      00033E 90r00r03         [24] 1286 	mov	dptr,#_spi_control_write_PARM_2
      000341 74 09            [12] 1287 	mov	a,#0x09
      000343 F0               [24] 1288 	movx	@dptr,a
      000344 90r00r04         [24] 1289 	mov	dptr,#_spi_control_write_PARM_3
      000347 EB               [12] 1290 	mov	a,r3
      000348 F0               [24] 1291 	movx	@dptr,a
      000349 75 82 00         [24] 1292 	mov	dpl, #0x00
      00034C C0 07            [24] 1293 	push	ar7
      00034E C0 06            [24] 1294 	push	ar6
      000350 C0 05            [24] 1295 	push	ar5
      000352 C0 04            [24] 1296 	push	ar4
      000354 12r00rA8         [24] 1297 	lcall	_spi_control_write
      000357 D0 04            [24] 1298 	pop	ar4
      000359 D0 05            [24] 1299 	pop	ar5
      00035B D0 06            [24] 1300 	pop	ar6
      00035D D0 07            [24] 1301 	pop	ar7
                                   1302 ;	SPI.c:225: spi_control_write(0, 0x0A, (uint8_t)(erxnd >> 8)); // High byte of ERXND
      00035F 8F 03            [24] 1303 	mov	ar3,r7
      000361 90r00r03         [24] 1304 	mov	dptr,#_spi_control_write_PARM_2
      000364 74 0A            [12] 1305 	mov	a,#0x0a
      000366 F0               [24] 1306 	movx	@dptr,a
      000367 90r00r04         [24] 1307 	mov	dptr,#_spi_control_write_PARM_3
      00036A EB               [12] 1308 	mov	a,r3
      00036B F0               [24] 1309 	movx	@dptr,a
      00036C 75 82 00         [24] 1310 	mov	dpl, #0x00
      00036F C0 07            [24] 1311 	push	ar7
      000371 C0 06            [24] 1312 	push	ar6
      000373 C0 05            [24] 1313 	push	ar5
      000375 C0 04            [24] 1314 	push	ar4
      000377 12r00rA8         [24] 1315 	lcall	_spi_control_write
      00037A D0 04            [24] 1316 	pop	ar4
      00037C D0 05            [24] 1317 	pop	ar5
      00037E D0 06            [24] 1318 	pop	ar6
      000380 D0 07            [24] 1319 	pop	ar7
                                   1320 ;	SPI.c:226: spi_control_write(0, 0x0B, (uint8_t)(erxnd & 0xFF)); // Low byte of ERXND
      000382 8E 03            [24] 1321 	mov	ar3,r6
      000384 90r00r03         [24] 1322 	mov	dptr,#_spi_control_write_PARM_2
      000387 74 0B            [12] 1323 	mov	a,#0x0b
      000389 F0               [24] 1324 	movx	@dptr,a
      00038A 90r00r04         [24] 1325 	mov	dptr,#_spi_control_write_PARM_3
      00038D EB               [12] 1326 	mov	a,r3
      00038E F0               [24] 1327 	movx	@dptr,a
      00038F 75 82 00         [24] 1328 	mov	dpl, #0x00
      000392 C0 07            [24] 1329 	push	ar7
      000394 C0 06            [24] 1330 	push	ar6
      000396 C0 05            [24] 1331 	push	ar5
      000398 C0 04            [24] 1332 	push	ar4
      00039A 12r00rA8         [24] 1333 	lcall	_spi_control_write
      00039D D0 04            [24] 1334 	pop	ar4
      00039F D0 05            [24] 1335 	pop	ar5
      0003A1 D0 06            [24] 1336 	pop	ar6
      0003A3 D0 07            [24] 1337 	pop	ar7
                                   1338 ;	SPI.c:228: printf("\n\rBuffer Initialized: Start 0x%04X, End 0x%04X\n\r", erxst, erxnd);
      0003A5 C0 06            [24] 1339 	push	ar6
      0003A7 C0 07            [24] 1340 	push	ar7
      0003A9 C0 04            [24] 1341 	push	ar4
      0003AB C0 05            [24] 1342 	push	ar5
      0003AD 74rAC            [12] 1343 	mov	a,#___str_4
      0003AF C0 E0            [24] 1344 	push	acc
      0003B1 74s00            [12] 1345 	mov	a,#(___str_4 >> 8)
      0003B3 C0 E0            [24] 1346 	push	acc
      0003B5 74 80            [12] 1347 	mov	a,#0x80
      0003B7 C0 E0            [24] 1348 	push	acc
      0003B9 12r00r00         [24] 1349 	lcall	_printf
      0003BC E5 81            [12] 1350 	mov	a,sp
      0003BE 24 F9            [12] 1351 	add	a,#0xf9
      0003C0 F5 81            [12] 1352 	mov	sp,a
                                   1353 ;	SPI.c:229: }
      0003C2 22               [24] 1354 	ret
                                   1355 ;------------------------------------------------------------
                                   1356 ;Allocation info for local variables in function 'spi_buffer_read'
                                   1357 ;------------------------------------------------------------
                                   1358 ;start_address             Allocated with name '_spi_buffer_read_PARM_2'
                                   1359 ;data_ptr                  Allocated with name '_spi_buffer_read_PARM_3'
                                   1360 ;num_bytes                 Allocated with name '_spi_buffer_read_num_bytes_10000_153'
                                   1361 ;higher_byte               Allocated with name '_spi_buffer_read_higher_byte_10001_159'
                                   1362 ;lower_byte                Allocated with name '_spi_buffer_read_lower_byte_10001_159'
                                   1363 ;opcode                    Allocated with name '_spi_buffer_read_opcode_10002_160'
                                   1364 ;i                         Allocated with name '_spi_buffer_read_i_20002_161'
                                   1365 ;------------------------------------------------------------
                                   1366 ;	SPI.c:232: uint16_t spi_buffer_read(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1367 ;	-----------------------------------------
                                   1368 ;	 function spi_buffer_read
                                   1369 ;	-----------------------------------------
      0003C3                       1370 _spi_buffer_read:
      0003C3 AF 83            [24] 1371 	mov	r7,dph
      0003C5 E5 82            [12] 1372 	mov	a,dpl
      0003C7 90r00r19         [24] 1373 	mov	dptr,#_spi_buffer_read_num_bytes_10000_153
      0003CA F0               [24] 1374 	movx	@dptr,a
      0003CB EF               [12] 1375 	mov	a,r7
      0003CC A3               [24] 1376 	inc	dptr
      0003CD F0               [24] 1377 	movx	@dptr,a
                                   1378 ;	SPI.c:234: if (num_bytes < 1) {
      0003CE 90r00r19         [24] 1379 	mov	dptr,#_spi_buffer_read_num_bytes_10000_153
      0003D1 E0               [24] 1380 	movx	a,@dptr
      0003D2 FE               [12] 1381 	mov	r6,a
      0003D3 A3               [24] 1382 	inc	dptr
      0003D4 E0               [24] 1383 	movx	a,@dptr
      0003D5 FF               [12] 1384 	mov	r7,a
      0003D6 C3               [12] 1385 	clr	c
      0003D7 EE               [12] 1386 	mov	a,r6
      0003D8 94 01            [12] 1387 	subb	a,#0x01
      0003DA EF               [12] 1388 	mov	a,r7
      0003DB 64 80            [12] 1389 	xrl	a,#0x80
      0003DD 94 80            [12] 1390 	subb	a,#0x80
      0003DF 50 1A            [24] 1391 	jnc	00102$
                                   1392 ;	SPI.c:235: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      0003E1 C0 06            [24] 1393 	push	ar6
      0003E3 C0 07            [24] 1394 	push	ar7
      0003E5 74rDD            [12] 1395 	mov	a,#___str_5
      0003E7 C0 E0            [24] 1396 	push	acc
      0003E9 74s00            [12] 1397 	mov	a,#(___str_5 >> 8)
      0003EB C0 E0            [24] 1398 	push	acc
      0003ED 74 80            [12] 1399 	mov	a,#0x80
      0003EF C0 E0            [24] 1400 	push	acc
      0003F1 12r00r00         [24] 1401 	lcall	_printf
      0003F4 E5 81            [12] 1402 	mov	a,sp
      0003F6 24 FB            [12] 1403 	add	a,#0xfb
      0003F8 F5 81            [12] 1404 	mov	sp,a
                                   1405 ;	SPI.c:236: return;
      0003FA 22               [24] 1406 	ret
      0003FB                       1407 00102$:
                                   1408 ;	SPI.c:238: if (start_address > 0x1FFF) {
      0003FB 90r00r14         [24] 1409 	mov	dptr,#_spi_buffer_read_PARM_2
      0003FE E0               [24] 1410 	movx	a,@dptr
      0003FF FC               [12] 1411 	mov	r4,a
      000400 A3               [24] 1412 	inc	dptr
      000401 E0               [24] 1413 	movx	a,@dptr
      000402 FD               [12] 1414 	mov	r5,a
      000403 8C 02            [24] 1415 	mov	ar2,r4
      000405 8D 03            [24] 1416 	mov	ar3,r5
      000407 C3               [12] 1417 	clr	c
      000408 74 FF            [12] 1418 	mov	a,#0xff
      00040A 9A               [12] 1419 	subb	a,r2
      00040B 74 1F            [12] 1420 	mov	a,#0x1f
      00040D 9B               [12] 1421 	subb	a,r3
      00040E 50 1A            [24] 1422 	jnc	00107$
                                   1423 ;	SPI.c:239: printf("\n\rInvalid address: %04X\n\r", start_address);
      000410 C0 04            [24] 1424 	push	ar4
      000412 C0 05            [24] 1425 	push	ar5
      000414 74rFD            [12] 1426 	mov	a,#___str_6
      000416 C0 E0            [24] 1427 	push	acc
      000418 74s00            [12] 1428 	mov	a,#(___str_6 >> 8)
      00041A C0 E0            [24] 1429 	push	acc
      00041C 74 80            [12] 1430 	mov	a,#0x80
      00041E C0 E0            [24] 1431 	push	acc
      000420 12r00r00         [24] 1432 	lcall	_printf
      000423 E5 81            [12] 1433 	mov	a,sp
      000425 24 FB            [12] 1434 	add	a,#0xfb
      000427 F5 81            [12] 1435 	mov	sp,a
                                   1436 ;	SPI.c:240: return;
      000429 22               [24] 1437 	ret
                                   1438 ;	SPI.c:243: || (start_address + num_bytes) > RX_BUFFER_END) {
      00042A                       1439 00107$:
      00042A 8E 00            [24] 1440 	mov	ar0,r6
      00042C 8F 01            [24] 1441 	mov	ar1,r7
      00042E E8               [12] 1442 	mov	a,r0
      00042F 2A               [12] 1443 	add	a, r2
      000430 FA               [12] 1444 	mov	r2,a
      000431 E9               [12] 1445 	mov	a,r1
      000432 3B               [12] 1446 	addc	a, r3
      000433 FB               [12] 1447 	mov	r3,a
      000434 C3               [12] 1448 	clr	c
      000435 74 FF            [12] 1449 	mov	a,#0xff
      000437 9A               [12] 1450 	subb	a,r2
      000438 74 0B            [12] 1451 	mov	a,#0x0b
      00043A 9B               [12] 1452 	subb	a,r3
      00043B 50 21            [24] 1453 	jnc	00106$
                                   1454 ;	SPI.c:244: printf("\nInvalid RX Address: Start 0x%04X, Size %d\n", start_address,
      00043D C0 06            [24] 1455 	push	ar6
      00043F C0 07            [24] 1456 	push	ar7
      000441 C0 04            [24] 1457 	push	ar4
      000443 C0 05            [24] 1458 	push	ar5
      000445 74r17            [12] 1459 	mov	a,#___str_7
      000447 C0 E0            [24] 1460 	push	acc
      000449 74s01            [12] 1461 	mov	a,#(___str_7 >> 8)
      00044B C0 E0            [24] 1462 	push	acc
      00044D 74 80            [12] 1463 	mov	a,#0x80
      00044F C0 E0            [24] 1464 	push	acc
      000451 12r00r00         [24] 1465 	lcall	_printf
      000454 E5 81            [12] 1466 	mov	a,sp
      000456 24 F9            [12] 1467 	add	a,#0xf9
      000458 F5 81            [12] 1468 	mov	sp,a
                                   1469 ;	SPI.c:246: return 0;
      00045A 90 00 00         [24] 1470 	mov	dptr,#0x0000
      00045D 22               [24] 1471 	ret
      00045E                       1472 00106$:
                                   1473 ;	SPI.c:249: if (num_bytes > 1) {
      00045E C3               [12] 1474 	clr	c
      00045F 74 01            [12] 1475 	mov	a,#0x01
      000461 9E               [12] 1476 	subb	a,r6
      000462 74 80            [12] 1477 	mov	a,#(0x00 ^ 0x80)
      000464 8F F0            [24] 1478 	mov	b,r7
      000466 63 F0 80         [24] 1479 	xrl	b,#0x80
      000469 95 F0            [12] 1480 	subb	a,b
      00046B 50 0B            [24] 1481 	jnc	00109$
                                   1482 ;	SPI.c:250: spi_set_autoinc();
      00046D C0 05            [24] 1483 	push	ar5
      00046F C0 04            [24] 1484 	push	ar4
      000471 12r00r12         [24] 1485 	lcall	_spi_set_autoinc
      000474 D0 04            [24] 1486 	pop	ar4
      000476 D0 05            [24] 1487 	pop	ar5
      000478                       1488 00109$:
                                   1489 ;	SPI.c:254: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      000478 8D 07            [24] 1490 	mov	ar7,r5
                                   1491 ;	SPI.c:255: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      00047A 8C 06            [24] 1492 	mov	ar6,r4
                                   1493 ;	SPI.c:257: spi_control_write(0, 0x01, higher_byte); // High byte
      00047C 90r00r03         [24] 1494 	mov	dptr,#_spi_control_write_PARM_2
      00047F 74 01            [12] 1495 	mov	a,#0x01
      000481 F0               [24] 1496 	movx	@dptr,a
      000482 90r00r04         [24] 1497 	mov	dptr,#_spi_control_write_PARM_3
      000485 EF               [12] 1498 	mov	a,r7
      000486 F0               [24] 1499 	movx	@dptr,a
      000487 75 82 00         [24] 1500 	mov	dpl, #0x00
      00048A C0 06            [24] 1501 	push	ar6
      00048C C0 05            [24] 1502 	push	ar5
      00048E C0 04            [24] 1503 	push	ar4
      000490 12r00rA8         [24] 1504 	lcall	_spi_control_write
      000493 D0 04            [24] 1505 	pop	ar4
      000495 D0 05            [24] 1506 	pop	ar5
      000497 D0 06            [24] 1507 	pop	ar6
                                   1508 ;	SPI.c:258: spi_control_write(0, 0x00, lower_byte); // Low byte
      000499 90r00r03         [24] 1509 	mov	dptr,#_spi_control_write_PARM_2
      00049C E4               [12] 1510 	clr	a
      00049D F0               [24] 1511 	movx	@dptr,a
      00049E 90r00r04         [24] 1512 	mov	dptr,#_spi_control_write_PARM_3
      0004A1 EE               [12] 1513 	mov	a,r6
      0004A2 F0               [24] 1514 	movx	@dptr,a
      0004A3 75 82 00         [24] 1515 	mov	dpl, #0x00
      0004A6 C0 05            [24] 1516 	push	ar5
      0004A8 C0 04            [24] 1517 	push	ar4
      0004AA 12r00rA8         [24] 1518 	lcall	_spi_control_write
                                   1519 ;	SPI.c:261: CS_LOW; // Pull CS Low
                                   1520 ;	assignBit
      0004AD C2 91            [12] 1521 	clr	_P1_1
                                   1522 ;	SPI.c:262: SPI_send(opcode); // Send opcode
      0004AF 75 82 3A         [24] 1523 	mov	dpl, #0x3a
      0004B2 12r00rE4         [24] 1524 	lcall	_SPI_send
      0004B5 D0 04            [24] 1525 	pop	ar4
      0004B7 D0 05            [24] 1526 	pop	ar5
                                   1527 ;	SPI.c:265: printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      0004B9 90r00r19         [24] 1528 	mov	dptr,#_spi_buffer_read_num_bytes_10000_153
      0004BC E0               [24] 1529 	movx	a,@dptr
      0004BD FE               [12] 1530 	mov	r6,a
      0004BE A3               [24] 1531 	inc	dptr
      0004BF E0               [24] 1532 	movx	a,@dptr
      0004C0 FF               [12] 1533 	mov	r7,a
      0004C1 C0 07            [24] 1534 	push	ar7
      0004C3 C0 06            [24] 1535 	push	ar6
      0004C5 C0 04            [24] 1536 	push	ar4
      0004C7 C0 05            [24] 1537 	push	ar5
      0004C9 C0 06            [24] 1538 	push	ar6
      0004CB C0 07            [24] 1539 	push	ar7
      0004CD 74r43            [12] 1540 	mov	a,#___str_8
      0004CF C0 E0            [24] 1541 	push	acc
      0004D1 74s01            [12] 1542 	mov	a,#(___str_8 >> 8)
      0004D3 C0 E0            [24] 1543 	push	acc
      0004D5 74 80            [12] 1544 	mov	a,#0x80
      0004D7 C0 E0            [24] 1545 	push	acc
      0004D9 12r00r00         [24] 1546 	lcall	_printf
      0004DC E5 81            [12] 1547 	mov	a,sp
      0004DE 24 F9            [12] 1548 	add	a,#0xf9
      0004E0 F5 81            [12] 1549 	mov	sp,a
      0004E2 D0 06            [24] 1550 	pop	ar6
      0004E4 D0 07            [24] 1551 	pop	ar7
                                   1552 ;	SPI.c:266: for (int i = 0; i < num_bytes; i++) {
      0004E6 90r00r16         [24] 1553 	mov	dptr,#_spi_buffer_read_PARM_3
      0004E9 E0               [24] 1554 	movx	a,@dptr
      0004EA FB               [12] 1555 	mov	r3,a
      0004EB A3               [24] 1556 	inc	dptr
      0004EC E0               [24] 1557 	movx	a,@dptr
      0004ED FC               [12] 1558 	mov	r4,a
      0004EE A3               [24] 1559 	inc	dptr
      0004EF E0               [24] 1560 	movx	a,@dptr
      0004F0 FD               [12] 1561 	mov	r5,a
      0004F1 79 00            [12] 1562 	mov	r1,#0x00
      0004F3 7A 00            [12] 1563 	mov	r2,#0x00
      0004F5                       1564 00112$:
      0004F5 C3               [12] 1565 	clr	c
      0004F6 E9               [12] 1566 	mov	a,r1
      0004F7 9E               [12] 1567 	subb	a,r6
      0004F8 EA               [12] 1568 	mov	a,r2
      0004F9 64 80            [12] 1569 	xrl	a,#0x80
      0004FB 8F F0            [24] 1570 	mov	b,r7
      0004FD 63 F0 80         [24] 1571 	xrl	b,#0x80
      000500 95 F0            [12] 1572 	subb	a,b
      000502 50 37            [24] 1573 	jnc	00110$
                                   1574 ;	SPI.c:267: *data_ptr = SPI_ReadByte(); // Read data
      000504 C0 07            [24] 1575 	push	ar7
      000506 C0 06            [24] 1576 	push	ar6
      000508 C0 05            [24] 1577 	push	ar5
      00050A C0 04            [24] 1578 	push	ar4
      00050C C0 03            [24] 1579 	push	ar3
      00050E C0 02            [24] 1580 	push	ar2
      000510 C0 01            [24] 1581 	push	ar1
      000512 12r00r00         [24] 1582 	lcall	_SPI_ReadByte
      000515 A8 82            [24] 1583 	mov	r0, dpl
      000517 D0 01            [24] 1584 	pop	ar1
      000519 D0 02            [24] 1585 	pop	ar2
      00051B D0 03            [24] 1586 	pop	ar3
      00051D D0 04            [24] 1587 	pop	ar4
      00051F D0 05            [24] 1588 	pop	ar5
      000521 D0 06            [24] 1589 	pop	ar6
      000523 D0 07            [24] 1590 	pop	ar7
      000525 8B 82            [24] 1591 	mov	dpl,r3
      000527 8C 83            [24] 1592 	mov	dph,r4
      000529 8D F0            [24] 1593 	mov	b,r5
      00052B E8               [12] 1594 	mov	a,r0
      00052C 12r00r00         [24] 1595 	lcall	__gptrput
      00052F A3               [24] 1596 	inc	dptr
      000530 AB 82            [24] 1597 	mov	r3,dpl
      000532 AC 83            [24] 1598 	mov	r4,dph
                                   1599 ;	SPI.c:269: data_ptr++;
                                   1600 ;	SPI.c:266: for (int i = 0; i < num_bytes; i++) {
      000534 09               [12] 1601 	inc	r1
      000535 B9 00 BD         [24] 1602 	cjne	r1,#0x00,00112$
      000538 0A               [12] 1603 	inc	r2
      000539 80 BA            [24] 1604 	sjmp	00112$
      00053B                       1605 00110$:
                                   1606 ;	SPI.c:271: CS_HIGH; // Pull CS High
                                   1607 ;	assignBit
      00053B D2 91            [12] 1608 	setb	_P1_1
                                   1609 ;	SPI.c:272: return (uint16_t) num_bytes;
      00053D 8E 82            [24] 1610 	mov	dpl, r6
      00053F 8F 83            [24] 1611 	mov	dph, r7
                                   1612 ;	SPI.c:273: }
      000541 22               [24] 1613 	ret
                                   1614 ;------------------------------------------------------------
                                   1615 ;Allocation info for local variables in function 'spi_buffer_write'
                                   1616 ;------------------------------------------------------------
                                   1617 ;start_address             Allocated with name '_spi_buffer_write_PARM_2'
                                   1618 ;data_ptr                  Allocated with name '_spi_buffer_write_PARM_3'
                                   1619 ;num_bytes                 Allocated with name '_spi_buffer_write_num_bytes_10000_163'
                                   1620 ;higher_byte               Allocated with name '_spi_buffer_write_higher_byte_10001_168'
                                   1621 ;lower_byte                Allocated with name '_spi_buffer_write_lower_byte_10001_168'
                                   1622 ;opcode                    Allocated with name '_spi_buffer_write_opcode_10002_169'
                                   1623 ;i                         Allocated with name '_spi_buffer_write_i_20002_170'
                                   1624 ;------------------------------------------------------------
                                   1625 ;	SPI.c:276: void spi_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1626 ;	-----------------------------------------
                                   1627 ;	 function spi_buffer_write
                                   1628 ;	-----------------------------------------
      000542                       1629 _spi_buffer_write:
      000542 AF 83            [24] 1630 	mov	r7,dph
      000544 E5 82            [12] 1631 	mov	a,dpl
      000546 90r00r20         [24] 1632 	mov	dptr,#_spi_buffer_write_num_bytes_10000_163
      000549 F0               [24] 1633 	movx	@dptr,a
      00054A EF               [12] 1634 	mov	a,r7
      00054B A3               [24] 1635 	inc	dptr
      00054C F0               [24] 1636 	movx	@dptr,a
                                   1637 ;	SPI.c:278: if (num_bytes < 1)
      00054D 90r00r20         [24] 1638 	mov	dptr,#_spi_buffer_write_num_bytes_10000_163
      000550 E0               [24] 1639 	movx	a,@dptr
      000551 FE               [12] 1640 	mov	r6,a
      000552 A3               [24] 1641 	inc	dptr
      000553 E0               [24] 1642 	movx	a,@dptr
      000554 FF               [12] 1643 	mov	r7,a
      000555 C3               [12] 1644 	clr	c
      000556 EE               [12] 1645 	mov	a,r6
      000557 94 01            [12] 1646 	subb	a,#0x01
      000559 EF               [12] 1647 	mov	a,r7
      00055A 64 80            [12] 1648 	xrl	a,#0x80
      00055C 94 80            [12] 1649 	subb	a,#0x80
      00055E 50 1A            [24] 1650 	jnc	00102$
                                   1651 ;	SPI.c:280: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      000560 C0 06            [24] 1652 	push	ar6
      000562 C0 07            [24] 1653 	push	ar7
      000564 74rDD            [12] 1654 	mov	a,#___str_5
      000566 C0 E0            [24] 1655 	push	acc
      000568 74s00            [12] 1656 	mov	a,#(___str_5 >> 8)
      00056A C0 E0            [24] 1657 	push	acc
      00056C 74 80            [12] 1658 	mov	a,#0x80
      00056E C0 E0            [24] 1659 	push	acc
      000570 12r00r00         [24] 1660 	lcall	_printf
      000573 E5 81            [12] 1661 	mov	a,sp
      000575 24 FB            [12] 1662 	add	a,#0xfb
      000577 F5 81            [12] 1663 	mov	sp,a
                                   1664 ;	SPI.c:281: return;
      000579 22               [24] 1665 	ret
      00057A                       1666 00102$:
                                   1667 ;	SPI.c:283: if (start_address > 0x1FFF) {
      00057A 90r00r1B         [24] 1668 	mov	dptr,#_spi_buffer_write_PARM_2
      00057D E0               [24] 1669 	movx	a,@dptr
      00057E FC               [12] 1670 	mov	r4,a
      00057F A3               [24] 1671 	inc	dptr
      000580 E0               [24] 1672 	movx	a,@dptr
      000581 FD               [12] 1673 	mov	r5,a
      000582 8C 02            [24] 1674 	mov	ar2,r4
      000584 8D 03            [24] 1675 	mov	ar3,r5
      000586 C3               [12] 1676 	clr	c
      000587 74 FF            [12] 1677 	mov	a,#0xff
      000589 9A               [12] 1678 	subb	a,r2
      00058A 74 1F            [12] 1679 	mov	a,#0x1f
      00058C 9B               [12] 1680 	subb	a,r3
      00058D 50 1A            [24] 1681 	jnc	00104$
                                   1682 ;	SPI.c:284: printf("\n\rInvalid address: %04X\n\r", start_address);
      00058F C0 04            [24] 1683 	push	ar4
      000591 C0 05            [24] 1684 	push	ar5
      000593 74rFD            [12] 1685 	mov	a,#___str_6
      000595 C0 E0            [24] 1686 	push	acc
      000597 74s00            [12] 1687 	mov	a,#(___str_6 >> 8)
      000599 C0 E0            [24] 1688 	push	acc
      00059B 74 80            [12] 1689 	mov	a,#0x80
      00059D C0 E0            [24] 1690 	push	acc
      00059F 12r00r00         [24] 1691 	lcall	_printf
      0005A2 E5 81            [12] 1692 	mov	a,sp
      0005A4 24 FB            [12] 1693 	add	a,#0xfb
      0005A6 F5 81            [12] 1694 	mov	sp,a
                                   1695 ;	SPI.c:285: return;
      0005A8 22               [24] 1696 	ret
      0005A9                       1697 00104$:
                                   1698 ;	SPI.c:289: if (num_bytes > 1) {
      0005A9 C3               [12] 1699 	clr	c
      0005AA 74 01            [12] 1700 	mov	a,#0x01
      0005AC 9E               [12] 1701 	subb	a,r6
      0005AD 74 80            [12] 1702 	mov	a,#(0x00 ^ 0x80)
      0005AF 8F F0            [24] 1703 	mov	b,r7
      0005B1 63 F0 80         [24] 1704 	xrl	b,#0x80
      0005B4 95 F0            [12] 1705 	subb	a,b
      0005B6 50 0B            [24] 1706 	jnc	00106$
                                   1707 ;	SPI.c:290: spi_set_autoinc();
      0005B8 C0 05            [24] 1708 	push	ar5
      0005BA C0 04            [24] 1709 	push	ar4
      0005BC 12r00r12         [24] 1710 	lcall	_spi_set_autoinc
      0005BF D0 04            [24] 1711 	pop	ar4
      0005C1 D0 05            [24] 1712 	pop	ar5
      0005C3                       1713 00106$:
                                   1714 ;	SPI.c:293: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      0005C3 8D 07            [24] 1715 	mov	ar7,r5
                                   1716 ;	SPI.c:294: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
                                   1717 ;	SPI.c:296: spi_control_write(0, 0x03, higher_byte); // High byte
      0005C5 90r00r03         [24] 1718 	mov	dptr,#_spi_control_write_PARM_2
      0005C8 74 03            [12] 1719 	mov	a,#0x03
      0005CA F0               [24] 1720 	movx	@dptr,a
      0005CB 90r00r04         [24] 1721 	mov	dptr,#_spi_control_write_PARM_3
      0005CE EF               [12] 1722 	mov	a,r7
      0005CF F0               [24] 1723 	movx	@dptr,a
      0005D0 75 82 00         [24] 1724 	mov	dpl, #0x00
      0005D3 C0 04            [24] 1725 	push	ar4
      0005D5 12r00rA8         [24] 1726 	lcall	_spi_control_write
      0005D8 D0 04            [24] 1727 	pop	ar4
                                   1728 ;	SPI.c:297: spi_control_write(0, 0x02, lower_byte); // Low byte
      0005DA 90r00r03         [24] 1729 	mov	dptr,#_spi_control_write_PARM_2
      0005DD 74 02            [12] 1730 	mov	a,#0x02
      0005DF F0               [24] 1731 	movx	@dptr,a
      0005E0 90r00r04         [24] 1732 	mov	dptr,#_spi_control_write_PARM_3
      0005E3 EC               [12] 1733 	mov	a,r4
      0005E4 F0               [24] 1734 	movx	@dptr,a
      0005E5 75 82 00         [24] 1735 	mov	dpl, #0x00
      0005E8 12r00rA8         [24] 1736 	lcall	_spi_control_write
                                   1737 ;	SPI.c:300: CS_LOW; // Pull CS Low
                                   1738 ;	assignBit
      0005EB C2 91            [12] 1739 	clr	_P1_1
                                   1740 ;	SPI.c:301: SPI_send(opcode); // Send opcode
      0005ED 75 82 7A         [24] 1741 	mov	dpl, #0x7a
      0005F0 12r00rE4         [24] 1742 	lcall	_SPI_send
                                   1743 ;	SPI.c:305: for (int i = 0; i < num_bytes; i++) {
      0005F3 90r00r20         [24] 1744 	mov	dptr,#_spi_buffer_write_num_bytes_10000_163
      0005F6 E0               [24] 1745 	movx	a,@dptr
      0005F7 FE               [12] 1746 	mov	r6,a
      0005F8 A3               [24] 1747 	inc	dptr
      0005F9 E0               [24] 1748 	movx	a,@dptr
      0005FA FF               [12] 1749 	mov	r7,a
      0005FB 90r00r1D         [24] 1750 	mov	dptr,#_spi_buffer_write_PARM_3
      0005FE E0               [24] 1751 	movx	a,@dptr
      0005FF FB               [12] 1752 	mov	r3,a
      000600 A3               [24] 1753 	inc	dptr
      000601 E0               [24] 1754 	movx	a,@dptr
      000602 FC               [12] 1755 	mov	r4,a
      000603 A3               [24] 1756 	inc	dptr
      000604 E0               [24] 1757 	movx	a,@dptr
      000605 FD               [12] 1758 	mov	r5,a
      000606 79 00            [12] 1759 	mov	r1,#0x00
      000608 7A 00            [12] 1760 	mov	r2,#0x00
      00060A                       1761 00109$:
      00060A C3               [12] 1762 	clr	c
      00060B E9               [12] 1763 	mov	a,r1
      00060C 9E               [12] 1764 	subb	a,r6
      00060D EA               [12] 1765 	mov	a,r2
      00060E 64 80            [12] 1766 	xrl	a,#0x80
      000610 8F F0            [24] 1767 	mov	b,r7
      000612 63 F0 80         [24] 1768 	xrl	b,#0x80
      000615 95 F0            [12] 1769 	subb	a,b
      000617 50 37            [24] 1770 	jnc	00107$
                                   1771 ;	SPI.c:307: SPI_send(*data_ptr); // Send data
      000619 8B 82            [24] 1772 	mov	dpl,r3
      00061B 8C 83            [24] 1773 	mov	dph,r4
      00061D 8D F0            [24] 1774 	mov	b,r5
      00061F 12r00r00         [24] 1775 	lcall	__gptrget
      000622 F8               [12] 1776 	mov	r0,a
      000623 A3               [24] 1777 	inc	dptr
      000624 AB 82            [24] 1778 	mov	r3,dpl
      000626 AC 83            [24] 1779 	mov	r4,dph
      000628 88 82            [24] 1780 	mov	dpl, r0
      00062A C0 07            [24] 1781 	push	ar7
      00062C C0 06            [24] 1782 	push	ar6
      00062E C0 05            [24] 1783 	push	ar5
      000630 C0 04            [24] 1784 	push	ar4
      000632 C0 03            [24] 1785 	push	ar3
      000634 C0 02            [24] 1786 	push	ar2
      000636 C0 01            [24] 1787 	push	ar1
      000638 12r00rE4         [24] 1788 	lcall	_SPI_send
      00063B D0 01            [24] 1789 	pop	ar1
      00063D D0 02            [24] 1790 	pop	ar2
      00063F D0 03            [24] 1791 	pop	ar3
      000641 D0 04            [24] 1792 	pop	ar4
      000643 D0 05            [24] 1793 	pop	ar5
      000645 D0 06            [24] 1794 	pop	ar6
      000647 D0 07            [24] 1795 	pop	ar7
                                   1796 ;	SPI.c:308: data_ptr++;
                                   1797 ;	SPI.c:305: for (int i = 0; i < num_bytes; i++) {
      000649 09               [12] 1798 	inc	r1
      00064A B9 00 BD         [24] 1799 	cjne	r1,#0x00,00109$
      00064D 0A               [12] 1800 	inc	r2
      00064E 80 BA            [24] 1801 	sjmp	00109$
      000650                       1802 00107$:
                                   1803 ;	SPI.c:310: CS_HIGH; // Pull CS High
                                   1804 ;	assignBit
      000650 D2 91            [12] 1805 	setb	_P1_1
                                   1806 ;	SPI.c:311: }
      000652 22               [24] 1807 	ret
                                   1808 	.area CSEG    (CODE)
                                   1809 	.area CONST   (CODE)
                                   1810 	.area CONST   (CODE)
      000000                       1811 ___str_0:
      000000 77 72 6F 6E 67 20 62  1812 	.ascii "wrong bank"
             61 6E 6B
      00000A 00                    1813 	.db 0x00
                                   1814 	.area CSEG    (CODE)
                                   1815 	.area CONST   (CODE)
      00000B                       1816 ___str_1:
      00000B 0A                    1817 	.db 0x0a
      00000C 0D                    1818 	.db 0x0d
      00000D 49 6E 76 61 6C 69 64  1819 	.ascii "Invalid address: MAC register address range [0, 0x1F]"
             20 61 64 64 72 65 73
             73 3A 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 72 61 6E 67
             65 20 5B 30 2C 20 30
             78 31 46 5D
      000042 0A                    1820 	.db 0x0a
      000043 0D                    1821 	.db 0x0d
      000044 00                    1822 	.db 0x00
                                   1823 	.area CSEG    (CODE)
                                   1824 	.area CONST   (CODE)
      000045                       1825 ___str_2:
      000045 50 48 59 20 57 72 69  1826 	.ascii "PHY Write: Address 0x%02X, Data 0x%04X"
             74 65 3A 20 41 64 64
             72 65 73 73 20 30 78
             25 30 32 58 2C 20 44
             61 74 61 20 30 78 25
             30 34 58
      00006B 0A                    1827 	.db 0x0a
      00006C 0D                    1828 	.db 0x0d
      00006D 00                    1829 	.db 0x00
                                   1830 	.area CSEG    (CODE)
                                   1831 	.area CONST   (CODE)
      00006E                       1832 ___str_3:
      00006E 0A                    1833 	.db 0x0a
      00006F 0D                    1834 	.db 0x0d
      000070 49 6E 76 61 6C 69 64  1835 	.ascii "Invalid Buffer Address or Size: Start 0x%04X, Size 0x%04X"
             20 42 75 66 66 65 72
             20 41 64 64 72 65 73
             73 20 6F 72 20 53 69
             7A 65 3A 20 53 74 61
             72 74 20 30 78 25 30
             34 58 2C 20 53 69 7A
             65 20 30 78 25 30 34
             58
      0000A9 0A                    1836 	.db 0x0a
      0000AA 0D                    1837 	.db 0x0d
      0000AB 00                    1838 	.db 0x00
                                   1839 	.area CSEG    (CODE)
                                   1840 	.area CONST   (CODE)
      0000AC                       1841 ___str_4:
      0000AC 0A                    1842 	.db 0x0a
      0000AD 0D                    1843 	.db 0x0d
      0000AE 42 75 66 66 65 72 20  1844 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      0000DA 0A                    1845 	.db 0x0a
      0000DB 0D                    1846 	.db 0x0d
      0000DC 00                    1847 	.db 0x00
                                   1848 	.area CSEG    (CODE)
                                   1849 	.area CONST   (CODE)
      0000DD                       1850 ___str_5:
      0000DD 0A                    1851 	.db 0x0a
      0000DE 0D                    1852 	.db 0x0d
      0000DF 49 6E 76 61 6C 69 64  1853 	.ascii "Invalid number of bytes: %d"
             20 6E 75 6D 62 65 72
             20 6F 66 20 62 79 74
             65 73 3A 20 25 64
      0000FA 0A                    1854 	.db 0x0a
      0000FB 0D                    1855 	.db 0x0d
      0000FC 00                    1856 	.db 0x00
                                   1857 	.area CSEG    (CODE)
                                   1858 	.area CONST   (CODE)
      0000FD                       1859 ___str_6:
      0000FD 0A                    1860 	.db 0x0a
      0000FE 0D                    1861 	.db 0x0d
      0000FF 49 6E 76 61 6C 69 64  1862 	.ascii "Invalid address: %04X"
             20 61 64 64 72 65 73
             73 3A 20 25 30 34 58
      000114 0A                    1863 	.db 0x0a
      000115 0D                    1864 	.db 0x0d
      000116 00                    1865 	.db 0x00
                                   1866 	.area CSEG    (CODE)
                                   1867 	.area CONST   (CODE)
      000117                       1868 ___str_7:
      000117 0A                    1869 	.db 0x0a
      000118 49 6E 76 61 6C 69 64  1870 	.ascii "Invalid RX Address: Start 0x%04X, Size %d"
             20 52 58 20 41 64 64
             72 65 73 73 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 53
             69 7A 65 20 25 64
      000141 0A                    1871 	.db 0x0a
      000142 00                    1872 	.db 0x00
                                   1873 	.area CSEG    (CODE)
                                   1874 	.area CONST   (CODE)
      000143                       1875 ___str_8:
      000143 52 65 61 64 69 6E 67  1876 	.ascii "Reading %d bytes from buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 66 72 6F 6D
             20 62 75 66 66 65 72
             20 73 74 61 72 74 69
             6E 67 20 61 74 20 61
             64 64 72 65 73 73 20
             30 78 25 30 34 58 3A
      00017B 0A                    1877 	.db 0x0a
      00017C 0D                    1878 	.db 0x0d
      00017D 00                    1879 	.db 0x00
                                   1880 	.area CSEG    (CODE)
                                   1881 	.area XINIT   (CODE)
                                   1882 	.area CABS    (ABS,CODE)
