                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module SPI
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _printf
                                     12 	.globl _TF1
                                     13 	.globl _TR1
                                     14 	.globl _TF0
                                     15 	.globl _TR0
                                     16 	.globl _IE1
                                     17 	.globl _IT1
                                     18 	.globl _IE0
                                     19 	.globl _IT0
                                     20 	.globl _SM0
                                     21 	.globl _SM1
                                     22 	.globl _SM2
                                     23 	.globl _REN
                                     24 	.globl _TB8
                                     25 	.globl _RB8
                                     26 	.globl _TI
                                     27 	.globl _RI
                                     28 	.globl _CY
                                     29 	.globl _AC
                                     30 	.globl _F0
                                     31 	.globl _RS1
                                     32 	.globl _RS0
                                     33 	.globl _OV
                                     34 	.globl _F1
                                     35 	.globl _P
                                     36 	.globl _RD
                                     37 	.globl _WR
                                     38 	.globl _T1
                                     39 	.globl _T0
                                     40 	.globl _INT1
                                     41 	.globl _INT0
                                     42 	.globl _TXD0
                                     43 	.globl _TXD
                                     44 	.globl _RXD0
                                     45 	.globl _RXD
                                     46 	.globl _P3_7
                                     47 	.globl _P3_6
                                     48 	.globl _P3_5
                                     49 	.globl _P3_4
                                     50 	.globl _P3_3
                                     51 	.globl _P3_2
                                     52 	.globl _P3_1
                                     53 	.globl _P3_0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _P1_7
                                     63 	.globl _P1_6
                                     64 	.globl _P1_5
                                     65 	.globl _P1_4
                                     66 	.globl _P1_3
                                     67 	.globl _P1_2
                                     68 	.globl _P1_1
                                     69 	.globl _P1_0
                                     70 	.globl _P0_7
                                     71 	.globl _P0_6
                                     72 	.globl _P0_5
                                     73 	.globl _P0_4
                                     74 	.globl _P0_3
                                     75 	.globl _P0_2
                                     76 	.globl _P0_1
                                     77 	.globl _P0_0
                                     78 	.globl _PS
                                     79 	.globl _PT1
                                     80 	.globl _PX1
                                     81 	.globl _PT0
                                     82 	.globl _PX0
                                     83 	.globl _EA
                                     84 	.globl _ES
                                     85 	.globl _ET1
                                     86 	.globl _EX1
                                     87 	.globl _ET0
                                     88 	.globl _EX0
                                     89 	.globl _BREG_F7
                                     90 	.globl _BREG_F6
                                     91 	.globl _BREG_F5
                                     92 	.globl _BREG_F4
                                     93 	.globl _BREG_F3
                                     94 	.globl _BREG_F2
                                     95 	.globl _BREG_F1
                                     96 	.globl _BREG_F0
                                     97 	.globl _P5_7
                                     98 	.globl _P5_6
                                     99 	.globl _P5_5
                                    100 	.globl _P5_4
                                    101 	.globl _P5_3
                                    102 	.globl _P5_2
                                    103 	.globl _P5_1
                                    104 	.globl _P5_0
                                    105 	.globl _P4_7
                                    106 	.globl _P4_6
                                    107 	.globl _P4_5
                                    108 	.globl _P4_4
                                    109 	.globl _P4_3
                                    110 	.globl _P4_2
                                    111 	.globl _P4_1
                                    112 	.globl _P4_0
                                    113 	.globl _PX0L
                                    114 	.globl _PT0L
                                    115 	.globl _PX1L
                                    116 	.globl _PT1L
                                    117 	.globl _PSL
                                    118 	.globl _PT2L
                                    119 	.globl _PPCL
                                    120 	.globl _EC
                                    121 	.globl _CCF0
                                    122 	.globl _CCF1
                                    123 	.globl _CCF2
                                    124 	.globl _CCF3
                                    125 	.globl _CCF4
                                    126 	.globl _CR
                                    127 	.globl _CF
                                    128 	.globl _TF2
                                    129 	.globl _EXF2
                                    130 	.globl _RCLK
                                    131 	.globl _TCLK
                                    132 	.globl _EXEN2
                                    133 	.globl _TR2
                                    134 	.globl _C_T2
                                    135 	.globl _CP_RL2
                                    136 	.globl _T2CON_7
                                    137 	.globl _T2CON_6
                                    138 	.globl _T2CON_5
                                    139 	.globl _T2CON_4
                                    140 	.globl _T2CON_3
                                    141 	.globl _T2CON_2
                                    142 	.globl _T2CON_1
                                    143 	.globl _T2CON_0
                                    144 	.globl _PT2
                                    145 	.globl _ET2
                                    146 	.globl _TMOD
                                    147 	.globl _TL1
                                    148 	.globl _TL0
                                    149 	.globl _TH1
                                    150 	.globl _TH0
                                    151 	.globl _TCON
                                    152 	.globl _SP
                                    153 	.globl _SCON
                                    154 	.globl _SBUF0
                                    155 	.globl _SBUF
                                    156 	.globl _PSW
                                    157 	.globl _PCON
                                    158 	.globl _P3
                                    159 	.globl _P2
                                    160 	.globl _P1
                                    161 	.globl _P0
                                    162 	.globl _IP
                                    163 	.globl _IE
                                    164 	.globl _DP0L
                                    165 	.globl _DPL
                                    166 	.globl _DP0H
                                    167 	.globl _DPH
                                    168 	.globl _B
                                    169 	.globl _ACC
                                    170 	.globl _EECON
                                    171 	.globl _KBF
                                    172 	.globl _KBE
                                    173 	.globl _KBLS
                                    174 	.globl _BRL
                                    175 	.globl _BDRCON
                                    176 	.globl _T2MOD
                                    177 	.globl _SPDAT
                                    178 	.globl _SPSTA
                                    179 	.globl _SPCON
                                    180 	.globl _SADEN
                                    181 	.globl _SADDR
                                    182 	.globl _WDTPRG
                                    183 	.globl _WDTRST
                                    184 	.globl _P5
                                    185 	.globl _P4
                                    186 	.globl _IPH1
                                    187 	.globl _IPL1
                                    188 	.globl _IPH0
                                    189 	.globl _IPL0
                                    190 	.globl _IEN1
                                    191 	.globl _IEN0
                                    192 	.globl _CMOD
                                    193 	.globl _CL
                                    194 	.globl _CH
                                    195 	.globl _CCON
                                    196 	.globl _CCAPM4
                                    197 	.globl _CCAPM3
                                    198 	.globl _CCAPM2
                                    199 	.globl _CCAPM1
                                    200 	.globl _CCAPM0
                                    201 	.globl _CCAP4L
                                    202 	.globl _CCAP3L
                                    203 	.globl _CCAP2L
                                    204 	.globl _CCAP1L
                                    205 	.globl _CCAP0L
                                    206 	.globl _CCAP4H
                                    207 	.globl _CCAP3H
                                    208 	.globl _CCAP2H
                                    209 	.globl _CCAP1H
                                    210 	.globl _CCAP0H
                                    211 	.globl _CKCON1
                                    212 	.globl _CKCON0
                                    213 	.globl _CKRL
                                    214 	.globl _AUXR1
                                    215 	.globl _AUXR
                                    216 	.globl _TH2
                                    217 	.globl _TL2
                                    218 	.globl _RCAP2H
                                    219 	.globl _RCAP2L
                                    220 	.globl _T2CON
                                    221 	.globl _spi_buffer_write_PARM_3
                                    222 	.globl _spi_buffer_write_PARM_2
                                    223 	.globl _spi_buffer_read_PARM_3
                                    224 	.globl _spi_buffer_read_PARM_2
                                    225 	.globl _buffer_init_PARM_2
                                    226 	.globl _mac_spi_read_PARM_2
                                    227 	.globl _phy_spi_write_PARM_2
                                    228 	.globl _eth_spi_read_PARM_2
                                    229 	.globl _spi_control_write_PARM_3
                                    230 	.globl _spi_control_write_PARM_2
                                    231 	.globl _SPI_ReadByte
                                    232 	.globl _spi_set_autoinc
                                    233 	.globl _select_reg_bank
                                    234 	.globl _spi_control_write
                                    235 	.globl _configure_SPI
                                    236 	.globl _SPI_send
                                    237 	.globl _enc_reset
                                    238 	.globl _eth_spi_read
                                    239 	.globl _phy_spi_write
                                    240 	.globl _mac_spi_read
                                    241 	.globl _phy_spi_read
                                    242 	.globl _busy_wait
                                    243 	.globl _buffer_init
                                    244 	.globl _spi_buffer_read
                                    245 	.globl _spi_buffer_write
                                    246 ;--------------------------------------------------------
                                    247 ; special function registers
                                    248 ;--------------------------------------------------------
                                    249 	.area RSEG    (ABS,DATA)
      000000                        250 	.org 0x0000
                           0000C8   251 _T2CON	=	0x00c8
                           0000CA   252 _RCAP2L	=	0x00ca
                           0000CB   253 _RCAP2H	=	0x00cb
                           0000CC   254 _TL2	=	0x00cc
                           0000CD   255 _TH2	=	0x00cd
                           00008E   256 _AUXR	=	0x008e
                           0000A2   257 _AUXR1	=	0x00a2
                           000097   258 _CKRL	=	0x0097
                           00008F   259 _CKCON0	=	0x008f
                           0000AF   260 _CKCON1	=	0x00af
                           0000FA   261 _CCAP0H	=	0x00fa
                           0000FB   262 _CCAP1H	=	0x00fb
                           0000FC   263 _CCAP2H	=	0x00fc
                           0000FD   264 _CCAP3H	=	0x00fd
                           0000FE   265 _CCAP4H	=	0x00fe
                           0000EA   266 _CCAP0L	=	0x00ea
                           0000EB   267 _CCAP1L	=	0x00eb
                           0000EC   268 _CCAP2L	=	0x00ec
                           0000ED   269 _CCAP3L	=	0x00ed
                           0000EE   270 _CCAP4L	=	0x00ee
                           0000DA   271 _CCAPM0	=	0x00da
                           0000DB   272 _CCAPM1	=	0x00db
                           0000DC   273 _CCAPM2	=	0x00dc
                           0000DD   274 _CCAPM3	=	0x00dd
                           0000DE   275 _CCAPM4	=	0x00de
                           0000D8   276 _CCON	=	0x00d8
                           0000F9   277 _CH	=	0x00f9
                           0000E9   278 _CL	=	0x00e9
                           0000D9   279 _CMOD	=	0x00d9
                           0000A8   280 _IEN0	=	0x00a8
                           0000B1   281 _IEN1	=	0x00b1
                           0000B8   282 _IPL0	=	0x00b8
                           0000B7   283 _IPH0	=	0x00b7
                           0000B2   284 _IPL1	=	0x00b2
                           0000B3   285 _IPH1	=	0x00b3
                           0000C0   286 _P4	=	0x00c0
                           0000E8   287 _P5	=	0x00e8
                           0000A6   288 _WDTRST	=	0x00a6
                           0000A7   289 _WDTPRG	=	0x00a7
                           0000A9   290 _SADDR	=	0x00a9
                           0000B9   291 _SADEN	=	0x00b9
                           0000C3   292 _SPCON	=	0x00c3
                           0000C4   293 _SPSTA	=	0x00c4
                           0000C5   294 _SPDAT	=	0x00c5
                           0000C9   295 _T2MOD	=	0x00c9
                           00009B   296 _BDRCON	=	0x009b
                           00009A   297 _BRL	=	0x009a
                           00009C   298 _KBLS	=	0x009c
                           00009D   299 _KBE	=	0x009d
                           00009E   300 _KBF	=	0x009e
                           0000D2   301 _EECON	=	0x00d2
                           0000E0   302 _ACC	=	0x00e0
                           0000F0   303 _B	=	0x00f0
                           000083   304 _DPH	=	0x0083
                           000083   305 _DP0H	=	0x0083
                           000082   306 _DPL	=	0x0082
                           000082   307 _DP0L	=	0x0082
                           0000A8   308 _IE	=	0x00a8
                           0000B8   309 _IP	=	0x00b8
                           000080   310 _P0	=	0x0080
                           000090   311 _P1	=	0x0090
                           0000A0   312 _P2	=	0x00a0
                           0000B0   313 _P3	=	0x00b0
                           000087   314 _PCON	=	0x0087
                           0000D0   315 _PSW	=	0x00d0
                           000099   316 _SBUF	=	0x0099
                           000099   317 _SBUF0	=	0x0099
                           000098   318 _SCON	=	0x0098
                           000081   319 _SP	=	0x0081
                           000088   320 _TCON	=	0x0088
                           00008C   321 _TH0	=	0x008c
                           00008D   322 _TH1	=	0x008d
                           00008A   323 _TL0	=	0x008a
                           00008B   324 _TL1	=	0x008b
                           000089   325 _TMOD	=	0x0089
                                    326 ;--------------------------------------------------------
                                    327 ; special function bits
                                    328 ;--------------------------------------------------------
                                    329 	.area RSEG    (ABS,DATA)
      000000                        330 	.org 0x0000
                           0000AD   331 _ET2	=	0x00ad
                           0000BD   332 _PT2	=	0x00bd
                           0000C8   333 _T2CON_0	=	0x00c8
                           0000C9   334 _T2CON_1	=	0x00c9
                           0000CA   335 _T2CON_2	=	0x00ca
                           0000CB   336 _T2CON_3	=	0x00cb
                           0000CC   337 _T2CON_4	=	0x00cc
                           0000CD   338 _T2CON_5	=	0x00cd
                           0000CE   339 _T2CON_6	=	0x00ce
                           0000CF   340 _T2CON_7	=	0x00cf
                           0000C8   341 _CP_RL2	=	0x00c8
                           0000C9   342 _C_T2	=	0x00c9
                           0000CA   343 _TR2	=	0x00ca
                           0000CB   344 _EXEN2	=	0x00cb
                           0000CC   345 _TCLK	=	0x00cc
                           0000CD   346 _RCLK	=	0x00cd
                           0000CE   347 _EXF2	=	0x00ce
                           0000CF   348 _TF2	=	0x00cf
                           0000DF   349 _CF	=	0x00df
                           0000DE   350 _CR	=	0x00de
                           0000DC   351 _CCF4	=	0x00dc
                           0000DB   352 _CCF3	=	0x00db
                           0000DA   353 _CCF2	=	0x00da
                           0000D9   354 _CCF1	=	0x00d9
                           0000D8   355 _CCF0	=	0x00d8
                           0000AE   356 _EC	=	0x00ae
                           0000BE   357 _PPCL	=	0x00be
                           0000BD   358 _PT2L	=	0x00bd
                           0000BC   359 _PSL	=	0x00bc
                           0000BB   360 _PT1L	=	0x00bb
                           0000BA   361 _PX1L	=	0x00ba
                           0000B9   362 _PT0L	=	0x00b9
                           0000B8   363 _PX0L	=	0x00b8
                           0000C0   364 _P4_0	=	0x00c0
                           0000C1   365 _P4_1	=	0x00c1
                           0000C2   366 _P4_2	=	0x00c2
                           0000C3   367 _P4_3	=	0x00c3
                           0000C4   368 _P4_4	=	0x00c4
                           0000C5   369 _P4_5	=	0x00c5
                           0000C6   370 _P4_6	=	0x00c6
                           0000C7   371 _P4_7	=	0x00c7
                           0000E8   372 _P5_0	=	0x00e8
                           0000E9   373 _P5_1	=	0x00e9
                           0000EA   374 _P5_2	=	0x00ea
                           0000EB   375 _P5_3	=	0x00eb
                           0000EC   376 _P5_4	=	0x00ec
                           0000ED   377 _P5_5	=	0x00ed
                           0000EE   378 _P5_6	=	0x00ee
                           0000EF   379 _P5_7	=	0x00ef
                           0000F0   380 _BREG_F0	=	0x00f0
                           0000F1   381 _BREG_F1	=	0x00f1
                           0000F2   382 _BREG_F2	=	0x00f2
                           0000F3   383 _BREG_F3	=	0x00f3
                           0000F4   384 _BREG_F4	=	0x00f4
                           0000F5   385 _BREG_F5	=	0x00f5
                           0000F6   386 _BREG_F6	=	0x00f6
                           0000F7   387 _BREG_F7	=	0x00f7
                           0000A8   388 _EX0	=	0x00a8
                           0000A9   389 _ET0	=	0x00a9
                           0000AA   390 _EX1	=	0x00aa
                           0000AB   391 _ET1	=	0x00ab
                           0000AC   392 _ES	=	0x00ac
                           0000AF   393 _EA	=	0x00af
                           0000B8   394 _PX0	=	0x00b8
                           0000B9   395 _PT0	=	0x00b9
                           0000BA   396 _PX1	=	0x00ba
                           0000BB   397 _PT1	=	0x00bb
                           0000BC   398 _PS	=	0x00bc
                           000080   399 _P0_0	=	0x0080
                           000081   400 _P0_1	=	0x0081
                           000082   401 _P0_2	=	0x0082
                           000083   402 _P0_3	=	0x0083
                           000084   403 _P0_4	=	0x0084
                           000085   404 _P0_5	=	0x0085
                           000086   405 _P0_6	=	0x0086
                           000087   406 _P0_7	=	0x0087
                           000090   407 _P1_0	=	0x0090
                           000091   408 _P1_1	=	0x0091
                           000092   409 _P1_2	=	0x0092
                           000093   410 _P1_3	=	0x0093
                           000094   411 _P1_4	=	0x0094
                           000095   412 _P1_5	=	0x0095
                           000096   413 _P1_6	=	0x0096
                           000097   414 _P1_7	=	0x0097
                           0000A0   415 _P2_0	=	0x00a0
                           0000A1   416 _P2_1	=	0x00a1
                           0000A2   417 _P2_2	=	0x00a2
                           0000A3   418 _P2_3	=	0x00a3
                           0000A4   419 _P2_4	=	0x00a4
                           0000A5   420 _P2_5	=	0x00a5
                           0000A6   421 _P2_6	=	0x00a6
                           0000A7   422 _P2_7	=	0x00a7
                           0000B0   423 _P3_0	=	0x00b0
                           0000B1   424 _P3_1	=	0x00b1
                           0000B2   425 _P3_2	=	0x00b2
                           0000B3   426 _P3_3	=	0x00b3
                           0000B4   427 _P3_4	=	0x00b4
                           0000B5   428 _P3_5	=	0x00b5
                           0000B6   429 _P3_6	=	0x00b6
                           0000B7   430 _P3_7	=	0x00b7
                           0000B0   431 _RXD	=	0x00b0
                           0000B0   432 _RXD0	=	0x00b0
                           0000B1   433 _TXD	=	0x00b1
                           0000B1   434 _TXD0	=	0x00b1
                           0000B2   435 _INT0	=	0x00b2
                           0000B3   436 _INT1	=	0x00b3
                           0000B4   437 _T0	=	0x00b4
                           0000B5   438 _T1	=	0x00b5
                           0000B6   439 _WR	=	0x00b6
                           0000B7   440 _RD	=	0x00b7
                           0000D0   441 _P	=	0x00d0
                           0000D1   442 _F1	=	0x00d1
                           0000D2   443 _OV	=	0x00d2
                           0000D3   444 _RS0	=	0x00d3
                           0000D4   445 _RS1	=	0x00d4
                           0000D5   446 _F0	=	0x00d5
                           0000D6   447 _AC	=	0x00d6
                           0000D7   448 _CY	=	0x00d7
                           000098   449 _RI	=	0x0098
                           000099   450 _TI	=	0x0099
                           00009A   451 _RB8	=	0x009a
                           00009B   452 _TB8	=	0x009b
                           00009C   453 _REN	=	0x009c
                           00009D   454 _SM2	=	0x009d
                           00009E   455 _SM1	=	0x009e
                           00009F   456 _SM0	=	0x009f
                           000088   457 _IT0	=	0x0088
                           000089   458 _IE0	=	0x0089
                           00008A   459 _IT1	=	0x008a
                           00008B   460 _IE1	=	0x008b
                           00008C   461 _TR0	=	0x008c
                           00008D   462 _TF0	=	0x008d
                           00008E   463 _TR1	=	0x008e
                           00008F   464 _TF1	=	0x008f
                                    465 ;--------------------------------------------------------
                                    466 ; overlayable register banks
                                    467 ;--------------------------------------------------------
                                    468 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        469 	.ds 8
                                    470 ;--------------------------------------------------------
                                    471 ; internal ram data
                                    472 ;--------------------------------------------------------
                                    473 	.area DSEG    (DATA)
                                    474 ;--------------------------------------------------------
                                    475 ; overlayable items in internal ram
                                    476 ;--------------------------------------------------------
                                    477 ;--------------------------------------------------------
                                    478 ; indirectly addressable internal ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area ISEG    (DATA)
                                    481 ;--------------------------------------------------------
                                    482 ; absolute internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area IABS    (ABS,DATA)
                                    485 	.area IABS    (ABS,DATA)
                                    486 ;--------------------------------------------------------
                                    487 ; bit data
                                    488 ;--------------------------------------------------------
                                    489 	.area BSEG    (BIT)
                                    490 ;--------------------------------------------------------
                                    491 ; paged external ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area PSEG    (PAG,XDATA)
                                    494 ;--------------------------------------------------------
                                    495 ; uninitialized external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area XSEG    (XDATA)
      000000                        498 _SPI_ReadByte_received_data_10000_68:
      000000                        499 	.ds 1
      000001                        500 _select_reg_bank_bank_10000_72:
      000001                        501 	.ds 1
      000002                        502 _select_reg_bank_data_10001_74:
      000002                        503 	.ds 1
      000003                        504 _spi_control_write_PARM_2:
      000003                        505 	.ds 1
      000004                        506 _spi_control_write_PARM_3:
      000004                        507 	.ds 1
      000005                        508 _spi_control_write_reg_bank_10000_77:
      000005                        509 	.ds 1
      000006                        510 _SPI_send_data_10000_81:
      000006                        511 	.ds 1
      000007                        512 _eth_spi_read_PARM_2:
      000007                        513 	.ds 1
      000008                        514 _eth_spi_read_addr_10000_86:
      000008                        515 	.ds 1
      000009                        516 _phy_spi_write_PARM_2:
      000009                        517 	.ds 2
      00000B                        518 _phy_spi_write_addr_10000_90:
      00000B                        519 	.ds 1
      00000C                        520 _mac_spi_read_PARM_2:
      00000C                        521 	.ds 1
      00000D                        522 _mac_spi_read_addr_10000_92:
      00000D                        523 	.ds 1
      00000E                        524 _phy_spi_read_addr_10000_96:
      00000E                        525 	.ds 1
      00000F                        526 _busy_wait_data_10000_100:
      00000F                        527 	.ds 1
      000010                        528 _buffer_init_PARM_2:
      000010                        529 	.ds 2
      000012                        530 _buffer_init_start_address_10000_102:
      000012                        531 	.ds 2
      000014                        532 _spi_buffer_read_PARM_2:
      000014                        533 	.ds 2
      000016                        534 _spi_buffer_read_PARM_3:
      000016                        535 	.ds 3
      000019                        536 _spi_buffer_read_num_bytes_10000_106:
      000019                        537 	.ds 2
      00001B                        538 _spi_buffer_read_i_20002_113:
      00001B                        539 	.ds 2
      00001D                        540 _spi_buffer_write_PARM_2:
      00001D                        541 	.ds 2
      00001F                        542 _spi_buffer_write_PARM_3:
      00001F                        543 	.ds 3
      000022                        544 _spi_buffer_write_num_bytes_10000_115:
      000022                        545 	.ds 2
      000024                        546 _spi_buffer_write_i_20002_122:
      000024                        547 	.ds 2
                                    548 ;--------------------------------------------------------
                                    549 ; absolute external ram data
                                    550 ;--------------------------------------------------------
                                    551 	.area XABS    (ABS,XDATA)
                                    552 ;--------------------------------------------------------
                                    553 ; initialized external ram data
                                    554 ;--------------------------------------------------------
                                    555 	.area XISEG   (XDATA)
                                    556 	.area HOME    (CODE)
                                    557 	.area GSINIT0 (CODE)
                                    558 	.area GSINIT1 (CODE)
                                    559 	.area GSINIT2 (CODE)
                                    560 	.area GSINIT3 (CODE)
                                    561 	.area GSINIT4 (CODE)
                                    562 	.area GSINIT5 (CODE)
                                    563 	.area GSINIT  (CODE)
                                    564 	.area GSFINAL (CODE)
                                    565 	.area CSEG    (CODE)
                                    566 ;--------------------------------------------------------
                                    567 ; global & static initialisations
                                    568 ;--------------------------------------------------------
                                    569 	.area HOME    (CODE)
                                    570 	.area GSINIT  (CODE)
                                    571 	.area GSFINAL (CODE)
                                    572 	.area GSINIT  (CODE)
                                    573 ;--------------------------------------------------------
                                    574 ; Home
                                    575 ;--------------------------------------------------------
                                    576 	.area HOME    (CODE)
                                    577 	.area HOME    (CODE)
                                    578 ;--------------------------------------------------------
                                    579 ; code
                                    580 ;--------------------------------------------------------
                                    581 	.area CSEG    (CODE)
                                    582 ;------------------------------------------------------------
                                    583 ;Allocation info for local variables in function 'SPI_ReadByte'
                                    584 ;------------------------------------------------------------
                                    585 ;received_data             Allocated with name '_SPI_ReadByte_received_data_10000_68'
                                    586 ;------------------------------------------------------------
                                    587 ;	SPI.c:4: uint8_t SPI_ReadByte(void)
                                    588 ;	-----------------------------------------
                                    589 ;	 function SPI_ReadByte
                                    590 ;	-----------------------------------------
      000000                        591 _SPI_ReadByte:
                           000007   592 	ar7 = 0x07
                           000006   593 	ar6 = 0x06
                           000005   594 	ar5 = 0x05
                           000004   595 	ar4 = 0x04
                           000003   596 	ar3 = 0x03
                           000002   597 	ar2 = 0x02
                           000001   598 	ar1 = 0x01
                           000000   599 	ar0 = 0x00
                                    600 ;	SPI.c:9: SPDAT = 0xFF;
      000000 75 C5 FF         [24]  601 	mov	_SPDAT,#0xff
                                    602 ;	SPI.c:12: while (!(SPSTA & 0x80)) {
      000003                        603 00101$:
      000003 E5 C4            [12]  604 	mov	a,_SPSTA
      000005 30 E7 FB         [24]  605 	jnb	acc.7,00101$
                                    606 ;	SPI.c:17: received_data = SPDAT;
      000008 90r00r00         [24]  607 	mov	dptr,#_SPI_ReadByte_received_data_10000_68
      00000B E5 C5            [12]  608 	mov	a,_SPDAT
      00000D F0               [24]  609 	movx	@dptr,a
                                    610 ;	SPI.c:19: return received_data;
      00000E E0               [24]  611 	movx	a,@dptr
                                    612 ;	SPI.c:20: }
      00000F F5 82            [12]  613 	mov	dpl,a
      000011 22               [24]  614 	ret
                                    615 ;------------------------------------------------------------
                                    616 ;Allocation info for local variables in function 'spi_set_autoinc'
                                    617 ;------------------------------------------------------------
                                    618 ;	SPI.c:22: void spi_set_autoinc(void)
                                    619 ;	-----------------------------------------
                                    620 ;	 function spi_set_autoinc
                                    621 ;	-----------------------------------------
      000012                        622 _spi_set_autoinc:
                                    623 ;	SPI.c:24: CS_LOW;                          // Pull CS low to select the ENC28J60
                                    624 ;	assignBit
      000012 C2 91            [12]  625 	clr	_P1_1
                                    626 ;	SPI.c:26: SPI_send(0x5E);                  // Write ECON2 register address
      000014 75 82 5E         [24]  627 	mov	dpl, #0x5e
      000017 12r01r13         [24]  628 	lcall	_SPI_send
                                    629 ;	SPI.c:27: SPI_send(0x80);                  // Set the AUTOINC bit
      00001A 75 82 80         [24]  630 	mov	dpl, #0x80
      00001D 12r01r13         [24]  631 	lcall	_SPI_send
                                    632 ;	SPI.c:29: CS_HIGH;                         // Pull CS high to deselect the ENC28J60
                                    633 ;	assignBit
      000020 D2 91            [12]  634 	setb	_P1_1
                                    635 ;	SPI.c:30: }
      000022 22               [24]  636 	ret
                                    637 ;------------------------------------------------------------
                                    638 ;Allocation info for local variables in function 'select_reg_bank'
                                    639 ;------------------------------------------------------------
                                    640 ;bank                      Allocated with name '_select_reg_bank_bank_10000_72'
                                    641 ;data                      Allocated with name '_select_reg_bank_data_10001_74'
                                    642 ;i                         Allocated with name '_select_reg_bank_i_20001_76'
                                    643 ;------------------------------------------------------------
                                    644 ;	SPI.c:33: void select_reg_bank(uint8_t bank)
                                    645 ;	-----------------------------------------
                                    646 ;	 function select_reg_bank
                                    647 ;	-----------------------------------------
      000023                        648 _select_reg_bank:
      000023 E5 82            [12]  649 	mov	a,dpl
      000025 90r00r01         [24]  650 	mov	dptr,#_select_reg_bank_bank_10000_72
      000028 F0               [24]  651 	movx	@dptr,a
                                    652 ;	SPI.c:35: CS_LOW;
                                    653 ;	assignBit
      000029 C2 91            [12]  654 	clr	_P1_1
                                    655 ;	SPI.c:36: SPI_send(0X1F); // Send the address
      00002B 75 82 1F         [24]  656 	mov	dpl, #0x1f
      00002E 12r01r13         [24]  657 	lcall	_SPI_send
                                    658 ;	SPI.c:37: uint8_t data = SPI_ReadByte(); // Read the data
      000031 12r00r00         [24]  659 	lcall	_SPI_ReadByte
      000034 AF 82            [24]  660 	mov	r7, dpl
                                    661 ;	SPI.c:38: CS_HIGH;
                                    662 ;	assignBit
      000036 D2 91            [12]  663 	setb	_P1_1
                                    664 ;	SPI.c:41: data &= ~0x03; // Clear the last two bits
      000038 53 07 FC         [24]  665 	anl	ar7,#0xfc
                                    666 ;	SPI.c:42: switch (bank)
      00003B 90r00r01         [24]  667 	mov	dptr,#_select_reg_bank_bank_10000_72
      00003E E0               [24]  668 	movx	a,@dptr
      00003F FE               [12]  669 	mov  r6,a
      000040 24 FC            [12]  670 	add	a,#0xff - 0x03
      000042 40 30            [24]  671 	jc	00105$
      000044 EE               [12]  672 	mov	a,r6
      000045 2E               [12]  673 	add	a,r6
                                    674 ;	SPI.c:44: case 0:
      000046 90r00r4A         [24]  675 	mov	dptr,#00133$
      000049 73               [24]  676 	jmp	@a+dptr
      00004A                        677 00133$:
      00004A 80 06            [24]  678 	sjmp	00101$
      00004C 80 0B            [24]  679 	sjmp	00102$
      00004E 80 12            [24]  680 	sjmp	00103$
      000050 80 19            [24]  681 	sjmp	00104$
      000052                        682 00101$:
                                    683 ;	SPI.c:45: data |= 0x00; // Last two bits: 00
      000052 90r00r02         [24]  684 	mov	dptr,#_select_reg_bank_data_10001_74
      000055 EF               [12]  685 	mov	a,r7
      000056 F0               [24]  686 	movx	@dptr,a
                                    687 ;	SPI.c:46: break;
                                    688 ;	SPI.c:47: case 1:
      000057 80 31            [24]  689 	sjmp	00115$
      000059                        690 00102$:
                                    691 ;	SPI.c:48: data |= 0x01; // Last two bits: 01
      000059 90r00r02         [24]  692 	mov	dptr,#_select_reg_bank_data_10001_74
      00005C 74 01            [12]  693 	mov	a,#0x01
      00005E 4F               [12]  694 	orl	a,r7
      00005F F0               [24]  695 	movx	@dptr,a
                                    696 ;	SPI.c:49: break;
                                    697 ;	SPI.c:50: case 2:
      000060 80 28            [24]  698 	sjmp	00115$
      000062                        699 00103$:
                                    700 ;	SPI.c:51: data |= 0x02; // Last two bits: 10
      000062 90r00r02         [24]  701 	mov	dptr,#_select_reg_bank_data_10001_74
      000065 74 02            [12]  702 	mov	a,#0x02
      000067 4F               [12]  703 	orl	a,r7
      000068 F0               [24]  704 	movx	@dptr,a
                                    705 ;	SPI.c:52: break;
                                    706 ;	SPI.c:53: case 3:
      000069 80 1F            [24]  707 	sjmp	00115$
      00006B                        708 00104$:
                                    709 ;	SPI.c:54: data |= 0x03; // Last two bits: 11
      00006B 90r00r02         [24]  710 	mov	dptr,#_select_reg_bank_data_10001_74
      00006E 74 03            [12]  711 	mov	a,#0x03
      000070 4F               [12]  712 	orl	a,r7
      000071 F0               [24]  713 	movx	@dptr,a
                                    714 ;	SPI.c:55: break;
                                    715 ;	SPI.c:56: default:
      000072 80 16            [24]  716 	sjmp	00115$
      000074                        717 00105$:
                                    718 ;	SPI.c:57: printf("wrong bank");
      000074 74r00            [12]  719 	mov	a,#___str_0
      000076 C0 E0            [24]  720 	push	acc
      000078 74s00            [12]  721 	mov	a,#(___str_0 >> 8)
      00007A C0 E0            [24]  722 	push	acc
      00007C 74 80            [12]  723 	mov	a,#0x80
      00007E C0 E0            [24]  724 	push	acc
      000080 12r00r00         [24]  725 	lcall	_printf
      000083 15 81            [12]  726 	dec	sp
      000085 15 81            [12]  727 	dec	sp
      000087 15 81            [12]  728 	dec	sp
                                    729 ;	SPI.c:58: return;
                                    730 ;	SPI.c:61: for (int i = 0; i < 16; i++); // Delay
      000089 22               [24]  731 	ret
      00008A                        732 00115$:
      00008A 7F 00            [12]  733 	mov	r7,#0x00
      00008C                        734 00109$:
      00008C BF 10 00         [24]  735 	cjne	r7,#0x10,00134$
      00008F                        736 00134$:
      00008F 50 03            [24]  737 	jnc	00107$
      000091 0F               [12]  738 	inc	r7
      000092 80 F8            [24]  739 	sjmp	00109$
      000094                        740 00107$:
                                    741 ;	SPI.c:63: CS_LOW;
                                    742 ;	assignBit
      000094 C2 91            [12]  743 	clr	_P1_1
                                    744 ;	SPI.c:64: SPI_send(0x5F);
      000096 75 82 5F         [24]  745 	mov	dpl, #0x5f
      000099 12r01r13         [24]  746 	lcall	_SPI_send
                                    747 ;	SPI.c:65: SPI_send(data); // Send the modified data
      00009C 90r00r02         [24]  748 	mov	dptr,#_select_reg_bank_data_10001_74
      00009F E0               [24]  749 	movx	a,@dptr
      0000A0 F5 82            [12]  750 	mov	dpl,a
      0000A2 12r01r13         [24]  751 	lcall	_SPI_send
                                    752 ;	SPI.c:66: CS_HIGH;
                                    753 ;	assignBit
      0000A5 D2 91            [12]  754 	setb	_P1_1
                                    755 ;	SPI.c:68: }
      0000A7 22               [24]  756 	ret
                                    757 ;------------------------------------------------------------
                                    758 ;Allocation info for local variables in function 'spi_control_write'
                                    759 ;------------------------------------------------------------
                                    760 ;addr                      Allocated with name '_spi_control_write_PARM_2'
                                    761 ;data                      Allocated with name '_spi_control_write_PARM_3'
                                    762 ;reg_bank                  Allocated with name '_spi_control_write_reg_bank_10000_77'
                                    763 ;opcode                    Allocated with name '_spi_control_write_opcode_10000_78'
                                    764 ;------------------------------------------------------------
                                    765 ;	SPI.c:69: void spi_control_write(uint8_t reg_bank, uint8_t addr, uint8_t data)
                                    766 ;	-----------------------------------------
                                    767 ;	 function spi_control_write
                                    768 ;	-----------------------------------------
      0000A8                        769 _spi_control_write:
      0000A8 E5 82            [12]  770 	mov	a,dpl
      0000AA 90r00r05         [24]  771 	mov	dptr,#_spi_control_write_reg_bank_10000_77
      0000AD F0               [24]  772 	movx	@dptr,a
                                    773 ;	SPI.c:72: addr = addr + opcode; // Add the opcode to the address
      0000AE 90r00r03         [24]  774 	mov	dptr,#_spi_control_write_PARM_2
      0000B1 E0               [24]  775 	movx	a,@dptr
      0000B2 24 40            [12]  776 	add	a, #0x40
      0000B4 F0               [24]  777 	movx	@dptr,a
                                    778 ;	SPI.c:74: select_reg_bank(reg_bank); // Function to select the register bank
      0000B5 90r00r05         [24]  779 	mov	dptr,#_spi_control_write_reg_bank_10000_77
      0000B8 E0               [24]  780 	movx	a,@dptr
      0000B9 F5 82            [12]  781 	mov	dpl,a
      0000BB 12r00r23         [24]  782 	lcall	_select_reg_bank
                                    783 ;	SPI.c:77: CS_LOW;
                                    784 ;	assignBit
      0000BE C2 91            [12]  785 	clr	_P1_1
                                    786 ;	SPI.c:80: SPI_send(addr);
      0000C0 90r00r03         [24]  787 	mov	dptr,#_spi_control_write_PARM_2
      0000C3 E0               [24]  788 	movx	a,@dptr
      0000C4 FF               [12]  789 	mov	r7,a
      0000C5 F5 82            [12]  790 	mov	dpl,a
      0000C7 C0 07            [24]  791 	push	ar7
      0000C9 12r01r13         [24]  792 	lcall	_SPI_send
      0000CC D0 07            [24]  793 	pop	ar7
                                    794 ;	SPI.c:83: SPI_send(data);
      0000CE 90r00r04         [24]  795 	mov	dptr,#_spi_control_write_PARM_3
      0000D1 E0               [24]  796 	movx	a,@dptr
      0000D2 FE               [12]  797 	mov	r6,a
      0000D3 F5 82            [12]  798 	mov	dpl,a
      0000D5 C0 07            [24]  799 	push	ar7
      0000D7 C0 06            [24]  800 	push	ar6
      0000D9 12r01r13         [24]  801 	lcall	_SPI_send
      0000DC D0 06            [24]  802 	pop	ar6
      0000DE D0 07            [24]  803 	pop	ar7
                                    804 ;	SPI.c:86: CS_HIGH;
                                    805 ;	assignBit
      0000E0 D2 91            [12]  806 	setb	_P1_1
                                    807 ;	SPI.c:89: printf("Write: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      0000E2 7D 00            [12]  808 	mov	r5,#0x00
      0000E4 7C 00            [12]  809 	mov	r4,#0x00
      0000E6 C0 06            [24]  810 	push	ar6
      0000E8 C0 05            [24]  811 	push	ar5
      0000EA C0 07            [24]  812 	push	ar7
      0000EC C0 04            [24]  813 	push	ar4
      0000EE 74r0B            [12]  814 	mov	a,#___str_1
      0000F0 C0 E0            [24]  815 	push	acc
      0000F2 74s00            [12]  816 	mov	a,#(___str_1 >> 8)
      0000F4 C0 E0            [24]  817 	push	acc
      0000F6 74 80            [12]  818 	mov	a,#0x80
      0000F8 C0 E0            [24]  819 	push	acc
      0000FA 12r00r00         [24]  820 	lcall	_printf
      0000FD E5 81            [12]  821 	mov	a,sp
      0000FF 24 F9            [12]  822 	add	a,#0xf9
      000101 F5 81            [12]  823 	mov	sp,a
                                    824 ;	SPI.c:90: }
      000103 22               [24]  825 	ret
                                    826 ;------------------------------------------------------------
                                    827 ;Allocation info for local variables in function 'configure_SPI'
                                    828 ;------------------------------------------------------------
                                    829 ;	SPI.c:93: void configure_SPI(void)
                                    830 ;	-----------------------------------------
                                    831 ;	 function configure_SPI
                                    832 ;	-----------------------------------------
      000104                        833 _configure_SPI:
                                    834 ;	SPI.c:95: CS_PIN = 1;
                                    835 ;	assignBit
      000104 D2 91            [12]  836 	setb	_P1_1
                                    837 ;	SPI.c:96: SPCON = 0x00;
      000106 75 C3 00         [24]  838 	mov	_SPCON,#0x00
                                    839 ;	SPI.c:97: SPCON |= SS_DISABLE;
      000109 43 C3 20         [24]  840 	orl	_SPCON,#0x20
                                    841 ;	SPI.c:98: SPCON |= MASTER_MODE;
      00010C 43 C3 10         [24]  842 	orl	_SPCON,#0x10
                                    843 ;	SPI.c:99: SPCON |= SPI_ENABLE;
      00010F 43 C3 40         [24]  844 	orl	_SPCON,#0x40
                                    845 ;	SPI.c:100: }
      000112 22               [24]  846 	ret
                                    847 ;------------------------------------------------------------
                                    848 ;Allocation info for local variables in function 'SPI_send'
                                    849 ;------------------------------------------------------------
                                    850 ;data                      Allocated with name '_SPI_send_data_10000_81'
                                    851 ;------------------------------------------------------------
                                    852 ;	SPI.c:103: void SPI_send(uint8_t data)
                                    853 ;	-----------------------------------------
                                    854 ;	 function SPI_send
                                    855 ;	-----------------------------------------
      000113                        856 _SPI_send:
      000113 E5 82            [12]  857 	mov	a,dpl
      000115 90r00r06         [24]  858 	mov	dptr,#_SPI_send_data_10000_81
      000118 F0               [24]  859 	movx	@dptr,a
                                    860 ;	SPI.c:106: SPDAT = data;           // Config + MSB of data
      000119 E0               [24]  861 	movx	a,@dptr
      00011A F5 C5            [12]  862 	mov	_SPDAT,a
                                    863 ;	SPI.c:108: while (!(SPSTA & 0x80))
      00011C                        864 00101$:
      00011C E5 C4            [12]  865 	mov	a,_SPSTA
      00011E 30 E7 FB         [24]  866 	jnb	acc.7,00101$
                                    867 ;	SPI.c:113: }
      000121 22               [24]  868 	ret
                                    869 ;------------------------------------------------------------
                                    870 ;Allocation info for local variables in function 'enc_reset'
                                    871 ;------------------------------------------------------------
                                    872 ;	SPI.c:115: void enc_reset(void)
                                    873 ;	-----------------------------------------
                                    874 ;	 function enc_reset
                                    875 ;	-----------------------------------------
      000122                        876 _enc_reset:
                                    877 ;	SPI.c:117: CS_LOW;                    // Pull CS low to select the ENC28J60
                                    878 ;	assignBit
      000122 C2 91            [12]  879 	clr	_P1_1
                                    880 ;	SPI.c:118: SPI_send(0xFF);            // Send reset command
      000124 75 82 FF         [24]  881 	mov	dpl, #0xff
      000127 12r01r13         [24]  882 	lcall	_SPI_send
                                    883 ;	SPI.c:119: CS_HIGH;                   // Pull CS high to deselect the ENC28J60
                                    884 ;	assignBit
      00012A D2 91            [12]  885 	setb	_P1_1
                                    886 ;	SPI.c:120: }
      00012C 22               [24]  887 	ret
                                    888 ;------------------------------------------------------------
                                    889 ;Allocation info for local variables in function 'eth_spi_read'
                                    890 ;------------------------------------------------------------
                                    891 ;bank                      Allocated with name '_eth_spi_read_PARM_2'
                                    892 ;addr                      Allocated with name '_eth_spi_read_addr_10000_86'
                                    893 ;data                      Allocated with name '_eth_spi_read_data_10001_89'
                                    894 ;------------------------------------------------------------
                                    895 ;	SPI.c:122: uint8_t eth_spi_read(uint8_t addr, uint8_t bank)
                                    896 ;	-----------------------------------------
                                    897 ;	 function eth_spi_read
                                    898 ;	-----------------------------------------
      00012D                        899 _eth_spi_read:
      00012D E5 82            [12]  900 	mov	a,dpl
      00012F 90r00r08         [24]  901 	mov	dptr,#_eth_spi_read_addr_10000_86
      000132 F0               [24]  902 	movx	@dptr,a
                                    903 ;	SPI.c:124: if (addr > 0x1F) {
      000133 E0               [24]  904 	movx	a,@dptr
      000134 FF               [12]  905 	mov  r7,a
      000135 24 E0            [12]  906 	add	a,#0xff - 0x1f
      000137 50 19            [24]  907 	jnc	00102$
                                    908 ;	SPI.c:125: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      000139 74r30            [12]  909 	mov	a,#___str_2
      00013B C0 E0            [24]  910 	push	acc
      00013D 74s00            [12]  911 	mov	a,#(___str_2 >> 8)
      00013F C0 E0            [24]  912 	push	acc
      000141 74 80            [12]  913 	mov	a,#0x80
      000143 C0 E0            [24]  914 	push	acc
      000145 12r00r00         [24]  915 	lcall	_printf
      000148 15 81            [12]  916 	dec	sp
      00014A 15 81            [12]  917 	dec	sp
      00014C 15 81            [12]  918 	dec	sp
                                    919 ;	SPI.c:126: return 0;
      00014E 75 82 00         [24]  920 	mov	dpl, #0x00
      000151 22               [24]  921 	ret
      000152                        922 00102$:
                                    923 ;	SPI.c:129: select_reg_bank(bank);     // Select the appropriate bank
      000152 90r00r07         [24]  924 	mov	dptr,#_eth_spi_read_PARM_2
      000155 E0               [24]  925 	movx	a,@dptr
      000156 F5 82            [12]  926 	mov	dpl,a
      000158 C0 07            [24]  927 	push	ar7
      00015A 12r00r23         [24]  928 	lcall	_select_reg_bank
      00015D D0 07            [24]  929 	pop	ar7
                                    930 ;	SPI.c:131: CS_LOW;                    // Pull CS low to start communication
                                    931 ;	assignBit
      00015F C2 91            [12]  932 	clr	_P1_1
                                    933 ;	SPI.c:132: SPI_send(addr);            // Send the address
      000161 8F 82            [24]  934 	mov	dpl, r7
      000163 C0 07            [24]  935 	push	ar7
      000165 12r01r13         [24]  936 	lcall	_SPI_send
                                    937 ;	SPI.c:133: uint8_t data = SPI_ReadByte(); // Read the data
      000168 12r00r00         [24]  938 	lcall	_SPI_ReadByte
      00016B AE 82            [24]  939 	mov	r6, dpl
      00016D D0 07            [24]  940 	pop	ar7
                                    941 ;	SPI.c:134: CS_HIGH;                   // Pull CS high to end communication
                                    942 ;	assignBit
      00016F D2 91            [12]  943 	setb	_P1_1
                                    944 ;	SPI.c:137: printf("Read: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      000171 8E 04            [24]  945 	mov	ar4,r6
      000173 7D 00            [12]  946 	mov	r5,#0x00
      000175 7B 00            [12]  947 	mov	r3,#0x00
      000177 C0 06            [24]  948 	push	ar6
      000179 C0 04            [24]  949 	push	ar4
      00017B C0 05            [24]  950 	push	ar5
      00017D C0 07            [24]  951 	push	ar7
      00017F C0 03            [24]  952 	push	ar3
      000181 74r6A            [12]  953 	mov	a,#___str_3
      000183 C0 E0            [24]  954 	push	acc
      000185 74s00            [12]  955 	mov	a,#(___str_3 >> 8)
      000187 C0 E0            [24]  956 	push	acc
      000189 74 80            [12]  957 	mov	a,#0x80
      00018B C0 E0            [24]  958 	push	acc
      00018D 12r00r00         [24]  959 	lcall	_printf
      000190 E5 81            [12]  960 	mov	a,sp
      000192 24 F9            [12]  961 	add	a,#0xf9
      000194 F5 81            [12]  962 	mov	sp,a
      000196 D0 06            [24]  963 	pop	ar6
                                    964 ;	SPI.c:139: return data;
      000198 8E 82            [24]  965 	mov	dpl, r6
                                    966 ;	SPI.c:140: }
      00019A 22               [24]  967 	ret
                                    968 ;------------------------------------------------------------
                                    969 ;Allocation info for local variables in function 'phy_spi_write'
                                    970 ;------------------------------------------------------------
                                    971 ;data                      Allocated with name '_phy_spi_write_PARM_2'
                                    972 ;addr                      Allocated with name '_phy_spi_write_addr_10000_90'
                                    973 ;------------------------------------------------------------
                                    974 ;	SPI.c:142: void phy_spi_write(uint8_t addr, uint16_t data)
                                    975 ;	-----------------------------------------
                                    976 ;	 function phy_spi_write
                                    977 ;	-----------------------------------------
      00019B                        978 _phy_spi_write:
      00019B E5 82            [12]  979 	mov	a,dpl
      00019D 90r00r0B         [24]  980 	mov	dptr,#_phy_spi_write_addr_10000_90
      0001A0 F0               [24]  981 	movx	@dptr,a
                                    982 ;	SPI.c:144: spi_control_write(2, 0x14, addr);                      // Write PHY address
      0001A1 E0               [24]  983 	movx	a,@dptr
      0001A2 FF               [12]  984 	mov	r7,a
      0001A3 90r00r03         [24]  985 	mov	dptr,#_spi_control_write_PARM_2
      0001A6 74 14            [12]  986 	mov	a,#0x14
      0001A8 F0               [24]  987 	movx	@dptr,a
      0001A9 90r00r04         [24]  988 	mov	dptr,#_spi_control_write_PARM_3
      0001AC EF               [12]  989 	mov	a,r7
      0001AD F0               [24]  990 	movx	@dptr,a
      0001AE 75 82 02         [24]  991 	mov	dpl, #0x02
      0001B1 C0 07            [24]  992 	push	ar7
      0001B3 12r00rA8         [24]  993 	lcall	_spi_control_write
      0001B6 D0 07            [24]  994 	pop	ar7
                                    995 ;	SPI.c:145: spi_control_write(2, 0x16, (uint8_t)(data & 0xFF));    // Write LSB of data
      0001B8 90r00r09         [24]  996 	mov	dptr,#_phy_spi_write_PARM_2
      0001BB E0               [24]  997 	movx	a,@dptr
      0001BC FD               [12]  998 	mov	r5,a
      0001BD A3               [24]  999 	inc	dptr
      0001BE E0               [24] 1000 	movx	a,@dptr
      0001BF FE               [12] 1001 	mov	r6,a
      0001C0 8D 04            [24] 1002 	mov	ar4,r5
      0001C2 90r00r03         [24] 1003 	mov	dptr,#_spi_control_write_PARM_2
      0001C5 74 16            [12] 1004 	mov	a,#0x16
      0001C7 F0               [24] 1005 	movx	@dptr,a
      0001C8 90r00r04         [24] 1006 	mov	dptr,#_spi_control_write_PARM_3
      0001CB EC               [12] 1007 	mov	a,r4
      0001CC F0               [24] 1008 	movx	@dptr,a
      0001CD 75 82 02         [24] 1009 	mov	dpl, #0x02
      0001D0 C0 07            [24] 1010 	push	ar7
      0001D2 C0 06            [24] 1011 	push	ar6
      0001D4 C0 05            [24] 1012 	push	ar5
      0001D6 12r00rA8         [24] 1013 	lcall	_spi_control_write
      0001D9 D0 05            [24] 1014 	pop	ar5
      0001DB D0 06            [24] 1015 	pop	ar6
      0001DD D0 07            [24] 1016 	pop	ar7
                                   1017 ;	SPI.c:146: spi_control_write(2, 0x17, (uint8_t)((data >> 8) & 0xFF)); // Write MSB of data
      0001DF 8E 04            [24] 1018 	mov	ar4,r6
      0001E1 90r00r03         [24] 1019 	mov	dptr,#_spi_control_write_PARM_2
      0001E4 74 17            [12] 1020 	mov	a,#0x17
      0001E6 F0               [24] 1021 	movx	@dptr,a
      0001E7 90r00r04         [24] 1022 	mov	dptr,#_spi_control_write_PARM_3
      0001EA EC               [12] 1023 	mov	a,r4
      0001EB F0               [24] 1024 	movx	@dptr,a
      0001EC 75 82 02         [24] 1025 	mov	dpl, #0x02
      0001EF C0 07            [24] 1026 	push	ar7
      0001F1 C0 06            [24] 1027 	push	ar6
      0001F3 C0 05            [24] 1028 	push	ar5
      0001F5 12r00rA8         [24] 1029 	lcall	_spi_control_write
      0001F8 D0 05            [24] 1030 	pop	ar5
      0001FA D0 06            [24] 1031 	pop	ar6
      0001FC D0 07            [24] 1032 	pop	ar7
                                   1033 ;	SPI.c:149: printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      0001FE 7C 00            [12] 1034 	mov	r4,#0x00
      000200 C0 05            [24] 1035 	push	ar5
      000202 C0 06            [24] 1036 	push	ar6
      000204 C0 07            [24] 1037 	push	ar7
      000206 C0 04            [24] 1038 	push	ar4
      000208 74r8E            [12] 1039 	mov	a,#___str_4
      00020A C0 E0            [24] 1040 	push	acc
      00020C 74s00            [12] 1041 	mov	a,#(___str_4 >> 8)
      00020E C0 E0            [24] 1042 	push	acc
      000210 74 80            [12] 1043 	mov	a,#0x80
      000212 C0 E0            [24] 1044 	push	acc
      000214 12r00r00         [24] 1045 	lcall	_printf
      000217 E5 81            [12] 1046 	mov	a,sp
      000219 24 F9            [12] 1047 	add	a,#0xf9
      00021B F5 81            [12] 1048 	mov	sp,a
                                   1049 ;	SPI.c:150: }
      00021D 22               [24] 1050 	ret
                                   1051 ;------------------------------------------------------------
                                   1052 ;Allocation info for local variables in function 'mac_spi_read'
                                   1053 ;------------------------------------------------------------
                                   1054 ;bank                      Allocated with name '_mac_spi_read_PARM_2'
                                   1055 ;addr                      Allocated with name '_mac_spi_read_addr_10000_92'
                                   1056 ;data                      Allocated with name '_mac_spi_read_data_10001_95'
                                   1057 ;------------------------------------------------------------
                                   1058 ;	SPI.c:152: uint8_t mac_spi_read(uint8_t addr, uint8_t bank)
                                   1059 ;	-----------------------------------------
                                   1060 ;	 function mac_spi_read
                                   1061 ;	-----------------------------------------
      00021E                       1062 _mac_spi_read:
      00021E E5 82            [12] 1063 	mov	a,dpl
      000220 90r00r0D         [24] 1064 	mov	dptr,#_mac_spi_read_addr_10000_92
      000223 F0               [24] 1065 	movx	@dptr,a
                                   1066 ;	SPI.c:154: if (addr > 0x1F) {
      000224 E0               [24] 1067 	movx	a,@dptr
      000225 FF               [12] 1068 	mov  r7,a
      000226 24 E0            [12] 1069 	add	a,#0xff - 0x1f
      000228 50 19            [24] 1070 	jnc	00102$
                                   1071 ;	SPI.c:155: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      00022A 74r30            [12] 1072 	mov	a,#___str_2
      00022C C0 E0            [24] 1073 	push	acc
      00022E 74s00            [12] 1074 	mov	a,#(___str_2 >> 8)
      000230 C0 E0            [24] 1075 	push	acc
      000232 74 80            [12] 1076 	mov	a,#0x80
      000234 C0 E0            [24] 1077 	push	acc
      000236 12r00r00         [24] 1078 	lcall	_printf
      000239 15 81            [12] 1079 	dec	sp
      00023B 15 81            [12] 1080 	dec	sp
      00023D 15 81            [12] 1081 	dec	sp
                                   1082 ;	SPI.c:156: return 0; // Return 0 if address is invalid
      00023F 75 82 00         [24] 1083 	mov	dpl, #0x00
      000242 22               [24] 1084 	ret
      000243                       1085 00102$:
                                   1086 ;	SPI.c:159: select_reg_bank(bank); // Select the appropriate register bank
      000243 90r00r0C         [24] 1087 	mov	dptr,#_mac_spi_read_PARM_2
      000246 E0               [24] 1088 	movx	a,@dptr
      000247 F5 82            [12] 1089 	mov	dpl,a
      000249 C0 07            [24] 1090 	push	ar7
      00024B 12r00r23         [24] 1091 	lcall	_select_reg_bank
      00024E D0 07            [24] 1092 	pop	ar7
                                   1093 ;	SPI.c:162: CS_LOW;
                                   1094 ;	assignBit
      000250 C2 91            [12] 1095 	clr	_P1_1
                                   1096 ;	SPI.c:165: SPI_send(addr);
      000252 8F 82            [24] 1097 	mov	dpl, r7
      000254 C0 07            [24] 1098 	push	ar7
      000256 12r01r13         [24] 1099 	lcall	_SPI_send
                                   1100 ;	SPI.c:168: uint8_t data = SPI_ReadByte();
      000259 12r00r00         [24] 1101 	lcall	_SPI_ReadByte
      00025C AE 82            [24] 1102 	mov	r6, dpl
      00025E D0 07            [24] 1103 	pop	ar7
                                   1104 ;	SPI.c:171: CS_HIGH;
                                   1105 ;	assignBit
      000260 D2 91            [12] 1106 	setb	_P1_1
                                   1107 ;	SPI.c:174: printf("Read: Address 0x%02X, Data 0x%02X\n", addr, data);
      000262 8E 04            [24] 1108 	mov	ar4,r6
      000264 7D 00            [12] 1109 	mov	r5,#0x00
      000266 7B 00            [12] 1110 	mov	r3,#0x00
      000268 C0 06            [24] 1111 	push	ar6
      00026A C0 04            [24] 1112 	push	ar4
      00026C C0 05            [24] 1113 	push	ar5
      00026E C0 07            [24] 1114 	push	ar7
      000270 C0 03            [24] 1115 	push	ar3
      000272 74rB7            [12] 1116 	mov	a,#___str_5
      000274 C0 E0            [24] 1117 	push	acc
      000276 74s00            [12] 1118 	mov	a,#(___str_5 >> 8)
      000278 C0 E0            [24] 1119 	push	acc
      00027A 74 80            [12] 1120 	mov	a,#0x80
      00027C C0 E0            [24] 1121 	push	acc
      00027E 12r00r00         [24] 1122 	lcall	_printf
      000281 E5 81            [12] 1123 	mov	a,sp
      000283 24 F9            [12] 1124 	add	a,#0xf9
      000285 F5 81            [12] 1125 	mov	sp,a
      000287 D0 06            [24] 1126 	pop	ar6
                                   1127 ;	SPI.c:176: return data;
      000289 8E 82            [24] 1128 	mov	dpl, r6
                                   1129 ;	SPI.c:177: }
      00028B 22               [24] 1130 	ret
                                   1131 ;------------------------------------------------------------
                                   1132 ;Allocation info for local variables in function 'phy_spi_read'
                                   1133 ;------------------------------------------------------------
                                   1134 ;addr                      Allocated with name '_phy_spi_read_addr_10000_96'
                                   1135 ;data_LSB                  Allocated with name '_phy_spi_read_data_LSB_10001_98'
                                   1136 ;data_MSB                  Allocated with name '_phy_spi_read_data_MSB_10001_98'
                                   1137 ;data                      Allocated with name '_phy_spi_read_data_10001_98'
                                   1138 ;------------------------------------------------------------
                                   1139 ;	SPI.c:180: uint16_t phy_spi_read(uint8_t addr)
                                   1140 ;	-----------------------------------------
                                   1141 ;	 function phy_spi_read
                                   1142 ;	-----------------------------------------
      00028C                       1143 _phy_spi_read:
      00028C E5 82            [12] 1144 	mov	a,dpl
      00028E 90r00r0E         [24] 1145 	mov	dptr,#_phy_spi_read_addr_10000_96
      000291 F0               [24] 1146 	movx	@dptr,a
                                   1147 ;	SPI.c:182: spi_control_write(2, 0x14, addr);     // Write PHY address
      000292 E0               [24] 1148 	movx	a,@dptr
      000293 FF               [12] 1149 	mov	r7,a
      000294 90r00r03         [24] 1150 	mov	dptr,#_spi_control_write_PARM_2
      000297 74 14            [12] 1151 	mov	a,#0x14
      000299 F0               [24] 1152 	movx	@dptr,a
      00029A 90r00r04         [24] 1153 	mov	dptr,#_spi_control_write_PARM_3
      00029D EF               [12] 1154 	mov	a,r7
      00029E F0               [24] 1155 	movx	@dptr,a
      00029F 75 82 02         [24] 1156 	mov	dpl, #0x02
      0002A2 C0 07            [24] 1157 	push	ar7
      0002A4 12r00rA8         [24] 1158 	lcall	_spi_control_write
      0002A7 D0 07            [24] 1159 	pop	ar7
                                   1160 ;	SPI.c:183: spi_control_write(2, 0x12, 1);        // Set MICMD.MIIRD bit
      0002A9 90r00r03         [24] 1161 	mov	dptr,#_spi_control_write_PARM_2
      0002AC 74 12            [12] 1162 	mov	a,#0x12
      0002AE F0               [24] 1163 	movx	@dptr,a
      0002AF 90r00r04         [24] 1164 	mov	dptr,#_spi_control_write_PARM_3
      0002B2 74 01            [12] 1165 	mov	a,#0x01
      0002B4 F0               [24] 1166 	movx	@dptr,a
      0002B5 75 82 02         [24] 1167 	mov	dpl, #0x02
      0002B8 C0 07            [24] 1168 	push	ar7
      0002BA 12r00rA8         [24] 1169 	lcall	_spi_control_write
                                   1170 ;	SPI.c:185: busy_wait();                          // Wait for the read to complete
      0002BD 12r03r39         [24] 1171 	lcall	_busy_wait
      0002C0 D0 07            [24] 1172 	pop	ar7
                                   1173 ;	SPI.c:187: spi_control_write(2, 0x12, 0);        // Clear MICMD.MIIRD bit
      0002C2 90r00r03         [24] 1174 	mov	dptr,#_spi_control_write_PARM_2
      0002C5 74 12            [12] 1175 	mov	a,#0x12
      0002C7 F0               [24] 1176 	movx	@dptr,a
      0002C8 90r00r04         [24] 1177 	mov	dptr,#_spi_control_write_PARM_3
      0002CB E4               [12] 1178 	clr	a
      0002CC F0               [24] 1179 	movx	@dptr,a
      0002CD 75 82 02         [24] 1180 	mov	dpl, #0x02
      0002D0 C0 07            [24] 1181 	push	ar7
      0002D2 12r00rA8         [24] 1182 	lcall	_spi_control_write
      0002D5 D0 07            [24] 1183 	pop	ar7
                                   1184 ;	SPI.c:189: uint16_t data_LSB = mac_spi_read(0x18, 2); // Read LSB of data
      0002D7 90r00r0C         [24] 1185 	mov	dptr,#_mac_spi_read_PARM_2
      0002DA 74 02            [12] 1186 	mov	a,#0x02
      0002DC F0               [24] 1187 	movx	@dptr,a
      0002DD 75 82 18         [24] 1188 	mov	dpl, #0x18
      0002E0 C0 07            [24] 1189 	push	ar7
      0002E2 12r02r1E         [24] 1190 	lcall	_mac_spi_read
      0002E5 AE 82            [24] 1191 	mov	r6, dpl
      0002E7 D0 07            [24] 1192 	pop	ar7
      0002E9 7D 00            [12] 1193 	mov	r5,#0x00
                                   1194 ;	SPI.c:190: uint16_t data_MSB = mac_spi_read(0x19, 2); // Read MSB of data
      0002EB 90r00r0C         [24] 1195 	mov	dptr,#_mac_spi_read_PARM_2
      0002EE 74 02            [12] 1196 	mov	a,#0x02
      0002F0 F0               [24] 1197 	movx	@dptr,a
      0002F1 75 82 19         [24] 1198 	mov	dpl, #0x19
      0002F4 C0 07            [24] 1199 	push	ar7
      0002F6 C0 06            [24] 1200 	push	ar6
      0002F8 C0 05            [24] 1201 	push	ar5
      0002FA 12r02r1E         [24] 1202 	lcall	_mac_spi_read
      0002FD AC 82            [24] 1203 	mov	r4, dpl
      0002FF D0 05            [24] 1204 	pop	ar5
      000301 D0 06            [24] 1205 	pop	ar6
      000303 D0 07            [24] 1206 	pop	ar7
                                   1207 ;	SPI.c:192: uint16_t data = (data_MSB << 8) | data_LSB;        // Combine MSB and LSB
      000305 8C 03            [24] 1208 	mov	ar3,r4
      000307 E4               [12] 1209 	clr	a
      000308 42 06            [12] 1210 	orl	ar6,a
      00030A EB               [12] 1211 	mov	a,r3
      00030B 42 05            [12] 1212 	orl	ar5,a
                                   1213 ;	SPI.c:195: printf("PHY Read: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      00030D 7C 00            [12] 1214 	mov	r4,#0x00
      00030F C0 06            [24] 1215 	push	ar6
      000311 C0 05            [24] 1216 	push	ar5
      000313 C0 06            [24] 1217 	push	ar6
      000315 C0 05            [24] 1218 	push	ar5
      000317 C0 07            [24] 1219 	push	ar7
      000319 C0 04            [24] 1220 	push	ar4
      00031B 74rDA            [12] 1221 	mov	a,#___str_6
      00031D C0 E0            [24] 1222 	push	acc
      00031F 74s00            [12] 1223 	mov	a,#(___str_6 >> 8)
      000321 C0 E0            [24] 1224 	push	acc
      000323 74 80            [12] 1225 	mov	a,#0x80
      000325 C0 E0            [24] 1226 	push	acc
      000327 12r00r00         [24] 1227 	lcall	_printf
      00032A E5 81            [12] 1228 	mov	a,sp
      00032C 24 F9            [12] 1229 	add	a,#0xf9
      00032E F5 81            [12] 1230 	mov	sp,a
      000330 D0 05            [24] 1231 	pop	ar5
      000332 D0 06            [24] 1232 	pop	ar6
                                   1233 ;	SPI.c:197: return data;        // Combine MSB and LSB
      000334 8E 82            [24] 1234 	mov	dpl, r6
      000336 8D 83            [24] 1235 	mov	dph, r5
                                   1236 ;	SPI.c:198: }
      000338 22               [24] 1237 	ret
                                   1238 ;------------------------------------------------------------
                                   1239 ;Allocation info for local variables in function 'busy_wait'
                                   1240 ;------------------------------------------------------------
                                   1241 ;data                      Allocated with name '_busy_wait_data_10000_100'
                                   1242 ;------------------------------------------------------------
                                   1243 ;	SPI.c:200: void busy_wait(void)
                                   1244 ;	-----------------------------------------
                                   1245 ;	 function busy_wait
                                   1246 ;	-----------------------------------------
      000339                       1247 _busy_wait:
                                   1248 ;	SPI.c:202: uint8_t data = mac_spi_read(0x0A, 3); // Read ESTAT register (bank 3)
      000339 90r00r0C         [24] 1249 	mov	dptr,#_mac_spi_read_PARM_2
      00033C 74 03            [12] 1250 	mov	a,#0x03
      00033E F0               [24] 1251 	movx	@dptr,a
      00033F 75 82 0A         [24] 1252 	mov	dpl, #0x0a
      000342 12r02r1E         [24] 1253 	lcall	_mac_spi_read
      000345 E5 82            [12] 1254 	mov	a, dpl
      000347 90r00r0F         [24] 1255 	mov	dptr,#_busy_wait_data_10000_100
      00034A F0               [24] 1256 	movx	@dptr,a
                                   1257 ;	SPI.c:203: while (data & 0x01)
      00034B                       1258 00101$:
      00034B 90r00r0F         [24] 1259 	mov	dptr,#_busy_wait_data_10000_100
      00034E E0               [24] 1260 	movx	a,@dptr
      00034F 30 E0 14         [24] 1261 	jnb	acc.0,00104$
                                   1262 ;	SPI.c:205: data = mac_spi_read(0x0A, 3);
      000352 90r00r0C         [24] 1263 	mov	dptr,#_mac_spi_read_PARM_2
      000355 74 03            [12] 1264 	mov	a,#0x03
      000357 F0               [24] 1265 	movx	@dptr,a
      000358 75 82 0A         [24] 1266 	mov	dpl, #0x0a
      00035B 12r02r1E         [24] 1267 	lcall	_mac_spi_read
      00035E E5 82            [12] 1268 	mov	a, dpl
      000360 90r00r0F         [24] 1269 	mov	dptr,#_busy_wait_data_10000_100
      000363 F0               [24] 1270 	movx	@dptr,a
      000364 80 E5            [24] 1271 	sjmp	00101$
      000366                       1272 00104$:
                                   1273 ;	SPI.c:207: }
      000366 22               [24] 1274 	ret
                                   1275 ;------------------------------------------------------------
                                   1276 ;Allocation info for local variables in function 'buffer_init'
                                   1277 ;------------------------------------------------------------
                                   1278 ;size                      Allocated with name '_buffer_init_PARM_2'
                                   1279 ;start_address             Allocated with name '_buffer_init_start_address_10000_102'
                                   1280 ;erxst                     Allocated with name '_buffer_init_erxst_10001_105'
                                   1281 ;erxnd                     Allocated with name '_buffer_init_erxnd_10001_105'
                                   1282 ;------------------------------------------------------------
                                   1283 ;	SPI.c:209: void buffer_init(uint16_t start_address, uint16_t size)
                                   1284 ;	-----------------------------------------
                                   1285 ;	 function buffer_init
                                   1286 ;	-----------------------------------------
      000367                       1287 _buffer_init:
      000367 AF 83            [24] 1288 	mov	r7,dph
      000369 E5 82            [12] 1289 	mov	a,dpl
      00036B 90r00r12         [24] 1290 	mov	dptr,#_buffer_init_start_address_10000_102
      00036E F0               [24] 1291 	movx	@dptr,a
      00036F EF               [12] 1292 	mov	a,r7
      000370 A3               [24] 1293 	inc	dptr
      000371 F0               [24] 1294 	movx	@dptr,a
                                   1295 ;	SPI.c:211: if (start_address > 0x1FFF || (start_address + size) > 0x1FFF) {
      000372 90r00r12         [24] 1296 	mov	dptr,#_buffer_init_start_address_10000_102
      000375 E0               [24] 1297 	movx	a,@dptr
      000376 FE               [12] 1298 	mov	r6,a
      000377 A3               [24] 1299 	inc	dptr
      000378 E0               [24] 1300 	movx	a,@dptr
      000379 FF               [12] 1301 	mov	r7,a
      00037A 8E 04            [24] 1302 	mov	ar4,r6
      00037C 8F 05            [24] 1303 	mov	ar5,r7
      00037E C3               [12] 1304 	clr	c
      00037F 74 FF            [12] 1305 	mov	a,#0xff
      000381 9C               [12] 1306 	subb	a,r4
      000382 74 1F            [12] 1307 	mov	a,#0x1f
      000384 9D               [12] 1308 	subb	a,r5
      000385 40 17            [24] 1309 	jc	00101$
      000387 90r00r10         [24] 1310 	mov	dptr,#_buffer_init_PARM_2
      00038A E0               [24] 1311 	movx	a,@dptr
      00038B FA               [12] 1312 	mov	r2,a
      00038C A3               [24] 1313 	inc	dptr
      00038D E0               [24] 1314 	movx	a,@dptr
      00038E FB               [12] 1315 	mov	r3,a
      00038F EA               [12] 1316 	mov	a,r2
      000390 2E               [12] 1317 	add	a, r6
      000391 F8               [12] 1318 	mov	r0,a
      000392 EB               [12] 1319 	mov	a,r3
      000393 3F               [12] 1320 	addc	a, r7
      000394 F9               [12] 1321 	mov	r1,a
      000395 C3               [12] 1322 	clr	c
      000396 74 FF            [12] 1323 	mov	a,#0xff
      000398 98               [12] 1324 	subb	a,r0
      000399 74 1F            [12] 1325 	mov	a,#0x1f
      00039B 99               [12] 1326 	subb	a,r1
      00039C 50 2A            [24] 1327 	jnc	00102$
      00039E                       1328 00101$:
                                   1329 ;	SPI.c:212: printf("\n\rInvalid Buffer Address or Size: Start 0x%04X, Size 0x%04X\n\r", start_address, size);
      00039E 90r00r10         [24] 1330 	mov	dptr,#_buffer_init_PARM_2
      0003A1 E0               [24] 1331 	movx	a,@dptr
      0003A2 C0 E0            [24] 1332 	push	acc
      0003A4 A3               [24] 1333 	inc	dptr
      0003A5 E0               [24] 1334 	movx	a,@dptr
      0003A6 C0 E0            [24] 1335 	push	acc
      0003A8 90r00r12         [24] 1336 	mov	dptr,#_buffer_init_start_address_10000_102
      0003AB E0               [24] 1337 	movx	a,@dptr
      0003AC C0 E0            [24] 1338 	push	acc
      0003AE A3               [24] 1339 	inc	dptr
      0003AF E0               [24] 1340 	movx	a,@dptr
      0003B0 C0 E0            [24] 1341 	push	acc
      0003B2 74r02            [12] 1342 	mov	a,#___str_7
      0003B4 C0 E0            [24] 1343 	push	acc
      0003B6 74s01            [12] 1344 	mov	a,#(___str_7 >> 8)
      0003B8 C0 E0            [24] 1345 	push	acc
      0003BA 74 80            [12] 1346 	mov	a,#0x80
      0003BC C0 E0            [24] 1347 	push	acc
      0003BE 12r00r00         [24] 1348 	lcall	_printf
      0003C1 E5 81            [12] 1349 	mov	a,sp
      0003C3 24 F9            [12] 1350 	add	a,#0xf9
      0003C5 F5 81            [12] 1351 	mov	sp,a
                                   1352 ;	SPI.c:213: return;
      0003C7 22               [24] 1353 	ret
      0003C8                       1354 00102$:
                                   1355 ;	SPI.c:217: uint16_t erxst = start_address & ~1; // Make sure ERXST is even
      0003C8 53 04 FE         [24] 1356 	anl	ar4,#0xfe
                                   1357 ;	SPI.c:218: uint16_t erxnd = (start_address + size - 1) & ~1; // Make sure ERXND is even
      0003CB EA               [12] 1358 	mov	a,r2
      0003CC 2E               [12] 1359 	add	a, r6
      0003CD FE               [12] 1360 	mov	r6,a
      0003CE EB               [12] 1361 	mov	a,r3
      0003CF 3F               [12] 1362 	addc	a, r7
      0003D0 FF               [12] 1363 	mov	r7,a
      0003D1 1E               [12] 1364 	dec	r6
      0003D2 BE FF 01         [24] 1365 	cjne	r6,#0xff,00114$
      0003D5 1F               [12] 1366 	dec	r7
      0003D6                       1367 00114$:
      0003D6 53 06 FE         [24] 1368 	anl	ar6,#0xfe
                                   1369 ;	SPI.c:221: spi_control_write(0, 0x08, (uint8_t)(erxst >> 8)); // High byte of ERXST
      0003D9 8D 03            [24] 1370 	mov	ar3,r5
      0003DB 90r00r03         [24] 1371 	mov	dptr,#_spi_control_write_PARM_2
      0003DE 74 08            [12] 1372 	mov	a,#0x08
      0003E0 F0               [24] 1373 	movx	@dptr,a
      0003E1 90r00r04         [24] 1374 	mov	dptr,#_spi_control_write_PARM_3
      0003E4 EB               [12] 1375 	mov	a,r3
      0003E5 F0               [24] 1376 	movx	@dptr,a
      0003E6 75 82 00         [24] 1377 	mov	dpl, #0x00
      0003E9 C0 07            [24] 1378 	push	ar7
      0003EB C0 06            [24] 1379 	push	ar6
      0003ED C0 05            [24] 1380 	push	ar5
      0003EF C0 04            [24] 1381 	push	ar4
      0003F1 12r00rA8         [24] 1382 	lcall	_spi_control_write
      0003F4 D0 04            [24] 1383 	pop	ar4
      0003F6 D0 05            [24] 1384 	pop	ar5
      0003F8 D0 06            [24] 1385 	pop	ar6
      0003FA D0 07            [24] 1386 	pop	ar7
                                   1387 ;	SPI.c:222: spi_control_write(0, 0x09, (uint8_t)(erxst & 0xFF)); // Low byte of ERXST
      0003FC 8C 03            [24] 1388 	mov	ar3,r4
      0003FE 90r00r03         [24] 1389 	mov	dptr,#_spi_control_write_PARM_2
      000401 74 09            [12] 1390 	mov	a,#0x09
      000403 F0               [24] 1391 	movx	@dptr,a
      000404 90r00r04         [24] 1392 	mov	dptr,#_spi_control_write_PARM_3
      000407 EB               [12] 1393 	mov	a,r3
      000408 F0               [24] 1394 	movx	@dptr,a
      000409 75 82 00         [24] 1395 	mov	dpl, #0x00
      00040C C0 07            [24] 1396 	push	ar7
      00040E C0 06            [24] 1397 	push	ar6
      000410 C0 05            [24] 1398 	push	ar5
      000412 C0 04            [24] 1399 	push	ar4
      000414 12r00rA8         [24] 1400 	lcall	_spi_control_write
      000417 D0 04            [24] 1401 	pop	ar4
      000419 D0 05            [24] 1402 	pop	ar5
      00041B D0 06            [24] 1403 	pop	ar6
      00041D D0 07            [24] 1404 	pop	ar7
                                   1405 ;	SPI.c:225: spi_control_write(0, 0x0A, (uint8_t)(erxnd >> 8)); // High byte of ERXND
      00041F 8F 03            [24] 1406 	mov	ar3,r7
      000421 90r00r03         [24] 1407 	mov	dptr,#_spi_control_write_PARM_2
      000424 74 0A            [12] 1408 	mov	a,#0x0a
      000426 F0               [24] 1409 	movx	@dptr,a
      000427 90r00r04         [24] 1410 	mov	dptr,#_spi_control_write_PARM_3
      00042A EB               [12] 1411 	mov	a,r3
      00042B F0               [24] 1412 	movx	@dptr,a
      00042C 75 82 00         [24] 1413 	mov	dpl, #0x00
      00042F C0 07            [24] 1414 	push	ar7
      000431 C0 06            [24] 1415 	push	ar6
      000433 C0 05            [24] 1416 	push	ar5
      000435 C0 04            [24] 1417 	push	ar4
      000437 12r00rA8         [24] 1418 	lcall	_spi_control_write
      00043A D0 04            [24] 1419 	pop	ar4
      00043C D0 05            [24] 1420 	pop	ar5
      00043E D0 06            [24] 1421 	pop	ar6
      000440 D0 07            [24] 1422 	pop	ar7
                                   1423 ;	SPI.c:226: spi_control_write(0, 0x0B, (uint8_t)(erxnd & 0xFF)); // Low byte of ERXND
      000442 8E 03            [24] 1424 	mov	ar3,r6
      000444 90r00r03         [24] 1425 	mov	dptr,#_spi_control_write_PARM_2
      000447 74 0B            [12] 1426 	mov	a,#0x0b
      000449 F0               [24] 1427 	movx	@dptr,a
      00044A 90r00r04         [24] 1428 	mov	dptr,#_spi_control_write_PARM_3
      00044D EB               [12] 1429 	mov	a,r3
      00044E F0               [24] 1430 	movx	@dptr,a
      00044F 75 82 00         [24] 1431 	mov	dpl, #0x00
      000452 C0 07            [24] 1432 	push	ar7
      000454 C0 06            [24] 1433 	push	ar6
      000456 C0 05            [24] 1434 	push	ar5
      000458 C0 04            [24] 1435 	push	ar4
      00045A 12r00rA8         [24] 1436 	lcall	_spi_control_write
      00045D D0 04            [24] 1437 	pop	ar4
      00045F D0 05            [24] 1438 	pop	ar5
      000461 D0 06            [24] 1439 	pop	ar6
      000463 D0 07            [24] 1440 	pop	ar7
                                   1441 ;	SPI.c:228: printf("\n\rBuffer Initialized: Start 0x%04X, End 0x%04X\n\r", erxst, erxnd);
      000465 C0 06            [24] 1442 	push	ar6
      000467 C0 07            [24] 1443 	push	ar7
      000469 C0 04            [24] 1444 	push	ar4
      00046B C0 05            [24] 1445 	push	ar5
      00046D 74r40            [12] 1446 	mov	a,#___str_8
      00046F C0 E0            [24] 1447 	push	acc
      000471 74s01            [12] 1448 	mov	a,#(___str_8 >> 8)
      000473 C0 E0            [24] 1449 	push	acc
      000475 74 80            [12] 1450 	mov	a,#0x80
      000477 C0 E0            [24] 1451 	push	acc
      000479 12r00r00         [24] 1452 	lcall	_printf
      00047C E5 81            [12] 1453 	mov	a,sp
      00047E 24 F9            [12] 1454 	add	a,#0xf9
      000480 F5 81            [12] 1455 	mov	sp,a
                                   1456 ;	SPI.c:229: }
      000482 22               [24] 1457 	ret
                                   1458 ;------------------------------------------------------------
                                   1459 ;Allocation info for local variables in function 'spi_buffer_read'
                                   1460 ;------------------------------------------------------------
                                   1461 ;start_address             Allocated with name '_spi_buffer_read_PARM_2'
                                   1462 ;data_ptr                  Allocated with name '_spi_buffer_read_PARM_3'
                                   1463 ;num_bytes                 Allocated with name '_spi_buffer_read_num_bytes_10000_106'
                                   1464 ;higher_byte               Allocated with name '_spi_buffer_read_higher_byte_10001_111'
                                   1465 ;lower_byte                Allocated with name '_spi_buffer_read_lower_byte_10001_111'
                                   1466 ;opcode                    Allocated with name '_spi_buffer_read_opcode_10002_112'
                                   1467 ;i                         Allocated with name '_spi_buffer_read_i_20002_113'
                                   1468 ;------------------------------------------------------------
                                   1469 ;	SPI.c:232: void spi_buffer_read(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1470 ;	-----------------------------------------
                                   1471 ;	 function spi_buffer_read
                                   1472 ;	-----------------------------------------
      000483                       1473 _spi_buffer_read:
      000483 AF 83            [24] 1474 	mov	r7,dph
      000485 E5 82            [12] 1475 	mov	a,dpl
      000487 90r00r19         [24] 1476 	mov	dptr,#_spi_buffer_read_num_bytes_10000_106
      00048A F0               [24] 1477 	movx	@dptr,a
      00048B EF               [12] 1478 	mov	a,r7
      00048C A3               [24] 1479 	inc	dptr
      00048D F0               [24] 1480 	movx	@dptr,a
                                   1481 ;	SPI.c:234: if (num_bytes < 1) {
      00048E 90r00r19         [24] 1482 	mov	dptr,#_spi_buffer_read_num_bytes_10000_106
      000491 E0               [24] 1483 	movx	a,@dptr
      000492 FE               [12] 1484 	mov	r6,a
      000493 A3               [24] 1485 	inc	dptr
      000494 E0               [24] 1486 	movx	a,@dptr
      000495 FF               [12] 1487 	mov	r7,a
      000496 C3               [12] 1488 	clr	c
      000497 EE               [12] 1489 	mov	a,r6
      000498 94 01            [12] 1490 	subb	a,#0x01
      00049A EF               [12] 1491 	mov	a,r7
      00049B 64 80            [12] 1492 	xrl	a,#0x80
      00049D 94 80            [12] 1493 	subb	a,#0x80
      00049F 50 1A            [24] 1494 	jnc	00102$
                                   1495 ;	SPI.c:235: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      0004A1 C0 06            [24] 1496 	push	ar6
      0004A3 C0 07            [24] 1497 	push	ar7
      0004A5 74r71            [12] 1498 	mov	a,#___str_9
      0004A7 C0 E0            [24] 1499 	push	acc
      0004A9 74s01            [12] 1500 	mov	a,#(___str_9 >> 8)
      0004AB C0 E0            [24] 1501 	push	acc
      0004AD 74 80            [12] 1502 	mov	a,#0x80
      0004AF C0 E0            [24] 1503 	push	acc
      0004B1 12r00r00         [24] 1504 	lcall	_printf
      0004B4 E5 81            [12] 1505 	mov	a,sp
      0004B6 24 FB            [12] 1506 	add	a,#0xfb
      0004B8 F5 81            [12] 1507 	mov	sp,a
                                   1508 ;	SPI.c:236: return;
      0004BA 22               [24] 1509 	ret
      0004BB                       1510 00102$:
                                   1511 ;	SPI.c:238: if (start_address > 0x1FFF) {
      0004BB 90r00r14         [24] 1512 	mov	dptr,#_spi_buffer_read_PARM_2
      0004BE E0               [24] 1513 	movx	a,@dptr
      0004BF FC               [12] 1514 	mov	r4,a
      0004C0 A3               [24] 1515 	inc	dptr
      0004C1 E0               [24] 1516 	movx	a,@dptr
      0004C2 FD               [12] 1517 	mov	r5,a
      0004C3 8C 02            [24] 1518 	mov	ar2,r4
      0004C5 8D 03            [24] 1519 	mov	ar3,r5
      0004C7 C3               [12] 1520 	clr	c
      0004C8 74 FF            [12] 1521 	mov	a,#0xff
      0004CA 9A               [12] 1522 	subb	a,r2
      0004CB 74 1F            [12] 1523 	mov	a,#0x1f
      0004CD 9B               [12] 1524 	subb	a,r3
      0004CE 50 1A            [24] 1525 	jnc	00104$
                                   1526 ;	SPI.c:239: printf("\n\rInvalid address: %04X\n\r", start_address);
      0004D0 C0 04            [24] 1527 	push	ar4
      0004D2 C0 05            [24] 1528 	push	ar5
      0004D4 74r91            [12] 1529 	mov	a,#___str_10
      0004D6 C0 E0            [24] 1530 	push	acc
      0004D8 74s01            [12] 1531 	mov	a,#(___str_10 >> 8)
      0004DA C0 E0            [24] 1532 	push	acc
      0004DC 74 80            [12] 1533 	mov	a,#0x80
      0004DE C0 E0            [24] 1534 	push	acc
      0004E0 12r00r00         [24] 1535 	lcall	_printf
      0004E3 E5 81            [12] 1536 	mov	a,sp
      0004E5 24 FB            [12] 1537 	add	a,#0xfb
      0004E7 F5 81            [12] 1538 	mov	sp,a
                                   1539 ;	SPI.c:240: return;
      0004E9 22               [24] 1540 	ret
      0004EA                       1541 00104$:
                                   1542 ;	SPI.c:243: if (num_bytes > 1) {
      0004EA C3               [12] 1543 	clr	c
      0004EB 74 01            [12] 1544 	mov	a,#0x01
      0004ED 9E               [12] 1545 	subb	a,r6
      0004EE 74 80            [12] 1546 	mov	a,#(0x00 ^ 0x80)
      0004F0 8F F0            [24] 1547 	mov	b,r7
      0004F2 63 F0 80         [24] 1548 	xrl	b,#0x80
      0004F5 95 F0            [12] 1549 	subb	a,b
      0004F7 50 0B            [24] 1550 	jnc	00106$
                                   1551 ;	SPI.c:244: spi_set_autoinc();
      0004F9 C0 05            [24] 1552 	push	ar5
      0004FB C0 04            [24] 1553 	push	ar4
      0004FD 12r00r12         [24] 1554 	lcall	_spi_set_autoinc
      000500 D0 04            [24] 1555 	pop	ar4
      000502 D0 05            [24] 1556 	pop	ar5
      000504                       1557 00106$:
                                   1558 ;	SPI.c:248: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      000504 8D 07            [24] 1559 	mov	ar7,r5
                                   1560 ;	SPI.c:249: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      000506 8C 06            [24] 1561 	mov	ar6,r4
                                   1562 ;	SPI.c:251: spi_control_write(0, 0x01, higher_byte); // High byte
      000508 90r00r03         [24] 1563 	mov	dptr,#_spi_control_write_PARM_2
      00050B 74 01            [12] 1564 	mov	a,#0x01
      00050D F0               [24] 1565 	movx	@dptr,a
      00050E 90r00r04         [24] 1566 	mov	dptr,#_spi_control_write_PARM_3
      000511 EF               [12] 1567 	mov	a,r7
      000512 F0               [24] 1568 	movx	@dptr,a
      000513 75 82 00         [24] 1569 	mov	dpl, #0x00
      000516 C0 06            [24] 1570 	push	ar6
      000518 C0 05            [24] 1571 	push	ar5
      00051A C0 04            [24] 1572 	push	ar4
      00051C 12r00rA8         [24] 1573 	lcall	_spi_control_write
      00051F D0 04            [24] 1574 	pop	ar4
      000521 D0 05            [24] 1575 	pop	ar5
      000523 D0 06            [24] 1576 	pop	ar6
                                   1577 ;	SPI.c:252: spi_control_write(0, 0x00, lower_byte); // Low byte
      000525 90r00r03         [24] 1578 	mov	dptr,#_spi_control_write_PARM_2
      000528 E4               [12] 1579 	clr	a
      000529 F0               [24] 1580 	movx	@dptr,a
      00052A 90r00r04         [24] 1581 	mov	dptr,#_spi_control_write_PARM_3
      00052D EE               [12] 1582 	mov	a,r6
      00052E F0               [24] 1583 	movx	@dptr,a
      00052F 75 82 00         [24] 1584 	mov	dpl, #0x00
      000532 C0 05            [24] 1585 	push	ar5
      000534 C0 04            [24] 1586 	push	ar4
      000536 12r00rA8         [24] 1587 	lcall	_spi_control_write
                                   1588 ;	SPI.c:255: CS_LOW; // Pull CS Low
                                   1589 ;	assignBit
      000539 C2 91            [12] 1590 	clr	_P1_1
                                   1591 ;	SPI.c:256: SPI_send(opcode); // Send opcode
      00053B 75 82 3A         [24] 1592 	mov	dpl, #0x3a
      00053E 12r01r13         [24] 1593 	lcall	_SPI_send
      000541 D0 04            [24] 1594 	pop	ar4
      000543 D0 05            [24] 1595 	pop	ar5
                                   1596 ;	SPI.c:259: printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      000545 90r00r19         [24] 1597 	mov	dptr,#_spi_buffer_read_num_bytes_10000_106
      000548 E0               [24] 1598 	movx	a,@dptr
      000549 FE               [12] 1599 	mov	r6,a
      00054A A3               [24] 1600 	inc	dptr
      00054B E0               [24] 1601 	movx	a,@dptr
      00054C FF               [12] 1602 	mov	r7,a
      00054D C0 07            [24] 1603 	push	ar7
      00054F C0 06            [24] 1604 	push	ar6
      000551 C0 04            [24] 1605 	push	ar4
      000553 C0 05            [24] 1606 	push	ar5
      000555 C0 06            [24] 1607 	push	ar6
      000557 C0 07            [24] 1608 	push	ar7
      000559 74rAB            [12] 1609 	mov	a,#___str_11
      00055B C0 E0            [24] 1610 	push	acc
      00055D 74s01            [12] 1611 	mov	a,#(___str_11 >> 8)
      00055F C0 E0            [24] 1612 	push	acc
      000561 74 80            [12] 1613 	mov	a,#0x80
      000563 C0 E0            [24] 1614 	push	acc
      000565 12r00r00         [24] 1615 	lcall	_printf
      000568 E5 81            [12] 1616 	mov	a,sp
      00056A 24 F9            [12] 1617 	add	a,#0xf9
      00056C F5 81            [12] 1618 	mov	sp,a
      00056E D0 06            [24] 1619 	pop	ar6
      000570 D0 07            [24] 1620 	pop	ar7
                                   1621 ;	SPI.c:260: for (int i = 0; i < num_bytes; i++) {
      000572 90r00r1B         [24] 1622 	mov	dptr,#_spi_buffer_read_i_20002_113
      000575 E4               [12] 1623 	clr	a
      000576 F0               [24] 1624 	movx	@dptr,a
      000577 A3               [24] 1625 	inc	dptr
      000578 F0               [24] 1626 	movx	@dptr,a
      000579 90r00r16         [24] 1627 	mov	dptr,#_spi_buffer_read_PARM_3
      00057C E0               [24] 1628 	movx	a,@dptr
      00057D FB               [12] 1629 	mov	r3,a
      00057E A3               [24] 1630 	inc	dptr
      00057F E0               [24] 1631 	movx	a,@dptr
      000580 FC               [12] 1632 	mov	r4,a
      000581 A3               [24] 1633 	inc	dptr
      000582 E0               [24] 1634 	movx	a,@dptr
      000583 FD               [12] 1635 	mov	r5,a
      000584                       1636 00109$:
      000584 90r00r1B         [24] 1637 	mov	dptr,#_spi_buffer_read_i_20002_113
      000587 E0               [24] 1638 	movx	a,@dptr
      000588 F9               [12] 1639 	mov	r1,a
      000589 A3               [24] 1640 	inc	dptr
      00058A E0               [24] 1641 	movx	a,@dptr
      00058B FA               [12] 1642 	mov	r2,a
      00058C C3               [12] 1643 	clr	c
      00058D E9               [12] 1644 	mov	a,r1
      00058E 9E               [12] 1645 	subb	a,r6
      00058F EA               [12] 1646 	mov	a,r2
      000590 64 80            [12] 1647 	xrl	a,#0x80
      000592 8F F0            [24] 1648 	mov	b,r7
      000594 63 F0 80         [24] 1649 	xrl	b,#0x80
      000597 95 F0            [12] 1650 	subb	a,b
      000599 40 03            [24] 1651 	jc	00147$
      00059B 02r06r21         [24] 1652 	ljmp	00107$
      00059E                       1653 00147$:
                                   1654 ;	SPI.c:261: *data_ptr = SPI_ReadByte(); // Read data
      00059E C0 06            [24] 1655 	push	ar6
      0005A0 C0 07            [24] 1656 	push	ar7
      0005A2 C0 07            [24] 1657 	push	ar7
      0005A4 C0 06            [24] 1658 	push	ar6
      0005A6 C0 05            [24] 1659 	push	ar5
      0005A8 C0 04            [24] 1660 	push	ar4
      0005AA C0 03            [24] 1661 	push	ar3
      0005AC C0 02            [24] 1662 	push	ar2
      0005AE C0 01            [24] 1663 	push	ar1
      0005B0 12r00r00         [24] 1664 	lcall	_SPI_ReadByte
      0005B3 A8 82            [24] 1665 	mov	r0, dpl
      0005B5 D0 01            [24] 1666 	pop	ar1
      0005B7 D0 02            [24] 1667 	pop	ar2
      0005B9 D0 03            [24] 1668 	pop	ar3
      0005BB D0 04            [24] 1669 	pop	ar4
      0005BD D0 05            [24] 1670 	pop	ar5
      0005BF D0 06            [24] 1671 	pop	ar6
      0005C1 D0 07            [24] 1672 	pop	ar7
      0005C3 8B 82            [24] 1673 	mov	dpl,r3
      0005C5 8C 83            [24] 1674 	mov	dph,r4
      0005C7 8D F0            [24] 1675 	mov	b,r5
      0005C9 E8               [12] 1676 	mov	a,r0
      0005CA 12r00r00         [24] 1677 	lcall	__gptrput
      0005CD A3               [24] 1678 	inc	dptr
      0005CE AB 82            [24] 1679 	mov	r3,dpl
      0005D0 AC 83            [24] 1680 	mov	r4,dph
                                   1681 ;	SPI.c:262: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      0005D2 7F 00            [12] 1682 	mov	r7,#0x00
      0005D4 09               [12] 1683 	inc	r1
      0005D5 B9 00 01         [24] 1684 	cjne	r1,#0x00,00148$
      0005D8 0A               [12] 1685 	inc	r2
      0005D9                       1686 00148$:
      0005D9 C0 07            [24] 1687 	push	ar7
      0005DB C0 06            [24] 1688 	push	ar6
      0005DD C0 05            [24] 1689 	push	ar5
      0005DF C0 04            [24] 1690 	push	ar4
      0005E1 C0 03            [24] 1691 	push	ar3
      0005E3 C0 02            [24] 1692 	push	ar2
      0005E5 C0 01            [24] 1693 	push	ar1
      0005E7 C0 00            [24] 1694 	push	ar0
      0005E9 C0 07            [24] 1695 	push	ar7
      0005EB C0 01            [24] 1696 	push	ar1
      0005ED C0 02            [24] 1697 	push	ar2
      0005EF 74rE6            [12] 1698 	mov	a,#___str_12
      0005F1 C0 E0            [24] 1699 	push	acc
      0005F3 74s01            [12] 1700 	mov	a,#(___str_12 >> 8)
      0005F5 C0 E0            [24] 1701 	push	acc
      0005F7 74 80            [12] 1702 	mov	a,#0x80
      0005F9 C0 E0            [24] 1703 	push	acc
      0005FB 12r00r00         [24] 1704 	lcall	_printf
      0005FE E5 81            [12] 1705 	mov	a,sp
      000600 24 F9            [12] 1706 	add	a,#0xf9
      000602 F5 81            [12] 1707 	mov	sp,a
      000604 D0 01            [24] 1708 	pop	ar1
      000606 D0 02            [24] 1709 	pop	ar2
      000608 D0 03            [24] 1710 	pop	ar3
      00060A D0 04            [24] 1711 	pop	ar4
      00060C D0 05            [24] 1712 	pop	ar5
      00060E D0 06            [24] 1713 	pop	ar6
      000610 D0 07            [24] 1714 	pop	ar7
                                   1715 ;	SPI.c:263: data_ptr++;
                                   1716 ;	SPI.c:260: for (int i = 0; i < num_bytes; i++) {
      000612 90r00r1B         [24] 1717 	mov	dptr,#_spi_buffer_read_i_20002_113
      000615 E9               [12] 1718 	mov	a,r1
      000616 F0               [24] 1719 	movx	@dptr,a
      000617 EA               [12] 1720 	mov	a,r2
      000618 A3               [24] 1721 	inc	dptr
      000619 F0               [24] 1722 	movx	@dptr,a
      00061A D0 07            [24] 1723 	pop	ar7
      00061C D0 06            [24] 1724 	pop	ar6
      00061E 02r05r84         [24] 1725 	ljmp	00109$
      000621                       1726 00107$:
                                   1727 ;	SPI.c:265: CS_HIGH; // Pull CS High
                                   1728 ;	assignBit
      000621 D2 91            [12] 1729 	setb	_P1_1
                                   1730 ;	SPI.c:266: }
      000623 22               [24] 1731 	ret
                                   1732 ;------------------------------------------------------------
                                   1733 ;Allocation info for local variables in function 'spi_buffer_write'
                                   1734 ;------------------------------------------------------------
                                   1735 ;start_address             Allocated with name '_spi_buffer_write_PARM_2'
                                   1736 ;data_ptr                  Allocated with name '_spi_buffer_write_PARM_3'
                                   1737 ;num_bytes                 Allocated with name '_spi_buffer_write_num_bytes_10000_115'
                                   1738 ;higher_byte               Allocated with name '_spi_buffer_write_higher_byte_10001_120'
                                   1739 ;lower_byte                Allocated with name '_spi_buffer_write_lower_byte_10001_120'
                                   1740 ;opcode                    Allocated with name '_spi_buffer_write_opcode_10002_121'
                                   1741 ;i                         Allocated with name '_spi_buffer_write_i_20002_122'
                                   1742 ;------------------------------------------------------------
                                   1743 ;	SPI.c:269: void spi_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1744 ;	-----------------------------------------
                                   1745 ;	 function spi_buffer_write
                                   1746 ;	-----------------------------------------
      000624                       1747 _spi_buffer_write:
      000624 AF 83            [24] 1748 	mov	r7,dph
      000626 E5 82            [12] 1749 	mov	a,dpl
      000628 90r00r22         [24] 1750 	mov	dptr,#_spi_buffer_write_num_bytes_10000_115
      00062B F0               [24] 1751 	movx	@dptr,a
      00062C EF               [12] 1752 	mov	a,r7
      00062D A3               [24] 1753 	inc	dptr
      00062E F0               [24] 1754 	movx	@dptr,a
                                   1755 ;	SPI.c:271: if (num_bytes < 1)
      00062F 90r00r22         [24] 1756 	mov	dptr,#_spi_buffer_write_num_bytes_10000_115
      000632 E0               [24] 1757 	movx	a,@dptr
      000633 FE               [12] 1758 	mov	r6,a
      000634 A3               [24] 1759 	inc	dptr
      000635 E0               [24] 1760 	movx	a,@dptr
      000636 FF               [12] 1761 	mov	r7,a
      000637 C3               [12] 1762 	clr	c
      000638 EE               [12] 1763 	mov	a,r6
      000639 94 01            [12] 1764 	subb	a,#0x01
      00063B EF               [12] 1765 	mov	a,r7
      00063C 64 80            [12] 1766 	xrl	a,#0x80
      00063E 94 80            [12] 1767 	subb	a,#0x80
      000640 50 1A            [24] 1768 	jnc	00102$
                                   1769 ;	SPI.c:273: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      000642 C0 06            [24] 1770 	push	ar6
      000644 C0 07            [24] 1771 	push	ar7
      000646 74r71            [12] 1772 	mov	a,#___str_9
      000648 C0 E0            [24] 1773 	push	acc
      00064A 74s01            [12] 1774 	mov	a,#(___str_9 >> 8)
      00064C C0 E0            [24] 1775 	push	acc
      00064E 74 80            [12] 1776 	mov	a,#0x80
      000650 C0 E0            [24] 1777 	push	acc
      000652 12r00r00         [24] 1778 	lcall	_printf
      000655 E5 81            [12] 1779 	mov	a,sp
      000657 24 FB            [12] 1780 	add	a,#0xfb
      000659 F5 81            [12] 1781 	mov	sp,a
                                   1782 ;	SPI.c:274: return;
      00065B 22               [24] 1783 	ret
      00065C                       1784 00102$:
                                   1785 ;	SPI.c:276: if (start_address > 0x1FFF) {
      00065C 90r00r1D         [24] 1786 	mov	dptr,#_spi_buffer_write_PARM_2
      00065F E0               [24] 1787 	movx	a,@dptr
      000660 FC               [12] 1788 	mov	r4,a
      000661 A3               [24] 1789 	inc	dptr
      000662 E0               [24] 1790 	movx	a,@dptr
      000663 FD               [12] 1791 	mov	r5,a
      000664 8C 02            [24] 1792 	mov	ar2,r4
      000666 8D 03            [24] 1793 	mov	ar3,r5
      000668 C3               [12] 1794 	clr	c
      000669 74 FF            [12] 1795 	mov	a,#0xff
      00066B 9A               [12] 1796 	subb	a,r2
      00066C 74 1F            [12] 1797 	mov	a,#0x1f
      00066E 9B               [12] 1798 	subb	a,r3
      00066F 50 1A            [24] 1799 	jnc	00104$
                                   1800 ;	SPI.c:277: printf("\n\rInvalid address: %04X\n\r", start_address);
      000671 C0 04            [24] 1801 	push	ar4
      000673 C0 05            [24] 1802 	push	ar5
      000675 74r91            [12] 1803 	mov	a,#___str_10
      000677 C0 E0            [24] 1804 	push	acc
      000679 74s01            [12] 1805 	mov	a,#(___str_10 >> 8)
      00067B C0 E0            [24] 1806 	push	acc
      00067D 74 80            [12] 1807 	mov	a,#0x80
      00067F C0 E0            [24] 1808 	push	acc
      000681 12r00r00         [24] 1809 	lcall	_printf
      000684 E5 81            [12] 1810 	mov	a,sp
      000686 24 FB            [12] 1811 	add	a,#0xfb
      000688 F5 81            [12] 1812 	mov	sp,a
                                   1813 ;	SPI.c:278: return;
      00068A 22               [24] 1814 	ret
      00068B                       1815 00104$:
                                   1816 ;	SPI.c:282: if (num_bytes > 1) {
      00068B C3               [12] 1817 	clr	c
      00068C 74 01            [12] 1818 	mov	a,#0x01
      00068E 9E               [12] 1819 	subb	a,r6
      00068F 74 80            [12] 1820 	mov	a,#(0x00 ^ 0x80)
      000691 8F F0            [24] 1821 	mov	b,r7
      000693 63 F0 80         [24] 1822 	xrl	b,#0x80
      000696 95 F0            [12] 1823 	subb	a,b
      000698 50 0B            [24] 1824 	jnc	00106$
                                   1825 ;	SPI.c:283: spi_set_autoinc();
      00069A C0 05            [24] 1826 	push	ar5
      00069C C0 04            [24] 1827 	push	ar4
      00069E 12r00r12         [24] 1828 	lcall	_spi_set_autoinc
      0006A1 D0 04            [24] 1829 	pop	ar4
      0006A3 D0 05            [24] 1830 	pop	ar5
      0006A5                       1831 00106$:
                                   1832 ;	SPI.c:286: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      0006A5 8D 07            [24] 1833 	mov	ar7,r5
                                   1834 ;	SPI.c:287: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      0006A7 8C 06            [24] 1835 	mov	ar6,r4
                                   1836 ;	SPI.c:289: spi_control_write(0, 0x03, higher_byte); // High byte
      0006A9 90r00r03         [24] 1837 	mov	dptr,#_spi_control_write_PARM_2
      0006AC 74 03            [12] 1838 	mov	a,#0x03
      0006AE F0               [24] 1839 	movx	@dptr,a
      0006AF 90r00r04         [24] 1840 	mov	dptr,#_spi_control_write_PARM_3
      0006B2 EF               [12] 1841 	mov	a,r7
      0006B3 F0               [24] 1842 	movx	@dptr,a
      0006B4 75 82 00         [24] 1843 	mov	dpl, #0x00
      0006B7 C0 06            [24] 1844 	push	ar6
      0006B9 C0 05            [24] 1845 	push	ar5
      0006BB C0 04            [24] 1846 	push	ar4
      0006BD 12r00rA8         [24] 1847 	lcall	_spi_control_write
      0006C0 D0 04            [24] 1848 	pop	ar4
      0006C2 D0 05            [24] 1849 	pop	ar5
      0006C4 D0 06            [24] 1850 	pop	ar6
                                   1851 ;	SPI.c:290: spi_control_write(0, 0x02, lower_byte); // Low byte
      0006C6 90r00r03         [24] 1852 	mov	dptr,#_spi_control_write_PARM_2
      0006C9 74 02            [12] 1853 	mov	a,#0x02
      0006CB F0               [24] 1854 	movx	@dptr,a
      0006CC 90r00r04         [24] 1855 	mov	dptr,#_spi_control_write_PARM_3
      0006CF EE               [12] 1856 	mov	a,r6
      0006D0 F0               [24] 1857 	movx	@dptr,a
      0006D1 75 82 00         [24] 1858 	mov	dpl, #0x00
      0006D4 C0 05            [24] 1859 	push	ar5
      0006D6 C0 04            [24] 1860 	push	ar4
      0006D8 12r00rA8         [24] 1861 	lcall	_spi_control_write
                                   1862 ;	SPI.c:293: CS_LOW; // Pull CS Low
                                   1863 ;	assignBit
      0006DB C2 91            [12] 1864 	clr	_P1_1
                                   1865 ;	SPI.c:294: SPI_send(opcode); // Send opcode
      0006DD 75 82 7A         [24] 1866 	mov	dpl, #0x7a
      0006E0 12r01r13         [24] 1867 	lcall	_SPI_send
      0006E3 D0 04            [24] 1868 	pop	ar4
      0006E5 D0 05            [24] 1869 	pop	ar5
                                   1870 ;	SPI.c:297: printf("Writing %d bytes to buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      0006E7 90r00r22         [24] 1871 	mov	dptr,#_spi_buffer_write_num_bytes_10000_115
      0006EA E0               [24] 1872 	movx	a,@dptr
      0006EB FE               [12] 1873 	mov	r6,a
      0006EC A3               [24] 1874 	inc	dptr
      0006ED E0               [24] 1875 	movx	a,@dptr
      0006EE FF               [12] 1876 	mov	r7,a
      0006EF C0 07            [24] 1877 	push	ar7
      0006F1 C0 06            [24] 1878 	push	ar6
      0006F3 C0 04            [24] 1879 	push	ar4
      0006F5 C0 05            [24] 1880 	push	ar5
      0006F7 C0 06            [24] 1881 	push	ar6
      0006F9 C0 07            [24] 1882 	push	ar7
      0006FB 74rF8            [12] 1883 	mov	a,#___str_13
      0006FD C0 E0            [24] 1884 	push	acc
      0006FF 74s01            [12] 1885 	mov	a,#(___str_13 >> 8)
      000701 C0 E0            [24] 1886 	push	acc
      000703 74 80            [12] 1887 	mov	a,#0x80
      000705 C0 E0            [24] 1888 	push	acc
      000707 12r00r00         [24] 1889 	lcall	_printf
      00070A E5 81            [12] 1890 	mov	a,sp
      00070C 24 F9            [12] 1891 	add	a,#0xf9
      00070E F5 81            [12] 1892 	mov	sp,a
      000710 D0 06            [24] 1893 	pop	ar6
      000712 D0 07            [24] 1894 	pop	ar7
                                   1895 ;	SPI.c:298: for (int i = 0; i < num_bytes; i++) {
      000714 90r00r24         [24] 1896 	mov	dptr,#_spi_buffer_write_i_20002_122
      000717 E4               [12] 1897 	clr	a
      000718 F0               [24] 1898 	movx	@dptr,a
      000719 A3               [24] 1899 	inc	dptr
      00071A F0               [24] 1900 	movx	@dptr,a
      00071B 90r00r1F         [24] 1901 	mov	dptr,#_spi_buffer_write_PARM_3
      00071E E0               [24] 1902 	movx	a,@dptr
      00071F FB               [12] 1903 	mov	r3,a
      000720 A3               [24] 1904 	inc	dptr
      000721 E0               [24] 1905 	movx	a,@dptr
      000722 FC               [12] 1906 	mov	r4,a
      000723 A3               [24] 1907 	inc	dptr
      000724 E0               [24] 1908 	movx	a,@dptr
      000725 FD               [12] 1909 	mov	r5,a
      000726                       1910 00109$:
      000726 90r00r24         [24] 1911 	mov	dptr,#_spi_buffer_write_i_20002_122
      000729 E0               [24] 1912 	movx	a,@dptr
      00072A F9               [12] 1913 	mov	r1,a
      00072B A3               [24] 1914 	inc	dptr
      00072C E0               [24] 1915 	movx	a,@dptr
      00072D FA               [12] 1916 	mov	r2,a
      00072E C3               [12] 1917 	clr	c
      00072F E9               [12] 1918 	mov	a,r1
      000730 9E               [12] 1919 	subb	a,r6
      000731 EA               [12] 1920 	mov	a,r2
      000732 64 80            [12] 1921 	xrl	a,#0x80
      000734 8F F0            [24] 1922 	mov	b,r7
      000736 63 F0 80         [24] 1923 	xrl	b,#0x80
      000739 95 F0            [12] 1924 	subb	a,b
      00073B 40 03            [24] 1925 	jc	00147$
      00073D 02r07rCD         [24] 1926 	ljmp	00107$
      000740                       1927 00147$:
                                   1928 ;	SPI.c:299: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      000740 C0 06            [24] 1929 	push	ar6
      000742 C0 07            [24] 1930 	push	ar7
      000744 8B 82            [24] 1931 	mov	dpl,r3
      000746 8C 83            [24] 1932 	mov	dph,r4
      000748 8D F0            [24] 1933 	mov	b,r5
      00074A 12r00r00         [24] 1934 	lcall	__gptrget
      00074D F8               [12] 1935 	mov	r0,a
      00074E 7F 00            [12] 1936 	mov	r7,#0x00
      000750 09               [12] 1937 	inc	r1
      000751 B9 00 01         [24] 1938 	cjne	r1,#0x00,00148$
      000754 0A               [12] 1939 	inc	r2
      000755                       1940 00148$:
      000755 C0 07            [24] 1941 	push	ar7
      000757 C0 06            [24] 1942 	push	ar6
      000759 C0 05            [24] 1943 	push	ar5
      00075B C0 04            [24] 1944 	push	ar4
      00075D C0 03            [24] 1945 	push	ar3
      00075F C0 02            [24] 1946 	push	ar2
      000761 C0 01            [24] 1947 	push	ar1
      000763 C0 00            [24] 1948 	push	ar0
      000765 C0 07            [24] 1949 	push	ar7
      000767 C0 01            [24] 1950 	push	ar1
      000769 C0 02            [24] 1951 	push	ar2
      00076B 74rE6            [12] 1952 	mov	a,#___str_12
      00076D C0 E0            [24] 1953 	push	acc
      00076F 74s01            [12] 1954 	mov	a,#(___str_12 >> 8)
      000771 C0 E0            [24] 1955 	push	acc
      000773 74 80            [12] 1956 	mov	a,#0x80
      000775 C0 E0            [24] 1957 	push	acc
      000777 12r00r00         [24] 1958 	lcall	_printf
      00077A E5 81            [12] 1959 	mov	a,sp
      00077C 24 F9            [12] 1960 	add	a,#0xf9
      00077E F5 81            [12] 1961 	mov	sp,a
      000780 D0 01            [24] 1962 	pop	ar1
      000782 D0 02            [24] 1963 	pop	ar2
      000784 D0 03            [24] 1964 	pop	ar3
      000786 D0 04            [24] 1965 	pop	ar4
      000788 D0 05            [24] 1966 	pop	ar5
      00078A D0 06            [24] 1967 	pop	ar6
      00078C D0 07            [24] 1968 	pop	ar7
                                   1969 ;	SPI.c:300: SPI_send(*data_ptr); // Send data
      00078E 8B 82            [24] 1970 	mov	dpl,r3
      000790 8C 83            [24] 1971 	mov	dph,r4
      000792 8D F0            [24] 1972 	mov	b,r5
      000794 12r00r00         [24] 1973 	lcall	__gptrget
      000797 FF               [12] 1974 	mov	r7,a
      000798 A3               [24] 1975 	inc	dptr
      000799 AB 82            [24] 1976 	mov	r3,dpl
      00079B AC 83            [24] 1977 	mov	r4,dph
      00079D 8F 82            [24] 1978 	mov	dpl, r7
      00079F C0 07            [24] 1979 	push	ar7
      0007A1 C0 06            [24] 1980 	push	ar6
      0007A3 C0 05            [24] 1981 	push	ar5
      0007A5 C0 04            [24] 1982 	push	ar4
      0007A7 C0 03            [24] 1983 	push	ar3
      0007A9 C0 02            [24] 1984 	push	ar2
      0007AB C0 01            [24] 1985 	push	ar1
      0007AD 12r01r13         [24] 1986 	lcall	_SPI_send
      0007B0 D0 01            [24] 1987 	pop	ar1
      0007B2 D0 02            [24] 1988 	pop	ar2
      0007B4 D0 03            [24] 1989 	pop	ar3
      0007B6 D0 04            [24] 1990 	pop	ar4
      0007B8 D0 05            [24] 1991 	pop	ar5
      0007BA D0 06            [24] 1992 	pop	ar6
      0007BC D0 07            [24] 1993 	pop	ar7
                                   1994 ;	SPI.c:301: data_ptr++;
                                   1995 ;	SPI.c:298: for (int i = 0; i < num_bytes; i++) {
      0007BE 90r00r24         [24] 1996 	mov	dptr,#_spi_buffer_write_i_20002_122
      0007C1 E9               [12] 1997 	mov	a,r1
      0007C2 F0               [24] 1998 	movx	@dptr,a
      0007C3 EA               [12] 1999 	mov	a,r2
      0007C4 A3               [24] 2000 	inc	dptr
      0007C5 F0               [24] 2001 	movx	@dptr,a
      0007C6 D0 07            [24] 2002 	pop	ar7
      0007C8 D0 06            [24] 2003 	pop	ar6
      0007CA 02r07r26         [24] 2004 	ljmp	00109$
      0007CD                       2005 00107$:
                                   2006 ;	SPI.c:303: CS_HIGH; // Pull CS High
                                   2007 ;	assignBit
      0007CD D2 91            [12] 2008 	setb	_P1_1
                                   2009 ;	SPI.c:304: }
      0007CF 22               [24] 2010 	ret
                                   2011 	.area CSEG    (CODE)
                                   2012 	.area CONST   (CODE)
                                   2013 	.area CONST   (CODE)
      000000                       2014 ___str_0:
      000000 77 72 6F 6E 67 20 62  2015 	.ascii "wrong bank"
             61 6E 6B
      00000A 00                    2016 	.db 0x00
                                   2017 	.area CSEG    (CODE)
                                   2018 	.area CONST   (CODE)
      00000B                       2019 ___str_1:
      00000B 57 72 69 74 65 3A 20  2020 	.ascii "Write: Address 0x%02X, Data 0x%02X"
             41 64 64 72 65 73 73
             20 30 78 25 30 32 58
             2C 20 44 61 74 61 20
             30 78 25 30 32 58
      00002D 0A                    2021 	.db 0x0a
      00002E 0D                    2022 	.db 0x0d
      00002F 00                    2023 	.db 0x00
                                   2024 	.area CSEG    (CODE)
                                   2025 	.area CONST   (CODE)
      000030                       2026 ___str_2:
      000030 0A                    2027 	.db 0x0a
      000031 0D                    2028 	.db 0x0d
      000032 49 6E 76 61 6C 69 64  2029 	.ascii "Invalid address: MAC register address range [0, 0x1F]"
             20 61 64 64 72 65 73
             73 3A 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 72 61 6E 67
             65 20 5B 30 2C 20 30
             78 31 46 5D
      000067 0A                    2030 	.db 0x0a
      000068 0D                    2031 	.db 0x0d
      000069 00                    2032 	.db 0x00
                                   2033 	.area CSEG    (CODE)
                                   2034 	.area CONST   (CODE)
      00006A                       2035 ___str_3:
      00006A 52 65 61 64 3A 20 41  2036 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      00008B 0A                    2037 	.db 0x0a
      00008C 0D                    2038 	.db 0x0d
      00008D 00                    2039 	.db 0x00
                                   2040 	.area CSEG    (CODE)
                                   2041 	.area CONST   (CODE)
      00008E                       2042 ___str_4:
      00008E 50 48 59 20 57 72 69  2043 	.ascii "PHY Write: Address 0x%02X, Data 0x%04X"
             74 65 3A 20 41 64 64
             72 65 73 73 20 30 78
             25 30 32 58 2C 20 44
             61 74 61 20 30 78 25
             30 34 58
      0000B4 0A                    2044 	.db 0x0a
      0000B5 0D                    2045 	.db 0x0d
      0000B6 00                    2046 	.db 0x00
                                   2047 	.area CSEG    (CODE)
                                   2048 	.area CONST   (CODE)
      0000B7                       2049 ___str_5:
      0000B7 52 65 61 64 3A 20 41  2050 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      0000D8 0A                    2051 	.db 0x0a
      0000D9 00                    2052 	.db 0x00
                                   2053 	.area CSEG    (CODE)
                                   2054 	.area CONST   (CODE)
      0000DA                       2055 ___str_6:
      0000DA 50 48 59 20 52 65 61  2056 	.ascii "PHY Read: Address 0x%02X, Data 0x%04X"
             64 3A 20 41 64 64 72
             65 73 73 20 30 78 25
             30 32 58 2C 20 44 61
             74 61 20 30 78 25 30
             34 58
      0000FF 0A                    2057 	.db 0x0a
      000100 0D                    2058 	.db 0x0d
      000101 00                    2059 	.db 0x00
                                   2060 	.area CSEG    (CODE)
                                   2061 	.area CONST   (CODE)
      000102                       2062 ___str_7:
      000102 0A                    2063 	.db 0x0a
      000103 0D                    2064 	.db 0x0d
      000104 49 6E 76 61 6C 69 64  2065 	.ascii "Invalid Buffer Address or Size: Start 0x%04X, Size 0x%04X"
             20 42 75 66 66 65 72
             20 41 64 64 72 65 73
             73 20 6F 72 20 53 69
             7A 65 3A 20 53 74 61
             72 74 20 30 78 25 30
             34 58 2C 20 53 69 7A
             65 20 30 78 25 30 34
             58
      00013D 0A                    2066 	.db 0x0a
      00013E 0D                    2067 	.db 0x0d
      00013F 00                    2068 	.db 0x00
                                   2069 	.area CSEG    (CODE)
                                   2070 	.area CONST   (CODE)
      000140                       2071 ___str_8:
      000140 0A                    2072 	.db 0x0a
      000141 0D                    2073 	.db 0x0d
      000142 42 75 66 66 65 72 20  2074 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      00016E 0A                    2075 	.db 0x0a
      00016F 0D                    2076 	.db 0x0d
      000170 00                    2077 	.db 0x00
                                   2078 	.area CSEG    (CODE)
                                   2079 	.area CONST   (CODE)
      000171                       2080 ___str_9:
      000171 0A                    2081 	.db 0x0a
      000172 0D                    2082 	.db 0x0d
      000173 49 6E 76 61 6C 69 64  2083 	.ascii "Invalid number of bytes: %d"
             20 6E 75 6D 62 65 72
             20 6F 66 20 62 79 74
             65 73 3A 20 25 64
      00018E 0A                    2084 	.db 0x0a
      00018F 0D                    2085 	.db 0x0d
      000190 00                    2086 	.db 0x00
                                   2087 	.area CSEG    (CODE)
                                   2088 	.area CONST   (CODE)
      000191                       2089 ___str_10:
      000191 0A                    2090 	.db 0x0a
      000192 0D                    2091 	.db 0x0d
      000193 49 6E 76 61 6C 69 64  2092 	.ascii "Invalid address: %04X"
             20 61 64 64 72 65 73
             73 3A 20 25 30 34 58
      0001A8 0A                    2093 	.db 0x0a
      0001A9 0D                    2094 	.db 0x0d
      0001AA 00                    2095 	.db 0x00
                                   2096 	.area CSEG    (CODE)
                                   2097 	.area CONST   (CODE)
      0001AB                       2098 ___str_11:
      0001AB 52 65 61 64 69 6E 67  2099 	.ascii "Reading %d bytes from buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 66 72 6F 6D
             20 62 75 66 66 65 72
             20 73 74 61 72 74 69
             6E 67 20 61 74 20 61
             64 64 72 65 73 73 20
             30 78 25 30 34 58 3A
      0001E3 0A                    2100 	.db 0x0a
      0001E4 0D                    2101 	.db 0x0d
      0001E5 00                    2102 	.db 0x00
                                   2103 	.area CSEG    (CODE)
                                   2104 	.area CONST   (CODE)
      0001E6                       2105 ___str_12:
      0001E6 42 79 74 65 20 25 64  2106 	.ascii "Byte %d: 0x%02X"
             3A 20 30 78 25 30 32
             58
      0001F5 0A                    2107 	.db 0x0a
      0001F6 0D                    2108 	.db 0x0d
      0001F7 00                    2109 	.db 0x00
                                   2110 	.area CSEG    (CODE)
                                   2111 	.area CONST   (CODE)
      0001F8                       2112 ___str_13:
      0001F8 57 72 69 74 69 6E 67  2113 	.ascii "Writing %d bytes to buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 74 6F 20 62
             75 66 66 65 72 20 73
             74 61 72 74 69 6E 67
             20 61 74 20 61 64 64
             72 65 73 73 20 30 78
             25 30 34 58 3A
      00022E 0A                    2114 	.db 0x0a
      00022F 0D                    2115 	.db 0x0d
      000230 00                    2116 	.db 0x00
                                   2117 	.area CSEG    (CODE)
                                   2118 	.area XINIT   (CODE)
                                   2119 	.area CABS    (ABS,CODE)
