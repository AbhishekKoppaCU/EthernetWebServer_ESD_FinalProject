                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module SPI
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _printf
                                     12 	.globl _TF1
                                     13 	.globl _TR1
                                     14 	.globl _TF0
                                     15 	.globl _TR0
                                     16 	.globl _IE1
                                     17 	.globl _IT1
                                     18 	.globl _IE0
                                     19 	.globl _IT0
                                     20 	.globl _SM0
                                     21 	.globl _SM1
                                     22 	.globl _SM2
                                     23 	.globl _REN
                                     24 	.globl _TB8
                                     25 	.globl _RB8
                                     26 	.globl _TI
                                     27 	.globl _RI
                                     28 	.globl _CY
                                     29 	.globl _AC
                                     30 	.globl _F0
                                     31 	.globl _RS1
                                     32 	.globl _RS0
                                     33 	.globl _OV
                                     34 	.globl _F1
                                     35 	.globl _P
                                     36 	.globl _RD
                                     37 	.globl _WR
                                     38 	.globl _T1
                                     39 	.globl _T0
                                     40 	.globl _INT1
                                     41 	.globl _INT0
                                     42 	.globl _TXD0
                                     43 	.globl _TXD
                                     44 	.globl _RXD0
                                     45 	.globl _RXD
                                     46 	.globl _P3_7
                                     47 	.globl _P3_6
                                     48 	.globl _P3_5
                                     49 	.globl _P3_4
                                     50 	.globl _P3_3
                                     51 	.globl _P3_2
                                     52 	.globl _P3_1
                                     53 	.globl _P3_0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _P1_7
                                     63 	.globl _P1_6
                                     64 	.globl _P1_5
                                     65 	.globl _P1_4
                                     66 	.globl _P1_3
                                     67 	.globl _P1_2
                                     68 	.globl _P1_1
                                     69 	.globl _P1_0
                                     70 	.globl _P0_7
                                     71 	.globl _P0_6
                                     72 	.globl _P0_5
                                     73 	.globl _P0_4
                                     74 	.globl _P0_3
                                     75 	.globl _P0_2
                                     76 	.globl _P0_1
                                     77 	.globl _P0_0
                                     78 	.globl _PS
                                     79 	.globl _PT1
                                     80 	.globl _PX1
                                     81 	.globl _PT0
                                     82 	.globl _PX0
                                     83 	.globl _EA
                                     84 	.globl _ES
                                     85 	.globl _ET1
                                     86 	.globl _EX1
                                     87 	.globl _ET0
                                     88 	.globl _EX0
                                     89 	.globl _BREG_F7
                                     90 	.globl _BREG_F6
                                     91 	.globl _BREG_F5
                                     92 	.globl _BREG_F4
                                     93 	.globl _BREG_F3
                                     94 	.globl _BREG_F2
                                     95 	.globl _BREG_F1
                                     96 	.globl _BREG_F0
                                     97 	.globl _P5_7
                                     98 	.globl _P5_6
                                     99 	.globl _P5_5
                                    100 	.globl _P5_4
                                    101 	.globl _P5_3
                                    102 	.globl _P5_2
                                    103 	.globl _P5_1
                                    104 	.globl _P5_0
                                    105 	.globl _P4_7
                                    106 	.globl _P4_6
                                    107 	.globl _P4_5
                                    108 	.globl _P4_4
                                    109 	.globl _P4_3
                                    110 	.globl _P4_2
                                    111 	.globl _P4_1
                                    112 	.globl _P4_0
                                    113 	.globl _PX0L
                                    114 	.globl _PT0L
                                    115 	.globl _PX1L
                                    116 	.globl _PT1L
                                    117 	.globl _PSL
                                    118 	.globl _PT2L
                                    119 	.globl _PPCL
                                    120 	.globl _EC
                                    121 	.globl _CCF0
                                    122 	.globl _CCF1
                                    123 	.globl _CCF2
                                    124 	.globl _CCF3
                                    125 	.globl _CCF4
                                    126 	.globl _CR
                                    127 	.globl _CF
                                    128 	.globl _TF2
                                    129 	.globl _EXF2
                                    130 	.globl _RCLK
                                    131 	.globl _TCLK
                                    132 	.globl _EXEN2
                                    133 	.globl _TR2
                                    134 	.globl _C_T2
                                    135 	.globl _CP_RL2
                                    136 	.globl _T2CON_7
                                    137 	.globl _T2CON_6
                                    138 	.globl _T2CON_5
                                    139 	.globl _T2CON_4
                                    140 	.globl _T2CON_3
                                    141 	.globl _T2CON_2
                                    142 	.globl _T2CON_1
                                    143 	.globl _T2CON_0
                                    144 	.globl _PT2
                                    145 	.globl _ET2
                                    146 	.globl _TMOD
                                    147 	.globl _TL1
                                    148 	.globl _TL0
                                    149 	.globl _TH1
                                    150 	.globl _TH0
                                    151 	.globl _TCON
                                    152 	.globl _SP
                                    153 	.globl _SCON
                                    154 	.globl _SBUF0
                                    155 	.globl _SBUF
                                    156 	.globl _PSW
                                    157 	.globl _PCON
                                    158 	.globl _P3
                                    159 	.globl _P2
                                    160 	.globl _P1
                                    161 	.globl _P0
                                    162 	.globl _IP
                                    163 	.globl _IE
                                    164 	.globl _DP0L
                                    165 	.globl _DPL
                                    166 	.globl _DP0H
                                    167 	.globl _DPH
                                    168 	.globl _B
                                    169 	.globl _ACC
                                    170 	.globl _EECON
                                    171 	.globl _KBF
                                    172 	.globl _KBE
                                    173 	.globl _KBLS
                                    174 	.globl _BRL
                                    175 	.globl _BDRCON
                                    176 	.globl _T2MOD
                                    177 	.globl _SPDAT
                                    178 	.globl _SPSTA
                                    179 	.globl _SPCON
                                    180 	.globl _SADEN
                                    181 	.globl _SADDR
                                    182 	.globl _WDTPRG
                                    183 	.globl _WDTRST
                                    184 	.globl _P5
                                    185 	.globl _P4
                                    186 	.globl _IPH1
                                    187 	.globl _IPL1
                                    188 	.globl _IPH0
                                    189 	.globl _IPL0
                                    190 	.globl _IEN1
                                    191 	.globl _IEN0
                                    192 	.globl _CMOD
                                    193 	.globl _CL
                                    194 	.globl _CH
                                    195 	.globl _CCON
                                    196 	.globl _CCAPM4
                                    197 	.globl _CCAPM3
                                    198 	.globl _CCAPM2
                                    199 	.globl _CCAPM1
                                    200 	.globl _CCAPM0
                                    201 	.globl _CCAP4L
                                    202 	.globl _CCAP3L
                                    203 	.globl _CCAP2L
                                    204 	.globl _CCAP1L
                                    205 	.globl _CCAP0L
                                    206 	.globl _CCAP4H
                                    207 	.globl _CCAP3H
                                    208 	.globl _CCAP2H
                                    209 	.globl _CCAP1H
                                    210 	.globl _CCAP0H
                                    211 	.globl _CKCON1
                                    212 	.globl _CKCON0
                                    213 	.globl _CKRL
                                    214 	.globl _AUXR1
                                    215 	.globl _AUXR
                                    216 	.globl _TH2
                                    217 	.globl _TL2
                                    218 	.globl _RCAP2H
                                    219 	.globl _RCAP2L
                                    220 	.globl _T2CON
                                    221 	.globl _spi_buffer_write_PARM_3
                                    222 	.globl _spi_buffer_write_PARM_2
                                    223 	.globl _spi_buffer_read_PARM_3
                                    224 	.globl _spi_buffer_read_PARM_2
                                    225 	.globl _buffer_init_PARM_2
                                    226 	.globl _mac_spi_read_PARM_2
                                    227 	.globl _phy_spi_write_PARM_2
                                    228 	.globl _eth_spi_read_PARM_2
                                    229 	.globl _spi_control_write_PARM_3
                                    230 	.globl _spi_control_write_PARM_2
                                    231 	.globl _SPI_ReadByte
                                    232 	.globl _spi_set_autoinc
                                    233 	.globl _select_reg_bank
                                    234 	.globl _spi_control_write
                                    235 	.globl _configure_SPI
                                    236 	.globl _SPI_send
                                    237 	.globl _enc_reset
                                    238 	.globl _eth_spi_read
                                    239 	.globl _phy_spi_write
                                    240 	.globl _mac_spi_read
                                    241 	.globl _phy_spi_read
                                    242 	.globl _busy_wait
                                    243 	.globl _buffer_init
                                    244 	.globl _spi_buffer_read
                                    245 	.globl _spi_buffer_write
                                    246 ;--------------------------------------------------------
                                    247 ; special function registers
                                    248 ;--------------------------------------------------------
                                    249 	.area RSEG    (ABS,DATA)
      000000                        250 	.org 0x0000
                           0000C8   251 _T2CON	=	0x00c8
                           0000CA   252 _RCAP2L	=	0x00ca
                           0000CB   253 _RCAP2H	=	0x00cb
                           0000CC   254 _TL2	=	0x00cc
                           0000CD   255 _TH2	=	0x00cd
                           00008E   256 _AUXR	=	0x008e
                           0000A2   257 _AUXR1	=	0x00a2
                           000097   258 _CKRL	=	0x0097
                           00008F   259 _CKCON0	=	0x008f
                           0000AF   260 _CKCON1	=	0x00af
                           0000FA   261 _CCAP0H	=	0x00fa
                           0000FB   262 _CCAP1H	=	0x00fb
                           0000FC   263 _CCAP2H	=	0x00fc
                           0000FD   264 _CCAP3H	=	0x00fd
                           0000FE   265 _CCAP4H	=	0x00fe
                           0000EA   266 _CCAP0L	=	0x00ea
                           0000EB   267 _CCAP1L	=	0x00eb
                           0000EC   268 _CCAP2L	=	0x00ec
                           0000ED   269 _CCAP3L	=	0x00ed
                           0000EE   270 _CCAP4L	=	0x00ee
                           0000DA   271 _CCAPM0	=	0x00da
                           0000DB   272 _CCAPM1	=	0x00db
                           0000DC   273 _CCAPM2	=	0x00dc
                           0000DD   274 _CCAPM3	=	0x00dd
                           0000DE   275 _CCAPM4	=	0x00de
                           0000D8   276 _CCON	=	0x00d8
                           0000F9   277 _CH	=	0x00f9
                           0000E9   278 _CL	=	0x00e9
                           0000D9   279 _CMOD	=	0x00d9
                           0000A8   280 _IEN0	=	0x00a8
                           0000B1   281 _IEN1	=	0x00b1
                           0000B8   282 _IPL0	=	0x00b8
                           0000B7   283 _IPH0	=	0x00b7
                           0000B2   284 _IPL1	=	0x00b2
                           0000B3   285 _IPH1	=	0x00b3
                           0000C0   286 _P4	=	0x00c0
                           0000E8   287 _P5	=	0x00e8
                           0000A6   288 _WDTRST	=	0x00a6
                           0000A7   289 _WDTPRG	=	0x00a7
                           0000A9   290 _SADDR	=	0x00a9
                           0000B9   291 _SADEN	=	0x00b9
                           0000C3   292 _SPCON	=	0x00c3
                           0000C4   293 _SPSTA	=	0x00c4
                           0000C5   294 _SPDAT	=	0x00c5
                           0000C9   295 _T2MOD	=	0x00c9
                           00009B   296 _BDRCON	=	0x009b
                           00009A   297 _BRL	=	0x009a
                           00009C   298 _KBLS	=	0x009c
                           00009D   299 _KBE	=	0x009d
                           00009E   300 _KBF	=	0x009e
                           0000D2   301 _EECON	=	0x00d2
                           0000E0   302 _ACC	=	0x00e0
                           0000F0   303 _B	=	0x00f0
                           000083   304 _DPH	=	0x0083
                           000083   305 _DP0H	=	0x0083
                           000082   306 _DPL	=	0x0082
                           000082   307 _DP0L	=	0x0082
                           0000A8   308 _IE	=	0x00a8
                           0000B8   309 _IP	=	0x00b8
                           000080   310 _P0	=	0x0080
                           000090   311 _P1	=	0x0090
                           0000A0   312 _P2	=	0x00a0
                           0000B0   313 _P3	=	0x00b0
                           000087   314 _PCON	=	0x0087
                           0000D0   315 _PSW	=	0x00d0
                           000099   316 _SBUF	=	0x0099
                           000099   317 _SBUF0	=	0x0099
                           000098   318 _SCON	=	0x0098
                           000081   319 _SP	=	0x0081
                           000088   320 _TCON	=	0x0088
                           00008C   321 _TH0	=	0x008c
                           00008D   322 _TH1	=	0x008d
                           00008A   323 _TL0	=	0x008a
                           00008B   324 _TL1	=	0x008b
                           000089   325 _TMOD	=	0x0089
                                    326 ;--------------------------------------------------------
                                    327 ; special function bits
                                    328 ;--------------------------------------------------------
                                    329 	.area RSEG    (ABS,DATA)
      000000                        330 	.org 0x0000
                           0000AD   331 _ET2	=	0x00ad
                           0000BD   332 _PT2	=	0x00bd
                           0000C8   333 _T2CON_0	=	0x00c8
                           0000C9   334 _T2CON_1	=	0x00c9
                           0000CA   335 _T2CON_2	=	0x00ca
                           0000CB   336 _T2CON_3	=	0x00cb
                           0000CC   337 _T2CON_4	=	0x00cc
                           0000CD   338 _T2CON_5	=	0x00cd
                           0000CE   339 _T2CON_6	=	0x00ce
                           0000CF   340 _T2CON_7	=	0x00cf
                           0000C8   341 _CP_RL2	=	0x00c8
                           0000C9   342 _C_T2	=	0x00c9
                           0000CA   343 _TR2	=	0x00ca
                           0000CB   344 _EXEN2	=	0x00cb
                           0000CC   345 _TCLK	=	0x00cc
                           0000CD   346 _RCLK	=	0x00cd
                           0000CE   347 _EXF2	=	0x00ce
                           0000CF   348 _TF2	=	0x00cf
                           0000DF   349 _CF	=	0x00df
                           0000DE   350 _CR	=	0x00de
                           0000DC   351 _CCF4	=	0x00dc
                           0000DB   352 _CCF3	=	0x00db
                           0000DA   353 _CCF2	=	0x00da
                           0000D9   354 _CCF1	=	0x00d9
                           0000D8   355 _CCF0	=	0x00d8
                           0000AE   356 _EC	=	0x00ae
                           0000BE   357 _PPCL	=	0x00be
                           0000BD   358 _PT2L	=	0x00bd
                           0000BC   359 _PSL	=	0x00bc
                           0000BB   360 _PT1L	=	0x00bb
                           0000BA   361 _PX1L	=	0x00ba
                           0000B9   362 _PT0L	=	0x00b9
                           0000B8   363 _PX0L	=	0x00b8
                           0000C0   364 _P4_0	=	0x00c0
                           0000C1   365 _P4_1	=	0x00c1
                           0000C2   366 _P4_2	=	0x00c2
                           0000C3   367 _P4_3	=	0x00c3
                           0000C4   368 _P4_4	=	0x00c4
                           0000C5   369 _P4_5	=	0x00c5
                           0000C6   370 _P4_6	=	0x00c6
                           0000C7   371 _P4_7	=	0x00c7
                           0000E8   372 _P5_0	=	0x00e8
                           0000E9   373 _P5_1	=	0x00e9
                           0000EA   374 _P5_2	=	0x00ea
                           0000EB   375 _P5_3	=	0x00eb
                           0000EC   376 _P5_4	=	0x00ec
                           0000ED   377 _P5_5	=	0x00ed
                           0000EE   378 _P5_6	=	0x00ee
                           0000EF   379 _P5_7	=	0x00ef
                           0000F0   380 _BREG_F0	=	0x00f0
                           0000F1   381 _BREG_F1	=	0x00f1
                           0000F2   382 _BREG_F2	=	0x00f2
                           0000F3   383 _BREG_F3	=	0x00f3
                           0000F4   384 _BREG_F4	=	0x00f4
                           0000F5   385 _BREG_F5	=	0x00f5
                           0000F6   386 _BREG_F6	=	0x00f6
                           0000F7   387 _BREG_F7	=	0x00f7
                           0000A8   388 _EX0	=	0x00a8
                           0000A9   389 _ET0	=	0x00a9
                           0000AA   390 _EX1	=	0x00aa
                           0000AB   391 _ET1	=	0x00ab
                           0000AC   392 _ES	=	0x00ac
                           0000AF   393 _EA	=	0x00af
                           0000B8   394 _PX0	=	0x00b8
                           0000B9   395 _PT0	=	0x00b9
                           0000BA   396 _PX1	=	0x00ba
                           0000BB   397 _PT1	=	0x00bb
                           0000BC   398 _PS	=	0x00bc
                           000080   399 _P0_0	=	0x0080
                           000081   400 _P0_1	=	0x0081
                           000082   401 _P0_2	=	0x0082
                           000083   402 _P0_3	=	0x0083
                           000084   403 _P0_4	=	0x0084
                           000085   404 _P0_5	=	0x0085
                           000086   405 _P0_6	=	0x0086
                           000087   406 _P0_7	=	0x0087
                           000090   407 _P1_0	=	0x0090
                           000091   408 _P1_1	=	0x0091
                           000092   409 _P1_2	=	0x0092
                           000093   410 _P1_3	=	0x0093
                           000094   411 _P1_4	=	0x0094
                           000095   412 _P1_5	=	0x0095
                           000096   413 _P1_6	=	0x0096
                           000097   414 _P1_7	=	0x0097
                           0000A0   415 _P2_0	=	0x00a0
                           0000A1   416 _P2_1	=	0x00a1
                           0000A2   417 _P2_2	=	0x00a2
                           0000A3   418 _P2_3	=	0x00a3
                           0000A4   419 _P2_4	=	0x00a4
                           0000A5   420 _P2_5	=	0x00a5
                           0000A6   421 _P2_6	=	0x00a6
                           0000A7   422 _P2_7	=	0x00a7
                           0000B0   423 _P3_0	=	0x00b0
                           0000B1   424 _P3_1	=	0x00b1
                           0000B2   425 _P3_2	=	0x00b2
                           0000B3   426 _P3_3	=	0x00b3
                           0000B4   427 _P3_4	=	0x00b4
                           0000B5   428 _P3_5	=	0x00b5
                           0000B6   429 _P3_6	=	0x00b6
                           0000B7   430 _P3_7	=	0x00b7
                           0000B0   431 _RXD	=	0x00b0
                           0000B0   432 _RXD0	=	0x00b0
                           0000B1   433 _TXD	=	0x00b1
                           0000B1   434 _TXD0	=	0x00b1
                           0000B2   435 _INT0	=	0x00b2
                           0000B3   436 _INT1	=	0x00b3
                           0000B4   437 _T0	=	0x00b4
                           0000B5   438 _T1	=	0x00b5
                           0000B6   439 _WR	=	0x00b6
                           0000B7   440 _RD	=	0x00b7
                           0000D0   441 _P	=	0x00d0
                           0000D1   442 _F1	=	0x00d1
                           0000D2   443 _OV	=	0x00d2
                           0000D3   444 _RS0	=	0x00d3
                           0000D4   445 _RS1	=	0x00d4
                           0000D5   446 _F0	=	0x00d5
                           0000D6   447 _AC	=	0x00d6
                           0000D7   448 _CY	=	0x00d7
                           000098   449 _RI	=	0x0098
                           000099   450 _TI	=	0x0099
                           00009A   451 _RB8	=	0x009a
                           00009B   452 _TB8	=	0x009b
                           00009C   453 _REN	=	0x009c
                           00009D   454 _SM2	=	0x009d
                           00009E   455 _SM1	=	0x009e
                           00009F   456 _SM0	=	0x009f
                           000088   457 _IT0	=	0x0088
                           000089   458 _IE0	=	0x0089
                           00008A   459 _IT1	=	0x008a
                           00008B   460 _IE1	=	0x008b
                           00008C   461 _TR0	=	0x008c
                           00008D   462 _TF0	=	0x008d
                           00008E   463 _TR1	=	0x008e
                           00008F   464 _TF1	=	0x008f
                                    465 ;--------------------------------------------------------
                                    466 ; overlayable register banks
                                    467 ;--------------------------------------------------------
                                    468 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        469 	.ds 8
                                    470 ;--------------------------------------------------------
                                    471 ; internal ram data
                                    472 ;--------------------------------------------------------
                                    473 	.area DSEG    (DATA)
                                    474 ;--------------------------------------------------------
                                    475 ; overlayable items in internal ram
                                    476 ;--------------------------------------------------------
                                    477 ;--------------------------------------------------------
                                    478 ; indirectly addressable internal ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area ISEG    (DATA)
                                    481 ;--------------------------------------------------------
                                    482 ; absolute internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area IABS    (ABS,DATA)
                                    485 	.area IABS    (ABS,DATA)
                                    486 ;--------------------------------------------------------
                                    487 ; bit data
                                    488 ;--------------------------------------------------------
                                    489 	.area BSEG    (BIT)
                                    490 ;--------------------------------------------------------
                                    491 ; paged external ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area PSEG    (PAG,XDATA)
                                    494 ;--------------------------------------------------------
                                    495 ; uninitialized external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area XSEG    (XDATA)
      000000                        498 _SPI_ReadByte_received_data_10000_113:
      000000                        499 	.ds 1
      000001                        500 _select_reg_bank_bank_10000_117:
      000001                        501 	.ds 1
      000002                        502 _select_reg_bank_data_10001_119:
      000002                        503 	.ds 1
      000003                        504 _spi_control_write_PARM_2:
      000003                        505 	.ds 1
      000004                        506 _spi_control_write_PARM_3:
      000004                        507 	.ds 1
      000005                        508 _spi_control_write_reg_bank_10000_122:
      000005                        509 	.ds 1
      000006                        510 _SPI_send_data_10000_126:
      000006                        511 	.ds 1
      000007                        512 _eth_spi_read_PARM_2:
      000007                        513 	.ds 1
      000008                        514 _eth_spi_read_addr_10000_131:
      000008                        515 	.ds 1
      000009                        516 _phy_spi_write_PARM_2:
      000009                        517 	.ds 2
      00000B                        518 _phy_spi_write_addr_10000_135:
      00000B                        519 	.ds 1
      00000C                        520 _mac_spi_read_PARM_2:
      00000C                        521 	.ds 1
      00000D                        522 _mac_spi_read_addr_10000_137:
      00000D                        523 	.ds 1
      00000E                        524 _phy_spi_read_addr_10000_141:
      00000E                        525 	.ds 1
      00000F                        526 _busy_wait_data_10000_145:
      00000F                        527 	.ds 1
      000010                        528 _buffer_init_PARM_2:
      000010                        529 	.ds 2
      000012                        530 _buffer_init_start_address_10000_147:
      000012                        531 	.ds 2
      000014                        532 _spi_buffer_read_PARM_2:
      000014                        533 	.ds 2
      000016                        534 _spi_buffer_read_PARM_3:
      000016                        535 	.ds 3
      000019                        536 _spi_buffer_read_num_bytes_10000_151:
      000019                        537 	.ds 2
      00001B                        538 _spi_buffer_write_PARM_2:
      00001B                        539 	.ds 2
      00001D                        540 _spi_buffer_write_PARM_3:
      00001D                        541 	.ds 3
      000020                        542 _spi_buffer_write_num_bytes_10000_161:
      000020                        543 	.ds 2
                                    544 ;--------------------------------------------------------
                                    545 ; absolute external ram data
                                    546 ;--------------------------------------------------------
                                    547 	.area XABS    (ABS,XDATA)
                                    548 ;--------------------------------------------------------
                                    549 ; initialized external ram data
                                    550 ;--------------------------------------------------------
                                    551 	.area XISEG   (XDATA)
                                    552 	.area HOME    (CODE)
                                    553 	.area GSINIT0 (CODE)
                                    554 	.area GSINIT1 (CODE)
                                    555 	.area GSINIT2 (CODE)
                                    556 	.area GSINIT3 (CODE)
                                    557 	.area GSINIT4 (CODE)
                                    558 	.area GSINIT5 (CODE)
                                    559 	.area GSINIT  (CODE)
                                    560 	.area GSFINAL (CODE)
                                    561 	.area CSEG    (CODE)
                                    562 ;--------------------------------------------------------
                                    563 ; global & static initialisations
                                    564 ;--------------------------------------------------------
                                    565 	.area HOME    (CODE)
                                    566 	.area GSINIT  (CODE)
                                    567 	.area GSFINAL (CODE)
                                    568 	.area GSINIT  (CODE)
                                    569 ;--------------------------------------------------------
                                    570 ; Home
                                    571 ;--------------------------------------------------------
                                    572 	.area HOME    (CODE)
                                    573 	.area HOME    (CODE)
                                    574 ;--------------------------------------------------------
                                    575 ; code
                                    576 ;--------------------------------------------------------
                                    577 	.area CSEG    (CODE)
                                    578 ;------------------------------------------------------------
                                    579 ;Allocation info for local variables in function 'SPI_ReadByte'
                                    580 ;------------------------------------------------------------
                                    581 ;received_data             Allocated with name '_SPI_ReadByte_received_data_10000_113'
                                    582 ;------------------------------------------------------------
                                    583 ;	SPI.c:4: uint8_t SPI_ReadByte(void)
                                    584 ;	-----------------------------------------
                                    585 ;	 function SPI_ReadByte
                                    586 ;	-----------------------------------------
      000000                        587 _SPI_ReadByte:
                           000007   588 	ar7 = 0x07
                           000006   589 	ar6 = 0x06
                           000005   590 	ar5 = 0x05
                           000004   591 	ar4 = 0x04
                           000003   592 	ar3 = 0x03
                           000002   593 	ar2 = 0x02
                           000001   594 	ar1 = 0x01
                           000000   595 	ar0 = 0x00
                                    596 ;	SPI.c:9: SPDAT = 0xFF;
      000000 75 C5 FF         [24]  597 	mov	_SPDAT,#0xff
                                    598 ;	SPI.c:12: while (!(SPSTA & 0x80)) {
      000003                        599 00101$:
      000003 E5 C4            [12]  600 	mov	a,_SPSTA
      000005 30 E7 FB         [24]  601 	jnb	acc.7,00101$
                                    602 ;	SPI.c:17: received_data = SPDAT;
      000008 90r00r00         [24]  603 	mov	dptr,#_SPI_ReadByte_received_data_10000_113
      00000B E5 C5            [12]  604 	mov	a,_SPDAT
      00000D F0               [24]  605 	movx	@dptr,a
                                    606 ;	SPI.c:19: return received_data;
      00000E E0               [24]  607 	movx	a,@dptr
                                    608 ;	SPI.c:20: }
      00000F F5 82            [12]  609 	mov	dpl,a
      000011 22               [24]  610 	ret
                                    611 ;------------------------------------------------------------
                                    612 ;Allocation info for local variables in function 'spi_set_autoinc'
                                    613 ;------------------------------------------------------------
                                    614 ;	SPI.c:22: void spi_set_autoinc(void)
                                    615 ;	-----------------------------------------
                                    616 ;	 function spi_set_autoinc
                                    617 ;	-----------------------------------------
      000012                        618 _spi_set_autoinc:
                                    619 ;	SPI.c:24: CS_LOW;                          // Pull CS low to select the ENC28J60
                                    620 ;	assignBit
      000012 C2 91            [12]  621 	clr	_P1_1
                                    622 ;	SPI.c:26: SPI_send(0x5E);                  // Write ECON2 register address
      000014 75 82 5E         [24]  623 	mov	dpl, #0x5e
      000017 12r01r13         [24]  624 	lcall	_SPI_send
                                    625 ;	SPI.c:27: SPI_send(0x80);                  // Set the AUTOINC bit
      00001A 75 82 80         [24]  626 	mov	dpl, #0x80
      00001D 12r01r13         [24]  627 	lcall	_SPI_send
                                    628 ;	SPI.c:29: CS_HIGH;                         // Pull CS high to deselect the ENC28J60
                                    629 ;	assignBit
      000020 D2 91            [12]  630 	setb	_P1_1
                                    631 ;	SPI.c:30: }
      000022 22               [24]  632 	ret
                                    633 ;------------------------------------------------------------
                                    634 ;Allocation info for local variables in function 'select_reg_bank'
                                    635 ;------------------------------------------------------------
                                    636 ;bank                      Allocated with name '_select_reg_bank_bank_10000_117'
                                    637 ;data                      Allocated with name '_select_reg_bank_data_10001_119'
                                    638 ;i                         Allocated with name '_select_reg_bank_i_20001_121'
                                    639 ;------------------------------------------------------------
                                    640 ;	SPI.c:33: void select_reg_bank(uint8_t bank)
                                    641 ;	-----------------------------------------
                                    642 ;	 function select_reg_bank
                                    643 ;	-----------------------------------------
      000023                        644 _select_reg_bank:
      000023 E5 82            [12]  645 	mov	a,dpl
      000025 90r00r01         [24]  646 	mov	dptr,#_select_reg_bank_bank_10000_117
      000028 F0               [24]  647 	movx	@dptr,a
                                    648 ;	SPI.c:35: CS_LOW;
                                    649 ;	assignBit
      000029 C2 91            [12]  650 	clr	_P1_1
                                    651 ;	SPI.c:36: SPI_send(0X1F); // Send the address
      00002B 75 82 1F         [24]  652 	mov	dpl, #0x1f
      00002E 12r01r13         [24]  653 	lcall	_SPI_send
                                    654 ;	SPI.c:37: uint8_t data = SPI_ReadByte(); // Read the data
      000031 12r00r00         [24]  655 	lcall	_SPI_ReadByte
      000034 AF 82            [24]  656 	mov	r7, dpl
                                    657 ;	SPI.c:38: CS_HIGH;
                                    658 ;	assignBit
      000036 D2 91            [12]  659 	setb	_P1_1
                                    660 ;	SPI.c:41: data &= ~0x03; // Clear the last two bits
      000038 53 07 FC         [24]  661 	anl	ar7,#0xfc
                                    662 ;	SPI.c:42: switch (bank)
      00003B 90r00r01         [24]  663 	mov	dptr,#_select_reg_bank_bank_10000_117
      00003E E0               [24]  664 	movx	a,@dptr
      00003F FE               [12]  665 	mov  r6,a
      000040 24 FC            [12]  666 	add	a,#0xff - 0x03
      000042 40 30            [24]  667 	jc	00105$
      000044 EE               [12]  668 	mov	a,r6
      000045 2E               [12]  669 	add	a,r6
                                    670 ;	SPI.c:44: case 0:
      000046 90r00r4A         [24]  671 	mov	dptr,#00133$
      000049 73               [24]  672 	jmp	@a+dptr
      00004A                        673 00133$:
      00004A 80 06            [24]  674 	sjmp	00101$
      00004C 80 0B            [24]  675 	sjmp	00102$
      00004E 80 12            [24]  676 	sjmp	00103$
      000050 80 19            [24]  677 	sjmp	00104$
      000052                        678 00101$:
                                    679 ;	SPI.c:45: data |= 0x00; // Last two bits: 00
      000052 90r00r02         [24]  680 	mov	dptr,#_select_reg_bank_data_10001_119
      000055 EF               [12]  681 	mov	a,r7
      000056 F0               [24]  682 	movx	@dptr,a
                                    683 ;	SPI.c:46: break;
                                    684 ;	SPI.c:47: case 1:
      000057 80 31            [24]  685 	sjmp	00115$
      000059                        686 00102$:
                                    687 ;	SPI.c:48: data |= 0x01; // Last two bits: 01
      000059 90r00r02         [24]  688 	mov	dptr,#_select_reg_bank_data_10001_119
      00005C 74 01            [12]  689 	mov	a,#0x01
      00005E 4F               [12]  690 	orl	a,r7
      00005F F0               [24]  691 	movx	@dptr,a
                                    692 ;	SPI.c:49: break;
                                    693 ;	SPI.c:50: case 2:
      000060 80 28            [24]  694 	sjmp	00115$
      000062                        695 00103$:
                                    696 ;	SPI.c:51: data |= 0x02; // Last two bits: 10
      000062 90r00r02         [24]  697 	mov	dptr,#_select_reg_bank_data_10001_119
      000065 74 02            [12]  698 	mov	a,#0x02
      000067 4F               [12]  699 	orl	a,r7
      000068 F0               [24]  700 	movx	@dptr,a
                                    701 ;	SPI.c:52: break;
                                    702 ;	SPI.c:53: case 3:
      000069 80 1F            [24]  703 	sjmp	00115$
      00006B                        704 00104$:
                                    705 ;	SPI.c:54: data |= 0x03; // Last two bits: 11
      00006B 90r00r02         [24]  706 	mov	dptr,#_select_reg_bank_data_10001_119
      00006E 74 03            [12]  707 	mov	a,#0x03
      000070 4F               [12]  708 	orl	a,r7
      000071 F0               [24]  709 	movx	@dptr,a
                                    710 ;	SPI.c:55: break;
                                    711 ;	SPI.c:56: default:
      000072 80 16            [24]  712 	sjmp	00115$
      000074                        713 00105$:
                                    714 ;	SPI.c:57: printf("wrong bank");
      000074 74r00            [12]  715 	mov	a,#___str_0
      000076 C0 E0            [24]  716 	push	acc
      000078 74s00            [12]  717 	mov	a,#(___str_0 >> 8)
      00007A C0 E0            [24]  718 	push	acc
      00007C 74 80            [12]  719 	mov	a,#0x80
      00007E C0 E0            [24]  720 	push	acc
      000080 12r00r00         [24]  721 	lcall	_printf
      000083 15 81            [12]  722 	dec	sp
      000085 15 81            [12]  723 	dec	sp
      000087 15 81            [12]  724 	dec	sp
                                    725 ;	SPI.c:58: return;
                                    726 ;	SPI.c:61: for (int i = 0; i < 16; i++); // Delay
      000089 22               [24]  727 	ret
      00008A                        728 00115$:
      00008A 7F 00            [12]  729 	mov	r7,#0x00
      00008C                        730 00109$:
      00008C BF 10 00         [24]  731 	cjne	r7,#0x10,00134$
      00008F                        732 00134$:
      00008F 50 03            [24]  733 	jnc	00107$
      000091 0F               [12]  734 	inc	r7
      000092 80 F8            [24]  735 	sjmp	00109$
      000094                        736 00107$:
                                    737 ;	SPI.c:63: CS_LOW;
                                    738 ;	assignBit
      000094 C2 91            [12]  739 	clr	_P1_1
                                    740 ;	SPI.c:64: SPI_send(0x5F);
      000096 75 82 5F         [24]  741 	mov	dpl, #0x5f
      000099 12r01r13         [24]  742 	lcall	_SPI_send
                                    743 ;	SPI.c:65: SPI_send(data); // Send the modified data
      00009C 90r00r02         [24]  744 	mov	dptr,#_select_reg_bank_data_10001_119
      00009F E0               [24]  745 	movx	a,@dptr
      0000A0 F5 82            [12]  746 	mov	dpl,a
      0000A2 12r01r13         [24]  747 	lcall	_SPI_send
                                    748 ;	SPI.c:66: CS_HIGH;
                                    749 ;	assignBit
      0000A5 D2 91            [12]  750 	setb	_P1_1
                                    751 ;	SPI.c:68: }
      0000A7 22               [24]  752 	ret
                                    753 ;------------------------------------------------------------
                                    754 ;Allocation info for local variables in function 'spi_control_write'
                                    755 ;------------------------------------------------------------
                                    756 ;addr                      Allocated with name '_spi_control_write_PARM_2'
                                    757 ;data                      Allocated with name '_spi_control_write_PARM_3'
                                    758 ;reg_bank                  Allocated with name '_spi_control_write_reg_bank_10000_122'
                                    759 ;opcode                    Allocated with name '_spi_control_write_opcode_10000_123'
                                    760 ;------------------------------------------------------------
                                    761 ;	SPI.c:69: void spi_control_write(uint8_t reg_bank, uint8_t addr, uint8_t data)
                                    762 ;	-----------------------------------------
                                    763 ;	 function spi_control_write
                                    764 ;	-----------------------------------------
      0000A8                        765 _spi_control_write:
      0000A8 E5 82            [12]  766 	mov	a,dpl
      0000AA 90r00r05         [24]  767 	mov	dptr,#_spi_control_write_reg_bank_10000_122
      0000AD F0               [24]  768 	movx	@dptr,a
                                    769 ;	SPI.c:72: addr = addr + opcode; // Add the opcode to the address
      0000AE 90r00r03         [24]  770 	mov	dptr,#_spi_control_write_PARM_2
      0000B1 E0               [24]  771 	movx	a,@dptr
      0000B2 24 40            [12]  772 	add	a, #0x40
      0000B4 F0               [24]  773 	movx	@dptr,a
                                    774 ;	SPI.c:74: select_reg_bank(reg_bank); // Function to select the register bank
      0000B5 90r00r05         [24]  775 	mov	dptr,#_spi_control_write_reg_bank_10000_122
      0000B8 E0               [24]  776 	movx	a,@dptr
      0000B9 F5 82            [12]  777 	mov	dpl,a
      0000BB 12r00r23         [24]  778 	lcall	_select_reg_bank
                                    779 ;	SPI.c:77: CS_LOW;
                                    780 ;	assignBit
      0000BE C2 91            [12]  781 	clr	_P1_1
                                    782 ;	SPI.c:80: SPI_send(addr);
      0000C0 90r00r03         [24]  783 	mov	dptr,#_spi_control_write_PARM_2
      0000C3 E0               [24]  784 	movx	a,@dptr
      0000C4 FF               [12]  785 	mov	r7,a
      0000C5 F5 82            [12]  786 	mov	dpl,a
      0000C7 C0 07            [24]  787 	push	ar7
      0000C9 12r01r13         [24]  788 	lcall	_SPI_send
      0000CC D0 07            [24]  789 	pop	ar7
                                    790 ;	SPI.c:83: SPI_send(data);
      0000CE 90r00r04         [24]  791 	mov	dptr,#_spi_control_write_PARM_3
      0000D1 E0               [24]  792 	movx	a,@dptr
      0000D2 FE               [12]  793 	mov	r6,a
      0000D3 F5 82            [12]  794 	mov	dpl,a
      0000D5 C0 07            [24]  795 	push	ar7
      0000D7 C0 06            [24]  796 	push	ar6
      0000D9 12r01r13         [24]  797 	lcall	_SPI_send
      0000DC D0 06            [24]  798 	pop	ar6
      0000DE D0 07            [24]  799 	pop	ar7
                                    800 ;	SPI.c:86: CS_HIGH;
                                    801 ;	assignBit
      0000E0 D2 91            [12]  802 	setb	_P1_1
                                    803 ;	SPI.c:89: printf("Write: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      0000E2 7D 00            [12]  804 	mov	r5,#0x00
      0000E4 7C 00            [12]  805 	mov	r4,#0x00
      0000E6 C0 06            [24]  806 	push	ar6
      0000E8 C0 05            [24]  807 	push	ar5
      0000EA C0 07            [24]  808 	push	ar7
      0000EC C0 04            [24]  809 	push	ar4
      0000EE 74r0B            [12]  810 	mov	a,#___str_1
      0000F0 C0 E0            [24]  811 	push	acc
      0000F2 74s00            [12]  812 	mov	a,#(___str_1 >> 8)
      0000F4 C0 E0            [24]  813 	push	acc
      0000F6 74 80            [12]  814 	mov	a,#0x80
      0000F8 C0 E0            [24]  815 	push	acc
      0000FA 12r00r00         [24]  816 	lcall	_printf
      0000FD E5 81            [12]  817 	mov	a,sp
      0000FF 24 F9            [12]  818 	add	a,#0xf9
      000101 F5 81            [12]  819 	mov	sp,a
                                    820 ;	SPI.c:90: }
      000103 22               [24]  821 	ret
                                    822 ;------------------------------------------------------------
                                    823 ;Allocation info for local variables in function 'configure_SPI'
                                    824 ;------------------------------------------------------------
                                    825 ;	SPI.c:93: void configure_SPI(void)
                                    826 ;	-----------------------------------------
                                    827 ;	 function configure_SPI
                                    828 ;	-----------------------------------------
      000104                        829 _configure_SPI:
                                    830 ;	SPI.c:95: CS_PIN = 1;
                                    831 ;	assignBit
      000104 D2 91            [12]  832 	setb	_P1_1
                                    833 ;	SPI.c:96: SPCON = 0x00;
      000106 75 C3 00         [24]  834 	mov	_SPCON,#0x00
                                    835 ;	SPI.c:97: SPCON |= SS_DISABLE;
      000109 43 C3 20         [24]  836 	orl	_SPCON,#0x20
                                    837 ;	SPI.c:98: SPCON |= MASTER_MODE;
      00010C 43 C3 10         [24]  838 	orl	_SPCON,#0x10
                                    839 ;	SPI.c:99: SPCON |= SPI_ENABLE;
      00010F 43 C3 40         [24]  840 	orl	_SPCON,#0x40
                                    841 ;	SPI.c:100: }
      000112 22               [24]  842 	ret
                                    843 ;------------------------------------------------------------
                                    844 ;Allocation info for local variables in function 'SPI_send'
                                    845 ;------------------------------------------------------------
                                    846 ;data                      Allocated with name '_SPI_send_data_10000_126'
                                    847 ;------------------------------------------------------------
                                    848 ;	SPI.c:103: void SPI_send(uint8_t data)
                                    849 ;	-----------------------------------------
                                    850 ;	 function SPI_send
                                    851 ;	-----------------------------------------
      000113                        852 _SPI_send:
      000113 E5 82            [12]  853 	mov	a,dpl
      000115 90r00r06         [24]  854 	mov	dptr,#_SPI_send_data_10000_126
      000118 F0               [24]  855 	movx	@dptr,a
                                    856 ;	SPI.c:106: SPDAT = data;           // Config + MSB of data
      000119 E0               [24]  857 	movx	a,@dptr
      00011A F5 C5            [12]  858 	mov	_SPDAT,a
                                    859 ;	SPI.c:108: while (!(SPSTA & 0x80))
      00011C                        860 00101$:
      00011C E5 C4            [12]  861 	mov	a,_SPSTA
      00011E 30 E7 FB         [24]  862 	jnb	acc.7,00101$
                                    863 ;	SPI.c:113: }
      000121 22               [24]  864 	ret
                                    865 ;------------------------------------------------------------
                                    866 ;Allocation info for local variables in function 'enc_reset'
                                    867 ;------------------------------------------------------------
                                    868 ;	SPI.c:115: void enc_reset(void)
                                    869 ;	-----------------------------------------
                                    870 ;	 function enc_reset
                                    871 ;	-----------------------------------------
      000122                        872 _enc_reset:
                                    873 ;	SPI.c:117: CS_LOW;                    // Pull CS low to select the ENC28J60
                                    874 ;	assignBit
      000122 C2 91            [12]  875 	clr	_P1_1
                                    876 ;	SPI.c:118: SPI_send(0xFF);            // Send reset command
      000124 75 82 FF         [24]  877 	mov	dpl, #0xff
      000127 12r01r13         [24]  878 	lcall	_SPI_send
                                    879 ;	SPI.c:119: CS_HIGH;                   // Pull CS high to deselect the ENC28J60
                                    880 ;	assignBit
      00012A D2 91            [12]  881 	setb	_P1_1
                                    882 ;	SPI.c:120: }
      00012C 22               [24]  883 	ret
                                    884 ;------------------------------------------------------------
                                    885 ;Allocation info for local variables in function 'eth_spi_read'
                                    886 ;------------------------------------------------------------
                                    887 ;bank                      Allocated with name '_eth_spi_read_PARM_2'
                                    888 ;addr                      Allocated with name '_eth_spi_read_addr_10000_131'
                                    889 ;data                      Allocated with name '_eth_spi_read_data_10001_134'
                                    890 ;------------------------------------------------------------
                                    891 ;	SPI.c:122: uint8_t eth_spi_read(uint8_t addr, uint8_t bank)
                                    892 ;	-----------------------------------------
                                    893 ;	 function eth_spi_read
                                    894 ;	-----------------------------------------
      00012D                        895 _eth_spi_read:
      00012D E5 82            [12]  896 	mov	a,dpl
      00012F 90r00r08         [24]  897 	mov	dptr,#_eth_spi_read_addr_10000_131
      000132 F0               [24]  898 	movx	@dptr,a
                                    899 ;	SPI.c:124: if (addr > 0x1F) {
      000133 E0               [24]  900 	movx	a,@dptr
      000134 FF               [12]  901 	mov  r7,a
      000135 24 E0            [12]  902 	add	a,#0xff - 0x1f
      000137 50 19            [24]  903 	jnc	00102$
                                    904 ;	SPI.c:125: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      000139 74r30            [12]  905 	mov	a,#___str_2
      00013B C0 E0            [24]  906 	push	acc
      00013D 74s00            [12]  907 	mov	a,#(___str_2 >> 8)
      00013F C0 E0            [24]  908 	push	acc
      000141 74 80            [12]  909 	mov	a,#0x80
      000143 C0 E0            [24]  910 	push	acc
      000145 12r00r00         [24]  911 	lcall	_printf
      000148 15 81            [12]  912 	dec	sp
      00014A 15 81            [12]  913 	dec	sp
      00014C 15 81            [12]  914 	dec	sp
                                    915 ;	SPI.c:126: return 0;
      00014E 75 82 00         [24]  916 	mov	dpl, #0x00
      000151 22               [24]  917 	ret
      000152                        918 00102$:
                                    919 ;	SPI.c:129: select_reg_bank(bank);     // Select the appropriate bank
      000152 90r00r07         [24]  920 	mov	dptr,#_eth_spi_read_PARM_2
      000155 E0               [24]  921 	movx	a,@dptr
      000156 F5 82            [12]  922 	mov	dpl,a
      000158 C0 07            [24]  923 	push	ar7
      00015A 12r00r23         [24]  924 	lcall	_select_reg_bank
      00015D D0 07            [24]  925 	pop	ar7
                                    926 ;	SPI.c:131: CS_LOW;                    // Pull CS low to start communication
                                    927 ;	assignBit
      00015F C2 91            [12]  928 	clr	_P1_1
                                    929 ;	SPI.c:132: SPI_send(addr);            // Send the address
      000161 8F 82            [24]  930 	mov	dpl, r7
      000163 C0 07            [24]  931 	push	ar7
      000165 12r01r13         [24]  932 	lcall	_SPI_send
                                    933 ;	SPI.c:133: uint8_t data = SPI_ReadByte(); // Read the data
      000168 12r00r00         [24]  934 	lcall	_SPI_ReadByte
      00016B AE 82            [24]  935 	mov	r6, dpl
      00016D D0 07            [24]  936 	pop	ar7
                                    937 ;	SPI.c:134: CS_HIGH;                   // Pull CS high to end communication
                                    938 ;	assignBit
      00016F D2 91            [12]  939 	setb	_P1_1
                                    940 ;	SPI.c:137: printf("Read: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      000171 8E 04            [24]  941 	mov	ar4,r6
      000173 7D 00            [12]  942 	mov	r5,#0x00
      000175 7B 00            [12]  943 	mov	r3,#0x00
      000177 C0 06            [24]  944 	push	ar6
      000179 C0 04            [24]  945 	push	ar4
      00017B C0 05            [24]  946 	push	ar5
      00017D C0 07            [24]  947 	push	ar7
      00017F C0 03            [24]  948 	push	ar3
      000181 74r6A            [12]  949 	mov	a,#___str_3
      000183 C0 E0            [24]  950 	push	acc
      000185 74s00            [12]  951 	mov	a,#(___str_3 >> 8)
      000187 C0 E0            [24]  952 	push	acc
      000189 74 80            [12]  953 	mov	a,#0x80
      00018B C0 E0            [24]  954 	push	acc
      00018D 12r00r00         [24]  955 	lcall	_printf
      000190 E5 81            [12]  956 	mov	a,sp
      000192 24 F9            [12]  957 	add	a,#0xf9
      000194 F5 81            [12]  958 	mov	sp,a
      000196 D0 06            [24]  959 	pop	ar6
                                    960 ;	SPI.c:139: return data;
      000198 8E 82            [24]  961 	mov	dpl, r6
                                    962 ;	SPI.c:140: }
      00019A 22               [24]  963 	ret
                                    964 ;------------------------------------------------------------
                                    965 ;Allocation info for local variables in function 'phy_spi_write'
                                    966 ;------------------------------------------------------------
                                    967 ;data                      Allocated with name '_phy_spi_write_PARM_2'
                                    968 ;addr                      Allocated with name '_phy_spi_write_addr_10000_135'
                                    969 ;------------------------------------------------------------
                                    970 ;	SPI.c:142: void phy_spi_write(uint8_t addr, uint16_t data)
                                    971 ;	-----------------------------------------
                                    972 ;	 function phy_spi_write
                                    973 ;	-----------------------------------------
      00019B                        974 _phy_spi_write:
      00019B E5 82            [12]  975 	mov	a,dpl
      00019D 90r00r0B         [24]  976 	mov	dptr,#_phy_spi_write_addr_10000_135
      0001A0 F0               [24]  977 	movx	@dptr,a
                                    978 ;	SPI.c:144: spi_control_write(2, 0x14, addr);                      // Write PHY address
      0001A1 E0               [24]  979 	movx	a,@dptr
      0001A2 FF               [12]  980 	mov	r7,a
      0001A3 90r00r03         [24]  981 	mov	dptr,#_spi_control_write_PARM_2
      0001A6 74 14            [12]  982 	mov	a,#0x14
      0001A8 F0               [24]  983 	movx	@dptr,a
      0001A9 90r00r04         [24]  984 	mov	dptr,#_spi_control_write_PARM_3
      0001AC EF               [12]  985 	mov	a,r7
      0001AD F0               [24]  986 	movx	@dptr,a
      0001AE 75 82 02         [24]  987 	mov	dpl, #0x02
      0001B1 C0 07            [24]  988 	push	ar7
      0001B3 12r00rA8         [24]  989 	lcall	_spi_control_write
      0001B6 D0 07            [24]  990 	pop	ar7
                                    991 ;	SPI.c:145: spi_control_write(2, 0x16, (uint8_t)(data & 0xFF));    // Write LSB of data
      0001B8 90r00r09         [24]  992 	mov	dptr,#_phy_spi_write_PARM_2
      0001BB E0               [24]  993 	movx	a,@dptr
      0001BC FD               [12]  994 	mov	r5,a
      0001BD A3               [24]  995 	inc	dptr
      0001BE E0               [24]  996 	movx	a,@dptr
      0001BF FE               [12]  997 	mov	r6,a
      0001C0 8D 04            [24]  998 	mov	ar4,r5
      0001C2 90r00r03         [24]  999 	mov	dptr,#_spi_control_write_PARM_2
      0001C5 74 16            [12] 1000 	mov	a,#0x16
      0001C7 F0               [24] 1001 	movx	@dptr,a
      0001C8 90r00r04         [24] 1002 	mov	dptr,#_spi_control_write_PARM_3
      0001CB EC               [12] 1003 	mov	a,r4
      0001CC F0               [24] 1004 	movx	@dptr,a
      0001CD 75 82 02         [24] 1005 	mov	dpl, #0x02
      0001D0 C0 07            [24] 1006 	push	ar7
      0001D2 C0 06            [24] 1007 	push	ar6
      0001D4 C0 05            [24] 1008 	push	ar5
      0001D6 12r00rA8         [24] 1009 	lcall	_spi_control_write
      0001D9 D0 05            [24] 1010 	pop	ar5
      0001DB D0 06            [24] 1011 	pop	ar6
      0001DD D0 07            [24] 1012 	pop	ar7
                                   1013 ;	SPI.c:146: spi_control_write(2, 0x17, (uint8_t)((data >> 8) & 0xFF)); // Write MSB of data
      0001DF 8E 04            [24] 1014 	mov	ar4,r6
      0001E1 90r00r03         [24] 1015 	mov	dptr,#_spi_control_write_PARM_2
      0001E4 74 17            [12] 1016 	mov	a,#0x17
      0001E6 F0               [24] 1017 	movx	@dptr,a
      0001E7 90r00r04         [24] 1018 	mov	dptr,#_spi_control_write_PARM_3
      0001EA EC               [12] 1019 	mov	a,r4
      0001EB F0               [24] 1020 	movx	@dptr,a
      0001EC 75 82 02         [24] 1021 	mov	dpl, #0x02
      0001EF C0 07            [24] 1022 	push	ar7
      0001F1 C0 06            [24] 1023 	push	ar6
      0001F3 C0 05            [24] 1024 	push	ar5
      0001F5 12r00rA8         [24] 1025 	lcall	_spi_control_write
      0001F8 D0 05            [24] 1026 	pop	ar5
      0001FA D0 06            [24] 1027 	pop	ar6
      0001FC D0 07            [24] 1028 	pop	ar7
                                   1029 ;	SPI.c:149: printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      0001FE 7C 00            [12] 1030 	mov	r4,#0x00
      000200 C0 05            [24] 1031 	push	ar5
      000202 C0 06            [24] 1032 	push	ar6
      000204 C0 07            [24] 1033 	push	ar7
      000206 C0 04            [24] 1034 	push	ar4
      000208 74r8E            [12] 1035 	mov	a,#___str_4
      00020A C0 E0            [24] 1036 	push	acc
      00020C 74s00            [12] 1037 	mov	a,#(___str_4 >> 8)
      00020E C0 E0            [24] 1038 	push	acc
      000210 74 80            [12] 1039 	mov	a,#0x80
      000212 C0 E0            [24] 1040 	push	acc
      000214 12r00r00         [24] 1041 	lcall	_printf
      000217 E5 81            [12] 1042 	mov	a,sp
      000219 24 F9            [12] 1043 	add	a,#0xf9
      00021B F5 81            [12] 1044 	mov	sp,a
                                   1045 ;	SPI.c:150: }
      00021D 22               [24] 1046 	ret
                                   1047 ;------------------------------------------------------------
                                   1048 ;Allocation info for local variables in function 'mac_spi_read'
                                   1049 ;------------------------------------------------------------
                                   1050 ;bank                      Allocated with name '_mac_spi_read_PARM_2'
                                   1051 ;addr                      Allocated with name '_mac_spi_read_addr_10000_137'
                                   1052 ;data                      Allocated with name '_mac_spi_read_data_10001_140'
                                   1053 ;------------------------------------------------------------
                                   1054 ;	SPI.c:152: uint8_t mac_spi_read(uint8_t addr, uint8_t bank)
                                   1055 ;	-----------------------------------------
                                   1056 ;	 function mac_spi_read
                                   1057 ;	-----------------------------------------
      00021E                       1058 _mac_spi_read:
      00021E E5 82            [12] 1059 	mov	a,dpl
      000220 90r00r0D         [24] 1060 	mov	dptr,#_mac_spi_read_addr_10000_137
      000223 F0               [24] 1061 	movx	@dptr,a
                                   1062 ;	SPI.c:154: if (addr > 0x1F) {
      000224 E0               [24] 1063 	movx	a,@dptr
      000225 FF               [12] 1064 	mov  r7,a
      000226 24 E0            [12] 1065 	add	a,#0xff - 0x1f
      000228 50 19            [24] 1066 	jnc	00102$
                                   1067 ;	SPI.c:155: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      00022A 74r30            [12] 1068 	mov	a,#___str_2
      00022C C0 E0            [24] 1069 	push	acc
      00022E 74s00            [12] 1070 	mov	a,#(___str_2 >> 8)
      000230 C0 E0            [24] 1071 	push	acc
      000232 74 80            [12] 1072 	mov	a,#0x80
      000234 C0 E0            [24] 1073 	push	acc
      000236 12r00r00         [24] 1074 	lcall	_printf
      000239 15 81            [12] 1075 	dec	sp
      00023B 15 81            [12] 1076 	dec	sp
      00023D 15 81            [12] 1077 	dec	sp
                                   1078 ;	SPI.c:156: return 0; // Return 0 if address is invalid
      00023F 75 82 00         [24] 1079 	mov	dpl, #0x00
      000242 22               [24] 1080 	ret
      000243                       1081 00102$:
                                   1082 ;	SPI.c:159: select_reg_bank(bank); // Select the appropriate register bank
      000243 90r00r0C         [24] 1083 	mov	dptr,#_mac_spi_read_PARM_2
      000246 E0               [24] 1084 	movx	a,@dptr
      000247 F5 82            [12] 1085 	mov	dpl,a
      000249 C0 07            [24] 1086 	push	ar7
      00024B 12r00r23         [24] 1087 	lcall	_select_reg_bank
      00024E D0 07            [24] 1088 	pop	ar7
                                   1089 ;	SPI.c:162: CS_LOW;
                                   1090 ;	assignBit
      000250 C2 91            [12] 1091 	clr	_P1_1
                                   1092 ;	SPI.c:165: SPI_send(addr);
      000252 8F 82            [24] 1093 	mov	dpl, r7
      000254 12r01r13         [24] 1094 	lcall	_SPI_send
                                   1095 ;	SPI.c:168: uint8_t data = SPI_ReadByte();
      000257 12r00r00         [24] 1096 	lcall	_SPI_ReadByte
      00025A AF 82            [24] 1097 	mov	r7, dpl
                                   1098 ;	SPI.c:171: CS_HIGH;
                                   1099 ;	assignBit
      00025C D2 91            [12] 1100 	setb	_P1_1
                                   1101 ;	SPI.c:176: return data;
      00025E 8F 82            [24] 1102 	mov	dpl, r7
                                   1103 ;	SPI.c:177: }
      000260 22               [24] 1104 	ret
                                   1105 ;------------------------------------------------------------
                                   1106 ;Allocation info for local variables in function 'phy_spi_read'
                                   1107 ;------------------------------------------------------------
                                   1108 ;addr                      Allocated with name '_phy_spi_read_addr_10000_141'
                                   1109 ;data_LSB                  Allocated with name '_phy_spi_read_data_LSB_10001_143'
                                   1110 ;data_MSB                  Allocated with name '_phy_spi_read_data_MSB_10001_143'
                                   1111 ;data                      Allocated with name '_phy_spi_read_data_10001_143'
                                   1112 ;------------------------------------------------------------
                                   1113 ;	SPI.c:180: uint16_t phy_spi_read(uint8_t addr)
                                   1114 ;	-----------------------------------------
                                   1115 ;	 function phy_spi_read
                                   1116 ;	-----------------------------------------
      000261                       1117 _phy_spi_read:
      000261 E5 82            [12] 1118 	mov	a,dpl
      000263 90r00r0E         [24] 1119 	mov	dptr,#_phy_spi_read_addr_10000_141
      000266 F0               [24] 1120 	movx	@dptr,a
                                   1121 ;	SPI.c:182: spi_control_write(2, 0x14, addr);     // Write PHY address
      000267 E0               [24] 1122 	movx	a,@dptr
      000268 FF               [12] 1123 	mov	r7,a
      000269 90r00r03         [24] 1124 	mov	dptr,#_spi_control_write_PARM_2
      00026C 74 14            [12] 1125 	mov	a,#0x14
      00026E F0               [24] 1126 	movx	@dptr,a
      00026F 90r00r04         [24] 1127 	mov	dptr,#_spi_control_write_PARM_3
      000272 EF               [12] 1128 	mov	a,r7
      000273 F0               [24] 1129 	movx	@dptr,a
      000274 75 82 02         [24] 1130 	mov	dpl, #0x02
      000277 C0 07            [24] 1131 	push	ar7
      000279 12r00rA8         [24] 1132 	lcall	_spi_control_write
      00027C D0 07            [24] 1133 	pop	ar7
                                   1134 ;	SPI.c:183: spi_control_write(2, 0x12, 1);        // Set MICMD.MIIRD bit
      00027E 90r00r03         [24] 1135 	mov	dptr,#_spi_control_write_PARM_2
      000281 74 12            [12] 1136 	mov	a,#0x12
      000283 F0               [24] 1137 	movx	@dptr,a
      000284 90r00r04         [24] 1138 	mov	dptr,#_spi_control_write_PARM_3
      000287 74 01            [12] 1139 	mov	a,#0x01
      000289 F0               [24] 1140 	movx	@dptr,a
      00028A 75 82 02         [24] 1141 	mov	dpl, #0x02
      00028D C0 07            [24] 1142 	push	ar7
      00028F 12r00rA8         [24] 1143 	lcall	_spi_control_write
                                   1144 ;	SPI.c:185: busy_wait();                          // Wait for the read to complete
      000292 12r03r0E         [24] 1145 	lcall	_busy_wait
      000295 D0 07            [24] 1146 	pop	ar7
                                   1147 ;	SPI.c:187: spi_control_write(2, 0x12, 0);        // Clear MICMD.MIIRD bit
      000297 90r00r03         [24] 1148 	mov	dptr,#_spi_control_write_PARM_2
      00029A 74 12            [12] 1149 	mov	a,#0x12
      00029C F0               [24] 1150 	movx	@dptr,a
      00029D 90r00r04         [24] 1151 	mov	dptr,#_spi_control_write_PARM_3
      0002A0 E4               [12] 1152 	clr	a
      0002A1 F0               [24] 1153 	movx	@dptr,a
      0002A2 75 82 02         [24] 1154 	mov	dpl, #0x02
      0002A5 C0 07            [24] 1155 	push	ar7
      0002A7 12r00rA8         [24] 1156 	lcall	_spi_control_write
      0002AA D0 07            [24] 1157 	pop	ar7
                                   1158 ;	SPI.c:189: uint16_t data_LSB = mac_spi_read(0x18, 2); // Read LSB of data
      0002AC 90r00r0C         [24] 1159 	mov	dptr,#_mac_spi_read_PARM_2
      0002AF 74 02            [12] 1160 	mov	a,#0x02
      0002B1 F0               [24] 1161 	movx	@dptr,a
      0002B2 75 82 18         [24] 1162 	mov	dpl, #0x18
      0002B5 C0 07            [24] 1163 	push	ar7
      0002B7 12r02r1E         [24] 1164 	lcall	_mac_spi_read
      0002BA AE 82            [24] 1165 	mov	r6, dpl
      0002BC D0 07            [24] 1166 	pop	ar7
      0002BE 7D 00            [12] 1167 	mov	r5,#0x00
                                   1168 ;	SPI.c:190: uint16_t data_MSB = mac_spi_read(0x19, 2); // Read MSB of data
      0002C0 90r00r0C         [24] 1169 	mov	dptr,#_mac_spi_read_PARM_2
      0002C3 74 02            [12] 1170 	mov	a,#0x02
      0002C5 F0               [24] 1171 	movx	@dptr,a
      0002C6 75 82 19         [24] 1172 	mov	dpl, #0x19
      0002C9 C0 07            [24] 1173 	push	ar7
      0002CB C0 06            [24] 1174 	push	ar6
      0002CD C0 05            [24] 1175 	push	ar5
      0002CF 12r02r1E         [24] 1176 	lcall	_mac_spi_read
      0002D2 AC 82            [24] 1177 	mov	r4, dpl
      0002D4 D0 05            [24] 1178 	pop	ar5
      0002D6 D0 06            [24] 1179 	pop	ar6
      0002D8 D0 07            [24] 1180 	pop	ar7
                                   1181 ;	SPI.c:192: uint16_t data = (data_MSB << 8) | data_LSB;        // Combine MSB and LSB
      0002DA 8C 03            [24] 1182 	mov	ar3,r4
      0002DC E4               [12] 1183 	clr	a
      0002DD 42 06            [12] 1184 	orl	ar6,a
      0002DF EB               [12] 1185 	mov	a,r3
      0002E0 42 05            [12] 1186 	orl	ar5,a
                                   1187 ;	SPI.c:195: printf("PHY Read: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      0002E2 7C 00            [12] 1188 	mov	r4,#0x00
      0002E4 C0 06            [24] 1189 	push	ar6
      0002E6 C0 05            [24] 1190 	push	ar5
      0002E8 C0 06            [24] 1191 	push	ar6
      0002EA C0 05            [24] 1192 	push	ar5
      0002EC C0 07            [24] 1193 	push	ar7
      0002EE C0 04            [24] 1194 	push	ar4
      0002F0 74rB7            [12] 1195 	mov	a,#___str_5
      0002F2 C0 E0            [24] 1196 	push	acc
      0002F4 74s00            [12] 1197 	mov	a,#(___str_5 >> 8)
      0002F6 C0 E0            [24] 1198 	push	acc
      0002F8 74 80            [12] 1199 	mov	a,#0x80
      0002FA C0 E0            [24] 1200 	push	acc
      0002FC 12r00r00         [24] 1201 	lcall	_printf
      0002FF E5 81            [12] 1202 	mov	a,sp
      000301 24 F9            [12] 1203 	add	a,#0xf9
      000303 F5 81            [12] 1204 	mov	sp,a
      000305 D0 05            [24] 1205 	pop	ar5
      000307 D0 06            [24] 1206 	pop	ar6
                                   1207 ;	SPI.c:197: return data;        // Combine MSB and LSB
      000309 8E 82            [24] 1208 	mov	dpl, r6
      00030B 8D 83            [24] 1209 	mov	dph, r5
                                   1210 ;	SPI.c:198: }
      00030D 22               [24] 1211 	ret
                                   1212 ;------------------------------------------------------------
                                   1213 ;Allocation info for local variables in function 'busy_wait'
                                   1214 ;------------------------------------------------------------
                                   1215 ;data                      Allocated with name '_busy_wait_data_10000_145'
                                   1216 ;------------------------------------------------------------
                                   1217 ;	SPI.c:200: void busy_wait(void)
                                   1218 ;	-----------------------------------------
                                   1219 ;	 function busy_wait
                                   1220 ;	-----------------------------------------
      00030E                       1221 _busy_wait:
                                   1222 ;	SPI.c:202: uint8_t data = mac_spi_read(0x0A, 3); // Read ESTAT register (bank 3)
      00030E 90r00r0C         [24] 1223 	mov	dptr,#_mac_spi_read_PARM_2
      000311 74 03            [12] 1224 	mov	a,#0x03
      000313 F0               [24] 1225 	movx	@dptr,a
      000314 75 82 0A         [24] 1226 	mov	dpl, #0x0a
      000317 12r02r1E         [24] 1227 	lcall	_mac_spi_read
      00031A E5 82            [12] 1228 	mov	a, dpl
      00031C 90r00r0F         [24] 1229 	mov	dptr,#_busy_wait_data_10000_145
      00031F F0               [24] 1230 	movx	@dptr,a
                                   1231 ;	SPI.c:203: while (data & 0x01)
      000320                       1232 00101$:
      000320 90r00r0F         [24] 1233 	mov	dptr,#_busy_wait_data_10000_145
      000323 E0               [24] 1234 	movx	a,@dptr
      000324 30 E0 14         [24] 1235 	jnb	acc.0,00104$
                                   1236 ;	SPI.c:205: data = mac_spi_read(0x0A, 3);
      000327 90r00r0C         [24] 1237 	mov	dptr,#_mac_spi_read_PARM_2
      00032A 74 03            [12] 1238 	mov	a,#0x03
      00032C F0               [24] 1239 	movx	@dptr,a
      00032D 75 82 0A         [24] 1240 	mov	dpl, #0x0a
      000330 12r02r1E         [24] 1241 	lcall	_mac_spi_read
      000333 E5 82            [12] 1242 	mov	a, dpl
      000335 90r00r0F         [24] 1243 	mov	dptr,#_busy_wait_data_10000_145
      000338 F0               [24] 1244 	movx	@dptr,a
      000339 80 E5            [24] 1245 	sjmp	00101$
      00033B                       1246 00104$:
                                   1247 ;	SPI.c:207: }
      00033B 22               [24] 1248 	ret
                                   1249 ;------------------------------------------------------------
                                   1250 ;Allocation info for local variables in function 'buffer_init'
                                   1251 ;------------------------------------------------------------
                                   1252 ;size                      Allocated with name '_buffer_init_PARM_2'
                                   1253 ;start_address             Allocated with name '_buffer_init_start_address_10000_147'
                                   1254 ;erxst                     Allocated with name '_buffer_init_erxst_10001_150'
                                   1255 ;erxnd                     Allocated with name '_buffer_init_erxnd_10001_150'
                                   1256 ;------------------------------------------------------------
                                   1257 ;	SPI.c:209: void buffer_init(uint16_t start_address, uint16_t size)
                                   1258 ;	-----------------------------------------
                                   1259 ;	 function buffer_init
                                   1260 ;	-----------------------------------------
      00033C                       1261 _buffer_init:
      00033C AF 83            [24] 1262 	mov	r7,dph
      00033E E5 82            [12] 1263 	mov	a,dpl
      000340 90r00r12         [24] 1264 	mov	dptr,#_buffer_init_start_address_10000_147
      000343 F0               [24] 1265 	movx	@dptr,a
      000344 EF               [12] 1266 	mov	a,r7
      000345 A3               [24] 1267 	inc	dptr
      000346 F0               [24] 1268 	movx	@dptr,a
                                   1269 ;	SPI.c:211: if (start_address > 0x1FFF || (start_address + size) > 0x1FFF) {
      000347 90r00r12         [24] 1270 	mov	dptr,#_buffer_init_start_address_10000_147
      00034A E0               [24] 1271 	movx	a,@dptr
      00034B FE               [12] 1272 	mov	r6,a
      00034C A3               [24] 1273 	inc	dptr
      00034D E0               [24] 1274 	movx	a,@dptr
      00034E FF               [12] 1275 	mov	r7,a
      00034F 8E 04            [24] 1276 	mov	ar4,r6
      000351 8F 05            [24] 1277 	mov	ar5,r7
      000353 C3               [12] 1278 	clr	c
      000354 74 FF            [12] 1279 	mov	a,#0xff
      000356 9C               [12] 1280 	subb	a,r4
      000357 74 1F            [12] 1281 	mov	a,#0x1f
      000359 9D               [12] 1282 	subb	a,r5
      00035A 40 17            [24] 1283 	jc	00101$
      00035C 90r00r10         [24] 1284 	mov	dptr,#_buffer_init_PARM_2
      00035F E0               [24] 1285 	movx	a,@dptr
      000360 FA               [12] 1286 	mov	r2,a
      000361 A3               [24] 1287 	inc	dptr
      000362 E0               [24] 1288 	movx	a,@dptr
      000363 FB               [12] 1289 	mov	r3,a
      000364 EA               [12] 1290 	mov	a,r2
      000365 2E               [12] 1291 	add	a, r6
      000366 F8               [12] 1292 	mov	r0,a
      000367 EB               [12] 1293 	mov	a,r3
      000368 3F               [12] 1294 	addc	a, r7
      000369 F9               [12] 1295 	mov	r1,a
      00036A C3               [12] 1296 	clr	c
      00036B 74 FF            [12] 1297 	mov	a,#0xff
      00036D 98               [12] 1298 	subb	a,r0
      00036E 74 1F            [12] 1299 	mov	a,#0x1f
      000370 99               [12] 1300 	subb	a,r1
      000371 50 2A            [24] 1301 	jnc	00102$
      000373                       1302 00101$:
                                   1303 ;	SPI.c:212: printf("\n\rInvalid Buffer Address or Size: Start 0x%04X, Size 0x%04X\n\r", start_address, size);
      000373 90r00r10         [24] 1304 	mov	dptr,#_buffer_init_PARM_2
      000376 E0               [24] 1305 	movx	a,@dptr
      000377 C0 E0            [24] 1306 	push	acc
      000379 A3               [24] 1307 	inc	dptr
      00037A E0               [24] 1308 	movx	a,@dptr
      00037B C0 E0            [24] 1309 	push	acc
      00037D 90r00r12         [24] 1310 	mov	dptr,#_buffer_init_start_address_10000_147
      000380 E0               [24] 1311 	movx	a,@dptr
      000381 C0 E0            [24] 1312 	push	acc
      000383 A3               [24] 1313 	inc	dptr
      000384 E0               [24] 1314 	movx	a,@dptr
      000385 C0 E0            [24] 1315 	push	acc
      000387 74rDF            [12] 1316 	mov	a,#___str_6
      000389 C0 E0            [24] 1317 	push	acc
      00038B 74s00            [12] 1318 	mov	a,#(___str_6 >> 8)
      00038D C0 E0            [24] 1319 	push	acc
      00038F 74 80            [12] 1320 	mov	a,#0x80
      000391 C0 E0            [24] 1321 	push	acc
      000393 12r00r00         [24] 1322 	lcall	_printf
      000396 E5 81            [12] 1323 	mov	a,sp
      000398 24 F9            [12] 1324 	add	a,#0xf9
      00039A F5 81            [12] 1325 	mov	sp,a
                                   1326 ;	SPI.c:213: return;
      00039C 22               [24] 1327 	ret
      00039D                       1328 00102$:
                                   1329 ;	SPI.c:217: uint16_t erxst = start_address & ~1; // Make sure ERXST is even
      00039D 53 04 FE         [24] 1330 	anl	ar4,#0xfe
                                   1331 ;	SPI.c:218: uint16_t erxnd = (start_address + size - 1) & ~1; // Make sure ERXND is even
      0003A0 EA               [12] 1332 	mov	a,r2
      0003A1 2E               [12] 1333 	add	a, r6
      0003A2 FE               [12] 1334 	mov	r6,a
      0003A3 EB               [12] 1335 	mov	a,r3
      0003A4 3F               [12] 1336 	addc	a, r7
      0003A5 FF               [12] 1337 	mov	r7,a
      0003A6 1E               [12] 1338 	dec	r6
      0003A7 BE FF 01         [24] 1339 	cjne	r6,#0xff,00114$
      0003AA 1F               [12] 1340 	dec	r7
      0003AB                       1341 00114$:
      0003AB 53 06 FE         [24] 1342 	anl	ar6,#0xfe
                                   1343 ;	SPI.c:221: spi_control_write(0, 0x08, (uint8_t)(erxst >> 8)); // High byte of ERXST
      0003AE 8D 03            [24] 1344 	mov	ar3,r5
      0003B0 90r00r03         [24] 1345 	mov	dptr,#_spi_control_write_PARM_2
      0003B3 74 08            [12] 1346 	mov	a,#0x08
      0003B5 F0               [24] 1347 	movx	@dptr,a
      0003B6 90r00r04         [24] 1348 	mov	dptr,#_spi_control_write_PARM_3
      0003B9 EB               [12] 1349 	mov	a,r3
      0003BA F0               [24] 1350 	movx	@dptr,a
      0003BB 75 82 00         [24] 1351 	mov	dpl, #0x00
      0003BE C0 07            [24] 1352 	push	ar7
      0003C0 C0 06            [24] 1353 	push	ar6
      0003C2 C0 05            [24] 1354 	push	ar5
      0003C4 C0 04            [24] 1355 	push	ar4
      0003C6 12r00rA8         [24] 1356 	lcall	_spi_control_write
      0003C9 D0 04            [24] 1357 	pop	ar4
      0003CB D0 05            [24] 1358 	pop	ar5
      0003CD D0 06            [24] 1359 	pop	ar6
      0003CF D0 07            [24] 1360 	pop	ar7
                                   1361 ;	SPI.c:222: spi_control_write(0, 0x09, (uint8_t)(erxst & 0xFF)); // Low byte of ERXST
      0003D1 8C 03            [24] 1362 	mov	ar3,r4
      0003D3 90r00r03         [24] 1363 	mov	dptr,#_spi_control_write_PARM_2
      0003D6 74 09            [12] 1364 	mov	a,#0x09
      0003D8 F0               [24] 1365 	movx	@dptr,a
      0003D9 90r00r04         [24] 1366 	mov	dptr,#_spi_control_write_PARM_3
      0003DC EB               [12] 1367 	mov	a,r3
      0003DD F0               [24] 1368 	movx	@dptr,a
      0003DE 75 82 00         [24] 1369 	mov	dpl, #0x00
      0003E1 C0 07            [24] 1370 	push	ar7
      0003E3 C0 06            [24] 1371 	push	ar6
      0003E5 C0 05            [24] 1372 	push	ar5
      0003E7 C0 04            [24] 1373 	push	ar4
      0003E9 12r00rA8         [24] 1374 	lcall	_spi_control_write
      0003EC D0 04            [24] 1375 	pop	ar4
      0003EE D0 05            [24] 1376 	pop	ar5
      0003F0 D0 06            [24] 1377 	pop	ar6
      0003F2 D0 07            [24] 1378 	pop	ar7
                                   1379 ;	SPI.c:225: spi_control_write(0, 0x0A, (uint8_t)(erxnd >> 8)); // High byte of ERXND
      0003F4 8F 03            [24] 1380 	mov	ar3,r7
      0003F6 90r00r03         [24] 1381 	mov	dptr,#_spi_control_write_PARM_2
      0003F9 74 0A            [12] 1382 	mov	a,#0x0a
      0003FB F0               [24] 1383 	movx	@dptr,a
      0003FC 90r00r04         [24] 1384 	mov	dptr,#_spi_control_write_PARM_3
      0003FF EB               [12] 1385 	mov	a,r3
      000400 F0               [24] 1386 	movx	@dptr,a
      000401 75 82 00         [24] 1387 	mov	dpl, #0x00
      000404 C0 07            [24] 1388 	push	ar7
      000406 C0 06            [24] 1389 	push	ar6
      000408 C0 05            [24] 1390 	push	ar5
      00040A C0 04            [24] 1391 	push	ar4
      00040C 12r00rA8         [24] 1392 	lcall	_spi_control_write
      00040F D0 04            [24] 1393 	pop	ar4
      000411 D0 05            [24] 1394 	pop	ar5
      000413 D0 06            [24] 1395 	pop	ar6
      000415 D0 07            [24] 1396 	pop	ar7
                                   1397 ;	SPI.c:226: spi_control_write(0, 0x0B, (uint8_t)(erxnd & 0xFF)); // Low byte of ERXND
      000417 8E 03            [24] 1398 	mov	ar3,r6
      000419 90r00r03         [24] 1399 	mov	dptr,#_spi_control_write_PARM_2
      00041C 74 0B            [12] 1400 	mov	a,#0x0b
      00041E F0               [24] 1401 	movx	@dptr,a
      00041F 90r00r04         [24] 1402 	mov	dptr,#_spi_control_write_PARM_3
      000422 EB               [12] 1403 	mov	a,r3
      000423 F0               [24] 1404 	movx	@dptr,a
      000424 75 82 00         [24] 1405 	mov	dpl, #0x00
      000427 C0 07            [24] 1406 	push	ar7
      000429 C0 06            [24] 1407 	push	ar6
      00042B C0 05            [24] 1408 	push	ar5
      00042D C0 04            [24] 1409 	push	ar4
      00042F 12r00rA8         [24] 1410 	lcall	_spi_control_write
      000432 D0 04            [24] 1411 	pop	ar4
      000434 D0 05            [24] 1412 	pop	ar5
      000436 D0 06            [24] 1413 	pop	ar6
      000438 D0 07            [24] 1414 	pop	ar7
                                   1415 ;	SPI.c:228: printf("\n\rBuffer Initialized: Start 0x%04X, End 0x%04X\n\r", erxst, erxnd);
      00043A C0 06            [24] 1416 	push	ar6
      00043C C0 07            [24] 1417 	push	ar7
      00043E C0 04            [24] 1418 	push	ar4
      000440 C0 05            [24] 1419 	push	ar5
      000442 74r1D            [12] 1420 	mov	a,#___str_7
      000444 C0 E0            [24] 1421 	push	acc
      000446 74s01            [12] 1422 	mov	a,#(___str_7 >> 8)
      000448 C0 E0            [24] 1423 	push	acc
      00044A 74 80            [12] 1424 	mov	a,#0x80
      00044C C0 E0            [24] 1425 	push	acc
      00044E 12r00r00         [24] 1426 	lcall	_printf
      000451 E5 81            [12] 1427 	mov	a,sp
      000453 24 F9            [12] 1428 	add	a,#0xf9
      000455 F5 81            [12] 1429 	mov	sp,a
                                   1430 ;	SPI.c:229: }
      000457 22               [24] 1431 	ret
                                   1432 ;------------------------------------------------------------
                                   1433 ;Allocation info for local variables in function 'spi_buffer_read'
                                   1434 ;------------------------------------------------------------
                                   1435 ;start_address             Allocated with name '_spi_buffer_read_PARM_2'
                                   1436 ;data_ptr                  Allocated with name '_spi_buffer_read_PARM_3'
                                   1437 ;num_bytes                 Allocated with name '_spi_buffer_read_num_bytes_10000_151'
                                   1438 ;higher_byte               Allocated with name '_spi_buffer_read_higher_byte_10001_157'
                                   1439 ;lower_byte                Allocated with name '_spi_buffer_read_lower_byte_10001_157'
                                   1440 ;opcode                    Allocated with name '_spi_buffer_read_opcode_10002_158'
                                   1441 ;i                         Allocated with name '_spi_buffer_read_i_20002_159'
                                   1442 ;------------------------------------------------------------
                                   1443 ;	SPI.c:232: uint16_t spi_buffer_read(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1444 ;	-----------------------------------------
                                   1445 ;	 function spi_buffer_read
                                   1446 ;	-----------------------------------------
      000458                       1447 _spi_buffer_read:
      000458 AF 83            [24] 1448 	mov	r7,dph
      00045A E5 82            [12] 1449 	mov	a,dpl
      00045C 90r00r19         [24] 1450 	mov	dptr,#_spi_buffer_read_num_bytes_10000_151
      00045F F0               [24] 1451 	movx	@dptr,a
      000460 EF               [12] 1452 	mov	a,r7
      000461 A3               [24] 1453 	inc	dptr
      000462 F0               [24] 1454 	movx	@dptr,a
                                   1455 ;	SPI.c:234: if (num_bytes < 1) {
      000463 90r00r19         [24] 1456 	mov	dptr,#_spi_buffer_read_num_bytes_10000_151
      000466 E0               [24] 1457 	movx	a,@dptr
      000467 FE               [12] 1458 	mov	r6,a
      000468 A3               [24] 1459 	inc	dptr
      000469 E0               [24] 1460 	movx	a,@dptr
      00046A FF               [12] 1461 	mov	r7,a
      00046B C3               [12] 1462 	clr	c
      00046C EE               [12] 1463 	mov	a,r6
      00046D 94 01            [12] 1464 	subb	a,#0x01
      00046F EF               [12] 1465 	mov	a,r7
      000470 64 80            [12] 1466 	xrl	a,#0x80
      000472 94 80            [12] 1467 	subb	a,#0x80
      000474 50 1A            [24] 1468 	jnc	00102$
                                   1469 ;	SPI.c:235: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      000476 C0 06            [24] 1470 	push	ar6
      000478 C0 07            [24] 1471 	push	ar7
      00047A 74r4E            [12] 1472 	mov	a,#___str_8
      00047C C0 E0            [24] 1473 	push	acc
      00047E 74s01            [12] 1474 	mov	a,#(___str_8 >> 8)
      000480 C0 E0            [24] 1475 	push	acc
      000482 74 80            [12] 1476 	mov	a,#0x80
      000484 C0 E0            [24] 1477 	push	acc
      000486 12r00r00         [24] 1478 	lcall	_printf
      000489 E5 81            [12] 1479 	mov	a,sp
      00048B 24 FB            [12] 1480 	add	a,#0xfb
      00048D F5 81            [12] 1481 	mov	sp,a
                                   1482 ;	SPI.c:236: return;
      00048F 22               [24] 1483 	ret
      000490                       1484 00102$:
                                   1485 ;	SPI.c:238: if (start_address > 0x1FFF) {
      000490 90r00r14         [24] 1486 	mov	dptr,#_spi_buffer_read_PARM_2
      000493 E0               [24] 1487 	movx	a,@dptr
      000494 FC               [12] 1488 	mov	r4,a
      000495 A3               [24] 1489 	inc	dptr
      000496 E0               [24] 1490 	movx	a,@dptr
      000497 FD               [12] 1491 	mov	r5,a
      000498 8C 02            [24] 1492 	mov	ar2,r4
      00049A 8D 03            [24] 1493 	mov	ar3,r5
      00049C C3               [12] 1494 	clr	c
      00049D 74 FF            [12] 1495 	mov	a,#0xff
      00049F 9A               [12] 1496 	subb	a,r2
      0004A0 74 1F            [12] 1497 	mov	a,#0x1f
      0004A2 9B               [12] 1498 	subb	a,r3
      0004A3 50 1A            [24] 1499 	jnc	00107$
                                   1500 ;	SPI.c:239: printf("\n\rInvalid address: %04X\n\r", start_address);
      0004A5 C0 04            [24] 1501 	push	ar4
      0004A7 C0 05            [24] 1502 	push	ar5
      0004A9 74r6E            [12] 1503 	mov	a,#___str_9
      0004AB C0 E0            [24] 1504 	push	acc
      0004AD 74s01            [12] 1505 	mov	a,#(___str_9 >> 8)
      0004AF C0 E0            [24] 1506 	push	acc
      0004B1 74 80            [12] 1507 	mov	a,#0x80
      0004B3 C0 E0            [24] 1508 	push	acc
      0004B5 12r00r00         [24] 1509 	lcall	_printf
      0004B8 E5 81            [12] 1510 	mov	a,sp
      0004BA 24 FB            [12] 1511 	add	a,#0xfb
      0004BC F5 81            [12] 1512 	mov	sp,a
                                   1513 ;	SPI.c:240: return;
      0004BE 22               [24] 1514 	ret
                                   1515 ;	SPI.c:243: || (start_address + num_bytes) > RX_BUFFER_END) {
      0004BF                       1516 00107$:
      0004BF 8E 00            [24] 1517 	mov	ar0,r6
      0004C1 8F 01            [24] 1518 	mov	ar1,r7
      0004C3 E8               [12] 1519 	mov	a,r0
      0004C4 2A               [12] 1520 	add	a, r2
      0004C5 FA               [12] 1521 	mov	r2,a
      0004C6 E9               [12] 1522 	mov	a,r1
      0004C7 3B               [12] 1523 	addc	a, r3
      0004C8 FB               [12] 1524 	mov	r3,a
      0004C9 C3               [12] 1525 	clr	c
      0004CA 74 FF            [12] 1526 	mov	a,#0xff
      0004CC 9A               [12] 1527 	subb	a,r2
      0004CD 74 0B            [12] 1528 	mov	a,#0x0b
      0004CF 9B               [12] 1529 	subb	a,r3
      0004D0 50 21            [24] 1530 	jnc	00106$
                                   1531 ;	SPI.c:244: printf("\nInvalid RX Address: Start 0x%04X, Size %d\n", start_address,
      0004D2 C0 06            [24] 1532 	push	ar6
      0004D4 C0 07            [24] 1533 	push	ar7
      0004D6 C0 04            [24] 1534 	push	ar4
      0004D8 C0 05            [24] 1535 	push	ar5
      0004DA 74r88            [12] 1536 	mov	a,#___str_10
      0004DC C0 E0            [24] 1537 	push	acc
      0004DE 74s01            [12] 1538 	mov	a,#(___str_10 >> 8)
      0004E0 C0 E0            [24] 1539 	push	acc
      0004E2 74 80            [12] 1540 	mov	a,#0x80
      0004E4 C0 E0            [24] 1541 	push	acc
      0004E6 12r00r00         [24] 1542 	lcall	_printf
      0004E9 E5 81            [12] 1543 	mov	a,sp
      0004EB 24 F9            [12] 1544 	add	a,#0xf9
      0004ED F5 81            [12] 1545 	mov	sp,a
                                   1546 ;	SPI.c:246: return 0;
      0004EF 90 00 00         [24] 1547 	mov	dptr,#0x0000
      0004F2 22               [24] 1548 	ret
      0004F3                       1549 00106$:
                                   1550 ;	SPI.c:249: if (num_bytes > 1) {
      0004F3 C3               [12] 1551 	clr	c
      0004F4 74 01            [12] 1552 	mov	a,#0x01
      0004F6 9E               [12] 1553 	subb	a,r6
      0004F7 74 80            [12] 1554 	mov	a,#(0x00 ^ 0x80)
      0004F9 8F F0            [24] 1555 	mov	b,r7
      0004FB 63 F0 80         [24] 1556 	xrl	b,#0x80
      0004FE 95 F0            [12] 1557 	subb	a,b
      000500 50 0B            [24] 1558 	jnc	00109$
                                   1559 ;	SPI.c:250: spi_set_autoinc();
      000502 C0 05            [24] 1560 	push	ar5
      000504 C0 04            [24] 1561 	push	ar4
      000506 12r00r12         [24] 1562 	lcall	_spi_set_autoinc
      000509 D0 04            [24] 1563 	pop	ar4
      00050B D0 05            [24] 1564 	pop	ar5
      00050D                       1565 00109$:
                                   1566 ;	SPI.c:254: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      00050D 8D 07            [24] 1567 	mov	ar7,r5
                                   1568 ;	SPI.c:255: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      00050F 8C 06            [24] 1569 	mov	ar6,r4
                                   1570 ;	SPI.c:257: spi_control_write(0, 0x01, higher_byte); // High byte
      000511 90r00r03         [24] 1571 	mov	dptr,#_spi_control_write_PARM_2
      000514 74 01            [12] 1572 	mov	a,#0x01
      000516 F0               [24] 1573 	movx	@dptr,a
      000517 90r00r04         [24] 1574 	mov	dptr,#_spi_control_write_PARM_3
      00051A EF               [12] 1575 	mov	a,r7
      00051B F0               [24] 1576 	movx	@dptr,a
      00051C 75 82 00         [24] 1577 	mov	dpl, #0x00
      00051F C0 06            [24] 1578 	push	ar6
      000521 C0 05            [24] 1579 	push	ar5
      000523 C0 04            [24] 1580 	push	ar4
      000525 12r00rA8         [24] 1581 	lcall	_spi_control_write
      000528 D0 04            [24] 1582 	pop	ar4
      00052A D0 05            [24] 1583 	pop	ar5
      00052C D0 06            [24] 1584 	pop	ar6
                                   1585 ;	SPI.c:258: spi_control_write(0, 0x00, lower_byte); // Low byte
      00052E 90r00r03         [24] 1586 	mov	dptr,#_spi_control_write_PARM_2
      000531 E4               [12] 1587 	clr	a
      000532 F0               [24] 1588 	movx	@dptr,a
      000533 90r00r04         [24] 1589 	mov	dptr,#_spi_control_write_PARM_3
      000536 EE               [12] 1590 	mov	a,r6
      000537 F0               [24] 1591 	movx	@dptr,a
      000538 75 82 00         [24] 1592 	mov	dpl, #0x00
      00053B C0 05            [24] 1593 	push	ar5
      00053D C0 04            [24] 1594 	push	ar4
      00053F 12r00rA8         [24] 1595 	lcall	_spi_control_write
                                   1596 ;	SPI.c:261: CS_LOW; // Pull CS Low
                                   1597 ;	assignBit
      000542 C2 91            [12] 1598 	clr	_P1_1
                                   1599 ;	SPI.c:262: SPI_send(opcode); // Send opcode
      000544 75 82 3A         [24] 1600 	mov	dpl, #0x3a
      000547 12r01r13         [24] 1601 	lcall	_SPI_send
      00054A D0 04            [24] 1602 	pop	ar4
      00054C D0 05            [24] 1603 	pop	ar5
                                   1604 ;	SPI.c:265: printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      00054E 90r00r19         [24] 1605 	mov	dptr,#_spi_buffer_read_num_bytes_10000_151
      000551 E0               [24] 1606 	movx	a,@dptr
      000552 FE               [12] 1607 	mov	r6,a
      000553 A3               [24] 1608 	inc	dptr
      000554 E0               [24] 1609 	movx	a,@dptr
      000555 FF               [12] 1610 	mov	r7,a
      000556 C0 07            [24] 1611 	push	ar7
      000558 C0 06            [24] 1612 	push	ar6
      00055A C0 04            [24] 1613 	push	ar4
      00055C C0 05            [24] 1614 	push	ar5
      00055E C0 06            [24] 1615 	push	ar6
      000560 C0 07            [24] 1616 	push	ar7
      000562 74rB4            [12] 1617 	mov	a,#___str_11
      000564 C0 E0            [24] 1618 	push	acc
      000566 74s01            [12] 1619 	mov	a,#(___str_11 >> 8)
      000568 C0 E0            [24] 1620 	push	acc
      00056A 74 80            [12] 1621 	mov	a,#0x80
      00056C C0 E0            [24] 1622 	push	acc
      00056E 12r00r00         [24] 1623 	lcall	_printf
      000571 E5 81            [12] 1624 	mov	a,sp
      000573 24 F9            [12] 1625 	add	a,#0xf9
      000575 F5 81            [12] 1626 	mov	sp,a
      000577 D0 06            [24] 1627 	pop	ar6
      000579 D0 07            [24] 1628 	pop	ar7
                                   1629 ;	SPI.c:266: for (int i = 0; i < num_bytes; i++) {
      00057B 90r00r16         [24] 1630 	mov	dptr,#_spi_buffer_read_PARM_3
      00057E E0               [24] 1631 	movx	a,@dptr
      00057F FB               [12] 1632 	mov	r3,a
      000580 A3               [24] 1633 	inc	dptr
      000581 E0               [24] 1634 	movx	a,@dptr
      000582 FC               [12] 1635 	mov	r4,a
      000583 A3               [24] 1636 	inc	dptr
      000584 E0               [24] 1637 	movx	a,@dptr
      000585 FD               [12] 1638 	mov	r5,a
      000586 79 00            [12] 1639 	mov	r1,#0x00
      000588 7A 00            [12] 1640 	mov	r2,#0x00
      00058A                       1641 00112$:
      00058A C3               [12] 1642 	clr	c
      00058B E9               [12] 1643 	mov	a,r1
      00058C 9E               [12] 1644 	subb	a,r6
      00058D EA               [12] 1645 	mov	a,r2
      00058E 64 80            [12] 1646 	xrl	a,#0x80
      000590 8F F0            [24] 1647 	mov	b,r7
      000592 63 F0 80         [24] 1648 	xrl	b,#0x80
      000595 95 F0            [12] 1649 	subb	a,b
      000597 50 37            [24] 1650 	jnc	00110$
                                   1651 ;	SPI.c:267: *data_ptr = SPI_ReadByte(); // Read data
      000599 C0 07            [24] 1652 	push	ar7
      00059B C0 06            [24] 1653 	push	ar6
      00059D C0 05            [24] 1654 	push	ar5
      00059F C0 04            [24] 1655 	push	ar4
      0005A1 C0 03            [24] 1656 	push	ar3
      0005A3 C0 02            [24] 1657 	push	ar2
      0005A5 C0 01            [24] 1658 	push	ar1
      0005A7 12r00r00         [24] 1659 	lcall	_SPI_ReadByte
      0005AA A8 82            [24] 1660 	mov	r0, dpl
      0005AC D0 01            [24] 1661 	pop	ar1
      0005AE D0 02            [24] 1662 	pop	ar2
      0005B0 D0 03            [24] 1663 	pop	ar3
      0005B2 D0 04            [24] 1664 	pop	ar4
      0005B4 D0 05            [24] 1665 	pop	ar5
      0005B6 D0 06            [24] 1666 	pop	ar6
      0005B8 D0 07            [24] 1667 	pop	ar7
      0005BA 8B 82            [24] 1668 	mov	dpl,r3
      0005BC 8C 83            [24] 1669 	mov	dph,r4
      0005BE 8D F0            [24] 1670 	mov	b,r5
      0005C0 E8               [12] 1671 	mov	a,r0
      0005C1 12r00r00         [24] 1672 	lcall	__gptrput
      0005C4 A3               [24] 1673 	inc	dptr
      0005C5 AB 82            [24] 1674 	mov	r3,dpl
      0005C7 AC 83            [24] 1675 	mov	r4,dph
                                   1676 ;	SPI.c:269: data_ptr++;
                                   1677 ;	SPI.c:266: for (int i = 0; i < num_bytes; i++) {
      0005C9 09               [12] 1678 	inc	r1
      0005CA B9 00 BD         [24] 1679 	cjne	r1,#0x00,00112$
      0005CD 0A               [12] 1680 	inc	r2
      0005CE 80 BA            [24] 1681 	sjmp	00112$
      0005D0                       1682 00110$:
                                   1683 ;	SPI.c:271: CS_HIGH; // Pull CS High
                                   1684 ;	assignBit
      0005D0 D2 91            [12] 1685 	setb	_P1_1
                                   1686 ;	SPI.c:272: return (uint16_t) num_bytes;
      0005D2 8E 82            [24] 1687 	mov	dpl, r6
      0005D4 8F 83            [24] 1688 	mov	dph, r7
                                   1689 ;	SPI.c:273: }
      0005D6 22               [24] 1690 	ret
                                   1691 ;------------------------------------------------------------
                                   1692 ;Allocation info for local variables in function 'spi_buffer_write'
                                   1693 ;------------------------------------------------------------
                                   1694 ;start_address             Allocated with name '_spi_buffer_write_PARM_2'
                                   1695 ;data_ptr                  Allocated with name '_spi_buffer_write_PARM_3'
                                   1696 ;num_bytes                 Allocated with name '_spi_buffer_write_num_bytes_10000_161'
                                   1697 ;higher_byte               Allocated with name '_spi_buffer_write_higher_byte_10001_166'
                                   1698 ;lower_byte                Allocated with name '_spi_buffer_write_lower_byte_10001_166'
                                   1699 ;opcode                    Allocated with name '_spi_buffer_write_opcode_10002_167'
                                   1700 ;i                         Allocated with name '_spi_buffer_write_i_20002_168'
                                   1701 ;------------------------------------------------------------
                                   1702 ;	SPI.c:276: void spi_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1703 ;	-----------------------------------------
                                   1704 ;	 function spi_buffer_write
                                   1705 ;	-----------------------------------------
      0005D7                       1706 _spi_buffer_write:
      0005D7 AF 83            [24] 1707 	mov	r7,dph
      0005D9 E5 82            [12] 1708 	mov	a,dpl
      0005DB 90r00r20         [24] 1709 	mov	dptr,#_spi_buffer_write_num_bytes_10000_161
      0005DE F0               [24] 1710 	movx	@dptr,a
      0005DF EF               [12] 1711 	mov	a,r7
      0005E0 A3               [24] 1712 	inc	dptr
      0005E1 F0               [24] 1713 	movx	@dptr,a
                                   1714 ;	SPI.c:278: if (num_bytes < 1)
      0005E2 90r00r20         [24] 1715 	mov	dptr,#_spi_buffer_write_num_bytes_10000_161
      0005E5 E0               [24] 1716 	movx	a,@dptr
      0005E6 FE               [12] 1717 	mov	r6,a
      0005E7 A3               [24] 1718 	inc	dptr
      0005E8 E0               [24] 1719 	movx	a,@dptr
      0005E9 FF               [12] 1720 	mov	r7,a
      0005EA C3               [12] 1721 	clr	c
      0005EB EE               [12] 1722 	mov	a,r6
      0005EC 94 01            [12] 1723 	subb	a,#0x01
      0005EE EF               [12] 1724 	mov	a,r7
      0005EF 64 80            [12] 1725 	xrl	a,#0x80
      0005F1 94 80            [12] 1726 	subb	a,#0x80
      0005F3 50 1A            [24] 1727 	jnc	00102$
                                   1728 ;	SPI.c:280: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      0005F5 C0 06            [24] 1729 	push	ar6
      0005F7 C0 07            [24] 1730 	push	ar7
      0005F9 74r4E            [12] 1731 	mov	a,#___str_8
      0005FB C0 E0            [24] 1732 	push	acc
      0005FD 74s01            [12] 1733 	mov	a,#(___str_8 >> 8)
      0005FF C0 E0            [24] 1734 	push	acc
      000601 74 80            [12] 1735 	mov	a,#0x80
      000603 C0 E0            [24] 1736 	push	acc
      000605 12r00r00         [24] 1737 	lcall	_printf
      000608 E5 81            [12] 1738 	mov	a,sp
      00060A 24 FB            [12] 1739 	add	a,#0xfb
      00060C F5 81            [12] 1740 	mov	sp,a
                                   1741 ;	SPI.c:281: return;
      00060E 22               [24] 1742 	ret
      00060F                       1743 00102$:
                                   1744 ;	SPI.c:283: if (start_address > 0x1FFF) {
      00060F 90r00r1B         [24] 1745 	mov	dptr,#_spi_buffer_write_PARM_2
      000612 E0               [24] 1746 	movx	a,@dptr
      000613 FC               [12] 1747 	mov	r4,a
      000614 A3               [24] 1748 	inc	dptr
      000615 E0               [24] 1749 	movx	a,@dptr
      000616 FD               [12] 1750 	mov	r5,a
      000617 8C 02            [24] 1751 	mov	ar2,r4
      000619 8D 03            [24] 1752 	mov	ar3,r5
      00061B C3               [12] 1753 	clr	c
      00061C 74 FF            [12] 1754 	mov	a,#0xff
      00061E 9A               [12] 1755 	subb	a,r2
      00061F 74 1F            [12] 1756 	mov	a,#0x1f
      000621 9B               [12] 1757 	subb	a,r3
      000622 50 1A            [24] 1758 	jnc	00104$
                                   1759 ;	SPI.c:284: printf("\n\rInvalid address: %04X\n\r", start_address);
      000624 C0 04            [24] 1760 	push	ar4
      000626 C0 05            [24] 1761 	push	ar5
      000628 74r6E            [12] 1762 	mov	a,#___str_9
      00062A C0 E0            [24] 1763 	push	acc
      00062C 74s01            [12] 1764 	mov	a,#(___str_9 >> 8)
      00062E C0 E0            [24] 1765 	push	acc
      000630 74 80            [12] 1766 	mov	a,#0x80
      000632 C0 E0            [24] 1767 	push	acc
      000634 12r00r00         [24] 1768 	lcall	_printf
      000637 E5 81            [12] 1769 	mov	a,sp
      000639 24 FB            [12] 1770 	add	a,#0xfb
      00063B F5 81            [12] 1771 	mov	sp,a
                                   1772 ;	SPI.c:285: return;
      00063D 22               [24] 1773 	ret
      00063E                       1774 00104$:
                                   1775 ;	SPI.c:289: if (num_bytes > 1) {
      00063E C3               [12] 1776 	clr	c
      00063F 74 01            [12] 1777 	mov	a,#0x01
      000641 9E               [12] 1778 	subb	a,r6
      000642 74 80            [12] 1779 	mov	a,#(0x00 ^ 0x80)
      000644 8F F0            [24] 1780 	mov	b,r7
      000646 63 F0 80         [24] 1781 	xrl	b,#0x80
      000649 95 F0            [12] 1782 	subb	a,b
      00064B 50 0B            [24] 1783 	jnc	00106$
                                   1784 ;	SPI.c:290: spi_set_autoinc();
      00064D C0 05            [24] 1785 	push	ar5
      00064F C0 04            [24] 1786 	push	ar4
      000651 12r00r12         [24] 1787 	lcall	_spi_set_autoinc
      000654 D0 04            [24] 1788 	pop	ar4
      000656 D0 05            [24] 1789 	pop	ar5
      000658                       1790 00106$:
                                   1791 ;	SPI.c:293: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      000658 8D 07            [24] 1792 	mov	ar7,r5
                                   1793 ;	SPI.c:294: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      00065A 8C 06            [24] 1794 	mov	ar6,r4
                                   1795 ;	SPI.c:296: spi_control_write(0, 0x03, higher_byte); // High byte
      00065C 90r00r03         [24] 1796 	mov	dptr,#_spi_control_write_PARM_2
      00065F 74 03            [12] 1797 	mov	a,#0x03
      000661 F0               [24] 1798 	movx	@dptr,a
      000662 90r00r04         [24] 1799 	mov	dptr,#_spi_control_write_PARM_3
      000665 EF               [12] 1800 	mov	a,r7
      000666 F0               [24] 1801 	movx	@dptr,a
      000667 75 82 00         [24] 1802 	mov	dpl, #0x00
      00066A C0 06            [24] 1803 	push	ar6
      00066C C0 05            [24] 1804 	push	ar5
      00066E C0 04            [24] 1805 	push	ar4
      000670 12r00rA8         [24] 1806 	lcall	_spi_control_write
      000673 D0 04            [24] 1807 	pop	ar4
      000675 D0 05            [24] 1808 	pop	ar5
      000677 D0 06            [24] 1809 	pop	ar6
                                   1810 ;	SPI.c:297: spi_control_write(0, 0x02, lower_byte); // Low byte
      000679 90r00r03         [24] 1811 	mov	dptr,#_spi_control_write_PARM_2
      00067C 74 02            [12] 1812 	mov	a,#0x02
      00067E F0               [24] 1813 	movx	@dptr,a
      00067F 90r00r04         [24] 1814 	mov	dptr,#_spi_control_write_PARM_3
      000682 EE               [12] 1815 	mov	a,r6
      000683 F0               [24] 1816 	movx	@dptr,a
      000684 75 82 00         [24] 1817 	mov	dpl, #0x00
      000687 C0 05            [24] 1818 	push	ar5
      000689 C0 04            [24] 1819 	push	ar4
      00068B 12r00rA8         [24] 1820 	lcall	_spi_control_write
                                   1821 ;	SPI.c:300: CS_LOW; // Pull CS Low
                                   1822 ;	assignBit
      00068E C2 91            [12] 1823 	clr	_P1_1
                                   1824 ;	SPI.c:301: SPI_send(opcode); // Send opcode
      000690 75 82 7A         [24] 1825 	mov	dpl, #0x7a
      000693 12r01r13         [24] 1826 	lcall	_SPI_send
      000696 D0 04            [24] 1827 	pop	ar4
      000698 D0 05            [24] 1828 	pop	ar5
                                   1829 ;	SPI.c:304: printf("Writing %d bytes to buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      00069A 90r00r20         [24] 1830 	mov	dptr,#_spi_buffer_write_num_bytes_10000_161
      00069D E0               [24] 1831 	movx	a,@dptr
      00069E FE               [12] 1832 	mov	r6,a
      00069F A3               [24] 1833 	inc	dptr
      0006A0 E0               [24] 1834 	movx	a,@dptr
      0006A1 FF               [12] 1835 	mov	r7,a
      0006A2 C0 07            [24] 1836 	push	ar7
      0006A4 C0 06            [24] 1837 	push	ar6
      0006A6 C0 04            [24] 1838 	push	ar4
      0006A8 C0 05            [24] 1839 	push	ar5
      0006AA C0 06            [24] 1840 	push	ar6
      0006AC C0 07            [24] 1841 	push	ar7
      0006AE 74rEF            [12] 1842 	mov	a,#___str_12
      0006B0 C0 E0            [24] 1843 	push	acc
      0006B2 74s01            [12] 1844 	mov	a,#(___str_12 >> 8)
      0006B4 C0 E0            [24] 1845 	push	acc
      0006B6 74 80            [12] 1846 	mov	a,#0x80
      0006B8 C0 E0            [24] 1847 	push	acc
      0006BA 12r00r00         [24] 1848 	lcall	_printf
      0006BD E5 81            [12] 1849 	mov	a,sp
      0006BF 24 F9            [12] 1850 	add	a,#0xf9
      0006C1 F5 81            [12] 1851 	mov	sp,a
      0006C3 D0 06            [24] 1852 	pop	ar6
      0006C5 D0 07            [24] 1853 	pop	ar7
                                   1854 ;	SPI.c:305: for (int i = 0; i < num_bytes; i++) {
      0006C7 90r00r1D         [24] 1855 	mov	dptr,#_spi_buffer_write_PARM_3
      0006CA E0               [24] 1856 	movx	a,@dptr
      0006CB FB               [12] 1857 	mov	r3,a
      0006CC A3               [24] 1858 	inc	dptr
      0006CD E0               [24] 1859 	movx	a,@dptr
      0006CE FC               [12] 1860 	mov	r4,a
      0006CF A3               [24] 1861 	inc	dptr
      0006D0 E0               [24] 1862 	movx	a,@dptr
      0006D1 FD               [12] 1863 	mov	r5,a
      0006D2 79 00            [12] 1864 	mov	r1,#0x00
      0006D4 7A 00            [12] 1865 	mov	r2,#0x00
      0006D6                       1866 00109$:
      0006D6 C3               [12] 1867 	clr	c
      0006D7 E9               [12] 1868 	mov	a,r1
      0006D8 9E               [12] 1869 	subb	a,r6
      0006D9 EA               [12] 1870 	mov	a,r2
      0006DA 64 80            [12] 1871 	xrl	a,#0x80
      0006DC 8F F0            [24] 1872 	mov	b,r7
      0006DE 63 F0 80         [24] 1873 	xrl	b,#0x80
      0006E1 95 F0            [12] 1874 	subb	a,b
      0006E3 50 37            [24] 1875 	jnc	00107$
                                   1876 ;	SPI.c:307: SPI_send(*data_ptr); // Send data
      0006E5 8B 82            [24] 1877 	mov	dpl,r3
      0006E7 8C 83            [24] 1878 	mov	dph,r4
      0006E9 8D F0            [24] 1879 	mov	b,r5
      0006EB 12r00r00         [24] 1880 	lcall	__gptrget
      0006EE F8               [12] 1881 	mov	r0,a
      0006EF A3               [24] 1882 	inc	dptr
      0006F0 AB 82            [24] 1883 	mov	r3,dpl
      0006F2 AC 83            [24] 1884 	mov	r4,dph
      0006F4 88 82            [24] 1885 	mov	dpl, r0
      0006F6 C0 07            [24] 1886 	push	ar7
      0006F8 C0 06            [24] 1887 	push	ar6
      0006FA C0 05            [24] 1888 	push	ar5
      0006FC C0 04            [24] 1889 	push	ar4
      0006FE C0 03            [24] 1890 	push	ar3
      000700 C0 02            [24] 1891 	push	ar2
      000702 C0 01            [24] 1892 	push	ar1
      000704 12r01r13         [24] 1893 	lcall	_SPI_send
      000707 D0 01            [24] 1894 	pop	ar1
      000709 D0 02            [24] 1895 	pop	ar2
      00070B D0 03            [24] 1896 	pop	ar3
      00070D D0 04            [24] 1897 	pop	ar4
      00070F D0 05            [24] 1898 	pop	ar5
      000711 D0 06            [24] 1899 	pop	ar6
      000713 D0 07            [24] 1900 	pop	ar7
                                   1901 ;	SPI.c:308: data_ptr++;
                                   1902 ;	SPI.c:305: for (int i = 0; i < num_bytes; i++) {
      000715 09               [12] 1903 	inc	r1
      000716 B9 00 BD         [24] 1904 	cjne	r1,#0x00,00109$
      000719 0A               [12] 1905 	inc	r2
      00071A 80 BA            [24] 1906 	sjmp	00109$
      00071C                       1907 00107$:
                                   1908 ;	SPI.c:310: CS_HIGH; // Pull CS High
                                   1909 ;	assignBit
      00071C D2 91            [12] 1910 	setb	_P1_1
                                   1911 ;	SPI.c:311: }
      00071E 22               [24] 1912 	ret
                                   1913 	.area CSEG    (CODE)
                                   1914 	.area CONST   (CODE)
                                   1915 	.area CONST   (CODE)
      000000                       1916 ___str_0:
      000000 77 72 6F 6E 67 20 62  1917 	.ascii "wrong bank"
             61 6E 6B
      00000A 00                    1918 	.db 0x00
                                   1919 	.area CSEG    (CODE)
                                   1920 	.area CONST   (CODE)
      00000B                       1921 ___str_1:
      00000B 57 72 69 74 65 3A 20  1922 	.ascii "Write: Address 0x%02X, Data 0x%02X"
             41 64 64 72 65 73 73
             20 30 78 25 30 32 58
             2C 20 44 61 74 61 20
             30 78 25 30 32 58
      00002D 0A                    1923 	.db 0x0a
      00002E 0D                    1924 	.db 0x0d
      00002F 00                    1925 	.db 0x00
                                   1926 	.area CSEG    (CODE)
                                   1927 	.area CONST   (CODE)
      000030                       1928 ___str_2:
      000030 0A                    1929 	.db 0x0a
      000031 0D                    1930 	.db 0x0d
      000032 49 6E 76 61 6C 69 64  1931 	.ascii "Invalid address: MAC register address range [0, 0x1F]"
             20 61 64 64 72 65 73
             73 3A 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 72 61 6E 67
             65 20 5B 30 2C 20 30
             78 31 46 5D
      000067 0A                    1932 	.db 0x0a
      000068 0D                    1933 	.db 0x0d
      000069 00                    1934 	.db 0x00
                                   1935 	.area CSEG    (CODE)
                                   1936 	.area CONST   (CODE)
      00006A                       1937 ___str_3:
      00006A 52 65 61 64 3A 20 41  1938 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      00008B 0A                    1939 	.db 0x0a
      00008C 0D                    1940 	.db 0x0d
      00008D 00                    1941 	.db 0x00
                                   1942 	.area CSEG    (CODE)
                                   1943 	.area CONST   (CODE)
      00008E                       1944 ___str_4:
      00008E 50 48 59 20 57 72 69  1945 	.ascii "PHY Write: Address 0x%02X, Data 0x%04X"
             74 65 3A 20 41 64 64
             72 65 73 73 20 30 78
             25 30 32 58 2C 20 44
             61 74 61 20 30 78 25
             30 34 58
      0000B4 0A                    1946 	.db 0x0a
      0000B5 0D                    1947 	.db 0x0d
      0000B6 00                    1948 	.db 0x00
                                   1949 	.area CSEG    (CODE)
                                   1950 	.area CONST   (CODE)
      0000B7                       1951 ___str_5:
      0000B7 50 48 59 20 52 65 61  1952 	.ascii "PHY Read: Address 0x%02X, Data 0x%04X"
             64 3A 20 41 64 64 72
             65 73 73 20 30 78 25
             30 32 58 2C 20 44 61
             74 61 20 30 78 25 30
             34 58
      0000DC 0A                    1953 	.db 0x0a
      0000DD 0D                    1954 	.db 0x0d
      0000DE 00                    1955 	.db 0x00
                                   1956 	.area CSEG    (CODE)
                                   1957 	.area CONST   (CODE)
      0000DF                       1958 ___str_6:
      0000DF 0A                    1959 	.db 0x0a
      0000E0 0D                    1960 	.db 0x0d
      0000E1 49 6E 76 61 6C 69 64  1961 	.ascii "Invalid Buffer Address or Size: Start 0x%04X, Size 0x%04X"
             20 42 75 66 66 65 72
             20 41 64 64 72 65 73
             73 20 6F 72 20 53 69
             7A 65 3A 20 53 74 61
             72 74 20 30 78 25 30
             34 58 2C 20 53 69 7A
             65 20 30 78 25 30 34
             58
      00011A 0A                    1962 	.db 0x0a
      00011B 0D                    1963 	.db 0x0d
      00011C 00                    1964 	.db 0x00
                                   1965 	.area CSEG    (CODE)
                                   1966 	.area CONST   (CODE)
      00011D                       1967 ___str_7:
      00011D 0A                    1968 	.db 0x0a
      00011E 0D                    1969 	.db 0x0d
      00011F 42 75 66 66 65 72 20  1970 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      00014B 0A                    1971 	.db 0x0a
      00014C 0D                    1972 	.db 0x0d
      00014D 00                    1973 	.db 0x00
                                   1974 	.area CSEG    (CODE)
                                   1975 	.area CONST   (CODE)
      00014E                       1976 ___str_8:
      00014E 0A                    1977 	.db 0x0a
      00014F 0D                    1978 	.db 0x0d
      000150 49 6E 76 61 6C 69 64  1979 	.ascii "Invalid number of bytes: %d"
             20 6E 75 6D 62 65 72
             20 6F 66 20 62 79 74
             65 73 3A 20 25 64
      00016B 0A                    1980 	.db 0x0a
      00016C 0D                    1981 	.db 0x0d
      00016D 00                    1982 	.db 0x00
                                   1983 	.area CSEG    (CODE)
                                   1984 	.area CONST   (CODE)
      00016E                       1985 ___str_9:
      00016E 0A                    1986 	.db 0x0a
      00016F 0D                    1987 	.db 0x0d
      000170 49 6E 76 61 6C 69 64  1988 	.ascii "Invalid address: %04X"
             20 61 64 64 72 65 73
             73 3A 20 25 30 34 58
      000185 0A                    1989 	.db 0x0a
      000186 0D                    1990 	.db 0x0d
      000187 00                    1991 	.db 0x00
                                   1992 	.area CSEG    (CODE)
                                   1993 	.area CONST   (CODE)
      000188                       1994 ___str_10:
      000188 0A                    1995 	.db 0x0a
      000189 49 6E 76 61 6C 69 64  1996 	.ascii "Invalid RX Address: Start 0x%04X, Size %d"
             20 52 58 20 41 64 64
             72 65 73 73 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 53
             69 7A 65 20 25 64
      0001B2 0A                    1997 	.db 0x0a
      0001B3 00                    1998 	.db 0x00
                                   1999 	.area CSEG    (CODE)
                                   2000 	.area CONST   (CODE)
      0001B4                       2001 ___str_11:
      0001B4 52 65 61 64 69 6E 67  2002 	.ascii "Reading %d bytes from buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 66 72 6F 6D
             20 62 75 66 66 65 72
             20 73 74 61 72 74 69
             6E 67 20 61 74 20 61
             64 64 72 65 73 73 20
             30 78 25 30 34 58 3A
      0001EC 0A                    2003 	.db 0x0a
      0001ED 0D                    2004 	.db 0x0d
      0001EE 00                    2005 	.db 0x00
                                   2006 	.area CSEG    (CODE)
                                   2007 	.area CONST   (CODE)
      0001EF                       2008 ___str_12:
      0001EF 57 72 69 74 69 6E 67  2009 	.ascii "Writing %d bytes to buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 74 6F 20 62
             75 66 66 65 72 20 73
             74 61 72 74 69 6E 67
             20 61 74 20 61 64 64
             72 65 73 73 20 30 78
             25 30 34 58 3A
      000225 0A                    2010 	.db 0x0a
      000226 0D                    2011 	.db 0x0d
      000227 00                    2012 	.db 0x00
                                   2013 	.area CSEG    (CODE)
                                   2014 	.area XINIT   (CODE)
                                   2015 	.area CABS    (ABS,CODE)
