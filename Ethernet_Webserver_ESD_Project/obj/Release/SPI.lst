                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module SPI
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _printf
                                     12 	.globl _TF1
                                     13 	.globl _TR1
                                     14 	.globl _TF0
                                     15 	.globl _TR0
                                     16 	.globl _IE1
                                     17 	.globl _IT1
                                     18 	.globl _IE0
                                     19 	.globl _IT0
                                     20 	.globl _SM0
                                     21 	.globl _SM1
                                     22 	.globl _SM2
                                     23 	.globl _REN
                                     24 	.globl _TB8
                                     25 	.globl _RB8
                                     26 	.globl _TI
                                     27 	.globl _RI
                                     28 	.globl _CY
                                     29 	.globl _AC
                                     30 	.globl _F0
                                     31 	.globl _RS1
                                     32 	.globl _RS0
                                     33 	.globl _OV
                                     34 	.globl _F1
                                     35 	.globl _P
                                     36 	.globl _RD
                                     37 	.globl _WR
                                     38 	.globl _T1
                                     39 	.globl _T0
                                     40 	.globl _INT1
                                     41 	.globl _INT0
                                     42 	.globl _TXD0
                                     43 	.globl _TXD
                                     44 	.globl _RXD0
                                     45 	.globl _RXD
                                     46 	.globl _P3_7
                                     47 	.globl _P3_6
                                     48 	.globl _P3_5
                                     49 	.globl _P3_4
                                     50 	.globl _P3_3
                                     51 	.globl _P3_2
                                     52 	.globl _P3_1
                                     53 	.globl _P3_0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _P1_7
                                     63 	.globl _P1_6
                                     64 	.globl _P1_5
                                     65 	.globl _P1_4
                                     66 	.globl _P1_3
                                     67 	.globl _P1_2
                                     68 	.globl _P1_1
                                     69 	.globl _P1_0
                                     70 	.globl _P0_7
                                     71 	.globl _P0_6
                                     72 	.globl _P0_5
                                     73 	.globl _P0_4
                                     74 	.globl _P0_3
                                     75 	.globl _P0_2
                                     76 	.globl _P0_1
                                     77 	.globl _P0_0
                                     78 	.globl _PS
                                     79 	.globl _PT1
                                     80 	.globl _PX1
                                     81 	.globl _PT0
                                     82 	.globl _PX0
                                     83 	.globl _EA
                                     84 	.globl _ES
                                     85 	.globl _ET1
                                     86 	.globl _EX1
                                     87 	.globl _ET0
                                     88 	.globl _EX0
                                     89 	.globl _BREG_F7
                                     90 	.globl _BREG_F6
                                     91 	.globl _BREG_F5
                                     92 	.globl _BREG_F4
                                     93 	.globl _BREG_F3
                                     94 	.globl _BREG_F2
                                     95 	.globl _BREG_F1
                                     96 	.globl _BREG_F0
                                     97 	.globl _P5_7
                                     98 	.globl _P5_6
                                     99 	.globl _P5_5
                                    100 	.globl _P5_4
                                    101 	.globl _P5_3
                                    102 	.globl _P5_2
                                    103 	.globl _P5_1
                                    104 	.globl _P5_0
                                    105 	.globl _P4_7
                                    106 	.globl _P4_6
                                    107 	.globl _P4_5
                                    108 	.globl _P4_4
                                    109 	.globl _P4_3
                                    110 	.globl _P4_2
                                    111 	.globl _P4_1
                                    112 	.globl _P4_0
                                    113 	.globl _PX0L
                                    114 	.globl _PT0L
                                    115 	.globl _PX1L
                                    116 	.globl _PT1L
                                    117 	.globl _PSL
                                    118 	.globl _PT2L
                                    119 	.globl _PPCL
                                    120 	.globl _EC
                                    121 	.globl _CCF0
                                    122 	.globl _CCF1
                                    123 	.globl _CCF2
                                    124 	.globl _CCF3
                                    125 	.globl _CCF4
                                    126 	.globl _CR
                                    127 	.globl _CF
                                    128 	.globl _TF2
                                    129 	.globl _EXF2
                                    130 	.globl _RCLK
                                    131 	.globl _TCLK
                                    132 	.globl _EXEN2
                                    133 	.globl _TR2
                                    134 	.globl _C_T2
                                    135 	.globl _CP_RL2
                                    136 	.globl _T2CON_7
                                    137 	.globl _T2CON_6
                                    138 	.globl _T2CON_5
                                    139 	.globl _T2CON_4
                                    140 	.globl _T2CON_3
                                    141 	.globl _T2CON_2
                                    142 	.globl _T2CON_1
                                    143 	.globl _T2CON_0
                                    144 	.globl _PT2
                                    145 	.globl _ET2
                                    146 	.globl _TMOD
                                    147 	.globl _TL1
                                    148 	.globl _TL0
                                    149 	.globl _TH1
                                    150 	.globl _TH0
                                    151 	.globl _TCON
                                    152 	.globl _SP
                                    153 	.globl _SCON
                                    154 	.globl _SBUF0
                                    155 	.globl _SBUF
                                    156 	.globl _PSW
                                    157 	.globl _PCON
                                    158 	.globl _P3
                                    159 	.globl _P2
                                    160 	.globl _P1
                                    161 	.globl _P0
                                    162 	.globl _IP
                                    163 	.globl _IE
                                    164 	.globl _DP0L
                                    165 	.globl _DPL
                                    166 	.globl _DP0H
                                    167 	.globl _DPH
                                    168 	.globl _B
                                    169 	.globl _ACC
                                    170 	.globl _EECON
                                    171 	.globl _KBF
                                    172 	.globl _KBE
                                    173 	.globl _KBLS
                                    174 	.globl _BRL
                                    175 	.globl _BDRCON
                                    176 	.globl _T2MOD
                                    177 	.globl _SPDAT
                                    178 	.globl _SPSTA
                                    179 	.globl _SPCON
                                    180 	.globl _SADEN
                                    181 	.globl _SADDR
                                    182 	.globl _WDTPRG
                                    183 	.globl _WDTRST
                                    184 	.globl _P5
                                    185 	.globl _P4
                                    186 	.globl _IPH1
                                    187 	.globl _IPL1
                                    188 	.globl _IPH0
                                    189 	.globl _IPL0
                                    190 	.globl _IEN1
                                    191 	.globl _IEN0
                                    192 	.globl _CMOD
                                    193 	.globl _CL
                                    194 	.globl _CH
                                    195 	.globl _CCON
                                    196 	.globl _CCAPM4
                                    197 	.globl _CCAPM3
                                    198 	.globl _CCAPM2
                                    199 	.globl _CCAPM1
                                    200 	.globl _CCAPM0
                                    201 	.globl _CCAP4L
                                    202 	.globl _CCAP3L
                                    203 	.globl _CCAP2L
                                    204 	.globl _CCAP1L
                                    205 	.globl _CCAP0L
                                    206 	.globl _CCAP4H
                                    207 	.globl _CCAP3H
                                    208 	.globl _CCAP2H
                                    209 	.globl _CCAP1H
                                    210 	.globl _CCAP0H
                                    211 	.globl _CKCON1
                                    212 	.globl _CKCON0
                                    213 	.globl _CKRL
                                    214 	.globl _AUXR1
                                    215 	.globl _AUXR
                                    216 	.globl _TH2
                                    217 	.globl _TL2
                                    218 	.globl _RCAP2H
                                    219 	.globl _RCAP2L
                                    220 	.globl _T2CON
                                    221 	.globl _spi_buffer_write_PARM_3
                                    222 	.globl _spi_buffer_write_PARM_2
                                    223 	.globl _spi_buffer_read_PARM_3
                                    224 	.globl _spi_buffer_read_PARM_2
                                    225 	.globl _buffer_init_PARM_2
                                    226 	.globl _mac_spi_read_PARM_2
                                    227 	.globl _phy_spi_write_PARM_2
                                    228 	.globl _eth_spi_read_PARM_2
                                    229 	.globl _spi_control_write_PARM_3
                                    230 	.globl _spi_control_write_PARM_2
                                    231 	.globl _SPI_ReadByte
                                    232 	.globl _spi_set_autoinc
                                    233 	.globl _select_reg_bank
                                    234 	.globl _spi_control_write
                                    235 	.globl _configure_SPI
                                    236 	.globl _SPI_send
                                    237 	.globl _enc_reset
                                    238 	.globl _eth_spi_read
                                    239 	.globl _phy_spi_write
                                    240 	.globl _mac_spi_read
                                    241 	.globl _phy_spi_read
                                    242 	.globl _busy_wait
                                    243 	.globl _buffer_init
                                    244 	.globl _spi_buffer_read
                                    245 	.globl _spi_buffer_write
                                    246 ;--------------------------------------------------------
                                    247 ; special function registers
                                    248 ;--------------------------------------------------------
                                    249 	.area RSEG    (ABS,DATA)
      000000                        250 	.org 0x0000
                           0000C8   251 _T2CON	=	0x00c8
                           0000CA   252 _RCAP2L	=	0x00ca
                           0000CB   253 _RCAP2H	=	0x00cb
                           0000CC   254 _TL2	=	0x00cc
                           0000CD   255 _TH2	=	0x00cd
                           00008E   256 _AUXR	=	0x008e
                           0000A2   257 _AUXR1	=	0x00a2
                           000097   258 _CKRL	=	0x0097
                           00008F   259 _CKCON0	=	0x008f
                           0000AF   260 _CKCON1	=	0x00af
                           0000FA   261 _CCAP0H	=	0x00fa
                           0000FB   262 _CCAP1H	=	0x00fb
                           0000FC   263 _CCAP2H	=	0x00fc
                           0000FD   264 _CCAP3H	=	0x00fd
                           0000FE   265 _CCAP4H	=	0x00fe
                           0000EA   266 _CCAP0L	=	0x00ea
                           0000EB   267 _CCAP1L	=	0x00eb
                           0000EC   268 _CCAP2L	=	0x00ec
                           0000ED   269 _CCAP3L	=	0x00ed
                           0000EE   270 _CCAP4L	=	0x00ee
                           0000DA   271 _CCAPM0	=	0x00da
                           0000DB   272 _CCAPM1	=	0x00db
                           0000DC   273 _CCAPM2	=	0x00dc
                           0000DD   274 _CCAPM3	=	0x00dd
                           0000DE   275 _CCAPM4	=	0x00de
                           0000D8   276 _CCON	=	0x00d8
                           0000F9   277 _CH	=	0x00f9
                           0000E9   278 _CL	=	0x00e9
                           0000D9   279 _CMOD	=	0x00d9
                           0000A8   280 _IEN0	=	0x00a8
                           0000B1   281 _IEN1	=	0x00b1
                           0000B8   282 _IPL0	=	0x00b8
                           0000B7   283 _IPH0	=	0x00b7
                           0000B2   284 _IPL1	=	0x00b2
                           0000B3   285 _IPH1	=	0x00b3
                           0000C0   286 _P4	=	0x00c0
                           0000E8   287 _P5	=	0x00e8
                           0000A6   288 _WDTRST	=	0x00a6
                           0000A7   289 _WDTPRG	=	0x00a7
                           0000A9   290 _SADDR	=	0x00a9
                           0000B9   291 _SADEN	=	0x00b9
                           0000C3   292 _SPCON	=	0x00c3
                           0000C4   293 _SPSTA	=	0x00c4
                           0000C5   294 _SPDAT	=	0x00c5
                           0000C9   295 _T2MOD	=	0x00c9
                           00009B   296 _BDRCON	=	0x009b
                           00009A   297 _BRL	=	0x009a
                           00009C   298 _KBLS	=	0x009c
                           00009D   299 _KBE	=	0x009d
                           00009E   300 _KBF	=	0x009e
                           0000D2   301 _EECON	=	0x00d2
                           0000E0   302 _ACC	=	0x00e0
                           0000F0   303 _B	=	0x00f0
                           000083   304 _DPH	=	0x0083
                           000083   305 _DP0H	=	0x0083
                           000082   306 _DPL	=	0x0082
                           000082   307 _DP0L	=	0x0082
                           0000A8   308 _IE	=	0x00a8
                           0000B8   309 _IP	=	0x00b8
                           000080   310 _P0	=	0x0080
                           000090   311 _P1	=	0x0090
                           0000A0   312 _P2	=	0x00a0
                           0000B0   313 _P3	=	0x00b0
                           000087   314 _PCON	=	0x0087
                           0000D0   315 _PSW	=	0x00d0
                           000099   316 _SBUF	=	0x0099
                           000099   317 _SBUF0	=	0x0099
                           000098   318 _SCON	=	0x0098
                           000081   319 _SP	=	0x0081
                           000088   320 _TCON	=	0x0088
                           00008C   321 _TH0	=	0x008c
                           00008D   322 _TH1	=	0x008d
                           00008A   323 _TL0	=	0x008a
                           00008B   324 _TL1	=	0x008b
                           000089   325 _TMOD	=	0x0089
                                    326 ;--------------------------------------------------------
                                    327 ; special function bits
                                    328 ;--------------------------------------------------------
                                    329 	.area RSEG    (ABS,DATA)
      000000                        330 	.org 0x0000
                           0000AD   331 _ET2	=	0x00ad
                           0000BD   332 _PT2	=	0x00bd
                           0000C8   333 _T2CON_0	=	0x00c8
                           0000C9   334 _T2CON_1	=	0x00c9
                           0000CA   335 _T2CON_2	=	0x00ca
                           0000CB   336 _T2CON_3	=	0x00cb
                           0000CC   337 _T2CON_4	=	0x00cc
                           0000CD   338 _T2CON_5	=	0x00cd
                           0000CE   339 _T2CON_6	=	0x00ce
                           0000CF   340 _T2CON_7	=	0x00cf
                           0000C8   341 _CP_RL2	=	0x00c8
                           0000C9   342 _C_T2	=	0x00c9
                           0000CA   343 _TR2	=	0x00ca
                           0000CB   344 _EXEN2	=	0x00cb
                           0000CC   345 _TCLK	=	0x00cc
                           0000CD   346 _RCLK	=	0x00cd
                           0000CE   347 _EXF2	=	0x00ce
                           0000CF   348 _TF2	=	0x00cf
                           0000DF   349 _CF	=	0x00df
                           0000DE   350 _CR	=	0x00de
                           0000DC   351 _CCF4	=	0x00dc
                           0000DB   352 _CCF3	=	0x00db
                           0000DA   353 _CCF2	=	0x00da
                           0000D9   354 _CCF1	=	0x00d9
                           0000D8   355 _CCF0	=	0x00d8
                           0000AE   356 _EC	=	0x00ae
                           0000BE   357 _PPCL	=	0x00be
                           0000BD   358 _PT2L	=	0x00bd
                           0000BC   359 _PSL	=	0x00bc
                           0000BB   360 _PT1L	=	0x00bb
                           0000BA   361 _PX1L	=	0x00ba
                           0000B9   362 _PT0L	=	0x00b9
                           0000B8   363 _PX0L	=	0x00b8
                           0000C0   364 _P4_0	=	0x00c0
                           0000C1   365 _P4_1	=	0x00c1
                           0000C2   366 _P4_2	=	0x00c2
                           0000C3   367 _P4_3	=	0x00c3
                           0000C4   368 _P4_4	=	0x00c4
                           0000C5   369 _P4_5	=	0x00c5
                           0000C6   370 _P4_6	=	0x00c6
                           0000C7   371 _P4_7	=	0x00c7
                           0000E8   372 _P5_0	=	0x00e8
                           0000E9   373 _P5_1	=	0x00e9
                           0000EA   374 _P5_2	=	0x00ea
                           0000EB   375 _P5_3	=	0x00eb
                           0000EC   376 _P5_4	=	0x00ec
                           0000ED   377 _P5_5	=	0x00ed
                           0000EE   378 _P5_6	=	0x00ee
                           0000EF   379 _P5_7	=	0x00ef
                           0000F0   380 _BREG_F0	=	0x00f0
                           0000F1   381 _BREG_F1	=	0x00f1
                           0000F2   382 _BREG_F2	=	0x00f2
                           0000F3   383 _BREG_F3	=	0x00f3
                           0000F4   384 _BREG_F4	=	0x00f4
                           0000F5   385 _BREG_F5	=	0x00f5
                           0000F6   386 _BREG_F6	=	0x00f6
                           0000F7   387 _BREG_F7	=	0x00f7
                           0000A8   388 _EX0	=	0x00a8
                           0000A9   389 _ET0	=	0x00a9
                           0000AA   390 _EX1	=	0x00aa
                           0000AB   391 _ET1	=	0x00ab
                           0000AC   392 _ES	=	0x00ac
                           0000AF   393 _EA	=	0x00af
                           0000B8   394 _PX0	=	0x00b8
                           0000B9   395 _PT0	=	0x00b9
                           0000BA   396 _PX1	=	0x00ba
                           0000BB   397 _PT1	=	0x00bb
                           0000BC   398 _PS	=	0x00bc
                           000080   399 _P0_0	=	0x0080
                           000081   400 _P0_1	=	0x0081
                           000082   401 _P0_2	=	0x0082
                           000083   402 _P0_3	=	0x0083
                           000084   403 _P0_4	=	0x0084
                           000085   404 _P0_5	=	0x0085
                           000086   405 _P0_6	=	0x0086
                           000087   406 _P0_7	=	0x0087
                           000090   407 _P1_0	=	0x0090
                           000091   408 _P1_1	=	0x0091
                           000092   409 _P1_2	=	0x0092
                           000093   410 _P1_3	=	0x0093
                           000094   411 _P1_4	=	0x0094
                           000095   412 _P1_5	=	0x0095
                           000096   413 _P1_6	=	0x0096
                           000097   414 _P1_7	=	0x0097
                           0000A0   415 _P2_0	=	0x00a0
                           0000A1   416 _P2_1	=	0x00a1
                           0000A2   417 _P2_2	=	0x00a2
                           0000A3   418 _P2_3	=	0x00a3
                           0000A4   419 _P2_4	=	0x00a4
                           0000A5   420 _P2_5	=	0x00a5
                           0000A6   421 _P2_6	=	0x00a6
                           0000A7   422 _P2_7	=	0x00a7
                           0000B0   423 _P3_0	=	0x00b0
                           0000B1   424 _P3_1	=	0x00b1
                           0000B2   425 _P3_2	=	0x00b2
                           0000B3   426 _P3_3	=	0x00b3
                           0000B4   427 _P3_4	=	0x00b4
                           0000B5   428 _P3_5	=	0x00b5
                           0000B6   429 _P3_6	=	0x00b6
                           0000B7   430 _P3_7	=	0x00b7
                           0000B0   431 _RXD	=	0x00b0
                           0000B0   432 _RXD0	=	0x00b0
                           0000B1   433 _TXD	=	0x00b1
                           0000B1   434 _TXD0	=	0x00b1
                           0000B2   435 _INT0	=	0x00b2
                           0000B3   436 _INT1	=	0x00b3
                           0000B4   437 _T0	=	0x00b4
                           0000B5   438 _T1	=	0x00b5
                           0000B6   439 _WR	=	0x00b6
                           0000B7   440 _RD	=	0x00b7
                           0000D0   441 _P	=	0x00d0
                           0000D1   442 _F1	=	0x00d1
                           0000D2   443 _OV	=	0x00d2
                           0000D3   444 _RS0	=	0x00d3
                           0000D4   445 _RS1	=	0x00d4
                           0000D5   446 _F0	=	0x00d5
                           0000D6   447 _AC	=	0x00d6
                           0000D7   448 _CY	=	0x00d7
                           000098   449 _RI	=	0x0098
                           000099   450 _TI	=	0x0099
                           00009A   451 _RB8	=	0x009a
                           00009B   452 _TB8	=	0x009b
                           00009C   453 _REN	=	0x009c
                           00009D   454 _SM2	=	0x009d
                           00009E   455 _SM1	=	0x009e
                           00009F   456 _SM0	=	0x009f
                           000088   457 _IT0	=	0x0088
                           000089   458 _IE0	=	0x0089
                           00008A   459 _IT1	=	0x008a
                           00008B   460 _IE1	=	0x008b
                           00008C   461 _TR0	=	0x008c
                           00008D   462 _TF0	=	0x008d
                           00008E   463 _TR1	=	0x008e
                           00008F   464 _TF1	=	0x008f
                                    465 ;--------------------------------------------------------
                                    466 ; overlayable register banks
                                    467 ;--------------------------------------------------------
                                    468 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        469 	.ds 8
                                    470 ;--------------------------------------------------------
                                    471 ; internal ram data
                                    472 ;--------------------------------------------------------
                                    473 	.area DSEG    (DATA)
                                    474 ;--------------------------------------------------------
                                    475 ; overlayable items in internal ram
                                    476 ;--------------------------------------------------------
                                    477 ;--------------------------------------------------------
                                    478 ; indirectly addressable internal ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area ISEG    (DATA)
                                    481 ;--------------------------------------------------------
                                    482 ; absolute internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area IABS    (ABS,DATA)
                                    485 	.area IABS    (ABS,DATA)
                                    486 ;--------------------------------------------------------
                                    487 ; bit data
                                    488 ;--------------------------------------------------------
                                    489 	.area BSEG    (BIT)
                                    490 ;--------------------------------------------------------
                                    491 ; paged external ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area PSEG    (PAG,XDATA)
                                    494 ;--------------------------------------------------------
                                    495 ; uninitialized external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area XSEG    (XDATA)
      000000                        498 _SPI_ReadByte_received_data_10000_60:
      000000                        499 	.ds 1
      000001                        500 _select_reg_bank_bank_10000_64:
      000001                        501 	.ds 1
      000002                        502 _spi_control_write_PARM_2:
      000002                        503 	.ds 1
      000003                        504 _spi_control_write_PARM_3:
      000003                        505 	.ds 1
      000004                        506 _spi_control_write_reg_bank_10000_66:
      000004                        507 	.ds 1
      000005                        508 _SPI_send_data_10000_70:
      000005                        509 	.ds 1
      000006                        510 _eth_spi_read_PARM_2:
      000006                        511 	.ds 1
      000007                        512 _eth_spi_read_addr_10000_75:
      000007                        513 	.ds 1
      000008                        514 _phy_spi_write_PARM_2:
      000008                        515 	.ds 2
      00000A                        516 _phy_spi_write_addr_10000_79:
      00000A                        517 	.ds 1
      00000B                        518 _mac_spi_read_PARM_2:
      00000B                        519 	.ds 1
      00000C                        520 _mac_spi_read_addr_10000_81:
      00000C                        521 	.ds 1
      00000D                        522 _phy_spi_read_addr_10000_85:
      00000D                        523 	.ds 1
      00000E                        524 _busy_wait_data_10000_89:
      00000E                        525 	.ds 1
      00000F                        526 _buffer_init_PARM_2:
      00000F                        527 	.ds 2
      000011                        528 _buffer_init_start_address_10000_91:
      000011                        529 	.ds 2
      000013                        530 _spi_buffer_read_PARM_2:
      000013                        531 	.ds 2
      000015                        532 _spi_buffer_read_PARM_3:
      000015                        533 	.ds 3
      000018                        534 _spi_buffer_read_num_bytes_10000_95:
      000018                        535 	.ds 2
      00001A                        536 _spi_buffer_read_i_20002_102:
      00001A                        537 	.ds 2
      00001C                        538 _spi_buffer_write_PARM_2:
      00001C                        539 	.ds 2
      00001E                        540 _spi_buffer_write_PARM_3:
      00001E                        541 	.ds 3
      000021                        542 _spi_buffer_write_num_bytes_10000_104:
      000021                        543 	.ds 2
      000023                        544 _spi_buffer_write_i_20002_111:
      000023                        545 	.ds 2
                                    546 ;--------------------------------------------------------
                                    547 ; absolute external ram data
                                    548 ;--------------------------------------------------------
                                    549 	.area XABS    (ABS,XDATA)
                                    550 ;--------------------------------------------------------
                                    551 ; initialized external ram data
                                    552 ;--------------------------------------------------------
                                    553 	.area XISEG   (XDATA)
                                    554 	.area HOME    (CODE)
                                    555 	.area GSINIT0 (CODE)
                                    556 	.area GSINIT1 (CODE)
                                    557 	.area GSINIT2 (CODE)
                                    558 	.area GSINIT3 (CODE)
                                    559 	.area GSINIT4 (CODE)
                                    560 	.area GSINIT5 (CODE)
                                    561 	.area GSINIT  (CODE)
                                    562 	.area GSFINAL (CODE)
                                    563 	.area CSEG    (CODE)
                                    564 ;--------------------------------------------------------
                                    565 ; global & static initialisations
                                    566 ;--------------------------------------------------------
                                    567 	.area HOME    (CODE)
                                    568 	.area GSINIT  (CODE)
                                    569 	.area GSFINAL (CODE)
                                    570 	.area GSINIT  (CODE)
                                    571 ;--------------------------------------------------------
                                    572 ; Home
                                    573 ;--------------------------------------------------------
                                    574 	.area HOME    (CODE)
                                    575 	.area HOME    (CODE)
                                    576 ;--------------------------------------------------------
                                    577 ; code
                                    578 ;--------------------------------------------------------
                                    579 	.area CSEG    (CODE)
                                    580 ;------------------------------------------------------------
                                    581 ;Allocation info for local variables in function 'SPI_ReadByte'
                                    582 ;------------------------------------------------------------
                                    583 ;received_data             Allocated with name '_SPI_ReadByte_received_data_10000_60'
                                    584 ;------------------------------------------------------------
                                    585 ;	SPI.c:4: uint8_t SPI_ReadByte(void)
                                    586 ;	-----------------------------------------
                                    587 ;	 function SPI_ReadByte
                                    588 ;	-----------------------------------------
      000000                        589 _SPI_ReadByte:
                           000007   590 	ar7 = 0x07
                           000006   591 	ar6 = 0x06
                           000005   592 	ar5 = 0x05
                           000004   593 	ar4 = 0x04
                           000003   594 	ar3 = 0x03
                           000002   595 	ar2 = 0x02
                           000001   596 	ar1 = 0x01
                           000000   597 	ar0 = 0x00
                                    598 ;	SPI.c:9: SPDAT = 0xFF;
      000000 75 C5 FF         [24]  599 	mov	_SPDAT,#0xff
                                    600 ;	SPI.c:12: while (!(SPSTA & 0x80)) {
      000003                        601 00101$:
      000003 E5 C4            [12]  602 	mov	a,_SPSTA
      000005 30 E7 FB         [24]  603 	jnb	acc.7,00101$
                                    604 ;	SPI.c:17: received_data = SPDAT;
      000008 90r00r00         [24]  605 	mov	dptr,#_SPI_ReadByte_received_data_10000_60
      00000B E5 C5            [12]  606 	mov	a,_SPDAT
      00000D F0               [24]  607 	movx	@dptr,a
                                    608 ;	SPI.c:19: return received_data;
      00000E E0               [24]  609 	movx	a,@dptr
                                    610 ;	SPI.c:20: }
      00000F F5 82            [12]  611 	mov	dpl,a
      000011 22               [24]  612 	ret
                                    613 ;------------------------------------------------------------
                                    614 ;Allocation info for local variables in function 'spi_set_autoinc'
                                    615 ;------------------------------------------------------------
                                    616 ;	SPI.c:22: void spi_set_autoinc(void)
                                    617 ;	-----------------------------------------
                                    618 ;	 function spi_set_autoinc
                                    619 ;	-----------------------------------------
      000012                        620 _spi_set_autoinc:
                                    621 ;	SPI.c:24: CS_LOW;                          // Pull CS low to select the ENC28J60
                                    622 ;	assignBit
      000012 C2 91            [12]  623 	clr	_P1_1
                                    624 ;	SPI.c:26: SPI_send(0x5E);                  // Write ECON2 register address
      000014 75 82 5E         [24]  625 	mov	dpl, #0x5e
      000017 12r00rA8         [24]  626 	lcall	_SPI_send
                                    627 ;	SPI.c:27: SPI_send(0x80);                  // Set the AUTOINC bit
      00001A 75 82 80         [24]  628 	mov	dpl, #0x80
      00001D 12r00rA8         [24]  629 	lcall	_SPI_send
                                    630 ;	SPI.c:29: CS_HIGH;                         // Pull CS high to deselect the ENC28J60
                                    631 ;	assignBit
      000020 D2 91            [12]  632 	setb	_P1_1
                                    633 ;	SPI.c:30: }
      000022 22               [24]  634 	ret
                                    635 ;------------------------------------------------------------
                                    636 ;Allocation info for local variables in function 'select_reg_bank'
                                    637 ;------------------------------------------------------------
                                    638 ;bank                      Allocated with name '_select_reg_bank_bank_10000_64'
                                    639 ;------------------------------------------------------------
                                    640 ;	SPI.c:32: void select_reg_bank(uint8_t bank)
                                    641 ;	-----------------------------------------
                                    642 ;	 function select_reg_bank
                                    643 ;	-----------------------------------------
      000023                        644 _select_reg_bank:
      000023 E5 82            [12]  645 	mov	a,dpl
      000025 90r00r01         [24]  646 	mov	dptr,#_select_reg_bank_bank_10000_64
      000028 F0               [24]  647 	movx	@dptr,a
                                    648 ;	SPI.c:35: CS_LOW;
                                    649 ;	assignBit
      000029 C2 91            [12]  650 	clr	_P1_1
                                    651 ;	SPI.c:38: SPI_send(0x5F);
      00002B 75 82 5F         [24]  652 	mov	dpl, #0x5f
      00002E 12r00rA8         [24]  653 	lcall	_SPI_send
                                    654 ;	SPI.c:41: SPI_send(bank);
      000031 90r00r01         [24]  655 	mov	dptr,#_select_reg_bank_bank_10000_64
      000034 E0               [24]  656 	movx	a,@dptr
      000035 F5 82            [12]  657 	mov	dpl,a
      000037 12r00rA8         [24]  658 	lcall	_SPI_send
                                    659 ;	SPI.c:44: CS_HIGH;
                                    660 ;	assignBit
      00003A D2 91            [12]  661 	setb	_P1_1
                                    662 ;	SPI.c:45: }
      00003C 22               [24]  663 	ret
                                    664 ;------------------------------------------------------------
                                    665 ;Allocation info for local variables in function 'spi_control_write'
                                    666 ;------------------------------------------------------------
                                    667 ;addr                      Allocated with name '_spi_control_write_PARM_2'
                                    668 ;data                      Allocated with name '_spi_control_write_PARM_3'
                                    669 ;reg_bank                  Allocated with name '_spi_control_write_reg_bank_10000_66'
                                    670 ;opcode                    Allocated with name '_spi_control_write_opcode_10000_67'
                                    671 ;------------------------------------------------------------
                                    672 ;	SPI.c:46: void spi_control_write(uint8_t reg_bank, uint8_t addr, uint8_t data)
                                    673 ;	-----------------------------------------
                                    674 ;	 function spi_control_write
                                    675 ;	-----------------------------------------
      00003D                        676 _spi_control_write:
      00003D E5 82            [12]  677 	mov	a,dpl
      00003F 90r00r04         [24]  678 	mov	dptr,#_spi_control_write_reg_bank_10000_66
      000042 F0               [24]  679 	movx	@dptr,a
                                    680 ;	SPI.c:49: addr = addr + opcode; // Add the opcode to the address
      000043 90r00r02         [24]  681 	mov	dptr,#_spi_control_write_PARM_2
      000046 E0               [24]  682 	movx	a,@dptr
      000047 24 40            [12]  683 	add	a, #0x40
      000049 F0               [24]  684 	movx	@dptr,a
                                    685 ;	SPI.c:51: select_reg_bank(reg_bank); // Function to select the register bank
      00004A 90r00r04         [24]  686 	mov	dptr,#_spi_control_write_reg_bank_10000_66
      00004D E0               [24]  687 	movx	a,@dptr
      00004E F5 82            [12]  688 	mov	dpl,a
      000050 12r00r23         [24]  689 	lcall	_select_reg_bank
                                    690 ;	SPI.c:54: CS_LOW;
                                    691 ;	assignBit
      000053 C2 91            [12]  692 	clr	_P1_1
                                    693 ;	SPI.c:57: SPI_send(addr);
      000055 90r00r02         [24]  694 	mov	dptr,#_spi_control_write_PARM_2
      000058 E0               [24]  695 	movx	a,@dptr
      000059 FF               [12]  696 	mov	r7,a
      00005A F5 82            [12]  697 	mov	dpl,a
      00005C C0 07            [24]  698 	push	ar7
      00005E 12r00rA8         [24]  699 	lcall	_SPI_send
      000061 D0 07            [24]  700 	pop	ar7
                                    701 ;	SPI.c:60: SPI_send(data);
      000063 90r00r03         [24]  702 	mov	dptr,#_spi_control_write_PARM_3
      000066 E0               [24]  703 	movx	a,@dptr
      000067 FE               [12]  704 	mov	r6,a
      000068 F5 82            [12]  705 	mov	dpl,a
      00006A C0 07            [24]  706 	push	ar7
      00006C C0 06            [24]  707 	push	ar6
      00006E 12r00rA8         [24]  708 	lcall	_SPI_send
      000071 D0 06            [24]  709 	pop	ar6
      000073 D0 07            [24]  710 	pop	ar7
                                    711 ;	SPI.c:63: CS_HIGH;
                                    712 ;	assignBit
      000075 D2 91            [12]  713 	setb	_P1_1
                                    714 ;	SPI.c:66: printf("Write: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      000077 7D 00            [12]  715 	mov	r5,#0x00
      000079 7C 00            [12]  716 	mov	r4,#0x00
      00007B C0 06            [24]  717 	push	ar6
      00007D C0 05            [24]  718 	push	ar5
      00007F C0 07            [24]  719 	push	ar7
      000081 C0 04            [24]  720 	push	ar4
      000083 74r00            [12]  721 	mov	a,#___str_0
      000085 C0 E0            [24]  722 	push	acc
      000087 74s00            [12]  723 	mov	a,#(___str_0 >> 8)
      000089 C0 E0            [24]  724 	push	acc
      00008B 74 80            [12]  725 	mov	a,#0x80
      00008D C0 E0            [24]  726 	push	acc
      00008F 12r00r00         [24]  727 	lcall	_printf
      000092 E5 81            [12]  728 	mov	a,sp
      000094 24 F9            [12]  729 	add	a,#0xf9
      000096 F5 81            [12]  730 	mov	sp,a
                                    731 ;	SPI.c:67: }
      000098 22               [24]  732 	ret
                                    733 ;------------------------------------------------------------
                                    734 ;Allocation info for local variables in function 'configure_SPI'
                                    735 ;------------------------------------------------------------
                                    736 ;	SPI.c:70: void configure_SPI(void)
                                    737 ;	-----------------------------------------
                                    738 ;	 function configure_SPI
                                    739 ;	-----------------------------------------
      000099                        740 _configure_SPI:
                                    741 ;	SPI.c:72: CS_PIN = 1;
                                    742 ;	assignBit
      000099 D2 91            [12]  743 	setb	_P1_1
                                    744 ;	SPI.c:73: SPCON = 0x00;
      00009B 75 C3 00         [24]  745 	mov	_SPCON,#0x00
                                    746 ;	SPI.c:74: SPCON |= SS_DISABLE;
      00009E 43 C3 20         [24]  747 	orl	_SPCON,#0x20
                                    748 ;	SPI.c:75: SPCON |= MASTER_MODE;
      0000A1 43 C3 10         [24]  749 	orl	_SPCON,#0x10
                                    750 ;	SPI.c:76: SPCON |= SPI_ENABLE;
      0000A4 43 C3 40         [24]  751 	orl	_SPCON,#0x40
                                    752 ;	SPI.c:77: }
      0000A7 22               [24]  753 	ret
                                    754 ;------------------------------------------------------------
                                    755 ;Allocation info for local variables in function 'SPI_send'
                                    756 ;------------------------------------------------------------
                                    757 ;data                      Allocated with name '_SPI_send_data_10000_70'
                                    758 ;------------------------------------------------------------
                                    759 ;	SPI.c:80: void SPI_send(uint8_t data)
                                    760 ;	-----------------------------------------
                                    761 ;	 function SPI_send
                                    762 ;	-----------------------------------------
      0000A8                        763 _SPI_send:
      0000A8 E5 82            [12]  764 	mov	a,dpl
      0000AA 90r00r05         [24]  765 	mov	dptr,#_SPI_send_data_10000_70
      0000AD F0               [24]  766 	movx	@dptr,a
                                    767 ;	SPI.c:83: SPDAT = data;           // Config + MSB of data
      0000AE E0               [24]  768 	movx	a,@dptr
      0000AF F5 C5            [12]  769 	mov	_SPDAT,a
                                    770 ;	SPI.c:85: while (!(SPSTA & 0x80))
      0000B1                        771 00101$:
      0000B1 E5 C4            [12]  772 	mov	a,_SPSTA
      0000B3 30 E7 FB         [24]  773 	jnb	acc.7,00101$
                                    774 ;	SPI.c:90: }
      0000B6 22               [24]  775 	ret
                                    776 ;------------------------------------------------------------
                                    777 ;Allocation info for local variables in function 'enc_reset'
                                    778 ;------------------------------------------------------------
                                    779 ;	SPI.c:92: void enc_reset(void)
                                    780 ;	-----------------------------------------
                                    781 ;	 function enc_reset
                                    782 ;	-----------------------------------------
      0000B7                        783 _enc_reset:
                                    784 ;	SPI.c:94: CS_LOW;                    // Pull CS low to select the ENC28J60
                                    785 ;	assignBit
      0000B7 C2 91            [12]  786 	clr	_P1_1
                                    787 ;	SPI.c:95: SPI_send(0xFF);            // Send reset command
      0000B9 75 82 FF         [24]  788 	mov	dpl, #0xff
      0000BC 12r00rA8         [24]  789 	lcall	_SPI_send
                                    790 ;	SPI.c:96: CS_HIGH;                   // Pull CS high to deselect the ENC28J60
                                    791 ;	assignBit
      0000BF D2 91            [12]  792 	setb	_P1_1
                                    793 ;	SPI.c:97: }
      0000C1 22               [24]  794 	ret
                                    795 ;------------------------------------------------------------
                                    796 ;Allocation info for local variables in function 'eth_spi_read'
                                    797 ;------------------------------------------------------------
                                    798 ;bank                      Allocated with name '_eth_spi_read_PARM_2'
                                    799 ;addr                      Allocated with name '_eth_spi_read_addr_10000_75'
                                    800 ;data                      Allocated with name '_eth_spi_read_data_10001_78'
                                    801 ;------------------------------------------------------------
                                    802 ;	SPI.c:99: uint8_t eth_spi_read(uint8_t addr, uint8_t bank)
                                    803 ;	-----------------------------------------
                                    804 ;	 function eth_spi_read
                                    805 ;	-----------------------------------------
      0000C2                        806 _eth_spi_read:
      0000C2 E5 82            [12]  807 	mov	a,dpl
      0000C4 90r00r07         [24]  808 	mov	dptr,#_eth_spi_read_addr_10000_75
      0000C7 F0               [24]  809 	movx	@dptr,a
                                    810 ;	SPI.c:101: if (addr > 0x1F) {
      0000C8 E0               [24]  811 	movx	a,@dptr
      0000C9 FF               [12]  812 	mov  r7,a
      0000CA 24 E0            [12]  813 	add	a,#0xff - 0x1f
      0000CC 50 19            [24]  814 	jnc	00102$
                                    815 ;	SPI.c:102: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      0000CE 74r25            [12]  816 	mov	a,#___str_1
      0000D0 C0 E0            [24]  817 	push	acc
      0000D2 74s00            [12]  818 	mov	a,#(___str_1 >> 8)
      0000D4 C0 E0            [24]  819 	push	acc
      0000D6 74 80            [12]  820 	mov	a,#0x80
      0000D8 C0 E0            [24]  821 	push	acc
      0000DA 12r00r00         [24]  822 	lcall	_printf
      0000DD 15 81            [12]  823 	dec	sp
      0000DF 15 81            [12]  824 	dec	sp
      0000E1 15 81            [12]  825 	dec	sp
                                    826 ;	SPI.c:103: return 0;
      0000E3 75 82 00         [24]  827 	mov	dpl, #0x00
      0000E6 22               [24]  828 	ret
      0000E7                        829 00102$:
                                    830 ;	SPI.c:106: select_reg_bank(bank);     // Select the appropriate bank
      0000E7 90r00r06         [24]  831 	mov	dptr,#_eth_spi_read_PARM_2
      0000EA E0               [24]  832 	movx	a,@dptr
      0000EB F5 82            [12]  833 	mov	dpl,a
      0000ED C0 07            [24]  834 	push	ar7
      0000EF 12r00r23         [24]  835 	lcall	_select_reg_bank
      0000F2 D0 07            [24]  836 	pop	ar7
                                    837 ;	SPI.c:108: CS_LOW;                    // Pull CS low to start communication
                                    838 ;	assignBit
      0000F4 C2 91            [12]  839 	clr	_P1_1
                                    840 ;	SPI.c:109: SPI_send(addr);            // Send the address
      0000F6 8F 82            [24]  841 	mov	dpl, r7
      0000F8 C0 07            [24]  842 	push	ar7
      0000FA 12r00rA8         [24]  843 	lcall	_SPI_send
                                    844 ;	SPI.c:110: uint8_t data = SPI_ReadByte(); // Read the data
      0000FD 12r00r00         [24]  845 	lcall	_SPI_ReadByte
      000100 AE 82            [24]  846 	mov	r6, dpl
      000102 D0 07            [24]  847 	pop	ar7
                                    848 ;	SPI.c:111: CS_HIGH;                   // Pull CS high to end communication
                                    849 ;	assignBit
      000104 D2 91            [12]  850 	setb	_P1_1
                                    851 ;	SPI.c:114: printf("Read: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      000106 8E 04            [24]  852 	mov	ar4,r6
      000108 7D 00            [12]  853 	mov	r5,#0x00
      00010A 7B 00            [12]  854 	mov	r3,#0x00
      00010C C0 06            [24]  855 	push	ar6
      00010E C0 04            [24]  856 	push	ar4
      000110 C0 05            [24]  857 	push	ar5
      000112 C0 07            [24]  858 	push	ar7
      000114 C0 03            [24]  859 	push	ar3
      000116 74r5F            [12]  860 	mov	a,#___str_2
      000118 C0 E0            [24]  861 	push	acc
      00011A 74s00            [12]  862 	mov	a,#(___str_2 >> 8)
      00011C C0 E0            [24]  863 	push	acc
      00011E 74 80            [12]  864 	mov	a,#0x80
      000120 C0 E0            [24]  865 	push	acc
      000122 12r00r00         [24]  866 	lcall	_printf
      000125 E5 81            [12]  867 	mov	a,sp
      000127 24 F9            [12]  868 	add	a,#0xf9
      000129 F5 81            [12]  869 	mov	sp,a
      00012B D0 06            [24]  870 	pop	ar6
                                    871 ;	SPI.c:116: return data;
      00012D 8E 82            [24]  872 	mov	dpl, r6
                                    873 ;	SPI.c:117: }
      00012F 22               [24]  874 	ret
                                    875 ;------------------------------------------------------------
                                    876 ;Allocation info for local variables in function 'phy_spi_write'
                                    877 ;------------------------------------------------------------
                                    878 ;data                      Allocated with name '_phy_spi_write_PARM_2'
                                    879 ;addr                      Allocated with name '_phy_spi_write_addr_10000_79'
                                    880 ;------------------------------------------------------------
                                    881 ;	SPI.c:119: void phy_spi_write(uint8_t addr, uint16_t data)
                                    882 ;	-----------------------------------------
                                    883 ;	 function phy_spi_write
                                    884 ;	-----------------------------------------
      000130                        885 _phy_spi_write:
      000130 E5 82            [12]  886 	mov	a,dpl
      000132 90r00r0A         [24]  887 	mov	dptr,#_phy_spi_write_addr_10000_79
      000135 F0               [24]  888 	movx	@dptr,a
                                    889 ;	SPI.c:121: spi_control_write(2, 0x14, addr);                      // Write PHY address
      000136 E0               [24]  890 	movx	a,@dptr
      000137 FF               [12]  891 	mov	r7,a
      000138 90r00r02         [24]  892 	mov	dptr,#_spi_control_write_PARM_2
      00013B 74 14            [12]  893 	mov	a,#0x14
      00013D F0               [24]  894 	movx	@dptr,a
      00013E 90r00r03         [24]  895 	mov	dptr,#_spi_control_write_PARM_3
      000141 EF               [12]  896 	mov	a,r7
      000142 F0               [24]  897 	movx	@dptr,a
      000143 75 82 02         [24]  898 	mov	dpl, #0x02
      000146 C0 07            [24]  899 	push	ar7
      000148 12r00r3D         [24]  900 	lcall	_spi_control_write
      00014B D0 07            [24]  901 	pop	ar7
                                    902 ;	SPI.c:122: spi_control_write(2, 0x16, (uint8_t)(data & 0xFF));    // Write LSB of data
      00014D 90r00r08         [24]  903 	mov	dptr,#_phy_spi_write_PARM_2
      000150 E0               [24]  904 	movx	a,@dptr
      000151 FD               [12]  905 	mov	r5,a
      000152 A3               [24]  906 	inc	dptr
      000153 E0               [24]  907 	movx	a,@dptr
      000154 FE               [12]  908 	mov	r6,a
      000155 8D 04            [24]  909 	mov	ar4,r5
      000157 90r00r02         [24]  910 	mov	dptr,#_spi_control_write_PARM_2
      00015A 74 16            [12]  911 	mov	a,#0x16
      00015C F0               [24]  912 	movx	@dptr,a
      00015D 90r00r03         [24]  913 	mov	dptr,#_spi_control_write_PARM_3
      000160 EC               [12]  914 	mov	a,r4
      000161 F0               [24]  915 	movx	@dptr,a
      000162 75 82 02         [24]  916 	mov	dpl, #0x02
      000165 C0 07            [24]  917 	push	ar7
      000167 C0 06            [24]  918 	push	ar6
      000169 C0 05            [24]  919 	push	ar5
      00016B 12r00r3D         [24]  920 	lcall	_spi_control_write
      00016E D0 05            [24]  921 	pop	ar5
      000170 D0 06            [24]  922 	pop	ar6
      000172 D0 07            [24]  923 	pop	ar7
                                    924 ;	SPI.c:123: spi_control_write(2, 0x17, (uint8_t)((data >> 8) & 0xFF)); // Write MSB of data
      000174 8E 04            [24]  925 	mov	ar4,r6
      000176 90r00r02         [24]  926 	mov	dptr,#_spi_control_write_PARM_2
      000179 74 17            [12]  927 	mov	a,#0x17
      00017B F0               [24]  928 	movx	@dptr,a
      00017C 90r00r03         [24]  929 	mov	dptr,#_spi_control_write_PARM_3
      00017F EC               [12]  930 	mov	a,r4
      000180 F0               [24]  931 	movx	@dptr,a
      000181 75 82 02         [24]  932 	mov	dpl, #0x02
      000184 C0 07            [24]  933 	push	ar7
      000186 C0 06            [24]  934 	push	ar6
      000188 C0 05            [24]  935 	push	ar5
      00018A 12r00r3D         [24]  936 	lcall	_spi_control_write
      00018D D0 05            [24]  937 	pop	ar5
      00018F D0 06            [24]  938 	pop	ar6
      000191 D0 07            [24]  939 	pop	ar7
                                    940 ;	SPI.c:126: printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      000193 7C 00            [12]  941 	mov	r4,#0x00
      000195 C0 05            [24]  942 	push	ar5
      000197 C0 06            [24]  943 	push	ar6
      000199 C0 07            [24]  944 	push	ar7
      00019B C0 04            [24]  945 	push	ar4
      00019D 74r83            [12]  946 	mov	a,#___str_3
      00019F C0 E0            [24]  947 	push	acc
      0001A1 74s00            [12]  948 	mov	a,#(___str_3 >> 8)
      0001A3 C0 E0            [24]  949 	push	acc
      0001A5 74 80            [12]  950 	mov	a,#0x80
      0001A7 C0 E0            [24]  951 	push	acc
      0001A9 12r00r00         [24]  952 	lcall	_printf
      0001AC E5 81            [12]  953 	mov	a,sp
      0001AE 24 F9            [12]  954 	add	a,#0xf9
      0001B0 F5 81            [12]  955 	mov	sp,a
                                    956 ;	SPI.c:127: }
      0001B2 22               [24]  957 	ret
                                    958 ;------------------------------------------------------------
                                    959 ;Allocation info for local variables in function 'mac_spi_read'
                                    960 ;------------------------------------------------------------
                                    961 ;bank                      Allocated with name '_mac_spi_read_PARM_2'
                                    962 ;addr                      Allocated with name '_mac_spi_read_addr_10000_81'
                                    963 ;data                      Allocated with name '_mac_spi_read_data_10001_84'
                                    964 ;------------------------------------------------------------
                                    965 ;	SPI.c:129: uint8_t mac_spi_read(uint8_t addr, uint8_t bank)
                                    966 ;	-----------------------------------------
                                    967 ;	 function mac_spi_read
                                    968 ;	-----------------------------------------
      0001B3                        969 _mac_spi_read:
      0001B3 E5 82            [12]  970 	mov	a,dpl
      0001B5 90r00r0C         [24]  971 	mov	dptr,#_mac_spi_read_addr_10000_81
      0001B8 F0               [24]  972 	movx	@dptr,a
                                    973 ;	SPI.c:131: if (addr > 0x1F) {
      0001B9 E0               [24]  974 	movx	a,@dptr
      0001BA FF               [12]  975 	mov  r7,a
      0001BB 24 E0            [12]  976 	add	a,#0xff - 0x1f
      0001BD 50 19            [24]  977 	jnc	00102$
                                    978 ;	SPI.c:132: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      0001BF 74r25            [12]  979 	mov	a,#___str_1
      0001C1 C0 E0            [24]  980 	push	acc
      0001C3 74s00            [12]  981 	mov	a,#(___str_1 >> 8)
      0001C5 C0 E0            [24]  982 	push	acc
      0001C7 74 80            [12]  983 	mov	a,#0x80
      0001C9 C0 E0            [24]  984 	push	acc
      0001CB 12r00r00         [24]  985 	lcall	_printf
      0001CE 15 81            [12]  986 	dec	sp
      0001D0 15 81            [12]  987 	dec	sp
      0001D2 15 81            [12]  988 	dec	sp
                                    989 ;	SPI.c:133: return 0; // Return 0 if address is invalid
      0001D4 75 82 00         [24]  990 	mov	dpl, #0x00
      0001D7 22               [24]  991 	ret
      0001D8                        992 00102$:
                                    993 ;	SPI.c:136: select_reg_bank(bank); // Select the appropriate register bank
      0001D8 90r00r0B         [24]  994 	mov	dptr,#_mac_spi_read_PARM_2
      0001DB E0               [24]  995 	movx	a,@dptr
      0001DC F5 82            [12]  996 	mov	dpl,a
      0001DE C0 07            [24]  997 	push	ar7
      0001E0 12r00r23         [24]  998 	lcall	_select_reg_bank
      0001E3 D0 07            [24]  999 	pop	ar7
                                   1000 ;	SPI.c:139: CS_LOW;
                                   1001 ;	assignBit
      0001E5 C2 91            [12] 1002 	clr	_P1_1
                                   1003 ;	SPI.c:142: SPI_send(addr);
      0001E7 8F 82            [24] 1004 	mov	dpl, r7
      0001E9 C0 07            [24] 1005 	push	ar7
      0001EB 12r00rA8         [24] 1006 	lcall	_SPI_send
                                   1007 ;	SPI.c:145: uint8_t data = SPI_ReadByte();
      0001EE 12r00r00         [24] 1008 	lcall	_SPI_ReadByte
      0001F1 AE 82            [24] 1009 	mov	r6, dpl
      0001F3 D0 07            [24] 1010 	pop	ar7
                                   1011 ;	SPI.c:148: CS_HIGH;
                                   1012 ;	assignBit
      0001F5 D2 91            [12] 1013 	setb	_P1_1
                                   1014 ;	SPI.c:151: printf("Read: Address 0x%02X, Data 0x%02X\n", addr, data);
      0001F7 8E 04            [24] 1015 	mov	ar4,r6
      0001F9 7D 00            [12] 1016 	mov	r5,#0x00
      0001FB 7B 00            [12] 1017 	mov	r3,#0x00
      0001FD C0 06            [24] 1018 	push	ar6
      0001FF C0 04            [24] 1019 	push	ar4
      000201 C0 05            [24] 1020 	push	ar5
      000203 C0 07            [24] 1021 	push	ar7
      000205 C0 03            [24] 1022 	push	ar3
      000207 74rAC            [12] 1023 	mov	a,#___str_4
      000209 C0 E0            [24] 1024 	push	acc
      00020B 74s00            [12] 1025 	mov	a,#(___str_4 >> 8)
      00020D C0 E0            [24] 1026 	push	acc
      00020F 74 80            [12] 1027 	mov	a,#0x80
      000211 C0 E0            [24] 1028 	push	acc
      000213 12r00r00         [24] 1029 	lcall	_printf
      000216 E5 81            [12] 1030 	mov	a,sp
      000218 24 F9            [12] 1031 	add	a,#0xf9
      00021A F5 81            [12] 1032 	mov	sp,a
      00021C D0 06            [24] 1033 	pop	ar6
                                   1034 ;	SPI.c:153: return data;
      00021E 8E 82            [24] 1035 	mov	dpl, r6
                                   1036 ;	SPI.c:154: }
      000220 22               [24] 1037 	ret
                                   1038 ;------------------------------------------------------------
                                   1039 ;Allocation info for local variables in function 'phy_spi_read'
                                   1040 ;------------------------------------------------------------
                                   1041 ;addr                      Allocated with name '_phy_spi_read_addr_10000_85'
                                   1042 ;data_LSB                  Allocated with name '_phy_spi_read_data_LSB_10001_87'
                                   1043 ;data_MSB                  Allocated with name '_phy_spi_read_data_MSB_10001_87'
                                   1044 ;data                      Allocated with name '_phy_spi_read_data_10001_87'
                                   1045 ;------------------------------------------------------------
                                   1046 ;	SPI.c:157: uint16_t phy_spi_read(uint8_t addr)
                                   1047 ;	-----------------------------------------
                                   1048 ;	 function phy_spi_read
                                   1049 ;	-----------------------------------------
      000221                       1050 _phy_spi_read:
      000221 E5 82            [12] 1051 	mov	a,dpl
      000223 90r00r0D         [24] 1052 	mov	dptr,#_phy_spi_read_addr_10000_85
      000226 F0               [24] 1053 	movx	@dptr,a
                                   1054 ;	SPI.c:159: spi_control_write(2, 0x14, addr);     // Write PHY address
      000227 E0               [24] 1055 	movx	a,@dptr
      000228 FF               [12] 1056 	mov	r7,a
      000229 90r00r02         [24] 1057 	mov	dptr,#_spi_control_write_PARM_2
      00022C 74 14            [12] 1058 	mov	a,#0x14
      00022E F0               [24] 1059 	movx	@dptr,a
      00022F 90r00r03         [24] 1060 	mov	dptr,#_spi_control_write_PARM_3
      000232 EF               [12] 1061 	mov	a,r7
      000233 F0               [24] 1062 	movx	@dptr,a
      000234 75 82 02         [24] 1063 	mov	dpl, #0x02
      000237 C0 07            [24] 1064 	push	ar7
      000239 12r00r3D         [24] 1065 	lcall	_spi_control_write
      00023C D0 07            [24] 1066 	pop	ar7
                                   1067 ;	SPI.c:160: spi_control_write(2, 0x12, 1);        // Set MICMD.MIIRD bit
      00023E 90r00r02         [24] 1068 	mov	dptr,#_spi_control_write_PARM_2
      000241 74 12            [12] 1069 	mov	a,#0x12
      000243 F0               [24] 1070 	movx	@dptr,a
      000244 90r00r03         [24] 1071 	mov	dptr,#_spi_control_write_PARM_3
      000247 74 01            [12] 1072 	mov	a,#0x01
      000249 F0               [24] 1073 	movx	@dptr,a
      00024A 75 82 02         [24] 1074 	mov	dpl, #0x02
      00024D C0 07            [24] 1075 	push	ar7
      00024F 12r00r3D         [24] 1076 	lcall	_spi_control_write
                                   1077 ;	SPI.c:162: busy_wait();                          // Wait for the read to complete
      000252 12r02rCE         [24] 1078 	lcall	_busy_wait
      000255 D0 07            [24] 1079 	pop	ar7
                                   1080 ;	SPI.c:164: spi_control_write(2, 0x12, 0);        // Clear MICMD.MIIRD bit
      000257 90r00r02         [24] 1081 	mov	dptr,#_spi_control_write_PARM_2
      00025A 74 12            [12] 1082 	mov	a,#0x12
      00025C F0               [24] 1083 	movx	@dptr,a
      00025D 90r00r03         [24] 1084 	mov	dptr,#_spi_control_write_PARM_3
      000260 E4               [12] 1085 	clr	a
      000261 F0               [24] 1086 	movx	@dptr,a
      000262 75 82 02         [24] 1087 	mov	dpl, #0x02
      000265 C0 07            [24] 1088 	push	ar7
      000267 12r00r3D         [24] 1089 	lcall	_spi_control_write
      00026A D0 07            [24] 1090 	pop	ar7
                                   1091 ;	SPI.c:166: uint16_t data_LSB = mac_spi_read(0x18, 2); // Read LSB of data
      00026C 90r00r0B         [24] 1092 	mov	dptr,#_mac_spi_read_PARM_2
      00026F 74 02            [12] 1093 	mov	a,#0x02
      000271 F0               [24] 1094 	movx	@dptr,a
      000272 75 82 18         [24] 1095 	mov	dpl, #0x18
      000275 C0 07            [24] 1096 	push	ar7
      000277 12r01rB3         [24] 1097 	lcall	_mac_spi_read
      00027A AE 82            [24] 1098 	mov	r6, dpl
      00027C D0 07            [24] 1099 	pop	ar7
      00027E 7D 00            [12] 1100 	mov	r5,#0x00
                                   1101 ;	SPI.c:167: uint16_t data_MSB = mac_spi_read(0x19, 2); // Read MSB of data
      000280 90r00r0B         [24] 1102 	mov	dptr,#_mac_spi_read_PARM_2
      000283 74 02            [12] 1103 	mov	a,#0x02
      000285 F0               [24] 1104 	movx	@dptr,a
      000286 75 82 19         [24] 1105 	mov	dpl, #0x19
      000289 C0 07            [24] 1106 	push	ar7
      00028B C0 06            [24] 1107 	push	ar6
      00028D C0 05            [24] 1108 	push	ar5
      00028F 12r01rB3         [24] 1109 	lcall	_mac_spi_read
      000292 AC 82            [24] 1110 	mov	r4, dpl
      000294 D0 05            [24] 1111 	pop	ar5
      000296 D0 06            [24] 1112 	pop	ar6
      000298 D0 07            [24] 1113 	pop	ar7
                                   1114 ;	SPI.c:169: uint16_t data = (data_MSB << 8) | data_LSB;        // Combine MSB and LSB
      00029A 8C 03            [24] 1115 	mov	ar3,r4
      00029C E4               [12] 1116 	clr	a
      00029D 42 06            [12] 1117 	orl	ar6,a
      00029F EB               [12] 1118 	mov	a,r3
      0002A0 42 05            [12] 1119 	orl	ar5,a
                                   1120 ;	SPI.c:172: printf("PHY Read: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      0002A2 7C 00            [12] 1121 	mov	r4,#0x00
      0002A4 C0 06            [24] 1122 	push	ar6
      0002A6 C0 05            [24] 1123 	push	ar5
      0002A8 C0 06            [24] 1124 	push	ar6
      0002AA C0 05            [24] 1125 	push	ar5
      0002AC C0 07            [24] 1126 	push	ar7
      0002AE C0 04            [24] 1127 	push	ar4
      0002B0 74rCF            [12] 1128 	mov	a,#___str_5
      0002B2 C0 E0            [24] 1129 	push	acc
      0002B4 74s00            [12] 1130 	mov	a,#(___str_5 >> 8)
      0002B6 C0 E0            [24] 1131 	push	acc
      0002B8 74 80            [12] 1132 	mov	a,#0x80
      0002BA C0 E0            [24] 1133 	push	acc
      0002BC 12r00r00         [24] 1134 	lcall	_printf
      0002BF E5 81            [12] 1135 	mov	a,sp
      0002C1 24 F9            [12] 1136 	add	a,#0xf9
      0002C3 F5 81            [12] 1137 	mov	sp,a
      0002C5 D0 05            [24] 1138 	pop	ar5
      0002C7 D0 06            [24] 1139 	pop	ar6
                                   1140 ;	SPI.c:174: return data;        // Combine MSB and LSB
      0002C9 8E 82            [24] 1141 	mov	dpl, r6
      0002CB 8D 83            [24] 1142 	mov	dph, r5
                                   1143 ;	SPI.c:175: }
      0002CD 22               [24] 1144 	ret
                                   1145 ;------------------------------------------------------------
                                   1146 ;Allocation info for local variables in function 'busy_wait'
                                   1147 ;------------------------------------------------------------
                                   1148 ;data                      Allocated with name '_busy_wait_data_10000_89'
                                   1149 ;------------------------------------------------------------
                                   1150 ;	SPI.c:177: void busy_wait(void)
                                   1151 ;	-----------------------------------------
                                   1152 ;	 function busy_wait
                                   1153 ;	-----------------------------------------
      0002CE                       1154 _busy_wait:
                                   1155 ;	SPI.c:179: uint8_t data = mac_spi_read(0x0A, 3); // Read ESTAT register (bank 3)
      0002CE 90r00r0B         [24] 1156 	mov	dptr,#_mac_spi_read_PARM_2
      0002D1 74 03            [12] 1157 	mov	a,#0x03
      0002D3 F0               [24] 1158 	movx	@dptr,a
      0002D4 75 82 0A         [24] 1159 	mov	dpl, #0x0a
      0002D7 12r01rB3         [24] 1160 	lcall	_mac_spi_read
      0002DA E5 82            [12] 1161 	mov	a, dpl
      0002DC 90r00r0E         [24] 1162 	mov	dptr,#_busy_wait_data_10000_89
      0002DF F0               [24] 1163 	movx	@dptr,a
                                   1164 ;	SPI.c:180: while (data & 0x01)
      0002E0                       1165 00101$:
      0002E0 90r00r0E         [24] 1166 	mov	dptr,#_busy_wait_data_10000_89
      0002E3 E0               [24] 1167 	movx	a,@dptr
      0002E4 30 E0 14         [24] 1168 	jnb	acc.0,00104$
                                   1169 ;	SPI.c:182: data = mac_spi_read(0x0A, 3);
      0002E7 90r00r0B         [24] 1170 	mov	dptr,#_mac_spi_read_PARM_2
      0002EA 74 03            [12] 1171 	mov	a,#0x03
      0002EC F0               [24] 1172 	movx	@dptr,a
      0002ED 75 82 0A         [24] 1173 	mov	dpl, #0x0a
      0002F0 12r01rB3         [24] 1174 	lcall	_mac_spi_read
      0002F3 E5 82            [12] 1175 	mov	a, dpl
      0002F5 90r00r0E         [24] 1176 	mov	dptr,#_busy_wait_data_10000_89
      0002F8 F0               [24] 1177 	movx	@dptr,a
      0002F9 80 E5            [24] 1178 	sjmp	00101$
      0002FB                       1179 00104$:
                                   1180 ;	SPI.c:184: }
      0002FB 22               [24] 1181 	ret
                                   1182 ;------------------------------------------------------------
                                   1183 ;Allocation info for local variables in function 'buffer_init'
                                   1184 ;------------------------------------------------------------
                                   1185 ;size                      Allocated with name '_buffer_init_PARM_2'
                                   1186 ;start_address             Allocated with name '_buffer_init_start_address_10000_91'
                                   1187 ;erxst                     Allocated with name '_buffer_init_erxst_10001_94'
                                   1188 ;erxnd                     Allocated with name '_buffer_init_erxnd_10001_94'
                                   1189 ;------------------------------------------------------------
                                   1190 ;	SPI.c:186: void buffer_init(uint16_t start_address, uint16_t size)
                                   1191 ;	-----------------------------------------
                                   1192 ;	 function buffer_init
                                   1193 ;	-----------------------------------------
      0002FC                       1194 _buffer_init:
      0002FC AF 83            [24] 1195 	mov	r7,dph
      0002FE E5 82            [12] 1196 	mov	a,dpl
      000300 90r00r11         [24] 1197 	mov	dptr,#_buffer_init_start_address_10000_91
      000303 F0               [24] 1198 	movx	@dptr,a
      000304 EF               [12] 1199 	mov	a,r7
      000305 A3               [24] 1200 	inc	dptr
      000306 F0               [24] 1201 	movx	@dptr,a
                                   1202 ;	SPI.c:188: if (start_address > 0x1FFF || (start_address + size) > 0x1FFF) {
      000307 90r00r11         [24] 1203 	mov	dptr,#_buffer_init_start_address_10000_91
      00030A E0               [24] 1204 	movx	a,@dptr
      00030B FE               [12] 1205 	mov	r6,a
      00030C A3               [24] 1206 	inc	dptr
      00030D E0               [24] 1207 	movx	a,@dptr
      00030E FF               [12] 1208 	mov	r7,a
      00030F 8E 04            [24] 1209 	mov	ar4,r6
      000311 8F 05            [24] 1210 	mov	ar5,r7
      000313 C3               [12] 1211 	clr	c
      000314 74 FF            [12] 1212 	mov	a,#0xff
      000316 9C               [12] 1213 	subb	a,r4
      000317 74 1F            [12] 1214 	mov	a,#0x1f
      000319 9D               [12] 1215 	subb	a,r5
      00031A 40 17            [24] 1216 	jc	00101$
      00031C 90r00r0F         [24] 1217 	mov	dptr,#_buffer_init_PARM_2
      00031F E0               [24] 1218 	movx	a,@dptr
      000320 FA               [12] 1219 	mov	r2,a
      000321 A3               [24] 1220 	inc	dptr
      000322 E0               [24] 1221 	movx	a,@dptr
      000323 FB               [12] 1222 	mov	r3,a
      000324 EA               [12] 1223 	mov	a,r2
      000325 2E               [12] 1224 	add	a, r6
      000326 F8               [12] 1225 	mov	r0,a
      000327 EB               [12] 1226 	mov	a,r3
      000328 3F               [12] 1227 	addc	a, r7
      000329 F9               [12] 1228 	mov	r1,a
      00032A C3               [12] 1229 	clr	c
      00032B 74 FF            [12] 1230 	mov	a,#0xff
      00032D 98               [12] 1231 	subb	a,r0
      00032E 74 1F            [12] 1232 	mov	a,#0x1f
      000330 99               [12] 1233 	subb	a,r1
      000331 50 2A            [24] 1234 	jnc	00102$
      000333                       1235 00101$:
                                   1236 ;	SPI.c:189: printf("\n\rInvalid Buffer Address or Size: Start 0x%04X, Size 0x%04X\n\r", start_address, size);
      000333 90r00r0F         [24] 1237 	mov	dptr,#_buffer_init_PARM_2
      000336 E0               [24] 1238 	movx	a,@dptr
      000337 C0 E0            [24] 1239 	push	acc
      000339 A3               [24] 1240 	inc	dptr
      00033A E0               [24] 1241 	movx	a,@dptr
      00033B C0 E0            [24] 1242 	push	acc
      00033D 90r00r11         [24] 1243 	mov	dptr,#_buffer_init_start_address_10000_91
      000340 E0               [24] 1244 	movx	a,@dptr
      000341 C0 E0            [24] 1245 	push	acc
      000343 A3               [24] 1246 	inc	dptr
      000344 E0               [24] 1247 	movx	a,@dptr
      000345 C0 E0            [24] 1248 	push	acc
      000347 74rF7            [12] 1249 	mov	a,#___str_6
      000349 C0 E0            [24] 1250 	push	acc
      00034B 74s00            [12] 1251 	mov	a,#(___str_6 >> 8)
      00034D C0 E0            [24] 1252 	push	acc
      00034F 74 80            [12] 1253 	mov	a,#0x80
      000351 C0 E0            [24] 1254 	push	acc
      000353 12r00r00         [24] 1255 	lcall	_printf
      000356 E5 81            [12] 1256 	mov	a,sp
      000358 24 F9            [12] 1257 	add	a,#0xf9
      00035A F5 81            [12] 1258 	mov	sp,a
                                   1259 ;	SPI.c:190: return;
      00035C 22               [24] 1260 	ret
      00035D                       1261 00102$:
                                   1262 ;	SPI.c:194: uint16_t erxst = start_address & ~1; // Make sure ERXST is even
      00035D 53 04 FE         [24] 1263 	anl	ar4,#0xfe
                                   1264 ;	SPI.c:195: uint16_t erxnd = (start_address + size - 1) & ~1; // Make sure ERXND is even
      000360 EA               [12] 1265 	mov	a,r2
      000361 2E               [12] 1266 	add	a, r6
      000362 FE               [12] 1267 	mov	r6,a
      000363 EB               [12] 1268 	mov	a,r3
      000364 3F               [12] 1269 	addc	a, r7
      000365 FF               [12] 1270 	mov	r7,a
      000366 1E               [12] 1271 	dec	r6
      000367 BE FF 01         [24] 1272 	cjne	r6,#0xff,00114$
      00036A 1F               [12] 1273 	dec	r7
      00036B                       1274 00114$:
      00036B 53 06 FE         [24] 1275 	anl	ar6,#0xfe
                                   1276 ;	SPI.c:198: spi_control_write(0, 0x08, (uint8_t)(erxst >> 8)); // High byte of ERXST
      00036E 8D 03            [24] 1277 	mov	ar3,r5
      000370 90r00r02         [24] 1278 	mov	dptr,#_spi_control_write_PARM_2
      000373 74 08            [12] 1279 	mov	a,#0x08
      000375 F0               [24] 1280 	movx	@dptr,a
      000376 90r00r03         [24] 1281 	mov	dptr,#_spi_control_write_PARM_3
      000379 EB               [12] 1282 	mov	a,r3
      00037A F0               [24] 1283 	movx	@dptr,a
      00037B 75 82 00         [24] 1284 	mov	dpl, #0x00
      00037E C0 07            [24] 1285 	push	ar7
      000380 C0 06            [24] 1286 	push	ar6
      000382 C0 05            [24] 1287 	push	ar5
      000384 C0 04            [24] 1288 	push	ar4
      000386 12r00r3D         [24] 1289 	lcall	_spi_control_write
      000389 D0 04            [24] 1290 	pop	ar4
      00038B D0 05            [24] 1291 	pop	ar5
      00038D D0 06            [24] 1292 	pop	ar6
      00038F D0 07            [24] 1293 	pop	ar7
                                   1294 ;	SPI.c:199: spi_control_write(0, 0x09, (uint8_t)(erxst & 0xFF)); // Low byte of ERXST
      000391 8C 03            [24] 1295 	mov	ar3,r4
      000393 90r00r02         [24] 1296 	mov	dptr,#_spi_control_write_PARM_2
      000396 74 09            [12] 1297 	mov	a,#0x09
      000398 F0               [24] 1298 	movx	@dptr,a
      000399 90r00r03         [24] 1299 	mov	dptr,#_spi_control_write_PARM_3
      00039C EB               [12] 1300 	mov	a,r3
      00039D F0               [24] 1301 	movx	@dptr,a
      00039E 75 82 00         [24] 1302 	mov	dpl, #0x00
      0003A1 C0 07            [24] 1303 	push	ar7
      0003A3 C0 06            [24] 1304 	push	ar6
      0003A5 C0 05            [24] 1305 	push	ar5
      0003A7 C0 04            [24] 1306 	push	ar4
      0003A9 12r00r3D         [24] 1307 	lcall	_spi_control_write
      0003AC D0 04            [24] 1308 	pop	ar4
      0003AE D0 05            [24] 1309 	pop	ar5
      0003B0 D0 06            [24] 1310 	pop	ar6
      0003B2 D0 07            [24] 1311 	pop	ar7
                                   1312 ;	SPI.c:202: spi_control_write(0, 0x0A, (uint8_t)(erxnd >> 8)); // High byte of ERXND
      0003B4 8F 03            [24] 1313 	mov	ar3,r7
      0003B6 90r00r02         [24] 1314 	mov	dptr,#_spi_control_write_PARM_2
      0003B9 74 0A            [12] 1315 	mov	a,#0x0a
      0003BB F0               [24] 1316 	movx	@dptr,a
      0003BC 90r00r03         [24] 1317 	mov	dptr,#_spi_control_write_PARM_3
      0003BF EB               [12] 1318 	mov	a,r3
      0003C0 F0               [24] 1319 	movx	@dptr,a
      0003C1 75 82 00         [24] 1320 	mov	dpl, #0x00
      0003C4 C0 07            [24] 1321 	push	ar7
      0003C6 C0 06            [24] 1322 	push	ar6
      0003C8 C0 05            [24] 1323 	push	ar5
      0003CA C0 04            [24] 1324 	push	ar4
      0003CC 12r00r3D         [24] 1325 	lcall	_spi_control_write
      0003CF D0 04            [24] 1326 	pop	ar4
      0003D1 D0 05            [24] 1327 	pop	ar5
      0003D3 D0 06            [24] 1328 	pop	ar6
      0003D5 D0 07            [24] 1329 	pop	ar7
                                   1330 ;	SPI.c:203: spi_control_write(0, 0x0B, (uint8_t)(erxnd & 0xFF)); // Low byte of ERXND
      0003D7 8E 03            [24] 1331 	mov	ar3,r6
      0003D9 90r00r02         [24] 1332 	mov	dptr,#_spi_control_write_PARM_2
      0003DC 74 0B            [12] 1333 	mov	a,#0x0b
      0003DE F0               [24] 1334 	movx	@dptr,a
      0003DF 90r00r03         [24] 1335 	mov	dptr,#_spi_control_write_PARM_3
      0003E2 EB               [12] 1336 	mov	a,r3
      0003E3 F0               [24] 1337 	movx	@dptr,a
      0003E4 75 82 00         [24] 1338 	mov	dpl, #0x00
      0003E7 C0 07            [24] 1339 	push	ar7
      0003E9 C0 06            [24] 1340 	push	ar6
      0003EB C0 05            [24] 1341 	push	ar5
      0003ED C0 04            [24] 1342 	push	ar4
      0003EF 12r00r3D         [24] 1343 	lcall	_spi_control_write
      0003F2 D0 04            [24] 1344 	pop	ar4
      0003F4 D0 05            [24] 1345 	pop	ar5
      0003F6 D0 06            [24] 1346 	pop	ar6
      0003F8 D0 07            [24] 1347 	pop	ar7
                                   1348 ;	SPI.c:205: printf("\n\rBuffer Initialized: Start 0x%04X, End 0x%04X\n\r", erxst, erxnd);
      0003FA C0 06            [24] 1349 	push	ar6
      0003FC C0 07            [24] 1350 	push	ar7
      0003FE C0 04            [24] 1351 	push	ar4
      000400 C0 05            [24] 1352 	push	ar5
      000402 74r35            [12] 1353 	mov	a,#___str_7
      000404 C0 E0            [24] 1354 	push	acc
      000406 74s01            [12] 1355 	mov	a,#(___str_7 >> 8)
      000408 C0 E0            [24] 1356 	push	acc
      00040A 74 80            [12] 1357 	mov	a,#0x80
      00040C C0 E0            [24] 1358 	push	acc
      00040E 12r00r00         [24] 1359 	lcall	_printf
      000411 E5 81            [12] 1360 	mov	a,sp
      000413 24 F9            [12] 1361 	add	a,#0xf9
      000415 F5 81            [12] 1362 	mov	sp,a
                                   1363 ;	SPI.c:206: }
      000417 22               [24] 1364 	ret
                                   1365 ;------------------------------------------------------------
                                   1366 ;Allocation info for local variables in function 'spi_buffer_read'
                                   1367 ;------------------------------------------------------------
                                   1368 ;start_address             Allocated with name '_spi_buffer_read_PARM_2'
                                   1369 ;data_ptr                  Allocated with name '_spi_buffer_read_PARM_3'
                                   1370 ;num_bytes                 Allocated with name '_spi_buffer_read_num_bytes_10000_95'
                                   1371 ;higher_byte               Allocated with name '_spi_buffer_read_higher_byte_10001_100'
                                   1372 ;lower_byte                Allocated with name '_spi_buffer_read_lower_byte_10001_100'
                                   1373 ;opcode                    Allocated with name '_spi_buffer_read_opcode_10002_101'
                                   1374 ;i                         Allocated with name '_spi_buffer_read_i_20002_102'
                                   1375 ;------------------------------------------------------------
                                   1376 ;	SPI.c:209: void spi_buffer_read(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1377 ;	-----------------------------------------
                                   1378 ;	 function spi_buffer_read
                                   1379 ;	-----------------------------------------
      000418                       1380 _spi_buffer_read:
      000418 AF 83            [24] 1381 	mov	r7,dph
      00041A E5 82            [12] 1382 	mov	a,dpl
      00041C 90r00r18         [24] 1383 	mov	dptr,#_spi_buffer_read_num_bytes_10000_95
      00041F F0               [24] 1384 	movx	@dptr,a
      000420 EF               [12] 1385 	mov	a,r7
      000421 A3               [24] 1386 	inc	dptr
      000422 F0               [24] 1387 	movx	@dptr,a
                                   1388 ;	SPI.c:211: if (num_bytes < 1) {
      000423 90r00r18         [24] 1389 	mov	dptr,#_spi_buffer_read_num_bytes_10000_95
      000426 E0               [24] 1390 	movx	a,@dptr
      000427 FE               [12] 1391 	mov	r6,a
      000428 A3               [24] 1392 	inc	dptr
      000429 E0               [24] 1393 	movx	a,@dptr
      00042A FF               [12] 1394 	mov	r7,a
      00042B C3               [12] 1395 	clr	c
      00042C EE               [12] 1396 	mov	a,r6
      00042D 94 01            [12] 1397 	subb	a,#0x01
      00042F EF               [12] 1398 	mov	a,r7
      000430 64 80            [12] 1399 	xrl	a,#0x80
      000432 94 80            [12] 1400 	subb	a,#0x80
      000434 50 1A            [24] 1401 	jnc	00102$
                                   1402 ;	SPI.c:212: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      000436 C0 06            [24] 1403 	push	ar6
      000438 C0 07            [24] 1404 	push	ar7
      00043A 74r66            [12] 1405 	mov	a,#___str_8
      00043C C0 E0            [24] 1406 	push	acc
      00043E 74s01            [12] 1407 	mov	a,#(___str_8 >> 8)
      000440 C0 E0            [24] 1408 	push	acc
      000442 74 80            [12] 1409 	mov	a,#0x80
      000444 C0 E0            [24] 1410 	push	acc
      000446 12r00r00         [24] 1411 	lcall	_printf
      000449 E5 81            [12] 1412 	mov	a,sp
      00044B 24 FB            [12] 1413 	add	a,#0xfb
      00044D F5 81            [12] 1414 	mov	sp,a
                                   1415 ;	SPI.c:213: return;
      00044F 22               [24] 1416 	ret
      000450                       1417 00102$:
                                   1418 ;	SPI.c:215: if (start_address > 0x1FFF) {
      000450 90r00r13         [24] 1419 	mov	dptr,#_spi_buffer_read_PARM_2
      000453 E0               [24] 1420 	movx	a,@dptr
      000454 FC               [12] 1421 	mov	r4,a
      000455 A3               [24] 1422 	inc	dptr
      000456 E0               [24] 1423 	movx	a,@dptr
      000457 FD               [12] 1424 	mov	r5,a
      000458 8C 02            [24] 1425 	mov	ar2,r4
      00045A 8D 03            [24] 1426 	mov	ar3,r5
      00045C C3               [12] 1427 	clr	c
      00045D 74 FF            [12] 1428 	mov	a,#0xff
      00045F 9A               [12] 1429 	subb	a,r2
      000460 74 1F            [12] 1430 	mov	a,#0x1f
      000462 9B               [12] 1431 	subb	a,r3
      000463 50 1A            [24] 1432 	jnc	00104$
                                   1433 ;	SPI.c:216: printf("\n\rInvalid address: %04X\n\r", start_address);
      000465 C0 04            [24] 1434 	push	ar4
      000467 C0 05            [24] 1435 	push	ar5
      000469 74r86            [12] 1436 	mov	a,#___str_9
      00046B C0 E0            [24] 1437 	push	acc
      00046D 74s01            [12] 1438 	mov	a,#(___str_9 >> 8)
      00046F C0 E0            [24] 1439 	push	acc
      000471 74 80            [12] 1440 	mov	a,#0x80
      000473 C0 E0            [24] 1441 	push	acc
      000475 12r00r00         [24] 1442 	lcall	_printf
      000478 E5 81            [12] 1443 	mov	a,sp
      00047A 24 FB            [12] 1444 	add	a,#0xfb
      00047C F5 81            [12] 1445 	mov	sp,a
                                   1446 ;	SPI.c:217: return;
      00047E 22               [24] 1447 	ret
      00047F                       1448 00104$:
                                   1449 ;	SPI.c:220: if (num_bytes > 1) {
      00047F C3               [12] 1450 	clr	c
      000480 74 01            [12] 1451 	mov	a,#0x01
      000482 9E               [12] 1452 	subb	a,r6
      000483 74 80            [12] 1453 	mov	a,#(0x00 ^ 0x80)
      000485 8F F0            [24] 1454 	mov	b,r7
      000487 63 F0 80         [24] 1455 	xrl	b,#0x80
      00048A 95 F0            [12] 1456 	subb	a,b
      00048C 50 0B            [24] 1457 	jnc	00106$
                                   1458 ;	SPI.c:221: spi_set_autoinc();
      00048E C0 05            [24] 1459 	push	ar5
      000490 C0 04            [24] 1460 	push	ar4
      000492 12r00r12         [24] 1461 	lcall	_spi_set_autoinc
      000495 D0 04            [24] 1462 	pop	ar4
      000497 D0 05            [24] 1463 	pop	ar5
      000499                       1464 00106$:
                                   1465 ;	SPI.c:224: buffer_init(start_address, num_bytes);
      000499 90r00r18         [24] 1466 	mov	dptr,#_spi_buffer_read_num_bytes_10000_95
      00049C E0               [24] 1467 	movx	a,@dptr
      00049D FE               [12] 1468 	mov	r6,a
      00049E A3               [24] 1469 	inc	dptr
      00049F E0               [24] 1470 	movx	a,@dptr
      0004A0 FF               [12] 1471 	mov	r7,a
      0004A1 90r00r0F         [24] 1472 	mov	dptr,#_buffer_init_PARM_2
      0004A4 EE               [12] 1473 	mov	a,r6
      0004A5 F0               [24] 1474 	movx	@dptr,a
      0004A6 EF               [12] 1475 	mov	a,r7
      0004A7 A3               [24] 1476 	inc	dptr
      0004A8 F0               [24] 1477 	movx	@dptr,a
      0004A9 8C 82            [24] 1478 	mov	dpl, r4
      0004AB 8D 83            [24] 1479 	mov	dph, r5
      0004AD C0 07            [24] 1480 	push	ar7
      0004AF C0 06            [24] 1481 	push	ar6
      0004B1 C0 05            [24] 1482 	push	ar5
      0004B3 C0 04            [24] 1483 	push	ar4
      0004B5 12r02rFC         [24] 1484 	lcall	_buffer_init
      0004B8 D0 04            [24] 1485 	pop	ar4
      0004BA D0 05            [24] 1486 	pop	ar5
      0004BC D0 06            [24] 1487 	pop	ar6
      0004BE D0 07            [24] 1488 	pop	ar7
                                   1489 ;	SPI.c:225: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      0004C0 8D 03            [24] 1490 	mov	ar3,r5
                                   1491 ;	SPI.c:226: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      0004C2 8C 02            [24] 1492 	mov	ar2,r4
                                   1493 ;	SPI.c:228: spi_control_write(0, 0x01, higher_byte); // High byte
      0004C4 90r00r02         [24] 1494 	mov	dptr,#_spi_control_write_PARM_2
      0004C7 74 01            [12] 1495 	mov	a,#0x01
      0004C9 F0               [24] 1496 	movx	@dptr,a
      0004CA 90r00r03         [24] 1497 	mov	dptr,#_spi_control_write_PARM_3
      0004CD EB               [12] 1498 	mov	a,r3
      0004CE F0               [24] 1499 	movx	@dptr,a
      0004CF 75 82 00         [24] 1500 	mov	dpl, #0x00
      0004D2 C0 07            [24] 1501 	push	ar7
      0004D4 C0 06            [24] 1502 	push	ar6
      0004D6 C0 05            [24] 1503 	push	ar5
      0004D8 C0 04            [24] 1504 	push	ar4
      0004DA C0 02            [24] 1505 	push	ar2
      0004DC 12r00r3D         [24] 1506 	lcall	_spi_control_write
      0004DF D0 02            [24] 1507 	pop	ar2
      0004E1 D0 04            [24] 1508 	pop	ar4
      0004E3 D0 05            [24] 1509 	pop	ar5
      0004E5 D0 06            [24] 1510 	pop	ar6
      0004E7 D0 07            [24] 1511 	pop	ar7
                                   1512 ;	SPI.c:229: spi_control_write(0, 0x00, lower_byte); // Low byte
      0004E9 90r00r02         [24] 1513 	mov	dptr,#_spi_control_write_PARM_2
      0004EC E4               [12] 1514 	clr	a
      0004ED F0               [24] 1515 	movx	@dptr,a
      0004EE 90r00r03         [24] 1516 	mov	dptr,#_spi_control_write_PARM_3
      0004F1 EA               [12] 1517 	mov	a,r2
      0004F2 F0               [24] 1518 	movx	@dptr,a
      0004F3 75 82 00         [24] 1519 	mov	dpl, #0x00
      0004F6 C0 07            [24] 1520 	push	ar7
      0004F8 C0 06            [24] 1521 	push	ar6
      0004FA C0 05            [24] 1522 	push	ar5
      0004FC C0 04            [24] 1523 	push	ar4
      0004FE 12r00r3D         [24] 1524 	lcall	_spi_control_write
                                   1525 ;	SPI.c:232: CS_LOW; // Pull CS Low
                                   1526 ;	assignBit
      000501 C2 91            [12] 1527 	clr	_P1_1
                                   1528 ;	SPI.c:233: SPI_send(opcode); // Send opcode
      000503 75 82 3A         [24] 1529 	mov	dpl, #0x3a
      000506 12r00rA8         [24] 1530 	lcall	_SPI_send
      000509 D0 04            [24] 1531 	pop	ar4
      00050B D0 05            [24] 1532 	pop	ar5
      00050D D0 06            [24] 1533 	pop	ar6
      00050F D0 07            [24] 1534 	pop	ar7
                                   1535 ;	SPI.c:236: printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      000511 C0 07            [24] 1536 	push	ar7
      000513 C0 06            [24] 1537 	push	ar6
      000515 C0 04            [24] 1538 	push	ar4
      000517 C0 05            [24] 1539 	push	ar5
      000519 C0 06            [24] 1540 	push	ar6
      00051B C0 07            [24] 1541 	push	ar7
      00051D 74rA0            [12] 1542 	mov	a,#___str_10
      00051F C0 E0            [24] 1543 	push	acc
      000521 74s01            [12] 1544 	mov	a,#(___str_10 >> 8)
      000523 C0 E0            [24] 1545 	push	acc
      000525 74 80            [12] 1546 	mov	a,#0x80
      000527 C0 E0            [24] 1547 	push	acc
      000529 12r00r00         [24] 1548 	lcall	_printf
      00052C E5 81            [12] 1549 	mov	a,sp
      00052E 24 F9            [12] 1550 	add	a,#0xf9
      000530 F5 81            [12] 1551 	mov	sp,a
      000532 D0 06            [24] 1552 	pop	ar6
      000534 D0 07            [24] 1553 	pop	ar7
                                   1554 ;	SPI.c:237: for (int i = 0; i < num_bytes; i++) {
      000536 90r00r1A         [24] 1555 	mov	dptr,#_spi_buffer_read_i_20002_102
      000539 E4               [12] 1556 	clr	a
      00053A F0               [24] 1557 	movx	@dptr,a
      00053B A3               [24] 1558 	inc	dptr
      00053C F0               [24] 1559 	movx	@dptr,a
      00053D 90r00r15         [24] 1560 	mov	dptr,#_spi_buffer_read_PARM_3
      000540 E0               [24] 1561 	movx	a,@dptr
      000541 FB               [12] 1562 	mov	r3,a
      000542 A3               [24] 1563 	inc	dptr
      000543 E0               [24] 1564 	movx	a,@dptr
      000544 FC               [12] 1565 	mov	r4,a
      000545 A3               [24] 1566 	inc	dptr
      000546 E0               [24] 1567 	movx	a,@dptr
      000547 FD               [12] 1568 	mov	r5,a
      000548                       1569 00109$:
      000548 90r00r1A         [24] 1570 	mov	dptr,#_spi_buffer_read_i_20002_102
      00054B E0               [24] 1571 	movx	a,@dptr
      00054C F9               [12] 1572 	mov	r1,a
      00054D A3               [24] 1573 	inc	dptr
      00054E E0               [24] 1574 	movx	a,@dptr
      00054F FA               [12] 1575 	mov	r2,a
      000550 C3               [12] 1576 	clr	c
      000551 E9               [12] 1577 	mov	a,r1
      000552 9E               [12] 1578 	subb	a,r6
      000553 EA               [12] 1579 	mov	a,r2
      000554 64 80            [12] 1580 	xrl	a,#0x80
      000556 8F F0            [24] 1581 	mov	b,r7
      000558 63 F0 80         [24] 1582 	xrl	b,#0x80
      00055B 95 F0            [12] 1583 	subb	a,b
      00055D 40 03            [24] 1584 	jc	00147$
      00055F 02r05rE5         [24] 1585 	ljmp	00107$
      000562                       1586 00147$:
                                   1587 ;	SPI.c:238: *data_ptr = SPI_ReadByte(); // Read data
      000562 C0 06            [24] 1588 	push	ar6
      000564 C0 07            [24] 1589 	push	ar7
      000566 C0 07            [24] 1590 	push	ar7
      000568 C0 06            [24] 1591 	push	ar6
      00056A C0 05            [24] 1592 	push	ar5
      00056C C0 04            [24] 1593 	push	ar4
      00056E C0 03            [24] 1594 	push	ar3
      000570 C0 02            [24] 1595 	push	ar2
      000572 C0 01            [24] 1596 	push	ar1
      000574 12r00r00         [24] 1597 	lcall	_SPI_ReadByte
      000577 A8 82            [24] 1598 	mov	r0, dpl
      000579 D0 01            [24] 1599 	pop	ar1
      00057B D0 02            [24] 1600 	pop	ar2
      00057D D0 03            [24] 1601 	pop	ar3
      00057F D0 04            [24] 1602 	pop	ar4
      000581 D0 05            [24] 1603 	pop	ar5
      000583 D0 06            [24] 1604 	pop	ar6
      000585 D0 07            [24] 1605 	pop	ar7
      000587 8B 82            [24] 1606 	mov	dpl,r3
      000589 8C 83            [24] 1607 	mov	dph,r4
      00058B 8D F0            [24] 1608 	mov	b,r5
      00058D E8               [12] 1609 	mov	a,r0
      00058E 12r00r00         [24] 1610 	lcall	__gptrput
      000591 A3               [24] 1611 	inc	dptr
      000592 AB 82            [24] 1612 	mov	r3,dpl
      000594 AC 83            [24] 1613 	mov	r4,dph
                                   1614 ;	SPI.c:239: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      000596 7F 00            [12] 1615 	mov	r7,#0x00
      000598 09               [12] 1616 	inc	r1
      000599 B9 00 01         [24] 1617 	cjne	r1,#0x00,00148$
      00059C 0A               [12] 1618 	inc	r2
      00059D                       1619 00148$:
      00059D C0 07            [24] 1620 	push	ar7
      00059F C0 06            [24] 1621 	push	ar6
      0005A1 C0 05            [24] 1622 	push	ar5
      0005A3 C0 04            [24] 1623 	push	ar4
      0005A5 C0 03            [24] 1624 	push	ar3
      0005A7 C0 02            [24] 1625 	push	ar2
      0005A9 C0 01            [24] 1626 	push	ar1
      0005AB C0 00            [24] 1627 	push	ar0
      0005AD C0 07            [24] 1628 	push	ar7
      0005AF C0 01            [24] 1629 	push	ar1
      0005B1 C0 02            [24] 1630 	push	ar2
      0005B3 74rDB            [12] 1631 	mov	a,#___str_11
      0005B5 C0 E0            [24] 1632 	push	acc
      0005B7 74s01            [12] 1633 	mov	a,#(___str_11 >> 8)
      0005B9 C0 E0            [24] 1634 	push	acc
      0005BB 74 80            [12] 1635 	mov	a,#0x80
      0005BD C0 E0            [24] 1636 	push	acc
      0005BF 12r00r00         [24] 1637 	lcall	_printf
      0005C2 E5 81            [12] 1638 	mov	a,sp
      0005C4 24 F9            [12] 1639 	add	a,#0xf9
      0005C6 F5 81            [12] 1640 	mov	sp,a
      0005C8 D0 01            [24] 1641 	pop	ar1
      0005CA D0 02            [24] 1642 	pop	ar2
      0005CC D0 03            [24] 1643 	pop	ar3
      0005CE D0 04            [24] 1644 	pop	ar4
      0005D0 D0 05            [24] 1645 	pop	ar5
      0005D2 D0 06            [24] 1646 	pop	ar6
      0005D4 D0 07            [24] 1647 	pop	ar7
                                   1648 ;	SPI.c:240: data_ptr++;
                                   1649 ;	SPI.c:237: for (int i = 0; i < num_bytes; i++) {
      0005D6 90r00r1A         [24] 1650 	mov	dptr,#_spi_buffer_read_i_20002_102
      0005D9 E9               [12] 1651 	mov	a,r1
      0005DA F0               [24] 1652 	movx	@dptr,a
      0005DB EA               [12] 1653 	mov	a,r2
      0005DC A3               [24] 1654 	inc	dptr
      0005DD F0               [24] 1655 	movx	@dptr,a
      0005DE D0 07            [24] 1656 	pop	ar7
      0005E0 D0 06            [24] 1657 	pop	ar6
      0005E2 02r05r48         [24] 1658 	ljmp	00109$
      0005E5                       1659 00107$:
                                   1660 ;	SPI.c:242: CS_HIGH; // Pull CS High
                                   1661 ;	assignBit
      0005E5 D2 91            [12] 1662 	setb	_P1_1
                                   1663 ;	SPI.c:243: }
      0005E7 22               [24] 1664 	ret
                                   1665 ;------------------------------------------------------------
                                   1666 ;Allocation info for local variables in function 'spi_buffer_write'
                                   1667 ;------------------------------------------------------------
                                   1668 ;start_address             Allocated with name '_spi_buffer_write_PARM_2'
                                   1669 ;data_ptr                  Allocated with name '_spi_buffer_write_PARM_3'
                                   1670 ;num_bytes                 Allocated with name '_spi_buffer_write_num_bytes_10000_104'
                                   1671 ;higher_byte               Allocated with name '_spi_buffer_write_higher_byte_10001_109'
                                   1672 ;lower_byte                Allocated with name '_spi_buffer_write_lower_byte_10001_109'
                                   1673 ;opcode                    Allocated with name '_spi_buffer_write_opcode_10002_110'
                                   1674 ;i                         Allocated with name '_spi_buffer_write_i_20002_111'
                                   1675 ;------------------------------------------------------------
                                   1676 ;	SPI.c:246: void spi_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1677 ;	-----------------------------------------
                                   1678 ;	 function spi_buffer_write
                                   1679 ;	-----------------------------------------
      0005E8                       1680 _spi_buffer_write:
      0005E8 AF 83            [24] 1681 	mov	r7,dph
      0005EA E5 82            [12] 1682 	mov	a,dpl
      0005EC 90r00r21         [24] 1683 	mov	dptr,#_spi_buffer_write_num_bytes_10000_104
      0005EF F0               [24] 1684 	movx	@dptr,a
      0005F0 EF               [12] 1685 	mov	a,r7
      0005F1 A3               [24] 1686 	inc	dptr
      0005F2 F0               [24] 1687 	movx	@dptr,a
                                   1688 ;	SPI.c:248: if (num_bytes < 1)
      0005F3 90r00r21         [24] 1689 	mov	dptr,#_spi_buffer_write_num_bytes_10000_104
      0005F6 E0               [24] 1690 	movx	a,@dptr
      0005F7 FE               [12] 1691 	mov	r6,a
      0005F8 A3               [24] 1692 	inc	dptr
      0005F9 E0               [24] 1693 	movx	a,@dptr
      0005FA FF               [12] 1694 	mov	r7,a
      0005FB C3               [12] 1695 	clr	c
      0005FC EE               [12] 1696 	mov	a,r6
      0005FD 94 01            [12] 1697 	subb	a,#0x01
      0005FF EF               [12] 1698 	mov	a,r7
      000600 64 80            [12] 1699 	xrl	a,#0x80
      000602 94 80            [12] 1700 	subb	a,#0x80
      000604 50 1A            [24] 1701 	jnc	00102$
                                   1702 ;	SPI.c:250: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      000606 C0 06            [24] 1703 	push	ar6
      000608 C0 07            [24] 1704 	push	ar7
      00060A 74r66            [12] 1705 	mov	a,#___str_8
      00060C C0 E0            [24] 1706 	push	acc
      00060E 74s01            [12] 1707 	mov	a,#(___str_8 >> 8)
      000610 C0 E0            [24] 1708 	push	acc
      000612 74 80            [12] 1709 	mov	a,#0x80
      000614 C0 E0            [24] 1710 	push	acc
      000616 12r00r00         [24] 1711 	lcall	_printf
      000619 E5 81            [12] 1712 	mov	a,sp
      00061B 24 FB            [12] 1713 	add	a,#0xfb
      00061D F5 81            [12] 1714 	mov	sp,a
                                   1715 ;	SPI.c:251: return;
      00061F 22               [24] 1716 	ret
      000620                       1717 00102$:
                                   1718 ;	SPI.c:253: if (start_address > 0x1FFF) {
      000620 90r00r1C         [24] 1719 	mov	dptr,#_spi_buffer_write_PARM_2
      000623 E0               [24] 1720 	movx	a,@dptr
      000624 FC               [12] 1721 	mov	r4,a
      000625 A3               [24] 1722 	inc	dptr
      000626 E0               [24] 1723 	movx	a,@dptr
      000627 FD               [12] 1724 	mov	r5,a
      000628 8C 02            [24] 1725 	mov	ar2,r4
      00062A 8D 03            [24] 1726 	mov	ar3,r5
      00062C C3               [12] 1727 	clr	c
      00062D 74 FF            [12] 1728 	mov	a,#0xff
      00062F 9A               [12] 1729 	subb	a,r2
      000630 74 1F            [12] 1730 	mov	a,#0x1f
      000632 9B               [12] 1731 	subb	a,r3
      000633 50 1A            [24] 1732 	jnc	00104$
                                   1733 ;	SPI.c:254: printf("\n\rInvalid address: %04X\n\r", start_address);
      000635 C0 04            [24] 1734 	push	ar4
      000637 C0 05            [24] 1735 	push	ar5
      000639 74r86            [12] 1736 	mov	a,#___str_9
      00063B C0 E0            [24] 1737 	push	acc
      00063D 74s01            [12] 1738 	mov	a,#(___str_9 >> 8)
      00063F C0 E0            [24] 1739 	push	acc
      000641 74 80            [12] 1740 	mov	a,#0x80
      000643 C0 E0            [24] 1741 	push	acc
      000645 12r00r00         [24] 1742 	lcall	_printf
      000648 E5 81            [12] 1743 	mov	a,sp
      00064A 24 FB            [12] 1744 	add	a,#0xfb
      00064C F5 81            [12] 1745 	mov	sp,a
                                   1746 ;	SPI.c:255: return;
      00064E 22               [24] 1747 	ret
      00064F                       1748 00104$:
                                   1749 ;	SPI.c:258: buffer_init(0x0000, start_address - 1);
      00064F 1A               [12] 1750 	dec	r2
      000650 BA FF 01         [24] 1751 	cjne	r2,#0xff,00146$
      000653 1B               [12] 1752 	dec	r3
      000654                       1753 00146$:
      000654 90r00r0F         [24] 1754 	mov	dptr,#_buffer_init_PARM_2
      000657 EA               [12] 1755 	mov	a,r2
      000658 F0               [24] 1756 	movx	@dptr,a
      000659 EB               [12] 1757 	mov	a,r3
      00065A A3               [24] 1758 	inc	dptr
      00065B F0               [24] 1759 	movx	@dptr,a
      00065C 90 00 00         [24] 1760 	mov	dptr,#0x0000
      00065F C0 07            [24] 1761 	push	ar7
      000661 C0 06            [24] 1762 	push	ar6
      000663 C0 05            [24] 1763 	push	ar5
      000665 C0 04            [24] 1764 	push	ar4
      000667 12r02rFC         [24] 1765 	lcall	_buffer_init
      00066A D0 04            [24] 1766 	pop	ar4
      00066C D0 05            [24] 1767 	pop	ar5
      00066E D0 06            [24] 1768 	pop	ar6
      000670 D0 07            [24] 1769 	pop	ar7
                                   1770 ;	SPI.c:259: if (num_bytes > 1) {
      000672 C3               [12] 1771 	clr	c
      000673 74 01            [12] 1772 	mov	a,#0x01
      000675 9E               [12] 1773 	subb	a,r6
      000676 74 80            [12] 1774 	mov	a,#(0x00 ^ 0x80)
      000678 8F F0            [24] 1775 	mov	b,r7
      00067A 63 F0 80         [24] 1776 	xrl	b,#0x80
      00067D 95 F0            [12] 1777 	subb	a,b
      00067F 50 0B            [24] 1778 	jnc	00106$
                                   1779 ;	SPI.c:260: spi_set_autoinc();
      000681 C0 05            [24] 1780 	push	ar5
      000683 C0 04            [24] 1781 	push	ar4
      000685 12r00r12         [24] 1782 	lcall	_spi_set_autoinc
      000688 D0 04            [24] 1783 	pop	ar4
      00068A D0 05            [24] 1784 	pop	ar5
      00068C                       1785 00106$:
                                   1786 ;	SPI.c:263: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      00068C 8D 07            [24] 1787 	mov	ar7,r5
                                   1788 ;	SPI.c:264: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      00068E 8C 06            [24] 1789 	mov	ar6,r4
                                   1790 ;	SPI.c:266: spi_control_write(0, 0x03, higher_byte); // High byte
      000690 90r00r02         [24] 1791 	mov	dptr,#_spi_control_write_PARM_2
      000693 74 03            [12] 1792 	mov	a,#0x03
      000695 F0               [24] 1793 	movx	@dptr,a
      000696 90r00r03         [24] 1794 	mov	dptr,#_spi_control_write_PARM_3
      000699 EF               [12] 1795 	mov	a,r7
      00069A F0               [24] 1796 	movx	@dptr,a
      00069B 75 82 00         [24] 1797 	mov	dpl, #0x00
      00069E C0 06            [24] 1798 	push	ar6
      0006A0 C0 05            [24] 1799 	push	ar5
      0006A2 C0 04            [24] 1800 	push	ar4
      0006A4 12r00r3D         [24] 1801 	lcall	_spi_control_write
      0006A7 D0 04            [24] 1802 	pop	ar4
      0006A9 D0 05            [24] 1803 	pop	ar5
      0006AB D0 06            [24] 1804 	pop	ar6
                                   1805 ;	SPI.c:267: spi_control_write(0, 0x02, lower_byte); // Low byte
      0006AD 90r00r02         [24] 1806 	mov	dptr,#_spi_control_write_PARM_2
      0006B0 74 02            [12] 1807 	mov	a,#0x02
      0006B2 F0               [24] 1808 	movx	@dptr,a
      0006B3 90r00r03         [24] 1809 	mov	dptr,#_spi_control_write_PARM_3
      0006B6 EE               [12] 1810 	mov	a,r6
      0006B7 F0               [24] 1811 	movx	@dptr,a
      0006B8 75 82 00         [24] 1812 	mov	dpl, #0x00
      0006BB C0 05            [24] 1813 	push	ar5
      0006BD C0 04            [24] 1814 	push	ar4
      0006BF 12r00r3D         [24] 1815 	lcall	_spi_control_write
                                   1816 ;	SPI.c:270: CS_LOW; // Pull CS Low
                                   1817 ;	assignBit
      0006C2 C2 91            [12] 1818 	clr	_P1_1
                                   1819 ;	SPI.c:271: SPI_send(opcode); // Send opcode
      0006C4 75 82 7A         [24] 1820 	mov	dpl, #0x7a
      0006C7 12r00rA8         [24] 1821 	lcall	_SPI_send
      0006CA D0 04            [24] 1822 	pop	ar4
      0006CC D0 05            [24] 1823 	pop	ar5
                                   1824 ;	SPI.c:274: printf("Writing %d bytes to buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      0006CE 90r00r21         [24] 1825 	mov	dptr,#_spi_buffer_write_num_bytes_10000_104
      0006D1 E0               [24] 1826 	movx	a,@dptr
      0006D2 FE               [12] 1827 	mov	r6,a
      0006D3 A3               [24] 1828 	inc	dptr
      0006D4 E0               [24] 1829 	movx	a,@dptr
      0006D5 FF               [12] 1830 	mov	r7,a
      0006D6 C0 07            [24] 1831 	push	ar7
      0006D8 C0 06            [24] 1832 	push	ar6
      0006DA C0 04            [24] 1833 	push	ar4
      0006DC C0 05            [24] 1834 	push	ar5
      0006DE C0 06            [24] 1835 	push	ar6
      0006E0 C0 07            [24] 1836 	push	ar7
      0006E2 74rED            [12] 1837 	mov	a,#___str_12
      0006E4 C0 E0            [24] 1838 	push	acc
      0006E6 74s01            [12] 1839 	mov	a,#(___str_12 >> 8)
      0006E8 C0 E0            [24] 1840 	push	acc
      0006EA 74 80            [12] 1841 	mov	a,#0x80
      0006EC C0 E0            [24] 1842 	push	acc
      0006EE 12r00r00         [24] 1843 	lcall	_printf
      0006F1 E5 81            [12] 1844 	mov	a,sp
      0006F3 24 F9            [12] 1845 	add	a,#0xf9
      0006F5 F5 81            [12] 1846 	mov	sp,a
      0006F7 D0 06            [24] 1847 	pop	ar6
      0006F9 D0 07            [24] 1848 	pop	ar7
                                   1849 ;	SPI.c:275: for (int i = 0; i < num_bytes; i++) {
      0006FB 90r00r23         [24] 1850 	mov	dptr,#_spi_buffer_write_i_20002_111
      0006FE E4               [12] 1851 	clr	a
      0006FF F0               [24] 1852 	movx	@dptr,a
      000700 A3               [24] 1853 	inc	dptr
      000701 F0               [24] 1854 	movx	@dptr,a
      000702 90r00r1E         [24] 1855 	mov	dptr,#_spi_buffer_write_PARM_3
      000705 E0               [24] 1856 	movx	a,@dptr
      000706 FB               [12] 1857 	mov	r3,a
      000707 A3               [24] 1858 	inc	dptr
      000708 E0               [24] 1859 	movx	a,@dptr
      000709 FC               [12] 1860 	mov	r4,a
      00070A A3               [24] 1861 	inc	dptr
      00070B E0               [24] 1862 	movx	a,@dptr
      00070C FD               [12] 1863 	mov	r5,a
      00070D                       1864 00109$:
      00070D 90r00r23         [24] 1865 	mov	dptr,#_spi_buffer_write_i_20002_111
      000710 E0               [24] 1866 	movx	a,@dptr
      000711 F9               [12] 1867 	mov	r1,a
      000712 A3               [24] 1868 	inc	dptr
      000713 E0               [24] 1869 	movx	a,@dptr
      000714 FA               [12] 1870 	mov	r2,a
      000715 C3               [12] 1871 	clr	c
      000716 E9               [12] 1872 	mov	a,r1
      000717 9E               [12] 1873 	subb	a,r6
      000718 EA               [12] 1874 	mov	a,r2
      000719 64 80            [12] 1875 	xrl	a,#0x80
      00071B 8F F0            [24] 1876 	mov	b,r7
      00071D 63 F0 80         [24] 1877 	xrl	b,#0x80
      000720 95 F0            [12] 1878 	subb	a,b
      000722 40 03            [24] 1879 	jc	00148$
      000724 02r07rB4         [24] 1880 	ljmp	00107$
      000727                       1881 00148$:
                                   1882 ;	SPI.c:276: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      000727 C0 06            [24] 1883 	push	ar6
      000729 C0 07            [24] 1884 	push	ar7
      00072B 8B 82            [24] 1885 	mov	dpl,r3
      00072D 8C 83            [24] 1886 	mov	dph,r4
      00072F 8D F0            [24] 1887 	mov	b,r5
      000731 12r00r00         [24] 1888 	lcall	__gptrget
      000734 F8               [12] 1889 	mov	r0,a
      000735 7F 00            [12] 1890 	mov	r7,#0x00
      000737 09               [12] 1891 	inc	r1
      000738 B9 00 01         [24] 1892 	cjne	r1,#0x00,00149$
      00073B 0A               [12] 1893 	inc	r2
      00073C                       1894 00149$:
      00073C C0 07            [24] 1895 	push	ar7
      00073E C0 06            [24] 1896 	push	ar6
      000740 C0 05            [24] 1897 	push	ar5
      000742 C0 04            [24] 1898 	push	ar4
      000744 C0 03            [24] 1899 	push	ar3
      000746 C0 02            [24] 1900 	push	ar2
      000748 C0 01            [24] 1901 	push	ar1
      00074A C0 00            [24] 1902 	push	ar0
      00074C C0 07            [24] 1903 	push	ar7
      00074E C0 01            [24] 1904 	push	ar1
      000750 C0 02            [24] 1905 	push	ar2
      000752 74rDB            [12] 1906 	mov	a,#___str_11
      000754 C0 E0            [24] 1907 	push	acc
      000756 74s01            [12] 1908 	mov	a,#(___str_11 >> 8)
      000758 C0 E0            [24] 1909 	push	acc
      00075A 74 80            [12] 1910 	mov	a,#0x80
      00075C C0 E0            [24] 1911 	push	acc
      00075E 12r00r00         [24] 1912 	lcall	_printf
      000761 E5 81            [12] 1913 	mov	a,sp
      000763 24 F9            [12] 1914 	add	a,#0xf9
      000765 F5 81            [12] 1915 	mov	sp,a
      000767 D0 01            [24] 1916 	pop	ar1
      000769 D0 02            [24] 1917 	pop	ar2
      00076B D0 03            [24] 1918 	pop	ar3
      00076D D0 04            [24] 1919 	pop	ar4
      00076F D0 05            [24] 1920 	pop	ar5
      000771 D0 06            [24] 1921 	pop	ar6
      000773 D0 07            [24] 1922 	pop	ar7
                                   1923 ;	SPI.c:277: SPI_send(*data_ptr); // Send data
      000775 8B 82            [24] 1924 	mov	dpl,r3
      000777 8C 83            [24] 1925 	mov	dph,r4
      000779 8D F0            [24] 1926 	mov	b,r5
      00077B 12r00r00         [24] 1927 	lcall	__gptrget
      00077E FF               [12] 1928 	mov	r7,a
      00077F A3               [24] 1929 	inc	dptr
      000780 AB 82            [24] 1930 	mov	r3,dpl
      000782 AC 83            [24] 1931 	mov	r4,dph
      000784 8F 82            [24] 1932 	mov	dpl, r7
      000786 C0 07            [24] 1933 	push	ar7
      000788 C0 06            [24] 1934 	push	ar6
      00078A C0 05            [24] 1935 	push	ar5
      00078C C0 04            [24] 1936 	push	ar4
      00078E C0 03            [24] 1937 	push	ar3
      000790 C0 02            [24] 1938 	push	ar2
      000792 C0 01            [24] 1939 	push	ar1
      000794 12r00rA8         [24] 1940 	lcall	_SPI_send
      000797 D0 01            [24] 1941 	pop	ar1
      000799 D0 02            [24] 1942 	pop	ar2
      00079B D0 03            [24] 1943 	pop	ar3
      00079D D0 04            [24] 1944 	pop	ar4
      00079F D0 05            [24] 1945 	pop	ar5
      0007A1 D0 06            [24] 1946 	pop	ar6
      0007A3 D0 07            [24] 1947 	pop	ar7
                                   1948 ;	SPI.c:278: data_ptr++;
                                   1949 ;	SPI.c:275: for (int i = 0; i < num_bytes; i++) {
      0007A5 90r00r23         [24] 1950 	mov	dptr,#_spi_buffer_write_i_20002_111
      0007A8 E9               [12] 1951 	mov	a,r1
      0007A9 F0               [24] 1952 	movx	@dptr,a
      0007AA EA               [12] 1953 	mov	a,r2
      0007AB A3               [24] 1954 	inc	dptr
      0007AC F0               [24] 1955 	movx	@dptr,a
      0007AD D0 07            [24] 1956 	pop	ar7
      0007AF D0 06            [24] 1957 	pop	ar6
      0007B1 02r07r0D         [24] 1958 	ljmp	00109$
      0007B4                       1959 00107$:
                                   1960 ;	SPI.c:280: CS_HIGH; // Pull CS High
                                   1961 ;	assignBit
      0007B4 D2 91            [12] 1962 	setb	_P1_1
                                   1963 ;	SPI.c:281: }
      0007B6 22               [24] 1964 	ret
                                   1965 	.area CSEG    (CODE)
                                   1966 	.area CONST   (CODE)
                                   1967 	.area CONST   (CODE)
      000000                       1968 ___str_0:
      000000 57 72 69 74 65 3A 20  1969 	.ascii "Write: Address 0x%02X, Data 0x%02X"
             41 64 64 72 65 73 73
             20 30 78 25 30 32 58
             2C 20 44 61 74 61 20
             30 78 25 30 32 58
      000022 0A                    1970 	.db 0x0a
      000023 0D                    1971 	.db 0x0d
      000024 00                    1972 	.db 0x00
                                   1973 	.area CSEG    (CODE)
                                   1974 	.area CONST   (CODE)
      000025                       1975 ___str_1:
      000025 0A                    1976 	.db 0x0a
      000026 0D                    1977 	.db 0x0d
      000027 49 6E 76 61 6C 69 64  1978 	.ascii "Invalid address: MAC register address range [0, 0x1F]"
             20 61 64 64 72 65 73
             73 3A 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 72 61 6E 67
             65 20 5B 30 2C 20 30
             78 31 46 5D
      00005C 0A                    1979 	.db 0x0a
      00005D 0D                    1980 	.db 0x0d
      00005E 00                    1981 	.db 0x00
                                   1982 	.area CSEG    (CODE)
                                   1983 	.area CONST   (CODE)
      00005F                       1984 ___str_2:
      00005F 52 65 61 64 3A 20 41  1985 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      000080 0A                    1986 	.db 0x0a
      000081 0D                    1987 	.db 0x0d
      000082 00                    1988 	.db 0x00
                                   1989 	.area CSEG    (CODE)
                                   1990 	.area CONST   (CODE)
      000083                       1991 ___str_3:
      000083 50 48 59 20 57 72 69  1992 	.ascii "PHY Write: Address 0x%02X, Data 0x%04X"
             74 65 3A 20 41 64 64
             72 65 73 73 20 30 78
             25 30 32 58 2C 20 44
             61 74 61 20 30 78 25
             30 34 58
      0000A9 0A                    1993 	.db 0x0a
      0000AA 0D                    1994 	.db 0x0d
      0000AB 00                    1995 	.db 0x00
                                   1996 	.area CSEG    (CODE)
                                   1997 	.area CONST   (CODE)
      0000AC                       1998 ___str_4:
      0000AC 52 65 61 64 3A 20 41  1999 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      0000CD 0A                    2000 	.db 0x0a
      0000CE 00                    2001 	.db 0x00
                                   2002 	.area CSEG    (CODE)
                                   2003 	.area CONST   (CODE)
      0000CF                       2004 ___str_5:
      0000CF 50 48 59 20 52 65 61  2005 	.ascii "PHY Read: Address 0x%02X, Data 0x%04X"
             64 3A 20 41 64 64 72
             65 73 73 20 30 78 25
             30 32 58 2C 20 44 61
             74 61 20 30 78 25 30
             34 58
      0000F4 0A                    2006 	.db 0x0a
      0000F5 0D                    2007 	.db 0x0d
      0000F6 00                    2008 	.db 0x00
                                   2009 	.area CSEG    (CODE)
                                   2010 	.area CONST   (CODE)
      0000F7                       2011 ___str_6:
      0000F7 0A                    2012 	.db 0x0a
      0000F8 0D                    2013 	.db 0x0d
      0000F9 49 6E 76 61 6C 69 64  2014 	.ascii "Invalid Buffer Address or Size: Start 0x%04X, Size 0x%04X"
             20 42 75 66 66 65 72
             20 41 64 64 72 65 73
             73 20 6F 72 20 53 69
             7A 65 3A 20 53 74 61
             72 74 20 30 78 25 30
             34 58 2C 20 53 69 7A
             65 20 30 78 25 30 34
             58
      000132 0A                    2015 	.db 0x0a
      000133 0D                    2016 	.db 0x0d
      000134 00                    2017 	.db 0x00
                                   2018 	.area CSEG    (CODE)
                                   2019 	.area CONST   (CODE)
      000135                       2020 ___str_7:
      000135 0A                    2021 	.db 0x0a
      000136 0D                    2022 	.db 0x0d
      000137 42 75 66 66 65 72 20  2023 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      000163 0A                    2024 	.db 0x0a
      000164 0D                    2025 	.db 0x0d
      000165 00                    2026 	.db 0x00
                                   2027 	.area CSEG    (CODE)
                                   2028 	.area CONST   (CODE)
      000166                       2029 ___str_8:
      000166 0A                    2030 	.db 0x0a
      000167 0D                    2031 	.db 0x0d
      000168 49 6E 76 61 6C 69 64  2032 	.ascii "Invalid number of bytes: %d"
             20 6E 75 6D 62 65 72
             20 6F 66 20 62 79 74
             65 73 3A 20 25 64
      000183 0A                    2033 	.db 0x0a
      000184 0D                    2034 	.db 0x0d
      000185 00                    2035 	.db 0x00
                                   2036 	.area CSEG    (CODE)
                                   2037 	.area CONST   (CODE)
      000186                       2038 ___str_9:
      000186 0A                    2039 	.db 0x0a
      000187 0D                    2040 	.db 0x0d
      000188 49 6E 76 61 6C 69 64  2041 	.ascii "Invalid address: %04X"
             20 61 64 64 72 65 73
             73 3A 20 25 30 34 58
      00019D 0A                    2042 	.db 0x0a
      00019E 0D                    2043 	.db 0x0d
      00019F 00                    2044 	.db 0x00
                                   2045 	.area CSEG    (CODE)
                                   2046 	.area CONST   (CODE)
      0001A0                       2047 ___str_10:
      0001A0 52 65 61 64 69 6E 67  2048 	.ascii "Reading %d bytes from buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 66 72 6F 6D
             20 62 75 66 66 65 72
             20 73 74 61 72 74 69
             6E 67 20 61 74 20 61
             64 64 72 65 73 73 20
             30 78 25 30 34 58 3A
      0001D8 0A                    2049 	.db 0x0a
      0001D9 0D                    2050 	.db 0x0d
      0001DA 00                    2051 	.db 0x00
                                   2052 	.area CSEG    (CODE)
                                   2053 	.area CONST   (CODE)
      0001DB                       2054 ___str_11:
      0001DB 42 79 74 65 20 25 64  2055 	.ascii "Byte %d: 0x%02X"
             3A 20 30 78 25 30 32
             58
      0001EA 0A                    2056 	.db 0x0a
      0001EB 0D                    2057 	.db 0x0d
      0001EC 00                    2058 	.db 0x00
                                   2059 	.area CSEG    (CODE)
                                   2060 	.area CONST   (CODE)
      0001ED                       2061 ___str_12:
      0001ED 57 72 69 74 69 6E 67  2062 	.ascii "Writing %d bytes to buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 74 6F 20 62
             75 66 66 65 72 20 73
             74 61 72 74 69 6E 67
             20 61 74 20 61 64 64
             72 65 73 73 20 30 78
             25 30 34 58 3A
      000223 0A                    2063 	.db 0x0a
      000224 0D                    2064 	.db 0x0d
      000225 00                    2065 	.db 0x00
                                   2066 	.area CSEG    (CODE)
                                   2067 	.area XINIT   (CODE)
                                   2068 	.area CABS    (ABS,CODE)
