                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module SPI
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _enc28j60_init_rx_buffer
                                     12 	.globl _printf
                                     13 	.globl _TF1
                                     14 	.globl _TR1
                                     15 	.globl _TF0
                                     16 	.globl _TR0
                                     17 	.globl _IE1
                                     18 	.globl _IT1
                                     19 	.globl _IE0
                                     20 	.globl _IT0
                                     21 	.globl _SM0
                                     22 	.globl _SM1
                                     23 	.globl _SM2
                                     24 	.globl _REN
                                     25 	.globl _TB8
                                     26 	.globl _RB8
                                     27 	.globl _TI
                                     28 	.globl _RI
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _F1
                                     36 	.globl _P
                                     37 	.globl _RD
                                     38 	.globl _WR
                                     39 	.globl _T1
                                     40 	.globl _T0
                                     41 	.globl _INT1
                                     42 	.globl _INT0
                                     43 	.globl _TXD0
                                     44 	.globl _TXD
                                     45 	.globl _RXD0
                                     46 	.globl _RXD
                                     47 	.globl _P3_7
                                     48 	.globl _P3_6
                                     49 	.globl _P3_5
                                     50 	.globl _P3_4
                                     51 	.globl _P3_3
                                     52 	.globl _P3_2
                                     53 	.globl _P3_1
                                     54 	.globl _P3_0
                                     55 	.globl _P2_7
                                     56 	.globl _P2_6
                                     57 	.globl _P2_5
                                     58 	.globl _P2_4
                                     59 	.globl _P2_3
                                     60 	.globl _P2_2
                                     61 	.globl _P2_1
                                     62 	.globl _P2_0
                                     63 	.globl _P1_7
                                     64 	.globl _P1_6
                                     65 	.globl _P1_5
                                     66 	.globl _P1_4
                                     67 	.globl _P1_3
                                     68 	.globl _P1_2
                                     69 	.globl _P1_1
                                     70 	.globl _P1_0
                                     71 	.globl _P0_7
                                     72 	.globl _P0_6
                                     73 	.globl _P0_5
                                     74 	.globl _P0_4
                                     75 	.globl _P0_3
                                     76 	.globl _P0_2
                                     77 	.globl _P0_1
                                     78 	.globl _P0_0
                                     79 	.globl _PS
                                     80 	.globl _PT1
                                     81 	.globl _PX1
                                     82 	.globl _PT0
                                     83 	.globl _PX0
                                     84 	.globl _EA
                                     85 	.globl _ES
                                     86 	.globl _ET1
                                     87 	.globl _EX1
                                     88 	.globl _ET0
                                     89 	.globl _EX0
                                     90 	.globl _BREG_F7
                                     91 	.globl _BREG_F6
                                     92 	.globl _BREG_F5
                                     93 	.globl _BREG_F4
                                     94 	.globl _BREG_F3
                                     95 	.globl _BREG_F2
                                     96 	.globl _BREG_F1
                                     97 	.globl _BREG_F0
                                     98 	.globl _P5_7
                                     99 	.globl _P5_6
                                    100 	.globl _P5_5
                                    101 	.globl _P5_4
                                    102 	.globl _P5_3
                                    103 	.globl _P5_2
                                    104 	.globl _P5_1
                                    105 	.globl _P5_0
                                    106 	.globl _P4_7
                                    107 	.globl _P4_6
                                    108 	.globl _P4_5
                                    109 	.globl _P4_4
                                    110 	.globl _P4_3
                                    111 	.globl _P4_2
                                    112 	.globl _P4_1
                                    113 	.globl _P4_0
                                    114 	.globl _PX0L
                                    115 	.globl _PT0L
                                    116 	.globl _PX1L
                                    117 	.globl _PT1L
                                    118 	.globl _PSL
                                    119 	.globl _PT2L
                                    120 	.globl _PPCL
                                    121 	.globl _EC
                                    122 	.globl _CCF0
                                    123 	.globl _CCF1
                                    124 	.globl _CCF2
                                    125 	.globl _CCF3
                                    126 	.globl _CCF4
                                    127 	.globl _CR
                                    128 	.globl _CF
                                    129 	.globl _TF2
                                    130 	.globl _EXF2
                                    131 	.globl _RCLK
                                    132 	.globl _TCLK
                                    133 	.globl _EXEN2
                                    134 	.globl _TR2
                                    135 	.globl _C_T2
                                    136 	.globl _CP_RL2
                                    137 	.globl _T2CON_7
                                    138 	.globl _T2CON_6
                                    139 	.globl _T2CON_5
                                    140 	.globl _T2CON_4
                                    141 	.globl _T2CON_3
                                    142 	.globl _T2CON_2
                                    143 	.globl _T2CON_1
                                    144 	.globl _T2CON_0
                                    145 	.globl _PT2
                                    146 	.globl _ET2
                                    147 	.globl _TMOD
                                    148 	.globl _TL1
                                    149 	.globl _TL0
                                    150 	.globl _TH1
                                    151 	.globl _TH0
                                    152 	.globl _TCON
                                    153 	.globl _SP
                                    154 	.globl _SCON
                                    155 	.globl _SBUF0
                                    156 	.globl _SBUF
                                    157 	.globl _PSW
                                    158 	.globl _PCON
                                    159 	.globl _P3
                                    160 	.globl _P2
                                    161 	.globl _P1
                                    162 	.globl _P0
                                    163 	.globl _IP
                                    164 	.globl _IE
                                    165 	.globl _DP0L
                                    166 	.globl _DPL
                                    167 	.globl _DP0H
                                    168 	.globl _DPH
                                    169 	.globl _B
                                    170 	.globl _ACC
                                    171 	.globl _EECON
                                    172 	.globl _KBF
                                    173 	.globl _KBE
                                    174 	.globl _KBLS
                                    175 	.globl _BRL
                                    176 	.globl _BDRCON
                                    177 	.globl _T2MOD
                                    178 	.globl _SPDAT
                                    179 	.globl _SPSTA
                                    180 	.globl _SPCON
                                    181 	.globl _SADEN
                                    182 	.globl _SADDR
                                    183 	.globl _WDTPRG
                                    184 	.globl _WDTRST
                                    185 	.globl _P5
                                    186 	.globl _P4
                                    187 	.globl _IPH1
                                    188 	.globl _IPL1
                                    189 	.globl _IPH0
                                    190 	.globl _IPL0
                                    191 	.globl _IEN1
                                    192 	.globl _IEN0
                                    193 	.globl _CMOD
                                    194 	.globl _CL
                                    195 	.globl _CH
                                    196 	.globl _CCON
                                    197 	.globl _CCAPM4
                                    198 	.globl _CCAPM3
                                    199 	.globl _CCAPM2
                                    200 	.globl _CCAPM1
                                    201 	.globl _CCAPM0
                                    202 	.globl _CCAP4L
                                    203 	.globl _CCAP3L
                                    204 	.globl _CCAP2L
                                    205 	.globl _CCAP1L
                                    206 	.globl _CCAP0L
                                    207 	.globl _CCAP4H
                                    208 	.globl _CCAP3H
                                    209 	.globl _CCAP2H
                                    210 	.globl _CCAP1H
                                    211 	.globl _CCAP0H
                                    212 	.globl _CKCON1
                                    213 	.globl _CKCON0
                                    214 	.globl _CKRL
                                    215 	.globl _AUXR1
                                    216 	.globl _AUXR
                                    217 	.globl _TH2
                                    218 	.globl _TL2
                                    219 	.globl _RCAP2H
                                    220 	.globl _RCAP2L
                                    221 	.globl _T2CON
                                    222 	.globl _spi_buffer_write_PARM_3
                                    223 	.globl _spi_buffer_write_PARM_2
                                    224 	.globl _spi_buffer_read_PARM_3
                                    225 	.globl _spi_buffer_read_PARM_2
                                    226 	.globl _buffer_init_PARM_2
                                    227 	.globl _mac_spi_read_PARM_2
                                    228 	.globl _phy_spi_write_PARM_2
                                    229 	.globl _eth_spi_read_PARM_2
                                    230 	.globl _spi_control_write_PARM_3
                                    231 	.globl _spi_control_write_PARM_2
                                    232 	.globl _SPI_ReadByte
                                    233 	.globl _spi_set_autoinc
                                    234 	.globl _select_reg_bank
                                    235 	.globl _spi_control_write
                                    236 	.globl _configure_SPI
                                    237 	.globl _SPI_send
                                    238 	.globl _enc_reset
                                    239 	.globl _eth_spi_read
                                    240 	.globl _phy_spi_write
                                    241 	.globl _mac_spi_read
                                    242 	.globl _phy_spi_read
                                    243 	.globl _busy_wait
                                    244 	.globl _buffer_init
                                    245 	.globl _spi_buffer_read
                                    246 	.globl _spi_buffer_write
                                    247 	.globl _init_ENC
                                    248 	.globl _init_MAC
                                    249 ;--------------------------------------------------------
                                    250 ; special function registers
                                    251 ;--------------------------------------------------------
                                    252 	.area RSEG    (ABS,DATA)
      000000                        253 	.org 0x0000
                           0000C8   254 _T2CON	=	0x00c8
                           0000CA   255 _RCAP2L	=	0x00ca
                           0000CB   256 _RCAP2H	=	0x00cb
                           0000CC   257 _TL2	=	0x00cc
                           0000CD   258 _TH2	=	0x00cd
                           00008E   259 _AUXR	=	0x008e
                           0000A2   260 _AUXR1	=	0x00a2
                           000097   261 _CKRL	=	0x0097
                           00008F   262 _CKCON0	=	0x008f
                           0000AF   263 _CKCON1	=	0x00af
                           0000FA   264 _CCAP0H	=	0x00fa
                           0000FB   265 _CCAP1H	=	0x00fb
                           0000FC   266 _CCAP2H	=	0x00fc
                           0000FD   267 _CCAP3H	=	0x00fd
                           0000FE   268 _CCAP4H	=	0x00fe
                           0000EA   269 _CCAP0L	=	0x00ea
                           0000EB   270 _CCAP1L	=	0x00eb
                           0000EC   271 _CCAP2L	=	0x00ec
                           0000ED   272 _CCAP3L	=	0x00ed
                           0000EE   273 _CCAP4L	=	0x00ee
                           0000DA   274 _CCAPM0	=	0x00da
                           0000DB   275 _CCAPM1	=	0x00db
                           0000DC   276 _CCAPM2	=	0x00dc
                           0000DD   277 _CCAPM3	=	0x00dd
                           0000DE   278 _CCAPM4	=	0x00de
                           0000D8   279 _CCON	=	0x00d8
                           0000F9   280 _CH	=	0x00f9
                           0000E9   281 _CL	=	0x00e9
                           0000D9   282 _CMOD	=	0x00d9
                           0000A8   283 _IEN0	=	0x00a8
                           0000B1   284 _IEN1	=	0x00b1
                           0000B8   285 _IPL0	=	0x00b8
                           0000B7   286 _IPH0	=	0x00b7
                           0000B2   287 _IPL1	=	0x00b2
                           0000B3   288 _IPH1	=	0x00b3
                           0000C0   289 _P4	=	0x00c0
                           0000E8   290 _P5	=	0x00e8
                           0000A6   291 _WDTRST	=	0x00a6
                           0000A7   292 _WDTPRG	=	0x00a7
                           0000A9   293 _SADDR	=	0x00a9
                           0000B9   294 _SADEN	=	0x00b9
                           0000C3   295 _SPCON	=	0x00c3
                           0000C4   296 _SPSTA	=	0x00c4
                           0000C5   297 _SPDAT	=	0x00c5
                           0000C9   298 _T2MOD	=	0x00c9
                           00009B   299 _BDRCON	=	0x009b
                           00009A   300 _BRL	=	0x009a
                           00009C   301 _KBLS	=	0x009c
                           00009D   302 _KBE	=	0x009d
                           00009E   303 _KBF	=	0x009e
                           0000D2   304 _EECON	=	0x00d2
                           0000E0   305 _ACC	=	0x00e0
                           0000F0   306 _B	=	0x00f0
                           000083   307 _DPH	=	0x0083
                           000083   308 _DP0H	=	0x0083
                           000082   309 _DPL	=	0x0082
                           000082   310 _DP0L	=	0x0082
                           0000A8   311 _IE	=	0x00a8
                           0000B8   312 _IP	=	0x00b8
                           000080   313 _P0	=	0x0080
                           000090   314 _P1	=	0x0090
                           0000A0   315 _P2	=	0x00a0
                           0000B0   316 _P3	=	0x00b0
                           000087   317 _PCON	=	0x0087
                           0000D0   318 _PSW	=	0x00d0
                           000099   319 _SBUF	=	0x0099
                           000099   320 _SBUF0	=	0x0099
                           000098   321 _SCON	=	0x0098
                           000081   322 _SP	=	0x0081
                           000088   323 _TCON	=	0x0088
                           00008C   324 _TH0	=	0x008c
                           00008D   325 _TH1	=	0x008d
                           00008A   326 _TL0	=	0x008a
                           00008B   327 _TL1	=	0x008b
                           000089   328 _TMOD	=	0x0089
                                    329 ;--------------------------------------------------------
                                    330 ; special function bits
                                    331 ;--------------------------------------------------------
                                    332 	.area RSEG    (ABS,DATA)
      000000                        333 	.org 0x0000
                           0000AD   334 _ET2	=	0x00ad
                           0000BD   335 _PT2	=	0x00bd
                           0000C8   336 _T2CON_0	=	0x00c8
                           0000C9   337 _T2CON_1	=	0x00c9
                           0000CA   338 _T2CON_2	=	0x00ca
                           0000CB   339 _T2CON_3	=	0x00cb
                           0000CC   340 _T2CON_4	=	0x00cc
                           0000CD   341 _T2CON_5	=	0x00cd
                           0000CE   342 _T2CON_6	=	0x00ce
                           0000CF   343 _T2CON_7	=	0x00cf
                           0000C8   344 _CP_RL2	=	0x00c8
                           0000C9   345 _C_T2	=	0x00c9
                           0000CA   346 _TR2	=	0x00ca
                           0000CB   347 _EXEN2	=	0x00cb
                           0000CC   348 _TCLK	=	0x00cc
                           0000CD   349 _RCLK	=	0x00cd
                           0000CE   350 _EXF2	=	0x00ce
                           0000CF   351 _TF2	=	0x00cf
                           0000DF   352 _CF	=	0x00df
                           0000DE   353 _CR	=	0x00de
                           0000DC   354 _CCF4	=	0x00dc
                           0000DB   355 _CCF3	=	0x00db
                           0000DA   356 _CCF2	=	0x00da
                           0000D9   357 _CCF1	=	0x00d9
                           0000D8   358 _CCF0	=	0x00d8
                           0000AE   359 _EC	=	0x00ae
                           0000BE   360 _PPCL	=	0x00be
                           0000BD   361 _PT2L	=	0x00bd
                           0000BC   362 _PSL	=	0x00bc
                           0000BB   363 _PT1L	=	0x00bb
                           0000BA   364 _PX1L	=	0x00ba
                           0000B9   365 _PT0L	=	0x00b9
                           0000B8   366 _PX0L	=	0x00b8
                           0000C0   367 _P4_0	=	0x00c0
                           0000C1   368 _P4_1	=	0x00c1
                           0000C2   369 _P4_2	=	0x00c2
                           0000C3   370 _P4_3	=	0x00c3
                           0000C4   371 _P4_4	=	0x00c4
                           0000C5   372 _P4_5	=	0x00c5
                           0000C6   373 _P4_6	=	0x00c6
                           0000C7   374 _P4_7	=	0x00c7
                           0000E8   375 _P5_0	=	0x00e8
                           0000E9   376 _P5_1	=	0x00e9
                           0000EA   377 _P5_2	=	0x00ea
                           0000EB   378 _P5_3	=	0x00eb
                           0000EC   379 _P5_4	=	0x00ec
                           0000ED   380 _P5_5	=	0x00ed
                           0000EE   381 _P5_6	=	0x00ee
                           0000EF   382 _P5_7	=	0x00ef
                           0000F0   383 _BREG_F0	=	0x00f0
                           0000F1   384 _BREG_F1	=	0x00f1
                           0000F2   385 _BREG_F2	=	0x00f2
                           0000F3   386 _BREG_F3	=	0x00f3
                           0000F4   387 _BREG_F4	=	0x00f4
                           0000F5   388 _BREG_F5	=	0x00f5
                           0000F6   389 _BREG_F6	=	0x00f6
                           0000F7   390 _BREG_F7	=	0x00f7
                           0000A8   391 _EX0	=	0x00a8
                           0000A9   392 _ET0	=	0x00a9
                           0000AA   393 _EX1	=	0x00aa
                           0000AB   394 _ET1	=	0x00ab
                           0000AC   395 _ES	=	0x00ac
                           0000AF   396 _EA	=	0x00af
                           0000B8   397 _PX0	=	0x00b8
                           0000B9   398 _PT0	=	0x00b9
                           0000BA   399 _PX1	=	0x00ba
                           0000BB   400 _PT1	=	0x00bb
                           0000BC   401 _PS	=	0x00bc
                           000080   402 _P0_0	=	0x0080
                           000081   403 _P0_1	=	0x0081
                           000082   404 _P0_2	=	0x0082
                           000083   405 _P0_3	=	0x0083
                           000084   406 _P0_4	=	0x0084
                           000085   407 _P0_5	=	0x0085
                           000086   408 _P0_6	=	0x0086
                           000087   409 _P0_7	=	0x0087
                           000090   410 _P1_0	=	0x0090
                           000091   411 _P1_1	=	0x0091
                           000092   412 _P1_2	=	0x0092
                           000093   413 _P1_3	=	0x0093
                           000094   414 _P1_4	=	0x0094
                           000095   415 _P1_5	=	0x0095
                           000096   416 _P1_6	=	0x0096
                           000097   417 _P1_7	=	0x0097
                           0000A0   418 _P2_0	=	0x00a0
                           0000A1   419 _P2_1	=	0x00a1
                           0000A2   420 _P2_2	=	0x00a2
                           0000A3   421 _P2_3	=	0x00a3
                           0000A4   422 _P2_4	=	0x00a4
                           0000A5   423 _P2_5	=	0x00a5
                           0000A6   424 _P2_6	=	0x00a6
                           0000A7   425 _P2_7	=	0x00a7
                           0000B0   426 _P3_0	=	0x00b0
                           0000B1   427 _P3_1	=	0x00b1
                           0000B2   428 _P3_2	=	0x00b2
                           0000B3   429 _P3_3	=	0x00b3
                           0000B4   430 _P3_4	=	0x00b4
                           0000B5   431 _P3_5	=	0x00b5
                           0000B6   432 _P3_6	=	0x00b6
                           0000B7   433 _P3_7	=	0x00b7
                           0000B0   434 _RXD	=	0x00b0
                           0000B0   435 _RXD0	=	0x00b0
                           0000B1   436 _TXD	=	0x00b1
                           0000B1   437 _TXD0	=	0x00b1
                           0000B2   438 _INT0	=	0x00b2
                           0000B3   439 _INT1	=	0x00b3
                           0000B4   440 _T0	=	0x00b4
                           0000B5   441 _T1	=	0x00b5
                           0000B6   442 _WR	=	0x00b6
                           0000B7   443 _RD	=	0x00b7
                           0000D0   444 _P	=	0x00d0
                           0000D1   445 _F1	=	0x00d1
                           0000D2   446 _OV	=	0x00d2
                           0000D3   447 _RS0	=	0x00d3
                           0000D4   448 _RS1	=	0x00d4
                           0000D5   449 _F0	=	0x00d5
                           0000D6   450 _AC	=	0x00d6
                           0000D7   451 _CY	=	0x00d7
                           000098   452 _RI	=	0x0098
                           000099   453 _TI	=	0x0099
                           00009A   454 _RB8	=	0x009a
                           00009B   455 _TB8	=	0x009b
                           00009C   456 _REN	=	0x009c
                           00009D   457 _SM2	=	0x009d
                           00009E   458 _SM1	=	0x009e
                           00009F   459 _SM0	=	0x009f
                           000088   460 _IT0	=	0x0088
                           000089   461 _IE0	=	0x0089
                           00008A   462 _IT1	=	0x008a
                           00008B   463 _IE1	=	0x008b
                           00008C   464 _TR0	=	0x008c
                           00008D   465 _TF0	=	0x008d
                           00008E   466 _TR1	=	0x008e
                           00008F   467 _TF1	=	0x008f
                                    468 ;--------------------------------------------------------
                                    469 ; overlayable register banks
                                    470 ;--------------------------------------------------------
                                    471 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        472 	.ds 8
                                    473 ;--------------------------------------------------------
                                    474 ; internal ram data
                                    475 ;--------------------------------------------------------
                                    476 	.area DSEG    (DATA)
                                    477 ;--------------------------------------------------------
                                    478 ; overlayable items in internal ram
                                    479 ;--------------------------------------------------------
                                    480 ;--------------------------------------------------------
                                    481 ; indirectly addressable internal ram data
                                    482 ;--------------------------------------------------------
                                    483 	.area ISEG    (DATA)
                                    484 ;--------------------------------------------------------
                                    485 ; absolute internal ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area IABS    (ABS,DATA)
                                    488 	.area IABS    (ABS,DATA)
                                    489 ;--------------------------------------------------------
                                    490 ; bit data
                                    491 ;--------------------------------------------------------
                                    492 	.area BSEG    (BIT)
                                    493 ;--------------------------------------------------------
                                    494 ; paged external ram data
                                    495 ;--------------------------------------------------------
                                    496 	.area PSEG    (PAG,XDATA)
                                    497 ;--------------------------------------------------------
                                    498 ; uninitialized external ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area XSEG    (XDATA)
      000000                        501 _SPI_ReadByte_received_data_10000_64:
      000000                        502 	.ds 1
      000001                        503 _select_reg_bank_bank_10000_68:
      000001                        504 	.ds 1
      000002                        505 _spi_control_write_PARM_2:
      000002                        506 	.ds 1
      000003                        507 _spi_control_write_PARM_3:
      000003                        508 	.ds 1
      000004                        509 _spi_control_write_reg_bank_10000_70:
      000004                        510 	.ds 1
      000005                        511 _SPI_send_data_10000_74:
      000005                        512 	.ds 1
      000006                        513 _eth_spi_read_PARM_2:
      000006                        514 	.ds 1
      000007                        515 _eth_spi_read_addr_10000_79:
      000007                        516 	.ds 1
      000008                        517 _phy_spi_write_PARM_2:
      000008                        518 	.ds 2
      00000A                        519 _phy_spi_write_addr_10000_83:
      00000A                        520 	.ds 1
      00000B                        521 _mac_spi_read_PARM_2:
      00000B                        522 	.ds 1
      00000C                        523 _mac_spi_read_addr_10000_85:
      00000C                        524 	.ds 1
      00000D                        525 _phy_spi_read_addr_10000_89:
      00000D                        526 	.ds 1
      00000E                        527 _busy_wait_data_10000_93:
      00000E                        528 	.ds 1
      00000F                        529 _buffer_init_PARM_2:
      00000F                        530 	.ds 2
      000011                        531 _buffer_init_start_address_10000_95:
      000011                        532 	.ds 2
      000013                        533 _spi_buffer_read_PARM_2:
      000013                        534 	.ds 2
      000015                        535 _spi_buffer_read_PARM_3:
      000015                        536 	.ds 3
      000018                        537 _spi_buffer_read_num_bytes_10000_99:
      000018                        538 	.ds 2
      00001A                        539 _spi_buffer_read_i_20002_106:
      00001A                        540 	.ds 2
      00001C                        541 _spi_buffer_write_PARM_2:
      00001C                        542 	.ds 2
      00001E                        543 _spi_buffer_write_PARM_3:
      00001E                        544 	.ds 3
      000021                        545 _spi_buffer_write_num_bytes_10000_108:
      000021                        546 	.ds 2
      000023                        547 _spi_buffer_write_i_20002_115:
      000023                        548 	.ds 2
                                    549 ;--------------------------------------------------------
                                    550 ; absolute external ram data
                                    551 ;--------------------------------------------------------
                                    552 	.area XABS    (ABS,XDATA)
                                    553 ;--------------------------------------------------------
                                    554 ; initialized external ram data
                                    555 ;--------------------------------------------------------
                                    556 	.area XISEG   (XDATA)
                                    557 	.area HOME    (CODE)
                                    558 	.area GSINIT0 (CODE)
                                    559 	.area GSINIT1 (CODE)
                                    560 	.area GSINIT2 (CODE)
                                    561 	.area GSINIT3 (CODE)
                                    562 	.area GSINIT4 (CODE)
                                    563 	.area GSINIT5 (CODE)
                                    564 	.area GSINIT  (CODE)
                                    565 	.area GSFINAL (CODE)
                                    566 	.area CSEG    (CODE)
                                    567 ;--------------------------------------------------------
                                    568 ; global & static initialisations
                                    569 ;--------------------------------------------------------
                                    570 	.area HOME    (CODE)
                                    571 	.area GSINIT  (CODE)
                                    572 	.area GSFINAL (CODE)
                                    573 	.area GSINIT  (CODE)
                                    574 ;--------------------------------------------------------
                                    575 ; Home
                                    576 ;--------------------------------------------------------
                                    577 	.area HOME    (CODE)
                                    578 	.area HOME    (CODE)
                                    579 ;--------------------------------------------------------
                                    580 ; code
                                    581 ;--------------------------------------------------------
                                    582 	.area CSEG    (CODE)
                                    583 ;------------------------------------------------------------
                                    584 ;Allocation info for local variables in function 'SPI_ReadByte'
                                    585 ;------------------------------------------------------------
                                    586 ;received_data             Allocated with name '_SPI_ReadByte_received_data_10000_64'
                                    587 ;------------------------------------------------------------
                                    588 ;	SPI.c:4: uint8_t SPI_ReadByte(void)
                                    589 ;	-----------------------------------------
                                    590 ;	 function SPI_ReadByte
                                    591 ;	-----------------------------------------
      000000                        592 _SPI_ReadByte:
                           000007   593 	ar7 = 0x07
                           000006   594 	ar6 = 0x06
                           000005   595 	ar5 = 0x05
                           000004   596 	ar4 = 0x04
                           000003   597 	ar3 = 0x03
                           000002   598 	ar2 = 0x02
                           000001   599 	ar1 = 0x01
                           000000   600 	ar0 = 0x00
                                    601 ;	SPI.c:9: SPDAT = 0xFF;
      000000 75 C5 FF         [24]  602 	mov	_SPDAT,#0xff
                                    603 ;	SPI.c:12: while (!(SPSTA & 0x80)) {
      000003                        604 00101$:
      000003 E5 C4            [12]  605 	mov	a,_SPSTA
      000005 30 E7 FB         [24]  606 	jnb	acc.7,00101$
                                    607 ;	SPI.c:17: received_data = SPDAT;
      000008 90r00r00         [24]  608 	mov	dptr,#_SPI_ReadByte_received_data_10000_64
      00000B E5 C5            [12]  609 	mov	a,_SPDAT
      00000D F0               [24]  610 	movx	@dptr,a
                                    611 ;	SPI.c:19: return received_data;
      00000E E0               [24]  612 	movx	a,@dptr
                                    613 ;	SPI.c:20: }
      00000F F5 82            [12]  614 	mov	dpl,a
      000011 22               [24]  615 	ret
                                    616 ;------------------------------------------------------------
                                    617 ;Allocation info for local variables in function 'spi_set_autoinc'
                                    618 ;------------------------------------------------------------
                                    619 ;	SPI.c:22: void spi_set_autoinc(void)
                                    620 ;	-----------------------------------------
                                    621 ;	 function spi_set_autoinc
                                    622 ;	-----------------------------------------
      000012                        623 _spi_set_autoinc:
                                    624 ;	SPI.c:24: CS_LOW;                          // Pull CS low to select the ENC28J60
                                    625 ;	assignBit
      000012 C2 91            [12]  626 	clr	_P1_1
                                    627 ;	SPI.c:26: SPI_send(0x5E);                  // Write ECON2 register address
      000014 75 82 5E         [24]  628 	mov	dpl, #0x5e
      000017 12r00rAA         [24]  629 	lcall	_SPI_send
                                    630 ;	SPI.c:27: SPI_send(0x80);                  // Set the AUTOINC bit
      00001A 75 82 80         [24]  631 	mov	dpl, #0x80
      00001D 12r00rAA         [24]  632 	lcall	_SPI_send
                                    633 ;	SPI.c:29: CS_HIGH;                         // Pull CS high to deselect the ENC28J60
                                    634 ;	assignBit
      000020 D2 91            [12]  635 	setb	_P1_1
                                    636 ;	SPI.c:30: }
      000022 22               [24]  637 	ret
                                    638 ;------------------------------------------------------------
                                    639 ;Allocation info for local variables in function 'select_reg_bank'
                                    640 ;------------------------------------------------------------
                                    641 ;bank                      Allocated with name '_select_reg_bank_bank_10000_68'
                                    642 ;------------------------------------------------------------
                                    643 ;	SPI.c:32: void select_reg_bank(uint8_t bank)
                                    644 ;	-----------------------------------------
                                    645 ;	 function select_reg_bank
                                    646 ;	-----------------------------------------
      000023                        647 _select_reg_bank:
      000023 E5 82            [12]  648 	mov	a,dpl
      000025 90r00r01         [24]  649 	mov	dptr,#_select_reg_bank_bank_10000_68
      000028 F0               [24]  650 	movx	@dptr,a
                                    651 ;	SPI.c:35: CS_LOW;
                                    652 ;	assignBit
      000029 C2 91            [12]  653 	clr	_P1_1
                                    654 ;	SPI.c:38: SPI_send(0x5F);
      00002B 75 82 5F         [24]  655 	mov	dpl, #0x5f
      00002E 12r00rAA         [24]  656 	lcall	_SPI_send
                                    657 ;	SPI.c:41: SPI_send(bank + 4);
      000031 90r00r01         [24]  658 	mov	dptr,#_select_reg_bank_bank_10000_68
      000034 E0               [24]  659 	movx	a,@dptr
      000035 24 04            [12]  660 	add	a,#0x04
      000037 F5 82            [12]  661 	mov	dpl,a
      000039 12r00rAA         [24]  662 	lcall	_SPI_send
                                    663 ;	SPI.c:44: CS_HIGH;
                                    664 ;	assignBit
      00003C D2 91            [12]  665 	setb	_P1_1
                                    666 ;	SPI.c:45: }
      00003E 22               [24]  667 	ret
                                    668 ;------------------------------------------------------------
                                    669 ;Allocation info for local variables in function 'spi_control_write'
                                    670 ;------------------------------------------------------------
                                    671 ;addr                      Allocated with name '_spi_control_write_PARM_2'
                                    672 ;data                      Allocated with name '_spi_control_write_PARM_3'
                                    673 ;reg_bank                  Allocated with name '_spi_control_write_reg_bank_10000_70'
                                    674 ;opcode                    Allocated with name '_spi_control_write_opcode_10000_71'
                                    675 ;------------------------------------------------------------
                                    676 ;	SPI.c:46: void spi_control_write(uint8_t reg_bank, uint8_t addr, uint8_t data)
                                    677 ;	-----------------------------------------
                                    678 ;	 function spi_control_write
                                    679 ;	-----------------------------------------
      00003F                        680 _spi_control_write:
      00003F E5 82            [12]  681 	mov	a,dpl
      000041 90r00r04         [24]  682 	mov	dptr,#_spi_control_write_reg_bank_10000_70
      000044 F0               [24]  683 	movx	@dptr,a
                                    684 ;	SPI.c:49: addr = addr + opcode; // Add the opcode to the address
      000045 90r00r02         [24]  685 	mov	dptr,#_spi_control_write_PARM_2
      000048 E0               [24]  686 	movx	a,@dptr
      000049 24 40            [12]  687 	add	a, #0x40
      00004B F0               [24]  688 	movx	@dptr,a
                                    689 ;	SPI.c:51: select_reg_bank(reg_bank); // Function to select the register bank
      00004C 90r00r04         [24]  690 	mov	dptr,#_spi_control_write_reg_bank_10000_70
      00004F E0               [24]  691 	movx	a,@dptr
      000050 F5 82            [12]  692 	mov	dpl,a
      000052 12r00r23         [24]  693 	lcall	_select_reg_bank
                                    694 ;	SPI.c:54: CS_LOW;
                                    695 ;	assignBit
      000055 C2 91            [12]  696 	clr	_P1_1
                                    697 ;	SPI.c:57: SPI_send(addr);
      000057 90r00r02         [24]  698 	mov	dptr,#_spi_control_write_PARM_2
      00005A E0               [24]  699 	movx	a,@dptr
      00005B FF               [12]  700 	mov	r7,a
      00005C F5 82            [12]  701 	mov	dpl,a
      00005E C0 07            [24]  702 	push	ar7
      000060 12r00rAA         [24]  703 	lcall	_SPI_send
      000063 D0 07            [24]  704 	pop	ar7
                                    705 ;	SPI.c:60: SPI_send(data);
      000065 90r00r03         [24]  706 	mov	dptr,#_spi_control_write_PARM_3
      000068 E0               [24]  707 	movx	a,@dptr
      000069 FE               [12]  708 	mov	r6,a
      00006A F5 82            [12]  709 	mov	dpl,a
      00006C C0 07            [24]  710 	push	ar7
      00006E C0 06            [24]  711 	push	ar6
      000070 12r00rAA         [24]  712 	lcall	_SPI_send
      000073 D0 06            [24]  713 	pop	ar6
      000075 D0 07            [24]  714 	pop	ar7
                                    715 ;	SPI.c:63: CS_HIGH;
                                    716 ;	assignBit
      000077 D2 91            [12]  717 	setb	_P1_1
                                    718 ;	SPI.c:66: printf("Write: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      000079 7D 00            [12]  719 	mov	r5,#0x00
      00007B 7C 00            [12]  720 	mov	r4,#0x00
      00007D C0 06            [24]  721 	push	ar6
      00007F C0 05            [24]  722 	push	ar5
      000081 C0 07            [24]  723 	push	ar7
      000083 C0 04            [24]  724 	push	ar4
      000085 74r00            [12]  725 	mov	a,#___str_0
      000087 C0 E0            [24]  726 	push	acc
      000089 74s00            [12]  727 	mov	a,#(___str_0 >> 8)
      00008B C0 E0            [24]  728 	push	acc
      00008D 74 80            [12]  729 	mov	a,#0x80
      00008F C0 E0            [24]  730 	push	acc
      000091 12r00r00         [24]  731 	lcall	_printf
      000094 E5 81            [12]  732 	mov	a,sp
      000096 24 F9            [12]  733 	add	a,#0xf9
      000098 F5 81            [12]  734 	mov	sp,a
                                    735 ;	SPI.c:67: }
      00009A 22               [24]  736 	ret
                                    737 ;------------------------------------------------------------
                                    738 ;Allocation info for local variables in function 'configure_SPI'
                                    739 ;------------------------------------------------------------
                                    740 ;	SPI.c:70: void configure_SPI(void)
                                    741 ;	-----------------------------------------
                                    742 ;	 function configure_SPI
                                    743 ;	-----------------------------------------
      00009B                        744 _configure_SPI:
                                    745 ;	SPI.c:72: CS_PIN = 1;
                                    746 ;	assignBit
      00009B D2 91            [12]  747 	setb	_P1_1
                                    748 ;	SPI.c:73: SPCON = 0x00;
      00009D 75 C3 00         [24]  749 	mov	_SPCON,#0x00
                                    750 ;	SPI.c:74: SPCON |= SS_DISABLE;
      0000A0 43 C3 20         [24]  751 	orl	_SPCON,#0x20
                                    752 ;	SPI.c:75: SPCON |= MASTER_MODE;
      0000A3 43 C3 10         [24]  753 	orl	_SPCON,#0x10
                                    754 ;	SPI.c:76: SPCON |= SPI_ENABLE;
      0000A6 43 C3 40         [24]  755 	orl	_SPCON,#0x40
                                    756 ;	SPI.c:77: }
      0000A9 22               [24]  757 	ret
                                    758 ;------------------------------------------------------------
                                    759 ;Allocation info for local variables in function 'SPI_send'
                                    760 ;------------------------------------------------------------
                                    761 ;data                      Allocated with name '_SPI_send_data_10000_74'
                                    762 ;------------------------------------------------------------
                                    763 ;	SPI.c:80: void SPI_send(uint8_t data)
                                    764 ;	-----------------------------------------
                                    765 ;	 function SPI_send
                                    766 ;	-----------------------------------------
      0000AA                        767 _SPI_send:
      0000AA E5 82            [12]  768 	mov	a,dpl
      0000AC 90r00r05         [24]  769 	mov	dptr,#_SPI_send_data_10000_74
      0000AF F0               [24]  770 	movx	@dptr,a
                                    771 ;	SPI.c:83: SPDAT = data;           // Config + MSB of data
      0000B0 E0               [24]  772 	movx	a,@dptr
      0000B1 F5 C5            [12]  773 	mov	_SPDAT,a
                                    774 ;	SPI.c:85: while (!(SPSTA & 0x80))
      0000B3                        775 00101$:
      0000B3 E5 C4            [12]  776 	mov	a,_SPSTA
      0000B5 30 E7 FB         [24]  777 	jnb	acc.7,00101$
                                    778 ;	SPI.c:90: }
      0000B8 22               [24]  779 	ret
                                    780 ;------------------------------------------------------------
                                    781 ;Allocation info for local variables in function 'enc_reset'
                                    782 ;------------------------------------------------------------
                                    783 ;	SPI.c:92: void enc_reset(void)
                                    784 ;	-----------------------------------------
                                    785 ;	 function enc_reset
                                    786 ;	-----------------------------------------
      0000B9                        787 _enc_reset:
                                    788 ;	SPI.c:94: CS_LOW;                    // Pull CS low to select the ENC28J60
                                    789 ;	assignBit
      0000B9 C2 91            [12]  790 	clr	_P1_1
                                    791 ;	SPI.c:95: SPI_send(0xFF);            // Send reset command
      0000BB 75 82 FF         [24]  792 	mov	dpl, #0xff
      0000BE 12r00rAA         [24]  793 	lcall	_SPI_send
                                    794 ;	SPI.c:96: CS_HIGH;                   // Pull CS high to deselect the ENC28J60
                                    795 ;	assignBit
      0000C1 D2 91            [12]  796 	setb	_P1_1
                                    797 ;	SPI.c:97: }
      0000C3 22               [24]  798 	ret
                                    799 ;------------------------------------------------------------
                                    800 ;Allocation info for local variables in function 'eth_spi_read'
                                    801 ;------------------------------------------------------------
                                    802 ;bank                      Allocated with name '_eth_spi_read_PARM_2'
                                    803 ;addr                      Allocated with name '_eth_spi_read_addr_10000_79'
                                    804 ;data                      Allocated with name '_eth_spi_read_data_10001_82'
                                    805 ;------------------------------------------------------------
                                    806 ;	SPI.c:99: uint8_t eth_spi_read(uint8_t addr, uint8_t bank)
                                    807 ;	-----------------------------------------
                                    808 ;	 function eth_spi_read
                                    809 ;	-----------------------------------------
      0000C4                        810 _eth_spi_read:
      0000C4 E5 82            [12]  811 	mov	a,dpl
      0000C6 90r00r07         [24]  812 	mov	dptr,#_eth_spi_read_addr_10000_79
      0000C9 F0               [24]  813 	movx	@dptr,a
                                    814 ;	SPI.c:101: if (addr > 0x1F) {
      0000CA E0               [24]  815 	movx	a,@dptr
      0000CB FF               [12]  816 	mov  r7,a
      0000CC 24 E0            [12]  817 	add	a,#0xff - 0x1f
      0000CE 50 19            [24]  818 	jnc	00102$
                                    819 ;	SPI.c:102: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      0000D0 74r25            [12]  820 	mov	a,#___str_1
      0000D2 C0 E0            [24]  821 	push	acc
      0000D4 74s00            [12]  822 	mov	a,#(___str_1 >> 8)
      0000D6 C0 E0            [24]  823 	push	acc
      0000D8 74 80            [12]  824 	mov	a,#0x80
      0000DA C0 E0            [24]  825 	push	acc
      0000DC 12r00r00         [24]  826 	lcall	_printf
      0000DF 15 81            [12]  827 	dec	sp
      0000E1 15 81            [12]  828 	dec	sp
      0000E3 15 81            [12]  829 	dec	sp
                                    830 ;	SPI.c:103: return 0;
      0000E5 75 82 00         [24]  831 	mov	dpl, #0x00
      0000E8 22               [24]  832 	ret
      0000E9                        833 00102$:
                                    834 ;	SPI.c:106: select_reg_bank(bank);     // Select the appropriate bank
      0000E9 90r00r06         [24]  835 	mov	dptr,#_eth_spi_read_PARM_2
      0000EC E0               [24]  836 	movx	a,@dptr
      0000ED F5 82            [12]  837 	mov	dpl,a
      0000EF C0 07            [24]  838 	push	ar7
      0000F1 12r00r23         [24]  839 	lcall	_select_reg_bank
      0000F4 D0 07            [24]  840 	pop	ar7
                                    841 ;	SPI.c:108: CS_LOW;                    // Pull CS low to start communication
                                    842 ;	assignBit
      0000F6 C2 91            [12]  843 	clr	_P1_1
                                    844 ;	SPI.c:109: SPI_send(addr);            // Send the address
      0000F8 8F 82            [24]  845 	mov	dpl, r7
      0000FA C0 07            [24]  846 	push	ar7
      0000FC 12r00rAA         [24]  847 	lcall	_SPI_send
                                    848 ;	SPI.c:110: uint8_t data = SPI_ReadByte(); // Read the data
      0000FF 12r00r00         [24]  849 	lcall	_SPI_ReadByte
      000102 AE 82            [24]  850 	mov	r6, dpl
      000104 D0 07            [24]  851 	pop	ar7
                                    852 ;	SPI.c:111: CS_HIGH;                   // Pull CS high to end communication
                                    853 ;	assignBit
      000106 D2 91            [12]  854 	setb	_P1_1
                                    855 ;	SPI.c:114: printf("Read: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      000108 8E 04            [24]  856 	mov	ar4,r6
      00010A 7D 00            [12]  857 	mov	r5,#0x00
      00010C 7B 00            [12]  858 	mov	r3,#0x00
      00010E C0 06            [24]  859 	push	ar6
      000110 C0 04            [24]  860 	push	ar4
      000112 C0 05            [24]  861 	push	ar5
      000114 C0 07            [24]  862 	push	ar7
      000116 C0 03            [24]  863 	push	ar3
      000118 74r5F            [12]  864 	mov	a,#___str_2
      00011A C0 E0            [24]  865 	push	acc
      00011C 74s00            [12]  866 	mov	a,#(___str_2 >> 8)
      00011E C0 E0            [24]  867 	push	acc
      000120 74 80            [12]  868 	mov	a,#0x80
      000122 C0 E0            [24]  869 	push	acc
      000124 12r00r00         [24]  870 	lcall	_printf
      000127 E5 81            [12]  871 	mov	a,sp
      000129 24 F9            [12]  872 	add	a,#0xf9
      00012B F5 81            [12]  873 	mov	sp,a
      00012D D0 06            [24]  874 	pop	ar6
                                    875 ;	SPI.c:116: return data;
      00012F 8E 82            [24]  876 	mov	dpl, r6
                                    877 ;	SPI.c:117: }
      000131 22               [24]  878 	ret
                                    879 ;------------------------------------------------------------
                                    880 ;Allocation info for local variables in function 'phy_spi_write'
                                    881 ;------------------------------------------------------------
                                    882 ;data                      Allocated with name '_phy_spi_write_PARM_2'
                                    883 ;addr                      Allocated with name '_phy_spi_write_addr_10000_83'
                                    884 ;------------------------------------------------------------
                                    885 ;	SPI.c:119: void phy_spi_write(uint8_t addr, uint16_t data)
                                    886 ;	-----------------------------------------
                                    887 ;	 function phy_spi_write
                                    888 ;	-----------------------------------------
      000132                        889 _phy_spi_write:
      000132 E5 82            [12]  890 	mov	a,dpl
      000134 90r00r0A         [24]  891 	mov	dptr,#_phy_spi_write_addr_10000_83
      000137 F0               [24]  892 	movx	@dptr,a
                                    893 ;	SPI.c:121: spi_control_write(2, 0x14, addr);                      // Write PHY address
      000138 E0               [24]  894 	movx	a,@dptr
      000139 FF               [12]  895 	mov	r7,a
      00013A 90r00r02         [24]  896 	mov	dptr,#_spi_control_write_PARM_2
      00013D 74 14            [12]  897 	mov	a,#0x14
      00013F F0               [24]  898 	movx	@dptr,a
      000140 90r00r03         [24]  899 	mov	dptr,#_spi_control_write_PARM_3
      000143 EF               [12]  900 	mov	a,r7
      000144 F0               [24]  901 	movx	@dptr,a
      000145 75 82 02         [24]  902 	mov	dpl, #0x02
      000148 C0 07            [24]  903 	push	ar7
      00014A 12r00r3F         [24]  904 	lcall	_spi_control_write
      00014D D0 07            [24]  905 	pop	ar7
                                    906 ;	SPI.c:122: spi_control_write(2, 0x16, (uint8_t)(data & 0xFF));    // Write LSB of data
      00014F 90r00r08         [24]  907 	mov	dptr,#_phy_spi_write_PARM_2
      000152 E0               [24]  908 	movx	a,@dptr
      000153 FD               [12]  909 	mov	r5,a
      000154 A3               [24]  910 	inc	dptr
      000155 E0               [24]  911 	movx	a,@dptr
      000156 FE               [12]  912 	mov	r6,a
      000157 8D 04            [24]  913 	mov	ar4,r5
      000159 90r00r02         [24]  914 	mov	dptr,#_spi_control_write_PARM_2
      00015C 74 16            [12]  915 	mov	a,#0x16
      00015E F0               [24]  916 	movx	@dptr,a
      00015F 90r00r03         [24]  917 	mov	dptr,#_spi_control_write_PARM_3
      000162 EC               [12]  918 	mov	a,r4
      000163 F0               [24]  919 	movx	@dptr,a
      000164 75 82 02         [24]  920 	mov	dpl, #0x02
      000167 C0 07            [24]  921 	push	ar7
      000169 C0 06            [24]  922 	push	ar6
      00016B C0 05            [24]  923 	push	ar5
      00016D 12r00r3F         [24]  924 	lcall	_spi_control_write
      000170 D0 05            [24]  925 	pop	ar5
      000172 D0 06            [24]  926 	pop	ar6
      000174 D0 07            [24]  927 	pop	ar7
                                    928 ;	SPI.c:123: spi_control_write(2, 0x17, (uint8_t)((data >> 8) & 0xFF)); // Write MSB of data
      000176 8E 04            [24]  929 	mov	ar4,r6
      000178 90r00r02         [24]  930 	mov	dptr,#_spi_control_write_PARM_2
      00017B 74 17            [12]  931 	mov	a,#0x17
      00017D F0               [24]  932 	movx	@dptr,a
      00017E 90r00r03         [24]  933 	mov	dptr,#_spi_control_write_PARM_3
      000181 EC               [12]  934 	mov	a,r4
      000182 F0               [24]  935 	movx	@dptr,a
      000183 75 82 02         [24]  936 	mov	dpl, #0x02
      000186 C0 07            [24]  937 	push	ar7
      000188 C0 06            [24]  938 	push	ar6
      00018A C0 05            [24]  939 	push	ar5
      00018C 12r00r3F         [24]  940 	lcall	_spi_control_write
      00018F D0 05            [24]  941 	pop	ar5
      000191 D0 06            [24]  942 	pop	ar6
      000193 D0 07            [24]  943 	pop	ar7
                                    944 ;	SPI.c:126: printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      000195 7C 00            [12]  945 	mov	r4,#0x00
      000197 C0 05            [24]  946 	push	ar5
      000199 C0 06            [24]  947 	push	ar6
      00019B C0 07            [24]  948 	push	ar7
      00019D C0 04            [24]  949 	push	ar4
      00019F 74r83            [12]  950 	mov	a,#___str_3
      0001A1 C0 E0            [24]  951 	push	acc
      0001A3 74s00            [12]  952 	mov	a,#(___str_3 >> 8)
      0001A5 C0 E0            [24]  953 	push	acc
      0001A7 74 80            [12]  954 	mov	a,#0x80
      0001A9 C0 E0            [24]  955 	push	acc
      0001AB 12r00r00         [24]  956 	lcall	_printf
      0001AE E5 81            [12]  957 	mov	a,sp
      0001B0 24 F9            [12]  958 	add	a,#0xf9
      0001B2 F5 81            [12]  959 	mov	sp,a
                                    960 ;	SPI.c:127: }
      0001B4 22               [24]  961 	ret
                                    962 ;------------------------------------------------------------
                                    963 ;Allocation info for local variables in function 'mac_spi_read'
                                    964 ;------------------------------------------------------------
                                    965 ;bank                      Allocated with name '_mac_spi_read_PARM_2'
                                    966 ;addr                      Allocated with name '_mac_spi_read_addr_10000_85'
                                    967 ;data                      Allocated with name '_mac_spi_read_data_10001_88'
                                    968 ;------------------------------------------------------------
                                    969 ;	SPI.c:129: uint8_t mac_spi_read(uint8_t addr, uint8_t bank)
                                    970 ;	-----------------------------------------
                                    971 ;	 function mac_spi_read
                                    972 ;	-----------------------------------------
      0001B5                        973 _mac_spi_read:
      0001B5 E5 82            [12]  974 	mov	a,dpl
      0001B7 90r00r0C         [24]  975 	mov	dptr,#_mac_spi_read_addr_10000_85
      0001BA F0               [24]  976 	movx	@dptr,a
                                    977 ;	SPI.c:131: if (addr > 0x1F) {
      0001BB E0               [24]  978 	movx	a,@dptr
      0001BC FF               [12]  979 	mov  r7,a
      0001BD 24 E0            [12]  980 	add	a,#0xff - 0x1f
      0001BF 50 19            [24]  981 	jnc	00102$
                                    982 ;	SPI.c:132: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      0001C1 74r25            [12]  983 	mov	a,#___str_1
      0001C3 C0 E0            [24]  984 	push	acc
      0001C5 74s00            [12]  985 	mov	a,#(___str_1 >> 8)
      0001C7 C0 E0            [24]  986 	push	acc
      0001C9 74 80            [12]  987 	mov	a,#0x80
      0001CB C0 E0            [24]  988 	push	acc
      0001CD 12r00r00         [24]  989 	lcall	_printf
      0001D0 15 81            [12]  990 	dec	sp
      0001D2 15 81            [12]  991 	dec	sp
      0001D4 15 81            [12]  992 	dec	sp
                                    993 ;	SPI.c:133: return 0; // Return 0 if address is invalid
      0001D6 75 82 00         [24]  994 	mov	dpl, #0x00
      0001D9 22               [24]  995 	ret
      0001DA                        996 00102$:
                                    997 ;	SPI.c:136: select_reg_bank(bank); // Select the appropriate register bank
      0001DA 90r00r0B         [24]  998 	mov	dptr,#_mac_spi_read_PARM_2
      0001DD E0               [24]  999 	movx	a,@dptr
      0001DE F5 82            [12] 1000 	mov	dpl,a
      0001E0 C0 07            [24] 1001 	push	ar7
      0001E2 12r00r23         [24] 1002 	lcall	_select_reg_bank
      0001E5 D0 07            [24] 1003 	pop	ar7
                                   1004 ;	SPI.c:139: CS_LOW;
                                   1005 ;	assignBit
      0001E7 C2 91            [12] 1006 	clr	_P1_1
                                   1007 ;	SPI.c:142: SPI_send(addr);
      0001E9 8F 82            [24] 1008 	mov	dpl, r7
      0001EB C0 07            [24] 1009 	push	ar7
      0001ED 12r00rAA         [24] 1010 	lcall	_SPI_send
                                   1011 ;	SPI.c:145: uint8_t data = SPI_ReadByte();
      0001F0 12r00r00         [24] 1012 	lcall	_SPI_ReadByte
      0001F3 AE 82            [24] 1013 	mov	r6, dpl
      0001F5 D0 07            [24] 1014 	pop	ar7
                                   1015 ;	SPI.c:148: CS_HIGH;
                                   1016 ;	assignBit
      0001F7 D2 91            [12] 1017 	setb	_P1_1
                                   1018 ;	SPI.c:151: printf("Read: Address 0x%02X, Data 0x%02X\n", addr, data);
      0001F9 8E 04            [24] 1019 	mov	ar4,r6
      0001FB 7D 00            [12] 1020 	mov	r5,#0x00
      0001FD 7B 00            [12] 1021 	mov	r3,#0x00
      0001FF C0 06            [24] 1022 	push	ar6
      000201 C0 04            [24] 1023 	push	ar4
      000203 C0 05            [24] 1024 	push	ar5
      000205 C0 07            [24] 1025 	push	ar7
      000207 C0 03            [24] 1026 	push	ar3
      000209 74rAC            [12] 1027 	mov	a,#___str_4
      00020B C0 E0            [24] 1028 	push	acc
      00020D 74s00            [12] 1029 	mov	a,#(___str_4 >> 8)
      00020F C0 E0            [24] 1030 	push	acc
      000211 74 80            [12] 1031 	mov	a,#0x80
      000213 C0 E0            [24] 1032 	push	acc
      000215 12r00r00         [24] 1033 	lcall	_printf
      000218 E5 81            [12] 1034 	mov	a,sp
      00021A 24 F9            [12] 1035 	add	a,#0xf9
      00021C F5 81            [12] 1036 	mov	sp,a
      00021E D0 06            [24] 1037 	pop	ar6
                                   1038 ;	SPI.c:153: return data;
      000220 8E 82            [24] 1039 	mov	dpl, r6
                                   1040 ;	SPI.c:154: }
      000222 22               [24] 1041 	ret
                                   1042 ;------------------------------------------------------------
                                   1043 ;Allocation info for local variables in function 'phy_spi_read'
                                   1044 ;------------------------------------------------------------
                                   1045 ;addr                      Allocated with name '_phy_spi_read_addr_10000_89'
                                   1046 ;data_LSB                  Allocated with name '_phy_spi_read_data_LSB_10001_91'
                                   1047 ;data_MSB                  Allocated with name '_phy_spi_read_data_MSB_10001_91'
                                   1048 ;data                      Allocated with name '_phy_spi_read_data_10001_91'
                                   1049 ;------------------------------------------------------------
                                   1050 ;	SPI.c:157: uint16_t phy_spi_read(uint8_t addr)
                                   1051 ;	-----------------------------------------
                                   1052 ;	 function phy_spi_read
                                   1053 ;	-----------------------------------------
      000223                       1054 _phy_spi_read:
      000223 E5 82            [12] 1055 	mov	a,dpl
      000225 90r00r0D         [24] 1056 	mov	dptr,#_phy_spi_read_addr_10000_89
      000228 F0               [24] 1057 	movx	@dptr,a
                                   1058 ;	SPI.c:159: spi_control_write(2, 0x14, addr);     // Write PHY address
      000229 E0               [24] 1059 	movx	a,@dptr
      00022A FF               [12] 1060 	mov	r7,a
      00022B 90r00r02         [24] 1061 	mov	dptr,#_spi_control_write_PARM_2
      00022E 74 14            [12] 1062 	mov	a,#0x14
      000230 F0               [24] 1063 	movx	@dptr,a
      000231 90r00r03         [24] 1064 	mov	dptr,#_spi_control_write_PARM_3
      000234 EF               [12] 1065 	mov	a,r7
      000235 F0               [24] 1066 	movx	@dptr,a
      000236 75 82 02         [24] 1067 	mov	dpl, #0x02
      000239 C0 07            [24] 1068 	push	ar7
      00023B 12r00r3F         [24] 1069 	lcall	_spi_control_write
      00023E D0 07            [24] 1070 	pop	ar7
                                   1071 ;	SPI.c:160: spi_control_write(2, 0x12, 1);        // Set MICMD.MIIRD bit
      000240 90r00r02         [24] 1072 	mov	dptr,#_spi_control_write_PARM_2
      000243 74 12            [12] 1073 	mov	a,#0x12
      000245 F0               [24] 1074 	movx	@dptr,a
      000246 90r00r03         [24] 1075 	mov	dptr,#_spi_control_write_PARM_3
      000249 74 01            [12] 1076 	mov	a,#0x01
      00024B F0               [24] 1077 	movx	@dptr,a
      00024C 75 82 02         [24] 1078 	mov	dpl, #0x02
      00024F C0 07            [24] 1079 	push	ar7
      000251 12r00r3F         [24] 1080 	lcall	_spi_control_write
                                   1081 ;	SPI.c:162: busy_wait();                          // Wait for the read to complete
      000254 12r02rD0         [24] 1082 	lcall	_busy_wait
      000257 D0 07            [24] 1083 	pop	ar7
                                   1084 ;	SPI.c:164: spi_control_write(2, 0x12, 0);        // Clear MICMD.MIIRD bit
      000259 90r00r02         [24] 1085 	mov	dptr,#_spi_control_write_PARM_2
      00025C 74 12            [12] 1086 	mov	a,#0x12
      00025E F0               [24] 1087 	movx	@dptr,a
      00025F 90r00r03         [24] 1088 	mov	dptr,#_spi_control_write_PARM_3
      000262 E4               [12] 1089 	clr	a
      000263 F0               [24] 1090 	movx	@dptr,a
      000264 75 82 02         [24] 1091 	mov	dpl, #0x02
      000267 C0 07            [24] 1092 	push	ar7
      000269 12r00r3F         [24] 1093 	lcall	_spi_control_write
      00026C D0 07            [24] 1094 	pop	ar7
                                   1095 ;	SPI.c:166: uint16_t data_LSB = mac_spi_read(0x18, 2); // Read LSB of data
      00026E 90r00r0B         [24] 1096 	mov	dptr,#_mac_spi_read_PARM_2
      000271 74 02            [12] 1097 	mov	a,#0x02
      000273 F0               [24] 1098 	movx	@dptr,a
      000274 75 82 18         [24] 1099 	mov	dpl, #0x18
      000277 C0 07            [24] 1100 	push	ar7
      000279 12r01rB5         [24] 1101 	lcall	_mac_spi_read
      00027C AE 82            [24] 1102 	mov	r6, dpl
      00027E D0 07            [24] 1103 	pop	ar7
      000280 7D 00            [12] 1104 	mov	r5,#0x00
                                   1105 ;	SPI.c:167: uint16_t data_MSB = mac_spi_read(0x19, 2); // Read MSB of data
      000282 90r00r0B         [24] 1106 	mov	dptr,#_mac_spi_read_PARM_2
      000285 74 02            [12] 1107 	mov	a,#0x02
      000287 F0               [24] 1108 	movx	@dptr,a
      000288 75 82 19         [24] 1109 	mov	dpl, #0x19
      00028B C0 07            [24] 1110 	push	ar7
      00028D C0 06            [24] 1111 	push	ar6
      00028F C0 05            [24] 1112 	push	ar5
      000291 12r01rB5         [24] 1113 	lcall	_mac_spi_read
      000294 AC 82            [24] 1114 	mov	r4, dpl
      000296 D0 05            [24] 1115 	pop	ar5
      000298 D0 06            [24] 1116 	pop	ar6
      00029A D0 07            [24] 1117 	pop	ar7
                                   1118 ;	SPI.c:169: uint16_t data = (data_MSB << 8) | data_LSB;        // Combine MSB and LSB
      00029C 8C 03            [24] 1119 	mov	ar3,r4
      00029E E4               [12] 1120 	clr	a
      00029F 42 06            [12] 1121 	orl	ar6,a
      0002A1 EB               [12] 1122 	mov	a,r3
      0002A2 42 05            [12] 1123 	orl	ar5,a
                                   1124 ;	SPI.c:172: printf("PHY Read: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      0002A4 7C 00            [12] 1125 	mov	r4,#0x00
      0002A6 C0 06            [24] 1126 	push	ar6
      0002A8 C0 05            [24] 1127 	push	ar5
      0002AA C0 06            [24] 1128 	push	ar6
      0002AC C0 05            [24] 1129 	push	ar5
      0002AE C0 07            [24] 1130 	push	ar7
      0002B0 C0 04            [24] 1131 	push	ar4
      0002B2 74rCF            [12] 1132 	mov	a,#___str_5
      0002B4 C0 E0            [24] 1133 	push	acc
      0002B6 74s00            [12] 1134 	mov	a,#(___str_5 >> 8)
      0002B8 C0 E0            [24] 1135 	push	acc
      0002BA 74 80            [12] 1136 	mov	a,#0x80
      0002BC C0 E0            [24] 1137 	push	acc
      0002BE 12r00r00         [24] 1138 	lcall	_printf
      0002C1 E5 81            [12] 1139 	mov	a,sp
      0002C3 24 F9            [12] 1140 	add	a,#0xf9
      0002C5 F5 81            [12] 1141 	mov	sp,a
      0002C7 D0 05            [24] 1142 	pop	ar5
      0002C9 D0 06            [24] 1143 	pop	ar6
                                   1144 ;	SPI.c:174: return data;        // Combine MSB and LSB
      0002CB 8E 82            [24] 1145 	mov	dpl, r6
      0002CD 8D 83            [24] 1146 	mov	dph, r5
                                   1147 ;	SPI.c:175: }
      0002CF 22               [24] 1148 	ret
                                   1149 ;------------------------------------------------------------
                                   1150 ;Allocation info for local variables in function 'busy_wait'
                                   1151 ;------------------------------------------------------------
                                   1152 ;data                      Allocated with name '_busy_wait_data_10000_93'
                                   1153 ;------------------------------------------------------------
                                   1154 ;	SPI.c:177: void busy_wait(void)
                                   1155 ;	-----------------------------------------
                                   1156 ;	 function busy_wait
                                   1157 ;	-----------------------------------------
      0002D0                       1158 _busy_wait:
                                   1159 ;	SPI.c:179: uint8_t data = mac_spi_read(0x0A, 3); // Read ESTAT register (bank 3)
      0002D0 90r00r0B         [24] 1160 	mov	dptr,#_mac_spi_read_PARM_2
      0002D3 74 03            [12] 1161 	mov	a,#0x03
      0002D5 F0               [24] 1162 	movx	@dptr,a
      0002D6 75 82 0A         [24] 1163 	mov	dpl, #0x0a
      0002D9 12r01rB5         [24] 1164 	lcall	_mac_spi_read
      0002DC E5 82            [12] 1165 	mov	a, dpl
      0002DE 90r00r0E         [24] 1166 	mov	dptr,#_busy_wait_data_10000_93
      0002E1 F0               [24] 1167 	movx	@dptr,a
                                   1168 ;	SPI.c:180: while (data & 0x01)
      0002E2                       1169 00101$:
      0002E2 90r00r0E         [24] 1170 	mov	dptr,#_busy_wait_data_10000_93
      0002E5 E0               [24] 1171 	movx	a,@dptr
      0002E6 30 E0 14         [24] 1172 	jnb	acc.0,00104$
                                   1173 ;	SPI.c:182: data = mac_spi_read(0x0A, 3);
      0002E9 90r00r0B         [24] 1174 	mov	dptr,#_mac_spi_read_PARM_2
      0002EC 74 03            [12] 1175 	mov	a,#0x03
      0002EE F0               [24] 1176 	movx	@dptr,a
      0002EF 75 82 0A         [24] 1177 	mov	dpl, #0x0a
      0002F2 12r01rB5         [24] 1178 	lcall	_mac_spi_read
      0002F5 E5 82            [12] 1179 	mov	a, dpl
      0002F7 90r00r0E         [24] 1180 	mov	dptr,#_busy_wait_data_10000_93
      0002FA F0               [24] 1181 	movx	@dptr,a
      0002FB 80 E5            [24] 1182 	sjmp	00101$
      0002FD                       1183 00104$:
                                   1184 ;	SPI.c:184: }
      0002FD 22               [24] 1185 	ret
                                   1186 ;------------------------------------------------------------
                                   1187 ;Allocation info for local variables in function 'buffer_init'
                                   1188 ;------------------------------------------------------------
                                   1189 ;size                      Allocated with name '_buffer_init_PARM_2'
                                   1190 ;start_address             Allocated with name '_buffer_init_start_address_10000_95'
                                   1191 ;erxst                     Allocated with name '_buffer_init_erxst_10001_98'
                                   1192 ;erxnd                     Allocated with name '_buffer_init_erxnd_10001_98'
                                   1193 ;------------------------------------------------------------
                                   1194 ;	SPI.c:186: void buffer_init(uint16_t start_address, uint16_t size)
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function buffer_init
                                   1197 ;	-----------------------------------------
      0002FE                       1198 _buffer_init:
      0002FE AF 83            [24] 1199 	mov	r7,dph
      000300 E5 82            [12] 1200 	mov	a,dpl
      000302 90r00r11         [24] 1201 	mov	dptr,#_buffer_init_start_address_10000_95
      000305 F0               [24] 1202 	movx	@dptr,a
      000306 EF               [12] 1203 	mov	a,r7
      000307 A3               [24] 1204 	inc	dptr
      000308 F0               [24] 1205 	movx	@dptr,a
                                   1206 ;	SPI.c:188: if (start_address > 0x1FFF || (start_address + size) > 0x1FFF) {
      000309 90r00r11         [24] 1207 	mov	dptr,#_buffer_init_start_address_10000_95
      00030C E0               [24] 1208 	movx	a,@dptr
      00030D FE               [12] 1209 	mov	r6,a
      00030E A3               [24] 1210 	inc	dptr
      00030F E0               [24] 1211 	movx	a,@dptr
      000310 FF               [12] 1212 	mov	r7,a
      000311 8E 04            [24] 1213 	mov	ar4,r6
      000313 8F 05            [24] 1214 	mov	ar5,r7
      000315 C3               [12] 1215 	clr	c
      000316 74 FF            [12] 1216 	mov	a,#0xff
      000318 9C               [12] 1217 	subb	a,r4
      000319 74 1F            [12] 1218 	mov	a,#0x1f
      00031B 9D               [12] 1219 	subb	a,r5
      00031C 40 17            [24] 1220 	jc	00101$
      00031E 90r00r0F         [24] 1221 	mov	dptr,#_buffer_init_PARM_2
      000321 E0               [24] 1222 	movx	a,@dptr
      000322 FA               [12] 1223 	mov	r2,a
      000323 A3               [24] 1224 	inc	dptr
      000324 E0               [24] 1225 	movx	a,@dptr
      000325 FB               [12] 1226 	mov	r3,a
      000326 EA               [12] 1227 	mov	a,r2
      000327 2E               [12] 1228 	add	a, r6
      000328 F8               [12] 1229 	mov	r0,a
      000329 EB               [12] 1230 	mov	a,r3
      00032A 3F               [12] 1231 	addc	a, r7
      00032B F9               [12] 1232 	mov	r1,a
      00032C C3               [12] 1233 	clr	c
      00032D 74 FF            [12] 1234 	mov	a,#0xff
      00032F 98               [12] 1235 	subb	a,r0
      000330 74 1F            [12] 1236 	mov	a,#0x1f
      000332 99               [12] 1237 	subb	a,r1
      000333 50 2A            [24] 1238 	jnc	00102$
      000335                       1239 00101$:
                                   1240 ;	SPI.c:189: printf("\n\rInvalid Buffer Address or Size: Start 0x%04X, Size 0x%04X\n\r", start_address, size);
      000335 90r00r0F         [24] 1241 	mov	dptr,#_buffer_init_PARM_2
      000338 E0               [24] 1242 	movx	a,@dptr
      000339 C0 E0            [24] 1243 	push	acc
      00033B A3               [24] 1244 	inc	dptr
      00033C E0               [24] 1245 	movx	a,@dptr
      00033D C0 E0            [24] 1246 	push	acc
      00033F 90r00r11         [24] 1247 	mov	dptr,#_buffer_init_start_address_10000_95
      000342 E0               [24] 1248 	movx	a,@dptr
      000343 C0 E0            [24] 1249 	push	acc
      000345 A3               [24] 1250 	inc	dptr
      000346 E0               [24] 1251 	movx	a,@dptr
      000347 C0 E0            [24] 1252 	push	acc
      000349 74rF7            [12] 1253 	mov	a,#___str_6
      00034B C0 E0            [24] 1254 	push	acc
      00034D 74s00            [12] 1255 	mov	a,#(___str_6 >> 8)
      00034F C0 E0            [24] 1256 	push	acc
      000351 74 80            [12] 1257 	mov	a,#0x80
      000353 C0 E0            [24] 1258 	push	acc
      000355 12r00r00         [24] 1259 	lcall	_printf
      000358 E5 81            [12] 1260 	mov	a,sp
      00035A 24 F9            [12] 1261 	add	a,#0xf9
      00035C F5 81            [12] 1262 	mov	sp,a
                                   1263 ;	SPI.c:190: return;
      00035E 22               [24] 1264 	ret
      00035F                       1265 00102$:
                                   1266 ;	SPI.c:194: uint16_t erxst = start_address & ~1; // Make sure ERXST is even
      00035F 53 04 FE         [24] 1267 	anl	ar4,#0xfe
                                   1268 ;	SPI.c:195: uint16_t erxnd = (start_address + size - 1) & ~1; // Make sure ERXND is even
      000362 EA               [12] 1269 	mov	a,r2
      000363 2E               [12] 1270 	add	a, r6
      000364 FE               [12] 1271 	mov	r6,a
      000365 EB               [12] 1272 	mov	a,r3
      000366 3F               [12] 1273 	addc	a, r7
      000367 FF               [12] 1274 	mov	r7,a
      000368 1E               [12] 1275 	dec	r6
      000369 BE FF 01         [24] 1276 	cjne	r6,#0xff,00114$
      00036C 1F               [12] 1277 	dec	r7
      00036D                       1278 00114$:
      00036D 53 06 FE         [24] 1279 	anl	ar6,#0xfe
                                   1280 ;	SPI.c:198: spi_control_write(0, 0x08, (uint8_t)(erxst >> 8)); // High byte of ERXST
      000370 8D 03            [24] 1281 	mov	ar3,r5
      000372 90r00r02         [24] 1282 	mov	dptr,#_spi_control_write_PARM_2
      000375 74 08            [12] 1283 	mov	a,#0x08
      000377 F0               [24] 1284 	movx	@dptr,a
      000378 90r00r03         [24] 1285 	mov	dptr,#_spi_control_write_PARM_3
      00037B EB               [12] 1286 	mov	a,r3
      00037C F0               [24] 1287 	movx	@dptr,a
      00037D 75 82 00         [24] 1288 	mov	dpl, #0x00
      000380 C0 07            [24] 1289 	push	ar7
      000382 C0 06            [24] 1290 	push	ar6
      000384 C0 05            [24] 1291 	push	ar5
      000386 C0 04            [24] 1292 	push	ar4
      000388 12r00r3F         [24] 1293 	lcall	_spi_control_write
      00038B D0 04            [24] 1294 	pop	ar4
      00038D D0 05            [24] 1295 	pop	ar5
      00038F D0 06            [24] 1296 	pop	ar6
      000391 D0 07            [24] 1297 	pop	ar7
                                   1298 ;	SPI.c:199: spi_control_write(0, 0x09, (uint8_t)(erxst & 0xFF)); // Low byte of ERXST
      000393 8C 03            [24] 1299 	mov	ar3,r4
      000395 90r00r02         [24] 1300 	mov	dptr,#_spi_control_write_PARM_2
      000398 74 09            [12] 1301 	mov	a,#0x09
      00039A F0               [24] 1302 	movx	@dptr,a
      00039B 90r00r03         [24] 1303 	mov	dptr,#_spi_control_write_PARM_3
      00039E EB               [12] 1304 	mov	a,r3
      00039F F0               [24] 1305 	movx	@dptr,a
      0003A0 75 82 00         [24] 1306 	mov	dpl, #0x00
      0003A3 C0 07            [24] 1307 	push	ar7
      0003A5 C0 06            [24] 1308 	push	ar6
      0003A7 C0 05            [24] 1309 	push	ar5
      0003A9 C0 04            [24] 1310 	push	ar4
      0003AB 12r00r3F         [24] 1311 	lcall	_spi_control_write
      0003AE D0 04            [24] 1312 	pop	ar4
      0003B0 D0 05            [24] 1313 	pop	ar5
      0003B2 D0 06            [24] 1314 	pop	ar6
      0003B4 D0 07            [24] 1315 	pop	ar7
                                   1316 ;	SPI.c:202: spi_control_write(0, 0x0A, (uint8_t)(erxnd >> 8)); // High byte of ERXND
      0003B6 8F 03            [24] 1317 	mov	ar3,r7
      0003B8 90r00r02         [24] 1318 	mov	dptr,#_spi_control_write_PARM_2
      0003BB 74 0A            [12] 1319 	mov	a,#0x0a
      0003BD F0               [24] 1320 	movx	@dptr,a
      0003BE 90r00r03         [24] 1321 	mov	dptr,#_spi_control_write_PARM_3
      0003C1 EB               [12] 1322 	mov	a,r3
      0003C2 F0               [24] 1323 	movx	@dptr,a
      0003C3 75 82 00         [24] 1324 	mov	dpl, #0x00
      0003C6 C0 07            [24] 1325 	push	ar7
      0003C8 C0 06            [24] 1326 	push	ar6
      0003CA C0 05            [24] 1327 	push	ar5
      0003CC C0 04            [24] 1328 	push	ar4
      0003CE 12r00r3F         [24] 1329 	lcall	_spi_control_write
      0003D1 D0 04            [24] 1330 	pop	ar4
      0003D3 D0 05            [24] 1331 	pop	ar5
      0003D5 D0 06            [24] 1332 	pop	ar6
      0003D7 D0 07            [24] 1333 	pop	ar7
                                   1334 ;	SPI.c:203: spi_control_write(0, 0x0B, (uint8_t)(erxnd & 0xFF)); // Low byte of ERXND
      0003D9 8E 03            [24] 1335 	mov	ar3,r6
      0003DB 90r00r02         [24] 1336 	mov	dptr,#_spi_control_write_PARM_2
      0003DE 74 0B            [12] 1337 	mov	a,#0x0b
      0003E0 F0               [24] 1338 	movx	@dptr,a
      0003E1 90r00r03         [24] 1339 	mov	dptr,#_spi_control_write_PARM_3
      0003E4 EB               [12] 1340 	mov	a,r3
      0003E5 F0               [24] 1341 	movx	@dptr,a
      0003E6 75 82 00         [24] 1342 	mov	dpl, #0x00
      0003E9 C0 07            [24] 1343 	push	ar7
      0003EB C0 06            [24] 1344 	push	ar6
      0003ED C0 05            [24] 1345 	push	ar5
      0003EF C0 04            [24] 1346 	push	ar4
      0003F1 12r00r3F         [24] 1347 	lcall	_spi_control_write
      0003F4 D0 04            [24] 1348 	pop	ar4
      0003F6 D0 05            [24] 1349 	pop	ar5
      0003F8 D0 06            [24] 1350 	pop	ar6
      0003FA D0 07            [24] 1351 	pop	ar7
                                   1352 ;	SPI.c:205: printf("\n\rBuffer Initialized: Start 0x%04X, End 0x%04X\n\r", erxst, erxnd);
      0003FC C0 06            [24] 1353 	push	ar6
      0003FE C0 07            [24] 1354 	push	ar7
      000400 C0 04            [24] 1355 	push	ar4
      000402 C0 05            [24] 1356 	push	ar5
      000404 74r35            [12] 1357 	mov	a,#___str_7
      000406 C0 E0            [24] 1358 	push	acc
      000408 74s01            [12] 1359 	mov	a,#(___str_7 >> 8)
      00040A C0 E0            [24] 1360 	push	acc
      00040C 74 80            [12] 1361 	mov	a,#0x80
      00040E C0 E0            [24] 1362 	push	acc
      000410 12r00r00         [24] 1363 	lcall	_printf
      000413 E5 81            [12] 1364 	mov	a,sp
      000415 24 F9            [12] 1365 	add	a,#0xf9
      000417 F5 81            [12] 1366 	mov	sp,a
                                   1367 ;	SPI.c:206: }
      000419 22               [24] 1368 	ret
                                   1369 ;------------------------------------------------------------
                                   1370 ;Allocation info for local variables in function 'spi_buffer_read'
                                   1371 ;------------------------------------------------------------
                                   1372 ;start_address             Allocated with name '_spi_buffer_read_PARM_2'
                                   1373 ;data_ptr                  Allocated with name '_spi_buffer_read_PARM_3'
                                   1374 ;num_bytes                 Allocated with name '_spi_buffer_read_num_bytes_10000_99'
                                   1375 ;higher_byte               Allocated with name '_spi_buffer_read_higher_byte_10001_104'
                                   1376 ;lower_byte                Allocated with name '_spi_buffer_read_lower_byte_10001_104'
                                   1377 ;opcode                    Allocated with name '_spi_buffer_read_opcode_10002_105'
                                   1378 ;i                         Allocated with name '_spi_buffer_read_i_20002_106'
                                   1379 ;------------------------------------------------------------
                                   1380 ;	SPI.c:209: void spi_buffer_read(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1381 ;	-----------------------------------------
                                   1382 ;	 function spi_buffer_read
                                   1383 ;	-----------------------------------------
      00041A                       1384 _spi_buffer_read:
      00041A AF 83            [24] 1385 	mov	r7,dph
      00041C E5 82            [12] 1386 	mov	a,dpl
      00041E 90r00r18         [24] 1387 	mov	dptr,#_spi_buffer_read_num_bytes_10000_99
      000421 F0               [24] 1388 	movx	@dptr,a
      000422 EF               [12] 1389 	mov	a,r7
      000423 A3               [24] 1390 	inc	dptr
      000424 F0               [24] 1391 	movx	@dptr,a
                                   1392 ;	SPI.c:211: if (num_bytes < 1) {
      000425 90r00r18         [24] 1393 	mov	dptr,#_spi_buffer_read_num_bytes_10000_99
      000428 E0               [24] 1394 	movx	a,@dptr
      000429 FE               [12] 1395 	mov	r6,a
      00042A A3               [24] 1396 	inc	dptr
      00042B E0               [24] 1397 	movx	a,@dptr
      00042C FF               [12] 1398 	mov	r7,a
      00042D C3               [12] 1399 	clr	c
      00042E EE               [12] 1400 	mov	a,r6
      00042F 94 01            [12] 1401 	subb	a,#0x01
      000431 EF               [12] 1402 	mov	a,r7
      000432 64 80            [12] 1403 	xrl	a,#0x80
      000434 94 80            [12] 1404 	subb	a,#0x80
      000436 50 1A            [24] 1405 	jnc	00102$
                                   1406 ;	SPI.c:212: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      000438 C0 06            [24] 1407 	push	ar6
      00043A C0 07            [24] 1408 	push	ar7
      00043C 74r66            [12] 1409 	mov	a,#___str_8
      00043E C0 E0            [24] 1410 	push	acc
      000440 74s01            [12] 1411 	mov	a,#(___str_8 >> 8)
      000442 C0 E0            [24] 1412 	push	acc
      000444 74 80            [12] 1413 	mov	a,#0x80
      000446 C0 E0            [24] 1414 	push	acc
      000448 12r00r00         [24] 1415 	lcall	_printf
      00044B E5 81            [12] 1416 	mov	a,sp
      00044D 24 FB            [12] 1417 	add	a,#0xfb
      00044F F5 81            [12] 1418 	mov	sp,a
                                   1419 ;	SPI.c:213: return;
      000451 22               [24] 1420 	ret
      000452                       1421 00102$:
                                   1422 ;	SPI.c:215: if (start_address > 0x1FFF) {
      000452 90r00r13         [24] 1423 	mov	dptr,#_spi_buffer_read_PARM_2
      000455 E0               [24] 1424 	movx	a,@dptr
      000456 FC               [12] 1425 	mov	r4,a
      000457 A3               [24] 1426 	inc	dptr
      000458 E0               [24] 1427 	movx	a,@dptr
      000459 FD               [12] 1428 	mov	r5,a
      00045A 8C 02            [24] 1429 	mov	ar2,r4
      00045C 8D 03            [24] 1430 	mov	ar3,r5
      00045E C3               [12] 1431 	clr	c
      00045F 74 FF            [12] 1432 	mov	a,#0xff
      000461 9A               [12] 1433 	subb	a,r2
      000462 74 1F            [12] 1434 	mov	a,#0x1f
      000464 9B               [12] 1435 	subb	a,r3
      000465 50 1A            [24] 1436 	jnc	00104$
                                   1437 ;	SPI.c:216: printf("\n\rInvalid address: %04X\n\r", start_address);
      000467 C0 04            [24] 1438 	push	ar4
      000469 C0 05            [24] 1439 	push	ar5
      00046B 74r86            [12] 1440 	mov	a,#___str_9
      00046D C0 E0            [24] 1441 	push	acc
      00046F 74s01            [12] 1442 	mov	a,#(___str_9 >> 8)
      000471 C0 E0            [24] 1443 	push	acc
      000473 74 80            [12] 1444 	mov	a,#0x80
      000475 C0 E0            [24] 1445 	push	acc
      000477 12r00r00         [24] 1446 	lcall	_printf
      00047A E5 81            [12] 1447 	mov	a,sp
      00047C 24 FB            [12] 1448 	add	a,#0xfb
      00047E F5 81            [12] 1449 	mov	sp,a
                                   1450 ;	SPI.c:217: return;
      000480 22               [24] 1451 	ret
      000481                       1452 00104$:
                                   1453 ;	SPI.c:220: if (num_bytes > 1) {
      000481 C3               [12] 1454 	clr	c
      000482 74 01            [12] 1455 	mov	a,#0x01
      000484 9E               [12] 1456 	subb	a,r6
      000485 74 80            [12] 1457 	mov	a,#(0x00 ^ 0x80)
      000487 8F F0            [24] 1458 	mov	b,r7
      000489 63 F0 80         [24] 1459 	xrl	b,#0x80
      00048C 95 F0            [12] 1460 	subb	a,b
      00048E 50 0B            [24] 1461 	jnc	00106$
                                   1462 ;	SPI.c:221: spi_set_autoinc();
      000490 C0 05            [24] 1463 	push	ar5
      000492 C0 04            [24] 1464 	push	ar4
      000494 12r00r12         [24] 1465 	lcall	_spi_set_autoinc
      000497 D0 04            [24] 1466 	pop	ar4
      000499 D0 05            [24] 1467 	pop	ar5
      00049B                       1468 00106$:
                                   1469 ;	SPI.c:225: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      00049B 8D 07            [24] 1470 	mov	ar7,r5
                                   1471 ;	SPI.c:226: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      00049D 8C 06            [24] 1472 	mov	ar6,r4
                                   1473 ;	SPI.c:228: spi_control_write(0, 0x01, higher_byte); // High byte
      00049F 90r00r02         [24] 1474 	mov	dptr,#_spi_control_write_PARM_2
      0004A2 74 01            [12] 1475 	mov	a,#0x01
      0004A4 F0               [24] 1476 	movx	@dptr,a
      0004A5 90r00r03         [24] 1477 	mov	dptr,#_spi_control_write_PARM_3
      0004A8 EF               [12] 1478 	mov	a,r7
      0004A9 F0               [24] 1479 	movx	@dptr,a
      0004AA 75 82 00         [24] 1480 	mov	dpl, #0x00
      0004AD C0 06            [24] 1481 	push	ar6
      0004AF C0 05            [24] 1482 	push	ar5
      0004B1 C0 04            [24] 1483 	push	ar4
      0004B3 12r00r3F         [24] 1484 	lcall	_spi_control_write
      0004B6 D0 04            [24] 1485 	pop	ar4
      0004B8 D0 05            [24] 1486 	pop	ar5
      0004BA D0 06            [24] 1487 	pop	ar6
                                   1488 ;	SPI.c:229: spi_control_write(0, 0x00, lower_byte); // Low byte
      0004BC 90r00r02         [24] 1489 	mov	dptr,#_spi_control_write_PARM_2
      0004BF E4               [12] 1490 	clr	a
      0004C0 F0               [24] 1491 	movx	@dptr,a
      0004C1 90r00r03         [24] 1492 	mov	dptr,#_spi_control_write_PARM_3
      0004C4 EE               [12] 1493 	mov	a,r6
      0004C5 F0               [24] 1494 	movx	@dptr,a
      0004C6 75 82 00         [24] 1495 	mov	dpl, #0x00
      0004C9 C0 05            [24] 1496 	push	ar5
      0004CB C0 04            [24] 1497 	push	ar4
      0004CD 12r00r3F         [24] 1498 	lcall	_spi_control_write
                                   1499 ;	SPI.c:232: CS_LOW; // Pull CS Low
                                   1500 ;	assignBit
      0004D0 C2 91            [12] 1501 	clr	_P1_1
                                   1502 ;	SPI.c:233: SPI_send(opcode); // Send opcode
      0004D2 75 82 3A         [24] 1503 	mov	dpl, #0x3a
      0004D5 12r00rAA         [24] 1504 	lcall	_SPI_send
      0004D8 D0 04            [24] 1505 	pop	ar4
      0004DA D0 05            [24] 1506 	pop	ar5
                                   1507 ;	SPI.c:236: printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      0004DC 90r00r18         [24] 1508 	mov	dptr,#_spi_buffer_read_num_bytes_10000_99
      0004DF E0               [24] 1509 	movx	a,@dptr
      0004E0 FE               [12] 1510 	mov	r6,a
      0004E1 A3               [24] 1511 	inc	dptr
      0004E2 E0               [24] 1512 	movx	a,@dptr
      0004E3 FF               [12] 1513 	mov	r7,a
      0004E4 C0 07            [24] 1514 	push	ar7
      0004E6 C0 06            [24] 1515 	push	ar6
      0004E8 C0 04            [24] 1516 	push	ar4
      0004EA C0 05            [24] 1517 	push	ar5
      0004EC C0 06            [24] 1518 	push	ar6
      0004EE C0 07            [24] 1519 	push	ar7
      0004F0 74rA0            [12] 1520 	mov	a,#___str_10
      0004F2 C0 E0            [24] 1521 	push	acc
      0004F4 74s01            [12] 1522 	mov	a,#(___str_10 >> 8)
      0004F6 C0 E0            [24] 1523 	push	acc
      0004F8 74 80            [12] 1524 	mov	a,#0x80
      0004FA C0 E0            [24] 1525 	push	acc
      0004FC 12r00r00         [24] 1526 	lcall	_printf
      0004FF E5 81            [12] 1527 	mov	a,sp
      000501 24 F9            [12] 1528 	add	a,#0xf9
      000503 F5 81            [12] 1529 	mov	sp,a
      000505 D0 06            [24] 1530 	pop	ar6
      000507 D0 07            [24] 1531 	pop	ar7
                                   1532 ;	SPI.c:237: for (int i = 0; i < num_bytes; i++) {
      000509 90r00r1A         [24] 1533 	mov	dptr,#_spi_buffer_read_i_20002_106
      00050C E4               [12] 1534 	clr	a
      00050D F0               [24] 1535 	movx	@dptr,a
      00050E A3               [24] 1536 	inc	dptr
      00050F F0               [24] 1537 	movx	@dptr,a
      000510 90r00r15         [24] 1538 	mov	dptr,#_spi_buffer_read_PARM_3
      000513 E0               [24] 1539 	movx	a,@dptr
      000514 FB               [12] 1540 	mov	r3,a
      000515 A3               [24] 1541 	inc	dptr
      000516 E0               [24] 1542 	movx	a,@dptr
      000517 FC               [12] 1543 	mov	r4,a
      000518 A3               [24] 1544 	inc	dptr
      000519 E0               [24] 1545 	movx	a,@dptr
      00051A FD               [12] 1546 	mov	r5,a
      00051B                       1547 00109$:
      00051B 90r00r1A         [24] 1548 	mov	dptr,#_spi_buffer_read_i_20002_106
      00051E E0               [24] 1549 	movx	a,@dptr
      00051F F9               [12] 1550 	mov	r1,a
      000520 A3               [24] 1551 	inc	dptr
      000521 E0               [24] 1552 	movx	a,@dptr
      000522 FA               [12] 1553 	mov	r2,a
      000523 C3               [12] 1554 	clr	c
      000524 E9               [12] 1555 	mov	a,r1
      000525 9E               [12] 1556 	subb	a,r6
      000526 EA               [12] 1557 	mov	a,r2
      000527 64 80            [12] 1558 	xrl	a,#0x80
      000529 8F F0            [24] 1559 	mov	b,r7
      00052B 63 F0 80         [24] 1560 	xrl	b,#0x80
      00052E 95 F0            [12] 1561 	subb	a,b
      000530 40 03            [24] 1562 	jc	00147$
      000532 02r05rB8         [24] 1563 	ljmp	00107$
      000535                       1564 00147$:
                                   1565 ;	SPI.c:238: *data_ptr = SPI_ReadByte(); // Read data
      000535 C0 06            [24] 1566 	push	ar6
      000537 C0 07            [24] 1567 	push	ar7
      000539 C0 07            [24] 1568 	push	ar7
      00053B C0 06            [24] 1569 	push	ar6
      00053D C0 05            [24] 1570 	push	ar5
      00053F C0 04            [24] 1571 	push	ar4
      000541 C0 03            [24] 1572 	push	ar3
      000543 C0 02            [24] 1573 	push	ar2
      000545 C0 01            [24] 1574 	push	ar1
      000547 12r00r00         [24] 1575 	lcall	_SPI_ReadByte
      00054A A8 82            [24] 1576 	mov	r0, dpl
      00054C D0 01            [24] 1577 	pop	ar1
      00054E D0 02            [24] 1578 	pop	ar2
      000550 D0 03            [24] 1579 	pop	ar3
      000552 D0 04            [24] 1580 	pop	ar4
      000554 D0 05            [24] 1581 	pop	ar5
      000556 D0 06            [24] 1582 	pop	ar6
      000558 D0 07            [24] 1583 	pop	ar7
      00055A 8B 82            [24] 1584 	mov	dpl,r3
      00055C 8C 83            [24] 1585 	mov	dph,r4
      00055E 8D F0            [24] 1586 	mov	b,r5
      000560 E8               [12] 1587 	mov	a,r0
      000561 12r00r00         [24] 1588 	lcall	__gptrput
      000564 A3               [24] 1589 	inc	dptr
      000565 AB 82            [24] 1590 	mov	r3,dpl
      000567 AC 83            [24] 1591 	mov	r4,dph
                                   1592 ;	SPI.c:239: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      000569 7F 00            [12] 1593 	mov	r7,#0x00
      00056B 09               [12] 1594 	inc	r1
      00056C B9 00 01         [24] 1595 	cjne	r1,#0x00,00148$
      00056F 0A               [12] 1596 	inc	r2
      000570                       1597 00148$:
      000570 C0 07            [24] 1598 	push	ar7
      000572 C0 06            [24] 1599 	push	ar6
      000574 C0 05            [24] 1600 	push	ar5
      000576 C0 04            [24] 1601 	push	ar4
      000578 C0 03            [24] 1602 	push	ar3
      00057A C0 02            [24] 1603 	push	ar2
      00057C C0 01            [24] 1604 	push	ar1
      00057E C0 00            [24] 1605 	push	ar0
      000580 C0 07            [24] 1606 	push	ar7
      000582 C0 01            [24] 1607 	push	ar1
      000584 C0 02            [24] 1608 	push	ar2
      000586 74rDB            [12] 1609 	mov	a,#___str_11
      000588 C0 E0            [24] 1610 	push	acc
      00058A 74s01            [12] 1611 	mov	a,#(___str_11 >> 8)
      00058C C0 E0            [24] 1612 	push	acc
      00058E 74 80            [12] 1613 	mov	a,#0x80
      000590 C0 E0            [24] 1614 	push	acc
      000592 12r00r00         [24] 1615 	lcall	_printf
      000595 E5 81            [12] 1616 	mov	a,sp
      000597 24 F9            [12] 1617 	add	a,#0xf9
      000599 F5 81            [12] 1618 	mov	sp,a
      00059B D0 01            [24] 1619 	pop	ar1
      00059D D0 02            [24] 1620 	pop	ar2
      00059F D0 03            [24] 1621 	pop	ar3
      0005A1 D0 04            [24] 1622 	pop	ar4
      0005A3 D0 05            [24] 1623 	pop	ar5
      0005A5 D0 06            [24] 1624 	pop	ar6
      0005A7 D0 07            [24] 1625 	pop	ar7
                                   1626 ;	SPI.c:240: data_ptr++;
                                   1627 ;	SPI.c:237: for (int i = 0; i < num_bytes; i++) {
      0005A9 90r00r1A         [24] 1628 	mov	dptr,#_spi_buffer_read_i_20002_106
      0005AC E9               [12] 1629 	mov	a,r1
      0005AD F0               [24] 1630 	movx	@dptr,a
      0005AE EA               [12] 1631 	mov	a,r2
      0005AF A3               [24] 1632 	inc	dptr
      0005B0 F0               [24] 1633 	movx	@dptr,a
      0005B1 D0 07            [24] 1634 	pop	ar7
      0005B3 D0 06            [24] 1635 	pop	ar6
      0005B5 02r05r1B         [24] 1636 	ljmp	00109$
      0005B8                       1637 00107$:
                                   1638 ;	SPI.c:242: CS_HIGH; // Pull CS High
                                   1639 ;	assignBit
      0005B8 D2 91            [12] 1640 	setb	_P1_1
                                   1641 ;	SPI.c:243: }
      0005BA 22               [24] 1642 	ret
                                   1643 ;------------------------------------------------------------
                                   1644 ;Allocation info for local variables in function 'spi_buffer_write'
                                   1645 ;------------------------------------------------------------
                                   1646 ;start_address             Allocated with name '_spi_buffer_write_PARM_2'
                                   1647 ;data_ptr                  Allocated with name '_spi_buffer_write_PARM_3'
                                   1648 ;num_bytes                 Allocated with name '_spi_buffer_write_num_bytes_10000_108'
                                   1649 ;higher_byte               Allocated with name '_spi_buffer_write_higher_byte_10001_113'
                                   1650 ;lower_byte                Allocated with name '_spi_buffer_write_lower_byte_10001_113'
                                   1651 ;opcode                    Allocated with name '_spi_buffer_write_opcode_10002_114'
                                   1652 ;i                         Allocated with name '_spi_buffer_write_i_20002_115'
                                   1653 ;------------------------------------------------------------
                                   1654 ;	SPI.c:246: void spi_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1655 ;	-----------------------------------------
                                   1656 ;	 function spi_buffer_write
                                   1657 ;	-----------------------------------------
      0005BB                       1658 _spi_buffer_write:
      0005BB AF 83            [24] 1659 	mov	r7,dph
      0005BD E5 82            [12] 1660 	mov	a,dpl
      0005BF 90r00r21         [24] 1661 	mov	dptr,#_spi_buffer_write_num_bytes_10000_108
      0005C2 F0               [24] 1662 	movx	@dptr,a
      0005C3 EF               [12] 1663 	mov	a,r7
      0005C4 A3               [24] 1664 	inc	dptr
      0005C5 F0               [24] 1665 	movx	@dptr,a
                                   1666 ;	SPI.c:248: if (num_bytes < 1)
      0005C6 90r00r21         [24] 1667 	mov	dptr,#_spi_buffer_write_num_bytes_10000_108
      0005C9 E0               [24] 1668 	movx	a,@dptr
      0005CA FE               [12] 1669 	mov	r6,a
      0005CB A3               [24] 1670 	inc	dptr
      0005CC E0               [24] 1671 	movx	a,@dptr
      0005CD FF               [12] 1672 	mov	r7,a
      0005CE C3               [12] 1673 	clr	c
      0005CF EE               [12] 1674 	mov	a,r6
      0005D0 94 01            [12] 1675 	subb	a,#0x01
      0005D2 EF               [12] 1676 	mov	a,r7
      0005D3 64 80            [12] 1677 	xrl	a,#0x80
      0005D5 94 80            [12] 1678 	subb	a,#0x80
      0005D7 50 1A            [24] 1679 	jnc	00102$
                                   1680 ;	SPI.c:250: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      0005D9 C0 06            [24] 1681 	push	ar6
      0005DB C0 07            [24] 1682 	push	ar7
      0005DD 74r66            [12] 1683 	mov	a,#___str_8
      0005DF C0 E0            [24] 1684 	push	acc
      0005E1 74s01            [12] 1685 	mov	a,#(___str_8 >> 8)
      0005E3 C0 E0            [24] 1686 	push	acc
      0005E5 74 80            [12] 1687 	mov	a,#0x80
      0005E7 C0 E0            [24] 1688 	push	acc
      0005E9 12r00r00         [24] 1689 	lcall	_printf
      0005EC E5 81            [12] 1690 	mov	a,sp
      0005EE 24 FB            [12] 1691 	add	a,#0xfb
      0005F0 F5 81            [12] 1692 	mov	sp,a
                                   1693 ;	SPI.c:251: return;
      0005F2 22               [24] 1694 	ret
      0005F3                       1695 00102$:
                                   1696 ;	SPI.c:253: if (start_address > 0x1FFF) {
      0005F3 90r00r1C         [24] 1697 	mov	dptr,#_spi_buffer_write_PARM_2
      0005F6 E0               [24] 1698 	movx	a,@dptr
      0005F7 FC               [12] 1699 	mov	r4,a
      0005F8 A3               [24] 1700 	inc	dptr
      0005F9 E0               [24] 1701 	movx	a,@dptr
      0005FA FD               [12] 1702 	mov	r5,a
      0005FB 8C 02            [24] 1703 	mov	ar2,r4
      0005FD 8D 03            [24] 1704 	mov	ar3,r5
      0005FF C3               [12] 1705 	clr	c
      000600 74 FF            [12] 1706 	mov	a,#0xff
      000602 9A               [12] 1707 	subb	a,r2
      000603 74 1F            [12] 1708 	mov	a,#0x1f
      000605 9B               [12] 1709 	subb	a,r3
      000606 50 1A            [24] 1710 	jnc	00104$
                                   1711 ;	SPI.c:254: printf("\n\rInvalid address: %04X\n\r", start_address);
      000608 C0 04            [24] 1712 	push	ar4
      00060A C0 05            [24] 1713 	push	ar5
      00060C 74r86            [12] 1714 	mov	a,#___str_9
      00060E C0 E0            [24] 1715 	push	acc
      000610 74s01            [12] 1716 	mov	a,#(___str_9 >> 8)
      000612 C0 E0            [24] 1717 	push	acc
      000614 74 80            [12] 1718 	mov	a,#0x80
      000616 C0 E0            [24] 1719 	push	acc
      000618 12r00r00         [24] 1720 	lcall	_printf
      00061B E5 81            [12] 1721 	mov	a,sp
      00061D 24 FB            [12] 1722 	add	a,#0xfb
      00061F F5 81            [12] 1723 	mov	sp,a
                                   1724 ;	SPI.c:255: return;
      000621 22               [24] 1725 	ret
      000622                       1726 00104$:
                                   1727 ;	SPI.c:259: if (num_bytes > 1) {
      000622 C3               [12] 1728 	clr	c
      000623 74 01            [12] 1729 	mov	a,#0x01
      000625 9E               [12] 1730 	subb	a,r6
      000626 74 80            [12] 1731 	mov	a,#(0x00 ^ 0x80)
      000628 8F F0            [24] 1732 	mov	b,r7
      00062A 63 F0 80         [24] 1733 	xrl	b,#0x80
      00062D 95 F0            [12] 1734 	subb	a,b
      00062F 50 0B            [24] 1735 	jnc	00106$
                                   1736 ;	SPI.c:260: spi_set_autoinc();
      000631 C0 05            [24] 1737 	push	ar5
      000633 C0 04            [24] 1738 	push	ar4
      000635 12r00r12         [24] 1739 	lcall	_spi_set_autoinc
      000638 D0 04            [24] 1740 	pop	ar4
      00063A D0 05            [24] 1741 	pop	ar5
      00063C                       1742 00106$:
                                   1743 ;	SPI.c:263: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      00063C 8D 07            [24] 1744 	mov	ar7,r5
                                   1745 ;	SPI.c:264: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      00063E 8C 06            [24] 1746 	mov	ar6,r4
                                   1747 ;	SPI.c:266: spi_control_write(0, 0x03, higher_byte); // High byte
      000640 90r00r02         [24] 1748 	mov	dptr,#_spi_control_write_PARM_2
      000643 74 03            [12] 1749 	mov	a,#0x03
      000645 F0               [24] 1750 	movx	@dptr,a
      000646 90r00r03         [24] 1751 	mov	dptr,#_spi_control_write_PARM_3
      000649 EF               [12] 1752 	mov	a,r7
      00064A F0               [24] 1753 	movx	@dptr,a
      00064B 75 82 00         [24] 1754 	mov	dpl, #0x00
      00064E C0 06            [24] 1755 	push	ar6
      000650 C0 05            [24] 1756 	push	ar5
      000652 C0 04            [24] 1757 	push	ar4
      000654 12r00r3F         [24] 1758 	lcall	_spi_control_write
      000657 D0 04            [24] 1759 	pop	ar4
      000659 D0 05            [24] 1760 	pop	ar5
      00065B D0 06            [24] 1761 	pop	ar6
                                   1762 ;	SPI.c:267: spi_control_write(0, 0x02, lower_byte); // Low byte
      00065D 90r00r02         [24] 1763 	mov	dptr,#_spi_control_write_PARM_2
      000660 74 02            [12] 1764 	mov	a,#0x02
      000662 F0               [24] 1765 	movx	@dptr,a
      000663 90r00r03         [24] 1766 	mov	dptr,#_spi_control_write_PARM_3
      000666 EE               [12] 1767 	mov	a,r6
      000667 F0               [24] 1768 	movx	@dptr,a
      000668 75 82 00         [24] 1769 	mov	dpl, #0x00
      00066B C0 05            [24] 1770 	push	ar5
      00066D C0 04            [24] 1771 	push	ar4
      00066F 12r00r3F         [24] 1772 	lcall	_spi_control_write
                                   1773 ;	SPI.c:270: CS_LOW; // Pull CS Low
                                   1774 ;	assignBit
      000672 C2 91            [12] 1775 	clr	_P1_1
                                   1776 ;	SPI.c:271: SPI_send(opcode); // Send opcode
      000674 75 82 7A         [24] 1777 	mov	dpl, #0x7a
      000677 12r00rAA         [24] 1778 	lcall	_SPI_send
      00067A D0 04            [24] 1779 	pop	ar4
      00067C D0 05            [24] 1780 	pop	ar5
                                   1781 ;	SPI.c:274: printf("Writing %d bytes to buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      00067E 90r00r21         [24] 1782 	mov	dptr,#_spi_buffer_write_num_bytes_10000_108
      000681 E0               [24] 1783 	movx	a,@dptr
      000682 FE               [12] 1784 	mov	r6,a
      000683 A3               [24] 1785 	inc	dptr
      000684 E0               [24] 1786 	movx	a,@dptr
      000685 FF               [12] 1787 	mov	r7,a
      000686 C0 07            [24] 1788 	push	ar7
      000688 C0 06            [24] 1789 	push	ar6
      00068A C0 04            [24] 1790 	push	ar4
      00068C C0 05            [24] 1791 	push	ar5
      00068E C0 06            [24] 1792 	push	ar6
      000690 C0 07            [24] 1793 	push	ar7
      000692 74rED            [12] 1794 	mov	a,#___str_12
      000694 C0 E0            [24] 1795 	push	acc
      000696 74s01            [12] 1796 	mov	a,#(___str_12 >> 8)
      000698 C0 E0            [24] 1797 	push	acc
      00069A 74 80            [12] 1798 	mov	a,#0x80
      00069C C0 E0            [24] 1799 	push	acc
      00069E 12r00r00         [24] 1800 	lcall	_printf
      0006A1 E5 81            [12] 1801 	mov	a,sp
      0006A3 24 F9            [12] 1802 	add	a,#0xf9
      0006A5 F5 81            [12] 1803 	mov	sp,a
      0006A7 D0 06            [24] 1804 	pop	ar6
      0006A9 D0 07            [24] 1805 	pop	ar7
                                   1806 ;	SPI.c:275: for (int i = 0; i < num_bytes; i++) {
      0006AB 90r00r23         [24] 1807 	mov	dptr,#_spi_buffer_write_i_20002_115
      0006AE E4               [12] 1808 	clr	a
      0006AF F0               [24] 1809 	movx	@dptr,a
      0006B0 A3               [24] 1810 	inc	dptr
      0006B1 F0               [24] 1811 	movx	@dptr,a
      0006B2 90r00r1E         [24] 1812 	mov	dptr,#_spi_buffer_write_PARM_3
      0006B5 E0               [24] 1813 	movx	a,@dptr
      0006B6 FB               [12] 1814 	mov	r3,a
      0006B7 A3               [24] 1815 	inc	dptr
      0006B8 E0               [24] 1816 	movx	a,@dptr
      0006B9 FC               [12] 1817 	mov	r4,a
      0006BA A3               [24] 1818 	inc	dptr
      0006BB E0               [24] 1819 	movx	a,@dptr
      0006BC FD               [12] 1820 	mov	r5,a
      0006BD                       1821 00109$:
      0006BD 90r00r23         [24] 1822 	mov	dptr,#_spi_buffer_write_i_20002_115
      0006C0 E0               [24] 1823 	movx	a,@dptr
      0006C1 F9               [12] 1824 	mov	r1,a
      0006C2 A3               [24] 1825 	inc	dptr
      0006C3 E0               [24] 1826 	movx	a,@dptr
      0006C4 FA               [12] 1827 	mov	r2,a
      0006C5 C3               [12] 1828 	clr	c
      0006C6 E9               [12] 1829 	mov	a,r1
      0006C7 9E               [12] 1830 	subb	a,r6
      0006C8 EA               [12] 1831 	mov	a,r2
      0006C9 64 80            [12] 1832 	xrl	a,#0x80
      0006CB 8F F0            [24] 1833 	mov	b,r7
      0006CD 63 F0 80         [24] 1834 	xrl	b,#0x80
      0006D0 95 F0            [12] 1835 	subb	a,b
      0006D2 40 03            [24] 1836 	jc	00147$
      0006D4 02r07r64         [24] 1837 	ljmp	00107$
      0006D7                       1838 00147$:
                                   1839 ;	SPI.c:276: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      0006D7 C0 06            [24] 1840 	push	ar6
      0006D9 C0 07            [24] 1841 	push	ar7
      0006DB 8B 82            [24] 1842 	mov	dpl,r3
      0006DD 8C 83            [24] 1843 	mov	dph,r4
      0006DF 8D F0            [24] 1844 	mov	b,r5
      0006E1 12r00r00         [24] 1845 	lcall	__gptrget
      0006E4 F8               [12] 1846 	mov	r0,a
      0006E5 7F 00            [12] 1847 	mov	r7,#0x00
      0006E7 09               [12] 1848 	inc	r1
      0006E8 B9 00 01         [24] 1849 	cjne	r1,#0x00,00148$
      0006EB 0A               [12] 1850 	inc	r2
      0006EC                       1851 00148$:
      0006EC C0 07            [24] 1852 	push	ar7
      0006EE C0 06            [24] 1853 	push	ar6
      0006F0 C0 05            [24] 1854 	push	ar5
      0006F2 C0 04            [24] 1855 	push	ar4
      0006F4 C0 03            [24] 1856 	push	ar3
      0006F6 C0 02            [24] 1857 	push	ar2
      0006F8 C0 01            [24] 1858 	push	ar1
      0006FA C0 00            [24] 1859 	push	ar0
      0006FC C0 07            [24] 1860 	push	ar7
      0006FE C0 01            [24] 1861 	push	ar1
      000700 C0 02            [24] 1862 	push	ar2
      000702 74rDB            [12] 1863 	mov	a,#___str_11
      000704 C0 E0            [24] 1864 	push	acc
      000706 74s01            [12] 1865 	mov	a,#(___str_11 >> 8)
      000708 C0 E0            [24] 1866 	push	acc
      00070A 74 80            [12] 1867 	mov	a,#0x80
      00070C C0 E0            [24] 1868 	push	acc
      00070E 12r00r00         [24] 1869 	lcall	_printf
      000711 E5 81            [12] 1870 	mov	a,sp
      000713 24 F9            [12] 1871 	add	a,#0xf9
      000715 F5 81            [12] 1872 	mov	sp,a
      000717 D0 01            [24] 1873 	pop	ar1
      000719 D0 02            [24] 1874 	pop	ar2
      00071B D0 03            [24] 1875 	pop	ar3
      00071D D0 04            [24] 1876 	pop	ar4
      00071F D0 05            [24] 1877 	pop	ar5
      000721 D0 06            [24] 1878 	pop	ar6
      000723 D0 07            [24] 1879 	pop	ar7
                                   1880 ;	SPI.c:277: SPI_send(*data_ptr); // Send data
      000725 8B 82            [24] 1881 	mov	dpl,r3
      000727 8C 83            [24] 1882 	mov	dph,r4
      000729 8D F0            [24] 1883 	mov	b,r5
      00072B 12r00r00         [24] 1884 	lcall	__gptrget
      00072E FF               [12] 1885 	mov	r7,a
      00072F A3               [24] 1886 	inc	dptr
      000730 AB 82            [24] 1887 	mov	r3,dpl
      000732 AC 83            [24] 1888 	mov	r4,dph
      000734 8F 82            [24] 1889 	mov	dpl, r7
      000736 C0 07            [24] 1890 	push	ar7
      000738 C0 06            [24] 1891 	push	ar6
      00073A C0 05            [24] 1892 	push	ar5
      00073C C0 04            [24] 1893 	push	ar4
      00073E C0 03            [24] 1894 	push	ar3
      000740 C0 02            [24] 1895 	push	ar2
      000742 C0 01            [24] 1896 	push	ar1
      000744 12r00rAA         [24] 1897 	lcall	_SPI_send
      000747 D0 01            [24] 1898 	pop	ar1
      000749 D0 02            [24] 1899 	pop	ar2
      00074B D0 03            [24] 1900 	pop	ar3
      00074D D0 04            [24] 1901 	pop	ar4
      00074F D0 05            [24] 1902 	pop	ar5
      000751 D0 06            [24] 1903 	pop	ar6
      000753 D0 07            [24] 1904 	pop	ar7
                                   1905 ;	SPI.c:278: data_ptr++;
                                   1906 ;	SPI.c:275: for (int i = 0; i < num_bytes; i++) {
      000755 90r00r23         [24] 1907 	mov	dptr,#_spi_buffer_write_i_20002_115
      000758 E9               [12] 1908 	mov	a,r1
      000759 F0               [24] 1909 	movx	@dptr,a
      00075A EA               [12] 1910 	mov	a,r2
      00075B A3               [24] 1911 	inc	dptr
      00075C F0               [24] 1912 	movx	@dptr,a
      00075D D0 07            [24] 1913 	pop	ar7
      00075F D0 06            [24] 1914 	pop	ar6
      000761 02r06rBD         [24] 1915 	ljmp	00109$
      000764                       1916 00107$:
                                   1917 ;	SPI.c:280: CS_HIGH; // Pull CS High
                                   1918 ;	assignBit
      000764 D2 91            [12] 1919 	setb	_P1_1
                                   1920 ;	SPI.c:281: }
      000766 22               [24] 1921 	ret
                                   1922 ;------------------------------------------------------------
                                   1923 ;Allocation info for local variables in function 'init_ENC'
                                   1924 ;------------------------------------------------------------
                                   1925 ;	SPI.c:283: void init_ENC(void)
                                   1926 ;	-----------------------------------------
                                   1927 ;	 function init_ENC
                                   1928 ;	-----------------------------------------
      000767                       1929 _init_ENC:
                                   1930 ;	SPI.c:285: spi_control_write(1, 0x18, 0x41);
      000767 90r00r02         [24] 1931 	mov	dptr,#_spi_control_write_PARM_2
      00076A 74 18            [12] 1932 	mov	a,#0x18
      00076C F0               [24] 1933 	movx	@dptr,a
      00076D 90r00r03         [24] 1934 	mov	dptr,#_spi_control_write_PARM_3
      000770 74 41            [12] 1935 	mov	a,#0x41
      000772 F0               [24] 1936 	movx	@dptr,a
      000773 75 82 01         [24] 1937 	mov	dpl, #0x01
      000776 12r00r3F         [24] 1938 	lcall	_spi_control_write
                                   1939 ;	SPI.c:287: enc28j60_init_rx_buffer(0x0000, 0x00FF);
      000779 90r00r00         [24] 1940 	mov	dptr,#_enc28j60_init_rx_buffer_PARM_2
      00077C 74 FF            [12] 1941 	mov	a,#0xff
      00077E F0               [24] 1942 	movx	@dptr,a
      00077F E4               [12] 1943 	clr	a
      000780 A3               [24] 1944 	inc	dptr
      000781 F0               [24] 1945 	movx	@dptr,a
      000782 90 00 00         [24] 1946 	mov	dptr,#0x0000
      000785 12r00r00         [24] 1947 	lcall	_enc28j60_init_rx_buffer
                                   1948 ;	SPI.c:289: IT0 = 1;  // Edge-triggered mode for INT0
                                   1949 ;	assignBit
      000788 D2 88            [12] 1950 	setb	_IT0
                                   1951 ;	SPI.c:290: EX0 = 1;  // Enable INT0
                                   1952 ;	assignBit
      00078A D2 A8            [12] 1953 	setb	_EX0
                                   1954 ;	SPI.c:291: EA = 1;   // Enable global interrupts
                                   1955 ;	assignBit
      00078C D2 AF            [12] 1956 	setb	_EA
                                   1957 ;	SPI.c:295: spi_control_write(0x02, 0x02, 0x70); // Write 0x30 to MACON3 (address 0x02 in bank 2)
      00078E 90r00r02         [24] 1958 	mov	dptr,#_spi_control_write_PARM_2
      000791 74 02            [12] 1959 	mov	a,#0x02
      000793 F0               [24] 1960 	movx	@dptr,a
      000794 90r00r03         [24] 1961 	mov	dptr,#_spi_control_write_PARM_3
      000797 74 70            [12] 1962 	mov	a,#0x70
      000799 F0               [24] 1963 	movx	@dptr,a
      00079A 75 82 02         [24] 1964 	mov	dpl, #0x02
      00079D 12r00r3F         [24] 1965 	lcall	_spi_control_write
                                   1966 ;	SPI.c:296: spi_control_write(0x02, 0x03, 0x40); // Write 0x40 to MACON4 (address 0x02 in bank 2) - DEFER bit
      0007A0 90r00r02         [24] 1967 	mov	dptr,#_spi_control_write_PARM_2
      0007A3 74 03            [12] 1968 	mov	a,#0x03
      0007A5 F0               [24] 1969 	movx	@dptr,a
      0007A6 90r00r03         [24] 1970 	mov	dptr,#_spi_control_write_PARM_3
      0007A9 74 40            [12] 1971 	mov	a,#0x40
      0007AB F0               [24] 1972 	movx	@dptr,a
      0007AC 75 82 02         [24] 1973 	mov	dpl, #0x02
      0007AF 12r00r3F         [24] 1974 	lcall	_spi_control_write
                                   1975 ;	SPI.c:297: spi_control_write(0x02, 0x0A, 0xEE); // Write 0xEE to MAMXFLL (low byte, address 0x0A in bank 2)
      0007B2 90r00r02         [24] 1976 	mov	dptr,#_spi_control_write_PARM_2
      0007B5 74 0A            [12] 1977 	mov	a,#0x0a
      0007B7 F0               [24] 1978 	movx	@dptr,a
      0007B8 90r00r03         [24] 1979 	mov	dptr,#_spi_control_write_PARM_3
      0007BB 74 EE            [12] 1980 	mov	a,#0xee
      0007BD F0               [24] 1981 	movx	@dptr,a
      0007BE 75 82 02         [24] 1982 	mov	dpl, #0x02
      0007C1 12r00r3F         [24] 1983 	lcall	_spi_control_write
                                   1984 ;	SPI.c:298: spi_control_write(0x02, 0x0B, 0x05); // Write 0x05 to MAMXFLH (high byte, address 0x0B in bank 2)
      0007C4 90r00r02         [24] 1985 	mov	dptr,#_spi_control_write_PARM_2
      0007C7 74 0B            [12] 1986 	mov	a,#0x0b
      0007C9 F0               [24] 1987 	movx	@dptr,a
      0007CA 90r00r03         [24] 1988 	mov	dptr,#_spi_control_write_PARM_3
      0007CD 74 05            [12] 1989 	mov	a,#0x05
      0007CF F0               [24] 1990 	movx	@dptr,a
      0007D0 75 82 02         [24] 1991 	mov	dpl, #0x02
      0007D3 12r00r3F         [24] 1992 	lcall	_spi_control_write
                                   1993 ;	SPI.c:299: spi_control_write(0x02, 0x04, 0x12); // Write 0x15 to MABBIPG (address 0x04 in bank 2)
      0007D6 90r00r02         [24] 1994 	mov	dptr,#_spi_control_write_PARM_2
      0007D9 74 04            [12] 1995 	mov	a,#0x04
      0007DB F0               [24] 1996 	movx	@dptr,a
      0007DC 90r00r03         [24] 1997 	mov	dptr,#_spi_control_write_PARM_3
      0007DF 74 12            [12] 1998 	mov	a,#0x12
      0007E1 F0               [24] 1999 	movx	@dptr,a
      0007E2 75 82 02         [24] 2000 	mov	dpl, #0x02
      0007E5 12r00r3F         [24] 2001 	lcall	_spi_control_write
                                   2002 ;	SPI.c:300: spi_control_write(0x02, 0x06, 0x12); // Write 0x12 to MAIPGL (low byte, address 0x06 in bank 2)
      0007E8 90r00r02         [24] 2003 	mov	dptr,#_spi_control_write_PARM_2
      0007EB 74 06            [12] 2004 	mov	a,#0x06
      0007ED F0               [24] 2005 	movx	@dptr,a
      0007EE 90r00r03         [24] 2006 	mov	dptr,#_spi_control_write_PARM_3
      0007F1 74 12            [12] 2007 	mov	a,#0x12
      0007F3 F0               [24] 2008 	movx	@dptr,a
      0007F4 75 82 02         [24] 2009 	mov	dpl, #0x02
      0007F7 12r00r3F         [24] 2010 	lcall	_spi_control_write
                                   2011 ;	SPI.c:301: spi_control_write(0x02, 0x07, 0x0C); // Write 0x12 to MAIPGH (low byte, address 0x06 in bank 2)
      0007FA 90r00r02         [24] 2012 	mov	dptr,#_spi_control_write_PARM_2
      0007FD 74 07            [12] 2013 	mov	a,#0x07
      0007FF F0               [24] 2014 	movx	@dptr,a
      000800 90r00r03         [24] 2015 	mov	dptr,#_spi_control_write_PARM_3
      000803 74 0C            [12] 2016 	mov	a,#0x0c
      000805 F0               [24] 2017 	movx	@dptr,a
      000806 75 82 02         [24] 2018 	mov	dpl, #0x02
      000809 12r00r3F         [24] 2019 	lcall	_spi_control_write
                                   2020 ;	SPI.c:305: spi_control_write(0, 0x1B, 0xC0);
      00080C 90r00r02         [24] 2021 	mov	dptr,#_spi_control_write_PARM_2
      00080F 74 1B            [12] 2022 	mov	a,#0x1b
      000811 F0               [24] 2023 	movx	@dptr,a
      000812 90r00r03         [24] 2024 	mov	dptr,#_spi_control_write_PARM_3
      000815 74 C0            [12] 2025 	mov	a,#0xc0
      000817 F0               [24] 2026 	movx	@dptr,a
      000818 75 82 00         [24] 2027 	mov	dpl, #0x00
                                   2028 ;	SPI.c:307: }
      00081B 02r00r3F         [24] 2029 	ljmp	_spi_control_write
                                   2030 ;------------------------------------------------------------
                                   2031 ;Allocation info for local variables in function 'init_MAC'
                                   2032 ;------------------------------------------------------------
                                   2033 ;	SPI.c:309: void init_MAC(void)
                                   2034 ;	-----------------------------------------
                                   2035 ;	 function init_MAC
                                   2036 ;	-----------------------------------------
      00081E                       2037 _init_MAC:
                                   2038 ;	SPI.c:312: }
      00081E 22               [24] 2039 	ret
                                   2040 	.area CSEG    (CODE)
                                   2041 	.area CONST   (CODE)
                                   2042 	.area CONST   (CODE)
      000000                       2043 ___str_0:
      000000 57 72 69 74 65 3A 20  2044 	.ascii "Write: Address 0x%02X, Data 0x%02X"
             41 64 64 72 65 73 73
             20 30 78 25 30 32 58
             2C 20 44 61 74 61 20
             30 78 25 30 32 58
      000022 0A                    2045 	.db 0x0a
      000023 0D                    2046 	.db 0x0d
      000024 00                    2047 	.db 0x00
                                   2048 	.area CSEG    (CODE)
                                   2049 	.area CONST   (CODE)
      000025                       2050 ___str_1:
      000025 0A                    2051 	.db 0x0a
      000026 0D                    2052 	.db 0x0d
      000027 49 6E 76 61 6C 69 64  2053 	.ascii "Invalid address: MAC register address range [0, 0x1F]"
             20 61 64 64 72 65 73
             73 3A 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 72 61 6E 67
             65 20 5B 30 2C 20 30
             78 31 46 5D
      00005C 0A                    2054 	.db 0x0a
      00005D 0D                    2055 	.db 0x0d
      00005E 00                    2056 	.db 0x00
                                   2057 	.area CSEG    (CODE)
                                   2058 	.area CONST   (CODE)
      00005F                       2059 ___str_2:
      00005F 52 65 61 64 3A 20 41  2060 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      000080 0A                    2061 	.db 0x0a
      000081 0D                    2062 	.db 0x0d
      000082 00                    2063 	.db 0x00
                                   2064 	.area CSEG    (CODE)
                                   2065 	.area CONST   (CODE)
      000083                       2066 ___str_3:
      000083 50 48 59 20 57 72 69  2067 	.ascii "PHY Write: Address 0x%02X, Data 0x%04X"
             74 65 3A 20 41 64 64
             72 65 73 73 20 30 78
             25 30 32 58 2C 20 44
             61 74 61 20 30 78 25
             30 34 58
      0000A9 0A                    2068 	.db 0x0a
      0000AA 0D                    2069 	.db 0x0d
      0000AB 00                    2070 	.db 0x00
                                   2071 	.area CSEG    (CODE)
                                   2072 	.area CONST   (CODE)
      0000AC                       2073 ___str_4:
      0000AC 52 65 61 64 3A 20 41  2074 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      0000CD 0A                    2075 	.db 0x0a
      0000CE 00                    2076 	.db 0x00
                                   2077 	.area CSEG    (CODE)
                                   2078 	.area CONST   (CODE)
      0000CF                       2079 ___str_5:
      0000CF 50 48 59 20 52 65 61  2080 	.ascii "PHY Read: Address 0x%02X, Data 0x%04X"
             64 3A 20 41 64 64 72
             65 73 73 20 30 78 25
             30 32 58 2C 20 44 61
             74 61 20 30 78 25 30
             34 58
      0000F4 0A                    2081 	.db 0x0a
      0000F5 0D                    2082 	.db 0x0d
      0000F6 00                    2083 	.db 0x00
                                   2084 	.area CSEG    (CODE)
                                   2085 	.area CONST   (CODE)
      0000F7                       2086 ___str_6:
      0000F7 0A                    2087 	.db 0x0a
      0000F8 0D                    2088 	.db 0x0d
      0000F9 49 6E 76 61 6C 69 64  2089 	.ascii "Invalid Buffer Address or Size: Start 0x%04X, Size 0x%04X"
             20 42 75 66 66 65 72
             20 41 64 64 72 65 73
             73 20 6F 72 20 53 69
             7A 65 3A 20 53 74 61
             72 74 20 30 78 25 30
             34 58 2C 20 53 69 7A
             65 20 30 78 25 30 34
             58
      000132 0A                    2090 	.db 0x0a
      000133 0D                    2091 	.db 0x0d
      000134 00                    2092 	.db 0x00
                                   2093 	.area CSEG    (CODE)
                                   2094 	.area CONST   (CODE)
      000135                       2095 ___str_7:
      000135 0A                    2096 	.db 0x0a
      000136 0D                    2097 	.db 0x0d
      000137 42 75 66 66 65 72 20  2098 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      000163 0A                    2099 	.db 0x0a
      000164 0D                    2100 	.db 0x0d
      000165 00                    2101 	.db 0x00
                                   2102 	.area CSEG    (CODE)
                                   2103 	.area CONST   (CODE)
      000166                       2104 ___str_8:
      000166 0A                    2105 	.db 0x0a
      000167 0D                    2106 	.db 0x0d
      000168 49 6E 76 61 6C 69 64  2107 	.ascii "Invalid number of bytes: %d"
             20 6E 75 6D 62 65 72
             20 6F 66 20 62 79 74
             65 73 3A 20 25 64
      000183 0A                    2108 	.db 0x0a
      000184 0D                    2109 	.db 0x0d
      000185 00                    2110 	.db 0x00
                                   2111 	.area CSEG    (CODE)
                                   2112 	.area CONST   (CODE)
      000186                       2113 ___str_9:
      000186 0A                    2114 	.db 0x0a
      000187 0D                    2115 	.db 0x0d
      000188 49 6E 76 61 6C 69 64  2116 	.ascii "Invalid address: %04X"
             20 61 64 64 72 65 73
             73 3A 20 25 30 34 58
      00019D 0A                    2117 	.db 0x0a
      00019E 0D                    2118 	.db 0x0d
      00019F 00                    2119 	.db 0x00
                                   2120 	.area CSEG    (CODE)
                                   2121 	.area CONST   (CODE)
      0001A0                       2122 ___str_10:
      0001A0 52 65 61 64 69 6E 67  2123 	.ascii "Reading %d bytes from buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 66 72 6F 6D
             20 62 75 66 66 65 72
             20 73 74 61 72 74 69
             6E 67 20 61 74 20 61
             64 64 72 65 73 73 20
             30 78 25 30 34 58 3A
      0001D8 0A                    2124 	.db 0x0a
      0001D9 0D                    2125 	.db 0x0d
      0001DA 00                    2126 	.db 0x00
                                   2127 	.area CSEG    (CODE)
                                   2128 	.area CONST   (CODE)
      0001DB                       2129 ___str_11:
      0001DB 42 79 74 65 20 25 64  2130 	.ascii "Byte %d: 0x%02X"
             3A 20 30 78 25 30 32
             58
      0001EA 0A                    2131 	.db 0x0a
      0001EB 0D                    2132 	.db 0x0d
      0001EC 00                    2133 	.db 0x00
                                   2134 	.area CSEG    (CODE)
                                   2135 	.area CONST   (CODE)
      0001ED                       2136 ___str_12:
      0001ED 57 72 69 74 69 6E 67  2137 	.ascii "Writing %d bytes to buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 74 6F 20 62
             75 66 66 65 72 20 73
             74 61 72 74 69 6E 67
             20 61 74 20 61 64 64
             72 65 73 73 20 30 78
             25 30 34 58 3A
      000223 0A                    2138 	.db 0x0a
      000224 0D                    2139 	.db 0x0d
      000225 00                    2140 	.db 0x00
                                   2141 	.area CSEG    (CODE)
                                   2142 	.area XINIT   (CODE)
                                   2143 	.area CABS    (ABS,CODE)
