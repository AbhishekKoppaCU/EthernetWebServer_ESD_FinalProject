                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module SPI
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _enc28j60_init_rx_buffer
                                     12 	.globl _printf
                                     13 	.globl _TF1
                                     14 	.globl _TR1
                                     15 	.globl _TF0
                                     16 	.globl _TR0
                                     17 	.globl _IE1
                                     18 	.globl _IT1
                                     19 	.globl _IE0
                                     20 	.globl _IT0
                                     21 	.globl _SM0
                                     22 	.globl _SM1
                                     23 	.globl _SM2
                                     24 	.globl _REN
                                     25 	.globl _TB8
                                     26 	.globl _RB8
                                     27 	.globl _TI
                                     28 	.globl _RI
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _F1
                                     36 	.globl _P
                                     37 	.globl _RD
                                     38 	.globl _WR
                                     39 	.globl _T1
                                     40 	.globl _T0
                                     41 	.globl _INT1
                                     42 	.globl _INT0
                                     43 	.globl _TXD0
                                     44 	.globl _TXD
                                     45 	.globl _RXD0
                                     46 	.globl _RXD
                                     47 	.globl _P3_7
                                     48 	.globl _P3_6
                                     49 	.globl _P3_5
                                     50 	.globl _P3_4
                                     51 	.globl _P3_3
                                     52 	.globl _P3_2
                                     53 	.globl _P3_1
                                     54 	.globl _P3_0
                                     55 	.globl _P2_7
                                     56 	.globl _P2_6
                                     57 	.globl _P2_5
                                     58 	.globl _P2_4
                                     59 	.globl _P2_3
                                     60 	.globl _P2_2
                                     61 	.globl _P2_1
                                     62 	.globl _P2_0
                                     63 	.globl _P1_7
                                     64 	.globl _P1_6
                                     65 	.globl _P1_5
                                     66 	.globl _P1_4
                                     67 	.globl _P1_3
                                     68 	.globl _P1_2
                                     69 	.globl _P1_1
                                     70 	.globl _P1_0
                                     71 	.globl _P0_7
                                     72 	.globl _P0_6
                                     73 	.globl _P0_5
                                     74 	.globl _P0_4
                                     75 	.globl _P0_3
                                     76 	.globl _P0_2
                                     77 	.globl _P0_1
                                     78 	.globl _P0_0
                                     79 	.globl _PS
                                     80 	.globl _PT1
                                     81 	.globl _PX1
                                     82 	.globl _PT0
                                     83 	.globl _PX0
                                     84 	.globl _EA
                                     85 	.globl _ES
                                     86 	.globl _ET1
                                     87 	.globl _EX1
                                     88 	.globl _ET0
                                     89 	.globl _EX0
                                     90 	.globl _BREG_F7
                                     91 	.globl _BREG_F6
                                     92 	.globl _BREG_F5
                                     93 	.globl _BREG_F4
                                     94 	.globl _BREG_F3
                                     95 	.globl _BREG_F2
                                     96 	.globl _BREG_F1
                                     97 	.globl _BREG_F0
                                     98 	.globl _P5_7
                                     99 	.globl _P5_6
                                    100 	.globl _P5_5
                                    101 	.globl _P5_4
                                    102 	.globl _P5_3
                                    103 	.globl _P5_2
                                    104 	.globl _P5_1
                                    105 	.globl _P5_0
                                    106 	.globl _P4_7
                                    107 	.globl _P4_6
                                    108 	.globl _P4_5
                                    109 	.globl _P4_4
                                    110 	.globl _P4_3
                                    111 	.globl _P4_2
                                    112 	.globl _P4_1
                                    113 	.globl _P4_0
                                    114 	.globl _PX0L
                                    115 	.globl _PT0L
                                    116 	.globl _PX1L
                                    117 	.globl _PT1L
                                    118 	.globl _PSL
                                    119 	.globl _PT2L
                                    120 	.globl _PPCL
                                    121 	.globl _EC
                                    122 	.globl _CCF0
                                    123 	.globl _CCF1
                                    124 	.globl _CCF2
                                    125 	.globl _CCF3
                                    126 	.globl _CCF4
                                    127 	.globl _CR
                                    128 	.globl _CF
                                    129 	.globl _TF2
                                    130 	.globl _EXF2
                                    131 	.globl _RCLK
                                    132 	.globl _TCLK
                                    133 	.globl _EXEN2
                                    134 	.globl _TR2
                                    135 	.globl _C_T2
                                    136 	.globl _CP_RL2
                                    137 	.globl _T2CON_7
                                    138 	.globl _T2CON_6
                                    139 	.globl _T2CON_5
                                    140 	.globl _T2CON_4
                                    141 	.globl _T2CON_3
                                    142 	.globl _T2CON_2
                                    143 	.globl _T2CON_1
                                    144 	.globl _T2CON_0
                                    145 	.globl _PT2
                                    146 	.globl _ET2
                                    147 	.globl _TMOD
                                    148 	.globl _TL1
                                    149 	.globl _TL0
                                    150 	.globl _TH1
                                    151 	.globl _TH0
                                    152 	.globl _TCON
                                    153 	.globl _SP
                                    154 	.globl _SCON
                                    155 	.globl _SBUF0
                                    156 	.globl _SBUF
                                    157 	.globl _PSW
                                    158 	.globl _PCON
                                    159 	.globl _P3
                                    160 	.globl _P2
                                    161 	.globl _P1
                                    162 	.globl _P0
                                    163 	.globl _IP
                                    164 	.globl _IE
                                    165 	.globl _DP0L
                                    166 	.globl _DPL
                                    167 	.globl _DP0H
                                    168 	.globl _DPH
                                    169 	.globl _B
                                    170 	.globl _ACC
                                    171 	.globl _EECON
                                    172 	.globl _KBF
                                    173 	.globl _KBE
                                    174 	.globl _KBLS
                                    175 	.globl _BRL
                                    176 	.globl _BDRCON
                                    177 	.globl _T2MOD
                                    178 	.globl _SPDAT
                                    179 	.globl _SPSTA
                                    180 	.globl _SPCON
                                    181 	.globl _SADEN
                                    182 	.globl _SADDR
                                    183 	.globl _WDTPRG
                                    184 	.globl _WDTRST
                                    185 	.globl _P5
                                    186 	.globl _P4
                                    187 	.globl _IPH1
                                    188 	.globl _IPL1
                                    189 	.globl _IPH0
                                    190 	.globl _IPL0
                                    191 	.globl _IEN1
                                    192 	.globl _IEN0
                                    193 	.globl _CMOD
                                    194 	.globl _CL
                                    195 	.globl _CH
                                    196 	.globl _CCON
                                    197 	.globl _CCAPM4
                                    198 	.globl _CCAPM3
                                    199 	.globl _CCAPM2
                                    200 	.globl _CCAPM1
                                    201 	.globl _CCAPM0
                                    202 	.globl _CCAP4L
                                    203 	.globl _CCAP3L
                                    204 	.globl _CCAP2L
                                    205 	.globl _CCAP1L
                                    206 	.globl _CCAP0L
                                    207 	.globl _CCAP4H
                                    208 	.globl _CCAP3H
                                    209 	.globl _CCAP2H
                                    210 	.globl _CCAP1H
                                    211 	.globl _CCAP0H
                                    212 	.globl _CKCON1
                                    213 	.globl _CKCON0
                                    214 	.globl _CKRL
                                    215 	.globl _AUXR1
                                    216 	.globl _AUXR
                                    217 	.globl _TH2
                                    218 	.globl _TL2
                                    219 	.globl _RCAP2H
                                    220 	.globl _RCAP2L
                                    221 	.globl _T2CON
                                    222 	.globl _spi_buffer_write_PARM_3
                                    223 	.globl _spi_buffer_write_PARM_2
                                    224 	.globl _spi_buffer_read_PARM_3
                                    225 	.globl _spi_buffer_read_PARM_2
                                    226 	.globl _buffer_init_PARM_2
                                    227 	.globl _mac_spi_read_PARM_2
                                    228 	.globl _phy_spi_write_PARM_2
                                    229 	.globl _eth_spi_read_PARM_2
                                    230 	.globl _spi_control_write_PARM_3
                                    231 	.globl _spi_control_write_PARM_2
                                    232 	.globl _SPI_ReadByte
                                    233 	.globl _spi_set_autoinc
                                    234 	.globl _select_reg_bank
                                    235 	.globl _spi_control_write
                                    236 	.globl _configure_SPI
                                    237 	.globl _SPI_send
                                    238 	.globl _enc_reset
                                    239 	.globl _eth_spi_read
                                    240 	.globl _phy_spi_write
                                    241 	.globl _mac_spi_read
                                    242 	.globl _phy_spi_read
                                    243 	.globl _busy_wait
                                    244 	.globl _buffer_init
                                    245 	.globl _spi_buffer_read
                                    246 	.globl _spi_buffer_write
                                    247 	.globl _init_ENC
                                    248 	.globl _init_MAC
                                    249 ;--------------------------------------------------------
                                    250 ; special function registers
                                    251 ;--------------------------------------------------------
                                    252 	.area RSEG    (ABS,DATA)
      000000                        253 	.org 0x0000
                           0000C8   254 _T2CON	=	0x00c8
                           0000CA   255 _RCAP2L	=	0x00ca
                           0000CB   256 _RCAP2H	=	0x00cb
                           0000CC   257 _TL2	=	0x00cc
                           0000CD   258 _TH2	=	0x00cd
                           00008E   259 _AUXR	=	0x008e
                           0000A2   260 _AUXR1	=	0x00a2
                           000097   261 _CKRL	=	0x0097
                           00008F   262 _CKCON0	=	0x008f
                           0000AF   263 _CKCON1	=	0x00af
                           0000FA   264 _CCAP0H	=	0x00fa
                           0000FB   265 _CCAP1H	=	0x00fb
                           0000FC   266 _CCAP2H	=	0x00fc
                           0000FD   267 _CCAP3H	=	0x00fd
                           0000FE   268 _CCAP4H	=	0x00fe
                           0000EA   269 _CCAP0L	=	0x00ea
                           0000EB   270 _CCAP1L	=	0x00eb
                           0000EC   271 _CCAP2L	=	0x00ec
                           0000ED   272 _CCAP3L	=	0x00ed
                           0000EE   273 _CCAP4L	=	0x00ee
                           0000DA   274 _CCAPM0	=	0x00da
                           0000DB   275 _CCAPM1	=	0x00db
                           0000DC   276 _CCAPM2	=	0x00dc
                           0000DD   277 _CCAPM3	=	0x00dd
                           0000DE   278 _CCAPM4	=	0x00de
                           0000D8   279 _CCON	=	0x00d8
                           0000F9   280 _CH	=	0x00f9
                           0000E9   281 _CL	=	0x00e9
                           0000D9   282 _CMOD	=	0x00d9
                           0000A8   283 _IEN0	=	0x00a8
                           0000B1   284 _IEN1	=	0x00b1
                           0000B8   285 _IPL0	=	0x00b8
                           0000B7   286 _IPH0	=	0x00b7
                           0000B2   287 _IPL1	=	0x00b2
                           0000B3   288 _IPH1	=	0x00b3
                           0000C0   289 _P4	=	0x00c0
                           0000E8   290 _P5	=	0x00e8
                           0000A6   291 _WDTRST	=	0x00a6
                           0000A7   292 _WDTPRG	=	0x00a7
                           0000A9   293 _SADDR	=	0x00a9
                           0000B9   294 _SADEN	=	0x00b9
                           0000C3   295 _SPCON	=	0x00c3
                           0000C4   296 _SPSTA	=	0x00c4
                           0000C5   297 _SPDAT	=	0x00c5
                           0000C9   298 _T2MOD	=	0x00c9
                           00009B   299 _BDRCON	=	0x009b
                           00009A   300 _BRL	=	0x009a
                           00009C   301 _KBLS	=	0x009c
                           00009D   302 _KBE	=	0x009d
                           00009E   303 _KBF	=	0x009e
                           0000D2   304 _EECON	=	0x00d2
                           0000E0   305 _ACC	=	0x00e0
                           0000F0   306 _B	=	0x00f0
                           000083   307 _DPH	=	0x0083
                           000083   308 _DP0H	=	0x0083
                           000082   309 _DPL	=	0x0082
                           000082   310 _DP0L	=	0x0082
                           0000A8   311 _IE	=	0x00a8
                           0000B8   312 _IP	=	0x00b8
                           000080   313 _P0	=	0x0080
                           000090   314 _P1	=	0x0090
                           0000A0   315 _P2	=	0x00a0
                           0000B0   316 _P3	=	0x00b0
                           000087   317 _PCON	=	0x0087
                           0000D0   318 _PSW	=	0x00d0
                           000099   319 _SBUF	=	0x0099
                           000099   320 _SBUF0	=	0x0099
                           000098   321 _SCON	=	0x0098
                           000081   322 _SP	=	0x0081
                           000088   323 _TCON	=	0x0088
                           00008C   324 _TH0	=	0x008c
                           00008D   325 _TH1	=	0x008d
                           00008A   326 _TL0	=	0x008a
                           00008B   327 _TL1	=	0x008b
                           000089   328 _TMOD	=	0x0089
                                    329 ;--------------------------------------------------------
                                    330 ; special function bits
                                    331 ;--------------------------------------------------------
                                    332 	.area RSEG    (ABS,DATA)
      000000                        333 	.org 0x0000
                           0000AD   334 _ET2	=	0x00ad
                           0000BD   335 _PT2	=	0x00bd
                           0000C8   336 _T2CON_0	=	0x00c8
                           0000C9   337 _T2CON_1	=	0x00c9
                           0000CA   338 _T2CON_2	=	0x00ca
                           0000CB   339 _T2CON_3	=	0x00cb
                           0000CC   340 _T2CON_4	=	0x00cc
                           0000CD   341 _T2CON_5	=	0x00cd
                           0000CE   342 _T2CON_6	=	0x00ce
                           0000CF   343 _T2CON_7	=	0x00cf
                           0000C8   344 _CP_RL2	=	0x00c8
                           0000C9   345 _C_T2	=	0x00c9
                           0000CA   346 _TR2	=	0x00ca
                           0000CB   347 _EXEN2	=	0x00cb
                           0000CC   348 _TCLK	=	0x00cc
                           0000CD   349 _RCLK	=	0x00cd
                           0000CE   350 _EXF2	=	0x00ce
                           0000CF   351 _TF2	=	0x00cf
                           0000DF   352 _CF	=	0x00df
                           0000DE   353 _CR	=	0x00de
                           0000DC   354 _CCF4	=	0x00dc
                           0000DB   355 _CCF3	=	0x00db
                           0000DA   356 _CCF2	=	0x00da
                           0000D9   357 _CCF1	=	0x00d9
                           0000D8   358 _CCF0	=	0x00d8
                           0000AE   359 _EC	=	0x00ae
                           0000BE   360 _PPCL	=	0x00be
                           0000BD   361 _PT2L	=	0x00bd
                           0000BC   362 _PSL	=	0x00bc
                           0000BB   363 _PT1L	=	0x00bb
                           0000BA   364 _PX1L	=	0x00ba
                           0000B9   365 _PT0L	=	0x00b9
                           0000B8   366 _PX0L	=	0x00b8
                           0000C0   367 _P4_0	=	0x00c0
                           0000C1   368 _P4_1	=	0x00c1
                           0000C2   369 _P4_2	=	0x00c2
                           0000C3   370 _P4_3	=	0x00c3
                           0000C4   371 _P4_4	=	0x00c4
                           0000C5   372 _P4_5	=	0x00c5
                           0000C6   373 _P4_6	=	0x00c6
                           0000C7   374 _P4_7	=	0x00c7
                           0000E8   375 _P5_0	=	0x00e8
                           0000E9   376 _P5_1	=	0x00e9
                           0000EA   377 _P5_2	=	0x00ea
                           0000EB   378 _P5_3	=	0x00eb
                           0000EC   379 _P5_4	=	0x00ec
                           0000ED   380 _P5_5	=	0x00ed
                           0000EE   381 _P5_6	=	0x00ee
                           0000EF   382 _P5_7	=	0x00ef
                           0000F0   383 _BREG_F0	=	0x00f0
                           0000F1   384 _BREG_F1	=	0x00f1
                           0000F2   385 _BREG_F2	=	0x00f2
                           0000F3   386 _BREG_F3	=	0x00f3
                           0000F4   387 _BREG_F4	=	0x00f4
                           0000F5   388 _BREG_F5	=	0x00f5
                           0000F6   389 _BREG_F6	=	0x00f6
                           0000F7   390 _BREG_F7	=	0x00f7
                           0000A8   391 _EX0	=	0x00a8
                           0000A9   392 _ET0	=	0x00a9
                           0000AA   393 _EX1	=	0x00aa
                           0000AB   394 _ET1	=	0x00ab
                           0000AC   395 _ES	=	0x00ac
                           0000AF   396 _EA	=	0x00af
                           0000B8   397 _PX0	=	0x00b8
                           0000B9   398 _PT0	=	0x00b9
                           0000BA   399 _PX1	=	0x00ba
                           0000BB   400 _PT1	=	0x00bb
                           0000BC   401 _PS	=	0x00bc
                           000080   402 _P0_0	=	0x0080
                           000081   403 _P0_1	=	0x0081
                           000082   404 _P0_2	=	0x0082
                           000083   405 _P0_3	=	0x0083
                           000084   406 _P0_4	=	0x0084
                           000085   407 _P0_5	=	0x0085
                           000086   408 _P0_6	=	0x0086
                           000087   409 _P0_7	=	0x0087
                           000090   410 _P1_0	=	0x0090
                           000091   411 _P1_1	=	0x0091
                           000092   412 _P1_2	=	0x0092
                           000093   413 _P1_3	=	0x0093
                           000094   414 _P1_4	=	0x0094
                           000095   415 _P1_5	=	0x0095
                           000096   416 _P1_6	=	0x0096
                           000097   417 _P1_7	=	0x0097
                           0000A0   418 _P2_0	=	0x00a0
                           0000A1   419 _P2_1	=	0x00a1
                           0000A2   420 _P2_2	=	0x00a2
                           0000A3   421 _P2_3	=	0x00a3
                           0000A4   422 _P2_4	=	0x00a4
                           0000A5   423 _P2_5	=	0x00a5
                           0000A6   424 _P2_6	=	0x00a6
                           0000A7   425 _P2_7	=	0x00a7
                           0000B0   426 _P3_0	=	0x00b0
                           0000B1   427 _P3_1	=	0x00b1
                           0000B2   428 _P3_2	=	0x00b2
                           0000B3   429 _P3_3	=	0x00b3
                           0000B4   430 _P3_4	=	0x00b4
                           0000B5   431 _P3_5	=	0x00b5
                           0000B6   432 _P3_6	=	0x00b6
                           0000B7   433 _P3_7	=	0x00b7
                           0000B0   434 _RXD	=	0x00b0
                           0000B0   435 _RXD0	=	0x00b0
                           0000B1   436 _TXD	=	0x00b1
                           0000B1   437 _TXD0	=	0x00b1
                           0000B2   438 _INT0	=	0x00b2
                           0000B3   439 _INT1	=	0x00b3
                           0000B4   440 _T0	=	0x00b4
                           0000B5   441 _T1	=	0x00b5
                           0000B6   442 _WR	=	0x00b6
                           0000B7   443 _RD	=	0x00b7
                           0000D0   444 _P	=	0x00d0
                           0000D1   445 _F1	=	0x00d1
                           0000D2   446 _OV	=	0x00d2
                           0000D3   447 _RS0	=	0x00d3
                           0000D4   448 _RS1	=	0x00d4
                           0000D5   449 _F0	=	0x00d5
                           0000D6   450 _AC	=	0x00d6
                           0000D7   451 _CY	=	0x00d7
                           000098   452 _RI	=	0x0098
                           000099   453 _TI	=	0x0099
                           00009A   454 _RB8	=	0x009a
                           00009B   455 _TB8	=	0x009b
                           00009C   456 _REN	=	0x009c
                           00009D   457 _SM2	=	0x009d
                           00009E   458 _SM1	=	0x009e
                           00009F   459 _SM0	=	0x009f
                           000088   460 _IT0	=	0x0088
                           000089   461 _IE0	=	0x0089
                           00008A   462 _IT1	=	0x008a
                           00008B   463 _IE1	=	0x008b
                           00008C   464 _TR0	=	0x008c
                           00008D   465 _TF0	=	0x008d
                           00008E   466 _TR1	=	0x008e
                           00008F   467 _TF1	=	0x008f
                                    468 ;--------------------------------------------------------
                                    469 ; overlayable register banks
                                    470 ;--------------------------------------------------------
                                    471 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        472 	.ds 8
                                    473 ;--------------------------------------------------------
                                    474 ; internal ram data
                                    475 ;--------------------------------------------------------
                                    476 	.area DSEG    (DATA)
                                    477 ;--------------------------------------------------------
                                    478 ; overlayable items in internal ram
                                    479 ;--------------------------------------------------------
                                    480 ;--------------------------------------------------------
                                    481 ; indirectly addressable internal ram data
                                    482 ;--------------------------------------------------------
                                    483 	.area ISEG    (DATA)
                                    484 ;--------------------------------------------------------
                                    485 ; absolute internal ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area IABS    (ABS,DATA)
                                    488 	.area IABS    (ABS,DATA)
                                    489 ;--------------------------------------------------------
                                    490 ; bit data
                                    491 ;--------------------------------------------------------
                                    492 	.area BSEG    (BIT)
                                    493 ;--------------------------------------------------------
                                    494 ; paged external ram data
                                    495 ;--------------------------------------------------------
                                    496 	.area PSEG    (PAG,XDATA)
                                    497 ;--------------------------------------------------------
                                    498 ; uninitialized external ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area XSEG    (XDATA)
      000000                        501 _SPI_ReadByte_received_data_10000_64:
      000000                        502 	.ds 1
      000001                        503 _select_reg_bank_bank_10000_68:
      000001                        504 	.ds 1
      000002                        505 _spi_control_write_PARM_2:
      000002                        506 	.ds 1
      000003                        507 _spi_control_write_PARM_3:
      000003                        508 	.ds 1
      000004                        509 _spi_control_write_reg_bank_10000_70:
      000004                        510 	.ds 1
      000005                        511 _SPI_send_data_10000_74:
      000005                        512 	.ds 1
      000006                        513 _eth_spi_read_PARM_2:
      000006                        514 	.ds 1
      000007                        515 _eth_spi_read_addr_10000_79:
      000007                        516 	.ds 1
      000008                        517 _phy_spi_write_PARM_2:
      000008                        518 	.ds 2
      00000A                        519 _phy_spi_write_addr_10000_83:
      00000A                        520 	.ds 1
      00000B                        521 _mac_spi_read_PARM_2:
      00000B                        522 	.ds 1
      00000C                        523 _mac_spi_read_addr_10000_85:
      00000C                        524 	.ds 1
      00000D                        525 _phy_spi_read_addr_10000_89:
      00000D                        526 	.ds 1
      00000E                        527 _busy_wait_data_10000_93:
      00000E                        528 	.ds 1
      00000F                        529 _buffer_init_PARM_2:
      00000F                        530 	.ds 2
      000011                        531 _buffer_init_start_address_10000_95:
      000011                        532 	.ds 2
      000013                        533 _spi_buffer_read_PARM_2:
      000013                        534 	.ds 2
      000015                        535 _spi_buffer_read_PARM_3:
      000015                        536 	.ds 3
      000018                        537 _spi_buffer_read_num_bytes_10000_99:
      000018                        538 	.ds 2
      00001A                        539 _spi_buffer_read_i_20002_106:
      00001A                        540 	.ds 2
      00001C                        541 _spi_buffer_write_PARM_2:
      00001C                        542 	.ds 2
      00001E                        543 _spi_buffer_write_PARM_3:
      00001E                        544 	.ds 3
      000021                        545 _spi_buffer_write_num_bytes_10000_108:
      000021                        546 	.ds 2
      000023                        547 _spi_buffer_write_i_20002_115:
      000023                        548 	.ds 2
                                    549 ;--------------------------------------------------------
                                    550 ; absolute external ram data
                                    551 ;--------------------------------------------------------
                                    552 	.area XABS    (ABS,XDATA)
                                    553 ;--------------------------------------------------------
                                    554 ; initialized external ram data
                                    555 ;--------------------------------------------------------
                                    556 	.area XISEG   (XDATA)
                                    557 	.area HOME    (CODE)
                                    558 	.area GSINIT0 (CODE)
                                    559 	.area GSINIT1 (CODE)
                                    560 	.area GSINIT2 (CODE)
                                    561 	.area GSINIT3 (CODE)
                                    562 	.area GSINIT4 (CODE)
                                    563 	.area GSINIT5 (CODE)
                                    564 	.area GSINIT  (CODE)
                                    565 	.area GSFINAL (CODE)
                                    566 	.area CSEG    (CODE)
                                    567 ;--------------------------------------------------------
                                    568 ; global & static initialisations
                                    569 ;--------------------------------------------------------
                                    570 	.area HOME    (CODE)
                                    571 	.area GSINIT  (CODE)
                                    572 	.area GSFINAL (CODE)
                                    573 	.area GSINIT  (CODE)
                                    574 ;--------------------------------------------------------
                                    575 ; Home
                                    576 ;--------------------------------------------------------
                                    577 	.area HOME    (CODE)
                                    578 	.area HOME    (CODE)
                                    579 ;--------------------------------------------------------
                                    580 ; code
                                    581 ;--------------------------------------------------------
                                    582 	.area CSEG    (CODE)
                                    583 ;------------------------------------------------------------
                                    584 ;Allocation info for local variables in function 'SPI_ReadByte'
                                    585 ;------------------------------------------------------------
                                    586 ;received_data             Allocated with name '_SPI_ReadByte_received_data_10000_64'
                                    587 ;------------------------------------------------------------
                                    588 ;	SPI.c:4: uint8_t SPI_ReadByte(void)
                                    589 ;	-----------------------------------------
                                    590 ;	 function SPI_ReadByte
                                    591 ;	-----------------------------------------
      000000                        592 _SPI_ReadByte:
                           000007   593 	ar7 = 0x07
                           000006   594 	ar6 = 0x06
                           000005   595 	ar5 = 0x05
                           000004   596 	ar4 = 0x04
                           000003   597 	ar3 = 0x03
                           000002   598 	ar2 = 0x02
                           000001   599 	ar1 = 0x01
                           000000   600 	ar0 = 0x00
                                    601 ;	SPI.c:9: SPDAT = 0xFF;
      000000 75 C5 FF         [24]  602 	mov	_SPDAT,#0xff
                                    603 ;	SPI.c:12: while (!(SPSTA & 0x80)) {
      000003                        604 00101$:
      000003 E5 C4            [12]  605 	mov	a,_SPSTA
      000005 30 E7 FB         [24]  606 	jnb	acc.7,00101$
                                    607 ;	SPI.c:17: received_data = SPDAT;
      000008 90r00r00         [24]  608 	mov	dptr,#_SPI_ReadByte_received_data_10000_64
      00000B E5 C5            [12]  609 	mov	a,_SPDAT
      00000D F0               [24]  610 	movx	@dptr,a
                                    611 ;	SPI.c:19: return received_data;
      00000E E0               [24]  612 	movx	a,@dptr
                                    613 ;	SPI.c:20: }
      00000F F5 82            [12]  614 	mov	dpl,a
      000011 22               [24]  615 	ret
                                    616 ;------------------------------------------------------------
                                    617 ;Allocation info for local variables in function 'spi_set_autoinc'
                                    618 ;------------------------------------------------------------
                                    619 ;	SPI.c:22: void spi_set_autoinc(void)
                                    620 ;	-----------------------------------------
                                    621 ;	 function spi_set_autoinc
                                    622 ;	-----------------------------------------
      000012                        623 _spi_set_autoinc:
                                    624 ;	SPI.c:24: CS_LOW;                          // Pull CS low to select the ENC28J60
                                    625 ;	assignBit
      000012 C2 91            [12]  626 	clr	_P1_1
                                    627 ;	SPI.c:26: SPI_send(0x5E);                  // Write ECON2 register address
      000014 75 82 5E         [24]  628 	mov	dpl, #0x5e
      000017 12r00rA8         [24]  629 	lcall	_SPI_send
                                    630 ;	SPI.c:27: SPI_send(0x80);                  // Set the AUTOINC bit
      00001A 75 82 80         [24]  631 	mov	dpl, #0x80
      00001D 12r00rA8         [24]  632 	lcall	_SPI_send
                                    633 ;	SPI.c:29: CS_HIGH;                         // Pull CS high to deselect the ENC28J60
                                    634 ;	assignBit
      000020 D2 91            [12]  635 	setb	_P1_1
                                    636 ;	SPI.c:30: }
      000022 22               [24]  637 	ret
                                    638 ;------------------------------------------------------------
                                    639 ;Allocation info for local variables in function 'select_reg_bank'
                                    640 ;------------------------------------------------------------
                                    641 ;bank                      Allocated with name '_select_reg_bank_bank_10000_68'
                                    642 ;------------------------------------------------------------
                                    643 ;	SPI.c:32: void select_reg_bank(uint8_t bank)
                                    644 ;	-----------------------------------------
                                    645 ;	 function select_reg_bank
                                    646 ;	-----------------------------------------
      000023                        647 _select_reg_bank:
      000023 E5 82            [12]  648 	mov	a,dpl
      000025 90r00r01         [24]  649 	mov	dptr,#_select_reg_bank_bank_10000_68
      000028 F0               [24]  650 	movx	@dptr,a
                                    651 ;	SPI.c:35: CS_LOW;
                                    652 ;	assignBit
      000029 C2 91            [12]  653 	clr	_P1_1
                                    654 ;	SPI.c:38: SPI_send(0x5F);
      00002B 75 82 5F         [24]  655 	mov	dpl, #0x5f
      00002E 12r00rA8         [24]  656 	lcall	_SPI_send
                                    657 ;	SPI.c:41: SPI_send(bank);
      000031 90r00r01         [24]  658 	mov	dptr,#_select_reg_bank_bank_10000_68
      000034 E0               [24]  659 	movx	a,@dptr
      000035 F5 82            [12]  660 	mov	dpl,a
      000037 12r00rA8         [24]  661 	lcall	_SPI_send
                                    662 ;	SPI.c:44: CS_HIGH;
                                    663 ;	assignBit
      00003A D2 91            [12]  664 	setb	_P1_1
                                    665 ;	SPI.c:45: }
      00003C 22               [24]  666 	ret
                                    667 ;------------------------------------------------------------
                                    668 ;Allocation info for local variables in function 'spi_control_write'
                                    669 ;------------------------------------------------------------
                                    670 ;addr                      Allocated with name '_spi_control_write_PARM_2'
                                    671 ;data                      Allocated with name '_spi_control_write_PARM_3'
                                    672 ;reg_bank                  Allocated with name '_spi_control_write_reg_bank_10000_70'
                                    673 ;opcode                    Allocated with name '_spi_control_write_opcode_10000_71'
                                    674 ;------------------------------------------------------------
                                    675 ;	SPI.c:46: void spi_control_write(uint8_t reg_bank, uint8_t addr, uint8_t data)
                                    676 ;	-----------------------------------------
                                    677 ;	 function spi_control_write
                                    678 ;	-----------------------------------------
      00003D                        679 _spi_control_write:
      00003D E5 82            [12]  680 	mov	a,dpl
      00003F 90r00r04         [24]  681 	mov	dptr,#_spi_control_write_reg_bank_10000_70
      000042 F0               [24]  682 	movx	@dptr,a
                                    683 ;	SPI.c:49: addr = addr + opcode; // Add the opcode to the address
      000043 90r00r02         [24]  684 	mov	dptr,#_spi_control_write_PARM_2
      000046 E0               [24]  685 	movx	a,@dptr
      000047 24 40            [12]  686 	add	a, #0x40
      000049 F0               [24]  687 	movx	@dptr,a
                                    688 ;	SPI.c:51: select_reg_bank(reg_bank); // Function to select the register bank
      00004A 90r00r04         [24]  689 	mov	dptr,#_spi_control_write_reg_bank_10000_70
      00004D E0               [24]  690 	movx	a,@dptr
      00004E F5 82            [12]  691 	mov	dpl,a
      000050 12r00r23         [24]  692 	lcall	_select_reg_bank
                                    693 ;	SPI.c:54: CS_LOW;
                                    694 ;	assignBit
      000053 C2 91            [12]  695 	clr	_P1_1
                                    696 ;	SPI.c:57: SPI_send(addr);
      000055 90r00r02         [24]  697 	mov	dptr,#_spi_control_write_PARM_2
      000058 E0               [24]  698 	movx	a,@dptr
      000059 FF               [12]  699 	mov	r7,a
      00005A F5 82            [12]  700 	mov	dpl,a
      00005C C0 07            [24]  701 	push	ar7
      00005E 12r00rA8         [24]  702 	lcall	_SPI_send
      000061 D0 07            [24]  703 	pop	ar7
                                    704 ;	SPI.c:60: SPI_send(data);
      000063 90r00r03         [24]  705 	mov	dptr,#_spi_control_write_PARM_3
      000066 E0               [24]  706 	movx	a,@dptr
      000067 FE               [12]  707 	mov	r6,a
      000068 F5 82            [12]  708 	mov	dpl,a
      00006A C0 07            [24]  709 	push	ar7
      00006C C0 06            [24]  710 	push	ar6
      00006E 12r00rA8         [24]  711 	lcall	_SPI_send
      000071 D0 06            [24]  712 	pop	ar6
      000073 D0 07            [24]  713 	pop	ar7
                                    714 ;	SPI.c:63: CS_HIGH;
                                    715 ;	assignBit
      000075 D2 91            [12]  716 	setb	_P1_1
                                    717 ;	SPI.c:66: printf("Write: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      000077 7D 00            [12]  718 	mov	r5,#0x00
      000079 7C 00            [12]  719 	mov	r4,#0x00
      00007B C0 06            [24]  720 	push	ar6
      00007D C0 05            [24]  721 	push	ar5
      00007F C0 07            [24]  722 	push	ar7
      000081 C0 04            [24]  723 	push	ar4
      000083 74r00            [12]  724 	mov	a,#___str_0
      000085 C0 E0            [24]  725 	push	acc
      000087 74s00            [12]  726 	mov	a,#(___str_0 >> 8)
      000089 C0 E0            [24]  727 	push	acc
      00008B 74 80            [12]  728 	mov	a,#0x80
      00008D C0 E0            [24]  729 	push	acc
      00008F 12r00r00         [24]  730 	lcall	_printf
      000092 E5 81            [12]  731 	mov	a,sp
      000094 24 F9            [12]  732 	add	a,#0xf9
      000096 F5 81            [12]  733 	mov	sp,a
                                    734 ;	SPI.c:67: }
      000098 22               [24]  735 	ret
                                    736 ;------------------------------------------------------------
                                    737 ;Allocation info for local variables in function 'configure_SPI'
                                    738 ;------------------------------------------------------------
                                    739 ;	SPI.c:70: void configure_SPI(void)
                                    740 ;	-----------------------------------------
                                    741 ;	 function configure_SPI
                                    742 ;	-----------------------------------------
      000099                        743 _configure_SPI:
                                    744 ;	SPI.c:72: CS_PIN = 1;
                                    745 ;	assignBit
      000099 D2 91            [12]  746 	setb	_P1_1
                                    747 ;	SPI.c:73: SPCON = 0x00;
      00009B 75 C3 00         [24]  748 	mov	_SPCON,#0x00
                                    749 ;	SPI.c:74: SPCON |= SS_DISABLE;
      00009E 43 C3 20         [24]  750 	orl	_SPCON,#0x20
                                    751 ;	SPI.c:75: SPCON |= MASTER_MODE;
      0000A1 43 C3 10         [24]  752 	orl	_SPCON,#0x10
                                    753 ;	SPI.c:76: SPCON |= SPI_ENABLE;
      0000A4 43 C3 40         [24]  754 	orl	_SPCON,#0x40
                                    755 ;	SPI.c:77: }
      0000A7 22               [24]  756 	ret
                                    757 ;------------------------------------------------------------
                                    758 ;Allocation info for local variables in function 'SPI_send'
                                    759 ;------------------------------------------------------------
                                    760 ;data                      Allocated with name '_SPI_send_data_10000_74'
                                    761 ;------------------------------------------------------------
                                    762 ;	SPI.c:80: void SPI_send(uint8_t data)
                                    763 ;	-----------------------------------------
                                    764 ;	 function SPI_send
                                    765 ;	-----------------------------------------
      0000A8                        766 _SPI_send:
      0000A8 E5 82            [12]  767 	mov	a,dpl
      0000AA 90r00r05         [24]  768 	mov	dptr,#_SPI_send_data_10000_74
      0000AD F0               [24]  769 	movx	@dptr,a
                                    770 ;	SPI.c:83: SPDAT = data;           // Config + MSB of data
      0000AE E0               [24]  771 	movx	a,@dptr
      0000AF F5 C5            [12]  772 	mov	_SPDAT,a
                                    773 ;	SPI.c:85: while (!(SPSTA & 0x80))
      0000B1                        774 00101$:
      0000B1 E5 C4            [12]  775 	mov	a,_SPSTA
      0000B3 30 E7 FB         [24]  776 	jnb	acc.7,00101$
                                    777 ;	SPI.c:90: }
      0000B6 22               [24]  778 	ret
                                    779 ;------------------------------------------------------------
                                    780 ;Allocation info for local variables in function 'enc_reset'
                                    781 ;------------------------------------------------------------
                                    782 ;	SPI.c:92: void enc_reset(void)
                                    783 ;	-----------------------------------------
                                    784 ;	 function enc_reset
                                    785 ;	-----------------------------------------
      0000B7                        786 _enc_reset:
                                    787 ;	SPI.c:94: CS_LOW;                    // Pull CS low to select the ENC28J60
                                    788 ;	assignBit
      0000B7 C2 91            [12]  789 	clr	_P1_1
                                    790 ;	SPI.c:95: SPI_send(0xFF);            // Send reset command
      0000B9 75 82 FF         [24]  791 	mov	dpl, #0xff
      0000BC 12r00rA8         [24]  792 	lcall	_SPI_send
                                    793 ;	SPI.c:96: CS_HIGH;                   // Pull CS high to deselect the ENC28J60
                                    794 ;	assignBit
      0000BF D2 91            [12]  795 	setb	_P1_1
                                    796 ;	SPI.c:97: }
      0000C1 22               [24]  797 	ret
                                    798 ;------------------------------------------------------------
                                    799 ;Allocation info for local variables in function 'eth_spi_read'
                                    800 ;------------------------------------------------------------
                                    801 ;bank                      Allocated with name '_eth_spi_read_PARM_2'
                                    802 ;addr                      Allocated with name '_eth_spi_read_addr_10000_79'
                                    803 ;data                      Allocated with name '_eth_spi_read_data_10001_82'
                                    804 ;------------------------------------------------------------
                                    805 ;	SPI.c:99: uint8_t eth_spi_read(uint8_t addr, uint8_t bank)
                                    806 ;	-----------------------------------------
                                    807 ;	 function eth_spi_read
                                    808 ;	-----------------------------------------
      0000C2                        809 _eth_spi_read:
      0000C2 E5 82            [12]  810 	mov	a,dpl
      0000C4 90r00r07         [24]  811 	mov	dptr,#_eth_spi_read_addr_10000_79
      0000C7 F0               [24]  812 	movx	@dptr,a
                                    813 ;	SPI.c:101: if (addr > 0x1F) {
      0000C8 E0               [24]  814 	movx	a,@dptr
      0000C9 FF               [12]  815 	mov  r7,a
      0000CA 24 E0            [12]  816 	add	a,#0xff - 0x1f
      0000CC 50 19            [24]  817 	jnc	00102$
                                    818 ;	SPI.c:102: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      0000CE 74r25            [12]  819 	mov	a,#___str_1
      0000D0 C0 E0            [24]  820 	push	acc
      0000D2 74s00            [12]  821 	mov	a,#(___str_1 >> 8)
      0000D4 C0 E0            [24]  822 	push	acc
      0000D6 74 80            [12]  823 	mov	a,#0x80
      0000D8 C0 E0            [24]  824 	push	acc
      0000DA 12r00r00         [24]  825 	lcall	_printf
      0000DD 15 81            [12]  826 	dec	sp
      0000DF 15 81            [12]  827 	dec	sp
      0000E1 15 81            [12]  828 	dec	sp
                                    829 ;	SPI.c:103: return 0;
      0000E3 75 82 00         [24]  830 	mov	dpl, #0x00
      0000E6 22               [24]  831 	ret
      0000E7                        832 00102$:
                                    833 ;	SPI.c:106: select_reg_bank(bank);     // Select the appropriate bank
      0000E7 90r00r06         [24]  834 	mov	dptr,#_eth_spi_read_PARM_2
      0000EA E0               [24]  835 	movx	a,@dptr
      0000EB F5 82            [12]  836 	mov	dpl,a
      0000ED C0 07            [24]  837 	push	ar7
      0000EF 12r00r23         [24]  838 	lcall	_select_reg_bank
      0000F2 D0 07            [24]  839 	pop	ar7
                                    840 ;	SPI.c:108: CS_LOW;                    // Pull CS low to start communication
                                    841 ;	assignBit
      0000F4 C2 91            [12]  842 	clr	_P1_1
                                    843 ;	SPI.c:109: SPI_send(addr);            // Send the address
      0000F6 8F 82            [24]  844 	mov	dpl, r7
      0000F8 C0 07            [24]  845 	push	ar7
      0000FA 12r00rA8         [24]  846 	lcall	_SPI_send
                                    847 ;	SPI.c:110: uint8_t data = SPI_ReadByte(); // Read the data
      0000FD 12r00r00         [24]  848 	lcall	_SPI_ReadByte
      000100 AE 82            [24]  849 	mov	r6, dpl
      000102 D0 07            [24]  850 	pop	ar7
                                    851 ;	SPI.c:111: CS_HIGH;                   // Pull CS high to end communication
                                    852 ;	assignBit
      000104 D2 91            [12]  853 	setb	_P1_1
                                    854 ;	SPI.c:114: printf("Read: Address 0x%02X, Data 0x%02X\n\r", addr, data);
      000106 8E 04            [24]  855 	mov	ar4,r6
      000108 7D 00            [12]  856 	mov	r5,#0x00
      00010A 7B 00            [12]  857 	mov	r3,#0x00
      00010C C0 06            [24]  858 	push	ar6
      00010E C0 04            [24]  859 	push	ar4
      000110 C0 05            [24]  860 	push	ar5
      000112 C0 07            [24]  861 	push	ar7
      000114 C0 03            [24]  862 	push	ar3
      000116 74r5F            [12]  863 	mov	a,#___str_2
      000118 C0 E0            [24]  864 	push	acc
      00011A 74s00            [12]  865 	mov	a,#(___str_2 >> 8)
      00011C C0 E0            [24]  866 	push	acc
      00011E 74 80            [12]  867 	mov	a,#0x80
      000120 C0 E0            [24]  868 	push	acc
      000122 12r00r00         [24]  869 	lcall	_printf
      000125 E5 81            [12]  870 	mov	a,sp
      000127 24 F9            [12]  871 	add	a,#0xf9
      000129 F5 81            [12]  872 	mov	sp,a
      00012B D0 06            [24]  873 	pop	ar6
                                    874 ;	SPI.c:116: return data;
      00012D 8E 82            [24]  875 	mov	dpl, r6
                                    876 ;	SPI.c:117: }
      00012F 22               [24]  877 	ret
                                    878 ;------------------------------------------------------------
                                    879 ;Allocation info for local variables in function 'phy_spi_write'
                                    880 ;------------------------------------------------------------
                                    881 ;data                      Allocated with name '_phy_spi_write_PARM_2'
                                    882 ;addr                      Allocated with name '_phy_spi_write_addr_10000_83'
                                    883 ;------------------------------------------------------------
                                    884 ;	SPI.c:119: void phy_spi_write(uint8_t addr, uint16_t data)
                                    885 ;	-----------------------------------------
                                    886 ;	 function phy_spi_write
                                    887 ;	-----------------------------------------
      000130                        888 _phy_spi_write:
      000130 E5 82            [12]  889 	mov	a,dpl
      000132 90r00r0A         [24]  890 	mov	dptr,#_phy_spi_write_addr_10000_83
      000135 F0               [24]  891 	movx	@dptr,a
                                    892 ;	SPI.c:121: spi_control_write(2, 0x14, addr);                      // Write PHY address
      000136 E0               [24]  893 	movx	a,@dptr
      000137 FF               [12]  894 	mov	r7,a
      000138 90r00r02         [24]  895 	mov	dptr,#_spi_control_write_PARM_2
      00013B 74 14            [12]  896 	mov	a,#0x14
      00013D F0               [24]  897 	movx	@dptr,a
      00013E 90r00r03         [24]  898 	mov	dptr,#_spi_control_write_PARM_3
      000141 EF               [12]  899 	mov	a,r7
      000142 F0               [24]  900 	movx	@dptr,a
      000143 75 82 02         [24]  901 	mov	dpl, #0x02
      000146 C0 07            [24]  902 	push	ar7
      000148 12r00r3D         [24]  903 	lcall	_spi_control_write
      00014B D0 07            [24]  904 	pop	ar7
                                    905 ;	SPI.c:122: spi_control_write(2, 0x16, (uint8_t)(data & 0xFF));    // Write LSB of data
      00014D 90r00r08         [24]  906 	mov	dptr,#_phy_spi_write_PARM_2
      000150 E0               [24]  907 	movx	a,@dptr
      000151 FD               [12]  908 	mov	r5,a
      000152 A3               [24]  909 	inc	dptr
      000153 E0               [24]  910 	movx	a,@dptr
      000154 FE               [12]  911 	mov	r6,a
      000155 8D 04            [24]  912 	mov	ar4,r5
      000157 90r00r02         [24]  913 	mov	dptr,#_spi_control_write_PARM_2
      00015A 74 16            [12]  914 	mov	a,#0x16
      00015C F0               [24]  915 	movx	@dptr,a
      00015D 90r00r03         [24]  916 	mov	dptr,#_spi_control_write_PARM_3
      000160 EC               [12]  917 	mov	a,r4
      000161 F0               [24]  918 	movx	@dptr,a
      000162 75 82 02         [24]  919 	mov	dpl, #0x02
      000165 C0 07            [24]  920 	push	ar7
      000167 C0 06            [24]  921 	push	ar6
      000169 C0 05            [24]  922 	push	ar5
      00016B 12r00r3D         [24]  923 	lcall	_spi_control_write
      00016E D0 05            [24]  924 	pop	ar5
      000170 D0 06            [24]  925 	pop	ar6
      000172 D0 07            [24]  926 	pop	ar7
                                    927 ;	SPI.c:123: spi_control_write(2, 0x17, (uint8_t)((data >> 8) & 0xFF)); // Write MSB of data
      000174 8E 04            [24]  928 	mov	ar4,r6
      000176 90r00r02         [24]  929 	mov	dptr,#_spi_control_write_PARM_2
      000179 74 17            [12]  930 	mov	a,#0x17
      00017B F0               [24]  931 	movx	@dptr,a
      00017C 90r00r03         [24]  932 	mov	dptr,#_spi_control_write_PARM_3
      00017F EC               [12]  933 	mov	a,r4
      000180 F0               [24]  934 	movx	@dptr,a
      000181 75 82 02         [24]  935 	mov	dpl, #0x02
      000184 C0 07            [24]  936 	push	ar7
      000186 C0 06            [24]  937 	push	ar6
      000188 C0 05            [24]  938 	push	ar5
      00018A 12r00r3D         [24]  939 	lcall	_spi_control_write
      00018D D0 05            [24]  940 	pop	ar5
      00018F D0 06            [24]  941 	pop	ar6
      000191 D0 07            [24]  942 	pop	ar7
                                    943 ;	SPI.c:126: printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      000193 7C 00            [12]  944 	mov	r4,#0x00
      000195 C0 05            [24]  945 	push	ar5
      000197 C0 06            [24]  946 	push	ar6
      000199 C0 07            [24]  947 	push	ar7
      00019B C0 04            [24]  948 	push	ar4
      00019D 74r83            [12]  949 	mov	a,#___str_3
      00019F C0 E0            [24]  950 	push	acc
      0001A1 74s00            [12]  951 	mov	a,#(___str_3 >> 8)
      0001A3 C0 E0            [24]  952 	push	acc
      0001A5 74 80            [12]  953 	mov	a,#0x80
      0001A7 C0 E0            [24]  954 	push	acc
      0001A9 12r00r00         [24]  955 	lcall	_printf
      0001AC E5 81            [12]  956 	mov	a,sp
      0001AE 24 F9            [12]  957 	add	a,#0xf9
      0001B0 F5 81            [12]  958 	mov	sp,a
                                    959 ;	SPI.c:127: }
      0001B2 22               [24]  960 	ret
                                    961 ;------------------------------------------------------------
                                    962 ;Allocation info for local variables in function 'mac_spi_read'
                                    963 ;------------------------------------------------------------
                                    964 ;bank                      Allocated with name '_mac_spi_read_PARM_2'
                                    965 ;addr                      Allocated with name '_mac_spi_read_addr_10000_85'
                                    966 ;data                      Allocated with name '_mac_spi_read_data_10001_88'
                                    967 ;------------------------------------------------------------
                                    968 ;	SPI.c:129: uint8_t mac_spi_read(uint8_t addr, uint8_t bank)
                                    969 ;	-----------------------------------------
                                    970 ;	 function mac_spi_read
                                    971 ;	-----------------------------------------
      0001B3                        972 _mac_spi_read:
      0001B3 E5 82            [12]  973 	mov	a,dpl
      0001B5 90r00r0C         [24]  974 	mov	dptr,#_mac_spi_read_addr_10000_85
      0001B8 F0               [24]  975 	movx	@dptr,a
                                    976 ;	SPI.c:131: if (addr > 0x1F) {
      0001B9 E0               [24]  977 	movx	a,@dptr
      0001BA FF               [12]  978 	mov  r7,a
      0001BB 24 E0            [12]  979 	add	a,#0xff - 0x1f
      0001BD 50 19            [24]  980 	jnc	00102$
                                    981 ;	SPI.c:132: printf("\n\rInvalid address: MAC register address range [0, 0x1F]\n\r");
      0001BF 74r25            [12]  982 	mov	a,#___str_1
      0001C1 C0 E0            [24]  983 	push	acc
      0001C3 74s00            [12]  984 	mov	a,#(___str_1 >> 8)
      0001C5 C0 E0            [24]  985 	push	acc
      0001C7 74 80            [12]  986 	mov	a,#0x80
      0001C9 C0 E0            [24]  987 	push	acc
      0001CB 12r00r00         [24]  988 	lcall	_printf
      0001CE 15 81            [12]  989 	dec	sp
      0001D0 15 81            [12]  990 	dec	sp
      0001D2 15 81            [12]  991 	dec	sp
                                    992 ;	SPI.c:133: return 0; // Return 0 if address is invalid
      0001D4 75 82 00         [24]  993 	mov	dpl, #0x00
      0001D7 22               [24]  994 	ret
      0001D8                        995 00102$:
                                    996 ;	SPI.c:136: select_reg_bank(bank); // Select the appropriate register bank
      0001D8 90r00r0B         [24]  997 	mov	dptr,#_mac_spi_read_PARM_2
      0001DB E0               [24]  998 	movx	a,@dptr
      0001DC F5 82            [12]  999 	mov	dpl,a
      0001DE C0 07            [24] 1000 	push	ar7
      0001E0 12r00r23         [24] 1001 	lcall	_select_reg_bank
      0001E3 D0 07            [24] 1002 	pop	ar7
                                   1003 ;	SPI.c:139: CS_LOW;
                                   1004 ;	assignBit
      0001E5 C2 91            [12] 1005 	clr	_P1_1
                                   1006 ;	SPI.c:142: SPI_send(addr);
      0001E7 8F 82            [24] 1007 	mov	dpl, r7
      0001E9 C0 07            [24] 1008 	push	ar7
      0001EB 12r00rA8         [24] 1009 	lcall	_SPI_send
                                   1010 ;	SPI.c:145: uint8_t data = SPI_ReadByte();
      0001EE 12r00r00         [24] 1011 	lcall	_SPI_ReadByte
      0001F1 AE 82            [24] 1012 	mov	r6, dpl
      0001F3 D0 07            [24] 1013 	pop	ar7
                                   1014 ;	SPI.c:148: CS_HIGH;
                                   1015 ;	assignBit
      0001F5 D2 91            [12] 1016 	setb	_P1_1
                                   1017 ;	SPI.c:151: printf("Read: Address 0x%02X, Data 0x%02X\n", addr, data);
      0001F7 8E 04            [24] 1018 	mov	ar4,r6
      0001F9 7D 00            [12] 1019 	mov	r5,#0x00
      0001FB 7B 00            [12] 1020 	mov	r3,#0x00
      0001FD C0 06            [24] 1021 	push	ar6
      0001FF C0 04            [24] 1022 	push	ar4
      000201 C0 05            [24] 1023 	push	ar5
      000203 C0 07            [24] 1024 	push	ar7
      000205 C0 03            [24] 1025 	push	ar3
      000207 74rAC            [12] 1026 	mov	a,#___str_4
      000209 C0 E0            [24] 1027 	push	acc
      00020B 74s00            [12] 1028 	mov	a,#(___str_4 >> 8)
      00020D C0 E0            [24] 1029 	push	acc
      00020F 74 80            [12] 1030 	mov	a,#0x80
      000211 C0 E0            [24] 1031 	push	acc
      000213 12r00r00         [24] 1032 	lcall	_printf
      000216 E5 81            [12] 1033 	mov	a,sp
      000218 24 F9            [12] 1034 	add	a,#0xf9
      00021A F5 81            [12] 1035 	mov	sp,a
      00021C D0 06            [24] 1036 	pop	ar6
                                   1037 ;	SPI.c:153: return data;
      00021E 8E 82            [24] 1038 	mov	dpl, r6
                                   1039 ;	SPI.c:154: }
      000220 22               [24] 1040 	ret
                                   1041 ;------------------------------------------------------------
                                   1042 ;Allocation info for local variables in function 'phy_spi_read'
                                   1043 ;------------------------------------------------------------
                                   1044 ;addr                      Allocated with name '_phy_spi_read_addr_10000_89'
                                   1045 ;data_LSB                  Allocated with name '_phy_spi_read_data_LSB_10001_91'
                                   1046 ;data_MSB                  Allocated with name '_phy_spi_read_data_MSB_10001_91'
                                   1047 ;data                      Allocated with name '_phy_spi_read_data_10001_91'
                                   1048 ;------------------------------------------------------------
                                   1049 ;	SPI.c:157: uint16_t phy_spi_read(uint8_t addr)
                                   1050 ;	-----------------------------------------
                                   1051 ;	 function phy_spi_read
                                   1052 ;	-----------------------------------------
      000221                       1053 _phy_spi_read:
      000221 E5 82            [12] 1054 	mov	a,dpl
      000223 90r00r0D         [24] 1055 	mov	dptr,#_phy_spi_read_addr_10000_89
      000226 F0               [24] 1056 	movx	@dptr,a
                                   1057 ;	SPI.c:159: spi_control_write(2, 0x14, addr);     // Write PHY address
      000227 E0               [24] 1058 	movx	a,@dptr
      000228 FF               [12] 1059 	mov	r7,a
      000229 90r00r02         [24] 1060 	mov	dptr,#_spi_control_write_PARM_2
      00022C 74 14            [12] 1061 	mov	a,#0x14
      00022E F0               [24] 1062 	movx	@dptr,a
      00022F 90r00r03         [24] 1063 	mov	dptr,#_spi_control_write_PARM_3
      000232 EF               [12] 1064 	mov	a,r7
      000233 F0               [24] 1065 	movx	@dptr,a
      000234 75 82 02         [24] 1066 	mov	dpl, #0x02
      000237 C0 07            [24] 1067 	push	ar7
      000239 12r00r3D         [24] 1068 	lcall	_spi_control_write
      00023C D0 07            [24] 1069 	pop	ar7
                                   1070 ;	SPI.c:160: spi_control_write(2, 0x12, 1);        // Set MICMD.MIIRD bit
      00023E 90r00r02         [24] 1071 	mov	dptr,#_spi_control_write_PARM_2
      000241 74 12            [12] 1072 	mov	a,#0x12
      000243 F0               [24] 1073 	movx	@dptr,a
      000244 90r00r03         [24] 1074 	mov	dptr,#_spi_control_write_PARM_3
      000247 74 01            [12] 1075 	mov	a,#0x01
      000249 F0               [24] 1076 	movx	@dptr,a
      00024A 75 82 02         [24] 1077 	mov	dpl, #0x02
      00024D C0 07            [24] 1078 	push	ar7
      00024F 12r00r3D         [24] 1079 	lcall	_spi_control_write
                                   1080 ;	SPI.c:162: busy_wait();                          // Wait for the read to complete
      000252 12r02rCE         [24] 1081 	lcall	_busy_wait
      000255 D0 07            [24] 1082 	pop	ar7
                                   1083 ;	SPI.c:164: spi_control_write(2, 0x12, 0);        // Clear MICMD.MIIRD bit
      000257 90r00r02         [24] 1084 	mov	dptr,#_spi_control_write_PARM_2
      00025A 74 12            [12] 1085 	mov	a,#0x12
      00025C F0               [24] 1086 	movx	@dptr,a
      00025D 90r00r03         [24] 1087 	mov	dptr,#_spi_control_write_PARM_3
      000260 E4               [12] 1088 	clr	a
      000261 F0               [24] 1089 	movx	@dptr,a
      000262 75 82 02         [24] 1090 	mov	dpl, #0x02
      000265 C0 07            [24] 1091 	push	ar7
      000267 12r00r3D         [24] 1092 	lcall	_spi_control_write
      00026A D0 07            [24] 1093 	pop	ar7
                                   1094 ;	SPI.c:166: uint16_t data_LSB = mac_spi_read(0x18, 2); // Read LSB of data
      00026C 90r00r0B         [24] 1095 	mov	dptr,#_mac_spi_read_PARM_2
      00026F 74 02            [12] 1096 	mov	a,#0x02
      000271 F0               [24] 1097 	movx	@dptr,a
      000272 75 82 18         [24] 1098 	mov	dpl, #0x18
      000275 C0 07            [24] 1099 	push	ar7
      000277 12r01rB3         [24] 1100 	lcall	_mac_spi_read
      00027A AE 82            [24] 1101 	mov	r6, dpl
      00027C D0 07            [24] 1102 	pop	ar7
      00027E 7D 00            [12] 1103 	mov	r5,#0x00
                                   1104 ;	SPI.c:167: uint16_t data_MSB = mac_spi_read(0x19, 2); // Read MSB of data
      000280 90r00r0B         [24] 1105 	mov	dptr,#_mac_spi_read_PARM_2
      000283 74 02            [12] 1106 	mov	a,#0x02
      000285 F0               [24] 1107 	movx	@dptr,a
      000286 75 82 19         [24] 1108 	mov	dpl, #0x19
      000289 C0 07            [24] 1109 	push	ar7
      00028B C0 06            [24] 1110 	push	ar6
      00028D C0 05            [24] 1111 	push	ar5
      00028F 12r01rB3         [24] 1112 	lcall	_mac_spi_read
      000292 AC 82            [24] 1113 	mov	r4, dpl
      000294 D0 05            [24] 1114 	pop	ar5
      000296 D0 06            [24] 1115 	pop	ar6
      000298 D0 07            [24] 1116 	pop	ar7
                                   1117 ;	SPI.c:169: uint16_t data = (data_MSB << 8) | data_LSB;        // Combine MSB and LSB
      00029A 8C 03            [24] 1118 	mov	ar3,r4
      00029C E4               [12] 1119 	clr	a
      00029D 42 06            [12] 1120 	orl	ar6,a
      00029F EB               [12] 1121 	mov	a,r3
      0002A0 42 05            [12] 1122 	orl	ar5,a
                                   1123 ;	SPI.c:172: printf("PHY Read: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      0002A2 7C 00            [12] 1124 	mov	r4,#0x00
      0002A4 C0 06            [24] 1125 	push	ar6
      0002A6 C0 05            [24] 1126 	push	ar5
      0002A8 C0 06            [24] 1127 	push	ar6
      0002AA C0 05            [24] 1128 	push	ar5
      0002AC C0 07            [24] 1129 	push	ar7
      0002AE C0 04            [24] 1130 	push	ar4
      0002B0 74rCF            [12] 1131 	mov	a,#___str_5
      0002B2 C0 E0            [24] 1132 	push	acc
      0002B4 74s00            [12] 1133 	mov	a,#(___str_5 >> 8)
      0002B6 C0 E0            [24] 1134 	push	acc
      0002B8 74 80            [12] 1135 	mov	a,#0x80
      0002BA C0 E0            [24] 1136 	push	acc
      0002BC 12r00r00         [24] 1137 	lcall	_printf
      0002BF E5 81            [12] 1138 	mov	a,sp
      0002C1 24 F9            [12] 1139 	add	a,#0xf9
      0002C3 F5 81            [12] 1140 	mov	sp,a
      0002C5 D0 05            [24] 1141 	pop	ar5
      0002C7 D0 06            [24] 1142 	pop	ar6
                                   1143 ;	SPI.c:174: return data;        // Combine MSB and LSB
      0002C9 8E 82            [24] 1144 	mov	dpl, r6
      0002CB 8D 83            [24] 1145 	mov	dph, r5
                                   1146 ;	SPI.c:175: }
      0002CD 22               [24] 1147 	ret
                                   1148 ;------------------------------------------------------------
                                   1149 ;Allocation info for local variables in function 'busy_wait'
                                   1150 ;------------------------------------------------------------
                                   1151 ;data                      Allocated with name '_busy_wait_data_10000_93'
                                   1152 ;------------------------------------------------------------
                                   1153 ;	SPI.c:177: void busy_wait(void)
                                   1154 ;	-----------------------------------------
                                   1155 ;	 function busy_wait
                                   1156 ;	-----------------------------------------
      0002CE                       1157 _busy_wait:
                                   1158 ;	SPI.c:179: uint8_t data = mac_spi_read(0x0A, 3); // Read ESTAT register (bank 3)
      0002CE 90r00r0B         [24] 1159 	mov	dptr,#_mac_spi_read_PARM_2
      0002D1 74 03            [12] 1160 	mov	a,#0x03
      0002D3 F0               [24] 1161 	movx	@dptr,a
      0002D4 75 82 0A         [24] 1162 	mov	dpl, #0x0a
      0002D7 12r01rB3         [24] 1163 	lcall	_mac_spi_read
      0002DA E5 82            [12] 1164 	mov	a, dpl
      0002DC 90r00r0E         [24] 1165 	mov	dptr,#_busy_wait_data_10000_93
      0002DF F0               [24] 1166 	movx	@dptr,a
                                   1167 ;	SPI.c:180: while (data & 0x01)
      0002E0                       1168 00101$:
      0002E0 90r00r0E         [24] 1169 	mov	dptr,#_busy_wait_data_10000_93
      0002E3 E0               [24] 1170 	movx	a,@dptr
      0002E4 30 E0 14         [24] 1171 	jnb	acc.0,00104$
                                   1172 ;	SPI.c:182: data = mac_spi_read(0x0A, 3);
      0002E7 90r00r0B         [24] 1173 	mov	dptr,#_mac_spi_read_PARM_2
      0002EA 74 03            [12] 1174 	mov	a,#0x03
      0002EC F0               [24] 1175 	movx	@dptr,a
      0002ED 75 82 0A         [24] 1176 	mov	dpl, #0x0a
      0002F0 12r01rB3         [24] 1177 	lcall	_mac_spi_read
      0002F3 E5 82            [12] 1178 	mov	a, dpl
      0002F5 90r00r0E         [24] 1179 	mov	dptr,#_busy_wait_data_10000_93
      0002F8 F0               [24] 1180 	movx	@dptr,a
      0002F9 80 E5            [24] 1181 	sjmp	00101$
      0002FB                       1182 00104$:
                                   1183 ;	SPI.c:184: }
      0002FB 22               [24] 1184 	ret
                                   1185 ;------------------------------------------------------------
                                   1186 ;Allocation info for local variables in function 'buffer_init'
                                   1187 ;------------------------------------------------------------
                                   1188 ;size                      Allocated with name '_buffer_init_PARM_2'
                                   1189 ;start_address             Allocated with name '_buffer_init_start_address_10000_95'
                                   1190 ;erxst                     Allocated with name '_buffer_init_erxst_10001_98'
                                   1191 ;erxnd                     Allocated with name '_buffer_init_erxnd_10001_98'
                                   1192 ;------------------------------------------------------------
                                   1193 ;	SPI.c:186: void buffer_init(uint16_t start_address, uint16_t size)
                                   1194 ;	-----------------------------------------
                                   1195 ;	 function buffer_init
                                   1196 ;	-----------------------------------------
      0002FC                       1197 _buffer_init:
      0002FC AF 83            [24] 1198 	mov	r7,dph
      0002FE E5 82            [12] 1199 	mov	a,dpl
      000300 90r00r11         [24] 1200 	mov	dptr,#_buffer_init_start_address_10000_95
      000303 F0               [24] 1201 	movx	@dptr,a
      000304 EF               [12] 1202 	mov	a,r7
      000305 A3               [24] 1203 	inc	dptr
      000306 F0               [24] 1204 	movx	@dptr,a
                                   1205 ;	SPI.c:188: if (start_address > 0x1FFF || (start_address + size) > 0x1FFF) {
      000307 90r00r11         [24] 1206 	mov	dptr,#_buffer_init_start_address_10000_95
      00030A E0               [24] 1207 	movx	a,@dptr
      00030B FE               [12] 1208 	mov	r6,a
      00030C A3               [24] 1209 	inc	dptr
      00030D E0               [24] 1210 	movx	a,@dptr
      00030E FF               [12] 1211 	mov	r7,a
      00030F 8E 04            [24] 1212 	mov	ar4,r6
      000311 8F 05            [24] 1213 	mov	ar5,r7
      000313 C3               [12] 1214 	clr	c
      000314 74 FF            [12] 1215 	mov	a,#0xff
      000316 9C               [12] 1216 	subb	a,r4
      000317 74 1F            [12] 1217 	mov	a,#0x1f
      000319 9D               [12] 1218 	subb	a,r5
      00031A 40 17            [24] 1219 	jc	00101$
      00031C 90r00r0F         [24] 1220 	mov	dptr,#_buffer_init_PARM_2
      00031F E0               [24] 1221 	movx	a,@dptr
      000320 FA               [12] 1222 	mov	r2,a
      000321 A3               [24] 1223 	inc	dptr
      000322 E0               [24] 1224 	movx	a,@dptr
      000323 FB               [12] 1225 	mov	r3,a
      000324 EA               [12] 1226 	mov	a,r2
      000325 2E               [12] 1227 	add	a, r6
      000326 F8               [12] 1228 	mov	r0,a
      000327 EB               [12] 1229 	mov	a,r3
      000328 3F               [12] 1230 	addc	a, r7
      000329 F9               [12] 1231 	mov	r1,a
      00032A C3               [12] 1232 	clr	c
      00032B 74 FF            [12] 1233 	mov	a,#0xff
      00032D 98               [12] 1234 	subb	a,r0
      00032E 74 1F            [12] 1235 	mov	a,#0x1f
      000330 99               [12] 1236 	subb	a,r1
      000331 50 2A            [24] 1237 	jnc	00102$
      000333                       1238 00101$:
                                   1239 ;	SPI.c:189: printf("\n\rInvalid Buffer Address or Size: Start 0x%04X, Size 0x%04X\n\r", start_address, size);
      000333 90r00r0F         [24] 1240 	mov	dptr,#_buffer_init_PARM_2
      000336 E0               [24] 1241 	movx	a,@dptr
      000337 C0 E0            [24] 1242 	push	acc
      000339 A3               [24] 1243 	inc	dptr
      00033A E0               [24] 1244 	movx	a,@dptr
      00033B C0 E0            [24] 1245 	push	acc
      00033D 90r00r11         [24] 1246 	mov	dptr,#_buffer_init_start_address_10000_95
      000340 E0               [24] 1247 	movx	a,@dptr
      000341 C0 E0            [24] 1248 	push	acc
      000343 A3               [24] 1249 	inc	dptr
      000344 E0               [24] 1250 	movx	a,@dptr
      000345 C0 E0            [24] 1251 	push	acc
      000347 74rF7            [12] 1252 	mov	a,#___str_6
      000349 C0 E0            [24] 1253 	push	acc
      00034B 74s00            [12] 1254 	mov	a,#(___str_6 >> 8)
      00034D C0 E0            [24] 1255 	push	acc
      00034F 74 80            [12] 1256 	mov	a,#0x80
      000351 C0 E0            [24] 1257 	push	acc
      000353 12r00r00         [24] 1258 	lcall	_printf
      000356 E5 81            [12] 1259 	mov	a,sp
      000358 24 F9            [12] 1260 	add	a,#0xf9
      00035A F5 81            [12] 1261 	mov	sp,a
                                   1262 ;	SPI.c:190: return;
      00035C 22               [24] 1263 	ret
      00035D                       1264 00102$:
                                   1265 ;	SPI.c:194: uint16_t erxst = start_address & ~1; // Make sure ERXST is even
      00035D 53 04 FE         [24] 1266 	anl	ar4,#0xfe
                                   1267 ;	SPI.c:195: uint16_t erxnd = (start_address + size - 1) & ~1; // Make sure ERXND is even
      000360 EA               [12] 1268 	mov	a,r2
      000361 2E               [12] 1269 	add	a, r6
      000362 FE               [12] 1270 	mov	r6,a
      000363 EB               [12] 1271 	mov	a,r3
      000364 3F               [12] 1272 	addc	a, r7
      000365 FF               [12] 1273 	mov	r7,a
      000366 1E               [12] 1274 	dec	r6
      000367 BE FF 01         [24] 1275 	cjne	r6,#0xff,00114$
      00036A 1F               [12] 1276 	dec	r7
      00036B                       1277 00114$:
      00036B 53 06 FE         [24] 1278 	anl	ar6,#0xfe
                                   1279 ;	SPI.c:198: spi_control_write(0, 0x08, (uint8_t)(erxst >> 8)); // High byte of ERXST
      00036E 8D 03            [24] 1280 	mov	ar3,r5
      000370 90r00r02         [24] 1281 	mov	dptr,#_spi_control_write_PARM_2
      000373 74 08            [12] 1282 	mov	a,#0x08
      000375 F0               [24] 1283 	movx	@dptr,a
      000376 90r00r03         [24] 1284 	mov	dptr,#_spi_control_write_PARM_3
      000379 EB               [12] 1285 	mov	a,r3
      00037A F0               [24] 1286 	movx	@dptr,a
      00037B 75 82 00         [24] 1287 	mov	dpl, #0x00
      00037E C0 07            [24] 1288 	push	ar7
      000380 C0 06            [24] 1289 	push	ar6
      000382 C0 05            [24] 1290 	push	ar5
      000384 C0 04            [24] 1291 	push	ar4
      000386 12r00r3D         [24] 1292 	lcall	_spi_control_write
      000389 D0 04            [24] 1293 	pop	ar4
      00038B D0 05            [24] 1294 	pop	ar5
      00038D D0 06            [24] 1295 	pop	ar6
      00038F D0 07            [24] 1296 	pop	ar7
                                   1297 ;	SPI.c:199: spi_control_write(0, 0x09, (uint8_t)(erxst & 0xFF)); // Low byte of ERXST
      000391 8C 03            [24] 1298 	mov	ar3,r4
      000393 90r00r02         [24] 1299 	mov	dptr,#_spi_control_write_PARM_2
      000396 74 09            [12] 1300 	mov	a,#0x09
      000398 F0               [24] 1301 	movx	@dptr,a
      000399 90r00r03         [24] 1302 	mov	dptr,#_spi_control_write_PARM_3
      00039C EB               [12] 1303 	mov	a,r3
      00039D F0               [24] 1304 	movx	@dptr,a
      00039E 75 82 00         [24] 1305 	mov	dpl, #0x00
      0003A1 C0 07            [24] 1306 	push	ar7
      0003A3 C0 06            [24] 1307 	push	ar6
      0003A5 C0 05            [24] 1308 	push	ar5
      0003A7 C0 04            [24] 1309 	push	ar4
      0003A9 12r00r3D         [24] 1310 	lcall	_spi_control_write
      0003AC D0 04            [24] 1311 	pop	ar4
      0003AE D0 05            [24] 1312 	pop	ar5
      0003B0 D0 06            [24] 1313 	pop	ar6
      0003B2 D0 07            [24] 1314 	pop	ar7
                                   1315 ;	SPI.c:202: spi_control_write(0, 0x0A, (uint8_t)(erxnd >> 8)); // High byte of ERXND
      0003B4 8F 03            [24] 1316 	mov	ar3,r7
      0003B6 90r00r02         [24] 1317 	mov	dptr,#_spi_control_write_PARM_2
      0003B9 74 0A            [12] 1318 	mov	a,#0x0a
      0003BB F0               [24] 1319 	movx	@dptr,a
      0003BC 90r00r03         [24] 1320 	mov	dptr,#_spi_control_write_PARM_3
      0003BF EB               [12] 1321 	mov	a,r3
      0003C0 F0               [24] 1322 	movx	@dptr,a
      0003C1 75 82 00         [24] 1323 	mov	dpl, #0x00
      0003C4 C0 07            [24] 1324 	push	ar7
      0003C6 C0 06            [24] 1325 	push	ar6
      0003C8 C0 05            [24] 1326 	push	ar5
      0003CA C0 04            [24] 1327 	push	ar4
      0003CC 12r00r3D         [24] 1328 	lcall	_spi_control_write
      0003CF D0 04            [24] 1329 	pop	ar4
      0003D1 D0 05            [24] 1330 	pop	ar5
      0003D3 D0 06            [24] 1331 	pop	ar6
      0003D5 D0 07            [24] 1332 	pop	ar7
                                   1333 ;	SPI.c:203: spi_control_write(0, 0x0B, (uint8_t)(erxnd & 0xFF)); // Low byte of ERXND
      0003D7 8E 03            [24] 1334 	mov	ar3,r6
      0003D9 90r00r02         [24] 1335 	mov	dptr,#_spi_control_write_PARM_2
      0003DC 74 0B            [12] 1336 	mov	a,#0x0b
      0003DE F0               [24] 1337 	movx	@dptr,a
      0003DF 90r00r03         [24] 1338 	mov	dptr,#_spi_control_write_PARM_3
      0003E2 EB               [12] 1339 	mov	a,r3
      0003E3 F0               [24] 1340 	movx	@dptr,a
      0003E4 75 82 00         [24] 1341 	mov	dpl, #0x00
      0003E7 C0 07            [24] 1342 	push	ar7
      0003E9 C0 06            [24] 1343 	push	ar6
      0003EB C0 05            [24] 1344 	push	ar5
      0003ED C0 04            [24] 1345 	push	ar4
      0003EF 12r00r3D         [24] 1346 	lcall	_spi_control_write
      0003F2 D0 04            [24] 1347 	pop	ar4
      0003F4 D0 05            [24] 1348 	pop	ar5
      0003F6 D0 06            [24] 1349 	pop	ar6
      0003F8 D0 07            [24] 1350 	pop	ar7
                                   1351 ;	SPI.c:205: printf("\n\rBuffer Initialized: Start 0x%04X, End 0x%04X\n\r", erxst, erxnd);
      0003FA C0 06            [24] 1352 	push	ar6
      0003FC C0 07            [24] 1353 	push	ar7
      0003FE C0 04            [24] 1354 	push	ar4
      000400 C0 05            [24] 1355 	push	ar5
      000402 74r35            [12] 1356 	mov	a,#___str_7
      000404 C0 E0            [24] 1357 	push	acc
      000406 74s01            [12] 1358 	mov	a,#(___str_7 >> 8)
      000408 C0 E0            [24] 1359 	push	acc
      00040A 74 80            [12] 1360 	mov	a,#0x80
      00040C C0 E0            [24] 1361 	push	acc
      00040E 12r00r00         [24] 1362 	lcall	_printf
      000411 E5 81            [12] 1363 	mov	a,sp
      000413 24 F9            [12] 1364 	add	a,#0xf9
      000415 F5 81            [12] 1365 	mov	sp,a
                                   1366 ;	SPI.c:206: }
      000417 22               [24] 1367 	ret
                                   1368 ;------------------------------------------------------------
                                   1369 ;Allocation info for local variables in function 'spi_buffer_read'
                                   1370 ;------------------------------------------------------------
                                   1371 ;start_address             Allocated with name '_spi_buffer_read_PARM_2'
                                   1372 ;data_ptr                  Allocated with name '_spi_buffer_read_PARM_3'
                                   1373 ;num_bytes                 Allocated with name '_spi_buffer_read_num_bytes_10000_99'
                                   1374 ;higher_byte               Allocated with name '_spi_buffer_read_higher_byte_10001_104'
                                   1375 ;lower_byte                Allocated with name '_spi_buffer_read_lower_byte_10001_104'
                                   1376 ;opcode                    Allocated with name '_spi_buffer_read_opcode_10002_105'
                                   1377 ;i                         Allocated with name '_spi_buffer_read_i_20002_106'
                                   1378 ;------------------------------------------------------------
                                   1379 ;	SPI.c:209: void spi_buffer_read(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1380 ;	-----------------------------------------
                                   1381 ;	 function spi_buffer_read
                                   1382 ;	-----------------------------------------
      000418                       1383 _spi_buffer_read:
      000418 AF 83            [24] 1384 	mov	r7,dph
      00041A E5 82            [12] 1385 	mov	a,dpl
      00041C 90r00r18         [24] 1386 	mov	dptr,#_spi_buffer_read_num_bytes_10000_99
      00041F F0               [24] 1387 	movx	@dptr,a
      000420 EF               [12] 1388 	mov	a,r7
      000421 A3               [24] 1389 	inc	dptr
      000422 F0               [24] 1390 	movx	@dptr,a
                                   1391 ;	SPI.c:211: if (num_bytes < 1) {
      000423 90r00r18         [24] 1392 	mov	dptr,#_spi_buffer_read_num_bytes_10000_99
      000426 E0               [24] 1393 	movx	a,@dptr
      000427 FE               [12] 1394 	mov	r6,a
      000428 A3               [24] 1395 	inc	dptr
      000429 E0               [24] 1396 	movx	a,@dptr
      00042A FF               [12] 1397 	mov	r7,a
      00042B C3               [12] 1398 	clr	c
      00042C EE               [12] 1399 	mov	a,r6
      00042D 94 01            [12] 1400 	subb	a,#0x01
      00042F EF               [12] 1401 	mov	a,r7
      000430 64 80            [12] 1402 	xrl	a,#0x80
      000432 94 80            [12] 1403 	subb	a,#0x80
      000434 50 1A            [24] 1404 	jnc	00102$
                                   1405 ;	SPI.c:212: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      000436 C0 06            [24] 1406 	push	ar6
      000438 C0 07            [24] 1407 	push	ar7
      00043A 74r66            [12] 1408 	mov	a,#___str_8
      00043C C0 E0            [24] 1409 	push	acc
      00043E 74s01            [12] 1410 	mov	a,#(___str_8 >> 8)
      000440 C0 E0            [24] 1411 	push	acc
      000442 74 80            [12] 1412 	mov	a,#0x80
      000444 C0 E0            [24] 1413 	push	acc
      000446 12r00r00         [24] 1414 	lcall	_printf
      000449 E5 81            [12] 1415 	mov	a,sp
      00044B 24 FB            [12] 1416 	add	a,#0xfb
      00044D F5 81            [12] 1417 	mov	sp,a
                                   1418 ;	SPI.c:213: return;
      00044F 22               [24] 1419 	ret
      000450                       1420 00102$:
                                   1421 ;	SPI.c:215: if (start_address > 0x1FFF) {
      000450 90r00r13         [24] 1422 	mov	dptr,#_spi_buffer_read_PARM_2
      000453 E0               [24] 1423 	movx	a,@dptr
      000454 FC               [12] 1424 	mov	r4,a
      000455 A3               [24] 1425 	inc	dptr
      000456 E0               [24] 1426 	movx	a,@dptr
      000457 FD               [12] 1427 	mov	r5,a
      000458 8C 02            [24] 1428 	mov	ar2,r4
      00045A 8D 03            [24] 1429 	mov	ar3,r5
      00045C C3               [12] 1430 	clr	c
      00045D 74 FF            [12] 1431 	mov	a,#0xff
      00045F 9A               [12] 1432 	subb	a,r2
      000460 74 1F            [12] 1433 	mov	a,#0x1f
      000462 9B               [12] 1434 	subb	a,r3
      000463 50 1A            [24] 1435 	jnc	00104$
                                   1436 ;	SPI.c:216: printf("\n\rInvalid address: %04X\n\r", start_address);
      000465 C0 04            [24] 1437 	push	ar4
      000467 C0 05            [24] 1438 	push	ar5
      000469 74r86            [12] 1439 	mov	a,#___str_9
      00046B C0 E0            [24] 1440 	push	acc
      00046D 74s01            [12] 1441 	mov	a,#(___str_9 >> 8)
      00046F C0 E0            [24] 1442 	push	acc
      000471 74 80            [12] 1443 	mov	a,#0x80
      000473 C0 E0            [24] 1444 	push	acc
      000475 12r00r00         [24] 1445 	lcall	_printf
      000478 E5 81            [12] 1446 	mov	a,sp
      00047A 24 FB            [12] 1447 	add	a,#0xfb
      00047C F5 81            [12] 1448 	mov	sp,a
                                   1449 ;	SPI.c:217: return;
      00047E 22               [24] 1450 	ret
      00047F                       1451 00104$:
                                   1452 ;	SPI.c:220: if (num_bytes > 1) {
      00047F C3               [12] 1453 	clr	c
      000480 74 01            [12] 1454 	mov	a,#0x01
      000482 9E               [12] 1455 	subb	a,r6
      000483 74 80            [12] 1456 	mov	a,#(0x00 ^ 0x80)
      000485 8F F0            [24] 1457 	mov	b,r7
      000487 63 F0 80         [24] 1458 	xrl	b,#0x80
      00048A 95 F0            [12] 1459 	subb	a,b
      00048C 50 0B            [24] 1460 	jnc	00106$
                                   1461 ;	SPI.c:221: spi_set_autoinc();
      00048E C0 05            [24] 1462 	push	ar5
      000490 C0 04            [24] 1463 	push	ar4
      000492 12r00r12         [24] 1464 	lcall	_spi_set_autoinc
      000495 D0 04            [24] 1465 	pop	ar4
      000497 D0 05            [24] 1466 	pop	ar5
      000499                       1467 00106$:
                                   1468 ;	SPI.c:225: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      000499 8D 07            [24] 1469 	mov	ar7,r5
                                   1470 ;	SPI.c:226: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      00049B 8C 06            [24] 1471 	mov	ar6,r4
                                   1472 ;	SPI.c:228: spi_control_write(0, 0x01, higher_byte); // High byte
      00049D 90r00r02         [24] 1473 	mov	dptr,#_spi_control_write_PARM_2
      0004A0 74 01            [12] 1474 	mov	a,#0x01
      0004A2 F0               [24] 1475 	movx	@dptr,a
      0004A3 90r00r03         [24] 1476 	mov	dptr,#_spi_control_write_PARM_3
      0004A6 EF               [12] 1477 	mov	a,r7
      0004A7 F0               [24] 1478 	movx	@dptr,a
      0004A8 75 82 00         [24] 1479 	mov	dpl, #0x00
      0004AB C0 06            [24] 1480 	push	ar6
      0004AD C0 05            [24] 1481 	push	ar5
      0004AF C0 04            [24] 1482 	push	ar4
      0004B1 12r00r3D         [24] 1483 	lcall	_spi_control_write
      0004B4 D0 04            [24] 1484 	pop	ar4
      0004B6 D0 05            [24] 1485 	pop	ar5
      0004B8 D0 06            [24] 1486 	pop	ar6
                                   1487 ;	SPI.c:229: spi_control_write(0, 0x00, lower_byte); // Low byte
      0004BA 90r00r02         [24] 1488 	mov	dptr,#_spi_control_write_PARM_2
      0004BD E4               [12] 1489 	clr	a
      0004BE F0               [24] 1490 	movx	@dptr,a
      0004BF 90r00r03         [24] 1491 	mov	dptr,#_spi_control_write_PARM_3
      0004C2 EE               [12] 1492 	mov	a,r6
      0004C3 F0               [24] 1493 	movx	@dptr,a
      0004C4 75 82 00         [24] 1494 	mov	dpl, #0x00
      0004C7 C0 05            [24] 1495 	push	ar5
      0004C9 C0 04            [24] 1496 	push	ar4
      0004CB 12r00r3D         [24] 1497 	lcall	_spi_control_write
                                   1498 ;	SPI.c:232: CS_LOW; // Pull CS Low
                                   1499 ;	assignBit
      0004CE C2 91            [12] 1500 	clr	_P1_1
                                   1501 ;	SPI.c:233: SPI_send(opcode); // Send opcode
      0004D0 75 82 3A         [24] 1502 	mov	dpl, #0x3a
      0004D3 12r00rA8         [24] 1503 	lcall	_SPI_send
      0004D6 D0 04            [24] 1504 	pop	ar4
      0004D8 D0 05            [24] 1505 	pop	ar5
                                   1506 ;	SPI.c:236: printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      0004DA 90r00r18         [24] 1507 	mov	dptr,#_spi_buffer_read_num_bytes_10000_99
      0004DD E0               [24] 1508 	movx	a,@dptr
      0004DE FE               [12] 1509 	mov	r6,a
      0004DF A3               [24] 1510 	inc	dptr
      0004E0 E0               [24] 1511 	movx	a,@dptr
      0004E1 FF               [12] 1512 	mov	r7,a
      0004E2 C0 07            [24] 1513 	push	ar7
      0004E4 C0 06            [24] 1514 	push	ar6
      0004E6 C0 04            [24] 1515 	push	ar4
      0004E8 C0 05            [24] 1516 	push	ar5
      0004EA C0 06            [24] 1517 	push	ar6
      0004EC C0 07            [24] 1518 	push	ar7
      0004EE 74rA0            [12] 1519 	mov	a,#___str_10
      0004F0 C0 E0            [24] 1520 	push	acc
      0004F2 74s01            [12] 1521 	mov	a,#(___str_10 >> 8)
      0004F4 C0 E0            [24] 1522 	push	acc
      0004F6 74 80            [12] 1523 	mov	a,#0x80
      0004F8 C0 E0            [24] 1524 	push	acc
      0004FA 12r00r00         [24] 1525 	lcall	_printf
      0004FD E5 81            [12] 1526 	mov	a,sp
      0004FF 24 F9            [12] 1527 	add	a,#0xf9
      000501 F5 81            [12] 1528 	mov	sp,a
      000503 D0 06            [24] 1529 	pop	ar6
      000505 D0 07            [24] 1530 	pop	ar7
                                   1531 ;	SPI.c:237: for (int i = 0; i < num_bytes; i++) {
      000507 90r00r1A         [24] 1532 	mov	dptr,#_spi_buffer_read_i_20002_106
      00050A E4               [12] 1533 	clr	a
      00050B F0               [24] 1534 	movx	@dptr,a
      00050C A3               [24] 1535 	inc	dptr
      00050D F0               [24] 1536 	movx	@dptr,a
      00050E 90r00r15         [24] 1537 	mov	dptr,#_spi_buffer_read_PARM_3
      000511 E0               [24] 1538 	movx	a,@dptr
      000512 FB               [12] 1539 	mov	r3,a
      000513 A3               [24] 1540 	inc	dptr
      000514 E0               [24] 1541 	movx	a,@dptr
      000515 FC               [12] 1542 	mov	r4,a
      000516 A3               [24] 1543 	inc	dptr
      000517 E0               [24] 1544 	movx	a,@dptr
      000518 FD               [12] 1545 	mov	r5,a
      000519                       1546 00109$:
      000519 90r00r1A         [24] 1547 	mov	dptr,#_spi_buffer_read_i_20002_106
      00051C E0               [24] 1548 	movx	a,@dptr
      00051D F9               [12] 1549 	mov	r1,a
      00051E A3               [24] 1550 	inc	dptr
      00051F E0               [24] 1551 	movx	a,@dptr
      000520 FA               [12] 1552 	mov	r2,a
      000521 C3               [12] 1553 	clr	c
      000522 E9               [12] 1554 	mov	a,r1
      000523 9E               [12] 1555 	subb	a,r6
      000524 EA               [12] 1556 	mov	a,r2
      000525 64 80            [12] 1557 	xrl	a,#0x80
      000527 8F F0            [24] 1558 	mov	b,r7
      000529 63 F0 80         [24] 1559 	xrl	b,#0x80
      00052C 95 F0            [12] 1560 	subb	a,b
      00052E 40 03            [24] 1561 	jc	00147$
      000530 02r05rB6         [24] 1562 	ljmp	00107$
      000533                       1563 00147$:
                                   1564 ;	SPI.c:238: *data_ptr = SPI_ReadByte(); // Read data
      000533 C0 06            [24] 1565 	push	ar6
      000535 C0 07            [24] 1566 	push	ar7
      000537 C0 07            [24] 1567 	push	ar7
      000539 C0 06            [24] 1568 	push	ar6
      00053B C0 05            [24] 1569 	push	ar5
      00053D C0 04            [24] 1570 	push	ar4
      00053F C0 03            [24] 1571 	push	ar3
      000541 C0 02            [24] 1572 	push	ar2
      000543 C0 01            [24] 1573 	push	ar1
      000545 12r00r00         [24] 1574 	lcall	_SPI_ReadByte
      000548 A8 82            [24] 1575 	mov	r0, dpl
      00054A D0 01            [24] 1576 	pop	ar1
      00054C D0 02            [24] 1577 	pop	ar2
      00054E D0 03            [24] 1578 	pop	ar3
      000550 D0 04            [24] 1579 	pop	ar4
      000552 D0 05            [24] 1580 	pop	ar5
      000554 D0 06            [24] 1581 	pop	ar6
      000556 D0 07            [24] 1582 	pop	ar7
      000558 8B 82            [24] 1583 	mov	dpl,r3
      00055A 8C 83            [24] 1584 	mov	dph,r4
      00055C 8D F0            [24] 1585 	mov	b,r5
      00055E E8               [12] 1586 	mov	a,r0
      00055F 12r00r00         [24] 1587 	lcall	__gptrput
      000562 A3               [24] 1588 	inc	dptr
      000563 AB 82            [24] 1589 	mov	r3,dpl
      000565 AC 83            [24] 1590 	mov	r4,dph
                                   1591 ;	SPI.c:239: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      000567 7F 00            [12] 1592 	mov	r7,#0x00
      000569 09               [12] 1593 	inc	r1
      00056A B9 00 01         [24] 1594 	cjne	r1,#0x00,00148$
      00056D 0A               [12] 1595 	inc	r2
      00056E                       1596 00148$:
      00056E C0 07            [24] 1597 	push	ar7
      000570 C0 06            [24] 1598 	push	ar6
      000572 C0 05            [24] 1599 	push	ar5
      000574 C0 04            [24] 1600 	push	ar4
      000576 C0 03            [24] 1601 	push	ar3
      000578 C0 02            [24] 1602 	push	ar2
      00057A C0 01            [24] 1603 	push	ar1
      00057C C0 00            [24] 1604 	push	ar0
      00057E C0 07            [24] 1605 	push	ar7
      000580 C0 01            [24] 1606 	push	ar1
      000582 C0 02            [24] 1607 	push	ar2
      000584 74rDB            [12] 1608 	mov	a,#___str_11
      000586 C0 E0            [24] 1609 	push	acc
      000588 74s01            [12] 1610 	mov	a,#(___str_11 >> 8)
      00058A C0 E0            [24] 1611 	push	acc
      00058C 74 80            [12] 1612 	mov	a,#0x80
      00058E C0 E0            [24] 1613 	push	acc
      000590 12r00r00         [24] 1614 	lcall	_printf
      000593 E5 81            [12] 1615 	mov	a,sp
      000595 24 F9            [12] 1616 	add	a,#0xf9
      000597 F5 81            [12] 1617 	mov	sp,a
      000599 D0 01            [24] 1618 	pop	ar1
      00059B D0 02            [24] 1619 	pop	ar2
      00059D D0 03            [24] 1620 	pop	ar3
      00059F D0 04            [24] 1621 	pop	ar4
      0005A1 D0 05            [24] 1622 	pop	ar5
      0005A3 D0 06            [24] 1623 	pop	ar6
      0005A5 D0 07            [24] 1624 	pop	ar7
                                   1625 ;	SPI.c:240: data_ptr++;
                                   1626 ;	SPI.c:237: for (int i = 0; i < num_bytes; i++) {
      0005A7 90r00r1A         [24] 1627 	mov	dptr,#_spi_buffer_read_i_20002_106
      0005AA E9               [12] 1628 	mov	a,r1
      0005AB F0               [24] 1629 	movx	@dptr,a
      0005AC EA               [12] 1630 	mov	a,r2
      0005AD A3               [24] 1631 	inc	dptr
      0005AE F0               [24] 1632 	movx	@dptr,a
      0005AF D0 07            [24] 1633 	pop	ar7
      0005B1 D0 06            [24] 1634 	pop	ar6
      0005B3 02r05r19         [24] 1635 	ljmp	00109$
      0005B6                       1636 00107$:
                                   1637 ;	SPI.c:242: CS_HIGH; // Pull CS High
                                   1638 ;	assignBit
      0005B6 D2 91            [12] 1639 	setb	_P1_1
                                   1640 ;	SPI.c:243: }
      0005B8 22               [24] 1641 	ret
                                   1642 ;------------------------------------------------------------
                                   1643 ;Allocation info for local variables in function 'spi_buffer_write'
                                   1644 ;------------------------------------------------------------
                                   1645 ;start_address             Allocated with name '_spi_buffer_write_PARM_2'
                                   1646 ;data_ptr                  Allocated with name '_spi_buffer_write_PARM_3'
                                   1647 ;num_bytes                 Allocated with name '_spi_buffer_write_num_bytes_10000_108'
                                   1648 ;higher_byte               Allocated with name '_spi_buffer_write_higher_byte_10001_113'
                                   1649 ;lower_byte                Allocated with name '_spi_buffer_write_lower_byte_10001_113'
                                   1650 ;opcode                    Allocated with name '_spi_buffer_write_opcode_10002_114'
                                   1651 ;i                         Allocated with name '_spi_buffer_write_i_20002_115'
                                   1652 ;------------------------------------------------------------
                                   1653 ;	SPI.c:246: void spi_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr)
                                   1654 ;	-----------------------------------------
                                   1655 ;	 function spi_buffer_write
                                   1656 ;	-----------------------------------------
      0005B9                       1657 _spi_buffer_write:
      0005B9 AF 83            [24] 1658 	mov	r7,dph
      0005BB E5 82            [12] 1659 	mov	a,dpl
      0005BD 90r00r21         [24] 1660 	mov	dptr,#_spi_buffer_write_num_bytes_10000_108
      0005C0 F0               [24] 1661 	movx	@dptr,a
      0005C1 EF               [12] 1662 	mov	a,r7
      0005C2 A3               [24] 1663 	inc	dptr
      0005C3 F0               [24] 1664 	movx	@dptr,a
                                   1665 ;	SPI.c:248: if (num_bytes < 1)
      0005C4 90r00r21         [24] 1666 	mov	dptr,#_spi_buffer_write_num_bytes_10000_108
      0005C7 E0               [24] 1667 	movx	a,@dptr
      0005C8 FE               [12] 1668 	mov	r6,a
      0005C9 A3               [24] 1669 	inc	dptr
      0005CA E0               [24] 1670 	movx	a,@dptr
      0005CB FF               [12] 1671 	mov	r7,a
      0005CC C3               [12] 1672 	clr	c
      0005CD EE               [12] 1673 	mov	a,r6
      0005CE 94 01            [12] 1674 	subb	a,#0x01
      0005D0 EF               [12] 1675 	mov	a,r7
      0005D1 64 80            [12] 1676 	xrl	a,#0x80
      0005D3 94 80            [12] 1677 	subb	a,#0x80
      0005D5 50 1A            [24] 1678 	jnc	00102$
                                   1679 ;	SPI.c:250: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      0005D7 C0 06            [24] 1680 	push	ar6
      0005D9 C0 07            [24] 1681 	push	ar7
      0005DB 74r66            [12] 1682 	mov	a,#___str_8
      0005DD C0 E0            [24] 1683 	push	acc
      0005DF 74s01            [12] 1684 	mov	a,#(___str_8 >> 8)
      0005E1 C0 E0            [24] 1685 	push	acc
      0005E3 74 80            [12] 1686 	mov	a,#0x80
      0005E5 C0 E0            [24] 1687 	push	acc
      0005E7 12r00r00         [24] 1688 	lcall	_printf
      0005EA E5 81            [12] 1689 	mov	a,sp
      0005EC 24 FB            [12] 1690 	add	a,#0xfb
      0005EE F5 81            [12] 1691 	mov	sp,a
                                   1692 ;	SPI.c:251: return;
      0005F0 22               [24] 1693 	ret
      0005F1                       1694 00102$:
                                   1695 ;	SPI.c:253: if (start_address > 0x1FFF) {
      0005F1 90r00r1C         [24] 1696 	mov	dptr,#_spi_buffer_write_PARM_2
      0005F4 E0               [24] 1697 	movx	a,@dptr
      0005F5 FC               [12] 1698 	mov	r4,a
      0005F6 A3               [24] 1699 	inc	dptr
      0005F7 E0               [24] 1700 	movx	a,@dptr
      0005F8 FD               [12] 1701 	mov	r5,a
      0005F9 8C 02            [24] 1702 	mov	ar2,r4
      0005FB 8D 03            [24] 1703 	mov	ar3,r5
      0005FD C3               [12] 1704 	clr	c
      0005FE 74 FF            [12] 1705 	mov	a,#0xff
      000600 9A               [12] 1706 	subb	a,r2
      000601 74 1F            [12] 1707 	mov	a,#0x1f
      000603 9B               [12] 1708 	subb	a,r3
      000604 50 1A            [24] 1709 	jnc	00104$
                                   1710 ;	SPI.c:254: printf("\n\rInvalid address: %04X\n\r", start_address);
      000606 C0 04            [24] 1711 	push	ar4
      000608 C0 05            [24] 1712 	push	ar5
      00060A 74r86            [12] 1713 	mov	a,#___str_9
      00060C C0 E0            [24] 1714 	push	acc
      00060E 74s01            [12] 1715 	mov	a,#(___str_9 >> 8)
      000610 C0 E0            [24] 1716 	push	acc
      000612 74 80            [12] 1717 	mov	a,#0x80
      000614 C0 E0            [24] 1718 	push	acc
      000616 12r00r00         [24] 1719 	lcall	_printf
      000619 E5 81            [12] 1720 	mov	a,sp
      00061B 24 FB            [12] 1721 	add	a,#0xfb
      00061D F5 81            [12] 1722 	mov	sp,a
                                   1723 ;	SPI.c:255: return;
      00061F 22               [24] 1724 	ret
      000620                       1725 00104$:
                                   1726 ;	SPI.c:259: if (num_bytes > 1) {
      000620 C3               [12] 1727 	clr	c
      000621 74 01            [12] 1728 	mov	a,#0x01
      000623 9E               [12] 1729 	subb	a,r6
      000624 74 80            [12] 1730 	mov	a,#(0x00 ^ 0x80)
      000626 8F F0            [24] 1731 	mov	b,r7
      000628 63 F0 80         [24] 1732 	xrl	b,#0x80
      00062B 95 F0            [12] 1733 	subb	a,b
      00062D 50 0B            [24] 1734 	jnc	00106$
                                   1735 ;	SPI.c:260: spi_set_autoinc();
      00062F C0 05            [24] 1736 	push	ar5
      000631 C0 04            [24] 1737 	push	ar4
      000633 12r00r12         [24] 1738 	lcall	_spi_set_autoinc
      000636 D0 04            [24] 1739 	pop	ar4
      000638 D0 05            [24] 1740 	pop	ar5
      00063A                       1741 00106$:
                                   1742 ;	SPI.c:263: uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
      00063A 8D 07            [24] 1743 	mov	ar7,r5
                                   1744 ;	SPI.c:264: uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
      00063C 8C 06            [24] 1745 	mov	ar6,r4
                                   1746 ;	SPI.c:266: spi_control_write(0, 0x03, higher_byte); // High byte
      00063E 90r00r02         [24] 1747 	mov	dptr,#_spi_control_write_PARM_2
      000641 74 03            [12] 1748 	mov	a,#0x03
      000643 F0               [24] 1749 	movx	@dptr,a
      000644 90r00r03         [24] 1750 	mov	dptr,#_spi_control_write_PARM_3
      000647 EF               [12] 1751 	mov	a,r7
      000648 F0               [24] 1752 	movx	@dptr,a
      000649 75 82 00         [24] 1753 	mov	dpl, #0x00
      00064C C0 06            [24] 1754 	push	ar6
      00064E C0 05            [24] 1755 	push	ar5
      000650 C0 04            [24] 1756 	push	ar4
      000652 12r00r3D         [24] 1757 	lcall	_spi_control_write
      000655 D0 04            [24] 1758 	pop	ar4
      000657 D0 05            [24] 1759 	pop	ar5
      000659 D0 06            [24] 1760 	pop	ar6
                                   1761 ;	SPI.c:267: spi_control_write(0, 0x02, lower_byte); // Low byte
      00065B 90r00r02         [24] 1762 	mov	dptr,#_spi_control_write_PARM_2
      00065E 74 02            [12] 1763 	mov	a,#0x02
      000660 F0               [24] 1764 	movx	@dptr,a
      000661 90r00r03         [24] 1765 	mov	dptr,#_spi_control_write_PARM_3
      000664 EE               [12] 1766 	mov	a,r6
      000665 F0               [24] 1767 	movx	@dptr,a
      000666 75 82 00         [24] 1768 	mov	dpl, #0x00
      000669 C0 05            [24] 1769 	push	ar5
      00066B C0 04            [24] 1770 	push	ar4
      00066D 12r00r3D         [24] 1771 	lcall	_spi_control_write
                                   1772 ;	SPI.c:270: CS_LOW; // Pull CS Low
                                   1773 ;	assignBit
      000670 C2 91            [12] 1774 	clr	_P1_1
                                   1775 ;	SPI.c:271: SPI_send(opcode); // Send opcode
      000672 75 82 7A         [24] 1776 	mov	dpl, #0x7a
      000675 12r00rA8         [24] 1777 	lcall	_SPI_send
      000678 D0 04            [24] 1778 	pop	ar4
      00067A D0 05            [24] 1779 	pop	ar5
                                   1780 ;	SPI.c:274: printf("Writing %d bytes to buffer starting at address 0x%04X:\n\r", num_bytes, start_address);
      00067C 90r00r21         [24] 1781 	mov	dptr,#_spi_buffer_write_num_bytes_10000_108
      00067F E0               [24] 1782 	movx	a,@dptr
      000680 FE               [12] 1783 	mov	r6,a
      000681 A3               [24] 1784 	inc	dptr
      000682 E0               [24] 1785 	movx	a,@dptr
      000683 FF               [12] 1786 	mov	r7,a
      000684 C0 07            [24] 1787 	push	ar7
      000686 C0 06            [24] 1788 	push	ar6
      000688 C0 04            [24] 1789 	push	ar4
      00068A C0 05            [24] 1790 	push	ar5
      00068C C0 06            [24] 1791 	push	ar6
      00068E C0 07            [24] 1792 	push	ar7
      000690 74rED            [12] 1793 	mov	a,#___str_12
      000692 C0 E0            [24] 1794 	push	acc
      000694 74s01            [12] 1795 	mov	a,#(___str_12 >> 8)
      000696 C0 E0            [24] 1796 	push	acc
      000698 74 80            [12] 1797 	mov	a,#0x80
      00069A C0 E0            [24] 1798 	push	acc
      00069C 12r00r00         [24] 1799 	lcall	_printf
      00069F E5 81            [12] 1800 	mov	a,sp
      0006A1 24 F9            [12] 1801 	add	a,#0xf9
      0006A3 F5 81            [12] 1802 	mov	sp,a
      0006A5 D0 06            [24] 1803 	pop	ar6
      0006A7 D0 07            [24] 1804 	pop	ar7
                                   1805 ;	SPI.c:275: for (int i = 0; i < num_bytes; i++) {
      0006A9 90r00r23         [24] 1806 	mov	dptr,#_spi_buffer_write_i_20002_115
      0006AC E4               [12] 1807 	clr	a
      0006AD F0               [24] 1808 	movx	@dptr,a
      0006AE A3               [24] 1809 	inc	dptr
      0006AF F0               [24] 1810 	movx	@dptr,a
      0006B0 90r00r1E         [24] 1811 	mov	dptr,#_spi_buffer_write_PARM_3
      0006B3 E0               [24] 1812 	movx	a,@dptr
      0006B4 FB               [12] 1813 	mov	r3,a
      0006B5 A3               [24] 1814 	inc	dptr
      0006B6 E0               [24] 1815 	movx	a,@dptr
      0006B7 FC               [12] 1816 	mov	r4,a
      0006B8 A3               [24] 1817 	inc	dptr
      0006B9 E0               [24] 1818 	movx	a,@dptr
      0006BA FD               [12] 1819 	mov	r5,a
      0006BB                       1820 00109$:
      0006BB 90r00r23         [24] 1821 	mov	dptr,#_spi_buffer_write_i_20002_115
      0006BE E0               [24] 1822 	movx	a,@dptr
      0006BF F9               [12] 1823 	mov	r1,a
      0006C0 A3               [24] 1824 	inc	dptr
      0006C1 E0               [24] 1825 	movx	a,@dptr
      0006C2 FA               [12] 1826 	mov	r2,a
      0006C3 C3               [12] 1827 	clr	c
      0006C4 E9               [12] 1828 	mov	a,r1
      0006C5 9E               [12] 1829 	subb	a,r6
      0006C6 EA               [12] 1830 	mov	a,r2
      0006C7 64 80            [12] 1831 	xrl	a,#0x80
      0006C9 8F F0            [24] 1832 	mov	b,r7
      0006CB 63 F0 80         [24] 1833 	xrl	b,#0x80
      0006CE 95 F0            [12] 1834 	subb	a,b
      0006D0 40 03            [24] 1835 	jc	00147$
      0006D2 02r07r62         [24] 1836 	ljmp	00107$
      0006D5                       1837 00147$:
                                   1838 ;	SPI.c:276: printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
      0006D5 C0 06            [24] 1839 	push	ar6
      0006D7 C0 07            [24] 1840 	push	ar7
      0006D9 8B 82            [24] 1841 	mov	dpl,r3
      0006DB 8C 83            [24] 1842 	mov	dph,r4
      0006DD 8D F0            [24] 1843 	mov	b,r5
      0006DF 12r00r00         [24] 1844 	lcall	__gptrget
      0006E2 F8               [12] 1845 	mov	r0,a
      0006E3 7F 00            [12] 1846 	mov	r7,#0x00
      0006E5 09               [12] 1847 	inc	r1
      0006E6 B9 00 01         [24] 1848 	cjne	r1,#0x00,00148$
      0006E9 0A               [12] 1849 	inc	r2
      0006EA                       1850 00148$:
      0006EA C0 07            [24] 1851 	push	ar7
      0006EC C0 06            [24] 1852 	push	ar6
      0006EE C0 05            [24] 1853 	push	ar5
      0006F0 C0 04            [24] 1854 	push	ar4
      0006F2 C0 03            [24] 1855 	push	ar3
      0006F4 C0 02            [24] 1856 	push	ar2
      0006F6 C0 01            [24] 1857 	push	ar1
      0006F8 C0 00            [24] 1858 	push	ar0
      0006FA C0 07            [24] 1859 	push	ar7
      0006FC C0 01            [24] 1860 	push	ar1
      0006FE C0 02            [24] 1861 	push	ar2
      000700 74rDB            [12] 1862 	mov	a,#___str_11
      000702 C0 E0            [24] 1863 	push	acc
      000704 74s01            [12] 1864 	mov	a,#(___str_11 >> 8)
      000706 C0 E0            [24] 1865 	push	acc
      000708 74 80            [12] 1866 	mov	a,#0x80
      00070A C0 E0            [24] 1867 	push	acc
      00070C 12r00r00         [24] 1868 	lcall	_printf
      00070F E5 81            [12] 1869 	mov	a,sp
      000711 24 F9            [12] 1870 	add	a,#0xf9
      000713 F5 81            [12] 1871 	mov	sp,a
      000715 D0 01            [24] 1872 	pop	ar1
      000717 D0 02            [24] 1873 	pop	ar2
      000719 D0 03            [24] 1874 	pop	ar3
      00071B D0 04            [24] 1875 	pop	ar4
      00071D D0 05            [24] 1876 	pop	ar5
      00071F D0 06            [24] 1877 	pop	ar6
      000721 D0 07            [24] 1878 	pop	ar7
                                   1879 ;	SPI.c:277: SPI_send(*data_ptr); // Send data
      000723 8B 82            [24] 1880 	mov	dpl,r3
      000725 8C 83            [24] 1881 	mov	dph,r4
      000727 8D F0            [24] 1882 	mov	b,r5
      000729 12r00r00         [24] 1883 	lcall	__gptrget
      00072C FF               [12] 1884 	mov	r7,a
      00072D A3               [24] 1885 	inc	dptr
      00072E AB 82            [24] 1886 	mov	r3,dpl
      000730 AC 83            [24] 1887 	mov	r4,dph
      000732 8F 82            [24] 1888 	mov	dpl, r7
      000734 C0 07            [24] 1889 	push	ar7
      000736 C0 06            [24] 1890 	push	ar6
      000738 C0 05            [24] 1891 	push	ar5
      00073A C0 04            [24] 1892 	push	ar4
      00073C C0 03            [24] 1893 	push	ar3
      00073E C0 02            [24] 1894 	push	ar2
      000740 C0 01            [24] 1895 	push	ar1
      000742 12r00rA8         [24] 1896 	lcall	_SPI_send
      000745 D0 01            [24] 1897 	pop	ar1
      000747 D0 02            [24] 1898 	pop	ar2
      000749 D0 03            [24] 1899 	pop	ar3
      00074B D0 04            [24] 1900 	pop	ar4
      00074D D0 05            [24] 1901 	pop	ar5
      00074F D0 06            [24] 1902 	pop	ar6
      000751 D0 07            [24] 1903 	pop	ar7
                                   1904 ;	SPI.c:278: data_ptr++;
                                   1905 ;	SPI.c:275: for (int i = 0; i < num_bytes; i++) {
      000753 90r00r23         [24] 1906 	mov	dptr,#_spi_buffer_write_i_20002_115
      000756 E9               [12] 1907 	mov	a,r1
      000757 F0               [24] 1908 	movx	@dptr,a
      000758 EA               [12] 1909 	mov	a,r2
      000759 A3               [24] 1910 	inc	dptr
      00075A F0               [24] 1911 	movx	@dptr,a
      00075B D0 07            [24] 1912 	pop	ar7
      00075D D0 06            [24] 1913 	pop	ar6
      00075F 02r06rBB         [24] 1914 	ljmp	00109$
      000762                       1915 00107$:
                                   1916 ;	SPI.c:280: CS_HIGH; // Pull CS High
                                   1917 ;	assignBit
      000762 D2 91            [12] 1918 	setb	_P1_1
                                   1919 ;	SPI.c:281: }
      000764 22               [24] 1920 	ret
                                   1921 ;------------------------------------------------------------
                                   1922 ;Allocation info for local variables in function 'init_ENC'
                                   1923 ;------------------------------------------------------------
                                   1924 ;	SPI.c:283: void init_ENC(void)
                                   1925 ;	-----------------------------------------
                                   1926 ;	 function init_ENC
                                   1927 ;	-----------------------------------------
      000765                       1928 _init_ENC:
                                   1929 ;	SPI.c:286: enc28j60_init_rx_buffer(0x0000, 0x0010);
      000765 90r00r00         [24] 1930 	mov	dptr,#_enc28j60_init_rx_buffer_PARM_2
      000768 74 10            [12] 1931 	mov	a,#0x10
      00076A F0               [24] 1932 	movx	@dptr,a
      00076B E4               [12] 1933 	clr	a
      00076C A3               [24] 1934 	inc	dptr
      00076D F0               [24] 1935 	movx	@dptr,a
      00076E 90 00 00         [24] 1936 	mov	dptr,#0x0000
                                   1937 ;	SPI.c:288: }
      000771 02r00r00         [24] 1938 	ljmp	_enc28j60_init_rx_buffer
                                   1939 ;------------------------------------------------------------
                                   1940 ;Allocation info for local variables in function 'init_MAC'
                                   1941 ;------------------------------------------------------------
                                   1942 ;	SPI.c:290: void init_MAC(void)
                                   1943 ;	-----------------------------------------
                                   1944 ;	 function init_MAC
                                   1945 ;	-----------------------------------------
      000774                       1946 _init_MAC:
                                   1947 ;	SPI.c:293: spi_control_write(0x02, 0x02, 0x70); // Write 0x30 to MACON3 (address 0x02 in bank 2)
      000774 90r00r02         [24] 1948 	mov	dptr,#_spi_control_write_PARM_2
      000777 74 02            [12] 1949 	mov	a,#0x02
      000779 F0               [24] 1950 	movx	@dptr,a
      00077A 90r00r03         [24] 1951 	mov	dptr,#_spi_control_write_PARM_3
      00077D 74 70            [12] 1952 	mov	a,#0x70
      00077F F0               [24] 1953 	movx	@dptr,a
      000780 75 82 02         [24] 1954 	mov	dpl, #0x02
      000783 12r00r3D         [24] 1955 	lcall	_spi_control_write
                                   1956 ;	SPI.c:294: spi_control_write(0x02, 0x03, 0x40); // Write 0x40 to MACON4 (address 0x02 in bank 2) - DEFER bit
      000786 90r00r02         [24] 1957 	mov	dptr,#_spi_control_write_PARM_2
      000789 74 03            [12] 1958 	mov	a,#0x03
      00078B F0               [24] 1959 	movx	@dptr,a
      00078C 90r00r03         [24] 1960 	mov	dptr,#_spi_control_write_PARM_3
      00078F 74 40            [12] 1961 	mov	a,#0x40
      000791 F0               [24] 1962 	movx	@dptr,a
      000792 75 82 02         [24] 1963 	mov	dpl, #0x02
      000795 12r00r3D         [24] 1964 	lcall	_spi_control_write
                                   1965 ;	SPI.c:295: spi_control_write(0x02, 0x0A, 0xEE); // Write 0xEE to MAMXFLL (low byte, address 0x0A in bank 2)
      000798 90r00r02         [24] 1966 	mov	dptr,#_spi_control_write_PARM_2
      00079B 74 0A            [12] 1967 	mov	a,#0x0a
      00079D F0               [24] 1968 	movx	@dptr,a
      00079E 90r00r03         [24] 1969 	mov	dptr,#_spi_control_write_PARM_3
      0007A1 74 EE            [12] 1970 	mov	a,#0xee
      0007A3 F0               [24] 1971 	movx	@dptr,a
      0007A4 75 82 02         [24] 1972 	mov	dpl, #0x02
      0007A7 12r00r3D         [24] 1973 	lcall	_spi_control_write
                                   1974 ;	SPI.c:296: spi_control_write(0x02, 0x0B, 0x05); // Write 0x05 to MAMXFLH (high byte, address 0x0B in bank 2)
      0007AA 90r00r02         [24] 1975 	mov	dptr,#_spi_control_write_PARM_2
      0007AD 74 0B            [12] 1976 	mov	a,#0x0b
      0007AF F0               [24] 1977 	movx	@dptr,a
      0007B0 90r00r03         [24] 1978 	mov	dptr,#_spi_control_write_PARM_3
      0007B3 74 05            [12] 1979 	mov	a,#0x05
      0007B5 F0               [24] 1980 	movx	@dptr,a
      0007B6 75 82 02         [24] 1981 	mov	dpl, #0x02
      0007B9 12r00r3D         [24] 1982 	lcall	_spi_control_write
                                   1983 ;	SPI.c:297: spi_control_write(0x02, 0x04, 0x12); // Write 0x15 to MABBIPG (address 0x04 in bank 2)
      0007BC 90r00r02         [24] 1984 	mov	dptr,#_spi_control_write_PARM_2
      0007BF 74 04            [12] 1985 	mov	a,#0x04
      0007C1 F0               [24] 1986 	movx	@dptr,a
      0007C2 90r00r03         [24] 1987 	mov	dptr,#_spi_control_write_PARM_3
      0007C5 74 12            [12] 1988 	mov	a,#0x12
      0007C7 F0               [24] 1989 	movx	@dptr,a
      0007C8 75 82 02         [24] 1990 	mov	dpl, #0x02
      0007CB 12r00r3D         [24] 1991 	lcall	_spi_control_write
                                   1992 ;	SPI.c:298: spi_control_write(0x02, 0x06, 0x12); // Write 0x12 to MAIPGL (low byte, address 0x06 in bank 2)
      0007CE 90r00r02         [24] 1993 	mov	dptr,#_spi_control_write_PARM_2
      0007D1 74 06            [12] 1994 	mov	a,#0x06
      0007D3 F0               [24] 1995 	movx	@dptr,a
      0007D4 90r00r03         [24] 1996 	mov	dptr,#_spi_control_write_PARM_3
      0007D7 74 12            [12] 1997 	mov	a,#0x12
      0007D9 F0               [24] 1998 	movx	@dptr,a
      0007DA 75 82 02         [24] 1999 	mov	dpl, #0x02
      0007DD 12r00r3D         [24] 2000 	lcall	_spi_control_write
                                   2001 ;	SPI.c:299: spi_control_write(0x02, 0x07, 0x0C); // Write 0x12 to MAIPGH (low byte, address 0x06 in bank 2)
      0007E0 90r00r02         [24] 2002 	mov	dptr,#_spi_control_write_PARM_2
      0007E3 74 07            [12] 2003 	mov	a,#0x07
      0007E5 F0               [24] 2004 	movx	@dptr,a
      0007E6 90r00r03         [24] 2005 	mov	dptr,#_spi_control_write_PARM_3
      0007E9 74 0C            [12] 2006 	mov	a,#0x0c
      0007EB F0               [24] 2007 	movx	@dptr,a
      0007EC 75 82 02         [24] 2008 	mov	dpl, #0x02
                                   2009 ;	SPI.c:300: }
      0007EF 02r00r3D         [24] 2010 	ljmp	_spi_control_write
                                   2011 	.area CSEG    (CODE)
                                   2012 	.area CONST   (CODE)
                                   2013 	.area CONST   (CODE)
      000000                       2014 ___str_0:
      000000 57 72 69 74 65 3A 20  2015 	.ascii "Write: Address 0x%02X, Data 0x%02X"
             41 64 64 72 65 73 73
             20 30 78 25 30 32 58
             2C 20 44 61 74 61 20
             30 78 25 30 32 58
      000022 0A                    2016 	.db 0x0a
      000023 0D                    2017 	.db 0x0d
      000024 00                    2018 	.db 0x00
                                   2019 	.area CSEG    (CODE)
                                   2020 	.area CONST   (CODE)
      000025                       2021 ___str_1:
      000025 0A                    2022 	.db 0x0a
      000026 0D                    2023 	.db 0x0d
      000027 49 6E 76 61 6C 69 64  2024 	.ascii "Invalid address: MAC register address range [0, 0x1F]"
             20 61 64 64 72 65 73
             73 3A 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 72 61 6E 67
             65 20 5B 30 2C 20 30
             78 31 46 5D
      00005C 0A                    2025 	.db 0x0a
      00005D 0D                    2026 	.db 0x0d
      00005E 00                    2027 	.db 0x00
                                   2028 	.area CSEG    (CODE)
                                   2029 	.area CONST   (CODE)
      00005F                       2030 ___str_2:
      00005F 52 65 61 64 3A 20 41  2031 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      000080 0A                    2032 	.db 0x0a
      000081 0D                    2033 	.db 0x0d
      000082 00                    2034 	.db 0x00
                                   2035 	.area CSEG    (CODE)
                                   2036 	.area CONST   (CODE)
      000083                       2037 ___str_3:
      000083 50 48 59 20 57 72 69  2038 	.ascii "PHY Write: Address 0x%02X, Data 0x%04X"
             74 65 3A 20 41 64 64
             72 65 73 73 20 30 78
             25 30 32 58 2C 20 44
             61 74 61 20 30 78 25
             30 34 58
      0000A9 0A                    2039 	.db 0x0a
      0000AA 0D                    2040 	.db 0x0d
      0000AB 00                    2041 	.db 0x00
                                   2042 	.area CSEG    (CODE)
                                   2043 	.area CONST   (CODE)
      0000AC                       2044 ___str_4:
      0000AC 52 65 61 64 3A 20 41  2045 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      0000CD 0A                    2046 	.db 0x0a
      0000CE 00                    2047 	.db 0x00
                                   2048 	.area CSEG    (CODE)
                                   2049 	.area CONST   (CODE)
      0000CF                       2050 ___str_5:
      0000CF 50 48 59 20 52 65 61  2051 	.ascii "PHY Read: Address 0x%02X, Data 0x%04X"
             64 3A 20 41 64 64 72
             65 73 73 20 30 78 25
             30 32 58 2C 20 44 61
             74 61 20 30 78 25 30
             34 58
      0000F4 0A                    2052 	.db 0x0a
      0000F5 0D                    2053 	.db 0x0d
      0000F6 00                    2054 	.db 0x00
                                   2055 	.area CSEG    (CODE)
                                   2056 	.area CONST   (CODE)
      0000F7                       2057 ___str_6:
      0000F7 0A                    2058 	.db 0x0a
      0000F8 0D                    2059 	.db 0x0d
      0000F9 49 6E 76 61 6C 69 64  2060 	.ascii "Invalid Buffer Address or Size: Start 0x%04X, Size 0x%04X"
             20 42 75 66 66 65 72
             20 41 64 64 72 65 73
             73 20 6F 72 20 53 69
             7A 65 3A 20 53 74 61
             72 74 20 30 78 25 30
             34 58 2C 20 53 69 7A
             65 20 30 78 25 30 34
             58
      000132 0A                    2061 	.db 0x0a
      000133 0D                    2062 	.db 0x0d
      000134 00                    2063 	.db 0x00
                                   2064 	.area CSEG    (CODE)
                                   2065 	.area CONST   (CODE)
      000135                       2066 ___str_7:
      000135 0A                    2067 	.db 0x0a
      000136 0D                    2068 	.db 0x0d
      000137 42 75 66 66 65 72 20  2069 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      000163 0A                    2070 	.db 0x0a
      000164 0D                    2071 	.db 0x0d
      000165 00                    2072 	.db 0x00
                                   2073 	.area CSEG    (CODE)
                                   2074 	.area CONST   (CODE)
      000166                       2075 ___str_8:
      000166 0A                    2076 	.db 0x0a
      000167 0D                    2077 	.db 0x0d
      000168 49 6E 76 61 6C 69 64  2078 	.ascii "Invalid number of bytes: %d"
             20 6E 75 6D 62 65 72
             20 6F 66 20 62 79 74
             65 73 3A 20 25 64
      000183 0A                    2079 	.db 0x0a
      000184 0D                    2080 	.db 0x0d
      000185 00                    2081 	.db 0x00
                                   2082 	.area CSEG    (CODE)
                                   2083 	.area CONST   (CODE)
      000186                       2084 ___str_9:
      000186 0A                    2085 	.db 0x0a
      000187 0D                    2086 	.db 0x0d
      000188 49 6E 76 61 6C 69 64  2087 	.ascii "Invalid address: %04X"
             20 61 64 64 72 65 73
             73 3A 20 25 30 34 58
      00019D 0A                    2088 	.db 0x0a
      00019E 0D                    2089 	.db 0x0d
      00019F 00                    2090 	.db 0x00
                                   2091 	.area CSEG    (CODE)
                                   2092 	.area CONST   (CODE)
      0001A0                       2093 ___str_10:
      0001A0 52 65 61 64 69 6E 67  2094 	.ascii "Reading %d bytes from buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 66 72 6F 6D
             20 62 75 66 66 65 72
             20 73 74 61 72 74 69
             6E 67 20 61 74 20 61
             64 64 72 65 73 73 20
             30 78 25 30 34 58 3A
      0001D8 0A                    2095 	.db 0x0a
      0001D9 0D                    2096 	.db 0x0d
      0001DA 00                    2097 	.db 0x00
                                   2098 	.area CSEG    (CODE)
                                   2099 	.area CONST   (CODE)
      0001DB                       2100 ___str_11:
      0001DB 42 79 74 65 20 25 64  2101 	.ascii "Byte %d: 0x%02X"
             3A 20 30 78 25 30 32
             58
      0001EA 0A                    2102 	.db 0x0a
      0001EB 0D                    2103 	.db 0x0d
      0001EC 00                    2104 	.db 0x00
                                   2105 	.area CSEG    (CODE)
                                   2106 	.area CONST   (CODE)
      0001ED                       2107 ___str_12:
      0001ED 57 72 69 74 69 6E 67  2108 	.ascii "Writing %d bytes to buffer starting at address 0x%04X:"
             20 25 64 20 62 79 74
             65 73 20 74 6F 20 62
             75 66 66 65 72 20 73
             74 61 72 74 69 6E 67
             20 61 74 20 61 64 64
             72 65 73 73 20 30 78
             25 30 34 58 3A
      000223 0A                    2109 	.db 0x0a
      000224 0D                    2110 	.db 0x0d
      000225 00                    2111 	.db 0x00
                                   2112 	.area CSEG    (CODE)
                                   2113 	.area XINIT   (CODE)
                                   2114 	.area CABS    (ABS,CODE)
