                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module tcp
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _wait_for_transmission_complete
                                     12 	.globl _enc28j60_set_transmit_pointers
                                     13 	.globl _spi_buffer_write
                                     14 	.globl _spi_buffer_read
                                     15 	.globl _free
                                     16 	.globl _malloc
                                     17 	.globl _printf
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _TF1
                                     21 	.globl _TR1
                                     22 	.globl _TF0
                                     23 	.globl _TR0
                                     24 	.globl _IE1
                                     25 	.globl _IT1
                                     26 	.globl _IE0
                                     27 	.globl _IT0
                                     28 	.globl _SM0
                                     29 	.globl _SM1
                                     30 	.globl _SM2
                                     31 	.globl _REN
                                     32 	.globl _TB8
                                     33 	.globl _RB8
                                     34 	.globl _TI
                                     35 	.globl _RI
                                     36 	.globl _CY
                                     37 	.globl _AC
                                     38 	.globl _F0
                                     39 	.globl _RS1
                                     40 	.globl _RS0
                                     41 	.globl _OV
                                     42 	.globl _F1
                                     43 	.globl _P
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD0
                                     51 	.globl _TXD
                                     52 	.globl _RXD0
                                     53 	.globl _RXD
                                     54 	.globl _P3_7
                                     55 	.globl _P3_6
                                     56 	.globl _P3_5
                                     57 	.globl _P3_4
                                     58 	.globl _P3_3
                                     59 	.globl _P3_2
                                     60 	.globl _P3_1
                                     61 	.globl _P3_0
                                     62 	.globl _P2_7
                                     63 	.globl _P2_6
                                     64 	.globl _P2_5
                                     65 	.globl _P2_4
                                     66 	.globl _P2_3
                                     67 	.globl _P2_2
                                     68 	.globl _P2_1
                                     69 	.globl _P2_0
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _P0_7
                                     79 	.globl _P0_6
                                     80 	.globl _P0_5
                                     81 	.globl _P0_4
                                     82 	.globl _P0_3
                                     83 	.globl _P0_2
                                     84 	.globl _P0_1
                                     85 	.globl _P0_0
                                     86 	.globl _PS
                                     87 	.globl _PT1
                                     88 	.globl _PX1
                                     89 	.globl _PT0
                                     90 	.globl _PX0
                                     91 	.globl _EA
                                     92 	.globl _ES
                                     93 	.globl _ET1
                                     94 	.globl _EX1
                                     95 	.globl _ET0
                                     96 	.globl _EX0
                                     97 	.globl _BREG_F7
                                     98 	.globl _BREG_F6
                                     99 	.globl _BREG_F5
                                    100 	.globl _BREG_F4
                                    101 	.globl _BREG_F3
                                    102 	.globl _BREG_F2
                                    103 	.globl _BREG_F1
                                    104 	.globl _BREG_F0
                                    105 	.globl _P5_7
                                    106 	.globl _P5_6
                                    107 	.globl _P5_5
                                    108 	.globl _P5_4
                                    109 	.globl _P5_3
                                    110 	.globl _P5_2
                                    111 	.globl _P5_1
                                    112 	.globl _P5_0
                                    113 	.globl _P4_7
                                    114 	.globl _P4_6
                                    115 	.globl _P4_5
                                    116 	.globl _P4_4
                                    117 	.globl _P4_3
                                    118 	.globl _P4_2
                                    119 	.globl _P4_1
                                    120 	.globl _P4_0
                                    121 	.globl _PX0L
                                    122 	.globl _PT0L
                                    123 	.globl _PX1L
                                    124 	.globl _PT1L
                                    125 	.globl _PSL
                                    126 	.globl _PT2L
                                    127 	.globl _PPCL
                                    128 	.globl _EC
                                    129 	.globl _CCF0
                                    130 	.globl _CCF1
                                    131 	.globl _CCF2
                                    132 	.globl _CCF3
                                    133 	.globl _CCF4
                                    134 	.globl _CR
                                    135 	.globl _CF
                                    136 	.globl _TF2
                                    137 	.globl _EXF2
                                    138 	.globl _RCLK
                                    139 	.globl _TCLK
                                    140 	.globl _EXEN2
                                    141 	.globl _TR2
                                    142 	.globl _C_T2
                                    143 	.globl _CP_RL2
                                    144 	.globl _T2CON_7
                                    145 	.globl _T2CON_6
                                    146 	.globl _T2CON_5
                                    147 	.globl _T2CON_4
                                    148 	.globl _T2CON_3
                                    149 	.globl _T2CON_2
                                    150 	.globl _T2CON_1
                                    151 	.globl _T2CON_0
                                    152 	.globl _PT2
                                    153 	.globl _ET2
                                    154 	.globl _TMOD
                                    155 	.globl _TL1
                                    156 	.globl _TL0
                                    157 	.globl _TH1
                                    158 	.globl _TH0
                                    159 	.globl _TCON
                                    160 	.globl _SP
                                    161 	.globl _SCON
                                    162 	.globl _SBUF0
                                    163 	.globl _SBUF
                                    164 	.globl _PSW
                                    165 	.globl _PCON
                                    166 	.globl _P3
                                    167 	.globl _P2
                                    168 	.globl _P1
                                    169 	.globl _P0
                                    170 	.globl _IP
                                    171 	.globl _IE
                                    172 	.globl _DP0L
                                    173 	.globl _DPL
                                    174 	.globl _DP0H
                                    175 	.globl _DPH
                                    176 	.globl _B
                                    177 	.globl _ACC
                                    178 	.globl _EECON
                                    179 	.globl _KBF
                                    180 	.globl _KBE
                                    181 	.globl _KBLS
                                    182 	.globl _BRL
                                    183 	.globl _BDRCON
                                    184 	.globl _T2MOD
                                    185 	.globl _SPDAT
                                    186 	.globl _SPSTA
                                    187 	.globl _SPCON
                                    188 	.globl _SADEN
                                    189 	.globl _SADDR
                                    190 	.globl _WDTPRG
                                    191 	.globl _WDTRST
                                    192 	.globl _P5
                                    193 	.globl _P4
                                    194 	.globl _IPH1
                                    195 	.globl _IPL1
                                    196 	.globl _IPH0
                                    197 	.globl _IPL0
                                    198 	.globl _IEN1
                                    199 	.globl _IEN0
                                    200 	.globl _CMOD
                                    201 	.globl _CL
                                    202 	.globl _CH
                                    203 	.globl _CCON
                                    204 	.globl _CCAPM4
                                    205 	.globl _CCAPM3
                                    206 	.globl _CCAPM2
                                    207 	.globl _CCAPM1
                                    208 	.globl _CCAPM0
                                    209 	.globl _CCAP4L
                                    210 	.globl _CCAP3L
                                    211 	.globl _CCAP2L
                                    212 	.globl _CCAP1L
                                    213 	.globl _CCAP0L
                                    214 	.globl _CCAP4H
                                    215 	.globl _CCAP3H
                                    216 	.globl _CCAP2H
                                    217 	.globl _CCAP1H
                                    218 	.globl _CCAP0H
                                    219 	.globl _CKCON1
                                    220 	.globl _CKCON0
                                    221 	.globl _CKRL
                                    222 	.globl _AUXR1
                                    223 	.globl _AUXR
                                    224 	.globl _TH2
                                    225 	.globl _TL2
                                    226 	.globl _RCAP2H
                                    227 	.globl _RCAP2L
                                    228 	.globl _T2CON
                                    229 	.globl _transmit_tcp_packet_PARM_2
                                    230 	.globl _print_hexdump_PARM_2
                                    231 	.globl _process_tcp_packet_PARM_3
                                    232 	.globl _process_tcp_packet_PARM_2
                                    233 	.globl _calculate_checksum_PARM_2
                                    234 	.globl _calculate_checksum
                                    235 	.globl _process_tcp_packet
                                    236 	.globl _print_hexdump
                                    237 	.globl _process_packet_from_buffer
                                    238 	.globl _transmit_tcp_packet
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           0000C8   244 _T2CON	=	0x00c8
                           0000CA   245 _RCAP2L	=	0x00ca
                           0000CB   246 _RCAP2H	=	0x00cb
                           0000CC   247 _TL2	=	0x00cc
                           0000CD   248 _TH2	=	0x00cd
                           00008E   249 _AUXR	=	0x008e
                           0000A2   250 _AUXR1	=	0x00a2
                           000097   251 _CKRL	=	0x0097
                           00008F   252 _CKCON0	=	0x008f
                           0000AF   253 _CKCON1	=	0x00af
                           0000FA   254 _CCAP0H	=	0x00fa
                           0000FB   255 _CCAP1H	=	0x00fb
                           0000FC   256 _CCAP2H	=	0x00fc
                           0000FD   257 _CCAP3H	=	0x00fd
                           0000FE   258 _CCAP4H	=	0x00fe
                           0000EA   259 _CCAP0L	=	0x00ea
                           0000EB   260 _CCAP1L	=	0x00eb
                           0000EC   261 _CCAP2L	=	0x00ec
                           0000ED   262 _CCAP3L	=	0x00ed
                           0000EE   263 _CCAP4L	=	0x00ee
                           0000DA   264 _CCAPM0	=	0x00da
                           0000DB   265 _CCAPM1	=	0x00db
                           0000DC   266 _CCAPM2	=	0x00dc
                           0000DD   267 _CCAPM3	=	0x00dd
                           0000DE   268 _CCAPM4	=	0x00de
                           0000D8   269 _CCON	=	0x00d8
                           0000F9   270 _CH	=	0x00f9
                           0000E9   271 _CL	=	0x00e9
                           0000D9   272 _CMOD	=	0x00d9
                           0000A8   273 _IEN0	=	0x00a8
                           0000B1   274 _IEN1	=	0x00b1
                           0000B8   275 _IPL0	=	0x00b8
                           0000B7   276 _IPH0	=	0x00b7
                           0000B2   277 _IPL1	=	0x00b2
                           0000B3   278 _IPH1	=	0x00b3
                           0000C0   279 _P4	=	0x00c0
                           0000E8   280 _P5	=	0x00e8
                           0000A6   281 _WDTRST	=	0x00a6
                           0000A7   282 _WDTPRG	=	0x00a7
                           0000A9   283 _SADDR	=	0x00a9
                           0000B9   284 _SADEN	=	0x00b9
                           0000C3   285 _SPCON	=	0x00c3
                           0000C4   286 _SPSTA	=	0x00c4
                           0000C5   287 _SPDAT	=	0x00c5
                           0000C9   288 _T2MOD	=	0x00c9
                           00009B   289 _BDRCON	=	0x009b
                           00009A   290 _BRL	=	0x009a
                           00009C   291 _KBLS	=	0x009c
                           00009D   292 _KBE	=	0x009d
                           00009E   293 _KBF	=	0x009e
                           0000D2   294 _EECON	=	0x00d2
                           0000E0   295 _ACC	=	0x00e0
                           0000F0   296 _B	=	0x00f0
                           000083   297 _DPH	=	0x0083
                           000083   298 _DP0H	=	0x0083
                           000082   299 _DPL	=	0x0082
                           000082   300 _DP0L	=	0x0082
                           0000A8   301 _IE	=	0x00a8
                           0000B8   302 _IP	=	0x00b8
                           000080   303 _P0	=	0x0080
                           000090   304 _P1	=	0x0090
                           0000A0   305 _P2	=	0x00a0
                           0000B0   306 _P3	=	0x00b0
                           000087   307 _PCON	=	0x0087
                           0000D0   308 _PSW	=	0x00d0
                           000099   309 _SBUF	=	0x0099
                           000099   310 _SBUF0	=	0x0099
                           000098   311 _SCON	=	0x0098
                           000081   312 _SP	=	0x0081
                           000088   313 _TCON	=	0x0088
                           00008C   314 _TH0	=	0x008c
                           00008D   315 _TH1	=	0x008d
                           00008A   316 _TL0	=	0x008a
                           00008B   317 _TL1	=	0x008b
                           000089   318 _TMOD	=	0x0089
                                    319 ;--------------------------------------------------------
                                    320 ; special function bits
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           0000AD   324 _ET2	=	0x00ad
                           0000BD   325 _PT2	=	0x00bd
                           0000C8   326 _T2CON_0	=	0x00c8
                           0000C9   327 _T2CON_1	=	0x00c9
                           0000CA   328 _T2CON_2	=	0x00ca
                           0000CB   329 _T2CON_3	=	0x00cb
                           0000CC   330 _T2CON_4	=	0x00cc
                           0000CD   331 _T2CON_5	=	0x00cd
                           0000CE   332 _T2CON_6	=	0x00ce
                           0000CF   333 _T2CON_7	=	0x00cf
                           0000C8   334 _CP_RL2	=	0x00c8
                           0000C9   335 _C_T2	=	0x00c9
                           0000CA   336 _TR2	=	0x00ca
                           0000CB   337 _EXEN2	=	0x00cb
                           0000CC   338 _TCLK	=	0x00cc
                           0000CD   339 _RCLK	=	0x00cd
                           0000CE   340 _EXF2	=	0x00ce
                           0000CF   341 _TF2	=	0x00cf
                           0000DF   342 _CF	=	0x00df
                           0000DE   343 _CR	=	0x00de
                           0000DC   344 _CCF4	=	0x00dc
                           0000DB   345 _CCF3	=	0x00db
                           0000DA   346 _CCF2	=	0x00da
                           0000D9   347 _CCF1	=	0x00d9
                           0000D8   348 _CCF0	=	0x00d8
                           0000AE   349 _EC	=	0x00ae
                           0000BE   350 _PPCL	=	0x00be
                           0000BD   351 _PT2L	=	0x00bd
                           0000BC   352 _PSL	=	0x00bc
                           0000BB   353 _PT1L	=	0x00bb
                           0000BA   354 _PX1L	=	0x00ba
                           0000B9   355 _PT0L	=	0x00b9
                           0000B8   356 _PX0L	=	0x00b8
                           0000C0   357 _P4_0	=	0x00c0
                           0000C1   358 _P4_1	=	0x00c1
                           0000C2   359 _P4_2	=	0x00c2
                           0000C3   360 _P4_3	=	0x00c3
                           0000C4   361 _P4_4	=	0x00c4
                           0000C5   362 _P4_5	=	0x00c5
                           0000C6   363 _P4_6	=	0x00c6
                           0000C7   364 _P4_7	=	0x00c7
                           0000E8   365 _P5_0	=	0x00e8
                           0000E9   366 _P5_1	=	0x00e9
                           0000EA   367 _P5_2	=	0x00ea
                           0000EB   368 _P5_3	=	0x00eb
                           0000EC   369 _P5_4	=	0x00ec
                           0000ED   370 _P5_5	=	0x00ed
                           0000EE   371 _P5_6	=	0x00ee
                           0000EF   372 _P5_7	=	0x00ef
                           0000F0   373 _BREG_F0	=	0x00f0
                           0000F1   374 _BREG_F1	=	0x00f1
                           0000F2   375 _BREG_F2	=	0x00f2
                           0000F3   376 _BREG_F3	=	0x00f3
                           0000F4   377 _BREG_F4	=	0x00f4
                           0000F5   378 _BREG_F5	=	0x00f5
                           0000F6   379 _BREG_F6	=	0x00f6
                           0000F7   380 _BREG_F7	=	0x00f7
                           0000A8   381 _EX0	=	0x00a8
                           0000A9   382 _ET0	=	0x00a9
                           0000AA   383 _EX1	=	0x00aa
                           0000AB   384 _ET1	=	0x00ab
                           0000AC   385 _ES	=	0x00ac
                           0000AF   386 _EA	=	0x00af
                           0000B8   387 _PX0	=	0x00b8
                           0000B9   388 _PT0	=	0x00b9
                           0000BA   389 _PX1	=	0x00ba
                           0000BB   390 _PT1	=	0x00bb
                           0000BC   391 _PS	=	0x00bc
                           000080   392 _P0_0	=	0x0080
                           000081   393 _P0_1	=	0x0081
                           000082   394 _P0_2	=	0x0082
                           000083   395 _P0_3	=	0x0083
                           000084   396 _P0_4	=	0x0084
                           000085   397 _P0_5	=	0x0085
                           000086   398 _P0_6	=	0x0086
                           000087   399 _P0_7	=	0x0087
                           000090   400 _P1_0	=	0x0090
                           000091   401 _P1_1	=	0x0091
                           000092   402 _P1_2	=	0x0092
                           000093   403 _P1_3	=	0x0093
                           000094   404 _P1_4	=	0x0094
                           000095   405 _P1_5	=	0x0095
                           000096   406 _P1_6	=	0x0096
                           000097   407 _P1_7	=	0x0097
                           0000A0   408 _P2_0	=	0x00a0
                           0000A1   409 _P2_1	=	0x00a1
                           0000A2   410 _P2_2	=	0x00a2
                           0000A3   411 _P2_3	=	0x00a3
                           0000A4   412 _P2_4	=	0x00a4
                           0000A5   413 _P2_5	=	0x00a5
                           0000A6   414 _P2_6	=	0x00a6
                           0000A7   415 _P2_7	=	0x00a7
                           0000B0   416 _P3_0	=	0x00b0
                           0000B1   417 _P3_1	=	0x00b1
                           0000B2   418 _P3_2	=	0x00b2
                           0000B3   419 _P3_3	=	0x00b3
                           0000B4   420 _P3_4	=	0x00b4
                           0000B5   421 _P3_5	=	0x00b5
                           0000B6   422 _P3_6	=	0x00b6
                           0000B7   423 _P3_7	=	0x00b7
                           0000B0   424 _RXD	=	0x00b0
                           0000B0   425 _RXD0	=	0x00b0
                           0000B1   426 _TXD	=	0x00b1
                           0000B1   427 _TXD0	=	0x00b1
                           0000B2   428 _INT0	=	0x00b2
                           0000B3   429 _INT1	=	0x00b3
                           0000B4   430 _T0	=	0x00b4
                           0000B5   431 _T1	=	0x00b5
                           0000B6   432 _WR	=	0x00b6
                           0000B7   433 _RD	=	0x00b7
                           0000D0   434 _P	=	0x00d0
                           0000D1   435 _F1	=	0x00d1
                           0000D2   436 _OV	=	0x00d2
                           0000D3   437 _RS0	=	0x00d3
                           0000D4   438 _RS1	=	0x00d4
                           0000D5   439 _F0	=	0x00d5
                           0000D6   440 _AC	=	0x00d6
                           0000D7   441 _CY	=	0x00d7
                           000098   442 _RI	=	0x0098
                           000099   443 _TI	=	0x0099
                           00009A   444 _RB8	=	0x009a
                           00009B   445 _TB8	=	0x009b
                           00009C   446 _REN	=	0x009c
                           00009D   447 _SM2	=	0x009d
                           00009E   448 _SM1	=	0x009e
                           00009F   449 _SM0	=	0x009f
                           000088   450 _IT0	=	0x0088
                           000089   451 _IE0	=	0x0089
                           00008A   452 _IT1	=	0x008a
                           00008B   453 _IE1	=	0x008b
                           00008C   454 _TR0	=	0x008c
                           00008D   455 _TF0	=	0x008d
                           00008E   456 _TR1	=	0x008e
                           00008F   457 _TF1	=	0x008f
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable register banks
                                    460 ;--------------------------------------------------------
                                    461 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        462 	.ds 8
                                    463 ;--------------------------------------------------------
                                    464 ; internal ram data
                                    465 ;--------------------------------------------------------
                                    466 	.area DSEG    (DATA)
      000000                        467 _process_tcp_packet_sloc0_1_0:
      000000                        468 	.ds 3
      000003                        469 _process_packet_from_buffer_sloc0_1_0:
      000003                        470 	.ds 3
                                    471 ;--------------------------------------------------------
                                    472 ; overlayable items in internal ram
                                    473 ;--------------------------------------------------------
                                    474 	.area	OSEG    (OVR,DATA)
      000000                        475 _calculate_checksum_sloc0_1_0:
      000000                        476 	.ds 2
      000002                        477 _calculate_checksum_sloc1_1_0:
      000002                        478 	.ds 4
      000006                        479 _calculate_checksum_sloc2_1_0:
      000006                        480 	.ds 4
                                    481 ;--------------------------------------------------------
                                    482 ; indirectly addressable internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area ISEG    (DATA)
                                    485 ;--------------------------------------------------------
                                    486 ; absolute internal ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area IABS    (ABS,DATA)
                                    489 	.area IABS    (ABS,DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; bit data
                                    492 ;--------------------------------------------------------
                                    493 	.area BSEG    (BIT)
                                    494 ;--------------------------------------------------------
                                    495 ; paged external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area PSEG    (PAG,XDATA)
                                    498 ;--------------------------------------------------------
                                    499 ; uninitialized external ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area XSEG    (XDATA)
      000000                        502 _calculate_checksum_PARM_2:
      000000                        503 	.ds 2
      000002                        504 _calculate_checksum_data_10000_116:
      000002                        505 	.ds 3
      000005                        506 _calculate_checksum_sum_10000_117:
      000005                        507 	.ds 4
      000009                        508 _calculate_checksum_i_20000_118:
      000009                        509 	.ds 2
      00000B                        510 _process_tcp_packet_PARM_2:
      00000B                        511 	.ds 2
      00000D                        512 _process_tcp_packet_PARM_3:
      00000D                        513 	.ds 3
      000010                        514 _process_tcp_packet_packet_10000_121:
      000010                        515 	.ds 3
      000013                        516 _process_tcp_packet_response_10000_122:
      000013                        517 	.ds 1501
      0005F0                        518 _print_hexdump_PARM_2:
      0005F0                        519 	.ds 2
      0005F2                        520 _print_hexdump_data_10000_131:
      0005F2                        521 	.ds 3
      0005F5                        522 _process_packet_from_buffer_start_address_10000_137:
      0005F5                        523 	.ds 2
      0005F7                        524 _process_packet_from_buffer_next_packet_start_10001_140:
      0005F7                        525 	.ds 2
      0005F9                        526 _process_packet_from_buffer_response_size_10001_140:
      0005F9                        527 	.ds 2
      0005FB                        528 _transmit_tcp_packet_PARM_2:
      0005FB                        529 	.ds 2
      0005FD                        530 _transmit_tcp_packet_packet_10000_149:
      0005FD                        531 	.ds 3
                                    532 ;--------------------------------------------------------
                                    533 ; absolute external ram data
                                    534 ;--------------------------------------------------------
                                    535 	.area XABS    (ABS,XDATA)
                                    536 ;--------------------------------------------------------
                                    537 ; initialized external ram data
                                    538 ;--------------------------------------------------------
                                    539 	.area XISEG   (XDATA)
                                    540 	.area HOME    (CODE)
                                    541 	.area GSINIT0 (CODE)
                                    542 	.area GSINIT1 (CODE)
                                    543 	.area GSINIT2 (CODE)
                                    544 	.area GSINIT3 (CODE)
                                    545 	.area GSINIT4 (CODE)
                                    546 	.area GSINIT5 (CODE)
                                    547 	.area GSINIT  (CODE)
                                    548 	.area GSFINAL (CODE)
                                    549 	.area CSEG    (CODE)
                                    550 ;--------------------------------------------------------
                                    551 ; global & static initialisations
                                    552 ;--------------------------------------------------------
                                    553 	.area HOME    (CODE)
                                    554 	.area GSINIT  (CODE)
                                    555 	.area GSFINAL (CODE)
                                    556 	.area GSINIT  (CODE)
                                    557 ;--------------------------------------------------------
                                    558 ; Home
                                    559 ;--------------------------------------------------------
                                    560 	.area HOME    (CODE)
                                    561 	.area HOME    (CODE)
                                    562 ;--------------------------------------------------------
                                    563 ; code
                                    564 ;--------------------------------------------------------
                                    565 	.area CSEG    (CODE)
                                    566 ;------------------------------------------------------------
                                    567 ;Allocation info for local variables in function 'calculate_checksum'
                                    568 ;------------------------------------------------------------
                                    569 ;length                    Allocated with name '_calculate_checksum_PARM_2'
                                    570 ;data                      Allocated with name '_calculate_checksum_data_10000_116'
                                    571 ;sum                       Allocated with name '_calculate_checksum_sum_10000_117'
                                    572 ;i                         Allocated with name '_calculate_checksum_i_20000_118'
                                    573 ;word                      Allocated with name '_calculate_checksum_word_30000_119'
                                    574 ;sloc0                     Allocated with name '_calculate_checksum_sloc0_1_0'
                                    575 ;sloc1                     Allocated with name '_calculate_checksum_sloc1_1_0'
                                    576 ;sloc2                     Allocated with name '_calculate_checksum_sloc2_1_0'
                                    577 ;------------------------------------------------------------
                                    578 ;	tcp.c:12: uint16_t calculate_checksum(uint8_t *data, uint16_t length) {
                                    579 ;	-----------------------------------------
                                    580 ;	 function calculate_checksum
                                    581 ;	-----------------------------------------
      000000                        582 _calculate_checksum:
                           000007   583 	ar7 = 0x07
                           000006   584 	ar6 = 0x06
                           000005   585 	ar5 = 0x05
                           000004   586 	ar4 = 0x04
                           000003   587 	ar3 = 0x03
                           000002   588 	ar2 = 0x02
                           000001   589 	ar1 = 0x01
                           000000   590 	ar0 = 0x00
      000000 AF F0            [24]  591 	mov	r7,b
      000002 AE 83            [24]  592 	mov	r6,dph
      000004 E5 82            [12]  593 	mov	a,dpl
      000006 90r00r02         [24]  594 	mov	dptr,#_calculate_checksum_data_10000_116
      000009 F0               [24]  595 	movx	@dptr,a
      00000A EE               [12]  596 	mov	a,r6
      00000B A3               [24]  597 	inc	dptr
      00000C F0               [24]  598 	movx	@dptr,a
      00000D EF               [12]  599 	mov	a,r7
      00000E A3               [24]  600 	inc	dptr
      00000F F0               [24]  601 	movx	@dptr,a
                                    602 ;	tcp.c:13: uint32_t sum = 0;
      000010 90r00r05         [24]  603 	mov	dptr,#_calculate_checksum_sum_10000_117
      000013 E4               [12]  604 	clr	a
      000014 F0               [24]  605 	movx	@dptr,a
      000015 A3               [24]  606 	inc	dptr
      000016 F0               [24]  607 	movx	@dptr,a
      000017 A3               [24]  608 	inc	dptr
      000018 F0               [24]  609 	movx	@dptr,a
      000019 A3               [24]  610 	inc	dptr
      00001A F0               [24]  611 	movx	@dptr,a
                                    612 ;	tcp.c:16: for (uint16_t i = 0; i < length; i += 2) {
      00001B 90r00r09         [24]  613 	mov	dptr,#_calculate_checksum_i_20000_118
      00001E F0               [24]  614 	movx	@dptr,a
      00001F A3               [24]  615 	inc	dptr
      000020 F0               [24]  616 	movx	@dptr,a
      000021 90r00r02         [24]  617 	mov	dptr,#_calculate_checksum_data_10000_116
      000024 E0               [24]  618 	movx	a,@dptr
      000025 FD               [12]  619 	mov	r5,a
      000026 A3               [24]  620 	inc	dptr
      000027 E0               [24]  621 	movx	a,@dptr
      000028 FE               [12]  622 	mov	r6,a
      000029 A3               [24]  623 	inc	dptr
      00002A E0               [24]  624 	movx	a,@dptr
      00002B FF               [12]  625 	mov	r7,a
      00002C 90r00r00         [24]  626 	mov	dptr,#_calculate_checksum_PARM_2
      00002F E0               [24]  627 	movx	a,@dptr
      000030 F5*00            [12]  628 	mov	_calculate_checksum_sloc0_1_0,a
      000032 A3               [24]  629 	inc	dptr
      000033 E0               [24]  630 	movx	a,@dptr
      000034 F5*01            [12]  631 	mov	(_calculate_checksum_sloc0_1_0 + 1),a
      000036                        632 00105$:
      000036 90r00r09         [24]  633 	mov	dptr,#_calculate_checksum_i_20000_118
      000039 E0               [24]  634 	movx	a,@dptr
      00003A F9               [12]  635 	mov	r1,a
      00003B A3               [24]  636 	inc	dptr
      00003C E0               [24]  637 	movx	a,@dptr
      00003D FA               [12]  638 	mov	r2,a
      00003E C3               [12]  639 	clr	c
      00003F E9               [12]  640 	mov	a,r1
      000040 95*00            [12]  641 	subb	a,_calculate_checksum_sloc0_1_0
      000042 EA               [12]  642 	mov	a,r2
      000043 95*01            [12]  643 	subb	a,(_calculate_checksum_sloc0_1_0 + 1)
      000045 40 03            [24]  644 	jc	00135$
      000047 02r01r36         [24]  645 	ljmp	00103$
      00004A                        646 00135$:
                                    647 ;	tcp.c:17: uint16_t word = (data[i] << 8) + (i + 1 < length ? data[i + 1] : 0);
      00004A E9               [12]  648 	mov	a,r1
      00004B 2D               [12]  649 	add	a, r5
      00004C F8               [12]  650 	mov	r0,a
      00004D EA               [12]  651 	mov	a,r2
      00004E 3E               [12]  652 	addc	a, r6
      00004F FB               [12]  653 	mov	r3,a
      000050 8F 04            [24]  654 	mov	ar4,r7
      000052 88 82            [24]  655 	mov	dpl,r0
      000054 8B 83            [24]  656 	mov	dph,r3
      000056 8C F0            [24]  657 	mov	b,r4
      000058 12r00r00         [24]  658 	lcall	__gptrget
      00005B FC               [12]  659 	mov	r4,a
      00005C 7B 00            [12]  660 	mov	r3,#0x00
      00005E C0 05            [24]  661 	push	ar5
      000060 C0 06            [24]  662 	push	ar6
      000062 C0 07            [24]  663 	push	ar7
      000064 74 01            [12]  664 	mov	a,#0x01
      000066 29               [12]  665 	add	a, r1
      000067 F8               [12]  666 	mov	r0,a
      000068 E4               [12]  667 	clr	a
      000069 3A               [12]  668 	addc	a, r2
      00006A FF               [12]  669 	mov	r7,a
      00006B C3               [12]  670 	clr	c
      00006C E8               [12]  671 	mov	a,r0
      00006D 95*00            [12]  672 	subb	a,_calculate_checksum_sloc0_1_0
      00006F EF               [12]  673 	mov	a,r7
      000070 95*01            [12]  674 	subb	a,(_calculate_checksum_sloc0_1_0 + 1)
      000072 D0 07            [24]  675 	pop	ar7
      000074 D0 06            [24]  676 	pop	ar6
      000076 D0 05            [24]  677 	pop	ar5
      000078 50 1B            [24]  678 	jnc	00109$
      00007A 09               [12]  679 	inc	r1
      00007B B9 00 01         [24]  680 	cjne	r1,#0x00,00137$
      00007E 0A               [12]  681 	inc	r2
      00007F                        682 00137$:
      00007F E9               [12]  683 	mov	a,r1
      000080 2D               [12]  684 	add	a, r5
      000081 F9               [12]  685 	mov	r1,a
      000082 EA               [12]  686 	mov	a,r2
      000083 3E               [12]  687 	addc	a, r6
      000084 F8               [12]  688 	mov	r0,a
      000085 8F 02            [24]  689 	mov	ar2,r7
      000087 89 82            [24]  690 	mov	dpl,r1
      000089 88 83            [24]  691 	mov	dph,r0
      00008B 8A F0            [24]  692 	mov	b,r2
      00008D 12r00r00         [24]  693 	lcall	__gptrget
      000090 F9               [12]  694 	mov	r1,a
      000091 7A 00            [12]  695 	mov	r2,#0x00
      000093 80 04            [24]  696 	sjmp	00110$
      000095                        697 00109$:
      000095 79 00            [12]  698 	mov	r1,#0x00
      000097 7A 00            [12]  699 	mov	r2,#0x00
      000099                        700 00110$:
      000099 C0 05            [24]  701 	push	ar5
      00009B C0 06            [24]  702 	push	ar6
      00009D C0 07            [24]  703 	push	ar7
      00009F E9               [12]  704 	mov	a,r1
      0000A0 2B               [12]  705 	add	a, r3
      0000A1 FB               [12]  706 	mov	r3,a
      0000A2 EA               [12]  707 	mov	a,r2
      0000A3 3C               [12]  708 	addc	a, r4
      0000A4 FC               [12]  709 	mov	r4,a
                                    710 ;	tcp.c:18: sum += word;
      0000A5 90r00r05         [24]  711 	mov	dptr,#_calculate_checksum_sum_10000_117
      0000A8 E0               [24]  712 	movx	a,@dptr
      0000A9 F8               [12]  713 	mov	r0,a
      0000AA A3               [24]  714 	inc	dptr
      0000AB E0               [24]  715 	movx	a,@dptr
      0000AC F9               [12]  716 	mov	r1,a
      0000AD A3               [24]  717 	inc	dptr
      0000AE E0               [24]  718 	movx	a,@dptr
      0000AF FA               [12]  719 	mov	r2,a
      0000B0 A3               [24]  720 	inc	dptr
      0000B1 E0               [24]  721 	movx	a,@dptr
      0000B2 FF               [12]  722 	mov	r7,a
      0000B3 7E 00            [12]  723 	mov	r6,#0x00
      0000B5 7D 00            [12]  724 	mov	r5,#0x00
      0000B7 90r00r05         [24]  725 	mov	dptr,#_calculate_checksum_sum_10000_117
      0000BA EB               [12]  726 	mov	a,r3
      0000BB 28               [12]  727 	add	a, r0
      0000BC F0               [24]  728 	movx	@dptr,a
      0000BD EC               [12]  729 	mov	a,r4
      0000BE 39               [12]  730 	addc	a, r1
      0000BF A3               [24]  731 	inc	dptr
      0000C0 F0               [24]  732 	movx	@dptr,a
      0000C1 EE               [12]  733 	mov	a,r6
      0000C2 3A               [12]  734 	addc	a, r2
      0000C3 A3               [24]  735 	inc	dptr
      0000C4 F0               [24]  736 	movx	@dptr,a
      0000C5 ED               [12]  737 	mov	a,r5
      0000C6 3F               [12]  738 	addc	a, r7
      0000C7 A3               [24]  739 	inc	dptr
      0000C8 F0               [24]  740 	movx	@dptr,a
                                    741 ;	tcp.c:21: if (sum > 0xFFFF) {
      0000C9 90r00r05         [24]  742 	mov	dptr,#_calculate_checksum_sum_10000_117
      0000CC E0               [24]  743 	movx	a,@dptr
      0000CD F5*02            [12]  744 	mov	_calculate_checksum_sloc1_1_0,a
      0000CF A3               [24]  745 	inc	dptr
      0000D0 E0               [24]  746 	movx	a,@dptr
      0000D1 F5*03            [12]  747 	mov	(_calculate_checksum_sloc1_1_0 + 1),a
      0000D3 A3               [24]  748 	inc	dptr
      0000D4 E0               [24]  749 	movx	a,@dptr
      0000D5 F5*04            [12]  750 	mov	(_calculate_checksum_sloc1_1_0 + 2),a
      0000D7 A3               [24]  751 	inc	dptr
      0000D8 E0               [24]  752 	movx	a,@dptr
      0000D9 F5*05            [12]  753 	mov	(_calculate_checksum_sloc1_1_0 + 3),a
      0000DB C3               [12]  754 	clr	c
      0000DC 74 FF            [12]  755 	mov	a,#0xff
      0000DE 95*02            [12]  756 	subb	a,_calculate_checksum_sloc1_1_0
      0000E0 74 FF            [12]  757 	mov	a,#0xff
      0000E2 95*03            [12]  758 	subb	a,(_calculate_checksum_sloc1_1_0 + 1)
      0000E4 E4               [12]  759 	clr	a
      0000E5 95*04            [12]  760 	subb	a,(_calculate_checksum_sloc1_1_0 + 2)
      0000E7 E4               [12]  761 	clr	a
      0000E8 95*05            [12]  762 	subb	a,(_calculate_checksum_sloc1_1_0 + 3)
      0000EA D0 07            [24]  763 	pop	ar7
      0000EC D0 06            [24]  764 	pop	ar6
      0000EE D0 05            [24]  765 	pop	ar5
      0000F0 50 2A            [24]  766 	jnc	00106$
                                    767 ;	tcp.c:22: sum = (sum & 0xFFFF) + (sum >> 16);
      0000F2 85*02*06         [24]  768 	mov	_calculate_checksum_sloc2_1_0,_calculate_checksum_sloc1_1_0
      0000F5 85*03*07         [24]  769 	mov	(_calculate_checksum_sloc2_1_0 + 1),(_calculate_checksum_sloc1_1_0 + 1)
      0000F8 75*08 00         [24]  770 	mov	(_calculate_checksum_sloc2_1_0 + 2),#0x00
      0000FB 75*09 00         [24]  771 	mov	(_calculate_checksum_sloc2_1_0 + 3),#0x00
      0000FE A8*04            [24]  772 	mov	r0,(_calculate_checksum_sloc1_1_0 + 2)
      000100 AA*05            [24]  773 	mov	r2,(_calculate_checksum_sloc1_1_0 + 3)
      000102 7B 00            [12]  774 	mov	r3,#0x00
      000104 7C 00            [12]  775 	mov	r4,#0x00
      000106 90r00r05         [24]  776 	mov	dptr,#_calculate_checksum_sum_10000_117
      000109 E8               [12]  777 	mov	a,r0
      00010A 25*06            [12]  778 	add	a, _calculate_checksum_sloc2_1_0
      00010C F0               [24]  779 	movx	@dptr,a
      00010D EA               [12]  780 	mov	a,r2
      00010E 35*07            [12]  781 	addc	a, (_calculate_checksum_sloc2_1_0 + 1)
      000110 A3               [24]  782 	inc	dptr
      000111 F0               [24]  783 	movx	@dptr,a
      000112 EB               [12]  784 	mov	a,r3
      000113 35*08            [12]  785 	addc	a, (_calculate_checksum_sloc2_1_0 + 2)
      000115 A3               [24]  786 	inc	dptr
      000116 F0               [24]  787 	movx	@dptr,a
      000117 EC               [12]  788 	mov	a,r4
      000118 35*09            [12]  789 	addc	a, (_calculate_checksum_sloc2_1_0 + 3)
      00011A A3               [24]  790 	inc	dptr
      00011B F0               [24]  791 	movx	@dptr,a
      00011C                        792 00106$:
                                    793 ;	tcp.c:16: for (uint16_t i = 0; i < length; i += 2) {
      00011C 90r00r09         [24]  794 	mov	dptr,#_calculate_checksum_i_20000_118
      00011F E0               [24]  795 	movx	a,@dptr
      000120 FB               [12]  796 	mov	r3,a
      000121 A3               [24]  797 	inc	dptr
      000122 E0               [24]  798 	movx	a,@dptr
      000123 FC               [12]  799 	mov	r4,a
      000124 74 02            [12]  800 	mov	a,#0x02
      000126 2B               [12]  801 	add	a, r3
      000127 FB               [12]  802 	mov	r3,a
      000128 E4               [12]  803 	clr	a
      000129 3C               [12]  804 	addc	a, r4
      00012A FC               [12]  805 	mov	r4,a
      00012B 90r00r09         [24]  806 	mov	dptr,#_calculate_checksum_i_20000_118
      00012E EB               [12]  807 	mov	a,r3
      00012F F0               [24]  808 	movx	@dptr,a
      000130 EC               [12]  809 	mov	a,r4
      000131 A3               [24]  810 	inc	dptr
      000132 F0               [24]  811 	movx	@dptr,a
      000133 02r00r36         [24]  812 	ljmp	00105$
      000136                        813 00103$:
                                    814 ;	tcp.c:27: sum = (sum & 0xFFFF) + (sum >> 16);
      000136 90r00r05         [24]  815 	mov	dptr,#_calculate_checksum_sum_10000_117
      000139 E0               [24]  816 	movx	a,@dptr
      00013A FC               [12]  817 	mov	r4,a
      00013B A3               [24]  818 	inc	dptr
      00013C E0               [24]  819 	movx	a,@dptr
      00013D FD               [12]  820 	mov	r5,a
      00013E A3               [24]  821 	inc	dptr
      00013F E0               [24]  822 	movx	a,@dptr
      000140 FE               [12]  823 	mov	r6,a
      000141 A3               [24]  824 	inc	dptr
      000142 E0               [24]  825 	movx	a,@dptr
      000143 FF               [12]  826 	mov	r7,a
      000144 8C 00            [24]  827 	mov	ar0,r4
      000146 8D 01            [24]  828 	mov	ar1,r5
      000148 7A 00            [12]  829 	mov	r2,#0x00
      00014A 7B 00            [12]  830 	mov	r3,#0x00
      00014C 8E 04            [24]  831 	mov	ar4,r6
      00014E 8F 05            [24]  832 	mov	ar5,r7
      000150 7E 00            [12]  833 	mov	r6,#0x00
      000152 7F 00            [12]  834 	mov	r7,#0x00
      000154 90r00r05         [24]  835 	mov	dptr,#_calculate_checksum_sum_10000_117
      000157 EC               [12]  836 	mov	a,r4
      000158 28               [12]  837 	add	a, r0
      000159 F0               [24]  838 	movx	@dptr,a
      00015A ED               [12]  839 	mov	a,r5
      00015B 39               [12]  840 	addc	a, r1
      00015C A3               [24]  841 	inc	dptr
      00015D F0               [24]  842 	movx	@dptr,a
      00015E EE               [12]  843 	mov	a,r6
      00015F 3A               [12]  844 	addc	a, r2
      000160 A3               [24]  845 	inc	dptr
      000161 F0               [24]  846 	movx	@dptr,a
      000162 EF               [12]  847 	mov	a,r7
      000163 3B               [12]  848 	addc	a, r3
      000164 A3               [24]  849 	inc	dptr
      000165 F0               [24]  850 	movx	@dptr,a
                                    851 ;	tcp.c:30: return ~sum;
      000166 90r00r05         [24]  852 	mov	dptr,#_calculate_checksum_sum_10000_117
      000169 E0               [24]  853 	movx	a,@dptr
      00016A FC               [12]  854 	mov	r4,a
      00016B A3               [24]  855 	inc	dptr
      00016C E0               [24]  856 	movx	a,@dptr
      00016D FD               [12]  857 	mov	r5,a
      00016E A3               [24]  858 	inc	dptr
      00016F E0               [24]  859 	movx	a,@dptr
      000170 FE               [12]  860 	mov	r6,a
      000171 A3               [24]  861 	inc	dptr
      000172 E0               [24]  862 	movx	a,@dptr
      000173 FF               [12]  863 	mov	r7,a
      000174 EC               [12]  864 	mov	a,r4
      000175 F4               [12]  865 	cpl	a
      000176 FC               [12]  866 	mov	r4,a
      000177 ED               [12]  867 	mov	a,r5
      000178 F4               [12]  868 	cpl	a
      000179 FD               [12]  869 	mov	r5,a
      00017A EE               [12]  870 	mov	a,r6
      00017B F4               [12]  871 	cpl	a
      00017C EF               [12]  872 	mov	a,r7
      00017D F4               [12]  873 	cpl	a
      00017E 8C 82            [24]  874 	mov	dpl, r4
      000180 8D 83            [24]  875 	mov	dph, r5
                                    876 ;	tcp.c:31: }
      000182 22               [24]  877 	ret
                                    878 ;------------------------------------------------------------
                                    879 ;Allocation info for local variables in function 'process_tcp_packet'
                                    880 ;------------------------------------------------------------
                                    881 ;sloc0                     Allocated with name '_process_tcp_packet_sloc0_1_0'
                                    882 ;packet_size               Allocated with name '_process_tcp_packet_PARM_2'
                                    883 ;response_size             Allocated with name '_process_tcp_packet_PARM_3'
                                    884 ;packet                    Allocated with name '_process_tcp_packet_packet_10000_121'
                                    885 ;response                  Allocated with name '_process_tcp_packet_response_10000_122'
                                    886 ;data_start                Allocated with name '_process_tcp_packet_data_start_10001_123'
                                    887 ;ethernet_header           Allocated with name '_process_tcp_packet_ethernet_header_10001_123'
                                    888 ;response_ethernet_header  Allocated with name '_process_tcp_packet_response_ethernet_header_10001_123'
                                    889 ;ip_header                 Allocated with name '_process_tcp_packet_ip_header_10002_124'
                                    890 ;response_ip_header        Allocated with name '_process_tcp_packet_response_ip_header_10002_124'
                                    891 ;tcp_header                Allocated with name '_process_tcp_packet_tcp_header_10003_125'
                                    892 ;response_tcp_header       Allocated with name '_process_tcp_packet_response_tcp_header_10003_125'
                                    893 ;SYN_SEQ3                  Allocated with name '_process_tcp_packet_SYN_SEQ3_10004_126'
                                    894 ;SYN_SEQ2                  Allocated with name '_process_tcp_packet_SYN_SEQ2_10004_126'
                                    895 ;SYN_SEQ1                  Allocated with name '_process_tcp_packet_SYN_SEQ1_10004_126'
                                    896 ;SYN_SEQ0                  Allocated with name '_process_tcp_packet_SYN_SEQ0_10004_126'
                                    897 ;tcp_length                Allocated with name '_process_tcp_packet_tcp_length_10005_127'
                                    898 ;ip_total_length           Allocated with name '_process_tcp_packet_ip_total_length_10005_127'
                                    899 ;ip_checksum               Allocated with name '_process_tcp_packet_ip_checksum_10006_128'
                                    900 ;tcp_checksum              Allocated with name '_process_tcp_packet_tcp_checksum_10007_129'
                                    901 ;tcp_options               Allocated with name '_process_tcp_packet_tcp_options_10008_130'
                                    902 ;------------------------------------------------------------
                                    903 ;	tcp.c:32: uint8_t* process_tcp_packet(uint8_t *packet, uint16_t packet_size, uint16_t *response_size) {
                                    904 ;	-----------------------------------------
                                    905 ;	 function process_tcp_packet
                                    906 ;	-----------------------------------------
      000183                        907 _process_tcp_packet:
      000183 AF F0            [24]  908 	mov	r7,b
      000185 AE 83            [24]  909 	mov	r6,dph
      000187 E5 82            [12]  910 	mov	a,dpl
      000189 90r00r10         [24]  911 	mov	dptr,#_process_tcp_packet_packet_10000_121
      00018C F0               [24]  912 	movx	@dptr,a
      00018D EE               [12]  913 	mov	a,r6
      00018E A3               [24]  914 	inc	dptr
      00018F F0               [24]  915 	movx	@dptr,a
      000190 EF               [12]  916 	mov	a,r7
      000191 A3               [24]  917 	inc	dptr
      000192 F0               [24]  918 	movx	@dptr,a
                                    919 ;	tcp.c:34: memset(response, 0, MAX_PACKET_SIZE + 1);      // Clear the response buffer
      000193 90r00r00         [24]  920 	mov	dptr,#_memset_PARM_2
      000196 E4               [12]  921 	clr	a
      000197 F0               [24]  922 	movx	@dptr,a
      000198 90r00r00         [24]  923 	mov	dptr,#_memset_PARM_3
      00019B 74 DD            [12]  924 	mov	a,#0xdd
      00019D F0               [24]  925 	movx	@dptr,a
      00019E 74 05            [12]  926 	mov	a,#0x05
      0001A0 A3               [24]  927 	inc	dptr
      0001A1 F0               [24]  928 	movx	@dptr,a
      0001A2 90r00r13         [24]  929 	mov	dptr,#_process_tcp_packet_response_10000_122
      0001A5 75 F0 00         [24]  930 	mov	b, #0x00
      0001A8 12r00r00         [24]  931 	lcall	_memset
                                    932 ;	tcp.c:36: response[0] = 0x0E;  // Ensure the first byte of the response is always 0x0E
      0001AB 90r00r13         [24]  933 	mov	dptr,#_process_tcp_packet_response_10000_122
      0001AE 74 0E            [12]  934 	mov	a,#0x0e
      0001B0 F0               [24]  935 	movx	@dptr,a
                                    936 ;	tcp.c:39: uint8_t *data_start = response + 1;
                                    937 ;	tcp.c:42: uint8_t *ethernet_header = packet;
      0001B1 90r00r10         [24]  938 	mov	dptr,#_process_tcp_packet_packet_10000_121
      0001B4 E0               [24]  939 	movx	a,@dptr
      0001B5 FD               [12]  940 	mov	r5,a
      0001B6 A3               [24]  941 	inc	dptr
      0001B7 E0               [24]  942 	movx	a,@dptr
      0001B8 FE               [12]  943 	mov	r6,a
      0001B9 A3               [24]  944 	inc	dptr
      0001BA E0               [24]  945 	movx	a,@dptr
      0001BB FF               [12]  946 	mov	r7,a
                                    947 ;	tcp.c:44: memcpy(response_ethernet_header, ethernet_header, ETHERNET_HEADER_SIZE);
      0001BC 8D 02            [24]  948 	mov	ar2,r5
      0001BE 8E 03            [24]  949 	mov	ar3,r6
      0001C0 8F 04            [24]  950 	mov	ar4,r7
      0001C2 90r00r00         [24]  951 	mov	dptr,#___memcpy_PARM_2
      0001C5 EA               [12]  952 	mov	a,r2
      0001C6 F0               [24]  953 	movx	@dptr,a
      0001C7 EB               [12]  954 	mov	a,r3
      0001C8 A3               [24]  955 	inc	dptr
      0001C9 F0               [24]  956 	movx	@dptr,a
      0001CA EC               [12]  957 	mov	a,r4
      0001CB A3               [24]  958 	inc	dptr
      0001CC F0               [24]  959 	movx	@dptr,a
      0001CD 90r00r00         [24]  960 	mov	dptr,#___memcpy_PARM_3
      0001D0 74 0E            [12]  961 	mov	a,#0x0e
      0001D2 F0               [24]  962 	movx	@dptr,a
      0001D3 E4               [12]  963 	clr	a
      0001D4 A3               [24]  964 	inc	dptr
      0001D5 F0               [24]  965 	movx	@dptr,a
      0001D6 90r00r14         [24]  966 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0001)
      0001D9 F5 F0            [12]  967 	mov	b,a
      0001DB C0 07            [24]  968 	push	ar7
      0001DD C0 06            [24]  969 	push	ar6
      0001DF C0 05            [24]  970 	push	ar5
      0001E1 12r00r00         [24]  971 	lcall	___memcpy
      0001E4 D0 05            [24]  972 	pop	ar5
      0001E6 D0 06            [24]  973 	pop	ar6
      0001E8 D0 07            [24]  974 	pop	ar7
                                    975 ;	tcp.c:47: memcpy(response_ethernet_header, ethernet_header + 6, 6);  // Destination MAC
      0001EA 74 06            [12]  976 	mov	a,#0x06
      0001EC 2D               [12]  977 	add	a, r5
      0001ED FA               [12]  978 	mov	r2,a
      0001EE E4               [12]  979 	clr	a
      0001EF 3E               [12]  980 	addc	a, r6
      0001F0 FB               [12]  981 	mov	r3,a
      0001F1 8F 04            [24]  982 	mov	ar4,r7
      0001F3 90r00r00         [24]  983 	mov	dptr,#___memcpy_PARM_2
      0001F6 EA               [12]  984 	mov	a,r2
      0001F7 F0               [24]  985 	movx	@dptr,a
      0001F8 EB               [12]  986 	mov	a,r3
      0001F9 A3               [24]  987 	inc	dptr
      0001FA F0               [24]  988 	movx	@dptr,a
      0001FB EC               [12]  989 	mov	a,r4
      0001FC A3               [24]  990 	inc	dptr
      0001FD F0               [24]  991 	movx	@dptr,a
      0001FE 90r00r00         [24]  992 	mov	dptr,#___memcpy_PARM_3
      000201 74 06            [12]  993 	mov	a,#0x06
      000203 F0               [24]  994 	movx	@dptr,a
      000204 E4               [12]  995 	clr	a
      000205 A3               [24]  996 	inc	dptr
      000206 F0               [24]  997 	movx	@dptr,a
      000207 90r00r14         [24]  998 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0001)
      00020A F5 F0            [12]  999 	mov	b,a
      00020C C0 07            [24] 1000 	push	ar7
      00020E C0 06            [24] 1001 	push	ar6
      000210 C0 05            [24] 1002 	push	ar5
      000212 12r00r00         [24] 1003 	lcall	___memcpy
      000215 D0 05            [24] 1004 	pop	ar5
      000217 D0 06            [24] 1005 	pop	ar6
      000219 D0 07            [24] 1006 	pop	ar7
                                   1007 ;	tcp.c:48: memcpy(response_ethernet_header + 6, ethernet_header, 6);  // Source MAC
      00021B 8D 02            [24] 1008 	mov	ar2,r5
      00021D 8E 03            [24] 1009 	mov	ar3,r6
      00021F 8F 04            [24] 1010 	mov	ar4,r7
      000221 90r00r00         [24] 1011 	mov	dptr,#___memcpy_PARM_2
      000224 EA               [12] 1012 	mov	a,r2
      000225 F0               [24] 1013 	movx	@dptr,a
      000226 EB               [12] 1014 	mov	a,r3
      000227 A3               [24] 1015 	inc	dptr
      000228 F0               [24] 1016 	movx	@dptr,a
      000229 EC               [12] 1017 	mov	a,r4
      00022A A3               [24] 1018 	inc	dptr
      00022B F0               [24] 1019 	movx	@dptr,a
      00022C 90r00r00         [24] 1020 	mov	dptr,#___memcpy_PARM_3
      00022F 74 06            [12] 1021 	mov	a,#0x06
      000231 F0               [24] 1022 	movx	@dptr,a
      000232 E4               [12] 1023 	clr	a
      000233 A3               [24] 1024 	inc	dptr
      000234 F0               [24] 1025 	movx	@dptr,a
      000235 90r00r1A         [24] 1026 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0007)
      000238 F5 F0            [12] 1027 	mov	b,a
      00023A C0 07            [24] 1028 	push	ar7
      00023C C0 06            [24] 1029 	push	ar6
      00023E C0 05            [24] 1030 	push	ar5
      000240 12r00r00         [24] 1031 	lcall	___memcpy
      000243 D0 05            [24] 1032 	pop	ar5
      000245 D0 06            [24] 1033 	pop	ar6
      000247 D0 07            [24] 1034 	pop	ar7
                                   1035 ;	tcp.c:51: uint8_t *ip_header = packet + ETHERNET_HEADER_SIZE;
      000249 74 0E            [12] 1036 	mov	a,#0x0e
      00024B 2D               [12] 1037 	add	a, r5
      00024C FA               [12] 1038 	mov	r2,a
      00024D E4               [12] 1039 	clr	a
      00024E 3E               [12] 1040 	addc	a, r6
      00024F FB               [12] 1041 	mov	r3,a
      000250 8F 04            [24] 1042 	mov	ar4,r7
                                   1043 ;	tcp.c:52: uint8_t *response_ip_header = data_start + ETHERNET_HEADER_SIZE;
                                   1044 ;	tcp.c:55: memcpy(response_ip_header, ip_header, IP_HEADER_SIZE);
      000252 90r00r00         [24] 1045 	mov	dptr,#___memcpy_PARM_2
      000255 EA               [12] 1046 	mov	a,r2
      000256 F0               [24] 1047 	movx	@dptr,a
      000257 EB               [12] 1048 	mov	a,r3
      000258 A3               [24] 1049 	inc	dptr
      000259 F0               [24] 1050 	movx	@dptr,a
      00025A EC               [12] 1051 	mov	a,r4
      00025B A3               [24] 1052 	inc	dptr
      00025C F0               [24] 1053 	movx	@dptr,a
      00025D 90r00r00         [24] 1054 	mov	dptr,#___memcpy_PARM_3
      000260 74 14            [12] 1055 	mov	a,#0x14
      000262 F0               [24] 1056 	movx	@dptr,a
      000263 E4               [12] 1057 	clr	a
      000264 A3               [24] 1058 	inc	dptr
      000265 F0               [24] 1059 	movx	@dptr,a
      000266 90r00r22         [24] 1060 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x000f)
      000269 F5 F0            [12] 1061 	mov	b,a
      00026B C0 07            [24] 1062 	push	ar7
      00026D C0 06            [24] 1063 	push	ar6
      00026F C0 05            [24] 1064 	push	ar5
      000271 12r00r00         [24] 1065 	lcall	___memcpy
      000274 D0 05            [24] 1066 	pop	ar5
      000276 D0 06            [24] 1067 	pop	ar6
      000278 D0 07            [24] 1068 	pop	ar7
                                   1069 ;	tcp.c:56: response_ip_header[12] = ip_header[16];  // Swap Source IP
      00027A 74 1E            [12] 1070 	mov	a,#0x1e
      00027C 2D               [12] 1071 	add	a, r5
      00027D FA               [12] 1072 	mov	r2,a
      00027E E4               [12] 1073 	clr	a
      00027F 3E               [12] 1074 	addc	a, r6
      000280 FB               [12] 1075 	mov	r3,a
      000281 8F 04            [24] 1076 	mov	ar4,r7
      000283 8A 82            [24] 1077 	mov	dpl,r2
      000285 8B 83            [24] 1078 	mov	dph,r3
      000287 8C F0            [24] 1079 	mov	b,r4
      000289 12r00r00         [24] 1080 	lcall	__gptrget
      00028C FA               [12] 1081 	mov	r2,a
      00028D 90r00r2E         [24] 1082 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001b)
      000290 75 F0 00         [24] 1083 	mov	b,#0x00
      000293 EA               [12] 1084 	mov	a,r2
      000294 12r00r00         [24] 1085 	lcall	__gptrput
                                   1086 ;	tcp.c:57: response_ip_header[13] = ip_header[17];
      000297 74 1F            [12] 1087 	mov	a,#0x1f
      000299 2D               [12] 1088 	add	a, r5
      00029A FA               [12] 1089 	mov	r2,a
      00029B E4               [12] 1090 	clr	a
      00029C 3E               [12] 1091 	addc	a, r6
      00029D FB               [12] 1092 	mov	r3,a
      00029E 8F 04            [24] 1093 	mov	ar4,r7
      0002A0 8A 82            [24] 1094 	mov	dpl,r2
      0002A2 8B 83            [24] 1095 	mov	dph,r3
      0002A4 8C F0            [24] 1096 	mov	b,r4
      0002A6 12r00r00         [24] 1097 	lcall	__gptrget
      0002A9 FA               [12] 1098 	mov	r2,a
      0002AA 90r00r2F         [24] 1099 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001c)
      0002AD 75 F0 00         [24] 1100 	mov	b,#0x00
      0002B0 EA               [12] 1101 	mov	a,r2
      0002B1 12r00r00         [24] 1102 	lcall	__gptrput
                                   1103 ;	tcp.c:58: response_ip_header[14] = ip_header[18];
      0002B4 74 20            [12] 1104 	mov	a,#0x20
      0002B6 2D               [12] 1105 	add	a, r5
      0002B7 FA               [12] 1106 	mov	r2,a
      0002B8 E4               [12] 1107 	clr	a
      0002B9 3E               [12] 1108 	addc	a, r6
      0002BA FB               [12] 1109 	mov	r3,a
      0002BB 8F 04            [24] 1110 	mov	ar4,r7
      0002BD 8A 82            [24] 1111 	mov	dpl,r2
      0002BF 8B 83            [24] 1112 	mov	dph,r3
      0002C1 8C F0            [24] 1113 	mov	b,r4
      0002C3 12r00r00         [24] 1114 	lcall	__gptrget
      0002C6 FA               [12] 1115 	mov	r2,a
      0002C7 90r00r30         [24] 1116 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001d)
      0002CA 75 F0 00         [24] 1117 	mov	b,#0x00
      0002CD EA               [12] 1118 	mov	a,r2
      0002CE 12r00r00         [24] 1119 	lcall	__gptrput
                                   1120 ;	tcp.c:59: response_ip_header[15] = ip_header[19];
      0002D1 74 21            [12] 1121 	mov	a,#0x21
      0002D3 2D               [12] 1122 	add	a, r5
      0002D4 FA               [12] 1123 	mov	r2,a
      0002D5 E4               [12] 1124 	clr	a
      0002D6 3E               [12] 1125 	addc	a, r6
      0002D7 FB               [12] 1126 	mov	r3,a
      0002D8 8F 04            [24] 1127 	mov	ar4,r7
      0002DA 8A 82            [24] 1128 	mov	dpl,r2
      0002DC 8B 83            [24] 1129 	mov	dph,r3
      0002DE 8C F0            [24] 1130 	mov	b,r4
      0002E0 12r00r00         [24] 1131 	lcall	__gptrget
      0002E3 FA               [12] 1132 	mov	r2,a
      0002E4 90r00r31         [24] 1133 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001e)
      0002E7 75 F0 00         [24] 1134 	mov	b,#0x00
      0002EA EA               [12] 1135 	mov	a,r2
      0002EB 12r00r00         [24] 1136 	lcall	__gptrput
                                   1137 ;	tcp.c:60: response_ip_header[16] = ip_header[12];  // Swap Destination IP
      0002EE 74 1A            [12] 1138 	mov	a,#0x1a
      0002F0 2D               [12] 1139 	add	a, r5
      0002F1 FA               [12] 1140 	mov	r2,a
      0002F2 E4               [12] 1141 	clr	a
      0002F3 3E               [12] 1142 	addc	a, r6
      0002F4 FB               [12] 1143 	mov	r3,a
      0002F5 8F 04            [24] 1144 	mov	ar4,r7
      0002F7 8A 82            [24] 1145 	mov	dpl,r2
      0002F9 8B 83            [24] 1146 	mov	dph,r3
      0002FB 8C F0            [24] 1147 	mov	b,r4
      0002FD 12r00r00         [24] 1148 	lcall	__gptrget
      000300 FA               [12] 1149 	mov	r2,a
      000301 90r00r32         [24] 1150 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001f)
      000304 75 F0 00         [24] 1151 	mov	b,#0x00
      000307 EA               [12] 1152 	mov	a,r2
      000308 12r00r00         [24] 1153 	lcall	__gptrput
                                   1154 ;	tcp.c:61: response_ip_header[17] = ip_header[13];
      00030B 74 1B            [12] 1155 	mov	a,#0x1b
      00030D 2D               [12] 1156 	add	a, r5
      00030E FA               [12] 1157 	mov	r2,a
      00030F E4               [12] 1158 	clr	a
      000310 3E               [12] 1159 	addc	a, r6
      000311 FB               [12] 1160 	mov	r3,a
      000312 8F 04            [24] 1161 	mov	ar4,r7
      000314 8A 82            [24] 1162 	mov	dpl,r2
      000316 8B 83            [24] 1163 	mov	dph,r3
      000318 8C F0            [24] 1164 	mov	b,r4
      00031A 12r00r00         [24] 1165 	lcall	__gptrget
      00031D FA               [12] 1166 	mov	r2,a
      00031E 90r00r33         [24] 1167 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0020)
      000321 75 F0 00         [24] 1168 	mov	b,#0x00
      000324 EA               [12] 1169 	mov	a,r2
      000325 12r00r00         [24] 1170 	lcall	__gptrput
                                   1171 ;	tcp.c:62: response_ip_header[18] = ip_header[14];
      000328 74 1C            [12] 1172 	mov	a,#0x1c
      00032A 2D               [12] 1173 	add	a, r5
      00032B FA               [12] 1174 	mov	r2,a
      00032C E4               [12] 1175 	clr	a
      00032D 3E               [12] 1176 	addc	a, r6
      00032E FB               [12] 1177 	mov	r3,a
      00032F 8F 04            [24] 1178 	mov	ar4,r7
      000331 8A 82            [24] 1179 	mov	dpl,r2
      000333 8B 83            [24] 1180 	mov	dph,r3
      000335 8C F0            [24] 1181 	mov	b,r4
      000337 12r00r00         [24] 1182 	lcall	__gptrget
      00033A FA               [12] 1183 	mov	r2,a
      00033B 90r00r34         [24] 1184 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0021)
      00033E 75 F0 00         [24] 1185 	mov	b,#0x00
      000341 EA               [12] 1186 	mov	a,r2
      000342 12r00r00         [24] 1187 	lcall	__gptrput
                                   1188 ;	tcp.c:63: response_ip_header[19] = ip_header[15];
      000345 74 1D            [12] 1189 	mov	a,#0x1d
      000347 2D               [12] 1190 	add	a, r5
      000348 FA               [12] 1191 	mov	r2,a
      000349 E4               [12] 1192 	clr	a
      00034A 3E               [12] 1193 	addc	a, r6
      00034B FB               [12] 1194 	mov	r3,a
      00034C 8F 04            [24] 1195 	mov	ar4,r7
      00034E 8A 82            [24] 1196 	mov	dpl,r2
      000350 8B 83            [24] 1197 	mov	dph,r3
      000352 8C F0            [24] 1198 	mov	b,r4
      000354 12r00r00         [24] 1199 	lcall	__gptrget
      000357 FA               [12] 1200 	mov	r2,a
      000358 90r00r35         [24] 1201 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0022)
      00035B 75 F0 00         [24] 1202 	mov	b,#0x00
      00035E EA               [12] 1203 	mov	a,r2
      00035F 12r00r00         [24] 1204 	lcall	__gptrput
                                   1205 ;	tcp.c:64: response_ip_header[10] = 0;              // Clear checksum
      000362 90r00r2C         [24] 1206 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0019)
      000365 E4               [12] 1207 	clr	a
      000366 12r00r00         [24] 1208 	lcall	__gptrput
                                   1209 ;	tcp.c:65: response_ip_header[11] = 0;
      000369 90r00r2D         [24] 1210 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001a)
      00036C F5 F0            [12] 1211 	mov	b,a
      00036E 12r00r00         [24] 1212 	lcall	__gptrput
                                   1213 ;	tcp.c:68: uint8_t *tcp_header = packet + ETHERNET_HEADER_SIZE + IP_HEADER_SIZE;
      000371 74 22            [12] 1214 	mov	a,#0x22
      000373 2D               [12] 1215 	add	a, r5
      000374 F5*00            [12] 1216 	mov	_process_tcp_packet_sloc0_1_0,a
      000376 E4               [12] 1217 	clr	a
      000377 3E               [12] 1218 	addc	a, r6
      000378 F5*01            [12] 1219 	mov	(_process_tcp_packet_sloc0_1_0 + 1),a
      00037A 8F*02            [24] 1220 	mov	(_process_tcp_packet_sloc0_1_0 + 2),r7
                                   1221 ;	tcp.c:69: uint8_t *response_tcp_header = data_start + ETHERNET_HEADER_SIZE + IP_HEADER_SIZE;
                                   1222 ;	tcp.c:72: memcpy(response_tcp_header, tcp_header, TCP_HEADER_SIZE);
      00037C A8*00            [24] 1223 	mov	r0,_process_tcp_packet_sloc0_1_0
      00037E A9*01            [24] 1224 	mov	r1,(_process_tcp_packet_sloc0_1_0 + 1)
      000380 AC*02            [24] 1225 	mov	r4,(_process_tcp_packet_sloc0_1_0 + 2)
      000382 90r00r00         [24] 1226 	mov	dptr,#___memcpy_PARM_2
      000385 E8               [12] 1227 	mov	a,r0
      000386 F0               [24] 1228 	movx	@dptr,a
      000387 E9               [12] 1229 	mov	a,r1
      000388 A3               [24] 1230 	inc	dptr
      000389 F0               [24] 1231 	movx	@dptr,a
      00038A EC               [12] 1232 	mov	a,r4
      00038B A3               [24] 1233 	inc	dptr
      00038C F0               [24] 1234 	movx	@dptr,a
      00038D 90r00r00         [24] 1235 	mov	dptr,#___memcpy_PARM_3
      000390 74 14            [12] 1236 	mov	a,#0x14
      000392 F0               [24] 1237 	movx	@dptr,a
      000393 E4               [12] 1238 	clr	a
      000394 A3               [24] 1239 	inc	dptr
      000395 F0               [24] 1240 	movx	@dptr,a
      000396 90r00r36         [24] 1241 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0023)
      000399 F5 F0            [12] 1242 	mov	b,a
      00039B C0 07            [24] 1243 	push	ar7
      00039D C0 06            [24] 1244 	push	ar6
      00039F C0 05            [24] 1245 	push	ar5
      0003A1 12r00r00         [24] 1246 	lcall	___memcpy
      0003A4 D0 05            [24] 1247 	pop	ar5
      0003A6 D0 06            [24] 1248 	pop	ar6
      0003A8 D0 07            [24] 1249 	pop	ar7
                                   1250 ;	tcp.c:73: response_tcp_header[0] = tcp_header[2];  // Swap Source Port
      0003AA 74 24            [12] 1251 	mov	a,#0x24
      0003AC 2D               [12] 1252 	add	a, r5
      0003AD FA               [12] 1253 	mov	r2,a
      0003AE E4               [12] 1254 	clr	a
      0003AF 3E               [12] 1255 	addc	a, r6
      0003B0 FB               [12] 1256 	mov	r3,a
      0003B1 8F 04            [24] 1257 	mov	ar4,r7
      0003B3 8A 82            [24] 1258 	mov	dpl,r2
      0003B5 8B 83            [24] 1259 	mov	dph,r3
      0003B7 8C F0            [24] 1260 	mov	b,r4
      0003B9 12r00r00         [24] 1261 	lcall	__gptrget
      0003BC FA               [12] 1262 	mov	r2,a
      0003BD 90r00r36         [24] 1263 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0023)
      0003C0 75 F0 00         [24] 1264 	mov	b,#0x00
      0003C3 EA               [12] 1265 	mov	a,r2
      0003C4 12r00r00         [24] 1266 	lcall	__gptrput
                                   1267 ;	tcp.c:74: response_tcp_header[1] = tcp_header[3];
      0003C7 74 25            [12] 1268 	mov	a,#0x25
      0003C9 2D               [12] 1269 	add	a, r5
      0003CA FA               [12] 1270 	mov	r2,a
      0003CB E4               [12] 1271 	clr	a
      0003CC 3E               [12] 1272 	addc	a, r6
      0003CD FB               [12] 1273 	mov	r3,a
      0003CE 8F 04            [24] 1274 	mov	ar4,r7
      0003D0 8A 82            [24] 1275 	mov	dpl,r2
      0003D2 8B 83            [24] 1276 	mov	dph,r3
      0003D4 8C F0            [24] 1277 	mov	b,r4
      0003D6 12r00r00         [24] 1278 	lcall	__gptrget
      0003D9 FA               [12] 1279 	mov	r2,a
      0003DA 90r00r37         [24] 1280 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0024)
      0003DD 75 F0 00         [24] 1281 	mov	b,#0x00
      0003E0 EA               [12] 1282 	mov	a,r2
      0003E1 12r00r00         [24] 1283 	lcall	__gptrput
                                   1284 ;	tcp.c:75: response_tcp_header[2] = tcp_header[0];  // Swap Destination Port
      0003E4 85*00 82         [24] 1285 	mov	dpl,_process_tcp_packet_sloc0_1_0
      0003E7 85*01 83         [24] 1286 	mov	dph,(_process_tcp_packet_sloc0_1_0 + 1)
      0003EA 85*02 F0         [24] 1287 	mov	b,(_process_tcp_packet_sloc0_1_0 + 2)
      0003ED 12r00r00         [24] 1288 	lcall	__gptrget
      0003F0 FC               [12] 1289 	mov	r4,a
      0003F1 90r00r38         [24] 1290 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0025)
      0003F4 75 F0 00         [24] 1291 	mov	b,#0x00
      0003F7 EC               [12] 1292 	mov	a,r4
      0003F8 12r00r00         [24] 1293 	lcall	__gptrput
                                   1294 ;	tcp.c:76: response_tcp_header[3] = tcp_header[1];
      0003FB 74 23            [12] 1295 	mov	a,#0x23
      0003FD 2D               [12] 1296 	add	a, r5
      0003FE FA               [12] 1297 	mov	r2,a
      0003FF E4               [12] 1298 	clr	a
      000400 3E               [12] 1299 	addc	a, r6
      000401 FB               [12] 1300 	mov	r3,a
      000402 8F 04            [24] 1301 	mov	ar4,r7
      000404 8A 82            [24] 1302 	mov	dpl,r2
      000406 8B 83            [24] 1303 	mov	dph,r3
      000408 8C F0            [24] 1304 	mov	b,r4
      00040A 12r00r00         [24] 1305 	lcall	__gptrget
      00040D FA               [12] 1306 	mov	r2,a
      00040E 90r00r39         [24] 1307 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0026)
      000411 75 F0 00         [24] 1308 	mov	b,#0x00
      000414 EA               [12] 1309 	mov	a,r2
      000415 12r00r00         [24] 1310 	lcall	__gptrput
                                   1311 ;	tcp.c:78: response_tcp_header[4] = 0;
      000418 90r00r3A         [24] 1312 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0027)
      00041B E4               [12] 1313 	clr	a
      00041C 12r00r00         [24] 1314 	lcall	__gptrput
                                   1315 ;	tcp.c:79: response_tcp_header[5] = 0;
      00041F 90r00r3B         [24] 1316 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0028)
      000422 F5 F0            [12] 1317 	mov	b,a
      000424 12r00r00         [24] 1318 	lcall	__gptrput
                                   1319 ;	tcp.c:80: response_tcp_header[6] = 0;
      000427 90r00r3C         [24] 1320 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0029)
      00042A F5 F0            [12] 1321 	mov	b,a
      00042C 12r00r00         [24] 1322 	lcall	__gptrput
                                   1323 ;	tcp.c:81: response_tcp_header[7] = 0;
      00042F 90r00r3D         [24] 1324 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x002a)
      000432 F5 F0            [12] 1325 	mov	b,a
      000434 12r00r00         [24] 1326 	lcall	__gptrput
                                   1327 ;	tcp.c:83: uint8_t SYN_SEQ3 = tcp_header[4];
      000437 74 26            [12] 1328 	mov	a,#0x26
      000439 2D               [12] 1329 	add	a, r5
      00043A FA               [12] 1330 	mov	r2,a
      00043B E4               [12] 1331 	clr	a
      00043C 3E               [12] 1332 	addc	a, r6
      00043D FB               [12] 1333 	mov	r3,a
      00043E 8F 04            [24] 1334 	mov	ar4,r7
      000440 8A 82            [24] 1335 	mov	dpl,r2
      000442 8B 83            [24] 1336 	mov	dph,r3
      000444 8C F0            [24] 1337 	mov	b,r4
      000446 12r00r00         [24] 1338 	lcall	__gptrget
      000449 FA               [12] 1339 	mov	r2,a
                                   1340 ;	tcp.c:84: uint8_t SYN_SEQ2 = tcp_header[5];
      00044A 74 27            [12] 1341 	mov	a,#0x27
      00044C 2D               [12] 1342 	add	a, r5
      00044D F9               [12] 1343 	mov	r1,a
      00044E E4               [12] 1344 	clr	a
      00044F 3E               [12] 1345 	addc	a, r6
      000450 FB               [12] 1346 	mov	r3,a
      000451 8F 04            [24] 1347 	mov	ar4,r7
      000453 89 82            [24] 1348 	mov	dpl,r1
      000455 8B 83            [24] 1349 	mov	dph,r3
      000457 8C F0            [24] 1350 	mov	b,r4
      000459 12r00r00         [24] 1351 	lcall	__gptrget
      00045C F9               [12] 1352 	mov	r1,a
                                   1353 ;	tcp.c:85: uint8_t SYN_SEQ1 = tcp_header[6];
      00045D 74 28            [12] 1354 	mov	a,#0x28
      00045F 2D               [12] 1355 	add	a, r5
      000460 F8               [12] 1356 	mov	r0,a
      000461 E4               [12] 1357 	clr	a
      000462 3E               [12] 1358 	addc	a, r6
      000463 FB               [12] 1359 	mov	r3,a
      000464 8F 04            [24] 1360 	mov	ar4,r7
      000466 88 82            [24] 1361 	mov	dpl,r0
      000468 8B 83            [24] 1362 	mov	dph,r3
      00046A 8C F0            [24] 1363 	mov	b,r4
      00046C 12r00r00         [24] 1364 	lcall	__gptrget
      00046F F8               [12] 1365 	mov	r0,a
                                   1366 ;	tcp.c:86: uint8_t SYN_SEQ0 = tcp_header[7];
      000470 74 29            [12] 1367 	mov	a,#0x29
      000472 2D               [12] 1368 	add	a, r5
      000473 FD               [12] 1369 	mov	r5,a
      000474 E4               [12] 1370 	clr	a
      000475 3E               [12] 1371 	addc	a, r6
      000476 FE               [12] 1372 	mov	r6,a
      000477 8D 82            [24] 1373 	mov	dpl,r5
      000479 8E 83            [24] 1374 	mov	dph,r6
      00047B 8F F0            [24] 1375 	mov	b,r7
      00047D 12r00r00         [24] 1376 	lcall	__gptrget
      000480 FD               [12] 1377 	mov	r5,a
                                   1378 ;	tcp.c:88: response_tcp_header[8] = SYN_SEQ3;
      000481 90r00r3E         [24] 1379 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x002b)
      000484 75 F0 00         [24] 1380 	mov	b,#0x00
      000487 EA               [12] 1381 	mov	a,r2
      000488 12r00r00         [24] 1382 	lcall	__gptrput
                                   1383 ;	tcp.c:89: response_tcp_header[9] = SYN_SEQ2;
      00048B 90r00r3F         [24] 1384 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x002c)
      00048E E9               [12] 1385 	mov	a,r1
      00048F 12r00r00         [24] 1386 	lcall	__gptrput
                                   1387 ;	tcp.c:90: response_tcp_header[10] = SYN_SEQ1;
      000492 90r00r40         [24] 1388 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x002d)
      000495 E8               [12] 1389 	mov	a,r0
      000496 12r00r00         [24] 1390 	lcall	__gptrput
                                   1391 ;	tcp.c:91: response_tcp_header[11] = SYN_SEQ0 + 1;
      000499 0D               [12] 1392 	inc	r5
      00049A 90r00r41         [24] 1393 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x002e)
      00049D ED               [12] 1394 	mov	a,r5
      00049E 12r00r00         [24] 1395 	lcall	__gptrput
                                   1396 ;	tcp.c:97: response_tcp_header[12] = 0x50;  // SYN (0x02) + ACK (0x10)
      0004A1 90r00r42         [24] 1397 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x002f)
      0004A4 74 50            [12] 1398 	mov	a,#0x50
      0004A6 12r00r00         [24] 1399 	lcall	__gptrput
                                   1400 ;	tcp.c:99: response_tcp_header[13] = 0x12;  // SYN (0x02) + ACK (0x10)
      0004A9 90r00r43         [24] 1401 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0030)
      0004AC 74 12            [12] 1402 	mov	a,#0x12
      0004AE 12r00r00         [24] 1403 	lcall	__gptrput
                                   1404 ;	tcp.c:102: response_tcp_header[18] = 0;
      0004B1 90r00r48         [24] 1405 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0035)
      0004B4 E4               [12] 1406 	clr	a
      0004B5 12r00r00         [24] 1407 	lcall	__gptrput
                                   1408 ;	tcp.c:103: response_tcp_header[19] = 0;
      0004B8 90r00r49         [24] 1409 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0036)
      0004BB F5 F0            [12] 1410 	mov	b,a
      0004BD 12r00r00         [24] 1411 	lcall	__gptrput
                                   1412 ;	tcp.c:109: response_ip_header[2] = (ip_total_length >> 8) & 0xFF;
      0004C0 90r00r24         [24] 1413 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0011)
      0004C3 F5 F0            [12] 1414 	mov	b,a
      0004C5 12r00r00         [24] 1415 	lcall	__gptrput
                                   1416 ;	tcp.c:110: response_ip_header[3] = ip_total_length & 0xFF;
      0004C8 90r00r25         [24] 1417 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0012)
      0004CB F5 F0            [12] 1418 	mov	b,a
      0004CD 74 28            [12] 1419 	mov	a,#0x28
      0004CF 12r00r00         [24] 1420 	lcall	__gptrput
                                   1421 ;	tcp.c:111: uint16_t ip_checksum = calculate_checksum(response_ip_header, IP_HEADER_SIZE);
      0004D2 90r00r00         [24] 1422 	mov	dptr,#_calculate_checksum_PARM_2
      0004D5 03               [12] 1423 	rr	a
      0004D6 F0               [24] 1424 	movx	@dptr,a
      0004D7 E4               [12] 1425 	clr	a
      0004D8 A3               [24] 1426 	inc	dptr
      0004D9 F0               [24] 1427 	movx	@dptr,a
      0004DA 90r00r22         [24] 1428 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x000f)
      0004DD F5 F0            [12] 1429 	mov	b,a
      0004DF 12r00r00         [24] 1430 	lcall	_calculate_checksum
      0004E2 AE 82            [24] 1431 	mov	r6, dpl
      0004E4 AF 83            [24] 1432 	mov	r7, dph
                                   1433 ;	tcp.c:112: response_ip_header[10] = (ip_checksum >> 8) & 0xFF;
      0004E6 8F 05            [24] 1434 	mov	ar5,r7
      0004E8 90r00r2C         [24] 1435 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0019)
      0004EB 75 F0 00         [24] 1436 	mov	b,#0x00
      0004EE ED               [12] 1437 	mov	a,r5
      0004EF 12r00r00         [24] 1438 	lcall	__gptrput
                                   1439 ;	tcp.c:113: response_ip_header[11] = ip_checksum & 0xFF;
      0004F2 90r00r2D         [24] 1440 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001a)
      0004F5 EE               [12] 1441 	mov	a,r6
      0004F6 12r00r00         [24] 1442 	lcall	__gptrput
                                   1443 ;	tcp.c:115: uint16_t tcp_checksum = calculate_checksum(data_start + ETHERNET_HEADER_SIZE, ip_total_length);
      0004F9 90r00r00         [24] 1444 	mov	dptr,#_calculate_checksum_PARM_2
      0004FC 74 28            [12] 1445 	mov	a,#0x28
      0004FE F0               [24] 1446 	movx	@dptr,a
      0004FF E4               [12] 1447 	clr	a
      000500 A3               [24] 1448 	inc	dptr
      000501 F0               [24] 1449 	movx	@dptr,a
      000502 90r00r22         [24] 1450 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x000f)
      000505 F5 F0            [12] 1451 	mov	b,a
      000507 12r00r00         [24] 1452 	lcall	_calculate_checksum
      00050A AE 82            [24] 1453 	mov	r6, dpl
      00050C AF 83            [24] 1454 	mov	r7, dph
                                   1455 ;	tcp.c:116: response_tcp_header[16] = (tcp_checksum >> 8) & 0xFF;
      00050E 8F 05            [24] 1456 	mov	ar5,r7
      000510 90r00r46         [24] 1457 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0033)
      000513 75 F0 00         [24] 1458 	mov	b,#0x00
      000516 ED               [12] 1459 	mov	a,r5
      000517 12r00r00         [24] 1460 	lcall	__gptrput
                                   1461 ;	tcp.c:117: response_tcp_header[17] = tcp_checksum & 0xFF;
      00051A 90r00r47         [24] 1462 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0034)
      00051D EE               [12] 1463 	mov	a,r6
      00051E 12r00r00         [24] 1464 	lcall	__gptrput
                                   1465 ;	tcp.c:120: uint8_t *tcp_options = response_tcp_header + 20; // After the TCP header (flags, sequence, etc.)
                                   1466 ;	tcp.c:126: tcp_options[0] = 0x02;  // Option Type for MSS (0x02)
      000521 90r00r4A         [24] 1467 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0037)
      000524 74 02            [12] 1468 	mov	a,#0x02
      000526 12r00r00         [24] 1469 	lcall	__gptrput
                                   1470 ;	tcp.c:127: tcp_options[1] = 0x04;  // Length of the MSS option (4 bytes)
      000529 90r00r4B         [24] 1471 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0038)
      00052C 23               [12] 1472 	rl	a
      00052D 12r00r00         [24] 1473 	lcall	__gptrput
                                   1474 ;	tcp.c:128: tcp_options[2] = 0x05;  // MSS value (0x0500 = 1280 in decimal)
      000530 90r00r4C         [24] 1475 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0039)
      000533 04               [12] 1476 	inc	a
      000534 12r00r00         [24] 1477 	lcall	__gptrput
                                   1478 ;	tcp.c:129: tcp_options[3] = 0x00;
      000537 90r00r4D         [24] 1479 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x003a)
      00053A E4               [12] 1480 	clr	a
      00053B 12r00r00         [24] 1481 	lcall	__gptrput
                                   1482 ;	tcp.c:132: *response_size = 1 + ETHERNET_HEADER_SIZE + ip_total_length + 4; // Adding 4 for the MSS option size
      00053E 90r00r0D         [24] 1483 	mov	dptr,#_process_tcp_packet_PARM_3
      000541 E0               [24] 1484 	movx	a,@dptr
      000542 FD               [12] 1485 	mov	r5,a
      000543 A3               [24] 1486 	inc	dptr
      000544 E0               [24] 1487 	movx	a,@dptr
      000545 FE               [12] 1488 	mov	r6,a
      000546 A3               [24] 1489 	inc	dptr
      000547 E0               [24] 1490 	movx	a,@dptr
      000548 FF               [12] 1491 	mov	r7,a
      000549 8D 82            [24] 1492 	mov	dpl,r5
      00054B 8E 83            [24] 1493 	mov	dph,r6
      00054D 8F F0            [24] 1494 	mov	b,r7
      00054F 74 3B            [12] 1495 	mov	a,#0x3b
      000551 12r00r00         [24] 1496 	lcall	__gptrput
      000554 A3               [24] 1497 	inc	dptr
      000555 E4               [12] 1498 	clr	a
      000556 12r00r00         [24] 1499 	lcall	__gptrput
                                   1500 ;	tcp.c:135: return response;
      000559 90r00r13         [24] 1501 	mov	dptr,#_process_tcp_packet_response_10000_122
      00055C F5 F0            [12] 1502 	mov	b,a
                                   1503 ;	tcp.c:136: }
      00055E 22               [24] 1504 	ret
                                   1505 ;------------------------------------------------------------
                                   1506 ;Allocation info for local variables in function 'print_hexdump'
                                   1507 ;------------------------------------------------------------
                                   1508 ;size                      Allocated with name '_print_hexdump_PARM_2'
                                   1509 ;data                      Allocated with name '_print_hexdump_data_10000_131'
                                   1510 ;i                         Allocated with name '_print_hexdump_i_20000_133'
                                   1511 ;------------------------------------------------------------
                                   1512 ;	tcp.c:140: void print_hexdump(const uint8_t *data, uint16_t size) {
                                   1513 ;	-----------------------------------------
                                   1514 ;	 function print_hexdump
                                   1515 ;	-----------------------------------------
      00055F                       1516 _print_hexdump:
      00055F AF F0            [24] 1517 	mov	r7,b
      000561 AE 83            [24] 1518 	mov	r6,dph
      000563 E5 82            [12] 1519 	mov	a,dpl
      000565 90r05rF2         [24] 1520 	mov	dptr,#_print_hexdump_data_10000_131
      000568 F0               [24] 1521 	movx	@dptr,a
      000569 EE               [12] 1522 	mov	a,r6
      00056A A3               [24] 1523 	inc	dptr
      00056B F0               [24] 1524 	movx	@dptr,a
      00056C EF               [12] 1525 	mov	a,r7
      00056D A3               [24] 1526 	inc	dptr
      00056E F0               [24] 1527 	movx	@dptr,a
                                   1528 ;	tcp.c:141: printf("\nHexdump (Size: %d):\n", size);
      00056F 90r05rF0         [24] 1529 	mov	dptr,#_print_hexdump_PARM_2
      000572 E0               [24] 1530 	movx	a,@dptr
      000573 FE               [12] 1531 	mov	r6,a
      000574 A3               [24] 1532 	inc	dptr
      000575 E0               [24] 1533 	movx	a,@dptr
      000576 FF               [12] 1534 	mov	r7,a
      000577 C0 07            [24] 1535 	push	ar7
      000579 C0 06            [24] 1536 	push	ar6
      00057B C0 06            [24] 1537 	push	ar6
      00057D C0 07            [24] 1538 	push	ar7
      00057F 74r00            [12] 1539 	mov	a,#___str_0
      000581 C0 E0            [24] 1540 	push	acc
      000583 74s00            [12] 1541 	mov	a,#(___str_0 >> 8)
      000585 C0 E0            [24] 1542 	push	acc
      000587 74 80            [12] 1543 	mov	a,#0x80
      000589 C0 E0            [24] 1544 	push	acc
      00058B 12r00r00         [24] 1545 	lcall	_printf
      00058E E5 81            [12] 1546 	mov	a,sp
      000590 24 FB            [12] 1547 	add	a,#0xfb
      000592 F5 81            [12] 1548 	mov	sp,a
      000594 D0 06            [24] 1549 	pop	ar6
      000596 D0 07            [24] 1550 	pop	ar7
                                   1551 ;	tcp.c:142: for (uint16_t i = 0; i < size; i++) {
      000598 90r05rF2         [24] 1552 	mov	dptr,#_print_hexdump_data_10000_131
      00059B E0               [24] 1553 	movx	a,@dptr
      00059C FB               [12] 1554 	mov	r3,a
      00059D A3               [24] 1555 	inc	dptr
      00059E E0               [24] 1556 	movx	a,@dptr
      00059F FC               [12] 1557 	mov	r4,a
      0005A0 A3               [24] 1558 	inc	dptr
      0005A1 E0               [24] 1559 	movx	a,@dptr
      0005A2 FD               [12] 1560 	mov	r5,a
      0005A3 79 00            [12] 1561 	mov	r1,#0x00
      0005A5 7A 00            [12] 1562 	mov	r2,#0x00
      0005A7                       1563 00107$:
      0005A7 C3               [12] 1564 	clr	c
      0005A8 E9               [12] 1565 	mov	a,r1
      0005A9 9E               [12] 1566 	subb	a,r6
      0005AA EA               [12] 1567 	mov	a,r2
      0005AB 9F               [12] 1568 	subb	a,r7
      0005AC 40 03            [24] 1569 	jc	00136$
      0005AE 02r06r4F         [24] 1570 	ljmp	00103$
      0005B1                       1571 00136$:
                                   1572 ;	tcp.c:143: printf("%02X ", data[i]); // Print each byte in hexadecimal format
      0005B1 C0 06            [24] 1573 	push	ar6
      0005B3 C0 07            [24] 1574 	push	ar7
      0005B5 E9               [12] 1575 	mov	a,r1
      0005B6 2B               [12] 1576 	add	a, r3
      0005B7 F8               [12] 1577 	mov	r0,a
      0005B8 EA               [12] 1578 	mov	a,r2
      0005B9 3C               [12] 1579 	addc	a, r4
      0005BA FE               [12] 1580 	mov	r6,a
      0005BB 8D 07            [24] 1581 	mov	ar7,r5
      0005BD 88 82            [24] 1582 	mov	dpl,r0
      0005BF 8E 83            [24] 1583 	mov	dph,r6
      0005C1 8F F0            [24] 1584 	mov	b,r7
      0005C3 12r00r00         [24] 1585 	lcall	__gptrget
      0005C6 F8               [12] 1586 	mov	r0,a
      0005C7 7F 00            [12] 1587 	mov	r7,#0x00
      0005C9 C0 07            [24] 1588 	push	ar7
      0005CB C0 06            [24] 1589 	push	ar6
      0005CD C0 05            [24] 1590 	push	ar5
      0005CF C0 04            [24] 1591 	push	ar4
      0005D1 C0 03            [24] 1592 	push	ar3
      0005D3 C0 02            [24] 1593 	push	ar2
      0005D5 C0 01            [24] 1594 	push	ar1
      0005D7 C0 00            [24] 1595 	push	ar0
      0005D9 C0 07            [24] 1596 	push	ar7
      0005DB 74r16            [12] 1597 	mov	a,#___str_1
      0005DD C0 E0            [24] 1598 	push	acc
      0005DF 74s00            [12] 1599 	mov	a,#(___str_1 >> 8)
      0005E1 C0 E0            [24] 1600 	push	acc
      0005E3 74 80            [12] 1601 	mov	a,#0x80
      0005E5 C0 E0            [24] 1602 	push	acc
      0005E7 12r00r00         [24] 1603 	lcall	_printf
      0005EA E5 81            [12] 1604 	mov	a,sp
      0005EC 24 FB            [12] 1605 	add	a,#0xfb
      0005EE F5 81            [12] 1606 	mov	sp,a
      0005F0 D0 01            [24] 1607 	pop	ar1
      0005F2 D0 02            [24] 1608 	pop	ar2
      0005F4 D0 03            [24] 1609 	pop	ar3
      0005F6 D0 04            [24] 1610 	pop	ar4
      0005F8 D0 05            [24] 1611 	pop	ar5
      0005FA D0 06            [24] 1612 	pop	ar6
      0005FC D0 07            [24] 1613 	pop	ar7
                                   1614 ;	tcp.c:144: if ((i + 1) % 16 == 0) {
      0005FE 89 06            [24] 1615 	mov	ar6,r1
      000600 8A 07            [24] 1616 	mov	ar7,r2
      000602 0E               [12] 1617 	inc	r6
      000603 BE 00 01         [24] 1618 	cjne	r6,#0x00,00137$
      000606 0F               [12] 1619 	inc	r7
      000607                       1620 00137$:
      000607 EE               [12] 1621 	mov	a,r6
      000608 54 0F            [12] 1622 	anl	a,#0x0f
      00060A 60 06            [24] 1623 	jz	00139$
      00060C D0 07            [24] 1624 	pop	ar7
      00060E D0 06            [24] 1625 	pop	ar6
      000610 80 35            [24] 1626 	sjmp	00108$
      000612                       1627 00139$:
      000612 D0 07            [24] 1628 	pop	ar7
      000614 D0 06            [24] 1629 	pop	ar6
                                   1630 ;	tcp.c:145: printf("\n"); // Newline after every 16 bytes for readability
      000616 C0 07            [24] 1631 	push	ar7
      000618 C0 06            [24] 1632 	push	ar6
      00061A C0 05            [24] 1633 	push	ar5
      00061C C0 04            [24] 1634 	push	ar4
      00061E C0 03            [24] 1635 	push	ar3
      000620 C0 02            [24] 1636 	push	ar2
      000622 C0 01            [24] 1637 	push	ar1
      000624 74r1C            [12] 1638 	mov	a,#___str_2
      000626 C0 E0            [24] 1639 	push	acc
      000628 74s00            [12] 1640 	mov	a,#(___str_2 >> 8)
      00062A C0 E0            [24] 1641 	push	acc
      00062C 74 80            [12] 1642 	mov	a,#0x80
      00062E C0 E0            [24] 1643 	push	acc
      000630 12r00r00         [24] 1644 	lcall	_printf
      000633 15 81            [12] 1645 	dec	sp
      000635 15 81            [12] 1646 	dec	sp
      000637 15 81            [12] 1647 	dec	sp
      000639 D0 01            [24] 1648 	pop	ar1
      00063B D0 02            [24] 1649 	pop	ar2
      00063D D0 03            [24] 1650 	pop	ar3
      00063F D0 04            [24] 1651 	pop	ar4
      000641 D0 05            [24] 1652 	pop	ar5
      000643 D0 06            [24] 1653 	pop	ar6
      000645 D0 07            [24] 1654 	pop	ar7
      000647                       1655 00108$:
                                   1656 ;	tcp.c:142: for (uint16_t i = 0; i < size; i++) {
      000647 09               [12] 1657 	inc	r1
      000648 B9 00 01         [24] 1658 	cjne	r1,#0x00,00140$
      00064B 0A               [12] 1659 	inc	r2
      00064C                       1660 00140$:
      00064C 02r05rA7         [24] 1661 	ljmp	00107$
      00064F                       1662 00103$:
                                   1663 ;	tcp.c:148: if (size % 16 != 0) {
      00064F EE               [12] 1664 	mov	a,r6
      000650 54 0F            [12] 1665 	anl	a,#0x0f
      000652 60 15            [24] 1666 	jz	00109$
                                   1667 ;	tcp.c:149: printf("\n"); // Final newline if not already printed
      000654 74r1C            [12] 1668 	mov	a,#___str_2
      000656 C0 E0            [24] 1669 	push	acc
      000658 74s00            [12] 1670 	mov	a,#(___str_2 >> 8)
      00065A C0 E0            [24] 1671 	push	acc
      00065C 74 80            [12] 1672 	mov	a,#0x80
      00065E C0 E0            [24] 1673 	push	acc
      000660 12r00r00         [24] 1674 	lcall	_printf
      000663 15 81            [12] 1675 	dec	sp
      000665 15 81            [12] 1676 	dec	sp
      000667 15 81            [12] 1677 	dec	sp
      000669                       1678 00109$:
                                   1679 ;	tcp.c:151: }
      000669 22               [24] 1680 	ret
                                   1681 ;------------------------------------------------------------
                                   1682 ;Allocation info for local variables in function 'process_packet_from_buffer'
                                   1683 ;------------------------------------------------------------
                                   1684 ;sloc0                     Allocated with name '_process_packet_from_buffer_sloc0_1_0'
                                   1685 ;start_address             Allocated with name '_process_packet_from_buffer_start_address_10000_137'
                                   1686 ;next_packet_start         Allocated with name '_process_packet_from_buffer_next_packet_start_10001_140'
                                   1687 ;next_start_address        Allocated with name '_process_packet_from_buffer_next_start_address_10001_140'
                                   1688 ;packet_size               Allocated with name '_process_packet_from_buffer_packet_size_10001_140'
                                   1689 ;response_size             Allocated with name '_process_packet_from_buffer_response_size_10001_140'
                                   1690 ;packet_data               Allocated with name '_process_packet_from_buffer_packet_data_10002_143'
                                   1691 ;response                  Allocated with name '_process_packet_from_buffer_response_10003_146'
                                   1692 ;------------------------------------------------------------
                                   1693 ;	tcp.c:154: void process_packet_from_buffer(uint16_t start_address) {
                                   1694 ;	-----------------------------------------
                                   1695 ;	 function process_packet_from_buffer
                                   1696 ;	-----------------------------------------
      00066A                       1697 _process_packet_from_buffer:
      00066A AF 83            [24] 1698 	mov	r7,dph
      00066C E5 82            [12] 1699 	mov	a,dpl
      00066E 90r05rF5         [24] 1700 	mov	dptr,#_process_packet_from_buffer_start_address_10000_137
      000671 F0               [24] 1701 	movx	@dptr,a
      000672 EF               [12] 1702 	mov	a,r7
      000673 A3               [24] 1703 	inc	dptr
      000674 F0               [24] 1704 	movx	@dptr,a
                                   1705 ;	tcp.c:156: if (start_address > 0x1FFF) {
      000675 90r05rF5         [24] 1706 	mov	dptr,#_process_packet_from_buffer_start_address_10000_137
      000678 E0               [24] 1707 	movx	a,@dptr
      000679 FE               [12] 1708 	mov	r6,a
      00067A A3               [24] 1709 	inc	dptr
      00067B E0               [24] 1710 	movx	a,@dptr
      00067C FF               [12] 1711 	mov	r7,a
      00067D 8E 04            [24] 1712 	mov	ar4,r6
      00067F 8F 05            [24] 1713 	mov	ar5,r7
      000681 C3               [12] 1714 	clr	c
      000682 74 FF            [12] 1715 	mov	a,#0xff
      000684 9C               [12] 1716 	subb	a,r4
      000685 74 1F            [12] 1717 	mov	a,#0x1f
      000687 9D               [12] 1718 	subb	a,r5
      000688 50 1A            [24] 1719 	jnc	00102$
                                   1720 ;	tcp.c:157: printf("\n\rInvalid start address: %04X\n\r", start_address);
      00068A C0 06            [24] 1721 	push	ar6
      00068C C0 07            [24] 1722 	push	ar7
      00068E 74r1E            [12] 1723 	mov	a,#___str_3
      000690 C0 E0            [24] 1724 	push	acc
      000692 74s00            [12] 1725 	mov	a,#(___str_3 >> 8)
      000694 C0 E0            [24] 1726 	push	acc
      000696 74 80            [12] 1727 	mov	a,#0x80
      000698 C0 E0            [24] 1728 	push	acc
      00069A 12r00r00         [24] 1729 	lcall	_printf
      00069D E5 81            [12] 1730 	mov	a,sp
      00069F 24 FB            [12] 1731 	add	a,#0xfb
      0006A1 F5 81            [12] 1732 	mov	sp,a
                                   1733 ;	tcp.c:158: return;
      0006A3 22               [24] 1734 	ret
      0006A4                       1735 00102$:
                                   1736 ;	tcp.c:167: if (spi_buffer_read(2, start_address, next_packet_start) != 2) {
      0006A4 90r00r00         [24] 1737 	mov	dptr,#_spi_buffer_read_PARM_2
      0006A7 EE               [12] 1738 	mov	a,r6
      0006A8 F0               [24] 1739 	movx	@dptr,a
      0006A9 EF               [12] 1740 	mov	a,r7
      0006AA A3               [24] 1741 	inc	dptr
      0006AB F0               [24] 1742 	movx	@dptr,a
      0006AC 90r00r00         [24] 1743 	mov	dptr,#_spi_buffer_read_PARM_3
      0006AF 74rF7            [12] 1744 	mov	a,#_process_packet_from_buffer_next_packet_start_10001_140
      0006B1 F0               [24] 1745 	movx	@dptr,a
      0006B2 74s05            [12] 1746 	mov	a,#(_process_packet_from_buffer_next_packet_start_10001_140 >> 8)
      0006B4 A3               [24] 1747 	inc	dptr
      0006B5 F0               [24] 1748 	movx	@dptr,a
      0006B6 E4               [12] 1749 	clr	a
      0006B7 A3               [24] 1750 	inc	dptr
      0006B8 F0               [24] 1751 	movx	@dptr,a
      0006B9 90 00 02         [24] 1752 	mov	dptr,#0x0002
      0006BC C0 07            [24] 1753 	push	ar7
      0006BE C0 06            [24] 1754 	push	ar6
      0006C0 C0 05            [24] 1755 	push	ar5
      0006C2 C0 04            [24] 1756 	push	ar4
      0006C4 12r00r00         [24] 1757 	lcall	_spi_buffer_read
      0006C7 AA 82            [24] 1758 	mov	r2, dpl
      0006C9 AB 83            [24] 1759 	mov	r3, dph
      0006CB D0 04            [24] 1760 	pop	ar4
      0006CD D0 05            [24] 1761 	pop	ar5
      0006CF D0 06            [24] 1762 	pop	ar6
      0006D1 D0 07            [24] 1763 	pop	ar7
      0006D3 BA 02 05         [24] 1764 	cjne	r2,#0x02,00153$
      0006D6 BB 00 02         [24] 1765 	cjne	r3,#0x00,00153$
      0006D9 80 16            [24] 1766 	sjmp	00104$
      0006DB                       1767 00153$:
                                   1768 ;	tcp.c:168: printf("\n\rFailed to read packet start address bytes\n\r");
      0006DB 74r3E            [12] 1769 	mov	a,#___str_4
      0006DD C0 E0            [24] 1770 	push	acc
      0006DF 74s00            [12] 1771 	mov	a,#(___str_4 >> 8)
      0006E1 C0 E0            [24] 1772 	push	acc
      0006E3 74 80            [12] 1773 	mov	a,#0x80
      0006E5 C0 E0            [24] 1774 	push	acc
      0006E7 12r00r00         [24] 1775 	lcall	_printf
      0006EA 15 81            [12] 1776 	dec	sp
      0006EC 15 81            [12] 1777 	dec	sp
      0006EE 15 81            [12] 1778 	dec	sp
                                   1779 ;	tcp.c:169: return;
      0006F0 22               [24] 1780 	ret
      0006F1                       1781 00104$:
                                   1782 ;	tcp.c:173: next_start_address = ((uint16_t)next_packet_start[1] << 8) | next_packet_start[0];
      0006F1 90r05rF8         [24] 1783 	mov	dptr,#(_process_packet_from_buffer_next_packet_start_10001_140 + 0x0001)
      0006F4 E0               [24] 1784 	movx	a,@dptr
      0006F5 FA               [12] 1785 	mov	r2,a
      0006F6 7B 00            [12] 1786 	mov	r3,#0x00
      0006F8 90r05rF7         [24] 1787 	mov	dptr,#_process_packet_from_buffer_next_packet_start_10001_140
      0006FB E0               [24] 1788 	movx	a,@dptr
      0006FC 79 00            [12] 1789 	mov	r1,#0x00
      0006FE 42 03            [12] 1790 	orl	ar3,a
      000700 E9               [12] 1791 	mov	a,r1
      000701 42 02            [12] 1792 	orl	ar2,a
                                   1793 ;	tcp.c:176: if (next_start_address < start_address) {
      000703 C3               [12] 1794 	clr	c
      000704 EB               [12] 1795 	mov	a,r3
      000705 9E               [12] 1796 	subb	a,r6
      000706 EA               [12] 1797 	mov	a,r2
      000707 9F               [12] 1798 	subb	a,r7
      000708 50 1A            [24] 1799 	jnc	00106$
                                   1800 ;	tcp.c:177: printf("\n\rInvalid next start address: 0x%04X\n\r", next_start_address);
      00070A C0 03            [24] 1801 	push	ar3
      00070C C0 02            [24] 1802 	push	ar2
      00070E 74r6C            [12] 1803 	mov	a,#___str_5
      000710 C0 E0            [24] 1804 	push	acc
      000712 74s00            [12] 1805 	mov	a,#(___str_5 >> 8)
      000714 C0 E0            [24] 1806 	push	acc
      000716 74 80            [12] 1807 	mov	a,#0x80
      000718 C0 E0            [24] 1808 	push	acc
      00071A 12r00r00         [24] 1809 	lcall	_printf
      00071D E5 81            [12] 1810 	mov	a,sp
      00071F 24 FB            [12] 1811 	add	a,#0xfb
      000721 F5 81            [12] 1812 	mov	sp,a
                                   1813 ;	tcp.c:178: return;
      000723 22               [24] 1814 	ret
      000724                       1815 00106$:
                                   1816 ;	tcp.c:180: packet_size = next_start_address - (start_address+6);
      000724 74 06            [12] 1817 	mov	a,#0x06
      000726 2C               [12] 1818 	add	a, r4
      000727 FE               [12] 1819 	mov	r6,a
      000728 E4               [12] 1820 	clr	a
      000729 3D               [12] 1821 	addc	a, r5
      00072A FF               [12] 1822 	mov	r7,a
      00072B EB               [12] 1823 	mov	a,r3
      00072C C3               [12] 1824 	clr	c
      00072D 9E               [12] 1825 	subb	a,r6
      00072E FE               [12] 1826 	mov	r6,a
      00072F EA               [12] 1827 	mov	a,r2
      000730 9F               [12] 1828 	subb	a,r7
      000731 FF               [12] 1829 	mov	r7,a
                                   1830 ;	tcp.c:183: uint8_t *packet_data = (uint8_t *)malloc(packet_size);
      000732 8E 00            [24] 1831 	mov	ar0,r6
      000734 8F 01            [24] 1832 	mov	ar1,r7
      000736 88 82            [24] 1833 	mov	dpl, r0
      000738 89 83            [24] 1834 	mov	dph, r1
      00073A C0 07            [24] 1835 	push	ar7
      00073C C0 06            [24] 1836 	push	ar6
      00073E C0 05            [24] 1837 	push	ar5
      000740 C0 04            [24] 1838 	push	ar4
      000742 C0 03            [24] 1839 	push	ar3
      000744 C0 02            [24] 1840 	push	ar2
      000746 12r00r00         [24] 1841 	lcall	_malloc
      000749 A8 82            [24] 1842 	mov	r0, dpl
      00074B A9 83            [24] 1843 	mov	r1, dph
      00074D D0 02            [24] 1844 	pop	ar2
      00074F D0 03            [24] 1845 	pop	ar3
      000751 D0 04            [24] 1846 	pop	ar4
      000753 D0 05            [24] 1847 	pop	ar5
      000755 D0 06            [24] 1848 	pop	ar6
      000757 D0 07            [24] 1849 	pop	ar7
      000759 88*03            [24] 1850 	mov	_process_packet_from_buffer_sloc0_1_0,r0
      00075B 89*04            [24] 1851 	mov	(_process_packet_from_buffer_sloc0_1_0 + 1),r1
      00075D 75*05 00         [24] 1852 	mov	(_process_packet_from_buffer_sloc0_1_0 + 2),#0x00
                                   1853 ;	tcp.c:184: if (packet_data == NULL) {
      000760 E5*03            [12] 1854 	mov	a,_process_packet_from_buffer_sloc0_1_0
      000762 45*04            [12] 1855 	orl	a,(_process_packet_from_buffer_sloc0_1_0 + 1)
      000764 70 1A            [24] 1856 	jnz	00108$
                                   1857 ;	tcp.c:185: printf("\n\rMemory allocation failed for packet size: %d\n\r", packet_size);
      000766 C0 06            [24] 1858 	push	ar6
      000768 C0 07            [24] 1859 	push	ar7
      00076A 74r93            [12] 1860 	mov	a,#___str_6
      00076C C0 E0            [24] 1861 	push	acc
      00076E 74s00            [12] 1862 	mov	a,#(___str_6 >> 8)
      000770 C0 E0            [24] 1863 	push	acc
      000772 74 80            [12] 1864 	mov	a,#0x80
      000774 C0 E0            [24] 1865 	push	acc
      000776 12r00r00         [24] 1866 	lcall	_printf
      000779 E5 81            [12] 1867 	mov	a,sp
      00077B 24 FB            [12] 1868 	add	a,#0xfb
      00077D F5 81            [12] 1869 	mov	sp,a
                                   1870 ;	tcp.c:186: return;
      00077F 22               [24] 1871 	ret
      000780                       1872 00108$:
                                   1873 ;	tcp.c:190: if (spi_buffer_read(packet_size, start_address+6, packet_data) != packet_size) {
      000780 8E 00            [24] 1874 	mov	ar0,r6
      000782 8F 01            [24] 1875 	mov	ar1,r7
      000784 74 06            [12] 1876 	mov	a,#0x06
      000786 2C               [12] 1877 	add	a, r4
      000787 FC               [12] 1878 	mov	r4,a
      000788 E4               [12] 1879 	clr	a
      000789 3D               [12] 1880 	addc	a, r5
      00078A FD               [12] 1881 	mov	r5,a
      00078B 90r00r00         [24] 1882 	mov	dptr,#_spi_buffer_read_PARM_2
      00078E EC               [12] 1883 	mov	a,r4
      00078F F0               [24] 1884 	movx	@dptr,a
      000790 ED               [12] 1885 	mov	a,r5
      000791 A3               [24] 1886 	inc	dptr
      000792 F0               [24] 1887 	movx	@dptr,a
      000793 90r00r00         [24] 1888 	mov	dptr,#_spi_buffer_read_PARM_3
      000796 E5*03            [12] 1889 	mov	a,_process_packet_from_buffer_sloc0_1_0
      000798 F0               [24] 1890 	movx	@dptr,a
      000799 E5*04            [12] 1891 	mov	a,(_process_packet_from_buffer_sloc0_1_0 + 1)
      00079B A3               [24] 1892 	inc	dptr
      00079C F0               [24] 1893 	movx	@dptr,a
      00079D E5*05            [12] 1894 	mov	a,(_process_packet_from_buffer_sloc0_1_0 + 2)
      00079F A3               [24] 1895 	inc	dptr
      0007A0 F0               [24] 1896 	movx	@dptr,a
      0007A1 88 82            [24] 1897 	mov	dpl, r0
      0007A3 89 83            [24] 1898 	mov	dph, r1
      0007A5 C0 07            [24] 1899 	push	ar7
      0007A7 C0 06            [24] 1900 	push	ar6
      0007A9 C0 03            [24] 1901 	push	ar3
      0007AB C0 02            [24] 1902 	push	ar2
      0007AD 12r00r00         [24] 1903 	lcall	_spi_buffer_read
      0007B0 AC 82            [24] 1904 	mov	r4, dpl
      0007B2 AD 83            [24] 1905 	mov	r5, dph
      0007B4 D0 02            [24] 1906 	pop	ar2
      0007B6 D0 03            [24] 1907 	pop	ar3
      0007B8 D0 06            [24] 1908 	pop	ar6
      0007BA D0 07            [24] 1909 	pop	ar7
      0007BC EC               [12] 1910 	mov	a,r4
      0007BD B5 06 06         [24] 1911 	cjne	a,ar6,00156$
      0007C0 ED               [12] 1912 	mov	a,r5
      0007C1 B5 07 02         [24] 1913 	cjne	a,ar7,00156$
      0007C4 80 24            [24] 1914 	sjmp	00110$
      0007C6                       1915 00156$:
                                   1916 ;	tcp.c:191: printf("\n\rFailed to read packet data\n\r");
      0007C6 74rC4            [12] 1917 	mov	a,#___str_7
      0007C8 C0 E0            [24] 1918 	push	acc
      0007CA 74s00            [12] 1919 	mov	a,#(___str_7 >> 8)
      0007CC C0 E0            [24] 1920 	push	acc
      0007CE 74 80            [12] 1921 	mov	a,#0x80
      0007D0 C0 E0            [24] 1922 	push	acc
      0007D2 12r00r00         [24] 1923 	lcall	_printf
      0007D5 15 81            [12] 1924 	dec	sp
      0007D7 15 81            [12] 1925 	dec	sp
      0007D9 15 81            [12] 1926 	dec	sp
                                   1927 ;	tcp.c:192: free(packet_data);
      0007DB AC*03            [24] 1928 	mov	r4,_process_packet_from_buffer_sloc0_1_0
      0007DD A9*04            [24] 1929 	mov	r1,(_process_packet_from_buffer_sloc0_1_0 + 1)
      0007DF 7D 00            [12] 1930 	mov	r5,#0x00
      0007E1 8C 82            [24] 1931 	mov	dpl, r4
      0007E3 89 83            [24] 1932 	mov	dph, r1
      0007E5 8D F0            [24] 1933 	mov	b, r5
                                   1934 ;	tcp.c:193: return;
      0007E7 02r00r00         [24] 1935 	ljmp	_free
      0007EA                       1936 00110$:
                                   1937 ;	tcp.c:197: uint8_t *response = process_tcp_packet(packet_data, packet_size, &response_size);
      0007EA 90r00r0B         [24] 1938 	mov	dptr,#_process_tcp_packet_PARM_2
      0007ED EE               [12] 1939 	mov	a,r6
      0007EE F0               [24] 1940 	movx	@dptr,a
      0007EF EF               [12] 1941 	mov	a,r7
      0007F0 A3               [24] 1942 	inc	dptr
      0007F1 F0               [24] 1943 	movx	@dptr,a
      0007F2 90r00r0D         [24] 1944 	mov	dptr,#_process_tcp_packet_PARM_3
      0007F5 74rF9            [12] 1945 	mov	a,#_process_packet_from_buffer_response_size_10001_140
      0007F7 F0               [24] 1946 	movx	@dptr,a
      0007F8 74s05            [12] 1947 	mov	a,#(_process_packet_from_buffer_response_size_10001_140 >> 8)
      0007FA A3               [24] 1948 	inc	dptr
      0007FB F0               [24] 1949 	movx	@dptr,a
      0007FC E4               [12] 1950 	clr	a
      0007FD A3               [24] 1951 	inc	dptr
      0007FE F0               [24] 1952 	movx	@dptr,a
      0007FF 85*03 82         [24] 1953 	mov	dpl, _process_packet_from_buffer_sloc0_1_0
      000802 85*04 83         [24] 1954 	mov	dph, (_process_packet_from_buffer_sloc0_1_0 + 1)
      000805 85*05 F0         [24] 1955 	mov	b, (_process_packet_from_buffer_sloc0_1_0 + 2)
      000808 C0 07            [24] 1956 	push	ar7
      00080A C0 06            [24] 1957 	push	ar6
      00080C C0 03            [24] 1958 	push	ar3
      00080E C0 02            [24] 1959 	push	ar2
      000810 12r01r83         [24] 1960 	lcall	_process_tcp_packet
      000813 A9 82            [24] 1961 	mov	r1, dpl
      000815 AC 83            [24] 1962 	mov	r4, dph
      000817 AD F0            [24] 1963 	mov	r5, b
      000819 D0 02            [24] 1964 	pop	ar2
      00081B D0 03            [24] 1965 	pop	ar3
      00081D D0 06            [24] 1966 	pop	ar6
      00081F D0 07            [24] 1967 	pop	ar7
                                   1968 ;	tcp.c:200: if (response != NULL) {
      000821 E9               [12] 1969 	mov	a,r1
      000822 4C               [12] 1970 	orl	a,r4
      000823 70 03            [24] 1971 	jnz	00157$
      000825 02r08rDE         [24] 1972 	ljmp	00112$
      000828                       1973 00157$:
                                   1974 ;	tcp.c:201: printf("\nProcessed response data:\n");
      000828 C0 03            [24] 1975 	push	ar3
      00082A C0 02            [24] 1976 	push	ar2
      00082C C0 07            [24] 1977 	push	ar7
      00082E C0 06            [24] 1978 	push	ar6
      000830 C0 05            [24] 1979 	push	ar5
      000832 C0 04            [24] 1980 	push	ar4
      000834 C0 03            [24] 1981 	push	ar3
      000836 C0 02            [24] 1982 	push	ar2
      000838 C0 01            [24] 1983 	push	ar1
      00083A 74rE3            [12] 1984 	mov	a,#___str_8
      00083C C0 E0            [24] 1985 	push	acc
      00083E 74s00            [12] 1986 	mov	a,#(___str_8 >> 8)
      000840 C0 E0            [24] 1987 	push	acc
      000842 74 80            [12] 1988 	mov	a,#0x80
      000844 C0 E0            [24] 1989 	push	acc
      000846 12r00r00         [24] 1990 	lcall	_printf
      000849 15 81            [12] 1991 	dec	sp
      00084B 15 81            [12] 1992 	dec	sp
      00084D 15 81            [12] 1993 	dec	sp
      00084F D0 01            [24] 1994 	pop	ar1
      000851 D0 02            [24] 1995 	pop	ar2
      000853 D0 03            [24] 1996 	pop	ar3
      000855 D0 04            [24] 1997 	pop	ar4
      000857 D0 05            [24] 1998 	pop	ar5
      000859 D0 06            [24] 1999 	pop	ar6
      00085B D0 07            [24] 2000 	pop	ar7
                                   2001 ;	tcp.c:202: print_hexdump(response, response_size);
      00085D 90r05rF9         [24] 2002 	mov	dptr,#_process_packet_from_buffer_response_size_10001_140
      000860 E0               [24] 2003 	movx	a,@dptr
      000861 F8               [12] 2004 	mov	r0,a
      000862 A3               [24] 2005 	inc	dptr
      000863 E0               [24] 2006 	movx	a,@dptr
      000864 FB               [12] 2007 	mov	r3,a
      000865 90r05rF0         [24] 2008 	mov	dptr,#_print_hexdump_PARM_2
      000868 E8               [12] 2009 	mov	a,r0
      000869 F0               [24] 2010 	movx	@dptr,a
      00086A EB               [12] 2011 	mov	a,r3
      00086B A3               [24] 2012 	inc	dptr
      00086C F0               [24] 2013 	movx	@dptr,a
      00086D 89 82            [24] 2014 	mov	dpl, r1
      00086F 8C 83            [24] 2015 	mov	dph, r4
      000871 8D F0            [24] 2016 	mov	b, r5
      000873 C0 07            [24] 2017 	push	ar7
      000875 C0 06            [24] 2018 	push	ar6
      000877 C0 05            [24] 2019 	push	ar5
      000879 C0 04            [24] 2020 	push	ar4
      00087B C0 03            [24] 2021 	push	ar3
      00087D C0 02            [24] 2022 	push	ar2
      00087F C0 01            [24] 2023 	push	ar1
      000881 12r05r5F         [24] 2024 	lcall	_print_hexdump
      000884 D0 01            [24] 2025 	pop	ar1
      000886 D0 02            [24] 2026 	pop	ar2
      000888 D0 03            [24] 2027 	pop	ar3
      00088A D0 04            [24] 2028 	pop	ar4
      00088C D0 05            [24] 2029 	pop	ar5
      00088E D0 06            [24] 2030 	pop	ar6
      000890 D0 07            [24] 2031 	pop	ar7
                                   2032 ;	tcp.c:203: transmit_tcp_packet(response, response_size);
      000892 90r05rF9         [24] 2033 	mov	dptr,#_process_packet_from_buffer_response_size_10001_140
      000895 E0               [24] 2034 	movx	a,@dptr
      000896 FA               [12] 2035 	mov	r2,a
      000897 A3               [24] 2036 	inc	dptr
      000898 E0               [24] 2037 	movx	a,@dptr
      000899 FB               [12] 2038 	mov	r3,a
      00089A 90r05rFB         [24] 2039 	mov	dptr,#_transmit_tcp_packet_PARM_2
      00089D EA               [12] 2040 	mov	a,r2
      00089E F0               [24] 2041 	movx	@dptr,a
      00089F EB               [12] 2042 	mov	a,r3
      0008A0 A3               [24] 2043 	inc	dptr
      0008A1 F0               [24] 2044 	movx	@dptr,a
      0008A2 89 82            [24] 2045 	mov	dpl, r1
      0008A4 8C 83            [24] 2046 	mov	dph, r4
      0008A6 8D F0            [24] 2047 	mov	b, r5
      0008A8 C0 07            [24] 2048 	push	ar7
      0008AA C0 06            [24] 2049 	push	ar6
      0008AC C0 05            [24] 2050 	push	ar5
      0008AE C0 04            [24] 2051 	push	ar4
      0008B0 C0 03            [24] 2052 	push	ar3
      0008B2 C0 02            [24] 2053 	push	ar2
      0008B4 C0 01            [24] 2054 	push	ar1
      0008B6 12r09r4F         [24] 2055 	lcall	_transmit_tcp_packet
      0008B9 D0 01            [24] 2056 	pop	ar1
      0008BB D0 02            [24] 2057 	pop	ar2
      0008BD D0 03            [24] 2058 	pop	ar3
      0008BF D0 04            [24] 2059 	pop	ar4
      0008C1 D0 05            [24] 2060 	pop	ar5
                                   2061 ;	tcp.c:204: free(response); // Free response memory if allocated dynamically
      0008C3 89 82            [24] 2062 	mov	dpl, r1
      0008C5 8C 83            [24] 2063 	mov	dph, r4
      0008C7 8D F0            [24] 2064 	mov	b, r5
      0008C9 C0 03            [24] 2065 	push	ar3
      0008CB C0 02            [24] 2066 	push	ar2
      0008CD 12r00r00         [24] 2067 	lcall	_free
      0008D0 D0 02            [24] 2068 	pop	ar2
      0008D2 D0 03            [24] 2069 	pop	ar3
      0008D4 D0 06            [24] 2070 	pop	ar6
      0008D6 D0 07            [24] 2071 	pop	ar7
      0008D8 D0 02            [24] 2072 	pop	ar2
      0008DA D0 03            [24] 2073 	pop	ar3
      0008DC 80 25            [24] 2074 	sjmp	00113$
      0008DE                       2075 00112$:
                                   2076 ;	tcp.c:206: printf("\nNo response generated by TCP packet processing.\n");
      0008DE C0 07            [24] 2077 	push	ar7
      0008E0 C0 06            [24] 2078 	push	ar6
      0008E2 C0 03            [24] 2079 	push	ar3
      0008E4 C0 02            [24] 2080 	push	ar2
      0008E6 74rFE            [12] 2081 	mov	a,#___str_9
      0008E8 C0 E0            [24] 2082 	push	acc
      0008EA 74s00            [12] 2083 	mov	a,#(___str_9 >> 8)
      0008EC C0 E0            [24] 2084 	push	acc
      0008EE 74 80            [12] 2085 	mov	a,#0x80
      0008F0 C0 E0            [24] 2086 	push	acc
      0008F2 12r00r00         [24] 2087 	lcall	_printf
      0008F5 15 81            [12] 2088 	dec	sp
      0008F7 15 81            [12] 2089 	dec	sp
      0008F9 15 81            [12] 2090 	dec	sp
      0008FB D0 02            [24] 2091 	pop	ar2
      0008FD D0 03            [24] 2092 	pop	ar3
      0008FF D0 06            [24] 2093 	pop	ar6
      000901 D0 07            [24] 2094 	pop	ar7
      000903                       2095 00113$:
                                   2096 ;	tcp.c:210: free(packet_data);
      000903 AC*03            [24] 2097 	mov	r4,_process_packet_from_buffer_sloc0_1_0
      000905 A9*04            [24] 2098 	mov	r1,(_process_packet_from_buffer_sloc0_1_0 + 1)
      000907 7D 00            [12] 2099 	mov	r5,#0x00
      000909 8C 82            [24] 2100 	mov	dpl, r4
      00090B 89 83            [24] 2101 	mov	dph, r1
      00090D 8D F0            [24] 2102 	mov	b, r5
      00090F C0 07            [24] 2103 	push	ar7
      000911 C0 06            [24] 2104 	push	ar6
      000913 C0 03            [24] 2105 	push	ar3
      000915 C0 02            [24] 2106 	push	ar2
      000917 12r00r00         [24] 2107 	lcall	_free
      00091A D0 02            [24] 2108 	pop	ar2
      00091C D0 03            [24] 2109 	pop	ar3
      00091E D0 06            [24] 2110 	pop	ar6
      000920 D0 07            [24] 2111 	pop	ar7
                                   2112 ;	tcp.c:213: packet_size, start_address, next_start_address - 1);
      000922 1B               [12] 2113 	dec	r3
      000923 BB FF 01         [24] 2114 	cjne	r3,#0xff,00158$
      000926 1A               [12] 2115 	dec	r2
      000927                       2116 00158$:
                                   2117 ;	tcp.c:212: printf("\n\rSuccessfully processed packet of size %d from 0x%04X to 0x%04X\n\r",
      000927 C0 03            [24] 2118 	push	ar3
      000929 C0 02            [24] 2119 	push	ar2
      00092B 90r05rF5         [24] 2120 	mov	dptr,#_process_packet_from_buffer_start_address_10000_137
      00092E E0               [24] 2121 	movx	a,@dptr
      00092F C0 E0            [24] 2122 	push	acc
      000931 A3               [24] 2123 	inc	dptr
      000932 E0               [24] 2124 	movx	a,@dptr
      000933 C0 E0            [24] 2125 	push	acc
      000935 C0 06            [24] 2126 	push	ar6
      000937 C0 07            [24] 2127 	push	ar7
      000939 74r30            [12] 2128 	mov	a,#___str_10
      00093B C0 E0            [24] 2129 	push	acc
      00093D 74s01            [12] 2130 	mov	a,#(___str_10 >> 8)
      00093F C0 E0            [24] 2131 	push	acc
      000941 74 80            [12] 2132 	mov	a,#0x80
      000943 C0 E0            [24] 2133 	push	acc
      000945 12r00r00         [24] 2134 	lcall	_printf
      000948 E5 81            [12] 2135 	mov	a,sp
      00094A 24 F7            [12] 2136 	add	a,#0xf7
      00094C F5 81            [12] 2137 	mov	sp,a
                                   2138 ;	tcp.c:214: }
      00094E 22               [24] 2139 	ret
                                   2140 ;------------------------------------------------------------
                                   2141 ;Allocation info for local variables in function 'transmit_tcp_packet'
                                   2142 ;------------------------------------------------------------
                                   2143 ;packet_size               Allocated with name '_transmit_tcp_packet_PARM_2'
                                   2144 ;packet                    Allocated with name '_transmit_tcp_packet_packet_10000_149'
                                   2145 ;start_address             Allocated with name '_transmit_tcp_packet_start_address_10000_150'
                                   2146 ;end_address               Allocated with name '_transmit_tcp_packet_end_address_10001_152'
                                   2147 ;------------------------------------------------------------
                                   2148 ;	tcp.c:217: void transmit_tcp_packet(uint8_t *packet, uint16_t packet_size)
                                   2149 ;	-----------------------------------------
                                   2150 ;	 function transmit_tcp_packet
                                   2151 ;	-----------------------------------------
      00094F                       2152 _transmit_tcp_packet:
      00094F AF F0            [24] 2153 	mov	r7,b
      000951 AE 83            [24] 2154 	mov	r6,dph
      000953 E5 82            [12] 2155 	mov	a,dpl
      000955 90r05rFD         [24] 2156 	mov	dptr,#_transmit_tcp_packet_packet_10000_149
      000958 F0               [24] 2157 	movx	@dptr,a
      000959 EE               [12] 2158 	mov	a,r6
      00095A A3               [24] 2159 	inc	dptr
      00095B F0               [24] 2160 	movx	@dptr,a
      00095C EF               [12] 2161 	mov	a,r7
      00095D A3               [24] 2162 	inc	dptr
      00095E F0               [24] 2163 	movx	@dptr,a
                                   2164 ;	tcp.c:222: if ((start_address + packet_size - 1) > 0x1FFF) {
      00095F 90r05rFB         [24] 2165 	mov	dptr,#_transmit_tcp_packet_PARM_2
      000962 E0               [24] 2166 	movx	a,@dptr
      000963 FE               [12] 2167 	mov	r6,a
      000964 A3               [24] 2168 	inc	dptr
      000965 E0               [24] 2169 	movx	a,@dptr
      000966 FF               [12] 2170 	mov	r7,a
      000967 8E 04            [24] 2171 	mov	ar4,r6
      000969 74 0C            [12] 2172 	mov	a,#0x0c
      00096B 2F               [12] 2173 	add	a, r7
      00096C FD               [12] 2174 	mov	r5,a
      00096D 1C               [12] 2175 	dec	r4
      00096E BC FF 01         [24] 2176 	cjne	r4,#0xff,00129$
      000971 1D               [12] 2177 	dec	r5
      000972                       2178 00129$:
      000972 C3               [12] 2179 	clr	c
      000973 74 FF            [12] 2180 	mov	a,#0xff
      000975 9C               [12] 2181 	subb	a,r4
      000976 74 1F            [12] 2182 	mov	a,#0x1f
      000978 9D               [12] 2183 	subb	a,r5
      000979 50 16            [24] 2184 	jnc	00102$
                                   2185 ;	tcp.c:223: printf("\nInvalid Buffer Size. Buffer exceeds valid address range.\n");
      00097B 74r73            [12] 2186 	mov	a,#___str_11
      00097D C0 E0            [24] 2187 	push	acc
      00097F 74s01            [12] 2188 	mov	a,#(___str_11 >> 8)
      000981 C0 E0            [24] 2189 	push	acc
      000983 74 80            [12] 2190 	mov	a,#0x80
      000985 C0 E0            [24] 2191 	push	acc
      000987 12r00r00         [24] 2192 	lcall	_printf
      00098A 15 81            [12] 2193 	dec	sp
      00098C 15 81            [12] 2194 	dec	sp
      00098E 15 81            [12] 2195 	dec	sp
                                   2196 ;	tcp.c:224: return;
      000990 22               [24] 2197 	ret
      000991                       2198 00102$:
                                   2199 ;	tcp.c:226: uint16_t end_address = start_address + packet_size - 1;
      000991 8E 04            [24] 2200 	mov	ar4,r6
      000993 74 0C            [12] 2201 	mov	a,#0x0c
      000995 2F               [12] 2202 	add	a, r7
      000996 FD               [12] 2203 	mov	r5,a
      000997 1C               [12] 2204 	dec	r4
      000998 BC FF 01         [24] 2205 	cjne	r4,#0xff,00131$
      00099B 1D               [12] 2206 	dec	r5
      00099C                       2207 00131$:
                                   2208 ;	tcp.c:227: spi_buffer_write(packet_size, start_address, packet);
      00099C 90r05rFD         [24] 2209 	mov	dptr,#_transmit_tcp_packet_packet_10000_149
      00099F E0               [24] 2210 	movx	a,@dptr
      0009A0 F9               [12] 2211 	mov	r1,a
      0009A1 A3               [24] 2212 	inc	dptr
      0009A2 E0               [24] 2213 	movx	a,@dptr
      0009A3 FA               [12] 2214 	mov	r2,a
      0009A4 A3               [24] 2215 	inc	dptr
      0009A5 E0               [24] 2216 	movx	a,@dptr
      0009A6 FB               [12] 2217 	mov	r3,a
      0009A7 90r00r00         [24] 2218 	mov	dptr,#_spi_buffer_write_PARM_2
      0009AA E4               [12] 2219 	clr	a
      0009AB F0               [24] 2220 	movx	@dptr,a
      0009AC 74 0C            [12] 2221 	mov	a,#0x0c
      0009AE A3               [24] 2222 	inc	dptr
      0009AF F0               [24] 2223 	movx	@dptr,a
      0009B0 90r00r00         [24] 2224 	mov	dptr,#_spi_buffer_write_PARM_3
      0009B3 E9               [12] 2225 	mov	a,r1
      0009B4 F0               [24] 2226 	movx	@dptr,a
      0009B5 EA               [12] 2227 	mov	a,r2
      0009B6 A3               [24] 2228 	inc	dptr
      0009B7 F0               [24] 2229 	movx	@dptr,a
      0009B8 EB               [12] 2230 	mov	a,r3
      0009B9 A3               [24] 2231 	inc	dptr
      0009BA F0               [24] 2232 	movx	@dptr,a
      0009BB 8E 82            [24] 2233 	mov	dpl, r6
      0009BD 8F 83            [24] 2234 	mov	dph, r7
      0009BF C0 05            [24] 2235 	push	ar5
      0009C1 C0 04            [24] 2236 	push	ar4
      0009C3 12r00r00         [24] 2237 	lcall	_spi_buffer_write
      0009C6 D0 04            [24] 2238 	pop	ar4
      0009C8 D0 05            [24] 2239 	pop	ar5
                                   2240 ;	tcp.c:230: enc28j60_set_transmit_pointers(start_address, end_address);
      0009CA 90r00r00         [24] 2241 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      0009CD EC               [12] 2242 	mov	a,r4
      0009CE F0               [24] 2243 	movx	@dptr,a
      0009CF ED               [12] 2244 	mov	a,r5
      0009D0 A3               [24] 2245 	inc	dptr
      0009D1 F0               [24] 2246 	movx	@dptr,a
      0009D2 90 0C 00         [24] 2247 	mov	dptr,#0x0c00
      0009D5 12r00r00         [24] 2248 	lcall	_enc28j60_set_transmit_pointers
                                   2249 ;	tcp.c:233: enc28j60_start_transmission();
      0009D8 12r00r00         [24] 2250 	lcall	_enc28j60_start_transmission
                                   2251 ;	tcp.c:236: if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
      0009DB 90 01 F4         [24] 2252 	mov	dptr,#0x01f4
      0009DE 12r00r00         [24] 2253 	lcall	_wait_for_transmission_complete
      0009E1 E5 82            [12] 2254 	mov	a, dpl
      0009E3 60 38            [24] 2255 	jz	00107$
                                   2256 ;	tcp.c:238: if (enc28j60_transmission_successful()) {
      0009E5 12r00r00         [24] 2257 	lcall	_enc28j60_transmission_successful
      0009E8 E5 82            [12] 2258 	mov	a, dpl
      0009EA 85 83 F0         [24] 2259 	mov	b, dph
      0009ED 45 F0            [12] 2260 	orl	a,b
      0009EF 60 16            [24] 2261 	jz	00104$
                                   2262 ;	tcp.c:239: printf("TCP request sent successfully.\n\r");
      0009F1 74rAE            [12] 2263 	mov	a,#___str_12
      0009F3 C0 E0            [24] 2264 	push	acc
      0009F5 74s01            [12] 2265 	mov	a,#(___str_12 >> 8)
      0009F7 C0 E0            [24] 2266 	push	acc
      0009F9 74 80            [12] 2267 	mov	a,#0x80
      0009FB C0 E0            [24] 2268 	push	acc
      0009FD 12r00r00         [24] 2269 	lcall	_printf
      000A00 15 81            [12] 2270 	dec	sp
      000A02 15 81            [12] 2271 	dec	sp
      000A04 15 81            [12] 2272 	dec	sp
      000A06 22               [24] 2273 	ret
      000A07                       2274 00104$:
                                   2275 ;	tcp.c:241: printf("TCP transmission failed. Check error flags.\n\r");
      000A07 74rCF            [12] 2276 	mov	a,#___str_13
      000A09 C0 E0            [24] 2277 	push	acc
      000A0B 74s01            [12] 2278 	mov	a,#(___str_13 >> 8)
      000A0D C0 E0            [24] 2279 	push	acc
      000A0F 74 80            [12] 2280 	mov	a,#0x80
      000A11 C0 E0            [24] 2281 	push	acc
      000A13 12r00r00         [24] 2282 	lcall	_printf
      000A16 15 81            [12] 2283 	dec	sp
      000A18 15 81            [12] 2284 	dec	sp
      000A1A 15 81            [12] 2285 	dec	sp
      000A1C 22               [24] 2286 	ret
      000A1D                       2287 00107$:
                                   2288 ;	tcp.c:245: "Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
      000A1D 74rFD            [12] 2289 	mov	a,#___str_14
      000A1F C0 E0            [24] 2290 	push	acc
      000A21 74s01            [12] 2291 	mov	a,#(___str_14 >> 8)
      000A23 C0 E0            [24] 2292 	push	acc
      000A25 74 80            [12] 2293 	mov	a,#0x80
      000A27 C0 E0            [24] 2294 	push	acc
      000A29 12r00r00         [24] 2295 	lcall	_printf
      000A2C 15 81            [12] 2296 	dec	sp
      000A2E 15 81            [12] 2297 	dec	sp
      000A30 15 81            [12] 2298 	dec	sp
                                   2299 ;	tcp.c:247: }
      000A32 22               [24] 2300 	ret
                                   2301 	.area CSEG    (CODE)
                                   2302 	.area CONST   (CODE)
                                   2303 	.area CONST   (CODE)
      000000                       2304 ___str_0:
      000000 0A                    2305 	.db 0x0a
      000001 48 65 78 64 75 6D 70  2306 	.ascii "Hexdump (Size: %d):"
             20 28 53 69 7A 65 3A
             20 25 64 29 3A
      000014 0A                    2307 	.db 0x0a
      000015 00                    2308 	.db 0x00
                                   2309 	.area CSEG    (CODE)
                                   2310 	.area CONST   (CODE)
      000016                       2311 ___str_1:
      000016 25 30 32 58 20        2312 	.ascii "%02X "
      00001B 00                    2313 	.db 0x00
                                   2314 	.area CSEG    (CODE)
                                   2315 	.area CONST   (CODE)
      00001C                       2316 ___str_2:
      00001C 0A                    2317 	.db 0x0a
      00001D 00                    2318 	.db 0x00
                                   2319 	.area CSEG    (CODE)
                                   2320 	.area CONST   (CODE)
      00001E                       2321 ___str_3:
      00001E 0A                    2322 	.db 0x0a
      00001F 0D                    2323 	.db 0x0d
      000020 49 6E 76 61 6C 69 64  2324 	.ascii "Invalid start address: %04X"
             20 73 74 61 72 74 20
             61 64 64 72 65 73 73
             3A 20 25 30 34 58
      00003B 0A                    2325 	.db 0x0a
      00003C 0D                    2326 	.db 0x0d
      00003D 00                    2327 	.db 0x00
                                   2328 	.area CSEG    (CODE)
                                   2329 	.area CONST   (CODE)
      00003E                       2330 ___str_4:
      00003E 0A                    2331 	.db 0x0a
      00003F 0D                    2332 	.db 0x0d
      000040 46 61 69 6C 65 64 20  2333 	.ascii "Failed to read packet start address bytes"
             74 6F 20 72 65 61 64
             20 70 61 63 6B 65 74
             20 73 74 61 72 74 20
             61 64 64 72 65 73 73
             20 62 79 74 65 73
      000069 0A                    2334 	.db 0x0a
      00006A 0D                    2335 	.db 0x0d
      00006B 00                    2336 	.db 0x00
                                   2337 	.area CSEG    (CODE)
                                   2338 	.area CONST   (CODE)
      00006C                       2339 ___str_5:
      00006C 0A                    2340 	.db 0x0a
      00006D 0D                    2341 	.db 0x0d
      00006E 49 6E 76 61 6C 69 64  2342 	.ascii "Invalid next start address: 0x%04X"
             20 6E 65 78 74 20 73
             74 61 72 74 20 61 64
             64 72 65 73 73 3A 20
             30 78 25 30 34 58
      000090 0A                    2343 	.db 0x0a
      000091 0D                    2344 	.db 0x0d
      000092 00                    2345 	.db 0x00
                                   2346 	.area CSEG    (CODE)
                                   2347 	.area CONST   (CODE)
      000093                       2348 ___str_6:
      000093 0A                    2349 	.db 0x0a
      000094 0D                    2350 	.db 0x0d
      000095 4D 65 6D 6F 72 79 20  2351 	.ascii "Memory allocation failed for packet size: %d"
             61 6C 6C 6F 63 61 74
             69 6F 6E 20 66 61 69
             6C 65 64 20 66 6F 72
             20 70 61 63 6B 65 74
             20 73 69 7A 65 3A 20
             25 64
      0000C1 0A                    2352 	.db 0x0a
      0000C2 0D                    2353 	.db 0x0d
      0000C3 00                    2354 	.db 0x00
                                   2355 	.area CSEG    (CODE)
                                   2356 	.area CONST   (CODE)
      0000C4                       2357 ___str_7:
      0000C4 0A                    2358 	.db 0x0a
      0000C5 0D                    2359 	.db 0x0d
      0000C6 46 61 69 6C 65 64 20  2360 	.ascii "Failed to read packet data"
             74 6F 20 72 65 61 64
             20 70 61 63 6B 65 74
             20 64 61 74 61
      0000E0 0A                    2361 	.db 0x0a
      0000E1 0D                    2362 	.db 0x0d
      0000E2 00                    2363 	.db 0x00
                                   2364 	.area CSEG    (CODE)
                                   2365 	.area CONST   (CODE)
      0000E3                       2366 ___str_8:
      0000E3 0A                    2367 	.db 0x0a
      0000E4 50 72 6F 63 65 73 73  2368 	.ascii "Processed response data:"
             65 64 20 72 65 73 70
             6F 6E 73 65 20 64 61
             74 61 3A
      0000FC 0A                    2369 	.db 0x0a
      0000FD 00                    2370 	.db 0x00
                                   2371 	.area CSEG    (CODE)
                                   2372 	.area CONST   (CODE)
      0000FE                       2373 ___str_9:
      0000FE 0A                    2374 	.db 0x0a
      0000FF 4E 6F 20 72 65 73 70  2375 	.ascii "No response generated by TCP packet processing."
             6F 6E 73 65 20 67 65
             6E 65 72 61 74 65 64
             20 62 79 20 54 43 50
             20 70 61 63 6B 65 74
             20 70 72 6F 63 65 73
             73 69 6E 67 2E
      00012E 0A                    2376 	.db 0x0a
      00012F 00                    2377 	.db 0x00
                                   2378 	.area CSEG    (CODE)
                                   2379 	.area CONST   (CODE)
      000130                       2380 ___str_10:
      000130 0A                    2381 	.db 0x0a
      000131 0D                    2382 	.db 0x0d
      000132 53 75 63 63 65 73 73  2383 	.ascii "Successfully processed packet of size %d from 0x%04X to 0x%0"
             66 75 6C 6C 79 20 70
             72 6F 63 65 73 73 65
             64 20 70 61 63 6B 65
             74 20 6F 66 20 73 69
             7A 65 20 25 64 20 66
             72 6F 6D 20 30 78 25
             30 34 58 20 74 6F 20
             30 78 25 30
      00016E 34 58                 2384 	.ascii "4X"
      000170 0A                    2385 	.db 0x0a
      000171 0D                    2386 	.db 0x0d
      000172 00                    2387 	.db 0x00
                                   2388 	.area CSEG    (CODE)
                                   2389 	.area CONST   (CODE)
      000173                       2390 ___str_11:
      000173 0A                    2391 	.db 0x0a
      000174 49 6E 76 61 6C 69 64  2392 	.ascii "Invalid Buffer Size. Buffer exceeds valid address range."
             20 42 75 66 66 65 72
             20 53 69 7A 65 2E 20
             42 75 66 66 65 72 20
             65 78 63 65 65 64 73
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 72 61 6E 67 65 2E
      0001AC 0A                    2393 	.db 0x0a
      0001AD 00                    2394 	.db 0x00
                                   2395 	.area CSEG    (CODE)
                                   2396 	.area CONST   (CODE)
      0001AE                       2397 ___str_12:
      0001AE 54 43 50 20 72 65 71  2398 	.ascii "TCP request sent successfully."
             75 65 73 74 20 73 65
             6E 74 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79 2E
      0001CC 0A                    2399 	.db 0x0a
      0001CD 0D                    2400 	.db 0x0d
      0001CE 00                    2401 	.db 0x00
                                   2402 	.area CSEG    (CODE)
                                   2403 	.area CONST   (CODE)
      0001CF                       2404 ___str_13:
      0001CF 54 43 50 20 74 72 61  2405 	.ascii "TCP transmission failed. Check error flags."
             6E 73 6D 69 73 73 69
             6F 6E 20 66 61 69 6C
             65 64 2E 20 43 68 65
             63 6B 20 65 72 72 6F
             72 20 66 6C 61 67 73
             2E
      0001FA 0A                    2406 	.db 0x0a
      0001FB 0D                    2407 	.db 0x0d
      0001FC 00                    2408 	.db 0x00
                                   2409 	.area CSEG    (CODE)
                                   2410 	.area CONST   (CODE)
      0001FD                       2411 ___str_14:
      0001FD 54 72 61 6E 73 6D 69  2412 	.ascii "Transmission timeout. ENC28J60 may not be functioning correc"
             73 73 69 6F 6E 20 74
             69 6D 65 6F 75 74 2E
             20 45 4E 43 32 38 4A
             36 30 20 6D 61 79 20
             6E 6F 74 20 62 65 20
             66 75 6E 63 74 69 6F
             6E 69 6E 67 20 63 6F
             72 72 65 63
      000239 74 6C 79 2E           2413 	.ascii "tly."
      00023D 0A                    2414 	.db 0x0a
      00023E 0D                    2415 	.db 0x0d
      00023F 00                    2416 	.db 0x00
                                   2417 	.area CSEG    (CODE)
                                   2418 	.area XINIT   (CODE)
                                   2419 	.area CABS    (ABS,CODE)
