                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module tcp
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _wait_for_transmission_complete
                                     12 	.globl _enc28j60_set_transmit_pointers
                                     13 	.globl _spi_buffer_write
                                     14 	.globl _spi_buffer_read
                                     15 	.globl _free
                                     16 	.globl _malloc
                                     17 	.globl _printf
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _TF1
                                     21 	.globl _TR1
                                     22 	.globl _TF0
                                     23 	.globl _TR0
                                     24 	.globl _IE1
                                     25 	.globl _IT1
                                     26 	.globl _IE0
                                     27 	.globl _IT0
                                     28 	.globl _SM0
                                     29 	.globl _SM1
                                     30 	.globl _SM2
                                     31 	.globl _REN
                                     32 	.globl _TB8
                                     33 	.globl _RB8
                                     34 	.globl _TI
                                     35 	.globl _RI
                                     36 	.globl _CY
                                     37 	.globl _AC
                                     38 	.globl _F0
                                     39 	.globl _RS1
                                     40 	.globl _RS0
                                     41 	.globl _OV
                                     42 	.globl _F1
                                     43 	.globl _P
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD0
                                     51 	.globl _TXD
                                     52 	.globl _RXD0
                                     53 	.globl _RXD
                                     54 	.globl _P3_7
                                     55 	.globl _P3_6
                                     56 	.globl _P3_5
                                     57 	.globl _P3_4
                                     58 	.globl _P3_3
                                     59 	.globl _P3_2
                                     60 	.globl _P3_1
                                     61 	.globl _P3_0
                                     62 	.globl _P2_7
                                     63 	.globl _P2_6
                                     64 	.globl _P2_5
                                     65 	.globl _P2_4
                                     66 	.globl _P2_3
                                     67 	.globl _P2_2
                                     68 	.globl _P2_1
                                     69 	.globl _P2_0
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _P0_7
                                     79 	.globl _P0_6
                                     80 	.globl _P0_5
                                     81 	.globl _P0_4
                                     82 	.globl _P0_3
                                     83 	.globl _P0_2
                                     84 	.globl _P0_1
                                     85 	.globl _P0_0
                                     86 	.globl _PS
                                     87 	.globl _PT1
                                     88 	.globl _PX1
                                     89 	.globl _PT0
                                     90 	.globl _PX0
                                     91 	.globl _EA
                                     92 	.globl _ES
                                     93 	.globl _ET1
                                     94 	.globl _EX1
                                     95 	.globl _ET0
                                     96 	.globl _EX0
                                     97 	.globl _BREG_F7
                                     98 	.globl _BREG_F6
                                     99 	.globl _BREG_F5
                                    100 	.globl _BREG_F4
                                    101 	.globl _BREG_F3
                                    102 	.globl _BREG_F2
                                    103 	.globl _BREG_F1
                                    104 	.globl _BREG_F0
                                    105 	.globl _P5_7
                                    106 	.globl _P5_6
                                    107 	.globl _P5_5
                                    108 	.globl _P5_4
                                    109 	.globl _P5_3
                                    110 	.globl _P5_2
                                    111 	.globl _P5_1
                                    112 	.globl _P5_0
                                    113 	.globl _P4_7
                                    114 	.globl _P4_6
                                    115 	.globl _P4_5
                                    116 	.globl _P4_4
                                    117 	.globl _P4_3
                                    118 	.globl _P4_2
                                    119 	.globl _P4_1
                                    120 	.globl _P4_0
                                    121 	.globl _PX0L
                                    122 	.globl _PT0L
                                    123 	.globl _PX1L
                                    124 	.globl _PT1L
                                    125 	.globl _PSL
                                    126 	.globl _PT2L
                                    127 	.globl _PPCL
                                    128 	.globl _EC
                                    129 	.globl _CCF0
                                    130 	.globl _CCF1
                                    131 	.globl _CCF2
                                    132 	.globl _CCF3
                                    133 	.globl _CCF4
                                    134 	.globl _CR
                                    135 	.globl _CF
                                    136 	.globl _TF2
                                    137 	.globl _EXF2
                                    138 	.globl _RCLK
                                    139 	.globl _TCLK
                                    140 	.globl _EXEN2
                                    141 	.globl _TR2
                                    142 	.globl _C_T2
                                    143 	.globl _CP_RL2
                                    144 	.globl _T2CON_7
                                    145 	.globl _T2CON_6
                                    146 	.globl _T2CON_5
                                    147 	.globl _T2CON_4
                                    148 	.globl _T2CON_3
                                    149 	.globl _T2CON_2
                                    150 	.globl _T2CON_1
                                    151 	.globl _T2CON_0
                                    152 	.globl _PT2
                                    153 	.globl _ET2
                                    154 	.globl _TMOD
                                    155 	.globl _TL1
                                    156 	.globl _TL0
                                    157 	.globl _TH1
                                    158 	.globl _TH0
                                    159 	.globl _TCON
                                    160 	.globl _SP
                                    161 	.globl _SCON
                                    162 	.globl _SBUF0
                                    163 	.globl _SBUF
                                    164 	.globl _PSW
                                    165 	.globl _PCON
                                    166 	.globl _P3
                                    167 	.globl _P2
                                    168 	.globl _P1
                                    169 	.globl _P0
                                    170 	.globl _IP
                                    171 	.globl _IE
                                    172 	.globl _DP0L
                                    173 	.globl _DPL
                                    174 	.globl _DP0H
                                    175 	.globl _DPH
                                    176 	.globl _B
                                    177 	.globl _ACC
                                    178 	.globl _EECON
                                    179 	.globl _KBF
                                    180 	.globl _KBE
                                    181 	.globl _KBLS
                                    182 	.globl _BRL
                                    183 	.globl _BDRCON
                                    184 	.globl _T2MOD
                                    185 	.globl _SPDAT
                                    186 	.globl _SPSTA
                                    187 	.globl _SPCON
                                    188 	.globl _SADEN
                                    189 	.globl _SADDR
                                    190 	.globl _WDTPRG
                                    191 	.globl _WDTRST
                                    192 	.globl _P5
                                    193 	.globl _P4
                                    194 	.globl _IPH1
                                    195 	.globl _IPL1
                                    196 	.globl _IPH0
                                    197 	.globl _IPL0
                                    198 	.globl _IEN1
                                    199 	.globl _IEN0
                                    200 	.globl _CMOD
                                    201 	.globl _CL
                                    202 	.globl _CH
                                    203 	.globl _CCON
                                    204 	.globl _CCAPM4
                                    205 	.globl _CCAPM3
                                    206 	.globl _CCAPM2
                                    207 	.globl _CCAPM1
                                    208 	.globl _CCAPM0
                                    209 	.globl _CCAP4L
                                    210 	.globl _CCAP3L
                                    211 	.globl _CCAP2L
                                    212 	.globl _CCAP1L
                                    213 	.globl _CCAP0L
                                    214 	.globl _CCAP4H
                                    215 	.globl _CCAP3H
                                    216 	.globl _CCAP2H
                                    217 	.globl _CCAP1H
                                    218 	.globl _CCAP0H
                                    219 	.globl _CKCON1
                                    220 	.globl _CKCON0
                                    221 	.globl _CKRL
                                    222 	.globl _AUXR1
                                    223 	.globl _AUXR
                                    224 	.globl _TH2
                                    225 	.globl _TL2
                                    226 	.globl _RCAP2H
                                    227 	.globl _RCAP2L
                                    228 	.globl _T2CON
                                    229 	.globl _transmit_tcp_packet_PARM_2
                                    230 	.globl _print_hexdump_PARM_2
                                    231 	.globl _process_tcp_packet_PARM_3
                                    232 	.globl _process_tcp_packet_PARM_2
                                    233 	.globl _calculate_checksum_PARM_2
                                    234 	.globl _calculate_checksum
                                    235 	.globl _process_tcp_packet
                                    236 	.globl _print_hexdump
                                    237 	.globl _process_packet_from_buffer
                                    238 	.globl _transmit_tcp_packet
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           0000C8   244 _T2CON	=	0x00c8
                           0000CA   245 _RCAP2L	=	0x00ca
                           0000CB   246 _RCAP2H	=	0x00cb
                           0000CC   247 _TL2	=	0x00cc
                           0000CD   248 _TH2	=	0x00cd
                           00008E   249 _AUXR	=	0x008e
                           0000A2   250 _AUXR1	=	0x00a2
                           000097   251 _CKRL	=	0x0097
                           00008F   252 _CKCON0	=	0x008f
                           0000AF   253 _CKCON1	=	0x00af
                           0000FA   254 _CCAP0H	=	0x00fa
                           0000FB   255 _CCAP1H	=	0x00fb
                           0000FC   256 _CCAP2H	=	0x00fc
                           0000FD   257 _CCAP3H	=	0x00fd
                           0000FE   258 _CCAP4H	=	0x00fe
                           0000EA   259 _CCAP0L	=	0x00ea
                           0000EB   260 _CCAP1L	=	0x00eb
                           0000EC   261 _CCAP2L	=	0x00ec
                           0000ED   262 _CCAP3L	=	0x00ed
                           0000EE   263 _CCAP4L	=	0x00ee
                           0000DA   264 _CCAPM0	=	0x00da
                           0000DB   265 _CCAPM1	=	0x00db
                           0000DC   266 _CCAPM2	=	0x00dc
                           0000DD   267 _CCAPM3	=	0x00dd
                           0000DE   268 _CCAPM4	=	0x00de
                           0000D8   269 _CCON	=	0x00d8
                           0000F9   270 _CH	=	0x00f9
                           0000E9   271 _CL	=	0x00e9
                           0000D9   272 _CMOD	=	0x00d9
                           0000A8   273 _IEN0	=	0x00a8
                           0000B1   274 _IEN1	=	0x00b1
                           0000B8   275 _IPL0	=	0x00b8
                           0000B7   276 _IPH0	=	0x00b7
                           0000B2   277 _IPL1	=	0x00b2
                           0000B3   278 _IPH1	=	0x00b3
                           0000C0   279 _P4	=	0x00c0
                           0000E8   280 _P5	=	0x00e8
                           0000A6   281 _WDTRST	=	0x00a6
                           0000A7   282 _WDTPRG	=	0x00a7
                           0000A9   283 _SADDR	=	0x00a9
                           0000B9   284 _SADEN	=	0x00b9
                           0000C3   285 _SPCON	=	0x00c3
                           0000C4   286 _SPSTA	=	0x00c4
                           0000C5   287 _SPDAT	=	0x00c5
                           0000C9   288 _T2MOD	=	0x00c9
                           00009B   289 _BDRCON	=	0x009b
                           00009A   290 _BRL	=	0x009a
                           00009C   291 _KBLS	=	0x009c
                           00009D   292 _KBE	=	0x009d
                           00009E   293 _KBF	=	0x009e
                           0000D2   294 _EECON	=	0x00d2
                           0000E0   295 _ACC	=	0x00e0
                           0000F0   296 _B	=	0x00f0
                           000083   297 _DPH	=	0x0083
                           000083   298 _DP0H	=	0x0083
                           000082   299 _DPL	=	0x0082
                           000082   300 _DP0L	=	0x0082
                           0000A8   301 _IE	=	0x00a8
                           0000B8   302 _IP	=	0x00b8
                           000080   303 _P0	=	0x0080
                           000090   304 _P1	=	0x0090
                           0000A0   305 _P2	=	0x00a0
                           0000B0   306 _P3	=	0x00b0
                           000087   307 _PCON	=	0x0087
                           0000D0   308 _PSW	=	0x00d0
                           000099   309 _SBUF	=	0x0099
                           000099   310 _SBUF0	=	0x0099
                           000098   311 _SCON	=	0x0098
                           000081   312 _SP	=	0x0081
                           000088   313 _TCON	=	0x0088
                           00008C   314 _TH0	=	0x008c
                           00008D   315 _TH1	=	0x008d
                           00008A   316 _TL0	=	0x008a
                           00008B   317 _TL1	=	0x008b
                           000089   318 _TMOD	=	0x0089
                                    319 ;--------------------------------------------------------
                                    320 ; special function bits
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           0000AD   324 _ET2	=	0x00ad
                           0000BD   325 _PT2	=	0x00bd
                           0000C8   326 _T2CON_0	=	0x00c8
                           0000C9   327 _T2CON_1	=	0x00c9
                           0000CA   328 _T2CON_2	=	0x00ca
                           0000CB   329 _T2CON_3	=	0x00cb
                           0000CC   330 _T2CON_4	=	0x00cc
                           0000CD   331 _T2CON_5	=	0x00cd
                           0000CE   332 _T2CON_6	=	0x00ce
                           0000CF   333 _T2CON_7	=	0x00cf
                           0000C8   334 _CP_RL2	=	0x00c8
                           0000C9   335 _C_T2	=	0x00c9
                           0000CA   336 _TR2	=	0x00ca
                           0000CB   337 _EXEN2	=	0x00cb
                           0000CC   338 _TCLK	=	0x00cc
                           0000CD   339 _RCLK	=	0x00cd
                           0000CE   340 _EXF2	=	0x00ce
                           0000CF   341 _TF2	=	0x00cf
                           0000DF   342 _CF	=	0x00df
                           0000DE   343 _CR	=	0x00de
                           0000DC   344 _CCF4	=	0x00dc
                           0000DB   345 _CCF3	=	0x00db
                           0000DA   346 _CCF2	=	0x00da
                           0000D9   347 _CCF1	=	0x00d9
                           0000D8   348 _CCF0	=	0x00d8
                           0000AE   349 _EC	=	0x00ae
                           0000BE   350 _PPCL	=	0x00be
                           0000BD   351 _PT2L	=	0x00bd
                           0000BC   352 _PSL	=	0x00bc
                           0000BB   353 _PT1L	=	0x00bb
                           0000BA   354 _PX1L	=	0x00ba
                           0000B9   355 _PT0L	=	0x00b9
                           0000B8   356 _PX0L	=	0x00b8
                           0000C0   357 _P4_0	=	0x00c0
                           0000C1   358 _P4_1	=	0x00c1
                           0000C2   359 _P4_2	=	0x00c2
                           0000C3   360 _P4_3	=	0x00c3
                           0000C4   361 _P4_4	=	0x00c4
                           0000C5   362 _P4_5	=	0x00c5
                           0000C6   363 _P4_6	=	0x00c6
                           0000C7   364 _P4_7	=	0x00c7
                           0000E8   365 _P5_0	=	0x00e8
                           0000E9   366 _P5_1	=	0x00e9
                           0000EA   367 _P5_2	=	0x00ea
                           0000EB   368 _P5_3	=	0x00eb
                           0000EC   369 _P5_4	=	0x00ec
                           0000ED   370 _P5_5	=	0x00ed
                           0000EE   371 _P5_6	=	0x00ee
                           0000EF   372 _P5_7	=	0x00ef
                           0000F0   373 _BREG_F0	=	0x00f0
                           0000F1   374 _BREG_F1	=	0x00f1
                           0000F2   375 _BREG_F2	=	0x00f2
                           0000F3   376 _BREG_F3	=	0x00f3
                           0000F4   377 _BREG_F4	=	0x00f4
                           0000F5   378 _BREG_F5	=	0x00f5
                           0000F6   379 _BREG_F6	=	0x00f6
                           0000F7   380 _BREG_F7	=	0x00f7
                           0000A8   381 _EX0	=	0x00a8
                           0000A9   382 _ET0	=	0x00a9
                           0000AA   383 _EX1	=	0x00aa
                           0000AB   384 _ET1	=	0x00ab
                           0000AC   385 _ES	=	0x00ac
                           0000AF   386 _EA	=	0x00af
                           0000B8   387 _PX0	=	0x00b8
                           0000B9   388 _PT0	=	0x00b9
                           0000BA   389 _PX1	=	0x00ba
                           0000BB   390 _PT1	=	0x00bb
                           0000BC   391 _PS	=	0x00bc
                           000080   392 _P0_0	=	0x0080
                           000081   393 _P0_1	=	0x0081
                           000082   394 _P0_2	=	0x0082
                           000083   395 _P0_3	=	0x0083
                           000084   396 _P0_4	=	0x0084
                           000085   397 _P0_5	=	0x0085
                           000086   398 _P0_6	=	0x0086
                           000087   399 _P0_7	=	0x0087
                           000090   400 _P1_0	=	0x0090
                           000091   401 _P1_1	=	0x0091
                           000092   402 _P1_2	=	0x0092
                           000093   403 _P1_3	=	0x0093
                           000094   404 _P1_4	=	0x0094
                           000095   405 _P1_5	=	0x0095
                           000096   406 _P1_6	=	0x0096
                           000097   407 _P1_7	=	0x0097
                           0000A0   408 _P2_0	=	0x00a0
                           0000A1   409 _P2_1	=	0x00a1
                           0000A2   410 _P2_2	=	0x00a2
                           0000A3   411 _P2_3	=	0x00a3
                           0000A4   412 _P2_4	=	0x00a4
                           0000A5   413 _P2_5	=	0x00a5
                           0000A6   414 _P2_6	=	0x00a6
                           0000A7   415 _P2_7	=	0x00a7
                           0000B0   416 _P3_0	=	0x00b0
                           0000B1   417 _P3_1	=	0x00b1
                           0000B2   418 _P3_2	=	0x00b2
                           0000B3   419 _P3_3	=	0x00b3
                           0000B4   420 _P3_4	=	0x00b4
                           0000B5   421 _P3_5	=	0x00b5
                           0000B6   422 _P3_6	=	0x00b6
                           0000B7   423 _P3_7	=	0x00b7
                           0000B0   424 _RXD	=	0x00b0
                           0000B0   425 _RXD0	=	0x00b0
                           0000B1   426 _TXD	=	0x00b1
                           0000B1   427 _TXD0	=	0x00b1
                           0000B2   428 _INT0	=	0x00b2
                           0000B3   429 _INT1	=	0x00b3
                           0000B4   430 _T0	=	0x00b4
                           0000B5   431 _T1	=	0x00b5
                           0000B6   432 _WR	=	0x00b6
                           0000B7   433 _RD	=	0x00b7
                           0000D0   434 _P	=	0x00d0
                           0000D1   435 _F1	=	0x00d1
                           0000D2   436 _OV	=	0x00d2
                           0000D3   437 _RS0	=	0x00d3
                           0000D4   438 _RS1	=	0x00d4
                           0000D5   439 _F0	=	0x00d5
                           0000D6   440 _AC	=	0x00d6
                           0000D7   441 _CY	=	0x00d7
                           000098   442 _RI	=	0x0098
                           000099   443 _TI	=	0x0099
                           00009A   444 _RB8	=	0x009a
                           00009B   445 _TB8	=	0x009b
                           00009C   446 _REN	=	0x009c
                           00009D   447 _SM2	=	0x009d
                           00009E   448 _SM1	=	0x009e
                           00009F   449 _SM0	=	0x009f
                           000088   450 _IT0	=	0x0088
                           000089   451 _IE0	=	0x0089
                           00008A   452 _IT1	=	0x008a
                           00008B   453 _IE1	=	0x008b
                           00008C   454 _TR0	=	0x008c
                           00008D   455 _TF0	=	0x008d
                           00008E   456 _TR1	=	0x008e
                           00008F   457 _TF1	=	0x008f
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable register banks
                                    460 ;--------------------------------------------------------
                                    461 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        462 	.ds 8
                                    463 ;--------------------------------------------------------
                                    464 ; internal ram data
                                    465 ;--------------------------------------------------------
                                    466 	.area DSEG    (DATA)
      000000                        467 _process_tcp_packet_sloc0_1_0:
      000000                        468 	.ds 3
      000003                        469 _process_packet_from_buffer_sloc0_1_0:
      000003                        470 	.ds 3
                                    471 ;--------------------------------------------------------
                                    472 ; overlayable items in internal ram
                                    473 ;--------------------------------------------------------
                                    474 	.area	OSEG    (OVR,DATA)
      000000                        475 _calculate_checksum_sloc0_1_0:
      000000                        476 	.ds 2
      000002                        477 _calculate_checksum_sloc1_1_0:
      000002                        478 	.ds 4
      000006                        479 _calculate_checksum_sloc2_1_0:
      000006                        480 	.ds 4
                                    481 ;--------------------------------------------------------
                                    482 ; indirectly addressable internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area ISEG    (DATA)
                                    485 ;--------------------------------------------------------
                                    486 ; absolute internal ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area IABS    (ABS,DATA)
                                    489 	.area IABS    (ABS,DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; bit data
                                    492 ;--------------------------------------------------------
                                    493 	.area BSEG    (BIT)
                                    494 ;--------------------------------------------------------
                                    495 ; paged external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area PSEG    (PAG,XDATA)
                                    498 ;--------------------------------------------------------
                                    499 ; uninitialized external ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area XSEG    (XDATA)
      000000                        502 _calculate_checksum_PARM_2:
      000000                        503 	.ds 2
      000002                        504 _calculate_checksum_data_10000_116:
      000002                        505 	.ds 3
      000005                        506 _calculate_checksum_sum_10000_117:
      000005                        507 	.ds 4
      000009                        508 _calculate_checksum_i_20000_118:
      000009                        509 	.ds 2
      00000B                        510 _process_tcp_packet_PARM_2:
      00000B                        511 	.ds 2
      00000D                        512 _process_tcp_packet_PARM_3:
      00000D                        513 	.ds 3
      000010                        514 _process_tcp_packet_packet_10000_121:
      000010                        515 	.ds 3
      000013                        516 _process_tcp_packet_response_10000_122:
      000013                        517 	.ds 1501
      0005F0                        518 _print_hexdump_PARM_2:
      0005F0                        519 	.ds 2
      0005F2                        520 _print_hexdump_data_10000_130:
      0005F2                        521 	.ds 3
      0005F5                        522 _process_packet_from_buffer_start_address_10000_136:
      0005F5                        523 	.ds 2
      0005F7                        524 _process_packet_from_buffer_next_packet_start_10001_139:
      0005F7                        525 	.ds 2
      0005F9                        526 _process_packet_from_buffer_response_size_10001_139:
      0005F9                        527 	.ds 2
      0005FB                        528 _transmit_tcp_packet_PARM_2:
      0005FB                        529 	.ds 2
      0005FD                        530 _transmit_tcp_packet_packet_10000_148:
      0005FD                        531 	.ds 3
                                    532 ;--------------------------------------------------------
                                    533 ; absolute external ram data
                                    534 ;--------------------------------------------------------
                                    535 	.area XABS    (ABS,XDATA)
                                    536 ;--------------------------------------------------------
                                    537 ; initialized external ram data
                                    538 ;--------------------------------------------------------
                                    539 	.area XISEG   (XDATA)
                                    540 	.area HOME    (CODE)
                                    541 	.area GSINIT0 (CODE)
                                    542 	.area GSINIT1 (CODE)
                                    543 	.area GSINIT2 (CODE)
                                    544 	.area GSINIT3 (CODE)
                                    545 	.area GSINIT4 (CODE)
                                    546 	.area GSINIT5 (CODE)
                                    547 	.area GSINIT  (CODE)
                                    548 	.area GSFINAL (CODE)
                                    549 	.area CSEG    (CODE)
                                    550 ;--------------------------------------------------------
                                    551 ; global & static initialisations
                                    552 ;--------------------------------------------------------
                                    553 	.area HOME    (CODE)
                                    554 	.area GSINIT  (CODE)
                                    555 	.area GSFINAL (CODE)
                                    556 	.area GSINIT  (CODE)
                                    557 ;--------------------------------------------------------
                                    558 ; Home
                                    559 ;--------------------------------------------------------
                                    560 	.area HOME    (CODE)
                                    561 	.area HOME    (CODE)
                                    562 ;--------------------------------------------------------
                                    563 ; code
                                    564 ;--------------------------------------------------------
                                    565 	.area CSEG    (CODE)
                                    566 ;------------------------------------------------------------
                                    567 ;Allocation info for local variables in function 'calculate_checksum'
                                    568 ;------------------------------------------------------------
                                    569 ;length                    Allocated with name '_calculate_checksum_PARM_2'
                                    570 ;data                      Allocated with name '_calculate_checksum_data_10000_116'
                                    571 ;sum                       Allocated with name '_calculate_checksum_sum_10000_117'
                                    572 ;i                         Allocated with name '_calculate_checksum_i_20000_118'
                                    573 ;word                      Allocated with name '_calculate_checksum_word_30000_119'
                                    574 ;sloc0                     Allocated with name '_calculate_checksum_sloc0_1_0'
                                    575 ;sloc1                     Allocated with name '_calculate_checksum_sloc1_1_0'
                                    576 ;sloc2                     Allocated with name '_calculate_checksum_sloc2_1_0'
                                    577 ;------------------------------------------------------------
                                    578 ;	tcp.c:12: uint16_t calculate_checksum(uint8_t *data, uint16_t length) {
                                    579 ;	-----------------------------------------
                                    580 ;	 function calculate_checksum
                                    581 ;	-----------------------------------------
      000000                        582 _calculate_checksum:
                           000007   583 	ar7 = 0x07
                           000006   584 	ar6 = 0x06
                           000005   585 	ar5 = 0x05
                           000004   586 	ar4 = 0x04
                           000003   587 	ar3 = 0x03
                           000002   588 	ar2 = 0x02
                           000001   589 	ar1 = 0x01
                           000000   590 	ar0 = 0x00
      000000 AF F0            [24]  591 	mov	r7,b
      000002 AE 83            [24]  592 	mov	r6,dph
      000004 E5 82            [12]  593 	mov	a,dpl
      000006 90r00r02         [24]  594 	mov	dptr,#_calculate_checksum_data_10000_116
      000009 F0               [24]  595 	movx	@dptr,a
      00000A EE               [12]  596 	mov	a,r6
      00000B A3               [24]  597 	inc	dptr
      00000C F0               [24]  598 	movx	@dptr,a
      00000D EF               [12]  599 	mov	a,r7
      00000E A3               [24]  600 	inc	dptr
      00000F F0               [24]  601 	movx	@dptr,a
                                    602 ;	tcp.c:13: uint32_t sum = 0;
      000010 90r00r05         [24]  603 	mov	dptr,#_calculate_checksum_sum_10000_117
      000013 E4               [12]  604 	clr	a
      000014 F0               [24]  605 	movx	@dptr,a
      000015 A3               [24]  606 	inc	dptr
      000016 F0               [24]  607 	movx	@dptr,a
      000017 A3               [24]  608 	inc	dptr
      000018 F0               [24]  609 	movx	@dptr,a
      000019 A3               [24]  610 	inc	dptr
      00001A F0               [24]  611 	movx	@dptr,a
                                    612 ;	tcp.c:16: for (uint16_t i = 0; i < length; i += 2) {
      00001B 90r00r09         [24]  613 	mov	dptr,#_calculate_checksum_i_20000_118
      00001E F0               [24]  614 	movx	@dptr,a
      00001F A3               [24]  615 	inc	dptr
      000020 F0               [24]  616 	movx	@dptr,a
      000021 90r00r02         [24]  617 	mov	dptr,#_calculate_checksum_data_10000_116
      000024 E0               [24]  618 	movx	a,@dptr
      000025 FD               [12]  619 	mov	r5,a
      000026 A3               [24]  620 	inc	dptr
      000027 E0               [24]  621 	movx	a,@dptr
      000028 FE               [12]  622 	mov	r6,a
      000029 A3               [24]  623 	inc	dptr
      00002A E0               [24]  624 	movx	a,@dptr
      00002B FF               [12]  625 	mov	r7,a
      00002C 90r00r00         [24]  626 	mov	dptr,#_calculate_checksum_PARM_2
      00002F E0               [24]  627 	movx	a,@dptr
      000030 F5*00            [12]  628 	mov	_calculate_checksum_sloc0_1_0,a
      000032 A3               [24]  629 	inc	dptr
      000033 E0               [24]  630 	movx	a,@dptr
      000034 F5*01            [12]  631 	mov	(_calculate_checksum_sloc0_1_0 + 1),a
      000036                        632 00105$:
      000036 90r00r09         [24]  633 	mov	dptr,#_calculate_checksum_i_20000_118
      000039 E0               [24]  634 	movx	a,@dptr
      00003A F9               [12]  635 	mov	r1,a
      00003B A3               [24]  636 	inc	dptr
      00003C E0               [24]  637 	movx	a,@dptr
      00003D FA               [12]  638 	mov	r2,a
      00003E C3               [12]  639 	clr	c
      00003F E9               [12]  640 	mov	a,r1
      000040 95*00            [12]  641 	subb	a,_calculate_checksum_sloc0_1_0
      000042 EA               [12]  642 	mov	a,r2
      000043 95*01            [12]  643 	subb	a,(_calculate_checksum_sloc0_1_0 + 1)
      000045 40 03            [24]  644 	jc	00135$
      000047 02r01r36         [24]  645 	ljmp	00103$
      00004A                        646 00135$:
                                    647 ;	tcp.c:17: uint16_t word = (data[i] << 8) + (i + 1 < length ? data[i + 1] : 0);
      00004A E9               [12]  648 	mov	a,r1
      00004B 2D               [12]  649 	add	a, r5
      00004C F8               [12]  650 	mov	r0,a
      00004D EA               [12]  651 	mov	a,r2
      00004E 3E               [12]  652 	addc	a, r6
      00004F FB               [12]  653 	mov	r3,a
      000050 8F 04            [24]  654 	mov	ar4,r7
      000052 88 82            [24]  655 	mov	dpl,r0
      000054 8B 83            [24]  656 	mov	dph,r3
      000056 8C F0            [24]  657 	mov	b,r4
      000058 12r00r00         [24]  658 	lcall	__gptrget
      00005B FC               [12]  659 	mov	r4,a
      00005C 7B 00            [12]  660 	mov	r3,#0x00
      00005E C0 05            [24]  661 	push	ar5
      000060 C0 06            [24]  662 	push	ar6
      000062 C0 07            [24]  663 	push	ar7
      000064 74 01            [12]  664 	mov	a,#0x01
      000066 29               [12]  665 	add	a, r1
      000067 F8               [12]  666 	mov	r0,a
      000068 E4               [12]  667 	clr	a
      000069 3A               [12]  668 	addc	a, r2
      00006A FF               [12]  669 	mov	r7,a
      00006B C3               [12]  670 	clr	c
      00006C E8               [12]  671 	mov	a,r0
      00006D 95*00            [12]  672 	subb	a,_calculate_checksum_sloc0_1_0
      00006F EF               [12]  673 	mov	a,r7
      000070 95*01            [12]  674 	subb	a,(_calculate_checksum_sloc0_1_0 + 1)
      000072 D0 07            [24]  675 	pop	ar7
      000074 D0 06            [24]  676 	pop	ar6
      000076 D0 05            [24]  677 	pop	ar5
      000078 50 1B            [24]  678 	jnc	00109$
      00007A 09               [12]  679 	inc	r1
      00007B B9 00 01         [24]  680 	cjne	r1,#0x00,00137$
      00007E 0A               [12]  681 	inc	r2
      00007F                        682 00137$:
      00007F E9               [12]  683 	mov	a,r1
      000080 2D               [12]  684 	add	a, r5
      000081 F9               [12]  685 	mov	r1,a
      000082 EA               [12]  686 	mov	a,r2
      000083 3E               [12]  687 	addc	a, r6
      000084 F8               [12]  688 	mov	r0,a
      000085 8F 02            [24]  689 	mov	ar2,r7
      000087 89 82            [24]  690 	mov	dpl,r1
      000089 88 83            [24]  691 	mov	dph,r0
      00008B 8A F0            [24]  692 	mov	b,r2
      00008D 12r00r00         [24]  693 	lcall	__gptrget
      000090 F9               [12]  694 	mov	r1,a
      000091 7A 00            [12]  695 	mov	r2,#0x00
      000093 80 04            [24]  696 	sjmp	00110$
      000095                        697 00109$:
      000095 79 00            [12]  698 	mov	r1,#0x00
      000097 7A 00            [12]  699 	mov	r2,#0x00
      000099                        700 00110$:
      000099 C0 05            [24]  701 	push	ar5
      00009B C0 06            [24]  702 	push	ar6
      00009D C0 07            [24]  703 	push	ar7
      00009F E9               [12]  704 	mov	a,r1
      0000A0 2B               [12]  705 	add	a, r3
      0000A1 FB               [12]  706 	mov	r3,a
      0000A2 EA               [12]  707 	mov	a,r2
      0000A3 3C               [12]  708 	addc	a, r4
      0000A4 FC               [12]  709 	mov	r4,a
                                    710 ;	tcp.c:18: sum += word;
      0000A5 90r00r05         [24]  711 	mov	dptr,#_calculate_checksum_sum_10000_117
      0000A8 E0               [24]  712 	movx	a,@dptr
      0000A9 F8               [12]  713 	mov	r0,a
      0000AA A3               [24]  714 	inc	dptr
      0000AB E0               [24]  715 	movx	a,@dptr
      0000AC F9               [12]  716 	mov	r1,a
      0000AD A3               [24]  717 	inc	dptr
      0000AE E0               [24]  718 	movx	a,@dptr
      0000AF FA               [12]  719 	mov	r2,a
      0000B0 A3               [24]  720 	inc	dptr
      0000B1 E0               [24]  721 	movx	a,@dptr
      0000B2 FF               [12]  722 	mov	r7,a
      0000B3 7E 00            [12]  723 	mov	r6,#0x00
      0000B5 7D 00            [12]  724 	mov	r5,#0x00
      0000B7 90r00r05         [24]  725 	mov	dptr,#_calculate_checksum_sum_10000_117
      0000BA EB               [12]  726 	mov	a,r3
      0000BB 28               [12]  727 	add	a, r0
      0000BC F0               [24]  728 	movx	@dptr,a
      0000BD EC               [12]  729 	mov	a,r4
      0000BE 39               [12]  730 	addc	a, r1
      0000BF A3               [24]  731 	inc	dptr
      0000C0 F0               [24]  732 	movx	@dptr,a
      0000C1 EE               [12]  733 	mov	a,r6
      0000C2 3A               [12]  734 	addc	a, r2
      0000C3 A3               [24]  735 	inc	dptr
      0000C4 F0               [24]  736 	movx	@dptr,a
      0000C5 ED               [12]  737 	mov	a,r5
      0000C6 3F               [12]  738 	addc	a, r7
      0000C7 A3               [24]  739 	inc	dptr
      0000C8 F0               [24]  740 	movx	@dptr,a
                                    741 ;	tcp.c:21: if (sum > 0xFFFF) {
      0000C9 90r00r05         [24]  742 	mov	dptr,#_calculate_checksum_sum_10000_117
      0000CC E0               [24]  743 	movx	a,@dptr
      0000CD F5*02            [12]  744 	mov	_calculate_checksum_sloc1_1_0,a
      0000CF A3               [24]  745 	inc	dptr
      0000D0 E0               [24]  746 	movx	a,@dptr
      0000D1 F5*03            [12]  747 	mov	(_calculate_checksum_sloc1_1_0 + 1),a
      0000D3 A3               [24]  748 	inc	dptr
      0000D4 E0               [24]  749 	movx	a,@dptr
      0000D5 F5*04            [12]  750 	mov	(_calculate_checksum_sloc1_1_0 + 2),a
      0000D7 A3               [24]  751 	inc	dptr
      0000D8 E0               [24]  752 	movx	a,@dptr
      0000D9 F5*05            [12]  753 	mov	(_calculate_checksum_sloc1_1_0 + 3),a
      0000DB C3               [12]  754 	clr	c
      0000DC 74 FF            [12]  755 	mov	a,#0xff
      0000DE 95*02            [12]  756 	subb	a,_calculate_checksum_sloc1_1_0
      0000E0 74 FF            [12]  757 	mov	a,#0xff
      0000E2 95*03            [12]  758 	subb	a,(_calculate_checksum_sloc1_1_0 + 1)
      0000E4 E4               [12]  759 	clr	a
      0000E5 95*04            [12]  760 	subb	a,(_calculate_checksum_sloc1_1_0 + 2)
      0000E7 E4               [12]  761 	clr	a
      0000E8 95*05            [12]  762 	subb	a,(_calculate_checksum_sloc1_1_0 + 3)
      0000EA D0 07            [24]  763 	pop	ar7
      0000EC D0 06            [24]  764 	pop	ar6
      0000EE D0 05            [24]  765 	pop	ar5
      0000F0 50 2A            [24]  766 	jnc	00106$
                                    767 ;	tcp.c:22: sum = (sum & 0xFFFF) + (sum >> 16);
      0000F2 85*02*06         [24]  768 	mov	_calculate_checksum_sloc2_1_0,_calculate_checksum_sloc1_1_0
      0000F5 85*03*07         [24]  769 	mov	(_calculate_checksum_sloc2_1_0 + 1),(_calculate_checksum_sloc1_1_0 + 1)
      0000F8 75*08 00         [24]  770 	mov	(_calculate_checksum_sloc2_1_0 + 2),#0x00
      0000FB 75*09 00         [24]  771 	mov	(_calculate_checksum_sloc2_1_0 + 3),#0x00
      0000FE A8*04            [24]  772 	mov	r0,(_calculate_checksum_sloc1_1_0 + 2)
      000100 AA*05            [24]  773 	mov	r2,(_calculate_checksum_sloc1_1_0 + 3)
      000102 7B 00            [12]  774 	mov	r3,#0x00
      000104 7C 00            [12]  775 	mov	r4,#0x00
      000106 90r00r05         [24]  776 	mov	dptr,#_calculate_checksum_sum_10000_117
      000109 E8               [12]  777 	mov	a,r0
      00010A 25*06            [12]  778 	add	a, _calculate_checksum_sloc2_1_0
      00010C F0               [24]  779 	movx	@dptr,a
      00010D EA               [12]  780 	mov	a,r2
      00010E 35*07            [12]  781 	addc	a, (_calculate_checksum_sloc2_1_0 + 1)
      000110 A3               [24]  782 	inc	dptr
      000111 F0               [24]  783 	movx	@dptr,a
      000112 EB               [12]  784 	mov	a,r3
      000113 35*08            [12]  785 	addc	a, (_calculate_checksum_sloc2_1_0 + 2)
      000115 A3               [24]  786 	inc	dptr
      000116 F0               [24]  787 	movx	@dptr,a
      000117 EC               [12]  788 	mov	a,r4
      000118 35*09            [12]  789 	addc	a, (_calculate_checksum_sloc2_1_0 + 3)
      00011A A3               [24]  790 	inc	dptr
      00011B F0               [24]  791 	movx	@dptr,a
      00011C                        792 00106$:
                                    793 ;	tcp.c:16: for (uint16_t i = 0; i < length; i += 2) {
      00011C 90r00r09         [24]  794 	mov	dptr,#_calculate_checksum_i_20000_118
      00011F E0               [24]  795 	movx	a,@dptr
      000120 FB               [12]  796 	mov	r3,a
      000121 A3               [24]  797 	inc	dptr
      000122 E0               [24]  798 	movx	a,@dptr
      000123 FC               [12]  799 	mov	r4,a
      000124 74 02            [12]  800 	mov	a,#0x02
      000126 2B               [12]  801 	add	a, r3
      000127 FB               [12]  802 	mov	r3,a
      000128 E4               [12]  803 	clr	a
      000129 3C               [12]  804 	addc	a, r4
      00012A FC               [12]  805 	mov	r4,a
      00012B 90r00r09         [24]  806 	mov	dptr,#_calculate_checksum_i_20000_118
      00012E EB               [12]  807 	mov	a,r3
      00012F F0               [24]  808 	movx	@dptr,a
      000130 EC               [12]  809 	mov	a,r4
      000131 A3               [24]  810 	inc	dptr
      000132 F0               [24]  811 	movx	@dptr,a
      000133 02r00r36         [24]  812 	ljmp	00105$
      000136                        813 00103$:
                                    814 ;	tcp.c:27: sum = (sum & 0xFFFF) + (sum >> 16);
      000136 90r00r05         [24]  815 	mov	dptr,#_calculate_checksum_sum_10000_117
      000139 E0               [24]  816 	movx	a,@dptr
      00013A FC               [12]  817 	mov	r4,a
      00013B A3               [24]  818 	inc	dptr
      00013C E0               [24]  819 	movx	a,@dptr
      00013D FD               [12]  820 	mov	r5,a
      00013E A3               [24]  821 	inc	dptr
      00013F E0               [24]  822 	movx	a,@dptr
      000140 FE               [12]  823 	mov	r6,a
      000141 A3               [24]  824 	inc	dptr
      000142 E0               [24]  825 	movx	a,@dptr
      000143 FF               [12]  826 	mov	r7,a
      000144 8C 00            [24]  827 	mov	ar0,r4
      000146 8D 01            [24]  828 	mov	ar1,r5
      000148 7A 00            [12]  829 	mov	r2,#0x00
      00014A 7B 00            [12]  830 	mov	r3,#0x00
      00014C 8E 04            [24]  831 	mov	ar4,r6
      00014E 8F 05            [24]  832 	mov	ar5,r7
      000150 7E 00            [12]  833 	mov	r6,#0x00
      000152 7F 00            [12]  834 	mov	r7,#0x00
      000154 90r00r05         [24]  835 	mov	dptr,#_calculate_checksum_sum_10000_117
      000157 EC               [12]  836 	mov	a,r4
      000158 28               [12]  837 	add	a, r0
      000159 F0               [24]  838 	movx	@dptr,a
      00015A ED               [12]  839 	mov	a,r5
      00015B 39               [12]  840 	addc	a, r1
      00015C A3               [24]  841 	inc	dptr
      00015D F0               [24]  842 	movx	@dptr,a
      00015E EE               [12]  843 	mov	a,r6
      00015F 3A               [12]  844 	addc	a, r2
      000160 A3               [24]  845 	inc	dptr
      000161 F0               [24]  846 	movx	@dptr,a
      000162 EF               [12]  847 	mov	a,r7
      000163 3B               [12]  848 	addc	a, r3
      000164 A3               [24]  849 	inc	dptr
      000165 F0               [24]  850 	movx	@dptr,a
                                    851 ;	tcp.c:30: return ~sum;
      000166 90r00r05         [24]  852 	mov	dptr,#_calculate_checksum_sum_10000_117
      000169 E0               [24]  853 	movx	a,@dptr
      00016A FC               [12]  854 	mov	r4,a
      00016B A3               [24]  855 	inc	dptr
      00016C E0               [24]  856 	movx	a,@dptr
      00016D FD               [12]  857 	mov	r5,a
      00016E A3               [24]  858 	inc	dptr
      00016F E0               [24]  859 	movx	a,@dptr
      000170 FE               [12]  860 	mov	r6,a
      000171 A3               [24]  861 	inc	dptr
      000172 E0               [24]  862 	movx	a,@dptr
      000173 FF               [12]  863 	mov	r7,a
      000174 EC               [12]  864 	mov	a,r4
      000175 F4               [12]  865 	cpl	a
      000176 FC               [12]  866 	mov	r4,a
      000177 ED               [12]  867 	mov	a,r5
      000178 F4               [12]  868 	cpl	a
      000179 FD               [12]  869 	mov	r5,a
      00017A EE               [12]  870 	mov	a,r6
      00017B F4               [12]  871 	cpl	a
      00017C EF               [12]  872 	mov	a,r7
      00017D F4               [12]  873 	cpl	a
      00017E 8C 82            [24]  874 	mov	dpl, r4
      000180 8D 83            [24]  875 	mov	dph, r5
                                    876 ;	tcp.c:31: }
      000182 22               [24]  877 	ret
                                    878 ;------------------------------------------------------------
                                    879 ;Allocation info for local variables in function 'process_tcp_packet'
                                    880 ;------------------------------------------------------------
                                    881 ;sloc0                     Allocated with name '_process_tcp_packet_sloc0_1_0'
                                    882 ;packet_size               Allocated with name '_process_tcp_packet_PARM_2'
                                    883 ;response_size             Allocated with name '_process_tcp_packet_PARM_3'
                                    884 ;packet                    Allocated with name '_process_tcp_packet_packet_10000_121'
                                    885 ;response                  Allocated with name '_process_tcp_packet_response_10000_122'
                                    886 ;data_start                Allocated with name '_process_tcp_packet_data_start_10001_123'
                                    887 ;ethernet_header           Allocated with name '_process_tcp_packet_ethernet_header_10001_123'
                                    888 ;response_ethernet_header  Allocated with name '_process_tcp_packet_response_ethernet_header_10001_123'
                                    889 ;ip_header                 Allocated with name '_process_tcp_packet_ip_header_10002_124'
                                    890 ;response_ip_header        Allocated with name '_process_tcp_packet_response_ip_header_10002_124'
                                    891 ;tcp_header                Allocated with name '_process_tcp_packet_tcp_header_10003_125'
                                    892 ;response_tcp_header       Allocated with name '_process_tcp_packet_response_tcp_header_10003_125'
                                    893 ;seq_num                   Allocated with name '_process_tcp_packet_seq_num_10004_126'
                                    894 ;ack_num                   Allocated with name '_process_tcp_packet_ack_num_10004_126'
                                    895 ;tcp_length                Allocated with name '_process_tcp_packet_tcp_length_10005_127'
                                    896 ;ip_total_length           Allocated with name '_process_tcp_packet_ip_total_length_10005_127'
                                    897 ;ip_checksum               Allocated with name '_process_tcp_packet_ip_checksum_10006_128'
                                    898 ;tcp_checksum              Allocated with name '_process_tcp_packet_tcp_checksum_10007_129'
                                    899 ;------------------------------------------------------------
                                    900 ;	tcp.c:32: uint8_t* process_tcp_packet(uint8_t *packet, uint16_t packet_size, uint16_t *response_size) {
                                    901 ;	-----------------------------------------
                                    902 ;	 function process_tcp_packet
                                    903 ;	-----------------------------------------
      000183                        904 _process_tcp_packet:
      000183 AF F0            [24]  905 	mov	r7,b
      000185 AE 83            [24]  906 	mov	r6,dph
      000187 E5 82            [12]  907 	mov	a,dpl
      000189 90r00r10         [24]  908 	mov	dptr,#_process_tcp_packet_packet_10000_121
      00018C F0               [24]  909 	movx	@dptr,a
      00018D EE               [12]  910 	mov	a,r6
      00018E A3               [24]  911 	inc	dptr
      00018F F0               [24]  912 	movx	@dptr,a
      000190 EF               [12]  913 	mov	a,r7
      000191 A3               [24]  914 	inc	dptr
      000192 F0               [24]  915 	movx	@dptr,a
                                    916 ;	tcp.c:34: memset(response, 0, MAX_PACKET_SIZE + 1);      // Clear the response buffer
      000193 90r00r00         [24]  917 	mov	dptr,#_memset_PARM_2
      000196 E4               [12]  918 	clr	a
      000197 F0               [24]  919 	movx	@dptr,a
      000198 90r00r00         [24]  920 	mov	dptr,#_memset_PARM_3
      00019B 74 DD            [12]  921 	mov	a,#0xdd
      00019D F0               [24]  922 	movx	@dptr,a
      00019E 74 05            [12]  923 	mov	a,#0x05
      0001A0 A3               [24]  924 	inc	dptr
      0001A1 F0               [24]  925 	movx	@dptr,a
      0001A2 90r00r13         [24]  926 	mov	dptr,#_process_tcp_packet_response_10000_122
      0001A5 75 F0 00         [24]  927 	mov	b, #0x00
      0001A8 12r00r00         [24]  928 	lcall	_memset
                                    929 ;	tcp.c:36: response[0] = 0x0E;  // Ensure the first byte of the response is always 0x0E
      0001AB 90r00r13         [24]  930 	mov	dptr,#_process_tcp_packet_response_10000_122
      0001AE 74 0E            [12]  931 	mov	a,#0x0e
      0001B0 F0               [24]  932 	movx	@dptr,a
                                    933 ;	tcp.c:39: uint8_t *data_start = response + 1;
                                    934 ;	tcp.c:42: uint8_t *ethernet_header = packet;
      0001B1 90r00r10         [24]  935 	mov	dptr,#_process_tcp_packet_packet_10000_121
      0001B4 E0               [24]  936 	movx	a,@dptr
      0001B5 FD               [12]  937 	mov	r5,a
      0001B6 A3               [24]  938 	inc	dptr
      0001B7 E0               [24]  939 	movx	a,@dptr
      0001B8 FE               [12]  940 	mov	r6,a
      0001B9 A3               [24]  941 	inc	dptr
      0001BA E0               [24]  942 	movx	a,@dptr
      0001BB FF               [12]  943 	mov	r7,a
                                    944 ;	tcp.c:44: memcpy(response_ethernet_header, ethernet_header, ETHERNET_HEADER_SIZE);
      0001BC 8D 02            [24]  945 	mov	ar2,r5
      0001BE 8E 03            [24]  946 	mov	ar3,r6
      0001C0 8F 04            [24]  947 	mov	ar4,r7
      0001C2 90r00r00         [24]  948 	mov	dptr,#___memcpy_PARM_2
      0001C5 EA               [12]  949 	mov	a,r2
      0001C6 F0               [24]  950 	movx	@dptr,a
      0001C7 EB               [12]  951 	mov	a,r3
      0001C8 A3               [24]  952 	inc	dptr
      0001C9 F0               [24]  953 	movx	@dptr,a
      0001CA EC               [12]  954 	mov	a,r4
      0001CB A3               [24]  955 	inc	dptr
      0001CC F0               [24]  956 	movx	@dptr,a
      0001CD 90r00r00         [24]  957 	mov	dptr,#___memcpy_PARM_3
      0001D0 74 0E            [12]  958 	mov	a,#0x0e
      0001D2 F0               [24]  959 	movx	@dptr,a
      0001D3 E4               [12]  960 	clr	a
      0001D4 A3               [24]  961 	inc	dptr
      0001D5 F0               [24]  962 	movx	@dptr,a
      0001D6 90r00r14         [24]  963 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0001)
      0001D9 F5 F0            [12]  964 	mov	b,a
      0001DB C0 07            [24]  965 	push	ar7
      0001DD C0 06            [24]  966 	push	ar6
      0001DF C0 05            [24]  967 	push	ar5
      0001E1 12r00r00         [24]  968 	lcall	___memcpy
      0001E4 D0 05            [24]  969 	pop	ar5
      0001E6 D0 06            [24]  970 	pop	ar6
      0001E8 D0 07            [24]  971 	pop	ar7
                                    972 ;	tcp.c:47: memcpy(response_ethernet_header, ethernet_header + 6, 6);  // Destination MAC
      0001EA 74 06            [12]  973 	mov	a,#0x06
      0001EC 2D               [12]  974 	add	a, r5
      0001ED FA               [12]  975 	mov	r2,a
      0001EE E4               [12]  976 	clr	a
      0001EF 3E               [12]  977 	addc	a, r6
      0001F0 FB               [12]  978 	mov	r3,a
      0001F1 8F 04            [24]  979 	mov	ar4,r7
      0001F3 90r00r00         [24]  980 	mov	dptr,#___memcpy_PARM_2
      0001F6 EA               [12]  981 	mov	a,r2
      0001F7 F0               [24]  982 	movx	@dptr,a
      0001F8 EB               [12]  983 	mov	a,r3
      0001F9 A3               [24]  984 	inc	dptr
      0001FA F0               [24]  985 	movx	@dptr,a
      0001FB EC               [12]  986 	mov	a,r4
      0001FC A3               [24]  987 	inc	dptr
      0001FD F0               [24]  988 	movx	@dptr,a
      0001FE 90r00r00         [24]  989 	mov	dptr,#___memcpy_PARM_3
      000201 74 06            [12]  990 	mov	a,#0x06
      000203 F0               [24]  991 	movx	@dptr,a
      000204 E4               [12]  992 	clr	a
      000205 A3               [24]  993 	inc	dptr
      000206 F0               [24]  994 	movx	@dptr,a
      000207 90r00r14         [24]  995 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0001)
      00020A F5 F0            [12]  996 	mov	b,a
      00020C C0 07            [24]  997 	push	ar7
      00020E C0 06            [24]  998 	push	ar6
      000210 C0 05            [24]  999 	push	ar5
      000212 12r00r00         [24] 1000 	lcall	___memcpy
      000215 D0 05            [24] 1001 	pop	ar5
      000217 D0 06            [24] 1002 	pop	ar6
      000219 D0 07            [24] 1003 	pop	ar7
                                   1004 ;	tcp.c:48: memcpy(response_ethernet_header + 6, ethernet_header, 6);  // Source MAC
      00021B 8D 02            [24] 1005 	mov	ar2,r5
      00021D 8E 03            [24] 1006 	mov	ar3,r6
      00021F 8F 04            [24] 1007 	mov	ar4,r7
      000221 90r00r00         [24] 1008 	mov	dptr,#___memcpy_PARM_2
      000224 EA               [12] 1009 	mov	a,r2
      000225 F0               [24] 1010 	movx	@dptr,a
      000226 EB               [12] 1011 	mov	a,r3
      000227 A3               [24] 1012 	inc	dptr
      000228 F0               [24] 1013 	movx	@dptr,a
      000229 EC               [12] 1014 	mov	a,r4
      00022A A3               [24] 1015 	inc	dptr
      00022B F0               [24] 1016 	movx	@dptr,a
      00022C 90r00r00         [24] 1017 	mov	dptr,#___memcpy_PARM_3
      00022F 74 06            [12] 1018 	mov	a,#0x06
      000231 F0               [24] 1019 	movx	@dptr,a
      000232 E4               [12] 1020 	clr	a
      000233 A3               [24] 1021 	inc	dptr
      000234 F0               [24] 1022 	movx	@dptr,a
      000235 90r00r1A         [24] 1023 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0007)
      000238 F5 F0            [12] 1024 	mov	b,a
      00023A C0 07            [24] 1025 	push	ar7
      00023C C0 06            [24] 1026 	push	ar6
      00023E C0 05            [24] 1027 	push	ar5
      000240 12r00r00         [24] 1028 	lcall	___memcpy
      000243 D0 05            [24] 1029 	pop	ar5
      000245 D0 06            [24] 1030 	pop	ar6
      000247 D0 07            [24] 1031 	pop	ar7
                                   1032 ;	tcp.c:51: uint8_t *ip_header = packet + ETHERNET_HEADER_SIZE;
      000249 74 0E            [12] 1033 	mov	a,#0x0e
      00024B 2D               [12] 1034 	add	a, r5
      00024C FA               [12] 1035 	mov	r2,a
      00024D E4               [12] 1036 	clr	a
      00024E 3E               [12] 1037 	addc	a, r6
      00024F FB               [12] 1038 	mov	r3,a
      000250 8F 04            [24] 1039 	mov	ar4,r7
                                   1040 ;	tcp.c:52: uint8_t *response_ip_header = data_start + ETHERNET_HEADER_SIZE;
                                   1041 ;	tcp.c:55: memcpy(response_ip_header, ip_header, IP_HEADER_SIZE);
      000252 90r00r00         [24] 1042 	mov	dptr,#___memcpy_PARM_2
      000255 EA               [12] 1043 	mov	a,r2
      000256 F0               [24] 1044 	movx	@dptr,a
      000257 EB               [12] 1045 	mov	a,r3
      000258 A3               [24] 1046 	inc	dptr
      000259 F0               [24] 1047 	movx	@dptr,a
      00025A EC               [12] 1048 	mov	a,r4
      00025B A3               [24] 1049 	inc	dptr
      00025C F0               [24] 1050 	movx	@dptr,a
      00025D 90r00r00         [24] 1051 	mov	dptr,#___memcpy_PARM_3
      000260 74 14            [12] 1052 	mov	a,#0x14
      000262 F0               [24] 1053 	movx	@dptr,a
      000263 E4               [12] 1054 	clr	a
      000264 A3               [24] 1055 	inc	dptr
      000265 F0               [24] 1056 	movx	@dptr,a
      000266 90r00r22         [24] 1057 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x000f)
      000269 F5 F0            [12] 1058 	mov	b,a
      00026B C0 07            [24] 1059 	push	ar7
      00026D C0 06            [24] 1060 	push	ar6
      00026F C0 05            [24] 1061 	push	ar5
      000271 12r00r00         [24] 1062 	lcall	___memcpy
      000274 D0 05            [24] 1063 	pop	ar5
      000276 D0 06            [24] 1064 	pop	ar6
      000278 D0 07            [24] 1065 	pop	ar7
                                   1066 ;	tcp.c:56: response_ip_header[12] = ip_header[16];  // Swap Source IP
      00027A 74 1E            [12] 1067 	mov	a,#0x1e
      00027C 2D               [12] 1068 	add	a, r5
      00027D FA               [12] 1069 	mov	r2,a
      00027E E4               [12] 1070 	clr	a
      00027F 3E               [12] 1071 	addc	a, r6
      000280 FB               [12] 1072 	mov	r3,a
      000281 8F 04            [24] 1073 	mov	ar4,r7
      000283 8A 82            [24] 1074 	mov	dpl,r2
      000285 8B 83            [24] 1075 	mov	dph,r3
      000287 8C F0            [24] 1076 	mov	b,r4
      000289 12r00r00         [24] 1077 	lcall	__gptrget
      00028C FA               [12] 1078 	mov	r2,a
      00028D 90r00r2E         [24] 1079 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001b)
      000290 75 F0 00         [24] 1080 	mov	b,#0x00
      000293 EA               [12] 1081 	mov	a,r2
      000294 12r00r00         [24] 1082 	lcall	__gptrput
                                   1083 ;	tcp.c:57: response_ip_header[13] = ip_header[17];
      000297 74 1F            [12] 1084 	mov	a,#0x1f
      000299 2D               [12] 1085 	add	a, r5
      00029A FA               [12] 1086 	mov	r2,a
      00029B E4               [12] 1087 	clr	a
      00029C 3E               [12] 1088 	addc	a, r6
      00029D FB               [12] 1089 	mov	r3,a
      00029E 8F 04            [24] 1090 	mov	ar4,r7
      0002A0 8A 82            [24] 1091 	mov	dpl,r2
      0002A2 8B 83            [24] 1092 	mov	dph,r3
      0002A4 8C F0            [24] 1093 	mov	b,r4
      0002A6 12r00r00         [24] 1094 	lcall	__gptrget
      0002A9 FA               [12] 1095 	mov	r2,a
      0002AA 90r00r2F         [24] 1096 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001c)
      0002AD 75 F0 00         [24] 1097 	mov	b,#0x00
      0002B0 EA               [12] 1098 	mov	a,r2
      0002B1 12r00r00         [24] 1099 	lcall	__gptrput
                                   1100 ;	tcp.c:58: response_ip_header[14] = ip_header[18];
      0002B4 74 20            [12] 1101 	mov	a,#0x20
      0002B6 2D               [12] 1102 	add	a, r5
      0002B7 FA               [12] 1103 	mov	r2,a
      0002B8 E4               [12] 1104 	clr	a
      0002B9 3E               [12] 1105 	addc	a, r6
      0002BA FB               [12] 1106 	mov	r3,a
      0002BB 8F 04            [24] 1107 	mov	ar4,r7
      0002BD 8A 82            [24] 1108 	mov	dpl,r2
      0002BF 8B 83            [24] 1109 	mov	dph,r3
      0002C1 8C F0            [24] 1110 	mov	b,r4
      0002C3 12r00r00         [24] 1111 	lcall	__gptrget
      0002C6 FA               [12] 1112 	mov	r2,a
      0002C7 90r00r30         [24] 1113 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001d)
      0002CA 75 F0 00         [24] 1114 	mov	b,#0x00
      0002CD EA               [12] 1115 	mov	a,r2
      0002CE 12r00r00         [24] 1116 	lcall	__gptrput
                                   1117 ;	tcp.c:59: response_ip_header[15] = ip_header[19];
      0002D1 74 21            [12] 1118 	mov	a,#0x21
      0002D3 2D               [12] 1119 	add	a, r5
      0002D4 FA               [12] 1120 	mov	r2,a
      0002D5 E4               [12] 1121 	clr	a
      0002D6 3E               [12] 1122 	addc	a, r6
      0002D7 FB               [12] 1123 	mov	r3,a
      0002D8 8F 04            [24] 1124 	mov	ar4,r7
      0002DA 8A 82            [24] 1125 	mov	dpl,r2
      0002DC 8B 83            [24] 1126 	mov	dph,r3
      0002DE 8C F0            [24] 1127 	mov	b,r4
      0002E0 12r00r00         [24] 1128 	lcall	__gptrget
      0002E3 FA               [12] 1129 	mov	r2,a
      0002E4 90r00r31         [24] 1130 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001e)
      0002E7 75 F0 00         [24] 1131 	mov	b,#0x00
      0002EA EA               [12] 1132 	mov	a,r2
      0002EB 12r00r00         [24] 1133 	lcall	__gptrput
                                   1134 ;	tcp.c:60: response_ip_header[16] = ip_header[12];  // Swap Destination IP
      0002EE 74 1A            [12] 1135 	mov	a,#0x1a
      0002F0 2D               [12] 1136 	add	a, r5
      0002F1 FA               [12] 1137 	mov	r2,a
      0002F2 E4               [12] 1138 	clr	a
      0002F3 3E               [12] 1139 	addc	a, r6
      0002F4 FB               [12] 1140 	mov	r3,a
      0002F5 8F 04            [24] 1141 	mov	ar4,r7
      0002F7 8A 82            [24] 1142 	mov	dpl,r2
      0002F9 8B 83            [24] 1143 	mov	dph,r3
      0002FB 8C F0            [24] 1144 	mov	b,r4
      0002FD 12r00r00         [24] 1145 	lcall	__gptrget
      000300 FA               [12] 1146 	mov	r2,a
      000301 90r00r32         [24] 1147 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001f)
      000304 75 F0 00         [24] 1148 	mov	b,#0x00
      000307 EA               [12] 1149 	mov	a,r2
      000308 12r00r00         [24] 1150 	lcall	__gptrput
                                   1151 ;	tcp.c:61: response_ip_header[17] = ip_header[13];
      00030B 74 1B            [12] 1152 	mov	a,#0x1b
      00030D 2D               [12] 1153 	add	a, r5
      00030E FA               [12] 1154 	mov	r2,a
      00030F E4               [12] 1155 	clr	a
      000310 3E               [12] 1156 	addc	a, r6
      000311 FB               [12] 1157 	mov	r3,a
      000312 8F 04            [24] 1158 	mov	ar4,r7
      000314 8A 82            [24] 1159 	mov	dpl,r2
      000316 8B 83            [24] 1160 	mov	dph,r3
      000318 8C F0            [24] 1161 	mov	b,r4
      00031A 12r00r00         [24] 1162 	lcall	__gptrget
      00031D FA               [12] 1163 	mov	r2,a
      00031E 90r00r33         [24] 1164 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0020)
      000321 75 F0 00         [24] 1165 	mov	b,#0x00
      000324 EA               [12] 1166 	mov	a,r2
      000325 12r00r00         [24] 1167 	lcall	__gptrput
                                   1168 ;	tcp.c:62: response_ip_header[18] = ip_header[14];
      000328 74 1C            [12] 1169 	mov	a,#0x1c
      00032A 2D               [12] 1170 	add	a, r5
      00032B FA               [12] 1171 	mov	r2,a
      00032C E4               [12] 1172 	clr	a
      00032D 3E               [12] 1173 	addc	a, r6
      00032E FB               [12] 1174 	mov	r3,a
      00032F 8F 04            [24] 1175 	mov	ar4,r7
      000331 8A 82            [24] 1176 	mov	dpl,r2
      000333 8B 83            [24] 1177 	mov	dph,r3
      000335 8C F0            [24] 1178 	mov	b,r4
      000337 12r00r00         [24] 1179 	lcall	__gptrget
      00033A FA               [12] 1180 	mov	r2,a
      00033B 90r00r34         [24] 1181 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0021)
      00033E 75 F0 00         [24] 1182 	mov	b,#0x00
      000341 EA               [12] 1183 	mov	a,r2
      000342 12r00r00         [24] 1184 	lcall	__gptrput
                                   1185 ;	tcp.c:63: response_ip_header[19] = ip_header[15];
      000345 74 1D            [12] 1186 	mov	a,#0x1d
      000347 2D               [12] 1187 	add	a, r5
      000348 FA               [12] 1188 	mov	r2,a
      000349 E4               [12] 1189 	clr	a
      00034A 3E               [12] 1190 	addc	a, r6
      00034B FB               [12] 1191 	mov	r3,a
      00034C 8F 04            [24] 1192 	mov	ar4,r7
      00034E 8A 82            [24] 1193 	mov	dpl,r2
      000350 8B 83            [24] 1194 	mov	dph,r3
      000352 8C F0            [24] 1195 	mov	b,r4
      000354 12r00r00         [24] 1196 	lcall	__gptrget
      000357 FA               [12] 1197 	mov	r2,a
      000358 90r00r35         [24] 1198 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0022)
      00035B 75 F0 00         [24] 1199 	mov	b,#0x00
      00035E EA               [12] 1200 	mov	a,r2
      00035F 12r00r00         [24] 1201 	lcall	__gptrput
                                   1202 ;	tcp.c:64: response_ip_header[10] = 0;              // Clear checksum
      000362 90r00r2C         [24] 1203 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0019)
      000365 E4               [12] 1204 	clr	a
      000366 12r00r00         [24] 1205 	lcall	__gptrput
                                   1206 ;	tcp.c:65: response_ip_header[11] = 0;
      000369 90r00r2D         [24] 1207 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001a)
      00036C F5 F0            [12] 1208 	mov	b,a
      00036E 12r00r00         [24] 1209 	lcall	__gptrput
                                   1210 ;	tcp.c:68: uint8_t *tcp_header = packet + ETHERNET_HEADER_SIZE + IP_HEADER_SIZE;
      000371 74 22            [12] 1211 	mov	a,#0x22
      000373 2D               [12] 1212 	add	a, r5
      000374 F5*00            [12] 1213 	mov	_process_tcp_packet_sloc0_1_0,a
      000376 E4               [12] 1214 	clr	a
      000377 3E               [12] 1215 	addc	a, r6
      000378 F5*01            [12] 1216 	mov	(_process_tcp_packet_sloc0_1_0 + 1),a
      00037A 8F*02            [24] 1217 	mov	(_process_tcp_packet_sloc0_1_0 + 2),r7
                                   1218 ;	tcp.c:69: uint8_t *response_tcp_header = data_start + ETHERNET_HEADER_SIZE + IP_HEADER_SIZE;
                                   1219 ;	tcp.c:72: memcpy(response_tcp_header, tcp_header, TCP_HEADER_SIZE);
      00037C A8*00            [24] 1220 	mov	r0,_process_tcp_packet_sloc0_1_0
      00037E A9*01            [24] 1221 	mov	r1,(_process_tcp_packet_sloc0_1_0 + 1)
      000380 AC*02            [24] 1222 	mov	r4,(_process_tcp_packet_sloc0_1_0 + 2)
      000382 90r00r00         [24] 1223 	mov	dptr,#___memcpy_PARM_2
      000385 E8               [12] 1224 	mov	a,r0
      000386 F0               [24] 1225 	movx	@dptr,a
      000387 E9               [12] 1226 	mov	a,r1
      000388 A3               [24] 1227 	inc	dptr
      000389 F0               [24] 1228 	movx	@dptr,a
      00038A EC               [12] 1229 	mov	a,r4
      00038B A3               [24] 1230 	inc	dptr
      00038C F0               [24] 1231 	movx	@dptr,a
      00038D 90r00r00         [24] 1232 	mov	dptr,#___memcpy_PARM_3
      000390 74 14            [12] 1233 	mov	a,#0x14
      000392 F0               [24] 1234 	movx	@dptr,a
      000393 E4               [12] 1235 	clr	a
      000394 A3               [24] 1236 	inc	dptr
      000395 F0               [24] 1237 	movx	@dptr,a
      000396 90r00r36         [24] 1238 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0023)
      000399 F5 F0            [12] 1239 	mov	b,a
      00039B C0 07            [24] 1240 	push	ar7
      00039D C0 06            [24] 1241 	push	ar6
      00039F C0 05            [24] 1242 	push	ar5
      0003A1 12r00r00         [24] 1243 	lcall	___memcpy
      0003A4 D0 05            [24] 1244 	pop	ar5
      0003A6 D0 06            [24] 1245 	pop	ar6
      0003A8 D0 07            [24] 1246 	pop	ar7
                                   1247 ;	tcp.c:73: response_tcp_header[0] = tcp_header[2];  // Swap Source Port
      0003AA 74 24            [12] 1248 	mov	a,#0x24
      0003AC 2D               [12] 1249 	add	a, r5
      0003AD FA               [12] 1250 	mov	r2,a
      0003AE E4               [12] 1251 	clr	a
      0003AF 3E               [12] 1252 	addc	a, r6
      0003B0 FB               [12] 1253 	mov	r3,a
      0003B1 8F 04            [24] 1254 	mov	ar4,r7
      0003B3 8A 82            [24] 1255 	mov	dpl,r2
      0003B5 8B 83            [24] 1256 	mov	dph,r3
      0003B7 8C F0            [24] 1257 	mov	b,r4
      0003B9 12r00r00         [24] 1258 	lcall	__gptrget
      0003BC FA               [12] 1259 	mov	r2,a
      0003BD 90r00r36         [24] 1260 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0023)
      0003C0 75 F0 00         [24] 1261 	mov	b,#0x00
      0003C3 EA               [12] 1262 	mov	a,r2
      0003C4 12r00r00         [24] 1263 	lcall	__gptrput
                                   1264 ;	tcp.c:74: response_tcp_header[1] = tcp_header[3];
      0003C7 74 25            [12] 1265 	mov	a,#0x25
      0003C9 2D               [12] 1266 	add	a, r5
      0003CA FA               [12] 1267 	mov	r2,a
      0003CB E4               [12] 1268 	clr	a
      0003CC 3E               [12] 1269 	addc	a, r6
      0003CD FB               [12] 1270 	mov	r3,a
      0003CE 8F 04            [24] 1271 	mov	ar4,r7
      0003D0 8A 82            [24] 1272 	mov	dpl,r2
      0003D2 8B 83            [24] 1273 	mov	dph,r3
      0003D4 8C F0            [24] 1274 	mov	b,r4
      0003D6 12r00r00         [24] 1275 	lcall	__gptrget
      0003D9 FA               [12] 1276 	mov	r2,a
      0003DA 90r00r37         [24] 1277 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0024)
      0003DD 75 F0 00         [24] 1278 	mov	b,#0x00
      0003E0 EA               [12] 1279 	mov	a,r2
      0003E1 12r00r00         [24] 1280 	lcall	__gptrput
                                   1281 ;	tcp.c:75: response_tcp_header[2] = tcp_header[0];  // Swap Destination Port
      0003E4 85*00 82         [24] 1282 	mov	dpl,_process_tcp_packet_sloc0_1_0
      0003E7 85*01 83         [24] 1283 	mov	dph,(_process_tcp_packet_sloc0_1_0 + 1)
      0003EA 85*02 F0         [24] 1284 	mov	b,(_process_tcp_packet_sloc0_1_0 + 2)
      0003ED 12r00r00         [24] 1285 	lcall	__gptrget
      0003F0 FC               [12] 1286 	mov	r4,a
      0003F1 90r00r38         [24] 1287 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0025)
      0003F4 75 F0 00         [24] 1288 	mov	b,#0x00
      0003F7 EC               [12] 1289 	mov	a,r4
      0003F8 12r00r00         [24] 1290 	lcall	__gptrput
                                   1291 ;	tcp.c:76: response_tcp_header[3] = tcp_header[1];
      0003FB 74 23            [12] 1292 	mov	a,#0x23
      0003FD 2D               [12] 1293 	add	a, r5
      0003FE FD               [12] 1294 	mov	r5,a
      0003FF E4               [12] 1295 	clr	a
      000400 3E               [12] 1296 	addc	a, r6
      000401 FE               [12] 1297 	mov	r6,a
      000402 8D 82            [24] 1298 	mov	dpl,r5
      000404 8E 83            [24] 1299 	mov	dph,r6
      000406 8F F0            [24] 1300 	mov	b,r7
      000408 12r00r00         [24] 1301 	lcall	__gptrget
      00040B FD               [12] 1302 	mov	r5,a
      00040C 90r00r39         [24] 1303 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0026)
      00040F 75 F0 00         [24] 1304 	mov	b,#0x00
      000412 ED               [12] 1305 	mov	a,r5
      000413 12r00r00         [24] 1306 	lcall	__gptrput
                                   1307 ;	tcp.c:81: response_tcp_header[4] = (ack_num >> 24) & 0xFF;
      000416 90r00r3A         [24] 1308 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0027)
      000419 E4               [12] 1309 	clr	a
      00041A 12r00r00         [24] 1310 	lcall	__gptrput
                                   1311 ;	tcp.c:82: response_tcp_header[5] = (ack_num >> 16) & 0xFF;
      00041D 90r00r3B         [24] 1312 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0028)
      000420 F5 F0            [12] 1313 	mov	b,a
      000422 12r00r00         [24] 1314 	lcall	__gptrput
                                   1315 ;	tcp.c:83: response_tcp_header[6] = (ack_num >> 8) & 0xFF;
      000425 90r00r3C         [24] 1316 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0029)
      000428 F5 F0            [12] 1317 	mov	b,a
      00042A 12r00r00         [24] 1318 	lcall	__gptrput
                                   1319 ;	tcp.c:84: response_tcp_header[7] = ack_num & 0xFF;
      00042D 90r00r3D         [24] 1320 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x002a)
      000430 F5 F0            [12] 1321 	mov	b,a
      000432 04               [12] 1322 	inc	a
      000433 12r00r00         [24] 1323 	lcall	__gptrput
                                   1324 ;	tcp.c:86: response_tcp_header[12] = 0x50;  // SYN (0x02) + ACK (0x10)
      000436 90r00r42         [24] 1325 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x002f)
      000439 74 50            [12] 1326 	mov	a,#0x50
      00043B 12r00r00         [24] 1327 	lcall	__gptrput
                                   1328 ;	tcp.c:88: response_tcp_header[13] = 0x12;  // SYN (0x02) + ACK (0x10)
      00043E 90r00r43         [24] 1329 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0030)
      000441 74 12            [12] 1330 	mov	a,#0x12
      000443 12r00r00         [24] 1331 	lcall	__gptrput
                                   1332 ;	tcp.c:91: response_tcp_header[18] = 0;
      000446 90r00r48         [24] 1333 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0035)
      000449 E4               [12] 1334 	clr	a
      00044A 12r00r00         [24] 1335 	lcall	__gptrput
                                   1336 ;	tcp.c:92: response_tcp_header[19] = 0;
      00044D 90r00r49         [24] 1337 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0036)
      000450 F5 F0            [12] 1338 	mov	b,a
      000452 12r00r00         [24] 1339 	lcall	__gptrput
                                   1340 ;	tcp.c:98: response_ip_header[2] = (ip_total_length >> 8) & 0xFF;
      000455 90r00r24         [24] 1341 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0011)
      000458 F5 F0            [12] 1342 	mov	b,a
      00045A 12r00r00         [24] 1343 	lcall	__gptrput
                                   1344 ;	tcp.c:99: response_ip_header[3] = ip_total_length & 0xFF;
      00045D 90r00r25         [24] 1345 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0012)
      000460 F5 F0            [12] 1346 	mov	b,a
      000462 74 28            [12] 1347 	mov	a,#0x28
      000464 12r00r00         [24] 1348 	lcall	__gptrput
                                   1349 ;	tcp.c:100: uint16_t ip_checksum = calculate_checksum(response_ip_header, IP_HEADER_SIZE);
      000467 90r00r00         [24] 1350 	mov	dptr,#_calculate_checksum_PARM_2
      00046A 03               [12] 1351 	rr	a
      00046B F0               [24] 1352 	movx	@dptr,a
      00046C E4               [12] 1353 	clr	a
      00046D A3               [24] 1354 	inc	dptr
      00046E F0               [24] 1355 	movx	@dptr,a
      00046F 90r00r22         [24] 1356 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x000f)
      000472 F5 F0            [12] 1357 	mov	b,a
      000474 12r00r00         [24] 1358 	lcall	_calculate_checksum
      000477 AE 82            [24] 1359 	mov	r6, dpl
      000479 AF 83            [24] 1360 	mov	r7, dph
                                   1361 ;	tcp.c:101: response_ip_header[10] = (ip_checksum >> 8) & 0xFF;
      00047B 8F 05            [24] 1362 	mov	ar5,r7
      00047D 90r00r2C         [24] 1363 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0019)
      000480 75 F0 00         [24] 1364 	mov	b,#0x00
      000483 ED               [12] 1365 	mov	a,r5
      000484 12r00r00         [24] 1366 	lcall	__gptrput
                                   1367 ;	tcp.c:102: response_ip_header[11] = ip_checksum & 0xFF;
      000487 90r00r2D         [24] 1368 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x001a)
      00048A EE               [12] 1369 	mov	a,r6
      00048B 12r00r00         [24] 1370 	lcall	__gptrput
                                   1371 ;	tcp.c:104: uint16_t tcp_checksum = calculate_checksum(data_start + ETHERNET_HEADER_SIZE, ip_total_length);
      00048E 90r00r00         [24] 1372 	mov	dptr,#_calculate_checksum_PARM_2
      000491 74 28            [12] 1373 	mov	a,#0x28
      000493 F0               [24] 1374 	movx	@dptr,a
      000494 E4               [12] 1375 	clr	a
      000495 A3               [24] 1376 	inc	dptr
      000496 F0               [24] 1377 	movx	@dptr,a
      000497 90r00r22         [24] 1378 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x000f)
      00049A F5 F0            [12] 1379 	mov	b,a
      00049C 12r00r00         [24] 1380 	lcall	_calculate_checksum
      00049F AE 82            [24] 1381 	mov	r6, dpl
      0004A1 AF 83            [24] 1382 	mov	r7, dph
                                   1383 ;	tcp.c:105: response_tcp_header[16] = (tcp_checksum >> 8) & 0xFF;
      0004A3 8F 05            [24] 1384 	mov	ar5,r7
      0004A5 90r00r46         [24] 1385 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0033)
      0004A8 75 F0 00         [24] 1386 	mov	b,#0x00
      0004AB ED               [12] 1387 	mov	a,r5
      0004AC 12r00r00         [24] 1388 	lcall	__gptrput
                                   1389 ;	tcp.c:106: response_tcp_header[17] = tcp_checksum & 0xFF;
      0004AF 90r00r47         [24] 1390 	mov	dptr,#(_process_tcp_packet_response_10000_122 + 0x0034)
      0004B2 EE               [12] 1391 	mov	a,r6
      0004B3 12r00r00         [24] 1392 	lcall	__gptrput
                                   1393 ;	tcp.c:109: *response_size = 1 + ETHERNET_HEADER_SIZE + ip_total_length;
      0004B6 90r00r0D         [24] 1394 	mov	dptr,#_process_tcp_packet_PARM_3
      0004B9 E0               [24] 1395 	movx	a,@dptr
      0004BA FD               [12] 1396 	mov	r5,a
      0004BB A3               [24] 1397 	inc	dptr
      0004BC E0               [24] 1398 	movx	a,@dptr
      0004BD FE               [12] 1399 	mov	r6,a
      0004BE A3               [24] 1400 	inc	dptr
      0004BF E0               [24] 1401 	movx	a,@dptr
      0004C0 FF               [12] 1402 	mov	r7,a
      0004C1 8D 82            [24] 1403 	mov	dpl,r5
      0004C3 8E 83            [24] 1404 	mov	dph,r6
      0004C5 8F F0            [24] 1405 	mov	b,r7
      0004C7 74 37            [12] 1406 	mov	a,#0x37
      0004C9 12r00r00         [24] 1407 	lcall	__gptrput
      0004CC A3               [24] 1408 	inc	dptr
      0004CD E4               [12] 1409 	clr	a
      0004CE 12r00r00         [24] 1410 	lcall	__gptrput
                                   1411 ;	tcp.c:111: return response;
      0004D1 90r00r13         [24] 1412 	mov	dptr,#_process_tcp_packet_response_10000_122
      0004D4 F5 F0            [12] 1413 	mov	b,a
                                   1414 ;	tcp.c:112: }
      0004D6 22               [24] 1415 	ret
                                   1416 ;------------------------------------------------------------
                                   1417 ;Allocation info for local variables in function 'print_hexdump'
                                   1418 ;------------------------------------------------------------
                                   1419 ;size                      Allocated with name '_print_hexdump_PARM_2'
                                   1420 ;data                      Allocated with name '_print_hexdump_data_10000_130'
                                   1421 ;i                         Allocated with name '_print_hexdump_i_20000_132'
                                   1422 ;------------------------------------------------------------
                                   1423 ;	tcp.c:116: void print_hexdump(const uint8_t *data, uint16_t size) {
                                   1424 ;	-----------------------------------------
                                   1425 ;	 function print_hexdump
                                   1426 ;	-----------------------------------------
      0004D7                       1427 _print_hexdump:
      0004D7 AF F0            [24] 1428 	mov	r7,b
      0004D9 AE 83            [24] 1429 	mov	r6,dph
      0004DB E5 82            [12] 1430 	mov	a,dpl
      0004DD 90r05rF2         [24] 1431 	mov	dptr,#_print_hexdump_data_10000_130
      0004E0 F0               [24] 1432 	movx	@dptr,a
      0004E1 EE               [12] 1433 	mov	a,r6
      0004E2 A3               [24] 1434 	inc	dptr
      0004E3 F0               [24] 1435 	movx	@dptr,a
      0004E4 EF               [12] 1436 	mov	a,r7
      0004E5 A3               [24] 1437 	inc	dptr
      0004E6 F0               [24] 1438 	movx	@dptr,a
                                   1439 ;	tcp.c:117: printf("\nHexdump (Size: %d):\n", size);
      0004E7 90r05rF0         [24] 1440 	mov	dptr,#_print_hexdump_PARM_2
      0004EA E0               [24] 1441 	movx	a,@dptr
      0004EB FE               [12] 1442 	mov	r6,a
      0004EC A3               [24] 1443 	inc	dptr
      0004ED E0               [24] 1444 	movx	a,@dptr
      0004EE FF               [12] 1445 	mov	r7,a
      0004EF C0 07            [24] 1446 	push	ar7
      0004F1 C0 06            [24] 1447 	push	ar6
      0004F3 C0 06            [24] 1448 	push	ar6
      0004F5 C0 07            [24] 1449 	push	ar7
      0004F7 74r00            [12] 1450 	mov	a,#___str_0
      0004F9 C0 E0            [24] 1451 	push	acc
      0004FB 74s00            [12] 1452 	mov	a,#(___str_0 >> 8)
      0004FD C0 E0            [24] 1453 	push	acc
      0004FF 74 80            [12] 1454 	mov	a,#0x80
      000501 C0 E0            [24] 1455 	push	acc
      000503 12r00r00         [24] 1456 	lcall	_printf
      000506 E5 81            [12] 1457 	mov	a,sp
      000508 24 FB            [12] 1458 	add	a,#0xfb
      00050A F5 81            [12] 1459 	mov	sp,a
      00050C D0 06            [24] 1460 	pop	ar6
      00050E D0 07            [24] 1461 	pop	ar7
                                   1462 ;	tcp.c:118: for (uint16_t i = 0; i < size; i++) {
      000510 90r05rF2         [24] 1463 	mov	dptr,#_print_hexdump_data_10000_130
      000513 E0               [24] 1464 	movx	a,@dptr
      000514 FB               [12] 1465 	mov	r3,a
      000515 A3               [24] 1466 	inc	dptr
      000516 E0               [24] 1467 	movx	a,@dptr
      000517 FC               [12] 1468 	mov	r4,a
      000518 A3               [24] 1469 	inc	dptr
      000519 E0               [24] 1470 	movx	a,@dptr
      00051A FD               [12] 1471 	mov	r5,a
      00051B 79 00            [12] 1472 	mov	r1,#0x00
      00051D 7A 00            [12] 1473 	mov	r2,#0x00
      00051F                       1474 00107$:
      00051F C3               [12] 1475 	clr	c
      000520 E9               [12] 1476 	mov	a,r1
      000521 9E               [12] 1477 	subb	a,r6
      000522 EA               [12] 1478 	mov	a,r2
      000523 9F               [12] 1479 	subb	a,r7
      000524 40 03            [24] 1480 	jc	00136$
      000526 02r05rC7         [24] 1481 	ljmp	00103$
      000529                       1482 00136$:
                                   1483 ;	tcp.c:119: printf("%02X ", data[i]); // Print each byte in hexadecimal format
      000529 C0 06            [24] 1484 	push	ar6
      00052B C0 07            [24] 1485 	push	ar7
      00052D E9               [12] 1486 	mov	a,r1
      00052E 2B               [12] 1487 	add	a, r3
      00052F F8               [12] 1488 	mov	r0,a
      000530 EA               [12] 1489 	mov	a,r2
      000531 3C               [12] 1490 	addc	a, r4
      000532 FE               [12] 1491 	mov	r6,a
      000533 8D 07            [24] 1492 	mov	ar7,r5
      000535 88 82            [24] 1493 	mov	dpl,r0
      000537 8E 83            [24] 1494 	mov	dph,r6
      000539 8F F0            [24] 1495 	mov	b,r7
      00053B 12r00r00         [24] 1496 	lcall	__gptrget
      00053E F8               [12] 1497 	mov	r0,a
      00053F 7F 00            [12] 1498 	mov	r7,#0x00
      000541 C0 07            [24] 1499 	push	ar7
      000543 C0 06            [24] 1500 	push	ar6
      000545 C0 05            [24] 1501 	push	ar5
      000547 C0 04            [24] 1502 	push	ar4
      000549 C0 03            [24] 1503 	push	ar3
      00054B C0 02            [24] 1504 	push	ar2
      00054D C0 01            [24] 1505 	push	ar1
      00054F C0 00            [24] 1506 	push	ar0
      000551 C0 07            [24] 1507 	push	ar7
      000553 74r16            [12] 1508 	mov	a,#___str_1
      000555 C0 E0            [24] 1509 	push	acc
      000557 74s00            [12] 1510 	mov	a,#(___str_1 >> 8)
      000559 C0 E0            [24] 1511 	push	acc
      00055B 74 80            [12] 1512 	mov	a,#0x80
      00055D C0 E0            [24] 1513 	push	acc
      00055F 12r00r00         [24] 1514 	lcall	_printf
      000562 E5 81            [12] 1515 	mov	a,sp
      000564 24 FB            [12] 1516 	add	a,#0xfb
      000566 F5 81            [12] 1517 	mov	sp,a
      000568 D0 01            [24] 1518 	pop	ar1
      00056A D0 02            [24] 1519 	pop	ar2
      00056C D0 03            [24] 1520 	pop	ar3
      00056E D0 04            [24] 1521 	pop	ar4
      000570 D0 05            [24] 1522 	pop	ar5
      000572 D0 06            [24] 1523 	pop	ar6
      000574 D0 07            [24] 1524 	pop	ar7
                                   1525 ;	tcp.c:120: if ((i + 1) % 16 == 0) {
      000576 89 06            [24] 1526 	mov	ar6,r1
      000578 8A 07            [24] 1527 	mov	ar7,r2
      00057A 0E               [12] 1528 	inc	r6
      00057B BE 00 01         [24] 1529 	cjne	r6,#0x00,00137$
      00057E 0F               [12] 1530 	inc	r7
      00057F                       1531 00137$:
      00057F EE               [12] 1532 	mov	a,r6
      000580 54 0F            [12] 1533 	anl	a,#0x0f
      000582 60 06            [24] 1534 	jz	00139$
      000584 D0 07            [24] 1535 	pop	ar7
      000586 D0 06            [24] 1536 	pop	ar6
      000588 80 35            [24] 1537 	sjmp	00108$
      00058A                       1538 00139$:
      00058A D0 07            [24] 1539 	pop	ar7
      00058C D0 06            [24] 1540 	pop	ar6
                                   1541 ;	tcp.c:121: printf("\n"); // Newline after every 16 bytes for readability
      00058E C0 07            [24] 1542 	push	ar7
      000590 C0 06            [24] 1543 	push	ar6
      000592 C0 05            [24] 1544 	push	ar5
      000594 C0 04            [24] 1545 	push	ar4
      000596 C0 03            [24] 1546 	push	ar3
      000598 C0 02            [24] 1547 	push	ar2
      00059A C0 01            [24] 1548 	push	ar1
      00059C 74r1C            [12] 1549 	mov	a,#___str_2
      00059E C0 E0            [24] 1550 	push	acc
      0005A0 74s00            [12] 1551 	mov	a,#(___str_2 >> 8)
      0005A2 C0 E0            [24] 1552 	push	acc
      0005A4 74 80            [12] 1553 	mov	a,#0x80
      0005A6 C0 E0            [24] 1554 	push	acc
      0005A8 12r00r00         [24] 1555 	lcall	_printf
      0005AB 15 81            [12] 1556 	dec	sp
      0005AD 15 81            [12] 1557 	dec	sp
      0005AF 15 81            [12] 1558 	dec	sp
      0005B1 D0 01            [24] 1559 	pop	ar1
      0005B3 D0 02            [24] 1560 	pop	ar2
      0005B5 D0 03            [24] 1561 	pop	ar3
      0005B7 D0 04            [24] 1562 	pop	ar4
      0005B9 D0 05            [24] 1563 	pop	ar5
      0005BB D0 06            [24] 1564 	pop	ar6
      0005BD D0 07            [24] 1565 	pop	ar7
      0005BF                       1566 00108$:
                                   1567 ;	tcp.c:118: for (uint16_t i = 0; i < size; i++) {
      0005BF 09               [12] 1568 	inc	r1
      0005C0 B9 00 01         [24] 1569 	cjne	r1,#0x00,00140$
      0005C3 0A               [12] 1570 	inc	r2
      0005C4                       1571 00140$:
      0005C4 02r05r1F         [24] 1572 	ljmp	00107$
      0005C7                       1573 00103$:
                                   1574 ;	tcp.c:124: if (size % 16 != 0) {
      0005C7 EE               [12] 1575 	mov	a,r6
      0005C8 54 0F            [12] 1576 	anl	a,#0x0f
      0005CA 60 15            [24] 1577 	jz	00109$
                                   1578 ;	tcp.c:125: printf("\n"); // Final newline if not already printed
      0005CC 74r1C            [12] 1579 	mov	a,#___str_2
      0005CE C0 E0            [24] 1580 	push	acc
      0005D0 74s00            [12] 1581 	mov	a,#(___str_2 >> 8)
      0005D2 C0 E0            [24] 1582 	push	acc
      0005D4 74 80            [12] 1583 	mov	a,#0x80
      0005D6 C0 E0            [24] 1584 	push	acc
      0005D8 12r00r00         [24] 1585 	lcall	_printf
      0005DB 15 81            [12] 1586 	dec	sp
      0005DD 15 81            [12] 1587 	dec	sp
      0005DF 15 81            [12] 1588 	dec	sp
      0005E1                       1589 00109$:
                                   1590 ;	tcp.c:127: }
      0005E1 22               [24] 1591 	ret
                                   1592 ;------------------------------------------------------------
                                   1593 ;Allocation info for local variables in function 'process_packet_from_buffer'
                                   1594 ;------------------------------------------------------------
                                   1595 ;sloc0                     Allocated with name '_process_packet_from_buffer_sloc0_1_0'
                                   1596 ;start_address             Allocated with name '_process_packet_from_buffer_start_address_10000_136'
                                   1597 ;next_packet_start         Allocated with name '_process_packet_from_buffer_next_packet_start_10001_139'
                                   1598 ;next_start_address        Allocated with name '_process_packet_from_buffer_next_start_address_10001_139'
                                   1599 ;packet_size               Allocated with name '_process_packet_from_buffer_packet_size_10001_139'
                                   1600 ;response_size             Allocated with name '_process_packet_from_buffer_response_size_10001_139'
                                   1601 ;packet_data               Allocated with name '_process_packet_from_buffer_packet_data_10002_142'
                                   1602 ;response                  Allocated with name '_process_packet_from_buffer_response_10003_145'
                                   1603 ;------------------------------------------------------------
                                   1604 ;	tcp.c:130: void process_packet_from_buffer(uint16_t start_address) {
                                   1605 ;	-----------------------------------------
                                   1606 ;	 function process_packet_from_buffer
                                   1607 ;	-----------------------------------------
      0005E2                       1608 _process_packet_from_buffer:
      0005E2 AF 83            [24] 1609 	mov	r7,dph
      0005E4 E5 82            [12] 1610 	mov	a,dpl
      0005E6 90r05rF5         [24] 1611 	mov	dptr,#_process_packet_from_buffer_start_address_10000_136
      0005E9 F0               [24] 1612 	movx	@dptr,a
      0005EA EF               [12] 1613 	mov	a,r7
      0005EB A3               [24] 1614 	inc	dptr
      0005EC F0               [24] 1615 	movx	@dptr,a
                                   1616 ;	tcp.c:132: if (start_address > 0x1FFF) {
      0005ED 90r05rF5         [24] 1617 	mov	dptr,#_process_packet_from_buffer_start_address_10000_136
      0005F0 E0               [24] 1618 	movx	a,@dptr
      0005F1 FE               [12] 1619 	mov	r6,a
      0005F2 A3               [24] 1620 	inc	dptr
      0005F3 E0               [24] 1621 	movx	a,@dptr
      0005F4 FF               [12] 1622 	mov	r7,a
      0005F5 8E 04            [24] 1623 	mov	ar4,r6
      0005F7 8F 05            [24] 1624 	mov	ar5,r7
      0005F9 C3               [12] 1625 	clr	c
      0005FA 74 FF            [12] 1626 	mov	a,#0xff
      0005FC 9C               [12] 1627 	subb	a,r4
      0005FD 74 1F            [12] 1628 	mov	a,#0x1f
      0005FF 9D               [12] 1629 	subb	a,r5
      000600 50 1A            [24] 1630 	jnc	00102$
                                   1631 ;	tcp.c:133: printf("\n\rInvalid start address: %04X\n\r", start_address);
      000602 C0 06            [24] 1632 	push	ar6
      000604 C0 07            [24] 1633 	push	ar7
      000606 74r1E            [12] 1634 	mov	a,#___str_3
      000608 C0 E0            [24] 1635 	push	acc
      00060A 74s00            [12] 1636 	mov	a,#(___str_3 >> 8)
      00060C C0 E0            [24] 1637 	push	acc
      00060E 74 80            [12] 1638 	mov	a,#0x80
      000610 C0 E0            [24] 1639 	push	acc
      000612 12r00r00         [24] 1640 	lcall	_printf
      000615 E5 81            [12] 1641 	mov	a,sp
      000617 24 FB            [12] 1642 	add	a,#0xfb
      000619 F5 81            [12] 1643 	mov	sp,a
                                   1644 ;	tcp.c:134: return;
      00061B 22               [24] 1645 	ret
      00061C                       1646 00102$:
                                   1647 ;	tcp.c:143: if (spi_buffer_read(2, start_address, next_packet_start) != 2) {
      00061C 90r00r00         [24] 1648 	mov	dptr,#_spi_buffer_read_PARM_2
      00061F EE               [12] 1649 	mov	a,r6
      000620 F0               [24] 1650 	movx	@dptr,a
      000621 EF               [12] 1651 	mov	a,r7
      000622 A3               [24] 1652 	inc	dptr
      000623 F0               [24] 1653 	movx	@dptr,a
      000624 90r00r00         [24] 1654 	mov	dptr,#_spi_buffer_read_PARM_3
      000627 74rF7            [12] 1655 	mov	a,#_process_packet_from_buffer_next_packet_start_10001_139
      000629 F0               [24] 1656 	movx	@dptr,a
      00062A 74s05            [12] 1657 	mov	a,#(_process_packet_from_buffer_next_packet_start_10001_139 >> 8)
      00062C A3               [24] 1658 	inc	dptr
      00062D F0               [24] 1659 	movx	@dptr,a
      00062E E4               [12] 1660 	clr	a
      00062F A3               [24] 1661 	inc	dptr
      000630 F0               [24] 1662 	movx	@dptr,a
      000631 90 00 02         [24] 1663 	mov	dptr,#0x0002
      000634 C0 07            [24] 1664 	push	ar7
      000636 C0 06            [24] 1665 	push	ar6
      000638 C0 05            [24] 1666 	push	ar5
      00063A C0 04            [24] 1667 	push	ar4
      00063C 12r00r00         [24] 1668 	lcall	_spi_buffer_read
      00063F AA 82            [24] 1669 	mov	r2, dpl
      000641 AB 83            [24] 1670 	mov	r3, dph
      000643 D0 04            [24] 1671 	pop	ar4
      000645 D0 05            [24] 1672 	pop	ar5
      000647 D0 06            [24] 1673 	pop	ar6
      000649 D0 07            [24] 1674 	pop	ar7
      00064B BA 02 05         [24] 1675 	cjne	r2,#0x02,00153$
      00064E BB 00 02         [24] 1676 	cjne	r3,#0x00,00153$
      000651 80 16            [24] 1677 	sjmp	00104$
      000653                       1678 00153$:
                                   1679 ;	tcp.c:144: printf("\n\rFailed to read packet start address bytes\n\r");
      000653 74r3E            [12] 1680 	mov	a,#___str_4
      000655 C0 E0            [24] 1681 	push	acc
      000657 74s00            [12] 1682 	mov	a,#(___str_4 >> 8)
      000659 C0 E0            [24] 1683 	push	acc
      00065B 74 80            [12] 1684 	mov	a,#0x80
      00065D C0 E0            [24] 1685 	push	acc
      00065F 12r00r00         [24] 1686 	lcall	_printf
      000662 15 81            [12] 1687 	dec	sp
      000664 15 81            [12] 1688 	dec	sp
      000666 15 81            [12] 1689 	dec	sp
                                   1690 ;	tcp.c:145: return;
      000668 22               [24] 1691 	ret
      000669                       1692 00104$:
                                   1693 ;	tcp.c:149: next_start_address = ((uint16_t)next_packet_start[1] << 8) | next_packet_start[0];
      000669 90r05rF8         [24] 1694 	mov	dptr,#(_process_packet_from_buffer_next_packet_start_10001_139 + 0x0001)
      00066C E0               [24] 1695 	movx	a,@dptr
      00066D FA               [12] 1696 	mov	r2,a
      00066E 7B 00            [12] 1697 	mov	r3,#0x00
      000670 90r05rF7         [24] 1698 	mov	dptr,#_process_packet_from_buffer_next_packet_start_10001_139
      000673 E0               [24] 1699 	movx	a,@dptr
      000674 79 00            [12] 1700 	mov	r1,#0x00
      000676 42 03            [12] 1701 	orl	ar3,a
      000678 E9               [12] 1702 	mov	a,r1
      000679 42 02            [12] 1703 	orl	ar2,a
                                   1704 ;	tcp.c:152: if (next_start_address < start_address) {
      00067B C3               [12] 1705 	clr	c
      00067C EB               [12] 1706 	mov	a,r3
      00067D 9E               [12] 1707 	subb	a,r6
      00067E EA               [12] 1708 	mov	a,r2
      00067F 9F               [12] 1709 	subb	a,r7
      000680 50 1A            [24] 1710 	jnc	00106$
                                   1711 ;	tcp.c:153: printf("\n\rInvalid next start address: 0x%04X\n\r", next_start_address);
      000682 C0 03            [24] 1712 	push	ar3
      000684 C0 02            [24] 1713 	push	ar2
      000686 74r6C            [12] 1714 	mov	a,#___str_5
      000688 C0 E0            [24] 1715 	push	acc
      00068A 74s00            [12] 1716 	mov	a,#(___str_5 >> 8)
      00068C C0 E0            [24] 1717 	push	acc
      00068E 74 80            [12] 1718 	mov	a,#0x80
      000690 C0 E0            [24] 1719 	push	acc
      000692 12r00r00         [24] 1720 	lcall	_printf
      000695 E5 81            [12] 1721 	mov	a,sp
      000697 24 FB            [12] 1722 	add	a,#0xfb
      000699 F5 81            [12] 1723 	mov	sp,a
                                   1724 ;	tcp.c:154: return;
      00069B 22               [24] 1725 	ret
      00069C                       1726 00106$:
                                   1727 ;	tcp.c:156: packet_size = next_start_address - (start_address+6);
      00069C 74 06            [12] 1728 	mov	a,#0x06
      00069E 2C               [12] 1729 	add	a, r4
      00069F FE               [12] 1730 	mov	r6,a
      0006A0 E4               [12] 1731 	clr	a
      0006A1 3D               [12] 1732 	addc	a, r5
      0006A2 FF               [12] 1733 	mov	r7,a
      0006A3 EB               [12] 1734 	mov	a,r3
      0006A4 C3               [12] 1735 	clr	c
      0006A5 9E               [12] 1736 	subb	a,r6
      0006A6 FE               [12] 1737 	mov	r6,a
      0006A7 EA               [12] 1738 	mov	a,r2
      0006A8 9F               [12] 1739 	subb	a,r7
      0006A9 FF               [12] 1740 	mov	r7,a
                                   1741 ;	tcp.c:159: uint8_t *packet_data = (uint8_t *)malloc(packet_size);
      0006AA 8E 00            [24] 1742 	mov	ar0,r6
      0006AC 8F 01            [24] 1743 	mov	ar1,r7
      0006AE 88 82            [24] 1744 	mov	dpl, r0
      0006B0 89 83            [24] 1745 	mov	dph, r1
      0006B2 C0 07            [24] 1746 	push	ar7
      0006B4 C0 06            [24] 1747 	push	ar6
      0006B6 C0 05            [24] 1748 	push	ar5
      0006B8 C0 04            [24] 1749 	push	ar4
      0006BA C0 03            [24] 1750 	push	ar3
      0006BC C0 02            [24] 1751 	push	ar2
      0006BE 12r00r00         [24] 1752 	lcall	_malloc
      0006C1 A8 82            [24] 1753 	mov	r0, dpl
      0006C3 A9 83            [24] 1754 	mov	r1, dph
      0006C5 D0 02            [24] 1755 	pop	ar2
      0006C7 D0 03            [24] 1756 	pop	ar3
      0006C9 D0 04            [24] 1757 	pop	ar4
      0006CB D0 05            [24] 1758 	pop	ar5
      0006CD D0 06            [24] 1759 	pop	ar6
      0006CF D0 07            [24] 1760 	pop	ar7
      0006D1 88*03            [24] 1761 	mov	_process_packet_from_buffer_sloc0_1_0,r0
      0006D3 89*04            [24] 1762 	mov	(_process_packet_from_buffer_sloc0_1_0 + 1),r1
      0006D5 75*05 00         [24] 1763 	mov	(_process_packet_from_buffer_sloc0_1_0 + 2),#0x00
                                   1764 ;	tcp.c:160: if (packet_data == NULL) {
      0006D8 E5*03            [12] 1765 	mov	a,_process_packet_from_buffer_sloc0_1_0
      0006DA 45*04            [12] 1766 	orl	a,(_process_packet_from_buffer_sloc0_1_0 + 1)
      0006DC 70 1A            [24] 1767 	jnz	00108$
                                   1768 ;	tcp.c:161: printf("\n\rMemory allocation failed for packet size: %d\n\r", packet_size);
      0006DE C0 06            [24] 1769 	push	ar6
      0006E0 C0 07            [24] 1770 	push	ar7
      0006E2 74r93            [12] 1771 	mov	a,#___str_6
      0006E4 C0 E0            [24] 1772 	push	acc
      0006E6 74s00            [12] 1773 	mov	a,#(___str_6 >> 8)
      0006E8 C0 E0            [24] 1774 	push	acc
      0006EA 74 80            [12] 1775 	mov	a,#0x80
      0006EC C0 E0            [24] 1776 	push	acc
      0006EE 12r00r00         [24] 1777 	lcall	_printf
      0006F1 E5 81            [12] 1778 	mov	a,sp
      0006F3 24 FB            [12] 1779 	add	a,#0xfb
      0006F5 F5 81            [12] 1780 	mov	sp,a
                                   1781 ;	tcp.c:162: return;
      0006F7 22               [24] 1782 	ret
      0006F8                       1783 00108$:
                                   1784 ;	tcp.c:166: if (spi_buffer_read(packet_size, start_address+6, packet_data) != packet_size) {
      0006F8 8E 00            [24] 1785 	mov	ar0,r6
      0006FA 8F 01            [24] 1786 	mov	ar1,r7
      0006FC 74 06            [12] 1787 	mov	a,#0x06
      0006FE 2C               [12] 1788 	add	a, r4
      0006FF FC               [12] 1789 	mov	r4,a
      000700 E4               [12] 1790 	clr	a
      000701 3D               [12] 1791 	addc	a, r5
      000702 FD               [12] 1792 	mov	r5,a
      000703 90r00r00         [24] 1793 	mov	dptr,#_spi_buffer_read_PARM_2
      000706 EC               [12] 1794 	mov	a,r4
      000707 F0               [24] 1795 	movx	@dptr,a
      000708 ED               [12] 1796 	mov	a,r5
      000709 A3               [24] 1797 	inc	dptr
      00070A F0               [24] 1798 	movx	@dptr,a
      00070B 90r00r00         [24] 1799 	mov	dptr,#_spi_buffer_read_PARM_3
      00070E E5*03            [12] 1800 	mov	a,_process_packet_from_buffer_sloc0_1_0
      000710 F0               [24] 1801 	movx	@dptr,a
      000711 E5*04            [12] 1802 	mov	a,(_process_packet_from_buffer_sloc0_1_0 + 1)
      000713 A3               [24] 1803 	inc	dptr
      000714 F0               [24] 1804 	movx	@dptr,a
      000715 E5*05            [12] 1805 	mov	a,(_process_packet_from_buffer_sloc0_1_0 + 2)
      000717 A3               [24] 1806 	inc	dptr
      000718 F0               [24] 1807 	movx	@dptr,a
      000719 88 82            [24] 1808 	mov	dpl, r0
      00071B 89 83            [24] 1809 	mov	dph, r1
      00071D C0 07            [24] 1810 	push	ar7
      00071F C0 06            [24] 1811 	push	ar6
      000721 C0 03            [24] 1812 	push	ar3
      000723 C0 02            [24] 1813 	push	ar2
      000725 12r00r00         [24] 1814 	lcall	_spi_buffer_read
      000728 AC 82            [24] 1815 	mov	r4, dpl
      00072A AD 83            [24] 1816 	mov	r5, dph
      00072C D0 02            [24] 1817 	pop	ar2
      00072E D0 03            [24] 1818 	pop	ar3
      000730 D0 06            [24] 1819 	pop	ar6
      000732 D0 07            [24] 1820 	pop	ar7
      000734 EC               [12] 1821 	mov	a,r4
      000735 B5 06 06         [24] 1822 	cjne	a,ar6,00156$
      000738 ED               [12] 1823 	mov	a,r5
      000739 B5 07 02         [24] 1824 	cjne	a,ar7,00156$
      00073C 80 24            [24] 1825 	sjmp	00110$
      00073E                       1826 00156$:
                                   1827 ;	tcp.c:167: printf("\n\rFailed to read packet data\n\r");
      00073E 74rC4            [12] 1828 	mov	a,#___str_7
      000740 C0 E0            [24] 1829 	push	acc
      000742 74s00            [12] 1830 	mov	a,#(___str_7 >> 8)
      000744 C0 E0            [24] 1831 	push	acc
      000746 74 80            [12] 1832 	mov	a,#0x80
      000748 C0 E0            [24] 1833 	push	acc
      00074A 12r00r00         [24] 1834 	lcall	_printf
      00074D 15 81            [12] 1835 	dec	sp
      00074F 15 81            [12] 1836 	dec	sp
      000751 15 81            [12] 1837 	dec	sp
                                   1838 ;	tcp.c:168: free(packet_data);
      000753 AC*03            [24] 1839 	mov	r4,_process_packet_from_buffer_sloc0_1_0
      000755 A9*04            [24] 1840 	mov	r1,(_process_packet_from_buffer_sloc0_1_0 + 1)
      000757 7D 00            [12] 1841 	mov	r5,#0x00
      000759 8C 82            [24] 1842 	mov	dpl, r4
      00075B 89 83            [24] 1843 	mov	dph, r1
      00075D 8D F0            [24] 1844 	mov	b, r5
                                   1845 ;	tcp.c:169: return;
      00075F 02r00r00         [24] 1846 	ljmp	_free
      000762                       1847 00110$:
                                   1848 ;	tcp.c:173: uint8_t *response = process_tcp_packet(packet_data, packet_size, &response_size);
      000762 90r00r0B         [24] 1849 	mov	dptr,#_process_tcp_packet_PARM_2
      000765 EE               [12] 1850 	mov	a,r6
      000766 F0               [24] 1851 	movx	@dptr,a
      000767 EF               [12] 1852 	mov	a,r7
      000768 A3               [24] 1853 	inc	dptr
      000769 F0               [24] 1854 	movx	@dptr,a
      00076A 90r00r0D         [24] 1855 	mov	dptr,#_process_tcp_packet_PARM_3
      00076D 74rF9            [12] 1856 	mov	a,#_process_packet_from_buffer_response_size_10001_139
      00076F F0               [24] 1857 	movx	@dptr,a
      000770 74s05            [12] 1858 	mov	a,#(_process_packet_from_buffer_response_size_10001_139 >> 8)
      000772 A3               [24] 1859 	inc	dptr
      000773 F0               [24] 1860 	movx	@dptr,a
      000774 E4               [12] 1861 	clr	a
      000775 A3               [24] 1862 	inc	dptr
      000776 F0               [24] 1863 	movx	@dptr,a
      000777 85*03 82         [24] 1864 	mov	dpl, _process_packet_from_buffer_sloc0_1_0
      00077A 85*04 83         [24] 1865 	mov	dph, (_process_packet_from_buffer_sloc0_1_0 + 1)
      00077D 85*05 F0         [24] 1866 	mov	b, (_process_packet_from_buffer_sloc0_1_0 + 2)
      000780 C0 07            [24] 1867 	push	ar7
      000782 C0 06            [24] 1868 	push	ar6
      000784 C0 03            [24] 1869 	push	ar3
      000786 C0 02            [24] 1870 	push	ar2
      000788 12r01r83         [24] 1871 	lcall	_process_tcp_packet
      00078B A9 82            [24] 1872 	mov	r1, dpl
      00078D AC 83            [24] 1873 	mov	r4, dph
      00078F AD F0            [24] 1874 	mov	r5, b
      000791 D0 02            [24] 1875 	pop	ar2
      000793 D0 03            [24] 1876 	pop	ar3
      000795 D0 06            [24] 1877 	pop	ar6
      000797 D0 07            [24] 1878 	pop	ar7
                                   1879 ;	tcp.c:176: if (response != NULL) {
      000799 E9               [12] 1880 	mov	a,r1
      00079A 4C               [12] 1881 	orl	a,r4
      00079B 70 03            [24] 1882 	jnz	00157$
      00079D 02r08r56         [24] 1883 	ljmp	00112$
      0007A0                       1884 00157$:
                                   1885 ;	tcp.c:177: printf("\nProcessed response data:\n");
      0007A0 C0 03            [24] 1886 	push	ar3
      0007A2 C0 02            [24] 1887 	push	ar2
      0007A4 C0 07            [24] 1888 	push	ar7
      0007A6 C0 06            [24] 1889 	push	ar6
      0007A8 C0 05            [24] 1890 	push	ar5
      0007AA C0 04            [24] 1891 	push	ar4
      0007AC C0 03            [24] 1892 	push	ar3
      0007AE C0 02            [24] 1893 	push	ar2
      0007B0 C0 01            [24] 1894 	push	ar1
      0007B2 74rE3            [12] 1895 	mov	a,#___str_8
      0007B4 C0 E0            [24] 1896 	push	acc
      0007B6 74s00            [12] 1897 	mov	a,#(___str_8 >> 8)
      0007B8 C0 E0            [24] 1898 	push	acc
      0007BA 74 80            [12] 1899 	mov	a,#0x80
      0007BC C0 E0            [24] 1900 	push	acc
      0007BE 12r00r00         [24] 1901 	lcall	_printf
      0007C1 15 81            [12] 1902 	dec	sp
      0007C3 15 81            [12] 1903 	dec	sp
      0007C5 15 81            [12] 1904 	dec	sp
      0007C7 D0 01            [24] 1905 	pop	ar1
      0007C9 D0 02            [24] 1906 	pop	ar2
      0007CB D0 03            [24] 1907 	pop	ar3
      0007CD D0 04            [24] 1908 	pop	ar4
      0007CF D0 05            [24] 1909 	pop	ar5
      0007D1 D0 06            [24] 1910 	pop	ar6
      0007D3 D0 07            [24] 1911 	pop	ar7
                                   1912 ;	tcp.c:178: print_hexdump(response, response_size);
      0007D5 90r05rF9         [24] 1913 	mov	dptr,#_process_packet_from_buffer_response_size_10001_139
      0007D8 E0               [24] 1914 	movx	a,@dptr
      0007D9 F8               [12] 1915 	mov	r0,a
      0007DA A3               [24] 1916 	inc	dptr
      0007DB E0               [24] 1917 	movx	a,@dptr
      0007DC FB               [12] 1918 	mov	r3,a
      0007DD 90r05rF0         [24] 1919 	mov	dptr,#_print_hexdump_PARM_2
      0007E0 E8               [12] 1920 	mov	a,r0
      0007E1 F0               [24] 1921 	movx	@dptr,a
      0007E2 EB               [12] 1922 	mov	a,r3
      0007E3 A3               [24] 1923 	inc	dptr
      0007E4 F0               [24] 1924 	movx	@dptr,a
      0007E5 89 82            [24] 1925 	mov	dpl, r1
      0007E7 8C 83            [24] 1926 	mov	dph, r4
      0007E9 8D F0            [24] 1927 	mov	b, r5
      0007EB C0 07            [24] 1928 	push	ar7
      0007ED C0 06            [24] 1929 	push	ar6
      0007EF C0 05            [24] 1930 	push	ar5
      0007F1 C0 04            [24] 1931 	push	ar4
      0007F3 C0 03            [24] 1932 	push	ar3
      0007F5 C0 02            [24] 1933 	push	ar2
      0007F7 C0 01            [24] 1934 	push	ar1
      0007F9 12r04rD7         [24] 1935 	lcall	_print_hexdump
      0007FC D0 01            [24] 1936 	pop	ar1
      0007FE D0 02            [24] 1937 	pop	ar2
      000800 D0 03            [24] 1938 	pop	ar3
      000802 D0 04            [24] 1939 	pop	ar4
      000804 D0 05            [24] 1940 	pop	ar5
      000806 D0 06            [24] 1941 	pop	ar6
      000808 D0 07            [24] 1942 	pop	ar7
                                   1943 ;	tcp.c:179: transmit_tcp_packet(response, response_size);
      00080A 90r05rF9         [24] 1944 	mov	dptr,#_process_packet_from_buffer_response_size_10001_139
      00080D E0               [24] 1945 	movx	a,@dptr
      00080E FA               [12] 1946 	mov	r2,a
      00080F A3               [24] 1947 	inc	dptr
      000810 E0               [24] 1948 	movx	a,@dptr
      000811 FB               [12] 1949 	mov	r3,a
      000812 90r05rFB         [24] 1950 	mov	dptr,#_transmit_tcp_packet_PARM_2
      000815 EA               [12] 1951 	mov	a,r2
      000816 F0               [24] 1952 	movx	@dptr,a
      000817 EB               [12] 1953 	mov	a,r3
      000818 A3               [24] 1954 	inc	dptr
      000819 F0               [24] 1955 	movx	@dptr,a
      00081A 89 82            [24] 1956 	mov	dpl, r1
      00081C 8C 83            [24] 1957 	mov	dph, r4
      00081E 8D F0            [24] 1958 	mov	b, r5
      000820 C0 07            [24] 1959 	push	ar7
      000822 C0 06            [24] 1960 	push	ar6
      000824 C0 05            [24] 1961 	push	ar5
      000826 C0 04            [24] 1962 	push	ar4
      000828 C0 03            [24] 1963 	push	ar3
      00082A C0 02            [24] 1964 	push	ar2
      00082C C0 01            [24] 1965 	push	ar1
      00082E 12r08rC7         [24] 1966 	lcall	_transmit_tcp_packet
      000831 D0 01            [24] 1967 	pop	ar1
      000833 D0 02            [24] 1968 	pop	ar2
      000835 D0 03            [24] 1969 	pop	ar3
      000837 D0 04            [24] 1970 	pop	ar4
      000839 D0 05            [24] 1971 	pop	ar5
                                   1972 ;	tcp.c:180: free(response); // Free response memory if allocated dynamically
      00083B 89 82            [24] 1973 	mov	dpl, r1
      00083D 8C 83            [24] 1974 	mov	dph, r4
      00083F 8D F0            [24] 1975 	mov	b, r5
      000841 C0 03            [24] 1976 	push	ar3
      000843 C0 02            [24] 1977 	push	ar2
      000845 12r00r00         [24] 1978 	lcall	_free
      000848 D0 02            [24] 1979 	pop	ar2
      00084A D0 03            [24] 1980 	pop	ar3
      00084C D0 06            [24] 1981 	pop	ar6
      00084E D0 07            [24] 1982 	pop	ar7
      000850 D0 02            [24] 1983 	pop	ar2
      000852 D0 03            [24] 1984 	pop	ar3
      000854 80 25            [24] 1985 	sjmp	00113$
      000856                       1986 00112$:
                                   1987 ;	tcp.c:182: printf("\nNo response generated by TCP packet processing.\n");
      000856 C0 07            [24] 1988 	push	ar7
      000858 C0 06            [24] 1989 	push	ar6
      00085A C0 03            [24] 1990 	push	ar3
      00085C C0 02            [24] 1991 	push	ar2
      00085E 74rFE            [12] 1992 	mov	a,#___str_9
      000860 C0 E0            [24] 1993 	push	acc
      000862 74s00            [12] 1994 	mov	a,#(___str_9 >> 8)
      000864 C0 E0            [24] 1995 	push	acc
      000866 74 80            [12] 1996 	mov	a,#0x80
      000868 C0 E0            [24] 1997 	push	acc
      00086A 12r00r00         [24] 1998 	lcall	_printf
      00086D 15 81            [12] 1999 	dec	sp
      00086F 15 81            [12] 2000 	dec	sp
      000871 15 81            [12] 2001 	dec	sp
      000873 D0 02            [24] 2002 	pop	ar2
      000875 D0 03            [24] 2003 	pop	ar3
      000877 D0 06            [24] 2004 	pop	ar6
      000879 D0 07            [24] 2005 	pop	ar7
      00087B                       2006 00113$:
                                   2007 ;	tcp.c:186: free(packet_data);
      00087B AC*03            [24] 2008 	mov	r4,_process_packet_from_buffer_sloc0_1_0
      00087D A9*04            [24] 2009 	mov	r1,(_process_packet_from_buffer_sloc0_1_0 + 1)
      00087F 7D 00            [12] 2010 	mov	r5,#0x00
      000881 8C 82            [24] 2011 	mov	dpl, r4
      000883 89 83            [24] 2012 	mov	dph, r1
      000885 8D F0            [24] 2013 	mov	b, r5
      000887 C0 07            [24] 2014 	push	ar7
      000889 C0 06            [24] 2015 	push	ar6
      00088B C0 03            [24] 2016 	push	ar3
      00088D C0 02            [24] 2017 	push	ar2
      00088F 12r00r00         [24] 2018 	lcall	_free
      000892 D0 02            [24] 2019 	pop	ar2
      000894 D0 03            [24] 2020 	pop	ar3
      000896 D0 06            [24] 2021 	pop	ar6
      000898 D0 07            [24] 2022 	pop	ar7
                                   2023 ;	tcp.c:189: packet_size, start_address, next_start_address - 1);
      00089A 1B               [12] 2024 	dec	r3
      00089B BB FF 01         [24] 2025 	cjne	r3,#0xff,00158$
      00089E 1A               [12] 2026 	dec	r2
      00089F                       2027 00158$:
                                   2028 ;	tcp.c:188: printf("\n\rSuccessfully processed packet of size %d from 0x%04X to 0x%04X\n\r",
      00089F C0 03            [24] 2029 	push	ar3
      0008A1 C0 02            [24] 2030 	push	ar2
      0008A3 90r05rF5         [24] 2031 	mov	dptr,#_process_packet_from_buffer_start_address_10000_136
      0008A6 E0               [24] 2032 	movx	a,@dptr
      0008A7 C0 E0            [24] 2033 	push	acc
      0008A9 A3               [24] 2034 	inc	dptr
      0008AA E0               [24] 2035 	movx	a,@dptr
      0008AB C0 E0            [24] 2036 	push	acc
      0008AD C0 06            [24] 2037 	push	ar6
      0008AF C0 07            [24] 2038 	push	ar7
      0008B1 74r30            [12] 2039 	mov	a,#___str_10
      0008B3 C0 E0            [24] 2040 	push	acc
      0008B5 74s01            [12] 2041 	mov	a,#(___str_10 >> 8)
      0008B7 C0 E0            [24] 2042 	push	acc
      0008B9 74 80            [12] 2043 	mov	a,#0x80
      0008BB C0 E0            [24] 2044 	push	acc
      0008BD 12r00r00         [24] 2045 	lcall	_printf
      0008C0 E5 81            [12] 2046 	mov	a,sp
      0008C2 24 F7            [12] 2047 	add	a,#0xf7
      0008C4 F5 81            [12] 2048 	mov	sp,a
                                   2049 ;	tcp.c:190: }
      0008C6 22               [24] 2050 	ret
                                   2051 ;------------------------------------------------------------
                                   2052 ;Allocation info for local variables in function 'transmit_tcp_packet'
                                   2053 ;------------------------------------------------------------
                                   2054 ;packet_size               Allocated with name '_transmit_tcp_packet_PARM_2'
                                   2055 ;packet                    Allocated with name '_transmit_tcp_packet_packet_10000_148'
                                   2056 ;start_address             Allocated with name '_transmit_tcp_packet_start_address_10000_149'
                                   2057 ;end_address               Allocated with name '_transmit_tcp_packet_end_address_10001_151'
                                   2058 ;------------------------------------------------------------
                                   2059 ;	tcp.c:193: void transmit_tcp_packet(uint8_t *packet, uint16_t packet_size)
                                   2060 ;	-----------------------------------------
                                   2061 ;	 function transmit_tcp_packet
                                   2062 ;	-----------------------------------------
      0008C7                       2063 _transmit_tcp_packet:
      0008C7 AF F0            [24] 2064 	mov	r7,b
      0008C9 AE 83            [24] 2065 	mov	r6,dph
      0008CB E5 82            [12] 2066 	mov	a,dpl
      0008CD 90r05rFD         [24] 2067 	mov	dptr,#_transmit_tcp_packet_packet_10000_148
      0008D0 F0               [24] 2068 	movx	@dptr,a
      0008D1 EE               [12] 2069 	mov	a,r6
      0008D2 A3               [24] 2070 	inc	dptr
      0008D3 F0               [24] 2071 	movx	@dptr,a
      0008D4 EF               [12] 2072 	mov	a,r7
      0008D5 A3               [24] 2073 	inc	dptr
      0008D6 F0               [24] 2074 	movx	@dptr,a
                                   2075 ;	tcp.c:198: if ((start_address + packet_size - 1) > 0x1FFF) {
      0008D7 90r05rFB         [24] 2076 	mov	dptr,#_transmit_tcp_packet_PARM_2
      0008DA E0               [24] 2077 	movx	a,@dptr
      0008DB FE               [12] 2078 	mov	r6,a
      0008DC A3               [24] 2079 	inc	dptr
      0008DD E0               [24] 2080 	movx	a,@dptr
      0008DE FF               [12] 2081 	mov	r7,a
      0008DF 8E 04            [24] 2082 	mov	ar4,r6
      0008E1 74 0C            [12] 2083 	mov	a,#0x0c
      0008E3 2F               [12] 2084 	add	a, r7
      0008E4 FD               [12] 2085 	mov	r5,a
      0008E5 1C               [12] 2086 	dec	r4
      0008E6 BC FF 01         [24] 2087 	cjne	r4,#0xff,00129$
      0008E9 1D               [12] 2088 	dec	r5
      0008EA                       2089 00129$:
      0008EA C3               [12] 2090 	clr	c
      0008EB 74 FF            [12] 2091 	mov	a,#0xff
      0008ED 9C               [12] 2092 	subb	a,r4
      0008EE 74 1F            [12] 2093 	mov	a,#0x1f
      0008F0 9D               [12] 2094 	subb	a,r5
      0008F1 50 16            [24] 2095 	jnc	00102$
                                   2096 ;	tcp.c:199: printf("\nInvalid Buffer Size. Buffer exceeds valid address range.\n");
      0008F3 74r73            [12] 2097 	mov	a,#___str_11
      0008F5 C0 E0            [24] 2098 	push	acc
      0008F7 74s01            [12] 2099 	mov	a,#(___str_11 >> 8)
      0008F9 C0 E0            [24] 2100 	push	acc
      0008FB 74 80            [12] 2101 	mov	a,#0x80
      0008FD C0 E0            [24] 2102 	push	acc
      0008FF 12r00r00         [24] 2103 	lcall	_printf
      000902 15 81            [12] 2104 	dec	sp
      000904 15 81            [12] 2105 	dec	sp
      000906 15 81            [12] 2106 	dec	sp
                                   2107 ;	tcp.c:200: return;
      000908 22               [24] 2108 	ret
      000909                       2109 00102$:
                                   2110 ;	tcp.c:202: uint16_t end_address = start_address + packet_size - 1;
      000909 8E 04            [24] 2111 	mov	ar4,r6
      00090B 74 0C            [12] 2112 	mov	a,#0x0c
      00090D 2F               [12] 2113 	add	a, r7
      00090E FD               [12] 2114 	mov	r5,a
      00090F 1C               [12] 2115 	dec	r4
      000910 BC FF 01         [24] 2116 	cjne	r4,#0xff,00131$
      000913 1D               [12] 2117 	dec	r5
      000914                       2118 00131$:
                                   2119 ;	tcp.c:203: spi_buffer_write(packet_size, start_address, packet);
      000914 90r05rFD         [24] 2120 	mov	dptr,#_transmit_tcp_packet_packet_10000_148
      000917 E0               [24] 2121 	movx	a,@dptr
      000918 F9               [12] 2122 	mov	r1,a
      000919 A3               [24] 2123 	inc	dptr
      00091A E0               [24] 2124 	movx	a,@dptr
      00091B FA               [12] 2125 	mov	r2,a
      00091C A3               [24] 2126 	inc	dptr
      00091D E0               [24] 2127 	movx	a,@dptr
      00091E FB               [12] 2128 	mov	r3,a
      00091F 90r00r00         [24] 2129 	mov	dptr,#_spi_buffer_write_PARM_2
      000922 E4               [12] 2130 	clr	a
      000923 F0               [24] 2131 	movx	@dptr,a
      000924 74 0C            [12] 2132 	mov	a,#0x0c
      000926 A3               [24] 2133 	inc	dptr
      000927 F0               [24] 2134 	movx	@dptr,a
      000928 90r00r00         [24] 2135 	mov	dptr,#_spi_buffer_write_PARM_3
      00092B E9               [12] 2136 	mov	a,r1
      00092C F0               [24] 2137 	movx	@dptr,a
      00092D EA               [12] 2138 	mov	a,r2
      00092E A3               [24] 2139 	inc	dptr
      00092F F0               [24] 2140 	movx	@dptr,a
      000930 EB               [12] 2141 	mov	a,r3
      000931 A3               [24] 2142 	inc	dptr
      000932 F0               [24] 2143 	movx	@dptr,a
      000933 8E 82            [24] 2144 	mov	dpl, r6
      000935 8F 83            [24] 2145 	mov	dph, r7
      000937 C0 05            [24] 2146 	push	ar5
      000939 C0 04            [24] 2147 	push	ar4
      00093B 12r00r00         [24] 2148 	lcall	_spi_buffer_write
      00093E D0 04            [24] 2149 	pop	ar4
      000940 D0 05            [24] 2150 	pop	ar5
                                   2151 ;	tcp.c:206: enc28j60_set_transmit_pointers(start_address, end_address);
      000942 90r00r00         [24] 2152 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      000945 EC               [12] 2153 	mov	a,r4
      000946 F0               [24] 2154 	movx	@dptr,a
      000947 ED               [12] 2155 	mov	a,r5
      000948 A3               [24] 2156 	inc	dptr
      000949 F0               [24] 2157 	movx	@dptr,a
      00094A 90 0C 00         [24] 2158 	mov	dptr,#0x0c00
      00094D 12r00r00         [24] 2159 	lcall	_enc28j60_set_transmit_pointers
                                   2160 ;	tcp.c:209: enc28j60_start_transmission();
      000950 12r00r00         [24] 2161 	lcall	_enc28j60_start_transmission
                                   2162 ;	tcp.c:212: if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
      000953 90 01 F4         [24] 2163 	mov	dptr,#0x01f4
      000956 12r00r00         [24] 2164 	lcall	_wait_for_transmission_complete
      000959 E5 82            [12] 2165 	mov	a, dpl
      00095B 60 38            [24] 2166 	jz	00107$
                                   2167 ;	tcp.c:214: if (enc28j60_transmission_successful()) {
      00095D 12r00r00         [24] 2168 	lcall	_enc28j60_transmission_successful
      000960 E5 82            [12] 2169 	mov	a, dpl
      000962 85 83 F0         [24] 2170 	mov	b, dph
      000965 45 F0            [12] 2171 	orl	a,b
      000967 60 16            [24] 2172 	jz	00104$
                                   2173 ;	tcp.c:215: printf("TCP request sent successfully.\n\r");
      000969 74rAE            [12] 2174 	mov	a,#___str_12
      00096B C0 E0            [24] 2175 	push	acc
      00096D 74s01            [12] 2176 	mov	a,#(___str_12 >> 8)
      00096F C0 E0            [24] 2177 	push	acc
      000971 74 80            [12] 2178 	mov	a,#0x80
      000973 C0 E0            [24] 2179 	push	acc
      000975 12r00r00         [24] 2180 	lcall	_printf
      000978 15 81            [12] 2181 	dec	sp
      00097A 15 81            [12] 2182 	dec	sp
      00097C 15 81            [12] 2183 	dec	sp
      00097E 22               [24] 2184 	ret
      00097F                       2185 00104$:
                                   2186 ;	tcp.c:217: printf("TCP transmission failed. Check error flags.\n\r");
      00097F 74rCF            [12] 2187 	mov	a,#___str_13
      000981 C0 E0            [24] 2188 	push	acc
      000983 74s01            [12] 2189 	mov	a,#(___str_13 >> 8)
      000985 C0 E0            [24] 2190 	push	acc
      000987 74 80            [12] 2191 	mov	a,#0x80
      000989 C0 E0            [24] 2192 	push	acc
      00098B 12r00r00         [24] 2193 	lcall	_printf
      00098E 15 81            [12] 2194 	dec	sp
      000990 15 81            [12] 2195 	dec	sp
      000992 15 81            [12] 2196 	dec	sp
      000994 22               [24] 2197 	ret
      000995                       2198 00107$:
                                   2199 ;	tcp.c:221: "Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
      000995 74rFD            [12] 2200 	mov	a,#___str_14
      000997 C0 E0            [24] 2201 	push	acc
      000999 74s01            [12] 2202 	mov	a,#(___str_14 >> 8)
      00099B C0 E0            [24] 2203 	push	acc
      00099D 74 80            [12] 2204 	mov	a,#0x80
      00099F C0 E0            [24] 2205 	push	acc
      0009A1 12r00r00         [24] 2206 	lcall	_printf
      0009A4 15 81            [12] 2207 	dec	sp
      0009A6 15 81            [12] 2208 	dec	sp
      0009A8 15 81            [12] 2209 	dec	sp
                                   2210 ;	tcp.c:223: }
      0009AA 22               [24] 2211 	ret
                                   2212 	.area CSEG    (CODE)
                                   2213 	.area CONST   (CODE)
                                   2214 	.area CONST   (CODE)
      000000                       2215 ___str_0:
      000000 0A                    2216 	.db 0x0a
      000001 48 65 78 64 75 6D 70  2217 	.ascii "Hexdump (Size: %d):"
             20 28 53 69 7A 65 3A
             20 25 64 29 3A
      000014 0A                    2218 	.db 0x0a
      000015 00                    2219 	.db 0x00
                                   2220 	.area CSEG    (CODE)
                                   2221 	.area CONST   (CODE)
      000016                       2222 ___str_1:
      000016 25 30 32 58 20        2223 	.ascii "%02X "
      00001B 00                    2224 	.db 0x00
                                   2225 	.area CSEG    (CODE)
                                   2226 	.area CONST   (CODE)
      00001C                       2227 ___str_2:
      00001C 0A                    2228 	.db 0x0a
      00001D 00                    2229 	.db 0x00
                                   2230 	.area CSEG    (CODE)
                                   2231 	.area CONST   (CODE)
      00001E                       2232 ___str_3:
      00001E 0A                    2233 	.db 0x0a
      00001F 0D                    2234 	.db 0x0d
      000020 49 6E 76 61 6C 69 64  2235 	.ascii "Invalid start address: %04X"
             20 73 74 61 72 74 20
             61 64 64 72 65 73 73
             3A 20 25 30 34 58
      00003B 0A                    2236 	.db 0x0a
      00003C 0D                    2237 	.db 0x0d
      00003D 00                    2238 	.db 0x00
                                   2239 	.area CSEG    (CODE)
                                   2240 	.area CONST   (CODE)
      00003E                       2241 ___str_4:
      00003E 0A                    2242 	.db 0x0a
      00003F 0D                    2243 	.db 0x0d
      000040 46 61 69 6C 65 64 20  2244 	.ascii "Failed to read packet start address bytes"
             74 6F 20 72 65 61 64
             20 70 61 63 6B 65 74
             20 73 74 61 72 74 20
             61 64 64 72 65 73 73
             20 62 79 74 65 73
      000069 0A                    2245 	.db 0x0a
      00006A 0D                    2246 	.db 0x0d
      00006B 00                    2247 	.db 0x00
                                   2248 	.area CSEG    (CODE)
                                   2249 	.area CONST   (CODE)
      00006C                       2250 ___str_5:
      00006C 0A                    2251 	.db 0x0a
      00006D 0D                    2252 	.db 0x0d
      00006E 49 6E 76 61 6C 69 64  2253 	.ascii "Invalid next start address: 0x%04X"
             20 6E 65 78 74 20 73
             74 61 72 74 20 61 64
             64 72 65 73 73 3A 20
             30 78 25 30 34 58
      000090 0A                    2254 	.db 0x0a
      000091 0D                    2255 	.db 0x0d
      000092 00                    2256 	.db 0x00
                                   2257 	.area CSEG    (CODE)
                                   2258 	.area CONST   (CODE)
      000093                       2259 ___str_6:
      000093 0A                    2260 	.db 0x0a
      000094 0D                    2261 	.db 0x0d
      000095 4D 65 6D 6F 72 79 20  2262 	.ascii "Memory allocation failed for packet size: %d"
             61 6C 6C 6F 63 61 74
             69 6F 6E 20 66 61 69
             6C 65 64 20 66 6F 72
             20 70 61 63 6B 65 74
             20 73 69 7A 65 3A 20
             25 64
      0000C1 0A                    2263 	.db 0x0a
      0000C2 0D                    2264 	.db 0x0d
      0000C3 00                    2265 	.db 0x00
                                   2266 	.area CSEG    (CODE)
                                   2267 	.area CONST   (CODE)
      0000C4                       2268 ___str_7:
      0000C4 0A                    2269 	.db 0x0a
      0000C5 0D                    2270 	.db 0x0d
      0000C6 46 61 69 6C 65 64 20  2271 	.ascii "Failed to read packet data"
             74 6F 20 72 65 61 64
             20 70 61 63 6B 65 74
             20 64 61 74 61
      0000E0 0A                    2272 	.db 0x0a
      0000E1 0D                    2273 	.db 0x0d
      0000E2 00                    2274 	.db 0x00
                                   2275 	.area CSEG    (CODE)
                                   2276 	.area CONST   (CODE)
      0000E3                       2277 ___str_8:
      0000E3 0A                    2278 	.db 0x0a
      0000E4 50 72 6F 63 65 73 73  2279 	.ascii "Processed response data:"
             65 64 20 72 65 73 70
             6F 6E 73 65 20 64 61
             74 61 3A
      0000FC 0A                    2280 	.db 0x0a
      0000FD 00                    2281 	.db 0x00
                                   2282 	.area CSEG    (CODE)
                                   2283 	.area CONST   (CODE)
      0000FE                       2284 ___str_9:
      0000FE 0A                    2285 	.db 0x0a
      0000FF 4E 6F 20 72 65 73 70  2286 	.ascii "No response generated by TCP packet processing."
             6F 6E 73 65 20 67 65
             6E 65 72 61 74 65 64
             20 62 79 20 54 43 50
             20 70 61 63 6B 65 74
             20 70 72 6F 63 65 73
             73 69 6E 67 2E
      00012E 0A                    2287 	.db 0x0a
      00012F 00                    2288 	.db 0x00
                                   2289 	.area CSEG    (CODE)
                                   2290 	.area CONST   (CODE)
      000130                       2291 ___str_10:
      000130 0A                    2292 	.db 0x0a
      000131 0D                    2293 	.db 0x0d
      000132 53 75 63 63 65 73 73  2294 	.ascii "Successfully processed packet of size %d from 0x%04X to 0x%0"
             66 75 6C 6C 79 20 70
             72 6F 63 65 73 73 65
             64 20 70 61 63 6B 65
             74 20 6F 66 20 73 69
             7A 65 20 25 64 20 66
             72 6F 6D 20 30 78 25
             30 34 58 20 74 6F 20
             30 78 25 30
      00016E 34 58                 2295 	.ascii "4X"
      000170 0A                    2296 	.db 0x0a
      000171 0D                    2297 	.db 0x0d
      000172 00                    2298 	.db 0x00
                                   2299 	.area CSEG    (CODE)
                                   2300 	.area CONST   (CODE)
      000173                       2301 ___str_11:
      000173 0A                    2302 	.db 0x0a
      000174 49 6E 76 61 6C 69 64  2303 	.ascii "Invalid Buffer Size. Buffer exceeds valid address range."
             20 42 75 66 66 65 72
             20 53 69 7A 65 2E 20
             42 75 66 66 65 72 20
             65 78 63 65 65 64 73
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 72 61 6E 67 65 2E
      0001AC 0A                    2304 	.db 0x0a
      0001AD 00                    2305 	.db 0x00
                                   2306 	.area CSEG    (CODE)
                                   2307 	.area CONST   (CODE)
      0001AE                       2308 ___str_12:
      0001AE 54 43 50 20 72 65 71  2309 	.ascii "TCP request sent successfully."
             75 65 73 74 20 73 65
             6E 74 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79 2E
      0001CC 0A                    2310 	.db 0x0a
      0001CD 0D                    2311 	.db 0x0d
      0001CE 00                    2312 	.db 0x00
                                   2313 	.area CSEG    (CODE)
                                   2314 	.area CONST   (CODE)
      0001CF                       2315 ___str_13:
      0001CF 54 43 50 20 74 72 61  2316 	.ascii "TCP transmission failed. Check error flags."
             6E 73 6D 69 73 73 69
             6F 6E 20 66 61 69 6C
             65 64 2E 20 43 68 65
             63 6B 20 65 72 72 6F
             72 20 66 6C 61 67 73
             2E
      0001FA 0A                    2317 	.db 0x0a
      0001FB 0D                    2318 	.db 0x0d
      0001FC 00                    2319 	.db 0x00
                                   2320 	.area CSEG    (CODE)
                                   2321 	.area CONST   (CODE)
      0001FD                       2322 ___str_14:
      0001FD 54 72 61 6E 73 6D 69  2323 	.ascii "Transmission timeout. ENC28J60 may not be functioning correc"
             73 73 69 6F 6E 20 74
             69 6D 65 6F 75 74 2E
             20 45 4E 43 32 38 4A
             36 30 20 6D 61 79 20
             6E 6F 74 20 62 65 20
             66 75 6E 63 74 69 6F
             6E 69 6E 67 20 63 6F
             72 72 65 63
      000239 74 6C 79 2E           2324 	.ascii "tly."
      00023D 0A                    2325 	.db 0x0a
      00023E 0D                    2326 	.db 0x0d
      00023F 00                    2327 	.db 0x00
                                   2328 	.area CSEG    (CODE)
                                   2329 	.area XINIT   (CODE)
                                   2330 	.area CABS    (ABS,CODE)
