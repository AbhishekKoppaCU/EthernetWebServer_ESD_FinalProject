                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _RX_disable
                                     15 	.globl _send_arp_request
                                     16 	.globl _init_ENC
                                     17 	.globl _spi_control_write
                                     18 	.globl _eth_spi_read
                                     19 	.globl _phy_spi_write
                                     20 	.globl _phy_spi_read
                                     21 	.globl _spi_buffer_write
                                     22 	.globl _spi_buffer_read
                                     23 	.globl _mac_spi_read
                                     24 	.globl _enc_reset
                                     25 	.globl _configure_SPI
                                     26 	.globl _printf_tiny
                                     27 	.globl _putchar
                                     28 	.globl _getchar
                                     29 	.globl _printf
                                     30 	.globl _TF1
                                     31 	.globl _TR1
                                     32 	.globl _TF0
                                     33 	.globl _TR0
                                     34 	.globl _IE1
                                     35 	.globl _IT1
                                     36 	.globl _IE0
                                     37 	.globl _IT0
                                     38 	.globl _SM0
                                     39 	.globl _SM1
                                     40 	.globl _SM2
                                     41 	.globl _REN
                                     42 	.globl _TB8
                                     43 	.globl _RB8
                                     44 	.globl _TI
                                     45 	.globl _RI
                                     46 	.globl _CY
                                     47 	.globl _AC
                                     48 	.globl _F0
                                     49 	.globl _RS1
                                     50 	.globl _RS0
                                     51 	.globl _OV
                                     52 	.globl _F1
                                     53 	.globl _P
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD0
                                     61 	.globl _TXD
                                     62 	.globl _RXD0
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _P1_7
                                     81 	.globl _P1_6
                                     82 	.globl _P1_5
                                     83 	.globl _P1_4
                                     84 	.globl _P1_3
                                     85 	.globl _P1_2
                                     86 	.globl _P1_1
                                     87 	.globl _P1_0
                                     88 	.globl _P0_7
                                     89 	.globl _P0_6
                                     90 	.globl _P0_5
                                     91 	.globl _P0_4
                                     92 	.globl _P0_3
                                     93 	.globl _P0_2
                                     94 	.globl _P0_1
                                     95 	.globl _P0_0
                                     96 	.globl _PS
                                     97 	.globl _PT1
                                     98 	.globl _PX1
                                     99 	.globl _PT0
                                    100 	.globl _PX0
                                    101 	.globl _EA
                                    102 	.globl _ES
                                    103 	.globl _ET1
                                    104 	.globl _EX1
                                    105 	.globl _ET0
                                    106 	.globl _EX0
                                    107 	.globl _BREG_F7
                                    108 	.globl _BREG_F6
                                    109 	.globl _BREG_F5
                                    110 	.globl _BREG_F4
                                    111 	.globl _BREG_F3
                                    112 	.globl _BREG_F2
                                    113 	.globl _BREG_F1
                                    114 	.globl _BREG_F0
                                    115 	.globl _P5_7
                                    116 	.globl _P5_6
                                    117 	.globl _P5_5
                                    118 	.globl _P5_4
                                    119 	.globl _P5_3
                                    120 	.globl _P5_2
                                    121 	.globl _P5_1
                                    122 	.globl _P5_0
                                    123 	.globl _P4_7
                                    124 	.globl _P4_6
                                    125 	.globl _P4_5
                                    126 	.globl _P4_4
                                    127 	.globl _P4_3
                                    128 	.globl _P4_2
                                    129 	.globl _P4_1
                                    130 	.globl _P4_0
                                    131 	.globl _PX0L
                                    132 	.globl _PT0L
                                    133 	.globl _PX1L
                                    134 	.globl _PT1L
                                    135 	.globl _PSL
                                    136 	.globl _PT2L
                                    137 	.globl _PPCL
                                    138 	.globl _EC
                                    139 	.globl _CCF0
                                    140 	.globl _CCF1
                                    141 	.globl _CCF2
                                    142 	.globl _CCF3
                                    143 	.globl _CCF4
                                    144 	.globl _CR
                                    145 	.globl _CF
                                    146 	.globl _TF2
                                    147 	.globl _EXF2
                                    148 	.globl _RCLK
                                    149 	.globl _TCLK
                                    150 	.globl _EXEN2
                                    151 	.globl _TR2
                                    152 	.globl _C_T2
                                    153 	.globl _CP_RL2
                                    154 	.globl _T2CON_7
                                    155 	.globl _T2CON_6
                                    156 	.globl _T2CON_5
                                    157 	.globl _T2CON_4
                                    158 	.globl _T2CON_3
                                    159 	.globl _T2CON_2
                                    160 	.globl _T2CON_1
                                    161 	.globl _T2CON_0
                                    162 	.globl _PT2
                                    163 	.globl _ET2
                                    164 	.globl _TMOD
                                    165 	.globl _TL1
                                    166 	.globl _TL0
                                    167 	.globl _TH1
                                    168 	.globl _TH0
                                    169 	.globl _TCON
                                    170 	.globl _SP
                                    171 	.globl _SCON
                                    172 	.globl _SBUF0
                                    173 	.globl _SBUF
                                    174 	.globl _PSW
                                    175 	.globl _PCON
                                    176 	.globl _P3
                                    177 	.globl _P2
                                    178 	.globl _P1
                                    179 	.globl _P0
                                    180 	.globl _IP
                                    181 	.globl _IE
                                    182 	.globl _DP0L
                                    183 	.globl _DPL
                                    184 	.globl _DP0H
                                    185 	.globl _DPH
                                    186 	.globl _B
                                    187 	.globl _ACC
                                    188 	.globl _EECON
                                    189 	.globl _KBF
                                    190 	.globl _KBE
                                    191 	.globl _KBLS
                                    192 	.globl _BRL
                                    193 	.globl _BDRCON
                                    194 	.globl _T2MOD
                                    195 	.globl _SPDAT
                                    196 	.globl _SPSTA
                                    197 	.globl _SPCON
                                    198 	.globl _SADEN
                                    199 	.globl _SADDR
                                    200 	.globl _WDTPRG
                                    201 	.globl _WDTRST
                                    202 	.globl _P5
                                    203 	.globl _P4
                                    204 	.globl _IPH1
                                    205 	.globl _IPL1
                                    206 	.globl _IPH0
                                    207 	.globl _IPL0
                                    208 	.globl _IEN1
                                    209 	.globl _IEN0
                                    210 	.globl _CMOD
                                    211 	.globl _CL
                                    212 	.globl _CH
                                    213 	.globl _CCON
                                    214 	.globl _CCAPM4
                                    215 	.globl _CCAPM3
                                    216 	.globl _CCAPM2
                                    217 	.globl _CCAPM1
                                    218 	.globl _CCAPM0
                                    219 	.globl _CCAP4L
                                    220 	.globl _CCAP3L
                                    221 	.globl _CCAP2L
                                    222 	.globl _CCAP1L
                                    223 	.globl _CCAP0L
                                    224 	.globl _CCAP4H
                                    225 	.globl _CCAP3H
                                    226 	.globl _CCAP2H
                                    227 	.globl _CCAP1H
                                    228 	.globl _CCAP0H
                                    229 	.globl _CKCON1
                                    230 	.globl _CKCON0
                                    231 	.globl _CKRL
                                    232 	.globl _AUXR1
                                    233 	.globl _AUXR
                                    234 	.globl _TH2
                                    235 	.globl _TL2
                                    236 	.globl _RCAP2H
                                    237 	.globl _RCAP2L
                                    238 	.globl _T2CON
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           0000C8   244 _T2CON	=	0x00c8
                           0000CA   245 _RCAP2L	=	0x00ca
                           0000CB   246 _RCAP2H	=	0x00cb
                           0000CC   247 _TL2	=	0x00cc
                           0000CD   248 _TH2	=	0x00cd
                           00008E   249 _AUXR	=	0x008e
                           0000A2   250 _AUXR1	=	0x00a2
                           000097   251 _CKRL	=	0x0097
                           00008F   252 _CKCON0	=	0x008f
                           0000AF   253 _CKCON1	=	0x00af
                           0000FA   254 _CCAP0H	=	0x00fa
                           0000FB   255 _CCAP1H	=	0x00fb
                           0000FC   256 _CCAP2H	=	0x00fc
                           0000FD   257 _CCAP3H	=	0x00fd
                           0000FE   258 _CCAP4H	=	0x00fe
                           0000EA   259 _CCAP0L	=	0x00ea
                           0000EB   260 _CCAP1L	=	0x00eb
                           0000EC   261 _CCAP2L	=	0x00ec
                           0000ED   262 _CCAP3L	=	0x00ed
                           0000EE   263 _CCAP4L	=	0x00ee
                           0000DA   264 _CCAPM0	=	0x00da
                           0000DB   265 _CCAPM1	=	0x00db
                           0000DC   266 _CCAPM2	=	0x00dc
                           0000DD   267 _CCAPM3	=	0x00dd
                           0000DE   268 _CCAPM4	=	0x00de
                           0000D8   269 _CCON	=	0x00d8
                           0000F9   270 _CH	=	0x00f9
                           0000E9   271 _CL	=	0x00e9
                           0000D9   272 _CMOD	=	0x00d9
                           0000A8   273 _IEN0	=	0x00a8
                           0000B1   274 _IEN1	=	0x00b1
                           0000B8   275 _IPL0	=	0x00b8
                           0000B7   276 _IPH0	=	0x00b7
                           0000B2   277 _IPL1	=	0x00b2
                           0000B3   278 _IPH1	=	0x00b3
                           0000C0   279 _P4	=	0x00c0
                           0000E8   280 _P5	=	0x00e8
                           0000A6   281 _WDTRST	=	0x00a6
                           0000A7   282 _WDTPRG	=	0x00a7
                           0000A9   283 _SADDR	=	0x00a9
                           0000B9   284 _SADEN	=	0x00b9
                           0000C3   285 _SPCON	=	0x00c3
                           0000C4   286 _SPSTA	=	0x00c4
                           0000C5   287 _SPDAT	=	0x00c5
                           0000C9   288 _T2MOD	=	0x00c9
                           00009B   289 _BDRCON	=	0x009b
                           00009A   290 _BRL	=	0x009a
                           00009C   291 _KBLS	=	0x009c
                           00009D   292 _KBE	=	0x009d
                           00009E   293 _KBF	=	0x009e
                           0000D2   294 _EECON	=	0x00d2
                           0000E0   295 _ACC	=	0x00e0
                           0000F0   296 _B	=	0x00f0
                           000083   297 _DPH	=	0x0083
                           000083   298 _DP0H	=	0x0083
                           000082   299 _DPL	=	0x0082
                           000082   300 _DP0L	=	0x0082
                           0000A8   301 _IE	=	0x00a8
                           0000B8   302 _IP	=	0x00b8
                           000080   303 _P0	=	0x0080
                           000090   304 _P1	=	0x0090
                           0000A0   305 _P2	=	0x00a0
                           0000B0   306 _P3	=	0x00b0
                           000087   307 _PCON	=	0x0087
                           0000D0   308 _PSW	=	0x00d0
                           000099   309 _SBUF	=	0x0099
                           000099   310 _SBUF0	=	0x0099
                           000098   311 _SCON	=	0x0098
                           000081   312 _SP	=	0x0081
                           000088   313 _TCON	=	0x0088
                           00008C   314 _TH0	=	0x008c
                           00008D   315 _TH1	=	0x008d
                           00008A   316 _TL0	=	0x008a
                           00008B   317 _TL1	=	0x008b
                           000089   318 _TMOD	=	0x0089
                                    319 ;--------------------------------------------------------
                                    320 ; special function bits
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           0000AD   324 _ET2	=	0x00ad
                           0000BD   325 _PT2	=	0x00bd
                           0000C8   326 _T2CON_0	=	0x00c8
                           0000C9   327 _T2CON_1	=	0x00c9
                           0000CA   328 _T2CON_2	=	0x00ca
                           0000CB   329 _T2CON_3	=	0x00cb
                           0000CC   330 _T2CON_4	=	0x00cc
                           0000CD   331 _T2CON_5	=	0x00cd
                           0000CE   332 _T2CON_6	=	0x00ce
                           0000CF   333 _T2CON_7	=	0x00cf
                           0000C8   334 _CP_RL2	=	0x00c8
                           0000C9   335 _C_T2	=	0x00c9
                           0000CA   336 _TR2	=	0x00ca
                           0000CB   337 _EXEN2	=	0x00cb
                           0000CC   338 _TCLK	=	0x00cc
                           0000CD   339 _RCLK	=	0x00cd
                           0000CE   340 _EXF2	=	0x00ce
                           0000CF   341 _TF2	=	0x00cf
                           0000DF   342 _CF	=	0x00df
                           0000DE   343 _CR	=	0x00de
                           0000DC   344 _CCF4	=	0x00dc
                           0000DB   345 _CCF3	=	0x00db
                           0000DA   346 _CCF2	=	0x00da
                           0000D9   347 _CCF1	=	0x00d9
                           0000D8   348 _CCF0	=	0x00d8
                           0000AE   349 _EC	=	0x00ae
                           0000BE   350 _PPCL	=	0x00be
                           0000BD   351 _PT2L	=	0x00bd
                           0000BC   352 _PSL	=	0x00bc
                           0000BB   353 _PT1L	=	0x00bb
                           0000BA   354 _PX1L	=	0x00ba
                           0000B9   355 _PT0L	=	0x00b9
                           0000B8   356 _PX0L	=	0x00b8
                           0000C0   357 _P4_0	=	0x00c0
                           0000C1   358 _P4_1	=	0x00c1
                           0000C2   359 _P4_2	=	0x00c2
                           0000C3   360 _P4_3	=	0x00c3
                           0000C4   361 _P4_4	=	0x00c4
                           0000C5   362 _P4_5	=	0x00c5
                           0000C6   363 _P4_6	=	0x00c6
                           0000C7   364 _P4_7	=	0x00c7
                           0000E8   365 _P5_0	=	0x00e8
                           0000E9   366 _P5_1	=	0x00e9
                           0000EA   367 _P5_2	=	0x00ea
                           0000EB   368 _P5_3	=	0x00eb
                           0000EC   369 _P5_4	=	0x00ec
                           0000ED   370 _P5_5	=	0x00ed
                           0000EE   371 _P5_6	=	0x00ee
                           0000EF   372 _P5_7	=	0x00ef
                           0000F0   373 _BREG_F0	=	0x00f0
                           0000F1   374 _BREG_F1	=	0x00f1
                           0000F2   375 _BREG_F2	=	0x00f2
                           0000F3   376 _BREG_F3	=	0x00f3
                           0000F4   377 _BREG_F4	=	0x00f4
                           0000F5   378 _BREG_F5	=	0x00f5
                           0000F6   379 _BREG_F6	=	0x00f6
                           0000F7   380 _BREG_F7	=	0x00f7
                           0000A8   381 _EX0	=	0x00a8
                           0000A9   382 _ET0	=	0x00a9
                           0000AA   383 _EX1	=	0x00aa
                           0000AB   384 _ET1	=	0x00ab
                           0000AC   385 _ES	=	0x00ac
                           0000AF   386 _EA	=	0x00af
                           0000B8   387 _PX0	=	0x00b8
                           0000B9   388 _PT0	=	0x00b9
                           0000BA   389 _PX1	=	0x00ba
                           0000BB   390 _PT1	=	0x00bb
                           0000BC   391 _PS	=	0x00bc
                           000080   392 _P0_0	=	0x0080
                           000081   393 _P0_1	=	0x0081
                           000082   394 _P0_2	=	0x0082
                           000083   395 _P0_3	=	0x0083
                           000084   396 _P0_4	=	0x0084
                           000085   397 _P0_5	=	0x0085
                           000086   398 _P0_6	=	0x0086
                           000087   399 _P0_7	=	0x0087
                           000090   400 _P1_0	=	0x0090
                           000091   401 _P1_1	=	0x0091
                           000092   402 _P1_2	=	0x0092
                           000093   403 _P1_3	=	0x0093
                           000094   404 _P1_4	=	0x0094
                           000095   405 _P1_5	=	0x0095
                           000096   406 _P1_6	=	0x0096
                           000097   407 _P1_7	=	0x0097
                           0000A0   408 _P2_0	=	0x00a0
                           0000A1   409 _P2_1	=	0x00a1
                           0000A2   410 _P2_2	=	0x00a2
                           0000A3   411 _P2_3	=	0x00a3
                           0000A4   412 _P2_4	=	0x00a4
                           0000A5   413 _P2_5	=	0x00a5
                           0000A6   414 _P2_6	=	0x00a6
                           0000A7   415 _P2_7	=	0x00a7
                           0000B0   416 _P3_0	=	0x00b0
                           0000B1   417 _P3_1	=	0x00b1
                           0000B2   418 _P3_2	=	0x00b2
                           0000B3   419 _P3_3	=	0x00b3
                           0000B4   420 _P3_4	=	0x00b4
                           0000B5   421 _P3_5	=	0x00b5
                           0000B6   422 _P3_6	=	0x00b6
                           0000B7   423 _P3_7	=	0x00b7
                           0000B0   424 _RXD	=	0x00b0
                           0000B0   425 _RXD0	=	0x00b0
                           0000B1   426 _TXD	=	0x00b1
                           0000B1   427 _TXD0	=	0x00b1
                           0000B2   428 _INT0	=	0x00b2
                           0000B3   429 _INT1	=	0x00b3
                           0000B4   430 _T0	=	0x00b4
                           0000B5   431 _T1	=	0x00b5
                           0000B6   432 _WR	=	0x00b6
                           0000B7   433 _RD	=	0x00b7
                           0000D0   434 _P	=	0x00d0
                           0000D1   435 _F1	=	0x00d1
                           0000D2   436 _OV	=	0x00d2
                           0000D3   437 _RS0	=	0x00d3
                           0000D4   438 _RS1	=	0x00d4
                           0000D5   439 _F0	=	0x00d5
                           0000D6   440 _AC	=	0x00d6
                           0000D7   441 _CY	=	0x00d7
                           000098   442 _RI	=	0x0098
                           000099   443 _TI	=	0x0099
                           00009A   444 _RB8	=	0x009a
                           00009B   445 _TB8	=	0x009b
                           00009C   446 _REN	=	0x009c
                           00009D   447 _SM2	=	0x009d
                           00009E   448 _SM1	=	0x009e
                           00009F   449 _SM0	=	0x009f
                           000088   450 _IT0	=	0x0088
                           000089   451 _IE0	=	0x0089
                           00008A   452 _IT1	=	0x008a
                           00008B   453 _IE1	=	0x008b
                           00008C   454 _TR0	=	0x008c
                           00008D   455 _TF0	=	0x008d
                           00008E   456 _TR1	=	0x008e
                           00008F   457 _TF1	=	0x008f
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable register banks
                                    460 ;--------------------------------------------------------
                                    461 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        462 	.ds 8
                                    463 ;--------------------------------------------------------
                                    464 ; internal ram data
                                    465 ;--------------------------------------------------------
                                    466 	.area DSEG    (DATA)
                                    467 ;--------------------------------------------------------
                                    468 ; overlayable items in internal ram
                                    469 ;--------------------------------------------------------
                                    470 	.area	OSEG    (OVR,DATA)
      000000                        471 _hex_to_int_sloc0_1_0:
      000000                        472 	.ds 3
      000003                        473 _hex_to_int_sloc1_1_0:
      000003                        474 	.ds 1
      000004                        475 _hex_to_int_sloc2_1_0:
      000004                        476 	.ds 2
                                    477 ;--------------------------------------------------------
                                    478 ; Stack segment in internal ram
                                    479 ;--------------------------------------------------------
                                    480 	.area SSEG
      000000                        481 __start__stack:
      000000                        482 	.ds	1
                                    483 
                                    484 ;--------------------------------------------------------
                                    485 ; indirectly addressable internal ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area ISEG    (DATA)
                                    488 ;--------------------------------------------------------
                                    489 ; absolute internal ram data
                                    490 ;--------------------------------------------------------
                                    491 	.area IABS    (ABS,DATA)
                                    492 	.area IABS    (ABS,DATA)
                                    493 ;--------------------------------------------------------
                                    494 ; bit data
                                    495 ;--------------------------------------------------------
                                    496 	.area BSEG    (BIT)
                                    497 ;--------------------------------------------------------
                                    498 ; paged external ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area PSEG    (PAG,XDATA)
                                    501 ;--------------------------------------------------------
                                    502 ; uninitialized external ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area XSEG    (XDATA)
      000000                        505 _hex_to_int_str_10000_74:
      000000                        506 	.ds 3
      000003                        507 _hex_to_int_result_10000_75:
      000003                        508 	.ds 2
      000005                        509 _hex_to_int_ASCII_20000_76:
      000005                        510 	.ds 2
      000007                        511 _get_user_buffer_size_input_10000_81:
      000007                        512 	.ds 10
      000011                        513 _main_buffer_40003_94:
      000011                        514 	.ds 256
      000111                        515 _main_buffer_40003_99:
      000111                        516 	.ds 256
                                    517 ;--------------------------------------------------------
                                    518 ; absolute external ram data
                                    519 ;--------------------------------------------------------
                                    520 	.area XABS    (ABS,XDATA)
                                    521 ;--------------------------------------------------------
                                    522 ; initialized external ram data
                                    523 ;--------------------------------------------------------
                                    524 	.area XISEG   (XDATA)
                                    525 	.area HOME    (CODE)
                                    526 	.area GSINIT0 (CODE)
                                    527 	.area GSINIT1 (CODE)
                                    528 	.area GSINIT2 (CODE)
                                    529 	.area GSINIT3 (CODE)
                                    530 	.area GSINIT4 (CODE)
                                    531 	.area GSINIT5 (CODE)
                                    532 	.area GSINIT  (CODE)
                                    533 	.area GSFINAL (CODE)
                                    534 	.area CSEG    (CODE)
                                    535 ;--------------------------------------------------------
                                    536 ; interrupt vector
                                    537 ;--------------------------------------------------------
                                    538 	.area HOME    (CODE)
      000000                        539 __interrupt_vect:
      000000 02r00r00         [24]  540 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  541 	ljmp	_external_interrupt0_isr
                                    542 ;--------------------------------------------------------
                                    543 ; global & static initialisations
                                    544 ;--------------------------------------------------------
                                    545 	.area HOME    (CODE)
                                    546 	.area GSINIT  (CODE)
                                    547 	.area GSFINAL (CODE)
                                    548 	.area GSINIT  (CODE)
                                    549 	.globl __sdcc_gsinit_startup
                                    550 	.globl __sdcc_program_startup
                                    551 	.globl __start__stack
                                    552 	.globl __mcs51_genXINIT
                                    553 	.globl __mcs51_genXRAMCLEAR
                                    554 	.globl __mcs51_genRAMCLEAR
                                    555 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  556 	ljmp	__sdcc_program_startup
                                    557 ;--------------------------------------------------------
                                    558 ; Home
                                    559 ;--------------------------------------------------------
                                    560 	.area HOME    (CODE)
                                    561 	.area HOME    (CODE)
      000006                        562 __sdcc_program_startup:
      000006 02r02r3E         [24]  563 	ljmp	_main
                                    564 ;	return from main will return to caller
                                    565 ;--------------------------------------------------------
                                    566 ; code
                                    567 ;--------------------------------------------------------
                                    568 	.area CSEG    (CODE)
                                    569 ;------------------------------------------------------------
                                    570 ;Allocation info for local variables in function 'hex_to_int'
                                    571 ;------------------------------------------------------------
                                    572 ;str                       Allocated with name '_hex_to_int_str_10000_74'
                                    573 ;i                         Allocated with name '_hex_to_int_i_10000_75'
                                    574 ;result                    Allocated with name '_hex_to_int_result_10000_75'
                                    575 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_76'
                                    576 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    577 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    578 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    579 ;------------------------------------------------------------
                                    580 ;	main.c:12: int hex_to_int(char* str)
                                    581 ;	-----------------------------------------
                                    582 ;	 function hex_to_int
                                    583 ;	-----------------------------------------
      000000                        584 _hex_to_int:
                           000007   585 	ar7 = 0x07
                           000006   586 	ar6 = 0x06
                           000005   587 	ar5 = 0x05
                           000004   588 	ar4 = 0x04
                           000003   589 	ar3 = 0x03
                           000002   590 	ar2 = 0x02
                           000001   591 	ar1 = 0x01
                           000000   592 	ar0 = 0x00
      000000 AF F0            [24]  593 	mov	r7,b
      000002 AE 83            [24]  594 	mov	r6,dph
      000004 E5 82            [12]  595 	mov	a,dpl
      000006 90r00r00         [24]  596 	mov	dptr,#_hex_to_int_str_10000_74
      000009 F0               [24]  597 	movx	@dptr,a
      00000A EE               [12]  598 	mov	a,r6
      00000B A3               [24]  599 	inc	dptr
      00000C F0               [24]  600 	movx	@dptr,a
      00000D EF               [12]  601 	mov	a,r7
      00000E A3               [24]  602 	inc	dptr
      00000F F0               [24]  603 	movx	@dptr,a
                                    604 ;	main.c:15: int i = 0, result = 0;
      000010 90r00r03         [24]  605 	mov	dptr,#_hex_to_int_result_10000_75
      000013 E4               [12]  606 	clr	a
      000014 F0               [24]  607 	movx	@dptr,a
      000015 A3               [24]  608 	inc	dptr
      000016 F0               [24]  609 	movx	@dptr,a
                                    610 ;	main.c:16: while(str[i] != '\0')
      000017 90r00r00         [24]  611 	mov	dptr,#_hex_to_int_str_10000_74
      00001A E0               [24]  612 	movx	a,@dptr
      00001B FD               [12]  613 	mov	r5,a
      00001C A3               [24]  614 	inc	dptr
      00001D E0               [24]  615 	movx	a,@dptr
      00001E FE               [12]  616 	mov	r6,a
      00001F A3               [24]  617 	inc	dptr
      000020 E0               [24]  618 	movx	a,@dptr
      000021 FF               [12]  619 	mov	r7,a
      000022 8D 02            [24]  620 	mov	ar2,r5
      000024 8E 03            [24]  621 	mov	ar3,r6
      000026 8F 04            [24]  622 	mov	ar4,r7
      000028 8D*00            [24]  623 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  624 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  625 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  626 	mov	r0,#0x00
      000030 79 00            [12]  627 	mov	r1,#0x00
      000032                        628 00112$:
      000032 C0 02            [24]  629 	push	ar2
      000034 C0 03            [24]  630 	push	ar3
      000036 C0 04            [24]  631 	push	ar4
      000038 E8               [12]  632 	mov	a,r0
      000039 25*00            [12]  633 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  634 	mov	r2,a
      00003C E9               [12]  635 	mov	a,r1
      00003D 35*01            [12]  636 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  637 	mov	r3,a
      000040 AC*02            [24]  638 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  639 	mov	dpl,r2
      000044 8B 83            [24]  640 	mov	dph,r3
      000046 8C F0            [24]  641 	mov	b,r4
      000048 12r00r00         [24]  642 	lcall	__gptrget
      00004B F5*03            [12]  643 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  644 	pop	ar4
      00004F D0 03            [24]  645 	pop	ar3
      000051 D0 02            [24]  646 	pop	ar2
      000053 E5*03            [12]  647 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  648 	jnz	00166$
      000057 02r01rAE         [24]  649 	ljmp	00114$
      00005A                        650 00166$:
                                    651 ;	main.c:18: int ASCII = (int)str[i];
      00005A C0 02            [24]  652 	push	ar2
      00005C C0 03            [24]  653 	push	ar3
      00005E C0 04            [24]  654 	push	ar4
      000060 85*03*04         [24]  655 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  656 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  657 	mov	dptr,#_hex_to_int_ASCII_20000_76
      000069 E5*04            [12]  658 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  659 	movx	@dptr,a
      00006C E5*05            [12]  660 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  661 	inc	dptr
      00006F F0               [24]  662 	movx	@dptr,a
                                    663 ;	main.c:19: result *= 16;
      000070 90r00r03         [24]  664 	mov	dptr,#_hex_to_int_result_10000_75
      000073 E0               [24]  665 	movx	a,@dptr
      000074 FB               [12]  666 	mov	r3,a
      000075 A3               [24]  667 	inc	dptr
      000076 E0               [24]  668 	movx	a,@dptr
      000077 C4               [12]  669 	swap	a
      000078 54 F0            [12]  670 	anl	a,#0xf0
      00007A CB               [12]  671 	xch	a,r3
      00007B C4               [12]  672 	swap	a
      00007C CB               [12]  673 	xch	a,r3
      00007D 6B               [12]  674 	xrl	a,r3
      00007E CB               [12]  675 	xch	a,r3
      00007F 54 F0            [12]  676 	anl	a,#0xf0
      000081 CB               [12]  677 	xch	a,r3
      000082 6B               [12]  678 	xrl	a,r3
      000083 FC               [12]  679 	mov	r4,a
      000084 90r00r03         [24]  680 	mov	dptr,#_hex_to_int_result_10000_75
      000087 EB               [12]  681 	mov	a,r3
      000088 F0               [24]  682 	movx	@dptr,a
      000089 EC               [12]  683 	mov	a,r4
      00008A A3               [24]  684 	inc	dptr
      00008B F0               [24]  685 	movx	@dptr,a
                                    686 ;	main.c:20: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  687 	clr	c
      00008D E5*04            [12]  688 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  689 	subb	a,#0x30
      000091 E5*05            [12]  690 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  691 	xrl	a,#0x80
      000095 94 80            [12]  692 	subb	a,#0x80
      000097 D0 04            [24]  693 	pop	ar4
      000099 D0 03            [24]  694 	pop	ar3
      00009B D0 02            [24]  695 	pop	ar2
      00009D 40 3F            [24]  696 	jc	00109$
      00009F 74 39            [12]  697 	mov	a,#0x39
      0000A1 95*04            [12]  698 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  699 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  700 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  701 	xrl	b,#0x80
      0000AB 95 F0            [12]  702 	subb	a,b
      0000AD 40 2F            [24]  703 	jc	00109$
                                    704 ;	main.c:22: result += str[i] - 48;
      0000AF C0 02            [24]  705 	push	ar2
      0000B1 C0 03            [24]  706 	push	ar3
      0000B3 C0 04            [24]  707 	push	ar4
      0000B5 E5*04            [12]  708 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  709 	add	a,#0xd0
      0000B9 F5*04            [12]  710 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  711 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  712 	addc	a,#0xff
      0000BF F5*05            [12]  713 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  714 	mov	dptr,#_hex_to_int_result_10000_75
      0000C4 E0               [24]  715 	movx	a,@dptr
      0000C5 FA               [12]  716 	mov	r2,a
      0000C6 A3               [24]  717 	inc	dptr
      0000C7 E0               [24]  718 	movx	a,@dptr
      0000C8 FC               [12]  719 	mov	r4,a
      0000C9 90r00r03         [24]  720 	mov	dptr,#_hex_to_int_result_10000_75
      0000CC E5*04            [12]  721 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  722 	add	a, r2
      0000CF F0               [24]  723 	movx	@dptr,a
      0000D0 E5*05            [12]  724 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  725 	addc	a, r4
      0000D3 A3               [24]  726 	inc	dptr
      0000D4 F0               [24]  727 	movx	@dptr,a
      0000D5 D0 04            [24]  728 	pop	ar4
      0000D7 D0 03            [24]  729 	pop	ar3
      0000D9 D0 02            [24]  730 	pop	ar2
      0000DB 02r01rA6         [24]  731 	ljmp	00110$
      0000DE                        732 00109$:
                                    733 ;	main.c:24: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  734 	mov	dptr,#_hex_to_int_ASCII_20000_76
      0000E1 E0               [24]  735 	movx	a,@dptr
      0000E2 F5*04            [12]  736 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  737 	inc	dptr
      0000E5 E0               [24]  738 	movx	a,@dptr
      0000E6 F5*05            [12]  739 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  740 	clr	c
      0000E9 E5*04            [12]  741 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  742 	subb	a,#0x41
      0000ED E5*05            [12]  743 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  744 	xrl	a,#0x80
      0000F1 94 80            [12]  745 	subb	a,#0x80
      0000F3 40 4E            [24]  746 	jc	00105$
      0000F5 74 46            [12]  747 	mov	a,#0x46
      0000F7 95*04            [12]  748 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  749 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  750 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  751 	xrl	b,#0x80
      000101 95 F0            [12]  752 	subb	a,b
      000103 40 3E            [24]  753 	jc	00105$
                                    754 ;	main.c:26: result += str[i] - 55;
      000105 C0 05            [24]  755 	push	ar5
      000107 C0 06            [24]  756 	push	ar6
      000109 C0 07            [24]  757 	push	ar7
      00010B E8               [12]  758 	mov	a,r0
      00010C 2A               [12]  759 	add	a, r2
      00010D FD               [12]  760 	mov	r5,a
      00010E E9               [12]  761 	mov	a,r1
      00010F 3B               [12]  762 	addc	a, r3
      000110 FE               [12]  763 	mov	r6,a
      000111 8C 07            [24]  764 	mov	ar7,r4
      000113 8D 82            [24]  765 	mov	dpl,r5
      000115 8E 83            [24]  766 	mov	dph,r6
      000117 8F F0            [24]  767 	mov	b,r7
      000119 12r00r00         [24]  768 	lcall	__gptrget
      00011C 7F 00            [12]  769 	mov	r7,#0x00
      00011E 24 C9            [12]  770 	add	a,#0xc9
      000120 F5*04            [12]  771 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  772 	mov	a,r7
      000123 34 FF            [12]  773 	addc	a,#0xff
      000125 F5*05            [12]  774 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  775 	mov	dptr,#_hex_to_int_result_10000_75
      00012A E0               [24]  776 	movx	a,@dptr
      00012B FE               [12]  777 	mov	r6,a
      00012C A3               [24]  778 	inc	dptr
      00012D E0               [24]  779 	movx	a,@dptr
      00012E FF               [12]  780 	mov	r7,a
      00012F 90r00r03         [24]  781 	mov	dptr,#_hex_to_int_result_10000_75
      000132 E5*04            [12]  782 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  783 	add	a, r6
      000135 F0               [24]  784 	movx	@dptr,a
      000136 E5*05            [12]  785 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  786 	addc	a, r7
      000139 A3               [24]  787 	inc	dptr
      00013A F0               [24]  788 	movx	@dptr,a
      00013B D0 07            [24]  789 	pop	ar7
      00013D D0 06            [24]  790 	pop	ar6
      00013F D0 05            [24]  791 	pop	ar5
      000141 80 63            [24]  792 	sjmp	00110$
      000143                        793 00105$:
                                    794 ;	main.c:28: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  795 	mov	dptr,#_hex_to_int_ASCII_20000_76
      000146 E0               [24]  796 	movx	a,@dptr
      000147 F5*04            [12]  797 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  798 	inc	dptr
      00014A E0               [24]  799 	movx	a,@dptr
      00014B F5*05            [12]  800 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  801 	clr	c
      00014E E5*04            [12]  802 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  803 	subb	a,#0x61
      000152 E5*05            [12]  804 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  805 	xrl	a,#0x80
      000156 94 80            [12]  806 	subb	a,#0x80
      000158 40 4C            [24]  807 	jc	00110$
      00015A 74 66            [12]  808 	mov	a,#0x66
      00015C 95*04            [12]  809 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  810 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  811 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  812 	xrl	b,#0x80
      000166 95 F0            [12]  813 	subb	a,b
      000168 40 3C            [24]  814 	jc	00110$
                                    815 ;	main.c:30: result += str[i] - 87;
      00016A C0 02            [24]  816 	push	ar2
      00016C C0 03            [24]  817 	push	ar3
      00016E C0 04            [24]  818 	push	ar4
      000170 E8               [12]  819 	mov	a,r0
      000171 2D               [12]  820 	add	a, r5
      000172 FA               [12]  821 	mov	r2,a
      000173 E9               [12]  822 	mov	a,r1
      000174 3E               [12]  823 	addc	a, r6
      000175 FB               [12]  824 	mov	r3,a
      000176 8F 04            [24]  825 	mov	ar4,r7
      000178 8A 82            [24]  826 	mov	dpl,r2
      00017A 8B 83            [24]  827 	mov	dph,r3
      00017C 8C F0            [24]  828 	mov	b,r4
      00017E 12r00r00         [24]  829 	lcall	__gptrget
      000181 7C 00            [12]  830 	mov	r4,#0x00
      000183 24 A9            [12]  831 	add	a,#0xa9
      000185 F5*04            [12]  832 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  833 	mov	a,r4
      000188 34 FF            [12]  834 	addc	a,#0xff
      00018A F5*05            [12]  835 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  836 	mov	dptr,#_hex_to_int_result_10000_75
      00018F E0               [24]  837 	movx	a,@dptr
      000190 FB               [12]  838 	mov	r3,a
      000191 A3               [24]  839 	inc	dptr
      000192 E0               [24]  840 	movx	a,@dptr
      000193 FC               [12]  841 	mov	r4,a
      000194 90r00r03         [24]  842 	mov	dptr,#_hex_to_int_result_10000_75
      000197 E5*04            [12]  843 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  844 	add	a, r3
      00019A F0               [24]  845 	movx	@dptr,a
      00019B E5*05            [12]  846 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  847 	addc	a, r4
      00019E A3               [24]  848 	inc	dptr
      00019F F0               [24]  849 	movx	@dptr,a
                                    850 ;	main.c:34: return result;
      0001A0 D0 04            [24]  851 	pop	ar4
      0001A2 D0 03            [24]  852 	pop	ar3
      0001A4 D0 02            [24]  853 	pop	ar2
                                    854 ;	main.c:30: result += str[i] - 87;
      0001A6                        855 00110$:
                                    856 ;	main.c:32: i++;
      0001A6 08               [12]  857 	inc	r0
      0001A7 B8 00 01         [24]  858 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  859 	inc	r1
      0001AB                        860 00173$:
      0001AB 02r00r32         [24]  861 	ljmp	00112$
      0001AE                        862 00114$:
                                    863 ;	main.c:34: return result;
      0001AE 90r00r03         [24]  864 	mov	dptr,#_hex_to_int_result_10000_75
      0001B1 E0               [24]  865 	movx	a,@dptr
      0001B2 FE               [12]  866 	mov	r6,a
      0001B3 A3               [24]  867 	inc	dptr
      0001B4 E0               [24]  868 	movx	a,@dptr
                                    869 ;	main.c:36: }
      0001B5 8E 82            [24]  870 	mov	dpl,r6
      0001B7 F5 83            [12]  871 	mov	dph,a
      0001B9 22               [24]  872 	ret
                                    873 ;------------------------------------------------------------
                                    874 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    875 ;------------------------------------------------------------
                                    876 ;i                         Allocated with name '_get_user_buffer_size_i_10000_81'
                                    877 ;output                    Allocated with name '_get_user_buffer_size_output_10000_81'
                                    878 ;input                     Allocated with name '_get_user_buffer_size_input_10000_81'
                                    879 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_81'
                                    880 ;------------------------------------------------------------
                                    881 ;	main.c:39: int get_user_buffer_size(void)
                                    882 ;	-----------------------------------------
                                    883 ;	 function get_user_buffer_size
                                    884 ;	-----------------------------------------
      0001BA                        885 _get_user_buffer_size:
                                    886 ;	main.c:45: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  887 	mov	r6,#0x00
      0001BC 7F 00            [12]  888 	mov	r7,#0x00
      0001BE                        889 00103$:
      0001BE C0 07            [24]  890 	push	ar7
      0001C0 C0 06            [24]  891 	push	ar6
      0001C2 12r00r00         [24]  892 	lcall	_getchar
      0001C5 AC 82            [24]  893 	mov	r4, dpl
      0001C7 D0 06            [24]  894 	pop	ar6
      0001C9 D0 07            [24]  895 	pop	ar7
      0001CB BC 0A 02         [24]  896 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  897 	sjmp	00105$
      0001D0                        898 00133$:
      0001D0 BC 0D 02         [24]  899 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  900 	sjmp	00105$
      0001D5                        901 00134$:
      0001D5 C3               [12]  902 	clr	c
      0001D6 EE               [12]  903 	mov	a,r6
      0001D7 94 09            [12]  904 	subb	a,#0x09
      0001D9 EF               [12]  905 	mov	a,r7
      0001DA 64 80            [12]  906 	xrl	a,#0x80
      0001DC 94 80            [12]  907 	subb	a,#0x80
      0001DE 50 2A            [24]  908 	jnc	00105$
                                    909 ;	main.c:47: putchar(ch);
      0001E0 8C 03            [24]  910 	mov	ar3,r4
      0001E2 7D 00            [12]  911 	mov	r5,#0x00
      0001E4 8B 82            [24]  912 	mov	dpl, r3
      0001E6 8D 83            [24]  913 	mov	dph, r5
      0001E8 C0 07            [24]  914 	push	ar7
      0001EA C0 06            [24]  915 	push	ar6
      0001EC C0 04            [24]  916 	push	ar4
      0001EE 12r00r00         [24]  917 	lcall	_putchar
      0001F1 D0 04            [24]  918 	pop	ar4
      0001F3 D0 06            [24]  919 	pop	ar6
      0001F5 D0 07            [24]  920 	pop	ar7
                                    921 ;	main.c:48: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12]  922 	mov	a,r6
      0001F8 24r07            [12]  923 	add	a, #_get_user_buffer_size_input_10000_81
      0001FA F5 82            [12]  924 	mov	dpl,a
      0001FC EF               [12]  925 	mov	a,r7
      0001FD 34s00            [12]  926 	addc	a, #(_get_user_buffer_size_input_10000_81 >> 8)
      0001FF F5 83            [12]  927 	mov	dph,a
      000201 EC               [12]  928 	mov	a,r4
      000202 F0               [24]  929 	movx	@dptr,a
                                    930 ;	main.c:49: i++;
      000203 0E               [12]  931 	inc	r6
      000204 BE 00 B7         [24]  932 	cjne	r6,#0x00,00103$
      000207 0F               [12]  933 	inc	r7
      000208 80 B4            [24]  934 	sjmp	00103$
      00020A                        935 00105$:
                                    936 ;	main.c:51: input[i] = '\0';
      00020A EE               [12]  937 	mov	a,r6
      00020B 24r07            [12]  938 	add	a, #_get_user_buffer_size_input_10000_81
      00020D F5 82            [12]  939 	mov	dpl,a
      00020F EF               [12]  940 	mov	a,r7
      000210 34s00            [12]  941 	addc	a, #(_get_user_buffer_size_input_10000_81 >> 8)
      000212 F5 83            [12]  942 	mov	dph,a
      000214 E4               [12]  943 	clr	a
      000215 F0               [24]  944 	movx	@dptr,a
                                    945 ;	main.c:52: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24]  946 	mov	dptr,#_get_user_buffer_size_input_10000_81
      000219 F5 F0            [12]  947 	mov	b,a
      00021B 12r00r00         [24]  948 	lcall	_hex_to_int
      00021E AE 82            [24]  949 	mov	r6, dpl
      000220 AF 83            [24]  950 	mov	r7, dph
                                    951 ;	main.c:53: printf_tiny("\n\r");
      000222 C0 07            [24]  952 	push	ar7
      000224 C0 06            [24]  953 	push	ar6
      000226 74r00            [12]  954 	mov	a,#___str_0
      000228 C0 E0            [24]  955 	push	acc
      00022A 74s00            [12]  956 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24]  957 	push	acc
      00022E 12r00r00         [24]  958 	lcall	_printf_tiny
      000231 15 81            [12]  959 	dec	sp
      000233 15 81            [12]  960 	dec	sp
      000235 D0 06            [24]  961 	pop	ar6
      000237 D0 07            [24]  962 	pop	ar7
                                    963 ;	main.c:55: return output;
      000239 8E 82            [24]  964 	mov	dpl, r6
      00023B 8F 83            [24]  965 	mov	dph, r7
                                    966 ;	main.c:56: }
      00023D 22               [24]  967 	ret
                                    968 ;------------------------------------------------------------
                                    969 ;Allocation info for local variables in function 'main'
                                    970 ;------------------------------------------------------------
                                    971 ;c                         Allocated with name '_main_c_20001_86'
                                    972 ;reg_bank                  Allocated with name '_main_reg_bank_40002_89'
                                    973 ;addr                      Allocated with name '_main_addr_40003_90'
                                    974 ;data                      Allocated with name '_main_data_40004_91'
                                    975 ;num_bytes                 Allocated with name '_main_num_bytes_40002_93'
                                    976 ;start_address             Allocated with name '_main_start_address_40003_94'
                                    977 ;buffer                    Allocated with name '_main_buffer_40003_94'
                                    978 ;i                         Allocated with name '_main_i_50003_95'
                                    979 ;num_bytes                 Allocated with name '_main_num_bytes_40002_98'
                                    980 ;start_address             Allocated with name '_main_start_address_40003_99'
                                    981 ;buffer                    Allocated with name '_main_buffer_40003_99'
                                    982 ;reg_bank                  Allocated with name '_main_reg_bank_40002_101'
                                    983 ;addr                      Allocated with name '_main_addr_40003_102'
                                    984 ;data                      Allocated with name '_main_data_40003_102'
                                    985 ;addr                      Allocated with name '_main_addr_40002_104'
                                    986 ;data                      Allocated with name '_main_data_40003_105'
                                    987 ;addr                      Allocated with name '_main_addr_40002_107'
                                    988 ;data                      Allocated with name '_main_data_40002_107'
                                    989 ;addr                      Allocated with name '_main_addr_40002_110'
                                    990 ;bank                      Allocated with name '_main_bank_40003_111'
                                    991 ;data                      Allocated with name '_main_data_40003_111'
                                    992 ;i                         Allocated with name '_main_i_50001_116'
                                    993 ;------------------------------------------------------------
                                    994 ;	main.c:58: void main(void)
                                    995 ;	-----------------------------------------
                                    996 ;	 function main
                                    997 ;	-----------------------------------------
      00023E                        998 _main:
                                    999 ;	main.c:60: ENC_RESET = 1;
                                   1000 ;	assignBit
      00023E D2 90            [12] 1001 	setb	_P1_0
                                   1002 ;	main.c:61: printf("SPI Operations on 8051\n\r");
      000240 74r03            [12] 1003 	mov	a,#___str_1
      000242 C0 E0            [24] 1004 	push	acc
      000244 74s00            [12] 1005 	mov	a,#(___str_1 >> 8)
      000246 C0 E0            [24] 1006 	push	acc
      000248 74 80            [12] 1007 	mov	a,#0x80
      00024A C0 E0            [24] 1008 	push	acc
      00024C 12r00r00         [24] 1009 	lcall	_printf
      00024F 15 81            [12] 1010 	dec	sp
      000251 15 81            [12] 1011 	dec	sp
      000253 15 81            [12] 1012 	dec	sp
                                   1013 ;	main.c:62: configure_SPI();
      000255 12r00r00         [24] 1014 	lcall	_configure_SPI
                                   1015 ;	main.c:63: RX_disable();
      000258 12r00r00         [24] 1016 	lcall	_RX_disable
                                   1017 ;	main.c:65: while(1)
      00025B                       1018 00118$:
                                   1019 ;	main.c:67: printf("\n\rChoose an action: \n\r");
      00025B 74r1C            [12] 1020 	mov	a,#___str_2
      00025D C0 E0            [24] 1021 	push	acc
      00025F 74s00            [12] 1022 	mov	a,#(___str_2 >> 8)
      000261 C0 E0            [24] 1023 	push	acc
      000263 74 80            [12] 1024 	mov	a,#0x80
      000265 C0 E0            [24] 1025 	push	acc
      000267 12r00r00         [24] 1026 	lcall	_printf
      00026A 15 81            [12] 1027 	dec	sp
      00026C 15 81            [12] 1028 	dec	sp
      00026E 15 81            [12] 1029 	dec	sp
                                   1030 ;	main.c:68: printf("1 --> Control Write\n\r");
      000270 74r33            [12] 1031 	mov	a,#___str_3
      000272 C0 E0            [24] 1032 	push	acc
      000274 74s00            [12] 1033 	mov	a,#(___str_3 >> 8)
      000276 C0 E0            [24] 1034 	push	acc
      000278 74 80            [12] 1035 	mov	a,#0x80
      00027A C0 E0            [24] 1036 	push	acc
      00027C 12r00r00         [24] 1037 	lcall	_printf
      00027F 15 81            [12] 1038 	dec	sp
      000281 15 81            [12] 1039 	dec	sp
      000283 15 81            [12] 1040 	dec	sp
                                   1041 ;	main.c:69: printf("2 --> Buffer Write\n\r");
      000285 74r49            [12] 1042 	mov	a,#___str_4
      000287 C0 E0            [24] 1043 	push	acc
      000289 74s00            [12] 1044 	mov	a,#(___str_4 >> 8)
      00028B C0 E0            [24] 1045 	push	acc
      00028D 74 80            [12] 1046 	mov	a,#0x80
      00028F C0 E0            [24] 1047 	push	acc
      000291 12r00r00         [24] 1048 	lcall	_printf
      000294 15 81            [12] 1049 	dec	sp
      000296 15 81            [12] 1050 	dec	sp
      000298 15 81            [12] 1051 	dec	sp
                                   1052 ;	main.c:70: printf("3 --> Buffer Read\n\r");
      00029A 74r5E            [12] 1053 	mov	a,#___str_5
      00029C C0 E0            [24] 1054 	push	acc
      00029E 74s00            [12] 1055 	mov	a,#(___str_5 >> 8)
      0002A0 C0 E0            [24] 1056 	push	acc
      0002A2 74 80            [12] 1057 	mov	a,#0x80
      0002A4 C0 E0            [24] 1058 	push	acc
      0002A6 12r00r00         [24] 1059 	lcall	_printf
      0002A9 15 81            [12] 1060 	dec	sp
      0002AB 15 81            [12] 1061 	dec	sp
      0002AD 15 81            [12] 1062 	dec	sp
                                   1063 ;	main.c:71: printf("4 --> MAC Register Read\n\r");
      0002AF 74r72            [12] 1064 	mov	a,#___str_6
      0002B1 C0 E0            [24] 1065 	push	acc
      0002B3 74s00            [12] 1066 	mov	a,#(___str_6 >> 8)
      0002B5 C0 E0            [24] 1067 	push	acc
      0002B7 74 80            [12] 1068 	mov	a,#0x80
      0002B9 C0 E0            [24] 1069 	push	acc
      0002BB 12r00r00         [24] 1070 	lcall	_printf
      0002BE 15 81            [12] 1071 	dec	sp
      0002C0 15 81            [12] 1072 	dec	sp
      0002C2 15 81            [12] 1073 	dec	sp
                                   1074 ;	main.c:72: printf("5 --> PHY SPI Write\n\r");
      0002C4 74r8C            [12] 1075 	mov	a,#___str_7
      0002C6 C0 E0            [24] 1076 	push	acc
      0002C8 74s00            [12] 1077 	mov	a,#(___str_7 >> 8)
      0002CA C0 E0            [24] 1078 	push	acc
      0002CC 74 80            [12] 1079 	mov	a,#0x80
      0002CE C0 E0            [24] 1080 	push	acc
      0002D0 12r00r00         [24] 1081 	lcall	_printf
      0002D3 15 81            [12] 1082 	dec	sp
      0002D5 15 81            [12] 1083 	dec	sp
      0002D7 15 81            [12] 1084 	dec	sp
                                   1085 ;	main.c:73: printf("6 --> PHY SPI Read\n\r");
      0002D9 74rA2            [12] 1086 	mov	a,#___str_8
      0002DB C0 E0            [24] 1087 	push	acc
      0002DD 74s00            [12] 1088 	mov	a,#(___str_8 >> 8)
      0002DF C0 E0            [24] 1089 	push	acc
      0002E1 74 80            [12] 1090 	mov	a,#0x80
      0002E3 C0 E0            [24] 1091 	push	acc
      0002E5 12r00r00         [24] 1092 	lcall	_printf
      0002E8 15 81            [12] 1093 	dec	sp
      0002EA 15 81            [12] 1094 	dec	sp
      0002EC 15 81            [12] 1095 	dec	sp
                                   1096 ;	main.c:74: printf("7 --> ENC Reset\n\r");
      0002EE 74rB7            [12] 1097 	mov	a,#___str_9
      0002F0 C0 E0            [24] 1098 	push	acc
      0002F2 74s00            [12] 1099 	mov	a,#(___str_9 >> 8)
      0002F4 C0 E0            [24] 1100 	push	acc
      0002F6 74 80            [12] 1101 	mov	a,#0x80
      0002F8 C0 E0            [24] 1102 	push	acc
      0002FA 12r00r00         [24] 1103 	lcall	_printf
      0002FD 15 81            [12] 1104 	dec	sp
      0002FF 15 81            [12] 1105 	dec	sp
      000301 15 81            [12] 1106 	dec	sp
                                   1107 ;	main.c:75: printf("8 --> Read ETH Register\n\r");
      000303 74rC9            [12] 1108 	mov	a,#___str_10
      000305 C0 E0            [24] 1109 	push	acc
      000307 74s00            [12] 1110 	mov	a,#(___str_10 >> 8)
      000309 C0 E0            [24] 1111 	push	acc
      00030B 74 80            [12] 1112 	mov	a,#0x80
      00030D C0 E0            [24] 1113 	push	acc
      00030F 12r00r00         [24] 1114 	lcall	_printf
      000312 15 81            [12] 1115 	dec	sp
      000314 15 81            [12] 1116 	dec	sp
      000316 15 81            [12] 1117 	dec	sp
                                   1118 ;	main.c:76: printf("9 --> Display Menu\n\r");
      000318 74rE3            [12] 1119 	mov	a,#___str_11
      00031A C0 E0            [24] 1120 	push	acc
      00031C 74s00            [12] 1121 	mov	a,#(___str_11 >> 8)
      00031E C0 E0            [24] 1122 	push	acc
      000320 74 80            [12] 1123 	mov	a,#0x80
      000322 C0 E0            [24] 1124 	push	acc
      000324 12r00r00         [24] 1125 	lcall	_printf
      000327 15 81            [12] 1126 	dec	sp
      000329 15 81            [12] 1127 	dec	sp
      00032B 15 81            [12] 1128 	dec	sp
                                   1129 ;	main.c:77: printf("A --> Send ARP Request\n\r");
      00032D 74rF8            [12] 1130 	mov	a,#___str_12
      00032F C0 E0            [24] 1131 	push	acc
      000331 74s00            [12] 1132 	mov	a,#(___str_12 >> 8)
      000333 C0 E0            [24] 1133 	push	acc
      000335 74 80            [12] 1134 	mov	a,#0x80
      000337 C0 E0            [24] 1135 	push	acc
      000339 12r00r00         [24] 1136 	lcall	_printf
      00033C 15 81            [12] 1137 	dec	sp
      00033E 15 81            [12] 1138 	dec	sp
      000340 15 81            [12] 1139 	dec	sp
                                   1140 ;	main.c:78: printf("B --> Init RX buffers\n\r");
      000342 74r11            [12] 1141 	mov	a,#___str_13
      000344 C0 E0            [24] 1142 	push	acc
      000346 74s01            [12] 1143 	mov	a,#(___str_13 >> 8)
      000348 C0 E0            [24] 1144 	push	acc
      00034A 74 80            [12] 1145 	mov	a,#0x80
      00034C C0 E0            [24] 1146 	push	acc
      00034E 12r00r00         [24] 1147 	lcall	_printf
      000351 15 81            [12] 1148 	dec	sp
      000353 15 81            [12] 1149 	dec	sp
      000355 15 81            [12] 1150 	dec	sp
                                   1151 ;	main.c:79: printf("C --> Hard Reset(nRESET pin)\n\r");
      000357 74r29            [12] 1152 	mov	a,#___str_14
      000359 C0 E0            [24] 1153 	push	acc
      00035B 74s01            [12] 1154 	mov	a,#(___str_14 >> 8)
      00035D C0 E0            [24] 1155 	push	acc
      00035F 74 80            [12] 1156 	mov	a,#0x80
      000361 C0 E0            [24] 1157 	push	acc
      000363 12r00r00         [24] 1158 	lcall	_printf
      000366 15 81            [12] 1159 	dec	sp
      000368 15 81            [12] 1160 	dec	sp
      00036A 15 81            [12] 1161 	dec	sp
                                   1162 ;	main.c:81: char c = getchar();
      00036C 12r00r00         [24] 1163 	lcall	_getchar
      00036F AE 82            [24] 1164 	mov	r6, dpl
                                   1165 ;	main.c:82: putchar(c);
      000371 8E 05            [24] 1166 	mov	ar5,r6
      000373 7F 00            [12] 1167 	mov	r7,#0x00
      000375 8D 82            [24] 1168 	mov	dpl, r5
      000377 8F 83            [24] 1169 	mov	dph, r7
      000379 C0 06            [24] 1170 	push	ar6
      00037B 12r00r00         [24] 1171 	lcall	_putchar
                                   1172 ;	main.c:83: printf("\n\r");
      00037E 74r00            [12] 1173 	mov	a,#___str_0
      000380 C0 E0            [24] 1174 	push	acc
      000382 74s00            [12] 1175 	mov	a,#(___str_0 >> 8)
      000384 C0 E0            [24] 1176 	push	acc
      000386 74 80            [12] 1177 	mov	a,#0x80
      000388 C0 E0            [24] 1178 	push	acc
      00038A 12r00r00         [24] 1179 	lcall	_printf
      00038D 15 81            [12] 1180 	dec	sp
      00038F 15 81            [12] 1181 	dec	sp
      000391 15 81            [12] 1182 	dec	sp
      000393 D0 06            [24] 1183 	pop	ar6
                                   1184 ;	main.c:85: switch(c)
      000395 BE 31 00         [24] 1185 	cjne	r6,#0x31,00172$
      000398                       1186 00172$:
      000398 50 03            [24] 1187 	jnc	00173$
      00039A 02r08r27         [24] 1188 	ljmp	00115$
      00039D                       1189 00173$:
      00039D EE               [12] 1190 	mov	a,r6
      00039E 24 BC            [12] 1191 	add	a,#0xff - 0x43
      0003A0 50 03            [24] 1192 	jnc	00174$
      0003A2 02r08r27         [24] 1193 	ljmp	00115$
      0003A5                       1194 00174$:
      0003A5 EE               [12] 1195 	mov	a,r6
      0003A6 24 CF            [12] 1196 	add	a,#0xcf
      0003A8 FE               [12] 1197 	mov	r6,a
      0003A9 24 0A            [12] 1198 	add	a,#(00175$-3-.)
      0003AB 83               [24] 1199 	movc	a,@a+pc
      0003AC F5 82            [12] 1200 	mov	dpl,a
      0003AE EE               [12] 1201 	mov	a,r6
      0003AF 24 17            [12] 1202 	add	a,#(00176$-3-.)
      0003B1 83               [24] 1203 	movc	a,@a+pc
      0003B2 F5 83            [12] 1204 	mov	dph,a
      0003B4 E4               [12] 1205 	clr	a
      0003B5 73               [24] 1206 	jmp	@a+dptr
      0003B6                       1207 00175$:
      0003B6rDC                    1208 	.db	00101$
      0003B7r44                    1209 	.db	00102$
      0003B8r42                    1210 	.db	00104$
      0003B9rA1                    1211 	.db	00105$
      0003BAr03                    1212 	.db	00106$
      0003BBr6E                    1213 	.db	00107$
      0003BCrA9                    1214 	.db	00108$
      0003BDrC4                    1215 	.db	00109$
      0003BEr26                    1216 	.db	00110$
      0003BFr27                    1217 	.db	00115$
      0003C0r27                    1218 	.db	00115$
      0003C1r27                    1219 	.db	00115$
      0003C2r27                    1220 	.db	00115$
      0003C3r27                    1221 	.db	00115$
      0003C4r27                    1222 	.db	00115$
      0003C5r27                    1223 	.db	00115$
      0003C6rE6                    1224 	.db	00111$
      0003C7rEF                    1225 	.db	00112$
      0003C8rF5                    1226 	.db	00113$
      0003C9                       1227 00176$:
      0003C9s03                    1228 	.db	00101$>>8
      0003CAs04                    1229 	.db	00102$>>8
      0003CBs05                    1230 	.db	00104$>>8
      0003CCs05                    1231 	.db	00105$>>8
      0003CDs06                    1232 	.db	00106$>>8
      0003CEs06                    1233 	.db	00107$>>8
      0003CFs06                    1234 	.db	00108$>>8
      0003D0s06                    1235 	.db	00109$>>8
      0003D1s07                    1236 	.db	00110$>>8
      0003D2s08                    1237 	.db	00115$>>8
      0003D3s08                    1238 	.db	00115$>>8
      0003D4s08                    1239 	.db	00115$>>8
      0003D5s08                    1240 	.db	00115$>>8
      0003D6s08                    1241 	.db	00115$>>8
      0003D7s08                    1242 	.db	00115$>>8
      0003D8s08                    1243 	.db	00115$>>8
      0003D9s07                    1244 	.db	00111$>>8
      0003DAs07                    1245 	.db	00112$>>8
      0003DBs07                    1246 	.db	00113$>>8
                                   1247 ;	main.c:87: case '1': {
      0003DC                       1248 00101$:
                                   1249 ;	main.c:88: printf("Enter the register bank to select:\n\r");
      0003DC 74r48            [12] 1250 	mov	a,#___str_15
      0003DE C0 E0            [24] 1251 	push	acc
      0003E0 74s01            [12] 1252 	mov	a,#(___str_15 >> 8)
      0003E2 C0 E0            [24] 1253 	push	acc
      0003E4 74 80            [12] 1254 	mov	a,#0x80
      0003E6 C0 E0            [24] 1255 	push	acc
      0003E8 12r00r00         [24] 1256 	lcall	_printf
      0003EB 15 81            [12] 1257 	dec	sp
      0003ED 15 81            [12] 1258 	dec	sp
      0003EF 15 81            [12] 1259 	dec	sp
                                   1260 ;	main.c:89: uint8_t reg_bank = get_user_buffer_size();
      0003F1 12r01rBA         [24] 1261 	lcall	_get_user_buffer_size
      0003F4 AE 82            [24] 1262 	mov	r6, dpl
                                   1263 ;	main.c:90: printf("Enter the address of the Control Register:\n\r");
      0003F6 C0 06            [24] 1264 	push	ar6
      0003F8 74r6D            [12] 1265 	mov	a,#___str_16
      0003FA C0 E0            [24] 1266 	push	acc
      0003FC 74s01            [12] 1267 	mov	a,#(___str_16 >> 8)
      0003FE C0 E0            [24] 1268 	push	acc
      000400 74 80            [12] 1269 	mov	a,#0x80
      000402 C0 E0            [24] 1270 	push	acc
      000404 12r00r00         [24] 1271 	lcall	_printf
      000407 15 81            [12] 1272 	dec	sp
      000409 15 81            [12] 1273 	dec	sp
      00040B 15 81            [12] 1274 	dec	sp
                                   1275 ;	main.c:91: uint8_t addr = get_user_buffer_size();
      00040D 12r01rBA         [24] 1276 	lcall	_get_user_buffer_size
      000410 AD 82            [24] 1277 	mov	r5, dpl
                                   1278 ;	main.c:92: printf("Enter the data you want to write:\n\r");
      000412 C0 05            [24] 1279 	push	ar5
      000414 74r9A            [12] 1280 	mov	a,#___str_17
      000416 C0 E0            [24] 1281 	push	acc
      000418 74s01            [12] 1282 	mov	a,#(___str_17 >> 8)
      00041A C0 E0            [24] 1283 	push	acc
      00041C 74 80            [12] 1284 	mov	a,#0x80
      00041E C0 E0            [24] 1285 	push	acc
      000420 12r00r00         [24] 1286 	lcall	_printf
      000423 15 81            [12] 1287 	dec	sp
      000425 15 81            [12] 1288 	dec	sp
      000427 15 81            [12] 1289 	dec	sp
                                   1290 ;	main.c:93: uint8_t data = get_user_buffer_size();
      000429 12r01rBA         [24] 1291 	lcall	_get_user_buffer_size
      00042C AC 82            [24] 1292 	mov	r4, dpl
      00042E D0 05            [24] 1293 	pop	ar5
      000430 D0 06            [24] 1294 	pop	ar6
                                   1295 ;	main.c:94: spi_control_write(reg_bank, addr, data);
      000432 90r00r00         [24] 1296 	mov	dptr,#_spi_control_write_PARM_2
      000435 ED               [12] 1297 	mov	a,r5
      000436 F0               [24] 1298 	movx	@dptr,a
      000437 90r00r00         [24] 1299 	mov	dptr,#_spi_control_write_PARM_3
      00043A EC               [12] 1300 	mov	a,r4
      00043B F0               [24] 1301 	movx	@dptr,a
      00043C 8E 82            [24] 1302 	mov	dpl, r6
      00043E 12r00r00         [24] 1303 	lcall	_spi_control_write
                                   1304 ;	main.c:95: break;
      000441 02r02r5B         [24] 1305 	ljmp	00118$
                                   1306 ;	main.c:97: case '2': {
      000444                       1307 00102$:
                                   1308 ;	main.c:98: printf("Enter the number of bytes to write:\n\r");
      000444 74rBE            [12] 1309 	mov	a,#___str_18
      000446 C0 E0            [24] 1310 	push	acc
      000448 74s01            [12] 1311 	mov	a,#(___str_18 >> 8)
      00044A C0 E0            [24] 1312 	push	acc
      00044C 74 80            [12] 1313 	mov	a,#0x80
      00044E C0 E0            [24] 1314 	push	acc
      000450 12r00r00         [24] 1315 	lcall	_printf
      000453 15 81            [12] 1316 	dec	sp
      000455 15 81            [12] 1317 	dec	sp
      000457 15 81            [12] 1318 	dec	sp
                                   1319 ;	main.c:99: int num_bytes = get_user_buffer_size();
      000459 12r01rBA         [24] 1320 	lcall	_get_user_buffer_size
      00045C AE 82            [24] 1321 	mov	r6, dpl
      00045E AF 83            [24] 1322 	mov	r7, dph
                                   1323 ;	main.c:100: printf("Enter the starting address:\n\r");
      000460 C0 07            [24] 1324 	push	ar7
      000462 C0 06            [24] 1325 	push	ar6
      000464 74rE4            [12] 1326 	mov	a,#___str_19
      000466 C0 E0            [24] 1327 	push	acc
      000468 74s01            [12] 1328 	mov	a,#(___str_19 >> 8)
      00046A C0 E0            [24] 1329 	push	acc
      00046C 74 80            [12] 1330 	mov	a,#0x80
      00046E C0 E0            [24] 1331 	push	acc
      000470 12r00r00         [24] 1332 	lcall	_printf
      000473 15 81            [12] 1333 	dec	sp
      000475 15 81            [12] 1334 	dec	sp
      000477 15 81            [12] 1335 	dec	sp
                                   1336 ;	main.c:101: uint16_t start_address = get_user_buffer_size();
      000479 12r01rBA         [24] 1337 	lcall	_get_user_buffer_size
      00047C AC 82            [24] 1338 	mov	r4, dpl
      00047E AD 83            [24] 1339 	mov	r5, dph
      000480 D0 06            [24] 1340 	pop	ar6
      000482 D0 07            [24] 1341 	pop	ar7
                                   1342 ;	main.c:103: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      000484 C0 07            [24] 1343 	push	ar7
      000486 C0 06            [24] 1344 	push	ar6
      000488 C0 05            [24] 1345 	push	ar5
      00048A C0 04            [24] 1346 	push	ar4
      00048C C0 06            [24] 1347 	push	ar6
      00048E C0 07            [24] 1348 	push	ar7
      000490 74r02            [12] 1349 	mov	a,#___str_20
      000492 C0 E0            [24] 1350 	push	acc
      000494 74s02            [12] 1351 	mov	a,#(___str_20 >> 8)
      000496 C0 E0            [24] 1352 	push	acc
      000498 74 80            [12] 1353 	mov	a,#0x80
      00049A C0 E0            [24] 1354 	push	acc
      00049C 12r00r00         [24] 1355 	lcall	_printf
      00049F E5 81            [12] 1356 	mov	a,sp
      0004A1 24 FB            [12] 1357 	add	a,#0xfb
      0004A3 F5 81            [12] 1358 	mov	sp,a
      0004A5 D0 04            [24] 1359 	pop	ar4
      0004A7 D0 05            [24] 1360 	pop	ar5
      0004A9 D0 06            [24] 1361 	pop	ar6
      0004AB D0 07            [24] 1362 	pop	ar7
                                   1363 ;	main.c:104: for (int i = 0; i < num_bytes; i++) {
      0004AD 7A 00            [12] 1364 	mov	r2,#0x00
      0004AF 7B 00            [12] 1365 	mov	r3,#0x00
      0004B1                       1366 00121$:
      0004B1 C3               [12] 1367 	clr	c
      0004B2 EA               [12] 1368 	mov	a,r2
      0004B3 9E               [12] 1369 	subb	a,r6
      0004B4 EB               [12] 1370 	mov	a,r3
      0004B5 64 80            [12] 1371 	xrl	a,#0x80
      0004B7 8F F0            [24] 1372 	mov	b,r7
      0004B9 63 F0 80         [24] 1373 	xrl	b,#0x80
      0004BC 95 F0            [12] 1374 	subb	a,b
      0004BE 50 63            [24] 1375 	jnc	00103$
                                   1376 ;	main.c:105: printf("Byte %d: ", i);
      0004C0 C0 04            [24] 1377 	push	ar4
      0004C2 C0 05            [24] 1378 	push	ar5
      0004C4 C0 07            [24] 1379 	push	ar7
      0004C6 C0 06            [24] 1380 	push	ar6
      0004C8 C0 05            [24] 1381 	push	ar5
      0004CA C0 04            [24] 1382 	push	ar4
      0004CC C0 03            [24] 1383 	push	ar3
      0004CE C0 02            [24] 1384 	push	ar2
      0004D0 C0 02            [24] 1385 	push	ar2
      0004D2 C0 03            [24] 1386 	push	ar3
      0004D4 74r25            [12] 1387 	mov	a,#___str_21
      0004D6 C0 E0            [24] 1388 	push	acc
      0004D8 74s02            [12] 1389 	mov	a,#(___str_21 >> 8)
      0004DA C0 E0            [24] 1390 	push	acc
      0004DC 74 80            [12] 1391 	mov	a,#0x80
      0004DE C0 E0            [24] 1392 	push	acc
      0004E0 12r00r00         [24] 1393 	lcall	_printf
      0004E3 E5 81            [12] 1394 	mov	a,sp
      0004E5 24 FB            [12] 1395 	add	a,#0xfb
      0004E7 F5 81            [12] 1396 	mov	sp,a
      0004E9 D0 02            [24] 1397 	pop	ar2
      0004EB D0 03            [24] 1398 	pop	ar3
      0004ED D0 04            [24] 1399 	pop	ar4
      0004EF D0 05            [24] 1400 	pop	ar5
                                   1401 ;	main.c:106: buffer[i] = get_user_buffer_size();
      0004F1 EA               [12] 1402 	mov	a,r2
      0004F2 24r11            [12] 1403 	add	a, #_main_buffer_40003_94
      0004F4 F8               [12] 1404 	mov	r0,a
      0004F5 EB               [12] 1405 	mov	a,r3
      0004F6 34s00            [12] 1406 	addc	a, #(_main_buffer_40003_94 >> 8)
      0004F8 F9               [12] 1407 	mov	r1,a
      0004F9 C0 03            [24] 1408 	push	ar3
      0004FB C0 02            [24] 1409 	push	ar2
      0004FD C0 01            [24] 1410 	push	ar1
      0004FF C0 00            [24] 1411 	push	ar0
      000501 12r01rBA         [24] 1412 	lcall	_get_user_buffer_size
      000504 AC 82            [24] 1413 	mov	r4, dpl
      000506 D0 00            [24] 1414 	pop	ar0
      000508 D0 01            [24] 1415 	pop	ar1
      00050A D0 02            [24] 1416 	pop	ar2
      00050C D0 03            [24] 1417 	pop	ar3
      00050E D0 06            [24] 1418 	pop	ar6
      000510 D0 07            [24] 1419 	pop	ar7
      000512 88 82            [24] 1420 	mov	dpl,r0
      000514 89 83            [24] 1421 	mov	dph,r1
      000516 EC               [12] 1422 	mov	a,r4
      000517 F0               [24] 1423 	movx	@dptr,a
                                   1424 ;	main.c:104: for (int i = 0; i < num_bytes; i++) {
      000518 0A               [12] 1425 	inc	r2
      000519 BA 00 01         [24] 1426 	cjne	r2,#0x00,00178$
      00051C 0B               [12] 1427 	inc	r3
      00051D                       1428 00178$:
      00051D D0 05            [24] 1429 	pop	ar5
      00051F D0 04            [24] 1430 	pop	ar4
      000521 80 8E            [24] 1431 	sjmp	00121$
      000523                       1432 00103$:
                                   1433 ;	main.c:108: spi_buffer_write(num_bytes, start_address, buffer);
      000523 90r00r00         [24] 1434 	mov	dptr,#_spi_buffer_write_PARM_2
      000526 EC               [12] 1435 	mov	a,r4
      000527 F0               [24] 1436 	movx	@dptr,a
      000528 ED               [12] 1437 	mov	a,r5
      000529 A3               [24] 1438 	inc	dptr
      00052A F0               [24] 1439 	movx	@dptr,a
      00052B 90r00r00         [24] 1440 	mov	dptr,#_spi_buffer_write_PARM_3
      00052E 74r11            [12] 1441 	mov	a,#_main_buffer_40003_94
      000530 F0               [24] 1442 	movx	@dptr,a
      000531 74s00            [12] 1443 	mov	a,#(_main_buffer_40003_94 >> 8)
      000533 A3               [24] 1444 	inc	dptr
      000534 F0               [24] 1445 	movx	@dptr,a
      000535 E4               [12] 1446 	clr	a
      000536 A3               [24] 1447 	inc	dptr
      000537 F0               [24] 1448 	movx	@dptr,a
      000538 8E 82            [24] 1449 	mov	dpl, r6
      00053A 8F 83            [24] 1450 	mov	dph, r7
      00053C 12r00r00         [24] 1451 	lcall	_spi_buffer_write
                                   1452 ;	main.c:109: break;
      00053F 02r02r5B         [24] 1453 	ljmp	00118$
                                   1454 ;	main.c:111: case '3': {
      000542                       1455 00104$:
                                   1456 ;	main.c:112: printf("Enter the number of bytes to read:\n\r");
      000542 74r2F            [12] 1457 	mov	a,#___str_22
      000544 C0 E0            [24] 1458 	push	acc
      000546 74s02            [12] 1459 	mov	a,#(___str_22 >> 8)
      000548 C0 E0            [24] 1460 	push	acc
      00054A 74 80            [12] 1461 	mov	a,#0x80
      00054C C0 E0            [24] 1462 	push	acc
      00054E 12r00r00         [24] 1463 	lcall	_printf
      000551 15 81            [12] 1464 	dec	sp
      000553 15 81            [12] 1465 	dec	sp
      000555 15 81            [12] 1466 	dec	sp
                                   1467 ;	main.c:113: int num_bytes = get_user_buffer_size();
      000557 12r01rBA         [24] 1468 	lcall	_get_user_buffer_size
      00055A AE 82            [24] 1469 	mov	r6, dpl
      00055C AF 83            [24] 1470 	mov	r7, dph
                                   1471 ;	main.c:114: printf("Enter the starting address:\n\r");
      00055E C0 07            [24] 1472 	push	ar7
      000560 C0 06            [24] 1473 	push	ar6
      000562 74rE4            [12] 1474 	mov	a,#___str_19
      000564 C0 E0            [24] 1475 	push	acc
      000566 74s01            [12] 1476 	mov	a,#(___str_19 >> 8)
      000568 C0 E0            [24] 1477 	push	acc
      00056A 74 80            [12] 1478 	mov	a,#0x80
      00056C C0 E0            [24] 1479 	push	acc
      00056E 12r00r00         [24] 1480 	lcall	_printf
      000571 15 81            [12] 1481 	dec	sp
      000573 15 81            [12] 1482 	dec	sp
      000575 15 81            [12] 1483 	dec	sp
                                   1484 ;	main.c:115: uint16_t start_address = get_user_buffer_size();
      000577 12r01rBA         [24] 1485 	lcall	_get_user_buffer_size
      00057A AC 82            [24] 1486 	mov	r4, dpl
      00057C AD 83            [24] 1487 	mov	r5, dph
      00057E D0 06            [24] 1488 	pop	ar6
      000580 D0 07            [24] 1489 	pop	ar7
                                   1490 ;	main.c:117: spi_buffer_read(num_bytes, start_address, buffer);
      000582 90r00r00         [24] 1491 	mov	dptr,#_spi_buffer_read_PARM_2
      000585 EC               [12] 1492 	mov	a,r4
      000586 F0               [24] 1493 	movx	@dptr,a
      000587 ED               [12] 1494 	mov	a,r5
      000588 A3               [24] 1495 	inc	dptr
      000589 F0               [24] 1496 	movx	@dptr,a
      00058A 90r00r00         [24] 1497 	mov	dptr,#_spi_buffer_read_PARM_3
      00058D 74r11            [12] 1498 	mov	a,#_main_buffer_40003_99
      00058F F0               [24] 1499 	movx	@dptr,a
      000590 74s01            [12] 1500 	mov	a,#(_main_buffer_40003_99 >> 8)
      000592 A3               [24] 1501 	inc	dptr
      000593 F0               [24] 1502 	movx	@dptr,a
      000594 E4               [12] 1503 	clr	a
      000595 A3               [24] 1504 	inc	dptr
      000596 F0               [24] 1505 	movx	@dptr,a
      000597 8E 82            [24] 1506 	mov	dpl, r6
      000599 8F 83            [24] 1507 	mov	dph, r7
      00059B 12r00r00         [24] 1508 	lcall	_spi_buffer_read
                                   1509 ;	main.c:145: break;
      00059E 02r02r5B         [24] 1510 	ljmp	00118$
                                   1511 ;	main.c:147: case '4': {
      0005A1                       1512 00105$:
                                   1513 ;	main.c:148: printf("Enter the MAC register bank to select:\n\r");
      0005A1 74r54            [12] 1514 	mov	a,#___str_23
      0005A3 C0 E0            [24] 1515 	push	acc
      0005A5 74s02            [12] 1516 	mov	a,#(___str_23 >> 8)
      0005A7 C0 E0            [24] 1517 	push	acc
      0005A9 74 80            [12] 1518 	mov	a,#0x80
      0005AB C0 E0            [24] 1519 	push	acc
      0005AD 12r00r00         [24] 1520 	lcall	_printf
      0005B0 15 81            [12] 1521 	dec	sp
      0005B2 15 81            [12] 1522 	dec	sp
      0005B4 15 81            [12] 1523 	dec	sp
                                   1524 ;	main.c:149: uint8_t reg_bank = get_user_buffer_size();
      0005B6 12r01rBA         [24] 1525 	lcall	_get_user_buffer_size
      0005B9 AE 82            [24] 1526 	mov	r6, dpl
                                   1527 ;	main.c:150: printf("Enter the address of the MAC Register:\n\r");
      0005BB C0 06            [24] 1528 	push	ar6
      0005BD 74r7D            [12] 1529 	mov	a,#___str_24
      0005BF C0 E0            [24] 1530 	push	acc
      0005C1 74s02            [12] 1531 	mov	a,#(___str_24 >> 8)
      0005C3 C0 E0            [24] 1532 	push	acc
      0005C5 74 80            [12] 1533 	mov	a,#0x80
      0005C7 C0 E0            [24] 1534 	push	acc
      0005C9 12r00r00         [24] 1535 	lcall	_printf
      0005CC 15 81            [12] 1536 	dec	sp
      0005CE 15 81            [12] 1537 	dec	sp
      0005D0 15 81            [12] 1538 	dec	sp
                                   1539 ;	main.c:151: uint8_t addr = get_user_buffer_size();
      0005D2 12r01rBA         [24] 1540 	lcall	_get_user_buffer_size
      0005D5 AD 82            [24] 1541 	mov	r5, dpl
      0005D7 D0 06            [24] 1542 	pop	ar6
                                   1543 ;	main.c:152: uint8_t data = mac_spi_read(addr, reg_bank);
      0005D9 90r00r00         [24] 1544 	mov	dptr,#_mac_spi_read_PARM_2
      0005DC EE               [12] 1545 	mov	a,r6
      0005DD F0               [24] 1546 	movx	@dptr,a
      0005DE 8D 82            [24] 1547 	mov	dpl, r5
      0005E0 12r00r00         [24] 1548 	lcall	_mac_spi_read
      0005E3 AF 82            [24] 1549 	mov	r7, dpl
                                   1550 ;	main.c:153: printf("MAC Register Data: 0x%02X\n\r", data);
      0005E5 7E 00            [12] 1551 	mov	r6,#0x00
      0005E7 C0 07            [24] 1552 	push	ar7
      0005E9 C0 06            [24] 1553 	push	ar6
      0005EB 74rA6            [12] 1554 	mov	a,#___str_25
      0005ED C0 E0            [24] 1555 	push	acc
      0005EF 74s02            [12] 1556 	mov	a,#(___str_25 >> 8)
      0005F1 C0 E0            [24] 1557 	push	acc
      0005F3 74 80            [12] 1558 	mov	a,#0x80
      0005F5 C0 E0            [24] 1559 	push	acc
      0005F7 12r00r00         [24] 1560 	lcall	_printf
      0005FA E5 81            [12] 1561 	mov	a,sp
      0005FC 24 FB            [12] 1562 	add	a,#0xfb
      0005FE F5 81            [12] 1563 	mov	sp,a
                                   1564 ;	main.c:154: break;
      000600 02r02r5B         [24] 1565 	ljmp	00118$
                                   1566 ;	main.c:156: case '5': {
      000603                       1567 00106$:
                                   1568 ;	main.c:157: printf("Enter the PHY register address:\n\r");
      000603 74rC2            [12] 1569 	mov	a,#___str_26
      000605 C0 E0            [24] 1570 	push	acc
      000607 74s02            [12] 1571 	mov	a,#(___str_26 >> 8)
      000609 C0 E0            [24] 1572 	push	acc
      00060B 74 80            [12] 1573 	mov	a,#0x80
      00060D C0 E0            [24] 1574 	push	acc
      00060F 12r00r00         [24] 1575 	lcall	_printf
      000612 15 81            [12] 1576 	dec	sp
      000614 15 81            [12] 1577 	dec	sp
      000616 15 81            [12] 1578 	dec	sp
                                   1579 ;	main.c:158: uint8_t addr = get_user_buffer_size();
      000618 12r01rBA         [24] 1580 	lcall	_get_user_buffer_size
      00061B AE 82            [24] 1581 	mov	r6, dpl
                                   1582 ;	main.c:159: printf("Enter the 16-bit data to write:\n\r");
      00061D C0 06            [24] 1583 	push	ar6
      00061F 74rE4            [12] 1584 	mov	a,#___str_27
      000621 C0 E0            [24] 1585 	push	acc
      000623 74s02            [12] 1586 	mov	a,#(___str_27 >> 8)
      000625 C0 E0            [24] 1587 	push	acc
      000627 74 80            [12] 1588 	mov	a,#0x80
      000629 C0 E0            [24] 1589 	push	acc
      00062B 12r00r00         [24] 1590 	lcall	_printf
      00062E 15 81            [12] 1591 	dec	sp
      000630 15 81            [12] 1592 	dec	sp
      000632 15 81            [12] 1593 	dec	sp
                                   1594 ;	main.c:160: uint16_t data = get_user_buffer_size();
      000634 12r01rBA         [24] 1595 	lcall	_get_user_buffer_size
      000637 AD 82            [24] 1596 	mov	r5, dpl
      000639 AF 83            [24] 1597 	mov	r7, dph
      00063B D0 06            [24] 1598 	pop	ar6
                                   1599 ;	main.c:161: phy_spi_write(addr, data);
      00063D 90r00r00         [24] 1600 	mov	dptr,#_phy_spi_write_PARM_2
      000640 ED               [12] 1601 	mov	a,r5
      000641 F0               [24] 1602 	movx	@dptr,a
      000642 EF               [12] 1603 	mov	a,r7
      000643 A3               [24] 1604 	inc	dptr
      000644 F0               [24] 1605 	movx	@dptr,a
      000645 8E 82            [24] 1606 	mov	dpl, r6
      000647 C0 07            [24] 1607 	push	ar7
      000649 C0 05            [24] 1608 	push	ar5
      00064B 12r00r00         [24] 1609 	lcall	_phy_spi_write
      00064E D0 05            [24] 1610 	pop	ar5
      000650 D0 07            [24] 1611 	pop	ar7
                                   1612 ;	main.c:162: printf("PHY Write Data: 0x%04X\n\r", data);
      000652 C0 05            [24] 1613 	push	ar5
      000654 C0 07            [24] 1614 	push	ar7
      000656 74r06            [12] 1615 	mov	a,#___str_28
      000658 C0 E0            [24] 1616 	push	acc
      00065A 74s03            [12] 1617 	mov	a,#(___str_28 >> 8)
      00065C C0 E0            [24] 1618 	push	acc
      00065E 74 80            [12] 1619 	mov	a,#0x80
      000660 C0 E0            [24] 1620 	push	acc
      000662 12r00r00         [24] 1621 	lcall	_printf
      000665 E5 81            [12] 1622 	mov	a,sp
      000667 24 FB            [12] 1623 	add	a,#0xfb
      000669 F5 81            [12] 1624 	mov	sp,a
                                   1625 ;	main.c:163: break;
      00066B 02r02r5B         [24] 1626 	ljmp	00118$
                                   1627 ;	main.c:165: case '6': {
      00066E                       1628 00107$:
                                   1629 ;	main.c:166: printf("Enter the PHY register address to read:\n\r");
      00066E 74r1F            [12] 1630 	mov	a,#___str_29
      000670 C0 E0            [24] 1631 	push	acc
      000672 74s03            [12] 1632 	mov	a,#(___str_29 >> 8)
      000674 C0 E0            [24] 1633 	push	acc
      000676 74 80            [12] 1634 	mov	a,#0x80
      000678 C0 E0            [24] 1635 	push	acc
      00067A 12r00r00         [24] 1636 	lcall	_printf
      00067D 15 81            [12] 1637 	dec	sp
      00067F 15 81            [12] 1638 	dec	sp
      000681 15 81            [12] 1639 	dec	sp
                                   1640 ;	main.c:167: uint8_t addr = get_user_buffer_size();
      000683 12r01rBA         [24] 1641 	lcall	_get_user_buffer_size
                                   1642 ;	main.c:168: uint16_t data = phy_spi_read(addr);
      000686 12r00r00         [24] 1643 	lcall	_phy_spi_read
      000689 AE 82            [24] 1644 	mov	r6, dpl
      00068B AF 83            [24] 1645 	mov	r7, dph
                                   1646 ;	main.c:169: printf("PHY Read Data: 0x%04X\n\r", data);
      00068D C0 06            [24] 1647 	push	ar6
      00068F C0 07            [24] 1648 	push	ar7
      000691 74r49            [12] 1649 	mov	a,#___str_30
      000693 C0 E0            [24] 1650 	push	acc
      000695 74s03            [12] 1651 	mov	a,#(___str_30 >> 8)
      000697 C0 E0            [24] 1652 	push	acc
      000699 74 80            [12] 1653 	mov	a,#0x80
      00069B C0 E0            [24] 1654 	push	acc
      00069D 12r00r00         [24] 1655 	lcall	_printf
      0006A0 E5 81            [12] 1656 	mov	a,sp
      0006A2 24 FB            [12] 1657 	add	a,#0xfb
      0006A4 F5 81            [12] 1658 	mov	sp,a
                                   1659 ;	main.c:170: break;
      0006A6 02r02r5B         [24] 1660 	ljmp	00118$
                                   1661 ;	main.c:172: case '7': {
      0006A9                       1662 00108$:
                                   1663 ;	main.c:173: printf("Resetting ENC28J60...\n\r");
      0006A9 74r61            [12] 1664 	mov	a,#___str_31
      0006AB C0 E0            [24] 1665 	push	acc
      0006AD 74s03            [12] 1666 	mov	a,#(___str_31 >> 8)
      0006AF C0 E0            [24] 1667 	push	acc
      0006B1 74 80            [12] 1668 	mov	a,#0x80
      0006B3 C0 E0            [24] 1669 	push	acc
      0006B5 12r00r00         [24] 1670 	lcall	_printf
      0006B8 15 81            [12] 1671 	dec	sp
      0006BA 15 81            [12] 1672 	dec	sp
      0006BC 15 81            [12] 1673 	dec	sp
                                   1674 ;	main.c:174: enc_reset();
      0006BE 12r00r00         [24] 1675 	lcall	_enc_reset
                                   1676 ;	main.c:175: break;
      0006C1 02r02r5B         [24] 1677 	ljmp	00118$
                                   1678 ;	main.c:177: case '8': {
      0006C4                       1679 00109$:
                                   1680 ;	main.c:178: printf("Enter the ETH register address to read:\n\r");
      0006C4 74r79            [12] 1681 	mov	a,#___str_32
      0006C6 C0 E0            [24] 1682 	push	acc
      0006C8 74s03            [12] 1683 	mov	a,#(___str_32 >> 8)
      0006CA C0 E0            [24] 1684 	push	acc
      0006CC 74 80            [12] 1685 	mov	a,#0x80
      0006CE C0 E0            [24] 1686 	push	acc
      0006D0 12r00r00         [24] 1687 	lcall	_printf
      0006D3 15 81            [12] 1688 	dec	sp
      0006D5 15 81            [12] 1689 	dec	sp
      0006D7 15 81            [12] 1690 	dec	sp
                                   1691 ;	main.c:179: uint8_t addr = get_user_buffer_size();
      0006D9 12r01rBA         [24] 1692 	lcall	_get_user_buffer_size
      0006DC AE 82            [24] 1693 	mov	r6, dpl
                                   1694 ;	main.c:180: printf("Enter the bank (0 or 1):\n\r");
      0006DE C0 06            [24] 1695 	push	ar6
      0006E0 74rA3            [12] 1696 	mov	a,#___str_33
      0006E2 C0 E0            [24] 1697 	push	acc
      0006E4 74s03            [12] 1698 	mov	a,#(___str_33 >> 8)
      0006E6 C0 E0            [24] 1699 	push	acc
      0006E8 74 80            [12] 1700 	mov	a,#0x80
      0006EA C0 E0            [24] 1701 	push	acc
      0006EC 12r00r00         [24] 1702 	lcall	_printf
      0006EF 15 81            [12] 1703 	dec	sp
      0006F1 15 81            [12] 1704 	dec	sp
      0006F3 15 81            [12] 1705 	dec	sp
                                   1706 ;	main.c:181: uint8_t bank = get_user_buffer_size();
      0006F5 12r01rBA         [24] 1707 	lcall	_get_user_buffer_size
      0006F8 AD 82            [24] 1708 	mov	r5, dpl
      0006FA D0 06            [24] 1709 	pop	ar6
      0006FC 90r00r00         [24] 1710 	mov	dptr,#_eth_spi_read_PARM_2
      0006FF ED               [12] 1711 	mov	a,r5
      000700 F0               [24] 1712 	movx	@dptr,a
                                   1713 ;	main.c:182: uint8_t data = eth_spi_read(addr, bank);
      000701 8E 82            [24] 1714 	mov	dpl, r6
      000703 12r00r00         [24] 1715 	lcall	_eth_spi_read
      000706 AF 82            [24] 1716 	mov	r7, dpl
                                   1717 ;	main.c:183: printf("ETH Register Data: 0x%02X\n\r", data);
      000708 7E 00            [12] 1718 	mov	r6,#0x00
      00070A C0 07            [24] 1719 	push	ar7
      00070C C0 06            [24] 1720 	push	ar6
      00070E 74rBE            [12] 1721 	mov	a,#___str_34
      000710 C0 E0            [24] 1722 	push	acc
      000712 74s03            [12] 1723 	mov	a,#(___str_34 >> 8)
      000714 C0 E0            [24] 1724 	push	acc
      000716 74 80            [12] 1725 	mov	a,#0x80
      000718 C0 E0            [24] 1726 	push	acc
      00071A 12r00r00         [24] 1727 	lcall	_printf
      00071D E5 81            [12] 1728 	mov	a,sp
      00071F 24 FB            [12] 1729 	add	a,#0xfb
      000721 F5 81            [12] 1730 	mov	sp,a
                                   1731 ;	main.c:184: break;
      000723 02r02r5B         [24] 1732 	ljmp	00118$
                                   1733 ;	main.c:186: case '9': {
      000726                       1734 00110$:
                                   1735 ;	main.c:187: printf("\n\rChoose an action: \n\r");
      000726 74r1C            [12] 1736 	mov	a,#___str_2
      000728 C0 E0            [24] 1737 	push	acc
      00072A 74s00            [12] 1738 	mov	a,#(___str_2 >> 8)
      00072C C0 E0            [24] 1739 	push	acc
      00072E 74 80            [12] 1740 	mov	a,#0x80
      000730 C0 E0            [24] 1741 	push	acc
      000732 12r00r00         [24] 1742 	lcall	_printf
      000735 15 81            [12] 1743 	dec	sp
      000737 15 81            [12] 1744 	dec	sp
      000739 15 81            [12] 1745 	dec	sp
                                   1746 ;	main.c:188: printf("1 --> Control Write\n\r");
      00073B 74r33            [12] 1747 	mov	a,#___str_3
      00073D C0 E0            [24] 1748 	push	acc
      00073F 74s00            [12] 1749 	mov	a,#(___str_3 >> 8)
      000741 C0 E0            [24] 1750 	push	acc
      000743 74 80            [12] 1751 	mov	a,#0x80
      000745 C0 E0            [24] 1752 	push	acc
      000747 12r00r00         [24] 1753 	lcall	_printf
      00074A 15 81            [12] 1754 	dec	sp
      00074C 15 81            [12] 1755 	dec	sp
      00074E 15 81            [12] 1756 	dec	sp
                                   1757 ;	main.c:189: printf("2 --> Buffer Write\n\r");
      000750 74r49            [12] 1758 	mov	a,#___str_4
      000752 C0 E0            [24] 1759 	push	acc
      000754 74s00            [12] 1760 	mov	a,#(___str_4 >> 8)
      000756 C0 E0            [24] 1761 	push	acc
      000758 74 80            [12] 1762 	mov	a,#0x80
      00075A C0 E0            [24] 1763 	push	acc
      00075C 12r00r00         [24] 1764 	lcall	_printf
      00075F 15 81            [12] 1765 	dec	sp
      000761 15 81            [12] 1766 	dec	sp
      000763 15 81            [12] 1767 	dec	sp
                                   1768 ;	main.c:190: printf("3 --> Buffer Read\n\r");
      000765 74r5E            [12] 1769 	mov	a,#___str_5
      000767 C0 E0            [24] 1770 	push	acc
      000769 74s00            [12] 1771 	mov	a,#(___str_5 >> 8)
      00076B C0 E0            [24] 1772 	push	acc
      00076D 74 80            [12] 1773 	mov	a,#0x80
      00076F C0 E0            [24] 1774 	push	acc
      000771 12r00r00         [24] 1775 	lcall	_printf
      000774 15 81            [12] 1776 	dec	sp
      000776 15 81            [12] 1777 	dec	sp
      000778 15 81            [12] 1778 	dec	sp
                                   1779 ;	main.c:191: printf("4 --> MAC Register Read\n\r");
      00077A 74r72            [12] 1780 	mov	a,#___str_6
      00077C C0 E0            [24] 1781 	push	acc
      00077E 74s00            [12] 1782 	mov	a,#(___str_6 >> 8)
      000780 C0 E0            [24] 1783 	push	acc
      000782 74 80            [12] 1784 	mov	a,#0x80
      000784 C0 E0            [24] 1785 	push	acc
      000786 12r00r00         [24] 1786 	lcall	_printf
      000789 15 81            [12] 1787 	dec	sp
      00078B 15 81            [12] 1788 	dec	sp
      00078D 15 81            [12] 1789 	dec	sp
                                   1790 ;	main.c:192: printf("5 --> PHY SPI Write\n\r");
      00078F 74r8C            [12] 1791 	mov	a,#___str_7
      000791 C0 E0            [24] 1792 	push	acc
      000793 74s00            [12] 1793 	mov	a,#(___str_7 >> 8)
      000795 C0 E0            [24] 1794 	push	acc
      000797 74 80            [12] 1795 	mov	a,#0x80
      000799 C0 E0            [24] 1796 	push	acc
      00079B 12r00r00         [24] 1797 	lcall	_printf
      00079E 15 81            [12] 1798 	dec	sp
      0007A0 15 81            [12] 1799 	dec	sp
      0007A2 15 81            [12] 1800 	dec	sp
                                   1801 ;	main.c:193: printf("6 --> PHY SPI Read\n\r");
      0007A4 74rA2            [12] 1802 	mov	a,#___str_8
      0007A6 C0 E0            [24] 1803 	push	acc
      0007A8 74s00            [12] 1804 	mov	a,#(___str_8 >> 8)
      0007AA C0 E0            [24] 1805 	push	acc
      0007AC 74 80            [12] 1806 	mov	a,#0x80
      0007AE C0 E0            [24] 1807 	push	acc
      0007B0 12r00r00         [24] 1808 	lcall	_printf
      0007B3 15 81            [12] 1809 	dec	sp
      0007B5 15 81            [12] 1810 	dec	sp
      0007B7 15 81            [12] 1811 	dec	sp
                                   1812 ;	main.c:194: printf("7 --> ENC Reset\n\r");
      0007B9 74rB7            [12] 1813 	mov	a,#___str_9
      0007BB C0 E0            [24] 1814 	push	acc
      0007BD 74s00            [12] 1815 	mov	a,#(___str_9 >> 8)
      0007BF C0 E0            [24] 1816 	push	acc
      0007C1 74 80            [12] 1817 	mov	a,#0x80
      0007C3 C0 E0            [24] 1818 	push	acc
      0007C5 12r00r00         [24] 1819 	lcall	_printf
      0007C8 15 81            [12] 1820 	dec	sp
      0007CA 15 81            [12] 1821 	dec	sp
      0007CC 15 81            [12] 1822 	dec	sp
                                   1823 ;	main.c:195: printf("8 --> Read ETH Register\n\r");
      0007CE 74rC9            [12] 1824 	mov	a,#___str_10
      0007D0 C0 E0            [24] 1825 	push	acc
      0007D2 74s00            [12] 1826 	mov	a,#(___str_10 >> 8)
      0007D4 C0 E0            [24] 1827 	push	acc
      0007D6 74 80            [12] 1828 	mov	a,#0x80
      0007D8 C0 E0            [24] 1829 	push	acc
      0007DA 12r00r00         [24] 1830 	lcall	_printf
      0007DD 15 81            [12] 1831 	dec	sp
      0007DF 15 81            [12] 1832 	dec	sp
      0007E1 15 81            [12] 1833 	dec	sp
                                   1834 ;	main.c:196: break;
      0007E3 02r02r5B         [24] 1835 	ljmp	00118$
                                   1836 ;	main.c:198: case 'A':{
      0007E6                       1837 00111$:
                                   1838 ;	main.c:199: init_ENC();
      0007E6 12r00r00         [24] 1839 	lcall	_init_ENC
                                   1840 ;	main.c:201: send_arp_request();
      0007E9 12r00r00         [24] 1841 	lcall	_send_arp_request
                                   1842 ;	main.c:202: break;
      0007EC 02r02r5B         [24] 1843 	ljmp	00118$
                                   1844 ;	main.c:204: case 'B':{
      0007EF                       1845 00112$:
                                   1846 ;	main.c:205: init_ENC();
      0007EF 12r00r00         [24] 1847 	lcall	_init_ENC
                                   1848 ;	main.c:206: break;
      0007F2 02r02r5B         [24] 1849 	ljmp	00118$
                                   1850 ;	main.c:208: case 'C':{
      0007F5                       1851 00113$:
                                   1852 ;	main.c:209: printf(" Resetting ENC using RESET pin in Hardware(P1_0)\n\r");
      0007F5 74rDA            [12] 1853 	mov	a,#___str_35
      0007F7 C0 E0            [24] 1854 	push	acc
      0007F9 74s03            [12] 1855 	mov	a,#(___str_35 >> 8)
      0007FB C0 E0            [24] 1856 	push	acc
      0007FD 74 80            [12] 1857 	mov	a,#0x80
      0007FF C0 E0            [24] 1858 	push	acc
      000801 12r00r00         [24] 1859 	lcall	_printf
      000804 15 81            [12] 1860 	dec	sp
      000806 15 81            [12] 1861 	dec	sp
      000808 15 81            [12] 1862 	dec	sp
                                   1863 ;	main.c:210: ENC_RESET = 0;
                                   1864 ;	assignBit
      00080A C2 90            [12] 1865 	clr	_P1_0
                                   1866 ;	main.c:211: for(int i = 0; i < 6000; i++);
      00080C 7E 00            [12] 1867 	mov	r6,#0x00
      00080E 7F 00            [12] 1868 	mov	r7,#0x00
      000810                       1869 00124$:
      000810 C3               [12] 1870 	clr	c
      000811 EE               [12] 1871 	mov	a,r6
      000812 94 70            [12] 1872 	subb	a,#0x70
      000814 EF               [12] 1873 	mov	a,r7
      000815 64 80            [12] 1874 	xrl	a,#0x80
      000817 94 97            [12] 1875 	subb	a,#0x97
      000819 50 07            [24] 1876 	jnc	00114$
      00081B 0E               [12] 1877 	inc	r6
      00081C BE 00 F1         [24] 1878 	cjne	r6,#0x00,00124$
      00081F 0F               [12] 1879 	inc	r7
      000820 80 EE            [24] 1880 	sjmp	00124$
      000822                       1881 00114$:
                                   1882 ;	main.c:212: ENC_RESET = 1;
                                   1883 ;	assignBit
      000822 D2 90            [12] 1884 	setb	_P1_0
                                   1885 ;	main.c:213: break;
      000824 02r02r5B         [24] 1886 	ljmp	00118$
                                   1887 ;	main.c:215: default: {
      000827                       1888 00115$:
                                   1889 ;	main.c:216: printf("Invalid option. Please select a valid action.\n\r");
      000827 74r0D            [12] 1890 	mov	a,#___str_36
      000829 C0 E0            [24] 1891 	push	acc
      00082B 74s04            [12] 1892 	mov	a,#(___str_36 >> 8)
      00082D C0 E0            [24] 1893 	push	acc
      00082F 74 80            [12] 1894 	mov	a,#0x80
      000831 C0 E0            [24] 1895 	push	acc
      000833 12r00r00         [24] 1896 	lcall	_printf
      000836 15 81            [12] 1897 	dec	sp
      000838 15 81            [12] 1898 	dec	sp
      00083A 15 81            [12] 1899 	dec	sp
                                   1900 ;	main.c:219: }
                                   1901 ;	main.c:221: }
      00083C 02r02r5B         [24] 1902 	ljmp	00118$
                                   1903 	.area CSEG    (CODE)
                                   1904 	.area CONST   (CODE)
                                   1905 	.area CONST   (CODE)
      000000                       1906 ___str_0:
      000000 0A                    1907 	.db 0x0a
      000001 0D                    1908 	.db 0x0d
      000002 00                    1909 	.db 0x00
                                   1910 	.area CSEG    (CODE)
                                   1911 	.area CONST   (CODE)
      000003                       1912 ___str_1:
      000003 53 50 49 20 4F 70 65  1913 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    1914 	.db 0x0a
      00001A 0D                    1915 	.db 0x0d
      00001B 00                    1916 	.db 0x00
                                   1917 	.area CSEG    (CODE)
                                   1918 	.area CONST   (CODE)
      00001C                       1919 ___str_2:
      00001C 0A                    1920 	.db 0x0a
      00001D 0D                    1921 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  1922 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    1923 	.db 0x0a
      000031 0D                    1924 	.db 0x0d
      000032 00                    1925 	.db 0x00
                                   1926 	.area CSEG    (CODE)
                                   1927 	.area CONST   (CODE)
      000033                       1928 ___str_3:
      000033 31 20 2D 2D 3E 20 43  1929 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    1930 	.db 0x0a
      000047 0D                    1931 	.db 0x0d
      000048 00                    1932 	.db 0x00
                                   1933 	.area CSEG    (CODE)
                                   1934 	.area CONST   (CODE)
      000049                       1935 ___str_4:
      000049 32 20 2D 2D 3E 20 42  1936 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    1937 	.db 0x0a
      00005C 0D                    1938 	.db 0x0d
      00005D 00                    1939 	.db 0x00
                                   1940 	.area CSEG    (CODE)
                                   1941 	.area CONST   (CODE)
      00005E                       1942 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  1943 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    1944 	.db 0x0a
      000070 0D                    1945 	.db 0x0d
      000071 00                    1946 	.db 0x00
                                   1947 	.area CSEG    (CODE)
                                   1948 	.area CONST   (CODE)
      000072                       1949 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  1950 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    1951 	.db 0x0a
      00008A 0D                    1952 	.db 0x0d
      00008B 00                    1953 	.db 0x00
                                   1954 	.area CSEG    (CODE)
                                   1955 	.area CONST   (CODE)
      00008C                       1956 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  1957 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    1958 	.db 0x0a
      0000A0 0D                    1959 	.db 0x0d
      0000A1 00                    1960 	.db 0x00
                                   1961 	.area CSEG    (CODE)
                                   1962 	.area CONST   (CODE)
      0000A2                       1963 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  1964 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    1965 	.db 0x0a
      0000B5 0D                    1966 	.db 0x0d
      0000B6 00                    1967 	.db 0x00
                                   1968 	.area CSEG    (CODE)
                                   1969 	.area CONST   (CODE)
      0000B7                       1970 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  1971 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    1972 	.db 0x0a
      0000C7 0D                    1973 	.db 0x0d
      0000C8 00                    1974 	.db 0x00
                                   1975 	.area CSEG    (CODE)
                                   1976 	.area CONST   (CODE)
      0000C9                       1977 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  1978 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    1979 	.db 0x0a
      0000E1 0D                    1980 	.db 0x0d
      0000E2 00                    1981 	.db 0x00
                                   1982 	.area CSEG    (CODE)
                                   1983 	.area CONST   (CODE)
      0000E3                       1984 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  1985 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    1986 	.db 0x0a
      0000F6 0D                    1987 	.db 0x0d
      0000F7 00                    1988 	.db 0x00
                                   1989 	.area CSEG    (CODE)
                                   1990 	.area CONST   (CODE)
      0000F8                       1991 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  1992 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    1993 	.db 0x0a
      00010F 0D                    1994 	.db 0x0d
      000110 00                    1995 	.db 0x00
                                   1996 	.area CSEG    (CODE)
                                   1997 	.area CONST   (CODE)
      000111                       1998 ___str_13:
      000111 42 20 2D 2D 3E 20 49  1999 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2000 	.db 0x0a
      000127 0D                    2001 	.db 0x0d
      000128 00                    2002 	.db 0x00
                                   2003 	.area CSEG    (CODE)
                                   2004 	.area CONST   (CODE)
      000129                       2005 ___str_14:
      000129 43 20 2D 2D 3E 20 48  2006 	.ascii "C --> Hard Reset(nRESET pin)"
             61 72 64 20 52 65 73
             65 74 28 6E 52 45 53
             45 54 20 70 69 6E 29
      000145 0A                    2007 	.db 0x0a
      000146 0D                    2008 	.db 0x0d
      000147 00                    2009 	.db 0x00
                                   2010 	.area CSEG    (CODE)
                                   2011 	.area CONST   (CODE)
      000148                       2012 ___str_15:
      000148 45 6E 74 65 72 20 74  2013 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      00016A 0A                    2014 	.db 0x0a
      00016B 0D                    2015 	.db 0x0d
      00016C 00                    2016 	.db 0x00
                                   2017 	.area CSEG    (CODE)
                                   2018 	.area CONST   (CODE)
      00016D                       2019 ___str_16:
      00016D 45 6E 74 65 72 20 74  2020 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      000197 0A                    2021 	.db 0x0a
      000198 0D                    2022 	.db 0x0d
      000199 00                    2023 	.db 0x00
                                   2024 	.area CSEG    (CODE)
                                   2025 	.area CONST   (CODE)
      00019A                       2026 ___str_17:
      00019A 45 6E 74 65 72 20 74  2027 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      0001BB 0A                    2028 	.db 0x0a
      0001BC 0D                    2029 	.db 0x0d
      0001BD 00                    2030 	.db 0x00
                                   2031 	.area CSEG    (CODE)
                                   2032 	.area CONST   (CODE)
      0001BE                       2033 ___str_18:
      0001BE 45 6E 74 65 72 20 74  2034 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      0001E1 0A                    2035 	.db 0x0a
      0001E2 0D                    2036 	.db 0x0d
      0001E3 00                    2037 	.db 0x00
                                   2038 	.area CSEG    (CODE)
                                   2039 	.area CONST   (CODE)
      0001E4                       2040 ___str_19:
      0001E4 45 6E 74 65 72 20 74  2041 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      0001FF 0A                    2042 	.db 0x0a
      000200 0D                    2043 	.db 0x0d
      000201 00                    2044 	.db 0x00
                                   2045 	.area CSEG    (CODE)
                                   2046 	.area CONST   (CODE)
      000202                       2047 ___str_20:
      000202 45 6E 74 65 72 20 25  2048 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000222 0A                    2049 	.db 0x0a
      000223 0D                    2050 	.db 0x0d
      000224 00                    2051 	.db 0x00
                                   2052 	.area CSEG    (CODE)
                                   2053 	.area CONST   (CODE)
      000225                       2054 ___str_21:
      000225 42 79 74 65 20 25 64  2055 	.ascii "Byte %d: "
             3A 20
      00022E 00                    2056 	.db 0x00
                                   2057 	.area CSEG    (CODE)
                                   2058 	.area CONST   (CODE)
      00022F                       2059 ___str_22:
      00022F 45 6E 74 65 72 20 74  2060 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      000251 0A                    2061 	.db 0x0a
      000252 0D                    2062 	.db 0x0d
      000253 00                    2063 	.db 0x00
                                   2064 	.area CSEG    (CODE)
                                   2065 	.area CONST   (CODE)
      000254                       2066 ___str_23:
      000254 45 6E 74 65 72 20 74  2067 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      00027A 0A                    2068 	.db 0x0a
      00027B 0D                    2069 	.db 0x0d
      00027C 00                    2070 	.db 0x00
                                   2071 	.area CSEG    (CODE)
                                   2072 	.area CONST   (CODE)
      00027D                       2073 ___str_24:
      00027D 45 6E 74 65 72 20 74  2074 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002A3 0A                    2075 	.db 0x0a
      0002A4 0D                    2076 	.db 0x0d
      0002A5 00                    2077 	.db 0x00
                                   2078 	.area CSEG    (CODE)
                                   2079 	.area CONST   (CODE)
      0002A6                       2080 ___str_25:
      0002A6 4D 41 43 20 52 65 67  2081 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0002BF 0A                    2082 	.db 0x0a
      0002C0 0D                    2083 	.db 0x0d
      0002C1 00                    2084 	.db 0x00
                                   2085 	.area CSEG    (CODE)
                                   2086 	.area CONST   (CODE)
      0002C2                       2087 ___str_26:
      0002C2 45 6E 74 65 72 20 74  2088 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      0002E1 0A                    2089 	.db 0x0a
      0002E2 0D                    2090 	.db 0x0d
      0002E3 00                    2091 	.db 0x00
                                   2092 	.area CSEG    (CODE)
                                   2093 	.area CONST   (CODE)
      0002E4                       2094 ___str_27:
      0002E4 45 6E 74 65 72 20 74  2095 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      000303 0A                    2096 	.db 0x0a
      000304 0D                    2097 	.db 0x0d
      000305 00                    2098 	.db 0x00
                                   2099 	.area CSEG    (CODE)
                                   2100 	.area CONST   (CODE)
      000306                       2101 ___str_28:
      000306 50 48 59 20 57 72 69  2102 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      00031C 0A                    2103 	.db 0x0a
      00031D 0D                    2104 	.db 0x0d
      00031E 00                    2105 	.db 0x00
                                   2106 	.area CSEG    (CODE)
                                   2107 	.area CONST   (CODE)
      00031F                       2108 ___str_29:
      00031F 45 6E 74 65 72 20 74  2109 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000346 0A                    2110 	.db 0x0a
      000347 0D                    2111 	.db 0x0d
      000348 00                    2112 	.db 0x00
                                   2113 	.area CSEG    (CODE)
                                   2114 	.area CONST   (CODE)
      000349                       2115 ___str_30:
      000349 50 48 59 20 52 65 61  2116 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      00035E 0A                    2117 	.db 0x0a
      00035F 0D                    2118 	.db 0x0d
      000360 00                    2119 	.db 0x00
                                   2120 	.area CSEG    (CODE)
                                   2121 	.area CONST   (CODE)
      000361                       2122 ___str_31:
      000361 52 65 73 65 74 74 69  2123 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      000376 0A                    2124 	.db 0x0a
      000377 0D                    2125 	.db 0x0d
      000378 00                    2126 	.db 0x00
                                   2127 	.area CSEG    (CODE)
                                   2128 	.area CONST   (CODE)
      000379                       2129 ___str_32:
      000379 45 6E 74 65 72 20 74  2130 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003A0 0A                    2131 	.db 0x0a
      0003A1 0D                    2132 	.db 0x0d
      0003A2 00                    2133 	.db 0x00
                                   2134 	.area CSEG    (CODE)
                                   2135 	.area CONST   (CODE)
      0003A3                       2136 ___str_33:
      0003A3 45 6E 74 65 72 20 74  2137 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      0003BB 0A                    2138 	.db 0x0a
      0003BC 0D                    2139 	.db 0x0d
      0003BD 00                    2140 	.db 0x00
                                   2141 	.area CSEG    (CODE)
                                   2142 	.area CONST   (CODE)
      0003BE                       2143 ___str_34:
      0003BE 45 54 48 20 52 65 67  2144 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0003D7 0A                    2145 	.db 0x0a
      0003D8 0D                    2146 	.db 0x0d
      0003D9 00                    2147 	.db 0x00
                                   2148 	.area CSEG    (CODE)
                                   2149 	.area CONST   (CODE)
      0003DA                       2150 ___str_35:
      0003DA 20 52 65 73 65 74 74  2151 	.ascii " Resetting ENC using RESET pin in Hardware(P1_0)"
             69 6E 67 20 45 4E 43
             20 75 73 69 6E 67 20
             52 45 53 45 54 20 70
             69 6E 20 69 6E 20 48
             61 72 64 77 61 72 65
             28 50 31 5F 30 29
      00040A 0A                    2152 	.db 0x0a
      00040B 0D                    2153 	.db 0x0d
      00040C 00                    2154 	.db 0x00
                                   2155 	.area CSEG    (CODE)
                                   2156 	.area CONST   (CODE)
      00040D                       2157 ___str_36:
      00040D 49 6E 76 61 6C 69 64  2158 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      00043A 0A                    2159 	.db 0x0a
      00043B 0D                    2160 	.db 0x0d
      00043C 00                    2161 	.db 0x00
                                   2162 	.area CSEG    (CODE)
                                   2163 	.area XINIT   (CODE)
                                   2164 	.area CABS    (ABS,CODE)
