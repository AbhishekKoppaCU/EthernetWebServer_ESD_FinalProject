                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _send_arp_request
                                     15 	.globl _init_ENC
                                     16 	.globl _spi_control_write
                                     17 	.globl _eth_spi_read
                                     18 	.globl _phy_spi_write
                                     19 	.globl _phy_spi_read
                                     20 	.globl _spi_buffer_write
                                     21 	.globl _spi_buffer_read
                                     22 	.globl _mac_spi_read
                                     23 	.globl _enc_reset
                                     24 	.globl _configure_SPI
                                     25 	.globl _printf_tiny
                                     26 	.globl _putchar
                                     27 	.globl _getchar
                                     28 	.globl _printf
                                     29 	.globl _TF1
                                     30 	.globl _TR1
                                     31 	.globl _TF0
                                     32 	.globl _TR0
                                     33 	.globl _IE1
                                     34 	.globl _IT1
                                     35 	.globl _IE0
                                     36 	.globl _IT0
                                     37 	.globl _SM0
                                     38 	.globl _SM1
                                     39 	.globl _SM2
                                     40 	.globl _REN
                                     41 	.globl _TB8
                                     42 	.globl _RB8
                                     43 	.globl _TI
                                     44 	.globl _RI
                                     45 	.globl _CY
                                     46 	.globl _AC
                                     47 	.globl _F0
                                     48 	.globl _RS1
                                     49 	.globl _RS0
                                     50 	.globl _OV
                                     51 	.globl _F1
                                     52 	.globl _P
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD0
                                     60 	.globl _TXD
                                     61 	.globl _RXD0
                                     62 	.globl _RXD
                                     63 	.globl _P3_7
                                     64 	.globl _P3_6
                                     65 	.globl _P3_5
                                     66 	.globl _P3_4
                                     67 	.globl _P3_3
                                     68 	.globl _P3_2
                                     69 	.globl _P3_1
                                     70 	.globl _P3_0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _P1_7
                                     80 	.globl _P1_6
                                     81 	.globl _P1_5
                                     82 	.globl _P1_4
                                     83 	.globl _P1_3
                                     84 	.globl _P1_2
                                     85 	.globl _P1_1
                                     86 	.globl _P1_0
                                     87 	.globl _P0_7
                                     88 	.globl _P0_6
                                     89 	.globl _P0_5
                                     90 	.globl _P0_4
                                     91 	.globl _P0_3
                                     92 	.globl _P0_2
                                     93 	.globl _P0_1
                                     94 	.globl _P0_0
                                     95 	.globl _PS
                                     96 	.globl _PT1
                                     97 	.globl _PX1
                                     98 	.globl _PT0
                                     99 	.globl _PX0
                                    100 	.globl _EA
                                    101 	.globl _ES
                                    102 	.globl _ET1
                                    103 	.globl _EX1
                                    104 	.globl _ET0
                                    105 	.globl _EX0
                                    106 	.globl _BREG_F7
                                    107 	.globl _BREG_F6
                                    108 	.globl _BREG_F5
                                    109 	.globl _BREG_F4
                                    110 	.globl _BREG_F3
                                    111 	.globl _BREG_F2
                                    112 	.globl _BREG_F1
                                    113 	.globl _BREG_F0
                                    114 	.globl _P5_7
                                    115 	.globl _P5_6
                                    116 	.globl _P5_5
                                    117 	.globl _P5_4
                                    118 	.globl _P5_3
                                    119 	.globl _P5_2
                                    120 	.globl _P5_1
                                    121 	.globl _P5_0
                                    122 	.globl _P4_7
                                    123 	.globl _P4_6
                                    124 	.globl _P4_5
                                    125 	.globl _P4_4
                                    126 	.globl _P4_3
                                    127 	.globl _P4_2
                                    128 	.globl _P4_1
                                    129 	.globl _P4_0
                                    130 	.globl _PX0L
                                    131 	.globl _PT0L
                                    132 	.globl _PX1L
                                    133 	.globl _PT1L
                                    134 	.globl _PSL
                                    135 	.globl _PT2L
                                    136 	.globl _PPCL
                                    137 	.globl _EC
                                    138 	.globl _CCF0
                                    139 	.globl _CCF1
                                    140 	.globl _CCF2
                                    141 	.globl _CCF3
                                    142 	.globl _CCF4
                                    143 	.globl _CR
                                    144 	.globl _CF
                                    145 	.globl _TF2
                                    146 	.globl _EXF2
                                    147 	.globl _RCLK
                                    148 	.globl _TCLK
                                    149 	.globl _EXEN2
                                    150 	.globl _TR2
                                    151 	.globl _C_T2
                                    152 	.globl _CP_RL2
                                    153 	.globl _T2CON_7
                                    154 	.globl _T2CON_6
                                    155 	.globl _T2CON_5
                                    156 	.globl _T2CON_4
                                    157 	.globl _T2CON_3
                                    158 	.globl _T2CON_2
                                    159 	.globl _T2CON_1
                                    160 	.globl _T2CON_0
                                    161 	.globl _PT2
                                    162 	.globl _ET2
                                    163 	.globl _TMOD
                                    164 	.globl _TL1
                                    165 	.globl _TL0
                                    166 	.globl _TH1
                                    167 	.globl _TH0
                                    168 	.globl _TCON
                                    169 	.globl _SP
                                    170 	.globl _SCON
                                    171 	.globl _SBUF0
                                    172 	.globl _SBUF
                                    173 	.globl _PSW
                                    174 	.globl _PCON
                                    175 	.globl _P3
                                    176 	.globl _P2
                                    177 	.globl _P1
                                    178 	.globl _P0
                                    179 	.globl _IP
                                    180 	.globl _IE
                                    181 	.globl _DP0L
                                    182 	.globl _DPL
                                    183 	.globl _DP0H
                                    184 	.globl _DPH
                                    185 	.globl _B
                                    186 	.globl _ACC
                                    187 	.globl _EECON
                                    188 	.globl _KBF
                                    189 	.globl _KBE
                                    190 	.globl _KBLS
                                    191 	.globl _BRL
                                    192 	.globl _BDRCON
                                    193 	.globl _T2MOD
                                    194 	.globl _SPDAT
                                    195 	.globl _SPSTA
                                    196 	.globl _SPCON
                                    197 	.globl _SADEN
                                    198 	.globl _SADDR
                                    199 	.globl _WDTPRG
                                    200 	.globl _WDTRST
                                    201 	.globl _P5
                                    202 	.globl _P4
                                    203 	.globl _IPH1
                                    204 	.globl _IPL1
                                    205 	.globl _IPH0
                                    206 	.globl _IPL0
                                    207 	.globl _IEN1
                                    208 	.globl _IEN0
                                    209 	.globl _CMOD
                                    210 	.globl _CL
                                    211 	.globl _CH
                                    212 	.globl _CCON
                                    213 	.globl _CCAPM4
                                    214 	.globl _CCAPM3
                                    215 	.globl _CCAPM2
                                    216 	.globl _CCAPM1
                                    217 	.globl _CCAPM0
                                    218 	.globl _CCAP4L
                                    219 	.globl _CCAP3L
                                    220 	.globl _CCAP2L
                                    221 	.globl _CCAP1L
                                    222 	.globl _CCAP0L
                                    223 	.globl _CCAP4H
                                    224 	.globl _CCAP3H
                                    225 	.globl _CCAP2H
                                    226 	.globl _CCAP1H
                                    227 	.globl _CCAP0H
                                    228 	.globl _CKCON1
                                    229 	.globl _CKCON0
                                    230 	.globl _CKRL
                                    231 	.globl _AUXR1
                                    232 	.globl _AUXR
                                    233 	.globl _TH2
                                    234 	.globl _TL2
                                    235 	.globl _RCAP2H
                                    236 	.globl _RCAP2L
                                    237 	.globl _T2CON
                                    238 ;--------------------------------------------------------
                                    239 ; special function registers
                                    240 ;--------------------------------------------------------
                                    241 	.area RSEG    (ABS,DATA)
      000000                        242 	.org 0x0000
                           0000C8   243 _T2CON	=	0x00c8
                           0000CA   244 _RCAP2L	=	0x00ca
                           0000CB   245 _RCAP2H	=	0x00cb
                           0000CC   246 _TL2	=	0x00cc
                           0000CD   247 _TH2	=	0x00cd
                           00008E   248 _AUXR	=	0x008e
                           0000A2   249 _AUXR1	=	0x00a2
                           000097   250 _CKRL	=	0x0097
                           00008F   251 _CKCON0	=	0x008f
                           0000AF   252 _CKCON1	=	0x00af
                           0000FA   253 _CCAP0H	=	0x00fa
                           0000FB   254 _CCAP1H	=	0x00fb
                           0000FC   255 _CCAP2H	=	0x00fc
                           0000FD   256 _CCAP3H	=	0x00fd
                           0000FE   257 _CCAP4H	=	0x00fe
                           0000EA   258 _CCAP0L	=	0x00ea
                           0000EB   259 _CCAP1L	=	0x00eb
                           0000EC   260 _CCAP2L	=	0x00ec
                           0000ED   261 _CCAP3L	=	0x00ed
                           0000EE   262 _CCAP4L	=	0x00ee
                           0000DA   263 _CCAPM0	=	0x00da
                           0000DB   264 _CCAPM1	=	0x00db
                           0000DC   265 _CCAPM2	=	0x00dc
                           0000DD   266 _CCAPM3	=	0x00dd
                           0000DE   267 _CCAPM4	=	0x00de
                           0000D8   268 _CCON	=	0x00d8
                           0000F9   269 _CH	=	0x00f9
                           0000E9   270 _CL	=	0x00e9
                           0000D9   271 _CMOD	=	0x00d9
                           0000A8   272 _IEN0	=	0x00a8
                           0000B1   273 _IEN1	=	0x00b1
                           0000B8   274 _IPL0	=	0x00b8
                           0000B7   275 _IPH0	=	0x00b7
                           0000B2   276 _IPL1	=	0x00b2
                           0000B3   277 _IPH1	=	0x00b3
                           0000C0   278 _P4	=	0x00c0
                           0000E8   279 _P5	=	0x00e8
                           0000A6   280 _WDTRST	=	0x00a6
                           0000A7   281 _WDTPRG	=	0x00a7
                           0000A9   282 _SADDR	=	0x00a9
                           0000B9   283 _SADEN	=	0x00b9
                           0000C3   284 _SPCON	=	0x00c3
                           0000C4   285 _SPSTA	=	0x00c4
                           0000C5   286 _SPDAT	=	0x00c5
                           0000C9   287 _T2MOD	=	0x00c9
                           00009B   288 _BDRCON	=	0x009b
                           00009A   289 _BRL	=	0x009a
                           00009C   290 _KBLS	=	0x009c
                           00009D   291 _KBE	=	0x009d
                           00009E   292 _KBF	=	0x009e
                           0000D2   293 _EECON	=	0x00d2
                           0000E0   294 _ACC	=	0x00e0
                           0000F0   295 _B	=	0x00f0
                           000083   296 _DPH	=	0x0083
                           000083   297 _DP0H	=	0x0083
                           000082   298 _DPL	=	0x0082
                           000082   299 _DP0L	=	0x0082
                           0000A8   300 _IE	=	0x00a8
                           0000B8   301 _IP	=	0x00b8
                           000080   302 _P0	=	0x0080
                           000090   303 _P1	=	0x0090
                           0000A0   304 _P2	=	0x00a0
                           0000B0   305 _P3	=	0x00b0
                           000087   306 _PCON	=	0x0087
                           0000D0   307 _PSW	=	0x00d0
                           000099   308 _SBUF	=	0x0099
                           000099   309 _SBUF0	=	0x0099
                           000098   310 _SCON	=	0x0098
                           000081   311 _SP	=	0x0081
                           000088   312 _TCON	=	0x0088
                           00008C   313 _TH0	=	0x008c
                           00008D   314 _TH1	=	0x008d
                           00008A   315 _TL0	=	0x008a
                           00008B   316 _TL1	=	0x008b
                           000089   317 _TMOD	=	0x0089
                                    318 ;--------------------------------------------------------
                                    319 ; special function bits
                                    320 ;--------------------------------------------------------
                                    321 	.area RSEG    (ABS,DATA)
      000000                        322 	.org 0x0000
                           0000AD   323 _ET2	=	0x00ad
                           0000BD   324 _PT2	=	0x00bd
                           0000C8   325 _T2CON_0	=	0x00c8
                           0000C9   326 _T2CON_1	=	0x00c9
                           0000CA   327 _T2CON_2	=	0x00ca
                           0000CB   328 _T2CON_3	=	0x00cb
                           0000CC   329 _T2CON_4	=	0x00cc
                           0000CD   330 _T2CON_5	=	0x00cd
                           0000CE   331 _T2CON_6	=	0x00ce
                           0000CF   332 _T2CON_7	=	0x00cf
                           0000C8   333 _CP_RL2	=	0x00c8
                           0000C9   334 _C_T2	=	0x00c9
                           0000CA   335 _TR2	=	0x00ca
                           0000CB   336 _EXEN2	=	0x00cb
                           0000CC   337 _TCLK	=	0x00cc
                           0000CD   338 _RCLK	=	0x00cd
                           0000CE   339 _EXF2	=	0x00ce
                           0000CF   340 _TF2	=	0x00cf
                           0000DF   341 _CF	=	0x00df
                           0000DE   342 _CR	=	0x00de
                           0000DC   343 _CCF4	=	0x00dc
                           0000DB   344 _CCF3	=	0x00db
                           0000DA   345 _CCF2	=	0x00da
                           0000D9   346 _CCF1	=	0x00d9
                           0000D8   347 _CCF0	=	0x00d8
                           0000AE   348 _EC	=	0x00ae
                           0000BE   349 _PPCL	=	0x00be
                           0000BD   350 _PT2L	=	0x00bd
                           0000BC   351 _PSL	=	0x00bc
                           0000BB   352 _PT1L	=	0x00bb
                           0000BA   353 _PX1L	=	0x00ba
                           0000B9   354 _PT0L	=	0x00b9
                           0000B8   355 _PX0L	=	0x00b8
                           0000C0   356 _P4_0	=	0x00c0
                           0000C1   357 _P4_1	=	0x00c1
                           0000C2   358 _P4_2	=	0x00c2
                           0000C3   359 _P4_3	=	0x00c3
                           0000C4   360 _P4_4	=	0x00c4
                           0000C5   361 _P4_5	=	0x00c5
                           0000C6   362 _P4_6	=	0x00c6
                           0000C7   363 _P4_7	=	0x00c7
                           0000E8   364 _P5_0	=	0x00e8
                           0000E9   365 _P5_1	=	0x00e9
                           0000EA   366 _P5_2	=	0x00ea
                           0000EB   367 _P5_3	=	0x00eb
                           0000EC   368 _P5_4	=	0x00ec
                           0000ED   369 _P5_5	=	0x00ed
                           0000EE   370 _P5_6	=	0x00ee
                           0000EF   371 _P5_7	=	0x00ef
                           0000F0   372 _BREG_F0	=	0x00f0
                           0000F1   373 _BREG_F1	=	0x00f1
                           0000F2   374 _BREG_F2	=	0x00f2
                           0000F3   375 _BREG_F3	=	0x00f3
                           0000F4   376 _BREG_F4	=	0x00f4
                           0000F5   377 _BREG_F5	=	0x00f5
                           0000F6   378 _BREG_F6	=	0x00f6
                           0000F7   379 _BREG_F7	=	0x00f7
                           0000A8   380 _EX0	=	0x00a8
                           0000A9   381 _ET0	=	0x00a9
                           0000AA   382 _EX1	=	0x00aa
                           0000AB   383 _ET1	=	0x00ab
                           0000AC   384 _ES	=	0x00ac
                           0000AF   385 _EA	=	0x00af
                           0000B8   386 _PX0	=	0x00b8
                           0000B9   387 _PT0	=	0x00b9
                           0000BA   388 _PX1	=	0x00ba
                           0000BB   389 _PT1	=	0x00bb
                           0000BC   390 _PS	=	0x00bc
                           000080   391 _P0_0	=	0x0080
                           000081   392 _P0_1	=	0x0081
                           000082   393 _P0_2	=	0x0082
                           000083   394 _P0_3	=	0x0083
                           000084   395 _P0_4	=	0x0084
                           000085   396 _P0_5	=	0x0085
                           000086   397 _P0_6	=	0x0086
                           000087   398 _P0_7	=	0x0087
                           000090   399 _P1_0	=	0x0090
                           000091   400 _P1_1	=	0x0091
                           000092   401 _P1_2	=	0x0092
                           000093   402 _P1_3	=	0x0093
                           000094   403 _P1_4	=	0x0094
                           000095   404 _P1_5	=	0x0095
                           000096   405 _P1_6	=	0x0096
                           000097   406 _P1_7	=	0x0097
                           0000A0   407 _P2_0	=	0x00a0
                           0000A1   408 _P2_1	=	0x00a1
                           0000A2   409 _P2_2	=	0x00a2
                           0000A3   410 _P2_3	=	0x00a3
                           0000A4   411 _P2_4	=	0x00a4
                           0000A5   412 _P2_5	=	0x00a5
                           0000A6   413 _P2_6	=	0x00a6
                           0000A7   414 _P2_7	=	0x00a7
                           0000B0   415 _P3_0	=	0x00b0
                           0000B1   416 _P3_1	=	0x00b1
                           0000B2   417 _P3_2	=	0x00b2
                           0000B3   418 _P3_3	=	0x00b3
                           0000B4   419 _P3_4	=	0x00b4
                           0000B5   420 _P3_5	=	0x00b5
                           0000B6   421 _P3_6	=	0x00b6
                           0000B7   422 _P3_7	=	0x00b7
                           0000B0   423 _RXD	=	0x00b0
                           0000B0   424 _RXD0	=	0x00b0
                           0000B1   425 _TXD	=	0x00b1
                           0000B1   426 _TXD0	=	0x00b1
                           0000B2   427 _INT0	=	0x00b2
                           0000B3   428 _INT1	=	0x00b3
                           0000B4   429 _T0	=	0x00b4
                           0000B5   430 _T1	=	0x00b5
                           0000B6   431 _WR	=	0x00b6
                           0000B7   432 _RD	=	0x00b7
                           0000D0   433 _P	=	0x00d0
                           0000D1   434 _F1	=	0x00d1
                           0000D2   435 _OV	=	0x00d2
                           0000D3   436 _RS0	=	0x00d3
                           0000D4   437 _RS1	=	0x00d4
                           0000D5   438 _F0	=	0x00d5
                           0000D6   439 _AC	=	0x00d6
                           0000D7   440 _CY	=	0x00d7
                           000098   441 _RI	=	0x0098
                           000099   442 _TI	=	0x0099
                           00009A   443 _RB8	=	0x009a
                           00009B   444 _TB8	=	0x009b
                           00009C   445 _REN	=	0x009c
                           00009D   446 _SM2	=	0x009d
                           00009E   447 _SM1	=	0x009e
                           00009F   448 _SM0	=	0x009f
                           000088   449 _IT0	=	0x0088
                           000089   450 _IE0	=	0x0089
                           00008A   451 _IT1	=	0x008a
                           00008B   452 _IE1	=	0x008b
                           00008C   453 _TR0	=	0x008c
                           00008D   454 _TF0	=	0x008d
                           00008E   455 _TR1	=	0x008e
                           00008F   456 _TF1	=	0x008f
                                    457 ;--------------------------------------------------------
                                    458 ; overlayable register banks
                                    459 ;--------------------------------------------------------
                                    460 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        461 	.ds 8
                                    462 ;--------------------------------------------------------
                                    463 ; internal ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area DSEG    (DATA)
                                    466 ;--------------------------------------------------------
                                    467 ; overlayable items in internal ram
                                    468 ;--------------------------------------------------------
                                    469 	.area	OSEG    (OVR,DATA)
      000000                        470 _hex_to_int_sloc0_1_0:
      000000                        471 	.ds 3
      000003                        472 _hex_to_int_sloc1_1_0:
      000003                        473 	.ds 1
      000004                        474 _hex_to_int_sloc2_1_0:
      000004                        475 	.ds 2
                                    476 ;--------------------------------------------------------
                                    477 ; Stack segment in internal ram
                                    478 ;--------------------------------------------------------
                                    479 	.area SSEG
      000000                        480 __start__stack:
      000000                        481 	.ds	1
                                    482 
                                    483 ;--------------------------------------------------------
                                    484 ; indirectly addressable internal ram data
                                    485 ;--------------------------------------------------------
                                    486 	.area ISEG    (DATA)
                                    487 ;--------------------------------------------------------
                                    488 ; absolute internal ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area IABS    (ABS,DATA)
                                    491 	.area IABS    (ABS,DATA)
                                    492 ;--------------------------------------------------------
                                    493 ; bit data
                                    494 ;--------------------------------------------------------
                                    495 	.area BSEG    (BIT)
                                    496 ;--------------------------------------------------------
                                    497 ; paged external ram data
                                    498 ;--------------------------------------------------------
                                    499 	.area PSEG    (PAG,XDATA)
                                    500 ;--------------------------------------------------------
                                    501 ; uninitialized external ram data
                                    502 ;--------------------------------------------------------
                                    503 	.area XSEG    (XDATA)
      000000                        504 _hex_to_int_str_10000_70:
      000000                        505 	.ds 3
      000003                        506 _hex_to_int_result_10000_71:
      000003                        507 	.ds 2
      000005                        508 _hex_to_int_ASCII_20000_72:
      000005                        509 	.ds 2
      000007                        510 _get_user_buffer_size_input_10000_77:
      000007                        511 	.ds 10
      000011                        512 _main_buffer_40003_90:
      000011                        513 	.ds 256
      000111                        514 _main_buffer_40003_95:
      000111                        515 	.ds 256
                                    516 ;--------------------------------------------------------
                                    517 ; absolute external ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area XABS    (ABS,XDATA)
                                    520 ;--------------------------------------------------------
                                    521 ; initialized external ram data
                                    522 ;--------------------------------------------------------
                                    523 	.area XISEG   (XDATA)
                                    524 	.area HOME    (CODE)
                                    525 	.area GSINIT0 (CODE)
                                    526 	.area GSINIT1 (CODE)
                                    527 	.area GSINIT2 (CODE)
                                    528 	.area GSINIT3 (CODE)
                                    529 	.area GSINIT4 (CODE)
                                    530 	.area GSINIT5 (CODE)
                                    531 	.area GSINIT  (CODE)
                                    532 	.area GSFINAL (CODE)
                                    533 	.area CSEG    (CODE)
                                    534 ;--------------------------------------------------------
                                    535 ; interrupt vector
                                    536 ;--------------------------------------------------------
                                    537 	.area HOME    (CODE)
      000000                        538 __interrupt_vect:
      000000 02r00r00         [24]  539 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  540 	ljmp	_external_interrupt0_isr
                                    541 ;--------------------------------------------------------
                                    542 ; global & static initialisations
                                    543 ;--------------------------------------------------------
                                    544 	.area HOME    (CODE)
                                    545 	.area GSINIT  (CODE)
                                    546 	.area GSFINAL (CODE)
                                    547 	.area GSINIT  (CODE)
                                    548 	.globl __sdcc_gsinit_startup
                                    549 	.globl __sdcc_program_startup
                                    550 	.globl __start__stack
                                    551 	.globl __mcs51_genXINIT
                                    552 	.globl __mcs51_genXRAMCLEAR
                                    553 	.globl __mcs51_genRAMCLEAR
                                    554 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  555 	ljmp	__sdcc_program_startup
                                    556 ;--------------------------------------------------------
                                    557 ; Home
                                    558 ;--------------------------------------------------------
                                    559 	.area HOME    (CODE)
                                    560 	.area HOME    (CODE)
      000006                        561 __sdcc_program_startup:
      000006 02r02r3E         [24]  562 	ljmp	_main
                                    563 ;	return from main will return to caller
                                    564 ;--------------------------------------------------------
                                    565 ; code
                                    566 ;--------------------------------------------------------
                                    567 	.area CSEG    (CODE)
                                    568 ;------------------------------------------------------------
                                    569 ;Allocation info for local variables in function 'hex_to_int'
                                    570 ;------------------------------------------------------------
                                    571 ;str                       Allocated with name '_hex_to_int_str_10000_70'
                                    572 ;i                         Allocated with name '_hex_to_int_i_10000_71'
                                    573 ;result                    Allocated with name '_hex_to_int_result_10000_71'
                                    574 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_72'
                                    575 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    576 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    577 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    578 ;------------------------------------------------------------
                                    579 ;	main.c:12: int hex_to_int(char* str)
                                    580 ;	-----------------------------------------
                                    581 ;	 function hex_to_int
                                    582 ;	-----------------------------------------
      000000                        583 _hex_to_int:
                           000007   584 	ar7 = 0x07
                           000006   585 	ar6 = 0x06
                           000005   586 	ar5 = 0x05
                           000004   587 	ar4 = 0x04
                           000003   588 	ar3 = 0x03
                           000002   589 	ar2 = 0x02
                           000001   590 	ar1 = 0x01
                           000000   591 	ar0 = 0x00
      000000 AF F0            [24]  592 	mov	r7,b
      000002 AE 83            [24]  593 	mov	r6,dph
      000004 E5 82            [12]  594 	mov	a,dpl
      000006 90r00r00         [24]  595 	mov	dptr,#_hex_to_int_str_10000_70
      000009 F0               [24]  596 	movx	@dptr,a
      00000A EE               [12]  597 	mov	a,r6
      00000B A3               [24]  598 	inc	dptr
      00000C F0               [24]  599 	movx	@dptr,a
      00000D EF               [12]  600 	mov	a,r7
      00000E A3               [24]  601 	inc	dptr
      00000F F0               [24]  602 	movx	@dptr,a
                                    603 ;	main.c:15: int i = 0, result = 0;
      000010 90r00r03         [24]  604 	mov	dptr,#_hex_to_int_result_10000_71
      000013 E4               [12]  605 	clr	a
      000014 F0               [24]  606 	movx	@dptr,a
      000015 A3               [24]  607 	inc	dptr
      000016 F0               [24]  608 	movx	@dptr,a
                                    609 ;	main.c:16: while(str[i] != '\0')
      000017 90r00r00         [24]  610 	mov	dptr,#_hex_to_int_str_10000_70
      00001A E0               [24]  611 	movx	a,@dptr
      00001B FD               [12]  612 	mov	r5,a
      00001C A3               [24]  613 	inc	dptr
      00001D E0               [24]  614 	movx	a,@dptr
      00001E FE               [12]  615 	mov	r6,a
      00001F A3               [24]  616 	inc	dptr
      000020 E0               [24]  617 	movx	a,@dptr
      000021 FF               [12]  618 	mov	r7,a
      000022 8D 02            [24]  619 	mov	ar2,r5
      000024 8E 03            [24]  620 	mov	ar3,r6
      000026 8F 04            [24]  621 	mov	ar4,r7
      000028 8D*00            [24]  622 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  623 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  624 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  625 	mov	r0,#0x00
      000030 79 00            [12]  626 	mov	r1,#0x00
      000032                        627 00112$:
      000032 C0 02            [24]  628 	push	ar2
      000034 C0 03            [24]  629 	push	ar3
      000036 C0 04            [24]  630 	push	ar4
      000038 E8               [12]  631 	mov	a,r0
      000039 25*00            [12]  632 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  633 	mov	r2,a
      00003C E9               [12]  634 	mov	a,r1
      00003D 35*01            [12]  635 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  636 	mov	r3,a
      000040 AC*02            [24]  637 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  638 	mov	dpl,r2
      000044 8B 83            [24]  639 	mov	dph,r3
      000046 8C F0            [24]  640 	mov	b,r4
      000048 12r00r00         [24]  641 	lcall	__gptrget
      00004B F5*03            [12]  642 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  643 	pop	ar4
      00004F D0 03            [24]  644 	pop	ar3
      000051 D0 02            [24]  645 	pop	ar2
      000053 E5*03            [12]  646 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  647 	jnz	00166$
      000057 02r01rAE         [24]  648 	ljmp	00114$
      00005A                        649 00166$:
                                    650 ;	main.c:18: int ASCII = (int)str[i];
      00005A C0 02            [24]  651 	push	ar2
      00005C C0 03            [24]  652 	push	ar3
      00005E C0 04            [24]  653 	push	ar4
      000060 85*03*04         [24]  654 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  655 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  656 	mov	dptr,#_hex_to_int_ASCII_20000_72
      000069 E5*04            [12]  657 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  658 	movx	@dptr,a
      00006C E5*05            [12]  659 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  660 	inc	dptr
      00006F F0               [24]  661 	movx	@dptr,a
                                    662 ;	main.c:19: result *= 16;
      000070 90r00r03         [24]  663 	mov	dptr,#_hex_to_int_result_10000_71
      000073 E0               [24]  664 	movx	a,@dptr
      000074 FB               [12]  665 	mov	r3,a
      000075 A3               [24]  666 	inc	dptr
      000076 E0               [24]  667 	movx	a,@dptr
      000077 C4               [12]  668 	swap	a
      000078 54 F0            [12]  669 	anl	a,#0xf0
      00007A CB               [12]  670 	xch	a,r3
      00007B C4               [12]  671 	swap	a
      00007C CB               [12]  672 	xch	a,r3
      00007D 6B               [12]  673 	xrl	a,r3
      00007E CB               [12]  674 	xch	a,r3
      00007F 54 F0            [12]  675 	anl	a,#0xf0
      000081 CB               [12]  676 	xch	a,r3
      000082 6B               [12]  677 	xrl	a,r3
      000083 FC               [12]  678 	mov	r4,a
      000084 90r00r03         [24]  679 	mov	dptr,#_hex_to_int_result_10000_71
      000087 EB               [12]  680 	mov	a,r3
      000088 F0               [24]  681 	movx	@dptr,a
      000089 EC               [12]  682 	mov	a,r4
      00008A A3               [24]  683 	inc	dptr
      00008B F0               [24]  684 	movx	@dptr,a
                                    685 ;	main.c:20: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  686 	clr	c
      00008D E5*04            [12]  687 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  688 	subb	a,#0x30
      000091 E5*05            [12]  689 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  690 	xrl	a,#0x80
      000095 94 80            [12]  691 	subb	a,#0x80
      000097 D0 04            [24]  692 	pop	ar4
      000099 D0 03            [24]  693 	pop	ar3
      00009B D0 02            [24]  694 	pop	ar2
      00009D 40 3F            [24]  695 	jc	00109$
      00009F 74 39            [12]  696 	mov	a,#0x39
      0000A1 95*04            [12]  697 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  698 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  699 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  700 	xrl	b,#0x80
      0000AB 95 F0            [12]  701 	subb	a,b
      0000AD 40 2F            [24]  702 	jc	00109$
                                    703 ;	main.c:22: result += str[i] - 48;
      0000AF C0 02            [24]  704 	push	ar2
      0000B1 C0 03            [24]  705 	push	ar3
      0000B3 C0 04            [24]  706 	push	ar4
      0000B5 E5*04            [12]  707 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  708 	add	a,#0xd0
      0000B9 F5*04            [12]  709 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  710 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  711 	addc	a,#0xff
      0000BF F5*05            [12]  712 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  713 	mov	dptr,#_hex_to_int_result_10000_71
      0000C4 E0               [24]  714 	movx	a,@dptr
      0000C5 FA               [12]  715 	mov	r2,a
      0000C6 A3               [24]  716 	inc	dptr
      0000C7 E0               [24]  717 	movx	a,@dptr
      0000C8 FC               [12]  718 	mov	r4,a
      0000C9 90r00r03         [24]  719 	mov	dptr,#_hex_to_int_result_10000_71
      0000CC E5*04            [12]  720 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  721 	add	a, r2
      0000CF F0               [24]  722 	movx	@dptr,a
      0000D0 E5*05            [12]  723 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  724 	addc	a, r4
      0000D3 A3               [24]  725 	inc	dptr
      0000D4 F0               [24]  726 	movx	@dptr,a
      0000D5 D0 04            [24]  727 	pop	ar4
      0000D7 D0 03            [24]  728 	pop	ar3
      0000D9 D0 02            [24]  729 	pop	ar2
      0000DB 02r01rA6         [24]  730 	ljmp	00110$
      0000DE                        731 00109$:
                                    732 ;	main.c:24: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  733 	mov	dptr,#_hex_to_int_ASCII_20000_72
      0000E1 E0               [24]  734 	movx	a,@dptr
      0000E2 F5*04            [12]  735 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  736 	inc	dptr
      0000E5 E0               [24]  737 	movx	a,@dptr
      0000E6 F5*05            [12]  738 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  739 	clr	c
      0000E9 E5*04            [12]  740 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  741 	subb	a,#0x41
      0000ED E5*05            [12]  742 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  743 	xrl	a,#0x80
      0000F1 94 80            [12]  744 	subb	a,#0x80
      0000F3 40 4E            [24]  745 	jc	00105$
      0000F5 74 46            [12]  746 	mov	a,#0x46
      0000F7 95*04            [12]  747 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  748 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  749 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  750 	xrl	b,#0x80
      000101 95 F0            [12]  751 	subb	a,b
      000103 40 3E            [24]  752 	jc	00105$
                                    753 ;	main.c:26: result += str[i] - 55;
      000105 C0 05            [24]  754 	push	ar5
      000107 C0 06            [24]  755 	push	ar6
      000109 C0 07            [24]  756 	push	ar7
      00010B E8               [12]  757 	mov	a,r0
      00010C 2A               [12]  758 	add	a, r2
      00010D FD               [12]  759 	mov	r5,a
      00010E E9               [12]  760 	mov	a,r1
      00010F 3B               [12]  761 	addc	a, r3
      000110 FE               [12]  762 	mov	r6,a
      000111 8C 07            [24]  763 	mov	ar7,r4
      000113 8D 82            [24]  764 	mov	dpl,r5
      000115 8E 83            [24]  765 	mov	dph,r6
      000117 8F F0            [24]  766 	mov	b,r7
      000119 12r00r00         [24]  767 	lcall	__gptrget
      00011C 7F 00            [12]  768 	mov	r7,#0x00
      00011E 24 C9            [12]  769 	add	a,#0xc9
      000120 F5*04            [12]  770 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  771 	mov	a,r7
      000123 34 FF            [12]  772 	addc	a,#0xff
      000125 F5*05            [12]  773 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  774 	mov	dptr,#_hex_to_int_result_10000_71
      00012A E0               [24]  775 	movx	a,@dptr
      00012B FE               [12]  776 	mov	r6,a
      00012C A3               [24]  777 	inc	dptr
      00012D E0               [24]  778 	movx	a,@dptr
      00012E FF               [12]  779 	mov	r7,a
      00012F 90r00r03         [24]  780 	mov	dptr,#_hex_to_int_result_10000_71
      000132 E5*04            [12]  781 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  782 	add	a, r6
      000135 F0               [24]  783 	movx	@dptr,a
      000136 E5*05            [12]  784 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  785 	addc	a, r7
      000139 A3               [24]  786 	inc	dptr
      00013A F0               [24]  787 	movx	@dptr,a
      00013B D0 07            [24]  788 	pop	ar7
      00013D D0 06            [24]  789 	pop	ar6
      00013F D0 05            [24]  790 	pop	ar5
      000141 80 63            [24]  791 	sjmp	00110$
      000143                        792 00105$:
                                    793 ;	main.c:28: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  794 	mov	dptr,#_hex_to_int_ASCII_20000_72
      000146 E0               [24]  795 	movx	a,@dptr
      000147 F5*04            [12]  796 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  797 	inc	dptr
      00014A E0               [24]  798 	movx	a,@dptr
      00014B F5*05            [12]  799 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  800 	clr	c
      00014E E5*04            [12]  801 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  802 	subb	a,#0x61
      000152 E5*05            [12]  803 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  804 	xrl	a,#0x80
      000156 94 80            [12]  805 	subb	a,#0x80
      000158 40 4C            [24]  806 	jc	00110$
      00015A 74 66            [12]  807 	mov	a,#0x66
      00015C 95*04            [12]  808 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  809 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  810 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  811 	xrl	b,#0x80
      000166 95 F0            [12]  812 	subb	a,b
      000168 40 3C            [24]  813 	jc	00110$
                                    814 ;	main.c:30: result += str[i] - 87;
      00016A C0 02            [24]  815 	push	ar2
      00016C C0 03            [24]  816 	push	ar3
      00016E C0 04            [24]  817 	push	ar4
      000170 E8               [12]  818 	mov	a,r0
      000171 2D               [12]  819 	add	a, r5
      000172 FA               [12]  820 	mov	r2,a
      000173 E9               [12]  821 	mov	a,r1
      000174 3E               [12]  822 	addc	a, r6
      000175 FB               [12]  823 	mov	r3,a
      000176 8F 04            [24]  824 	mov	ar4,r7
      000178 8A 82            [24]  825 	mov	dpl,r2
      00017A 8B 83            [24]  826 	mov	dph,r3
      00017C 8C F0            [24]  827 	mov	b,r4
      00017E 12r00r00         [24]  828 	lcall	__gptrget
      000181 7C 00            [12]  829 	mov	r4,#0x00
      000183 24 A9            [12]  830 	add	a,#0xa9
      000185 F5*04            [12]  831 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  832 	mov	a,r4
      000188 34 FF            [12]  833 	addc	a,#0xff
      00018A F5*05            [12]  834 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  835 	mov	dptr,#_hex_to_int_result_10000_71
      00018F E0               [24]  836 	movx	a,@dptr
      000190 FB               [12]  837 	mov	r3,a
      000191 A3               [24]  838 	inc	dptr
      000192 E0               [24]  839 	movx	a,@dptr
      000193 FC               [12]  840 	mov	r4,a
      000194 90r00r03         [24]  841 	mov	dptr,#_hex_to_int_result_10000_71
      000197 E5*04            [12]  842 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  843 	add	a, r3
      00019A F0               [24]  844 	movx	@dptr,a
      00019B E5*05            [12]  845 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  846 	addc	a, r4
      00019E A3               [24]  847 	inc	dptr
      00019F F0               [24]  848 	movx	@dptr,a
                                    849 ;	main.c:34: return result;
      0001A0 D0 04            [24]  850 	pop	ar4
      0001A2 D0 03            [24]  851 	pop	ar3
      0001A4 D0 02            [24]  852 	pop	ar2
                                    853 ;	main.c:30: result += str[i] - 87;
      0001A6                        854 00110$:
                                    855 ;	main.c:32: i++;
      0001A6 08               [12]  856 	inc	r0
      0001A7 B8 00 01         [24]  857 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  858 	inc	r1
      0001AB                        859 00173$:
      0001AB 02r00r32         [24]  860 	ljmp	00112$
      0001AE                        861 00114$:
                                    862 ;	main.c:34: return result;
      0001AE 90r00r03         [24]  863 	mov	dptr,#_hex_to_int_result_10000_71
      0001B1 E0               [24]  864 	movx	a,@dptr
      0001B2 FE               [12]  865 	mov	r6,a
      0001B3 A3               [24]  866 	inc	dptr
      0001B4 E0               [24]  867 	movx	a,@dptr
                                    868 ;	main.c:36: }
      0001B5 8E 82            [24]  869 	mov	dpl,r6
      0001B7 F5 83            [12]  870 	mov	dph,a
      0001B9 22               [24]  871 	ret
                                    872 ;------------------------------------------------------------
                                    873 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    874 ;------------------------------------------------------------
                                    875 ;i                         Allocated with name '_get_user_buffer_size_i_10000_77'
                                    876 ;output                    Allocated with name '_get_user_buffer_size_output_10000_77'
                                    877 ;input                     Allocated with name '_get_user_buffer_size_input_10000_77'
                                    878 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_77'
                                    879 ;------------------------------------------------------------
                                    880 ;	main.c:39: int get_user_buffer_size(void)
                                    881 ;	-----------------------------------------
                                    882 ;	 function get_user_buffer_size
                                    883 ;	-----------------------------------------
      0001BA                        884 _get_user_buffer_size:
                                    885 ;	main.c:45: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  886 	mov	r6,#0x00
      0001BC 7F 00            [12]  887 	mov	r7,#0x00
      0001BE                        888 00103$:
      0001BE C0 07            [24]  889 	push	ar7
      0001C0 C0 06            [24]  890 	push	ar6
      0001C2 12r00r00         [24]  891 	lcall	_getchar
      0001C5 AC 82            [24]  892 	mov	r4, dpl
      0001C7 D0 06            [24]  893 	pop	ar6
      0001C9 D0 07            [24]  894 	pop	ar7
      0001CB BC 0A 02         [24]  895 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  896 	sjmp	00105$
      0001D0                        897 00133$:
      0001D0 BC 0D 02         [24]  898 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  899 	sjmp	00105$
      0001D5                        900 00134$:
      0001D5 C3               [12]  901 	clr	c
      0001D6 EE               [12]  902 	mov	a,r6
      0001D7 94 09            [12]  903 	subb	a,#0x09
      0001D9 EF               [12]  904 	mov	a,r7
      0001DA 64 80            [12]  905 	xrl	a,#0x80
      0001DC 94 80            [12]  906 	subb	a,#0x80
      0001DE 50 2A            [24]  907 	jnc	00105$
                                    908 ;	main.c:47: putchar(ch);
      0001E0 8C 03            [24]  909 	mov	ar3,r4
      0001E2 7D 00            [12]  910 	mov	r5,#0x00
      0001E4 8B 82            [24]  911 	mov	dpl, r3
      0001E6 8D 83            [24]  912 	mov	dph, r5
      0001E8 C0 07            [24]  913 	push	ar7
      0001EA C0 06            [24]  914 	push	ar6
      0001EC C0 04            [24]  915 	push	ar4
      0001EE 12r00r00         [24]  916 	lcall	_putchar
      0001F1 D0 04            [24]  917 	pop	ar4
      0001F3 D0 06            [24]  918 	pop	ar6
      0001F5 D0 07            [24]  919 	pop	ar7
                                    920 ;	main.c:48: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12]  921 	mov	a,r6
      0001F8 24r07            [12]  922 	add	a, #_get_user_buffer_size_input_10000_77
      0001FA F5 82            [12]  923 	mov	dpl,a
      0001FC EF               [12]  924 	mov	a,r7
      0001FD 34s00            [12]  925 	addc	a, #(_get_user_buffer_size_input_10000_77 >> 8)
      0001FF F5 83            [12]  926 	mov	dph,a
      000201 EC               [12]  927 	mov	a,r4
      000202 F0               [24]  928 	movx	@dptr,a
                                    929 ;	main.c:49: i++;
      000203 0E               [12]  930 	inc	r6
      000204 BE 00 B7         [24]  931 	cjne	r6,#0x00,00103$
      000207 0F               [12]  932 	inc	r7
      000208 80 B4            [24]  933 	sjmp	00103$
      00020A                        934 00105$:
                                    935 ;	main.c:51: input[i] = '\0';
      00020A EE               [12]  936 	mov	a,r6
      00020B 24r07            [12]  937 	add	a, #_get_user_buffer_size_input_10000_77
      00020D F5 82            [12]  938 	mov	dpl,a
      00020F EF               [12]  939 	mov	a,r7
      000210 34s00            [12]  940 	addc	a, #(_get_user_buffer_size_input_10000_77 >> 8)
      000212 F5 83            [12]  941 	mov	dph,a
      000214 E4               [12]  942 	clr	a
      000215 F0               [24]  943 	movx	@dptr,a
                                    944 ;	main.c:52: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24]  945 	mov	dptr,#_get_user_buffer_size_input_10000_77
      000219 F5 F0            [12]  946 	mov	b,a
      00021B 12r00r00         [24]  947 	lcall	_hex_to_int
      00021E AE 82            [24]  948 	mov	r6, dpl
      000220 AF 83            [24]  949 	mov	r7, dph
                                    950 ;	main.c:53: printf_tiny("\n\r");
      000222 C0 07            [24]  951 	push	ar7
      000224 C0 06            [24]  952 	push	ar6
      000226 74r00            [12]  953 	mov	a,#___str_0
      000228 C0 E0            [24]  954 	push	acc
      00022A 74s00            [12]  955 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24]  956 	push	acc
      00022E 12r00r00         [24]  957 	lcall	_printf_tiny
      000231 15 81            [12]  958 	dec	sp
      000233 15 81            [12]  959 	dec	sp
      000235 D0 06            [24]  960 	pop	ar6
      000237 D0 07            [24]  961 	pop	ar7
                                    962 ;	main.c:55: return output;
      000239 8E 82            [24]  963 	mov	dpl, r6
      00023B 8F 83            [24]  964 	mov	dph, r7
                                    965 ;	main.c:56: }
      00023D 22               [24]  966 	ret
                                    967 ;------------------------------------------------------------
                                    968 ;Allocation info for local variables in function 'main'
                                    969 ;------------------------------------------------------------
                                    970 ;c                         Allocated with name '_main_c_20001_82'
                                    971 ;reg_bank                  Allocated with name '_main_reg_bank_40002_85'
                                    972 ;addr                      Allocated with name '_main_addr_40003_86'
                                    973 ;data                      Allocated with name '_main_data_40004_87'
                                    974 ;num_bytes                 Allocated with name '_main_num_bytes_40002_89'
                                    975 ;start_address             Allocated with name '_main_start_address_40003_90'
                                    976 ;buffer                    Allocated with name '_main_buffer_40003_90'
                                    977 ;i                         Allocated with name '_main_i_50003_91'
                                    978 ;num_bytes                 Allocated with name '_main_num_bytes_40002_94'
                                    979 ;start_address             Allocated with name '_main_start_address_40003_95'
                                    980 ;buffer                    Allocated with name '_main_buffer_40003_95'
                                    981 ;i                         Allocated with name '_main_i_50003_96'
                                    982 ;reg_bank                  Allocated with name '_main_reg_bank_40002_99'
                                    983 ;addr                      Allocated with name '_main_addr_40003_100'
                                    984 ;data                      Allocated with name '_main_data_40003_100'
                                    985 ;addr                      Allocated with name '_main_addr_40002_102'
                                    986 ;data                      Allocated with name '_main_data_40003_103'
                                    987 ;addr                      Allocated with name '_main_addr_40002_105'
                                    988 ;data                      Allocated with name '_main_data_40002_105'
                                    989 ;addr                      Allocated with name '_main_addr_40002_108'
                                    990 ;bank                      Allocated with name '_main_bank_40003_109'
                                    991 ;data                      Allocated with name '_main_data_40003_109'
                                    992 ;i                         Allocated with name '_main_i_50001_114'
                                    993 ;------------------------------------------------------------
                                    994 ;	main.c:58: void main(void)
                                    995 ;	-----------------------------------------
                                    996 ;	 function main
                                    997 ;	-----------------------------------------
      00023E                        998 _main:
                                    999 ;	main.c:60: ENC_RESET = 1;
                                   1000 ;	assignBit
      00023E D2 90            [12] 1001 	setb	_P1_0
                                   1002 ;	main.c:61: printf("SPI Operations on 8051\n\r");
      000240 74r03            [12] 1003 	mov	a,#___str_1
      000242 C0 E0            [24] 1004 	push	acc
      000244 74s00            [12] 1005 	mov	a,#(___str_1 >> 8)
      000246 C0 E0            [24] 1006 	push	acc
      000248 74 80            [12] 1007 	mov	a,#0x80
      00024A C0 E0            [24] 1008 	push	acc
      00024C 12r00r00         [24] 1009 	lcall	_printf
      00024F 15 81            [12] 1010 	dec	sp
      000251 15 81            [12] 1011 	dec	sp
      000253 15 81            [12] 1012 	dec	sp
                                   1013 ;	main.c:62: configure_SPI();
      000255 12r00r00         [24] 1014 	lcall	_configure_SPI
                                   1015 ;	main.c:64: while(1)
      000258                       1016 00119$:
                                   1017 ;	main.c:66: printf("\n\rChoose an action: \n\r");
      000258 74r1C            [12] 1018 	mov	a,#___str_2
      00025A C0 E0            [24] 1019 	push	acc
      00025C 74s00            [12] 1020 	mov	a,#(___str_2 >> 8)
      00025E C0 E0            [24] 1021 	push	acc
      000260 74 80            [12] 1022 	mov	a,#0x80
      000262 C0 E0            [24] 1023 	push	acc
      000264 12r00r00         [24] 1024 	lcall	_printf
      000267 15 81            [12] 1025 	dec	sp
      000269 15 81            [12] 1026 	dec	sp
      00026B 15 81            [12] 1027 	dec	sp
                                   1028 ;	main.c:67: printf("1 --> Control Write\n\r");
      00026D 74r33            [12] 1029 	mov	a,#___str_3
      00026F C0 E0            [24] 1030 	push	acc
      000271 74s00            [12] 1031 	mov	a,#(___str_3 >> 8)
      000273 C0 E0            [24] 1032 	push	acc
      000275 74 80            [12] 1033 	mov	a,#0x80
      000277 C0 E0            [24] 1034 	push	acc
      000279 12r00r00         [24] 1035 	lcall	_printf
      00027C 15 81            [12] 1036 	dec	sp
      00027E 15 81            [12] 1037 	dec	sp
      000280 15 81            [12] 1038 	dec	sp
                                   1039 ;	main.c:68: printf("2 --> Buffer Write\n\r");
      000282 74r49            [12] 1040 	mov	a,#___str_4
      000284 C0 E0            [24] 1041 	push	acc
      000286 74s00            [12] 1042 	mov	a,#(___str_4 >> 8)
      000288 C0 E0            [24] 1043 	push	acc
      00028A 74 80            [12] 1044 	mov	a,#0x80
      00028C C0 E0            [24] 1045 	push	acc
      00028E 12r00r00         [24] 1046 	lcall	_printf
      000291 15 81            [12] 1047 	dec	sp
      000293 15 81            [12] 1048 	dec	sp
      000295 15 81            [12] 1049 	dec	sp
                                   1050 ;	main.c:69: printf("3 --> Buffer Read\n\r");
      000297 74r5E            [12] 1051 	mov	a,#___str_5
      000299 C0 E0            [24] 1052 	push	acc
      00029B 74s00            [12] 1053 	mov	a,#(___str_5 >> 8)
      00029D C0 E0            [24] 1054 	push	acc
      00029F 74 80            [12] 1055 	mov	a,#0x80
      0002A1 C0 E0            [24] 1056 	push	acc
      0002A3 12r00r00         [24] 1057 	lcall	_printf
      0002A6 15 81            [12] 1058 	dec	sp
      0002A8 15 81            [12] 1059 	dec	sp
      0002AA 15 81            [12] 1060 	dec	sp
                                   1061 ;	main.c:70: printf("4 --> MAC Register Read\n\r");
      0002AC 74r72            [12] 1062 	mov	a,#___str_6
      0002AE C0 E0            [24] 1063 	push	acc
      0002B0 74s00            [12] 1064 	mov	a,#(___str_6 >> 8)
      0002B2 C0 E0            [24] 1065 	push	acc
      0002B4 74 80            [12] 1066 	mov	a,#0x80
      0002B6 C0 E0            [24] 1067 	push	acc
      0002B8 12r00r00         [24] 1068 	lcall	_printf
      0002BB 15 81            [12] 1069 	dec	sp
      0002BD 15 81            [12] 1070 	dec	sp
      0002BF 15 81            [12] 1071 	dec	sp
                                   1072 ;	main.c:71: printf("5 --> PHY SPI Write\n\r");
      0002C1 74r8C            [12] 1073 	mov	a,#___str_7
      0002C3 C0 E0            [24] 1074 	push	acc
      0002C5 74s00            [12] 1075 	mov	a,#(___str_7 >> 8)
      0002C7 C0 E0            [24] 1076 	push	acc
      0002C9 74 80            [12] 1077 	mov	a,#0x80
      0002CB C0 E0            [24] 1078 	push	acc
      0002CD 12r00r00         [24] 1079 	lcall	_printf
      0002D0 15 81            [12] 1080 	dec	sp
      0002D2 15 81            [12] 1081 	dec	sp
      0002D4 15 81            [12] 1082 	dec	sp
                                   1083 ;	main.c:72: printf("6 --> PHY SPI Read\n\r");
      0002D6 74rA2            [12] 1084 	mov	a,#___str_8
      0002D8 C0 E0            [24] 1085 	push	acc
      0002DA 74s00            [12] 1086 	mov	a,#(___str_8 >> 8)
      0002DC C0 E0            [24] 1087 	push	acc
      0002DE 74 80            [12] 1088 	mov	a,#0x80
      0002E0 C0 E0            [24] 1089 	push	acc
      0002E2 12r00r00         [24] 1090 	lcall	_printf
      0002E5 15 81            [12] 1091 	dec	sp
      0002E7 15 81            [12] 1092 	dec	sp
      0002E9 15 81            [12] 1093 	dec	sp
                                   1094 ;	main.c:73: printf("7 --> ENC Reset\n\r");
      0002EB 74rB7            [12] 1095 	mov	a,#___str_9
      0002ED C0 E0            [24] 1096 	push	acc
      0002EF 74s00            [12] 1097 	mov	a,#(___str_9 >> 8)
      0002F1 C0 E0            [24] 1098 	push	acc
      0002F3 74 80            [12] 1099 	mov	a,#0x80
      0002F5 C0 E0            [24] 1100 	push	acc
      0002F7 12r00r00         [24] 1101 	lcall	_printf
      0002FA 15 81            [12] 1102 	dec	sp
      0002FC 15 81            [12] 1103 	dec	sp
      0002FE 15 81            [12] 1104 	dec	sp
                                   1105 ;	main.c:74: printf("8 --> Read ETH Register\n\r");
      000300 74rC9            [12] 1106 	mov	a,#___str_10
      000302 C0 E0            [24] 1107 	push	acc
      000304 74s00            [12] 1108 	mov	a,#(___str_10 >> 8)
      000306 C0 E0            [24] 1109 	push	acc
      000308 74 80            [12] 1110 	mov	a,#0x80
      00030A C0 E0            [24] 1111 	push	acc
      00030C 12r00r00         [24] 1112 	lcall	_printf
      00030F 15 81            [12] 1113 	dec	sp
      000311 15 81            [12] 1114 	dec	sp
      000313 15 81            [12] 1115 	dec	sp
                                   1116 ;	main.c:75: printf("9 --> Display Menu\n\r");
      000315 74rE3            [12] 1117 	mov	a,#___str_11
      000317 C0 E0            [24] 1118 	push	acc
      000319 74s00            [12] 1119 	mov	a,#(___str_11 >> 8)
      00031B C0 E0            [24] 1120 	push	acc
      00031D 74 80            [12] 1121 	mov	a,#0x80
      00031F C0 E0            [24] 1122 	push	acc
      000321 12r00r00         [24] 1123 	lcall	_printf
      000324 15 81            [12] 1124 	dec	sp
      000326 15 81            [12] 1125 	dec	sp
      000328 15 81            [12] 1126 	dec	sp
                                   1127 ;	main.c:76: printf("A --> Send ARP Request\n\r");
      00032A 74rF8            [12] 1128 	mov	a,#___str_12
      00032C C0 E0            [24] 1129 	push	acc
      00032E 74s00            [12] 1130 	mov	a,#(___str_12 >> 8)
      000330 C0 E0            [24] 1131 	push	acc
      000332 74 80            [12] 1132 	mov	a,#0x80
      000334 C0 E0            [24] 1133 	push	acc
      000336 12r00r00         [24] 1134 	lcall	_printf
      000339 15 81            [12] 1135 	dec	sp
      00033B 15 81            [12] 1136 	dec	sp
      00033D 15 81            [12] 1137 	dec	sp
                                   1138 ;	main.c:77: printf("B --> Init RX buffers\n\r");
      00033F 74r11            [12] 1139 	mov	a,#___str_13
      000341 C0 E0            [24] 1140 	push	acc
      000343 74s01            [12] 1141 	mov	a,#(___str_13 >> 8)
      000345 C0 E0            [24] 1142 	push	acc
      000347 74 80            [12] 1143 	mov	a,#0x80
      000349 C0 E0            [24] 1144 	push	acc
      00034B 12r00r00         [24] 1145 	lcall	_printf
      00034E 15 81            [12] 1146 	dec	sp
      000350 15 81            [12] 1147 	dec	sp
      000352 15 81            [12] 1148 	dec	sp
                                   1149 ;	main.c:78: printf("C --> Hard Reset(nRESET pin)\n\r");
      000354 74r29            [12] 1150 	mov	a,#___str_14
      000356 C0 E0            [24] 1151 	push	acc
      000358 74s01            [12] 1152 	mov	a,#(___str_14 >> 8)
      00035A C0 E0            [24] 1153 	push	acc
      00035C 74 80            [12] 1154 	mov	a,#0x80
      00035E C0 E0            [24] 1155 	push	acc
      000360 12r00r00         [24] 1156 	lcall	_printf
      000363 15 81            [12] 1157 	dec	sp
      000365 15 81            [12] 1158 	dec	sp
      000367 15 81            [12] 1159 	dec	sp
                                   1160 ;	main.c:80: char c = getchar();
      000369 12r00r00         [24] 1161 	lcall	_getchar
      00036C AE 82            [24] 1162 	mov	r6, dpl
                                   1163 ;	main.c:81: putchar(c);
      00036E 8E 05            [24] 1164 	mov	ar5,r6
      000370 7F 00            [12] 1165 	mov	r7,#0x00
      000372 8D 82            [24] 1166 	mov	dpl, r5
      000374 8F 83            [24] 1167 	mov	dph, r7
      000376 C0 06            [24] 1168 	push	ar6
      000378 12r00r00         [24] 1169 	lcall	_putchar
                                   1170 ;	main.c:82: printf("\n\r");
      00037B 74r00            [12] 1171 	mov	a,#___str_0
      00037D C0 E0            [24] 1172 	push	acc
      00037F 74s00            [12] 1173 	mov	a,#(___str_0 >> 8)
      000381 C0 E0            [24] 1174 	push	acc
      000383 74 80            [12] 1175 	mov	a,#0x80
      000385 C0 E0            [24] 1176 	push	acc
      000387 12r00r00         [24] 1177 	lcall	_printf
      00038A 15 81            [12] 1178 	dec	sp
      00038C 15 81            [12] 1179 	dec	sp
      00038E 15 81            [12] 1180 	dec	sp
      000390 D0 06            [24] 1181 	pop	ar6
                                   1182 ;	main.c:84: switch(c)
      000392 BE 31 00         [24] 1183 	cjne	r6,#0x31,00188$
      000395                       1184 00188$:
      000395 50 03            [24] 1185 	jnc	00189$
      000397 02r08r96         [24] 1186 	ljmp	00116$
      00039A                       1187 00189$:
      00039A EE               [12] 1188 	mov	a,r6
      00039B 24 BC            [12] 1189 	add	a,#0xff - 0x43
      00039D 50 03            [24] 1190 	jnc	00190$
      00039F 02r08r96         [24] 1191 	ljmp	00116$
      0003A2                       1192 00190$:
      0003A2 EE               [12] 1193 	mov	a,r6
      0003A3 24 CF            [12] 1194 	add	a,#0xcf
      0003A5 FE               [12] 1195 	mov	r6,a
      0003A6 24 0A            [12] 1196 	add	a,#(00191$-3-.)
      0003A8 83               [24] 1197 	movc	a,@a+pc
      0003A9 F5 82            [12] 1198 	mov	dpl,a
      0003AB EE               [12] 1199 	mov	a,r6
      0003AC 24 17            [12] 1200 	add	a,#(00192$-3-.)
      0003AE 83               [24] 1201 	movc	a,@a+pc
      0003AF F5 83            [12] 1202 	mov	dph,a
      0003B1 E4               [12] 1203 	clr	a
      0003B2 73               [24] 1204 	jmp	@a+dptr
      0003B3                       1205 00191$:
      0003B3rD9                    1206 	.db	00101$
      0003B4r41                    1207 	.db	00102$
      0003B5r3F                    1208 	.db	00104$
      0003B6r10                    1209 	.db	00106$
      0003B7r72                    1210 	.db	00107$
      0003B8rDD                    1211 	.db	00108$
      0003B9r18                    1212 	.db	00109$
      0003BAr33                    1213 	.db	00110$
      0003BBr95                    1214 	.db	00111$
      0003BCr96                    1215 	.db	00116$
      0003BDr96                    1216 	.db	00116$
      0003BEr96                    1217 	.db	00116$
      0003BFr96                    1218 	.db	00116$
      0003C0r96                    1219 	.db	00116$
      0003C1r96                    1220 	.db	00116$
      0003C2r96                    1221 	.db	00116$
      0003C3r55                    1222 	.db	00112$
      0003C4r5E                    1223 	.db	00113$
      0003C5r64                    1224 	.db	00114$
      0003C6                       1225 00192$:
      0003C6s03                    1226 	.db	00101$>>8
      0003C7s04                    1227 	.db	00102$>>8
      0003C8s05                    1228 	.db	00104$>>8
      0003C9s06                    1229 	.db	00106$>>8
      0003CAs06                    1230 	.db	00107$>>8
      0003CBs06                    1231 	.db	00108$>>8
      0003CCs07                    1232 	.db	00109$>>8
      0003CDs07                    1233 	.db	00110$>>8
      0003CEs07                    1234 	.db	00111$>>8
      0003CFs08                    1235 	.db	00116$>>8
      0003D0s08                    1236 	.db	00116$>>8
      0003D1s08                    1237 	.db	00116$>>8
      0003D2s08                    1238 	.db	00116$>>8
      0003D3s08                    1239 	.db	00116$>>8
      0003D4s08                    1240 	.db	00116$>>8
      0003D5s08                    1241 	.db	00116$>>8
      0003D6s08                    1242 	.db	00112$>>8
      0003D7s08                    1243 	.db	00113$>>8
      0003D8s08                    1244 	.db	00114$>>8
                                   1245 ;	main.c:86: case '1': {
      0003D9                       1246 00101$:
                                   1247 ;	main.c:87: printf("Enter the register bank to select:\n\r");
      0003D9 74r48            [12] 1248 	mov	a,#___str_15
      0003DB C0 E0            [24] 1249 	push	acc
      0003DD 74s01            [12] 1250 	mov	a,#(___str_15 >> 8)
      0003DF C0 E0            [24] 1251 	push	acc
      0003E1 74 80            [12] 1252 	mov	a,#0x80
      0003E3 C0 E0            [24] 1253 	push	acc
      0003E5 12r00r00         [24] 1254 	lcall	_printf
      0003E8 15 81            [12] 1255 	dec	sp
      0003EA 15 81            [12] 1256 	dec	sp
      0003EC 15 81            [12] 1257 	dec	sp
                                   1258 ;	main.c:88: uint8_t reg_bank = get_user_buffer_size();
      0003EE 12r01rBA         [24] 1259 	lcall	_get_user_buffer_size
      0003F1 AE 82            [24] 1260 	mov	r6, dpl
                                   1261 ;	main.c:89: printf("Enter the address of the Control Register:\n\r");
      0003F3 C0 06            [24] 1262 	push	ar6
      0003F5 74r6D            [12] 1263 	mov	a,#___str_16
      0003F7 C0 E0            [24] 1264 	push	acc
      0003F9 74s01            [12] 1265 	mov	a,#(___str_16 >> 8)
      0003FB C0 E0            [24] 1266 	push	acc
      0003FD 74 80            [12] 1267 	mov	a,#0x80
      0003FF C0 E0            [24] 1268 	push	acc
      000401 12r00r00         [24] 1269 	lcall	_printf
      000404 15 81            [12] 1270 	dec	sp
      000406 15 81            [12] 1271 	dec	sp
      000408 15 81            [12] 1272 	dec	sp
                                   1273 ;	main.c:90: uint8_t addr = get_user_buffer_size();
      00040A 12r01rBA         [24] 1274 	lcall	_get_user_buffer_size
      00040D AD 82            [24] 1275 	mov	r5, dpl
                                   1276 ;	main.c:91: printf("Enter the data you want to write:\n\r");
      00040F C0 05            [24] 1277 	push	ar5
      000411 74r9A            [12] 1278 	mov	a,#___str_17
      000413 C0 E0            [24] 1279 	push	acc
      000415 74s01            [12] 1280 	mov	a,#(___str_17 >> 8)
      000417 C0 E0            [24] 1281 	push	acc
      000419 74 80            [12] 1282 	mov	a,#0x80
      00041B C0 E0            [24] 1283 	push	acc
      00041D 12r00r00         [24] 1284 	lcall	_printf
      000420 15 81            [12] 1285 	dec	sp
      000422 15 81            [12] 1286 	dec	sp
      000424 15 81            [12] 1287 	dec	sp
                                   1288 ;	main.c:92: uint8_t data = get_user_buffer_size();
      000426 12r01rBA         [24] 1289 	lcall	_get_user_buffer_size
      000429 AC 82            [24] 1290 	mov	r4, dpl
      00042B D0 05            [24] 1291 	pop	ar5
      00042D D0 06            [24] 1292 	pop	ar6
                                   1293 ;	main.c:93: spi_control_write(reg_bank, addr, data);
      00042F 90r00r00         [24] 1294 	mov	dptr,#_spi_control_write_PARM_2
      000432 ED               [12] 1295 	mov	a,r5
      000433 F0               [24] 1296 	movx	@dptr,a
      000434 90r00r00         [24] 1297 	mov	dptr,#_spi_control_write_PARM_3
      000437 EC               [12] 1298 	mov	a,r4
      000438 F0               [24] 1299 	movx	@dptr,a
      000439 8E 82            [24] 1300 	mov	dpl, r6
      00043B 12r00r00         [24] 1301 	lcall	_spi_control_write
                                   1302 ;	main.c:94: break;
      00043E 02r02r58         [24] 1303 	ljmp	00119$
                                   1304 ;	main.c:96: case '2': {
      000441                       1305 00102$:
                                   1306 ;	main.c:97: printf("Enter the number of bytes to write:\n\r");
      000441 74rBE            [12] 1307 	mov	a,#___str_18
      000443 C0 E0            [24] 1308 	push	acc
      000445 74s01            [12] 1309 	mov	a,#(___str_18 >> 8)
      000447 C0 E0            [24] 1310 	push	acc
      000449 74 80            [12] 1311 	mov	a,#0x80
      00044B C0 E0            [24] 1312 	push	acc
      00044D 12r00r00         [24] 1313 	lcall	_printf
      000450 15 81            [12] 1314 	dec	sp
      000452 15 81            [12] 1315 	dec	sp
      000454 15 81            [12] 1316 	dec	sp
                                   1317 ;	main.c:98: int num_bytes = get_user_buffer_size();
      000456 12r01rBA         [24] 1318 	lcall	_get_user_buffer_size
      000459 AE 82            [24] 1319 	mov	r6, dpl
      00045B AF 83            [24] 1320 	mov	r7, dph
                                   1321 ;	main.c:99: printf("Enter the starting address:\n\r");
      00045D C0 07            [24] 1322 	push	ar7
      00045F C0 06            [24] 1323 	push	ar6
      000461 74rE4            [12] 1324 	mov	a,#___str_19
      000463 C0 E0            [24] 1325 	push	acc
      000465 74s01            [12] 1326 	mov	a,#(___str_19 >> 8)
      000467 C0 E0            [24] 1327 	push	acc
      000469 74 80            [12] 1328 	mov	a,#0x80
      00046B C0 E0            [24] 1329 	push	acc
      00046D 12r00r00         [24] 1330 	lcall	_printf
      000470 15 81            [12] 1331 	dec	sp
      000472 15 81            [12] 1332 	dec	sp
      000474 15 81            [12] 1333 	dec	sp
                                   1334 ;	main.c:100: uint16_t start_address = get_user_buffer_size();
      000476 12r01rBA         [24] 1335 	lcall	_get_user_buffer_size
      000479 AC 82            [24] 1336 	mov	r4, dpl
      00047B AD 83            [24] 1337 	mov	r5, dph
      00047D D0 06            [24] 1338 	pop	ar6
      00047F D0 07            [24] 1339 	pop	ar7
                                   1340 ;	main.c:102: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      000481 C0 07            [24] 1341 	push	ar7
      000483 C0 06            [24] 1342 	push	ar6
      000485 C0 05            [24] 1343 	push	ar5
      000487 C0 04            [24] 1344 	push	ar4
      000489 C0 06            [24] 1345 	push	ar6
      00048B C0 07            [24] 1346 	push	ar7
      00048D 74r02            [12] 1347 	mov	a,#___str_20
      00048F C0 E0            [24] 1348 	push	acc
      000491 74s02            [12] 1349 	mov	a,#(___str_20 >> 8)
      000493 C0 E0            [24] 1350 	push	acc
      000495 74 80            [12] 1351 	mov	a,#0x80
      000497 C0 E0            [24] 1352 	push	acc
      000499 12r00r00         [24] 1353 	lcall	_printf
      00049C E5 81            [12] 1354 	mov	a,sp
      00049E 24 FB            [12] 1355 	add	a,#0xfb
      0004A0 F5 81            [12] 1356 	mov	sp,a
      0004A2 D0 04            [24] 1357 	pop	ar4
      0004A4 D0 05            [24] 1358 	pop	ar5
      0004A6 D0 06            [24] 1359 	pop	ar6
      0004A8 D0 07            [24] 1360 	pop	ar7
                                   1361 ;	main.c:103: for (int i = 0; i < num_bytes; i++) {
      0004AA 7A 00            [12] 1362 	mov	r2,#0x00
      0004AC 7B 00            [12] 1363 	mov	r3,#0x00
      0004AE                       1364 00122$:
      0004AE C3               [12] 1365 	clr	c
      0004AF EA               [12] 1366 	mov	a,r2
      0004B0 9E               [12] 1367 	subb	a,r6
      0004B1 EB               [12] 1368 	mov	a,r3
      0004B2 64 80            [12] 1369 	xrl	a,#0x80
      0004B4 8F F0            [24] 1370 	mov	b,r7
      0004B6 63 F0 80         [24] 1371 	xrl	b,#0x80
      0004B9 95 F0            [12] 1372 	subb	a,b
      0004BB 50 63            [24] 1373 	jnc	00103$
                                   1374 ;	main.c:104: printf("Byte %d: ", i);
      0004BD C0 04            [24] 1375 	push	ar4
      0004BF C0 05            [24] 1376 	push	ar5
      0004C1 C0 07            [24] 1377 	push	ar7
      0004C3 C0 06            [24] 1378 	push	ar6
      0004C5 C0 05            [24] 1379 	push	ar5
      0004C7 C0 04            [24] 1380 	push	ar4
      0004C9 C0 03            [24] 1381 	push	ar3
      0004CB C0 02            [24] 1382 	push	ar2
      0004CD C0 02            [24] 1383 	push	ar2
      0004CF C0 03            [24] 1384 	push	ar3
      0004D1 74r25            [12] 1385 	mov	a,#___str_21
      0004D3 C0 E0            [24] 1386 	push	acc
      0004D5 74s02            [12] 1387 	mov	a,#(___str_21 >> 8)
      0004D7 C0 E0            [24] 1388 	push	acc
      0004D9 74 80            [12] 1389 	mov	a,#0x80
      0004DB C0 E0            [24] 1390 	push	acc
      0004DD 12r00r00         [24] 1391 	lcall	_printf
      0004E0 E5 81            [12] 1392 	mov	a,sp
      0004E2 24 FB            [12] 1393 	add	a,#0xfb
      0004E4 F5 81            [12] 1394 	mov	sp,a
      0004E6 D0 02            [24] 1395 	pop	ar2
      0004E8 D0 03            [24] 1396 	pop	ar3
      0004EA D0 04            [24] 1397 	pop	ar4
      0004EC D0 05            [24] 1398 	pop	ar5
                                   1399 ;	main.c:105: buffer[i] = get_user_buffer_size();
      0004EE EA               [12] 1400 	mov	a,r2
      0004EF 24r11            [12] 1401 	add	a, #_main_buffer_40003_90
      0004F1 F8               [12] 1402 	mov	r0,a
      0004F2 EB               [12] 1403 	mov	a,r3
      0004F3 34s00            [12] 1404 	addc	a, #(_main_buffer_40003_90 >> 8)
      0004F5 F9               [12] 1405 	mov	r1,a
      0004F6 C0 03            [24] 1406 	push	ar3
      0004F8 C0 02            [24] 1407 	push	ar2
      0004FA C0 01            [24] 1408 	push	ar1
      0004FC C0 00            [24] 1409 	push	ar0
      0004FE 12r01rBA         [24] 1410 	lcall	_get_user_buffer_size
      000501 AC 82            [24] 1411 	mov	r4, dpl
      000503 D0 00            [24] 1412 	pop	ar0
      000505 D0 01            [24] 1413 	pop	ar1
      000507 D0 02            [24] 1414 	pop	ar2
      000509 D0 03            [24] 1415 	pop	ar3
      00050B D0 06            [24] 1416 	pop	ar6
      00050D D0 07            [24] 1417 	pop	ar7
      00050F 88 82            [24] 1418 	mov	dpl,r0
      000511 89 83            [24] 1419 	mov	dph,r1
      000513 EC               [12] 1420 	mov	a,r4
      000514 F0               [24] 1421 	movx	@dptr,a
                                   1422 ;	main.c:103: for (int i = 0; i < num_bytes; i++) {
      000515 0A               [12] 1423 	inc	r2
      000516 BA 00 01         [24] 1424 	cjne	r2,#0x00,00194$
      000519 0B               [12] 1425 	inc	r3
      00051A                       1426 00194$:
      00051A D0 05            [24] 1427 	pop	ar5
      00051C D0 04            [24] 1428 	pop	ar4
      00051E 80 8E            [24] 1429 	sjmp	00122$
      000520                       1430 00103$:
                                   1431 ;	main.c:107: spi_buffer_write(num_bytes, start_address, buffer);
      000520 90r00r00         [24] 1432 	mov	dptr,#_spi_buffer_write_PARM_2
      000523 EC               [12] 1433 	mov	a,r4
      000524 F0               [24] 1434 	movx	@dptr,a
      000525 ED               [12] 1435 	mov	a,r5
      000526 A3               [24] 1436 	inc	dptr
      000527 F0               [24] 1437 	movx	@dptr,a
      000528 90r00r00         [24] 1438 	mov	dptr,#_spi_buffer_write_PARM_3
      00052B 74r11            [12] 1439 	mov	a,#_main_buffer_40003_90
      00052D F0               [24] 1440 	movx	@dptr,a
      00052E 74s00            [12] 1441 	mov	a,#(_main_buffer_40003_90 >> 8)
      000530 A3               [24] 1442 	inc	dptr
      000531 F0               [24] 1443 	movx	@dptr,a
      000532 E4               [12] 1444 	clr	a
      000533 A3               [24] 1445 	inc	dptr
      000534 F0               [24] 1446 	movx	@dptr,a
      000535 8E 82            [24] 1447 	mov	dpl, r6
      000537 8F 83            [24] 1448 	mov	dph, r7
      000539 12r00r00         [24] 1449 	lcall	_spi_buffer_write
                                   1450 ;	main.c:108: break;
      00053C 02r02r58         [24] 1451 	ljmp	00119$
                                   1452 ;	main.c:110: case '3': {
      00053F                       1453 00104$:
                                   1454 ;	main.c:111: printf("Enter the number of bytes to read:\n\r");
      00053F 74r2F            [12] 1455 	mov	a,#___str_22
      000541 C0 E0            [24] 1456 	push	acc
      000543 74s02            [12] 1457 	mov	a,#(___str_22 >> 8)
      000545 C0 E0            [24] 1458 	push	acc
      000547 74 80            [12] 1459 	mov	a,#0x80
      000549 C0 E0            [24] 1460 	push	acc
      00054B 12r00r00         [24] 1461 	lcall	_printf
      00054E 15 81            [12] 1462 	dec	sp
      000550 15 81            [12] 1463 	dec	sp
      000552 15 81            [12] 1464 	dec	sp
                                   1465 ;	main.c:112: int num_bytes = get_user_buffer_size();
      000554 12r01rBA         [24] 1466 	lcall	_get_user_buffer_size
      000557 AE 82            [24] 1467 	mov	r6, dpl
      000559 AF 83            [24] 1468 	mov	r7, dph
                                   1469 ;	main.c:113: printf("Enter the starting address:\n\r");
      00055B C0 07            [24] 1470 	push	ar7
      00055D C0 06            [24] 1471 	push	ar6
      00055F 74rE4            [12] 1472 	mov	a,#___str_19
      000561 C0 E0            [24] 1473 	push	acc
      000563 74s01            [12] 1474 	mov	a,#(___str_19 >> 8)
      000565 C0 E0            [24] 1475 	push	acc
      000567 74 80            [12] 1476 	mov	a,#0x80
      000569 C0 E0            [24] 1477 	push	acc
      00056B 12r00r00         [24] 1478 	lcall	_printf
      00056E 15 81            [12] 1479 	dec	sp
      000570 15 81            [12] 1480 	dec	sp
      000572 15 81            [12] 1481 	dec	sp
                                   1482 ;	main.c:114: uint16_t start_address = get_user_buffer_size();
      000574 12r01rBA         [24] 1483 	lcall	_get_user_buffer_size
      000577 AC 82            [24] 1484 	mov	r4, dpl
      000579 AD 83            [24] 1485 	mov	r5, dph
      00057B D0 06            [24] 1486 	pop	ar6
      00057D D0 07            [24] 1487 	pop	ar7
                                   1488 ;	main.c:116: spi_buffer_read(num_bytes, start_address, buffer);
      00057F 90r00r00         [24] 1489 	mov	dptr,#_spi_buffer_read_PARM_2
      000582 EC               [12] 1490 	mov	a,r4
      000583 F0               [24] 1491 	movx	@dptr,a
      000584 ED               [12] 1492 	mov	a,r5
      000585 A3               [24] 1493 	inc	dptr
      000586 F0               [24] 1494 	movx	@dptr,a
      000587 90r00r00         [24] 1495 	mov	dptr,#_spi_buffer_read_PARM_3
      00058A 74r11            [12] 1496 	mov	a,#_main_buffer_40003_95
      00058C F0               [24] 1497 	movx	@dptr,a
      00058D 74s01            [12] 1498 	mov	a,#(_main_buffer_40003_95 >> 8)
      00058F A3               [24] 1499 	inc	dptr
      000590 F0               [24] 1500 	movx	@dptr,a
      000591 E4               [12] 1501 	clr	a
      000592 A3               [24] 1502 	inc	dptr
      000593 F0               [24] 1503 	movx	@dptr,a
      000594 8E 82            [24] 1504 	mov	dpl, r6
      000596 8F 83            [24] 1505 	mov	dph, r7
      000598 C0 07            [24] 1506 	push	ar7
      00059A C0 06            [24] 1507 	push	ar6
      00059C 12r00r00         [24] 1508 	lcall	_spi_buffer_read
                                   1509 ;	main.c:117: printf("Read Data:\n\r");
      00059F 74r54            [12] 1510 	mov	a,#___str_23
      0005A1 C0 E0            [24] 1511 	push	acc
      0005A3 74s02            [12] 1512 	mov	a,#(___str_23 >> 8)
      0005A5 C0 E0            [24] 1513 	push	acc
      0005A7 74 80            [12] 1514 	mov	a,#0x80
      0005A9 C0 E0            [24] 1515 	push	acc
      0005AB 12r00r00         [24] 1516 	lcall	_printf
      0005AE 15 81            [12] 1517 	dec	sp
      0005B0 15 81            [12] 1518 	dec	sp
      0005B2 15 81            [12] 1519 	dec	sp
      0005B4 D0 06            [24] 1520 	pop	ar6
      0005B6 D0 07            [24] 1521 	pop	ar7
                                   1522 ;	main.c:118: for (int i = 0; i < num_bytes; i++) {
      0005B8 7C 00            [12] 1523 	mov	r4,#0x00
      0005BA 7D 00            [12] 1524 	mov	r5,#0x00
      0005BC                       1525 00125$:
      0005BC C3               [12] 1526 	clr	c
      0005BD EC               [12] 1527 	mov	a,r4
      0005BE 9E               [12] 1528 	subb	a,r6
      0005BF ED               [12] 1529 	mov	a,r5
      0005C0 64 80            [12] 1530 	xrl	a,#0x80
      0005C2 8F F0            [24] 1531 	mov	b,r7
      0005C4 63 F0 80         [24] 1532 	xrl	b,#0x80
      0005C7 95 F0            [12] 1533 	subb	a,b
      0005C9 40 03            [24] 1534 	jc	00195$
      0005CB 02r02r58         [24] 1535 	ljmp	00119$
      0005CE                       1536 00195$:
                                   1537 ;	main.c:119: printf("Byte %d: 0x%02X\n\r", i, buffer[i]);
      0005CE EC               [12] 1538 	mov	a,r4
      0005CF 24r11            [12] 1539 	add	a, #_main_buffer_40003_95
      0005D1 F5 82            [12] 1540 	mov	dpl,a
      0005D3 ED               [12] 1541 	mov	a,r5
      0005D4 34s01            [12] 1542 	addc	a, #(_main_buffer_40003_95 >> 8)
      0005D6 F5 83            [12] 1543 	mov	dph,a
      0005D8 E0               [24] 1544 	movx	a,@dptr
      0005D9 FB               [12] 1545 	mov	r3,a
      0005DA 7A 00            [12] 1546 	mov	r2,#0x00
      0005DC C0 07            [24] 1547 	push	ar7
      0005DE C0 06            [24] 1548 	push	ar6
      0005E0 C0 05            [24] 1549 	push	ar5
      0005E2 C0 04            [24] 1550 	push	ar4
      0005E4 C0 03            [24] 1551 	push	ar3
      0005E6 C0 02            [24] 1552 	push	ar2
      0005E8 C0 04            [24] 1553 	push	ar4
      0005EA C0 05            [24] 1554 	push	ar5
      0005EC 74r61            [12] 1555 	mov	a,#___str_24
      0005EE C0 E0            [24] 1556 	push	acc
      0005F0 74s02            [12] 1557 	mov	a,#(___str_24 >> 8)
      0005F2 C0 E0            [24] 1558 	push	acc
      0005F4 74 80            [12] 1559 	mov	a,#0x80
      0005F6 C0 E0            [24] 1560 	push	acc
      0005F8 12r00r00         [24] 1561 	lcall	_printf
      0005FB E5 81            [12] 1562 	mov	a,sp
      0005FD 24 F9            [12] 1563 	add	a,#0xf9
      0005FF F5 81            [12] 1564 	mov	sp,a
      000601 D0 04            [24] 1565 	pop	ar4
      000603 D0 05            [24] 1566 	pop	ar5
      000605 D0 06            [24] 1567 	pop	ar6
      000607 D0 07            [24] 1568 	pop	ar7
                                   1569 ;	main.c:118: for (int i = 0; i < num_bytes; i++) {
      000609 0C               [12] 1570 	inc	r4
                                   1571 ;	main.c:123: case '4': {
      00060A BC 00 AF         [24] 1572 	cjne	r4,#0x00,00125$
      00060D 0D               [12] 1573 	inc	r5
      00060E 80 AC            [24] 1574 	sjmp	00125$
      000610                       1575 00106$:
                                   1576 ;	main.c:124: printf("Enter the MAC register bank to select:\n\r");
      000610 74r73            [12] 1577 	mov	a,#___str_25
      000612 C0 E0            [24] 1578 	push	acc
      000614 74s02            [12] 1579 	mov	a,#(___str_25 >> 8)
      000616 C0 E0            [24] 1580 	push	acc
      000618 74 80            [12] 1581 	mov	a,#0x80
      00061A C0 E0            [24] 1582 	push	acc
      00061C 12r00r00         [24] 1583 	lcall	_printf
      00061F 15 81            [12] 1584 	dec	sp
      000621 15 81            [12] 1585 	dec	sp
      000623 15 81            [12] 1586 	dec	sp
                                   1587 ;	main.c:125: uint8_t reg_bank = get_user_buffer_size();
      000625 12r01rBA         [24] 1588 	lcall	_get_user_buffer_size
      000628 AE 82            [24] 1589 	mov	r6, dpl
                                   1590 ;	main.c:126: printf("Enter the address of the MAC Register:\n\r");
      00062A C0 06            [24] 1591 	push	ar6
      00062C 74r9C            [12] 1592 	mov	a,#___str_26
      00062E C0 E0            [24] 1593 	push	acc
      000630 74s02            [12] 1594 	mov	a,#(___str_26 >> 8)
      000632 C0 E0            [24] 1595 	push	acc
      000634 74 80            [12] 1596 	mov	a,#0x80
      000636 C0 E0            [24] 1597 	push	acc
      000638 12r00r00         [24] 1598 	lcall	_printf
      00063B 15 81            [12] 1599 	dec	sp
      00063D 15 81            [12] 1600 	dec	sp
      00063F 15 81            [12] 1601 	dec	sp
                                   1602 ;	main.c:127: uint8_t addr = get_user_buffer_size();
      000641 12r01rBA         [24] 1603 	lcall	_get_user_buffer_size
      000644 AD 82            [24] 1604 	mov	r5, dpl
      000646 D0 06            [24] 1605 	pop	ar6
                                   1606 ;	main.c:128: uint8_t data = mac_spi_read(addr, reg_bank);
      000648 90r00r00         [24] 1607 	mov	dptr,#_mac_spi_read_PARM_2
      00064B EE               [12] 1608 	mov	a,r6
      00064C F0               [24] 1609 	movx	@dptr,a
      00064D 8D 82            [24] 1610 	mov	dpl, r5
      00064F 12r00r00         [24] 1611 	lcall	_mac_spi_read
      000652 AF 82            [24] 1612 	mov	r7, dpl
                                   1613 ;	main.c:129: printf("MAC Register Data: 0x%02X\n\r", data);
      000654 7E 00            [12] 1614 	mov	r6,#0x00
      000656 C0 07            [24] 1615 	push	ar7
      000658 C0 06            [24] 1616 	push	ar6
      00065A 74rC5            [12] 1617 	mov	a,#___str_27
      00065C C0 E0            [24] 1618 	push	acc
      00065E 74s02            [12] 1619 	mov	a,#(___str_27 >> 8)
      000660 C0 E0            [24] 1620 	push	acc
      000662 74 80            [12] 1621 	mov	a,#0x80
      000664 C0 E0            [24] 1622 	push	acc
      000666 12r00r00         [24] 1623 	lcall	_printf
      000669 E5 81            [12] 1624 	mov	a,sp
      00066B 24 FB            [12] 1625 	add	a,#0xfb
      00066D F5 81            [12] 1626 	mov	sp,a
                                   1627 ;	main.c:130: break;
      00066F 02r02r58         [24] 1628 	ljmp	00119$
                                   1629 ;	main.c:132: case '5': {
      000672                       1630 00107$:
                                   1631 ;	main.c:133: printf("Enter the PHY register address:\n\r");
      000672 74rE1            [12] 1632 	mov	a,#___str_28
      000674 C0 E0            [24] 1633 	push	acc
      000676 74s02            [12] 1634 	mov	a,#(___str_28 >> 8)
      000678 C0 E0            [24] 1635 	push	acc
      00067A 74 80            [12] 1636 	mov	a,#0x80
      00067C C0 E0            [24] 1637 	push	acc
      00067E 12r00r00         [24] 1638 	lcall	_printf
      000681 15 81            [12] 1639 	dec	sp
      000683 15 81            [12] 1640 	dec	sp
      000685 15 81            [12] 1641 	dec	sp
                                   1642 ;	main.c:134: uint8_t addr = get_user_buffer_size();
      000687 12r01rBA         [24] 1643 	lcall	_get_user_buffer_size
      00068A AE 82            [24] 1644 	mov	r6, dpl
                                   1645 ;	main.c:135: printf("Enter the 16-bit data to write:\n\r");
      00068C C0 06            [24] 1646 	push	ar6
      00068E 74r03            [12] 1647 	mov	a,#___str_29
      000690 C0 E0            [24] 1648 	push	acc
      000692 74s03            [12] 1649 	mov	a,#(___str_29 >> 8)
      000694 C0 E0            [24] 1650 	push	acc
      000696 74 80            [12] 1651 	mov	a,#0x80
      000698 C0 E0            [24] 1652 	push	acc
      00069A 12r00r00         [24] 1653 	lcall	_printf
      00069D 15 81            [12] 1654 	dec	sp
      00069F 15 81            [12] 1655 	dec	sp
      0006A1 15 81            [12] 1656 	dec	sp
                                   1657 ;	main.c:136: uint16_t data = get_user_buffer_size();
      0006A3 12r01rBA         [24] 1658 	lcall	_get_user_buffer_size
      0006A6 AD 82            [24] 1659 	mov	r5, dpl
      0006A8 AF 83            [24] 1660 	mov	r7, dph
      0006AA D0 06            [24] 1661 	pop	ar6
                                   1662 ;	main.c:137: phy_spi_write(addr, data);
      0006AC 90r00r00         [24] 1663 	mov	dptr,#_phy_spi_write_PARM_2
      0006AF ED               [12] 1664 	mov	a,r5
      0006B0 F0               [24] 1665 	movx	@dptr,a
      0006B1 EF               [12] 1666 	mov	a,r7
      0006B2 A3               [24] 1667 	inc	dptr
      0006B3 F0               [24] 1668 	movx	@dptr,a
      0006B4 8E 82            [24] 1669 	mov	dpl, r6
      0006B6 C0 07            [24] 1670 	push	ar7
      0006B8 C0 05            [24] 1671 	push	ar5
      0006BA 12r00r00         [24] 1672 	lcall	_phy_spi_write
      0006BD D0 05            [24] 1673 	pop	ar5
      0006BF D0 07            [24] 1674 	pop	ar7
                                   1675 ;	main.c:138: printf("PHY Write Data: 0x%04X\n\r", data);
      0006C1 C0 05            [24] 1676 	push	ar5
      0006C3 C0 07            [24] 1677 	push	ar7
      0006C5 74r25            [12] 1678 	mov	a,#___str_30
      0006C7 C0 E0            [24] 1679 	push	acc
      0006C9 74s03            [12] 1680 	mov	a,#(___str_30 >> 8)
      0006CB C0 E0            [24] 1681 	push	acc
      0006CD 74 80            [12] 1682 	mov	a,#0x80
      0006CF C0 E0            [24] 1683 	push	acc
      0006D1 12r00r00         [24] 1684 	lcall	_printf
      0006D4 E5 81            [12] 1685 	mov	a,sp
      0006D6 24 FB            [12] 1686 	add	a,#0xfb
      0006D8 F5 81            [12] 1687 	mov	sp,a
                                   1688 ;	main.c:139: break;
      0006DA 02r02r58         [24] 1689 	ljmp	00119$
                                   1690 ;	main.c:141: case '6': {
      0006DD                       1691 00108$:
                                   1692 ;	main.c:142: printf("Enter the PHY register address to read:\n\r");
      0006DD 74r3E            [12] 1693 	mov	a,#___str_31
      0006DF C0 E0            [24] 1694 	push	acc
      0006E1 74s03            [12] 1695 	mov	a,#(___str_31 >> 8)
      0006E3 C0 E0            [24] 1696 	push	acc
      0006E5 74 80            [12] 1697 	mov	a,#0x80
      0006E7 C0 E0            [24] 1698 	push	acc
      0006E9 12r00r00         [24] 1699 	lcall	_printf
      0006EC 15 81            [12] 1700 	dec	sp
      0006EE 15 81            [12] 1701 	dec	sp
      0006F0 15 81            [12] 1702 	dec	sp
                                   1703 ;	main.c:143: uint8_t addr = get_user_buffer_size();
      0006F2 12r01rBA         [24] 1704 	lcall	_get_user_buffer_size
                                   1705 ;	main.c:144: uint16_t data = phy_spi_read(addr);
      0006F5 12r00r00         [24] 1706 	lcall	_phy_spi_read
      0006F8 AE 82            [24] 1707 	mov	r6, dpl
      0006FA AF 83            [24] 1708 	mov	r7, dph
                                   1709 ;	main.c:145: printf("PHY Read Data: 0x%04X\n\r", data);
      0006FC C0 06            [24] 1710 	push	ar6
      0006FE C0 07            [24] 1711 	push	ar7
      000700 74r68            [12] 1712 	mov	a,#___str_32
      000702 C0 E0            [24] 1713 	push	acc
      000704 74s03            [12] 1714 	mov	a,#(___str_32 >> 8)
      000706 C0 E0            [24] 1715 	push	acc
      000708 74 80            [12] 1716 	mov	a,#0x80
      00070A C0 E0            [24] 1717 	push	acc
      00070C 12r00r00         [24] 1718 	lcall	_printf
      00070F E5 81            [12] 1719 	mov	a,sp
      000711 24 FB            [12] 1720 	add	a,#0xfb
      000713 F5 81            [12] 1721 	mov	sp,a
                                   1722 ;	main.c:146: break;
      000715 02r02r58         [24] 1723 	ljmp	00119$
                                   1724 ;	main.c:148: case '7': {
      000718                       1725 00109$:
                                   1726 ;	main.c:149: printf("Resetting ENC28J60...\n\r");
      000718 74r80            [12] 1727 	mov	a,#___str_33
      00071A C0 E0            [24] 1728 	push	acc
      00071C 74s03            [12] 1729 	mov	a,#(___str_33 >> 8)
      00071E C0 E0            [24] 1730 	push	acc
      000720 74 80            [12] 1731 	mov	a,#0x80
      000722 C0 E0            [24] 1732 	push	acc
      000724 12r00r00         [24] 1733 	lcall	_printf
      000727 15 81            [12] 1734 	dec	sp
      000729 15 81            [12] 1735 	dec	sp
      00072B 15 81            [12] 1736 	dec	sp
                                   1737 ;	main.c:150: enc_reset();
      00072D 12r00r00         [24] 1738 	lcall	_enc_reset
                                   1739 ;	main.c:151: break;
      000730 02r02r58         [24] 1740 	ljmp	00119$
                                   1741 ;	main.c:153: case '8': {
      000733                       1742 00110$:
                                   1743 ;	main.c:154: printf("Enter the ETH register address to read:\n\r");
      000733 74r98            [12] 1744 	mov	a,#___str_34
      000735 C0 E0            [24] 1745 	push	acc
      000737 74s03            [12] 1746 	mov	a,#(___str_34 >> 8)
      000739 C0 E0            [24] 1747 	push	acc
      00073B 74 80            [12] 1748 	mov	a,#0x80
      00073D C0 E0            [24] 1749 	push	acc
      00073F 12r00r00         [24] 1750 	lcall	_printf
      000742 15 81            [12] 1751 	dec	sp
      000744 15 81            [12] 1752 	dec	sp
      000746 15 81            [12] 1753 	dec	sp
                                   1754 ;	main.c:155: uint8_t addr = get_user_buffer_size();
      000748 12r01rBA         [24] 1755 	lcall	_get_user_buffer_size
      00074B AE 82            [24] 1756 	mov	r6, dpl
                                   1757 ;	main.c:156: printf("Enter the bank (0 or 1):\n\r");
      00074D C0 06            [24] 1758 	push	ar6
      00074F 74rC2            [12] 1759 	mov	a,#___str_35
      000751 C0 E0            [24] 1760 	push	acc
      000753 74s03            [12] 1761 	mov	a,#(___str_35 >> 8)
      000755 C0 E0            [24] 1762 	push	acc
      000757 74 80            [12] 1763 	mov	a,#0x80
      000759 C0 E0            [24] 1764 	push	acc
      00075B 12r00r00         [24] 1765 	lcall	_printf
      00075E 15 81            [12] 1766 	dec	sp
      000760 15 81            [12] 1767 	dec	sp
      000762 15 81            [12] 1768 	dec	sp
                                   1769 ;	main.c:157: uint8_t bank = get_user_buffer_size();
      000764 12r01rBA         [24] 1770 	lcall	_get_user_buffer_size
      000767 AD 82            [24] 1771 	mov	r5, dpl
      000769 D0 06            [24] 1772 	pop	ar6
      00076B 90r00r00         [24] 1773 	mov	dptr,#_eth_spi_read_PARM_2
      00076E ED               [12] 1774 	mov	a,r5
      00076F F0               [24] 1775 	movx	@dptr,a
                                   1776 ;	main.c:158: uint8_t data = eth_spi_read(addr, bank);
      000770 8E 82            [24] 1777 	mov	dpl, r6
      000772 12r00r00         [24] 1778 	lcall	_eth_spi_read
      000775 AF 82            [24] 1779 	mov	r7, dpl
                                   1780 ;	main.c:159: printf("ETH Register Data: 0x%02X\n\r", data);
      000777 7E 00            [12] 1781 	mov	r6,#0x00
      000779 C0 07            [24] 1782 	push	ar7
      00077B C0 06            [24] 1783 	push	ar6
      00077D 74rDD            [12] 1784 	mov	a,#___str_36
      00077F C0 E0            [24] 1785 	push	acc
      000781 74s03            [12] 1786 	mov	a,#(___str_36 >> 8)
      000783 C0 E0            [24] 1787 	push	acc
      000785 74 80            [12] 1788 	mov	a,#0x80
      000787 C0 E0            [24] 1789 	push	acc
      000789 12r00r00         [24] 1790 	lcall	_printf
      00078C E5 81            [12] 1791 	mov	a,sp
      00078E 24 FB            [12] 1792 	add	a,#0xfb
      000790 F5 81            [12] 1793 	mov	sp,a
                                   1794 ;	main.c:160: break;
      000792 02r02r58         [24] 1795 	ljmp	00119$
                                   1796 ;	main.c:162: case '9': {
      000795                       1797 00111$:
                                   1798 ;	main.c:163: printf("\n\rChoose an action: \n\r");
      000795 74r1C            [12] 1799 	mov	a,#___str_2
      000797 C0 E0            [24] 1800 	push	acc
      000799 74s00            [12] 1801 	mov	a,#(___str_2 >> 8)
      00079B C0 E0            [24] 1802 	push	acc
      00079D 74 80            [12] 1803 	mov	a,#0x80
      00079F C0 E0            [24] 1804 	push	acc
      0007A1 12r00r00         [24] 1805 	lcall	_printf
      0007A4 15 81            [12] 1806 	dec	sp
      0007A6 15 81            [12] 1807 	dec	sp
      0007A8 15 81            [12] 1808 	dec	sp
                                   1809 ;	main.c:164: printf("1 --> Control Write\n\r");
      0007AA 74r33            [12] 1810 	mov	a,#___str_3
      0007AC C0 E0            [24] 1811 	push	acc
      0007AE 74s00            [12] 1812 	mov	a,#(___str_3 >> 8)
      0007B0 C0 E0            [24] 1813 	push	acc
      0007B2 74 80            [12] 1814 	mov	a,#0x80
      0007B4 C0 E0            [24] 1815 	push	acc
      0007B6 12r00r00         [24] 1816 	lcall	_printf
      0007B9 15 81            [12] 1817 	dec	sp
      0007BB 15 81            [12] 1818 	dec	sp
      0007BD 15 81            [12] 1819 	dec	sp
                                   1820 ;	main.c:165: printf("2 --> Buffer Write\n\r");
      0007BF 74r49            [12] 1821 	mov	a,#___str_4
      0007C1 C0 E0            [24] 1822 	push	acc
      0007C3 74s00            [12] 1823 	mov	a,#(___str_4 >> 8)
      0007C5 C0 E0            [24] 1824 	push	acc
      0007C7 74 80            [12] 1825 	mov	a,#0x80
      0007C9 C0 E0            [24] 1826 	push	acc
      0007CB 12r00r00         [24] 1827 	lcall	_printf
      0007CE 15 81            [12] 1828 	dec	sp
      0007D0 15 81            [12] 1829 	dec	sp
      0007D2 15 81            [12] 1830 	dec	sp
                                   1831 ;	main.c:166: printf("3 --> Buffer Read\n\r");
      0007D4 74r5E            [12] 1832 	mov	a,#___str_5
      0007D6 C0 E0            [24] 1833 	push	acc
      0007D8 74s00            [12] 1834 	mov	a,#(___str_5 >> 8)
      0007DA C0 E0            [24] 1835 	push	acc
      0007DC 74 80            [12] 1836 	mov	a,#0x80
      0007DE C0 E0            [24] 1837 	push	acc
      0007E0 12r00r00         [24] 1838 	lcall	_printf
      0007E3 15 81            [12] 1839 	dec	sp
      0007E5 15 81            [12] 1840 	dec	sp
      0007E7 15 81            [12] 1841 	dec	sp
                                   1842 ;	main.c:167: printf("4 --> MAC Register Read\n\r");
      0007E9 74r72            [12] 1843 	mov	a,#___str_6
      0007EB C0 E0            [24] 1844 	push	acc
      0007ED 74s00            [12] 1845 	mov	a,#(___str_6 >> 8)
      0007EF C0 E0            [24] 1846 	push	acc
      0007F1 74 80            [12] 1847 	mov	a,#0x80
      0007F3 C0 E0            [24] 1848 	push	acc
      0007F5 12r00r00         [24] 1849 	lcall	_printf
      0007F8 15 81            [12] 1850 	dec	sp
      0007FA 15 81            [12] 1851 	dec	sp
      0007FC 15 81            [12] 1852 	dec	sp
                                   1853 ;	main.c:168: printf("5 --> PHY SPI Write\n\r");
      0007FE 74r8C            [12] 1854 	mov	a,#___str_7
      000800 C0 E0            [24] 1855 	push	acc
      000802 74s00            [12] 1856 	mov	a,#(___str_7 >> 8)
      000804 C0 E0            [24] 1857 	push	acc
      000806 74 80            [12] 1858 	mov	a,#0x80
      000808 C0 E0            [24] 1859 	push	acc
      00080A 12r00r00         [24] 1860 	lcall	_printf
      00080D 15 81            [12] 1861 	dec	sp
      00080F 15 81            [12] 1862 	dec	sp
      000811 15 81            [12] 1863 	dec	sp
                                   1864 ;	main.c:169: printf("6 --> PHY SPI Read\n\r");
      000813 74rA2            [12] 1865 	mov	a,#___str_8
      000815 C0 E0            [24] 1866 	push	acc
      000817 74s00            [12] 1867 	mov	a,#(___str_8 >> 8)
      000819 C0 E0            [24] 1868 	push	acc
      00081B 74 80            [12] 1869 	mov	a,#0x80
      00081D C0 E0            [24] 1870 	push	acc
      00081F 12r00r00         [24] 1871 	lcall	_printf
      000822 15 81            [12] 1872 	dec	sp
      000824 15 81            [12] 1873 	dec	sp
      000826 15 81            [12] 1874 	dec	sp
                                   1875 ;	main.c:170: printf("7 --> ENC Reset\n\r");
      000828 74rB7            [12] 1876 	mov	a,#___str_9
      00082A C0 E0            [24] 1877 	push	acc
      00082C 74s00            [12] 1878 	mov	a,#(___str_9 >> 8)
      00082E C0 E0            [24] 1879 	push	acc
      000830 74 80            [12] 1880 	mov	a,#0x80
      000832 C0 E0            [24] 1881 	push	acc
      000834 12r00r00         [24] 1882 	lcall	_printf
      000837 15 81            [12] 1883 	dec	sp
      000839 15 81            [12] 1884 	dec	sp
      00083B 15 81            [12] 1885 	dec	sp
                                   1886 ;	main.c:171: printf("8 --> Read ETH Register\n\r");
      00083D 74rC9            [12] 1887 	mov	a,#___str_10
      00083F C0 E0            [24] 1888 	push	acc
      000841 74s00            [12] 1889 	mov	a,#(___str_10 >> 8)
      000843 C0 E0            [24] 1890 	push	acc
      000845 74 80            [12] 1891 	mov	a,#0x80
      000847 C0 E0            [24] 1892 	push	acc
      000849 12r00r00         [24] 1893 	lcall	_printf
      00084C 15 81            [12] 1894 	dec	sp
      00084E 15 81            [12] 1895 	dec	sp
      000850 15 81            [12] 1896 	dec	sp
                                   1897 ;	main.c:172: break;
      000852 02r02r58         [24] 1898 	ljmp	00119$
                                   1899 ;	main.c:174: case 'A':{
      000855                       1900 00112$:
                                   1901 ;	main.c:175: init_ENC();
      000855 12r00r00         [24] 1902 	lcall	_init_ENC
                                   1903 ;	main.c:177: send_arp_request();
      000858 12r00r00         [24] 1904 	lcall	_send_arp_request
                                   1905 ;	main.c:178: break;
      00085B 02r02r58         [24] 1906 	ljmp	00119$
                                   1907 ;	main.c:180: case 'B':{
      00085E                       1908 00113$:
                                   1909 ;	main.c:181: init_ENC();
      00085E 12r00r00         [24] 1910 	lcall	_init_ENC
                                   1911 ;	main.c:182: break;
      000861 02r02r58         [24] 1912 	ljmp	00119$
                                   1913 ;	main.c:184: case 'C':{
      000864                       1914 00114$:
                                   1915 ;	main.c:185: printf(" Resetting ENC using RESET pin in Hardware(P1_0)\n\r");
      000864 74rF9            [12] 1916 	mov	a,#___str_37
      000866 C0 E0            [24] 1917 	push	acc
      000868 74s03            [12] 1918 	mov	a,#(___str_37 >> 8)
      00086A C0 E0            [24] 1919 	push	acc
      00086C 74 80            [12] 1920 	mov	a,#0x80
      00086E C0 E0            [24] 1921 	push	acc
      000870 12r00r00         [24] 1922 	lcall	_printf
      000873 15 81            [12] 1923 	dec	sp
      000875 15 81            [12] 1924 	dec	sp
      000877 15 81            [12] 1925 	dec	sp
                                   1926 ;	main.c:186: ENC_RESET = 0;
                                   1927 ;	assignBit
      000879 C2 90            [12] 1928 	clr	_P1_0
                                   1929 ;	main.c:187: for(int i = 0; i < 6000; i++);
      00087B 7E 00            [12] 1930 	mov	r6,#0x00
      00087D 7F 00            [12] 1931 	mov	r7,#0x00
      00087F                       1932 00128$:
      00087F C3               [12] 1933 	clr	c
      000880 EE               [12] 1934 	mov	a,r6
      000881 94 70            [12] 1935 	subb	a,#0x70
      000883 EF               [12] 1936 	mov	a,r7
      000884 64 80            [12] 1937 	xrl	a,#0x80
      000886 94 97            [12] 1938 	subb	a,#0x97
      000888 50 07            [24] 1939 	jnc	00115$
      00088A 0E               [12] 1940 	inc	r6
      00088B BE 00 F1         [24] 1941 	cjne	r6,#0x00,00128$
      00088E 0F               [12] 1942 	inc	r7
      00088F 80 EE            [24] 1943 	sjmp	00128$
      000891                       1944 00115$:
                                   1945 ;	main.c:188: ENC_RESET = 1;
                                   1946 ;	assignBit
      000891 D2 90            [12] 1947 	setb	_P1_0
                                   1948 ;	main.c:189: break;
      000893 02r02r58         [24] 1949 	ljmp	00119$
                                   1950 ;	main.c:191: default: {
      000896                       1951 00116$:
                                   1952 ;	main.c:192: printf("Invalid option. Please select a valid action.\n\r");
      000896 74r2C            [12] 1953 	mov	a,#___str_38
      000898 C0 E0            [24] 1954 	push	acc
      00089A 74s04            [12] 1955 	mov	a,#(___str_38 >> 8)
      00089C C0 E0            [24] 1956 	push	acc
      00089E 74 80            [12] 1957 	mov	a,#0x80
      0008A0 C0 E0            [24] 1958 	push	acc
      0008A2 12r00r00         [24] 1959 	lcall	_printf
      0008A5 15 81            [12] 1960 	dec	sp
      0008A7 15 81            [12] 1961 	dec	sp
      0008A9 15 81            [12] 1962 	dec	sp
                                   1963 ;	main.c:195: }
                                   1964 ;	main.c:197: }
      0008AB 02r02r58         [24] 1965 	ljmp	00119$
                                   1966 	.area CSEG    (CODE)
                                   1967 	.area CONST   (CODE)
                                   1968 	.area CONST   (CODE)
      000000                       1969 ___str_0:
      000000 0A                    1970 	.db 0x0a
      000001 0D                    1971 	.db 0x0d
      000002 00                    1972 	.db 0x00
                                   1973 	.area CSEG    (CODE)
                                   1974 	.area CONST   (CODE)
      000003                       1975 ___str_1:
      000003 53 50 49 20 4F 70 65  1976 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    1977 	.db 0x0a
      00001A 0D                    1978 	.db 0x0d
      00001B 00                    1979 	.db 0x00
                                   1980 	.area CSEG    (CODE)
                                   1981 	.area CONST   (CODE)
      00001C                       1982 ___str_2:
      00001C 0A                    1983 	.db 0x0a
      00001D 0D                    1984 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  1985 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    1986 	.db 0x0a
      000031 0D                    1987 	.db 0x0d
      000032 00                    1988 	.db 0x00
                                   1989 	.area CSEG    (CODE)
                                   1990 	.area CONST   (CODE)
      000033                       1991 ___str_3:
      000033 31 20 2D 2D 3E 20 43  1992 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    1993 	.db 0x0a
      000047 0D                    1994 	.db 0x0d
      000048 00                    1995 	.db 0x00
                                   1996 	.area CSEG    (CODE)
                                   1997 	.area CONST   (CODE)
      000049                       1998 ___str_4:
      000049 32 20 2D 2D 3E 20 42  1999 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    2000 	.db 0x0a
      00005C 0D                    2001 	.db 0x0d
      00005D 00                    2002 	.db 0x00
                                   2003 	.area CSEG    (CODE)
                                   2004 	.area CONST   (CODE)
      00005E                       2005 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  2006 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    2007 	.db 0x0a
      000070 0D                    2008 	.db 0x0d
      000071 00                    2009 	.db 0x00
                                   2010 	.area CSEG    (CODE)
                                   2011 	.area CONST   (CODE)
      000072                       2012 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  2013 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    2014 	.db 0x0a
      00008A 0D                    2015 	.db 0x0d
      00008B 00                    2016 	.db 0x00
                                   2017 	.area CSEG    (CODE)
                                   2018 	.area CONST   (CODE)
      00008C                       2019 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  2020 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    2021 	.db 0x0a
      0000A0 0D                    2022 	.db 0x0d
      0000A1 00                    2023 	.db 0x00
                                   2024 	.area CSEG    (CODE)
                                   2025 	.area CONST   (CODE)
      0000A2                       2026 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  2027 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    2028 	.db 0x0a
      0000B5 0D                    2029 	.db 0x0d
      0000B6 00                    2030 	.db 0x00
                                   2031 	.area CSEG    (CODE)
                                   2032 	.area CONST   (CODE)
      0000B7                       2033 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  2034 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    2035 	.db 0x0a
      0000C7 0D                    2036 	.db 0x0d
      0000C8 00                    2037 	.db 0x00
                                   2038 	.area CSEG    (CODE)
                                   2039 	.area CONST   (CODE)
      0000C9                       2040 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  2041 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    2042 	.db 0x0a
      0000E1 0D                    2043 	.db 0x0d
      0000E2 00                    2044 	.db 0x00
                                   2045 	.area CSEG    (CODE)
                                   2046 	.area CONST   (CODE)
      0000E3                       2047 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  2048 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    2049 	.db 0x0a
      0000F6 0D                    2050 	.db 0x0d
      0000F7 00                    2051 	.db 0x00
                                   2052 	.area CSEG    (CODE)
                                   2053 	.area CONST   (CODE)
      0000F8                       2054 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  2055 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    2056 	.db 0x0a
      00010F 0D                    2057 	.db 0x0d
      000110 00                    2058 	.db 0x00
                                   2059 	.area CSEG    (CODE)
                                   2060 	.area CONST   (CODE)
      000111                       2061 ___str_13:
      000111 42 20 2D 2D 3E 20 49  2062 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2063 	.db 0x0a
      000127 0D                    2064 	.db 0x0d
      000128 00                    2065 	.db 0x00
                                   2066 	.area CSEG    (CODE)
                                   2067 	.area CONST   (CODE)
      000129                       2068 ___str_14:
      000129 43 20 2D 2D 3E 20 48  2069 	.ascii "C --> Hard Reset(nRESET pin)"
             61 72 64 20 52 65 73
             65 74 28 6E 52 45 53
             45 54 20 70 69 6E 29
      000145 0A                    2070 	.db 0x0a
      000146 0D                    2071 	.db 0x0d
      000147 00                    2072 	.db 0x00
                                   2073 	.area CSEG    (CODE)
                                   2074 	.area CONST   (CODE)
      000148                       2075 ___str_15:
      000148 45 6E 74 65 72 20 74  2076 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      00016A 0A                    2077 	.db 0x0a
      00016B 0D                    2078 	.db 0x0d
      00016C 00                    2079 	.db 0x00
                                   2080 	.area CSEG    (CODE)
                                   2081 	.area CONST   (CODE)
      00016D                       2082 ___str_16:
      00016D 45 6E 74 65 72 20 74  2083 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      000197 0A                    2084 	.db 0x0a
      000198 0D                    2085 	.db 0x0d
      000199 00                    2086 	.db 0x00
                                   2087 	.area CSEG    (CODE)
                                   2088 	.area CONST   (CODE)
      00019A                       2089 ___str_17:
      00019A 45 6E 74 65 72 20 74  2090 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      0001BB 0A                    2091 	.db 0x0a
      0001BC 0D                    2092 	.db 0x0d
      0001BD 00                    2093 	.db 0x00
                                   2094 	.area CSEG    (CODE)
                                   2095 	.area CONST   (CODE)
      0001BE                       2096 ___str_18:
      0001BE 45 6E 74 65 72 20 74  2097 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      0001E1 0A                    2098 	.db 0x0a
      0001E2 0D                    2099 	.db 0x0d
      0001E3 00                    2100 	.db 0x00
                                   2101 	.area CSEG    (CODE)
                                   2102 	.area CONST   (CODE)
      0001E4                       2103 ___str_19:
      0001E4 45 6E 74 65 72 20 74  2104 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      0001FF 0A                    2105 	.db 0x0a
      000200 0D                    2106 	.db 0x0d
      000201 00                    2107 	.db 0x00
                                   2108 	.area CSEG    (CODE)
                                   2109 	.area CONST   (CODE)
      000202                       2110 ___str_20:
      000202 45 6E 74 65 72 20 25  2111 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000222 0A                    2112 	.db 0x0a
      000223 0D                    2113 	.db 0x0d
      000224 00                    2114 	.db 0x00
                                   2115 	.area CSEG    (CODE)
                                   2116 	.area CONST   (CODE)
      000225                       2117 ___str_21:
      000225 42 79 74 65 20 25 64  2118 	.ascii "Byte %d: "
             3A 20
      00022E 00                    2119 	.db 0x00
                                   2120 	.area CSEG    (CODE)
                                   2121 	.area CONST   (CODE)
      00022F                       2122 ___str_22:
      00022F 45 6E 74 65 72 20 74  2123 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      000251 0A                    2124 	.db 0x0a
      000252 0D                    2125 	.db 0x0d
      000253 00                    2126 	.db 0x00
                                   2127 	.area CSEG    (CODE)
                                   2128 	.area CONST   (CODE)
      000254                       2129 ___str_23:
      000254 52 65 61 64 20 44 61  2130 	.ascii "Read Data:"
             74 61 3A
      00025E 0A                    2131 	.db 0x0a
      00025F 0D                    2132 	.db 0x0d
      000260 00                    2133 	.db 0x00
                                   2134 	.area CSEG    (CODE)
                                   2135 	.area CONST   (CODE)
      000261                       2136 ___str_24:
      000261 42 79 74 65 20 25 64  2137 	.ascii "Byte %d: 0x%02X"
             3A 20 30 78 25 30 32
             58
      000270 0A                    2138 	.db 0x0a
      000271 0D                    2139 	.db 0x0d
      000272 00                    2140 	.db 0x00
                                   2141 	.area CSEG    (CODE)
                                   2142 	.area CONST   (CODE)
      000273                       2143 ___str_25:
      000273 45 6E 74 65 72 20 74  2144 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      000299 0A                    2145 	.db 0x0a
      00029A 0D                    2146 	.db 0x0d
      00029B 00                    2147 	.db 0x00
                                   2148 	.area CSEG    (CODE)
                                   2149 	.area CONST   (CODE)
      00029C                       2150 ___str_26:
      00029C 45 6E 74 65 72 20 74  2151 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002C2 0A                    2152 	.db 0x0a
      0002C3 0D                    2153 	.db 0x0d
      0002C4 00                    2154 	.db 0x00
                                   2155 	.area CSEG    (CODE)
                                   2156 	.area CONST   (CODE)
      0002C5                       2157 ___str_27:
      0002C5 4D 41 43 20 52 65 67  2158 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0002DE 0A                    2159 	.db 0x0a
      0002DF 0D                    2160 	.db 0x0d
      0002E0 00                    2161 	.db 0x00
                                   2162 	.area CSEG    (CODE)
                                   2163 	.area CONST   (CODE)
      0002E1                       2164 ___str_28:
      0002E1 45 6E 74 65 72 20 74  2165 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      000300 0A                    2166 	.db 0x0a
      000301 0D                    2167 	.db 0x0d
      000302 00                    2168 	.db 0x00
                                   2169 	.area CSEG    (CODE)
                                   2170 	.area CONST   (CODE)
      000303                       2171 ___str_29:
      000303 45 6E 74 65 72 20 74  2172 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      000322 0A                    2173 	.db 0x0a
      000323 0D                    2174 	.db 0x0d
      000324 00                    2175 	.db 0x00
                                   2176 	.area CSEG    (CODE)
                                   2177 	.area CONST   (CODE)
      000325                       2178 ___str_30:
      000325 50 48 59 20 57 72 69  2179 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      00033B 0A                    2180 	.db 0x0a
      00033C 0D                    2181 	.db 0x0d
      00033D 00                    2182 	.db 0x00
                                   2183 	.area CSEG    (CODE)
                                   2184 	.area CONST   (CODE)
      00033E                       2185 ___str_31:
      00033E 45 6E 74 65 72 20 74  2186 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000365 0A                    2187 	.db 0x0a
      000366 0D                    2188 	.db 0x0d
      000367 00                    2189 	.db 0x00
                                   2190 	.area CSEG    (CODE)
                                   2191 	.area CONST   (CODE)
      000368                       2192 ___str_32:
      000368 50 48 59 20 52 65 61  2193 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      00037D 0A                    2194 	.db 0x0a
      00037E 0D                    2195 	.db 0x0d
      00037F 00                    2196 	.db 0x00
                                   2197 	.area CSEG    (CODE)
                                   2198 	.area CONST   (CODE)
      000380                       2199 ___str_33:
      000380 52 65 73 65 74 74 69  2200 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      000395 0A                    2201 	.db 0x0a
      000396 0D                    2202 	.db 0x0d
      000397 00                    2203 	.db 0x00
                                   2204 	.area CSEG    (CODE)
                                   2205 	.area CONST   (CODE)
      000398                       2206 ___str_34:
      000398 45 6E 74 65 72 20 74  2207 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003BF 0A                    2208 	.db 0x0a
      0003C0 0D                    2209 	.db 0x0d
      0003C1 00                    2210 	.db 0x00
                                   2211 	.area CSEG    (CODE)
                                   2212 	.area CONST   (CODE)
      0003C2                       2213 ___str_35:
      0003C2 45 6E 74 65 72 20 74  2214 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      0003DA 0A                    2215 	.db 0x0a
      0003DB 0D                    2216 	.db 0x0d
      0003DC 00                    2217 	.db 0x00
                                   2218 	.area CSEG    (CODE)
                                   2219 	.area CONST   (CODE)
      0003DD                       2220 ___str_36:
      0003DD 45 54 48 20 52 65 67  2221 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0003F6 0A                    2222 	.db 0x0a
      0003F7 0D                    2223 	.db 0x0d
      0003F8 00                    2224 	.db 0x00
                                   2225 	.area CSEG    (CODE)
                                   2226 	.area CONST   (CODE)
      0003F9                       2227 ___str_37:
      0003F9 20 52 65 73 65 74 74  2228 	.ascii " Resetting ENC using RESET pin in Hardware(P1_0)"
             69 6E 67 20 45 4E 43
             20 75 73 69 6E 67 20
             52 45 53 45 54 20 70
             69 6E 20 69 6E 20 48
             61 72 64 77 61 72 65
             28 50 31 5F 30 29
      000429 0A                    2229 	.db 0x0a
      00042A 0D                    2230 	.db 0x0d
      00042B 00                    2231 	.db 0x00
                                   2232 	.area CSEG    (CODE)
                                   2233 	.area CONST   (CODE)
      00042C                       2234 ___str_38:
      00042C 49 6E 76 61 6C 69 64  2235 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      000459 0A                    2236 	.db 0x0a
      00045A 0D                    2237 	.db 0x0d
      00045B 00                    2238 	.db 0x00
                                   2239 	.area CSEG    (CODE)
                                   2240 	.area XINIT   (CODE)
                                   2241 	.area CABS    (ABS,CODE)
