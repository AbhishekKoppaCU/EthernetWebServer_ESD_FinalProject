                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _update_ERXRDPT
                                     15 	.globl _ENC_pkt_count
                                     16 	.globl _enc_init
                                     17 	.globl _send_arp_request
                                     18 	.globl _spi_control_write
                                     19 	.globl _eth_spi_read
                                     20 	.globl _phy_spi_write
                                     21 	.globl _phy_spi_read
                                     22 	.globl _spi_buffer_write
                                     23 	.globl _spi_buffer_read
                                     24 	.globl _mac_spi_read
                                     25 	.globl _enc_reset
                                     26 	.globl _configure_SPI
                                     27 	.globl _process_packet_from_buffer
                                     28 	.globl _transmit_tcp_packet
                                     29 	.globl _process_tcp_packet
                                     30 	.globl _memcmp
                                     31 	.globl _free
                                     32 	.globl _malloc
                                     33 	.globl _printf_tiny
                                     34 	.globl _putchar
                                     35 	.globl _getchar
                                     36 	.globl _printf
                                     37 	.globl _TF1
                                     38 	.globl _TR1
                                     39 	.globl _TF0
                                     40 	.globl _TR0
                                     41 	.globl _IE1
                                     42 	.globl _IT1
                                     43 	.globl _IE0
                                     44 	.globl _IT0
                                     45 	.globl _SM0
                                     46 	.globl _SM1
                                     47 	.globl _SM2
                                     48 	.globl _REN
                                     49 	.globl _TB8
                                     50 	.globl _RB8
                                     51 	.globl _TI
                                     52 	.globl _RI
                                     53 	.globl _CY
                                     54 	.globl _AC
                                     55 	.globl _F0
                                     56 	.globl _RS1
                                     57 	.globl _RS0
                                     58 	.globl _OV
                                     59 	.globl _F1
                                     60 	.globl _P
                                     61 	.globl _RD
                                     62 	.globl _WR
                                     63 	.globl _T1
                                     64 	.globl _T0
                                     65 	.globl _INT1
                                     66 	.globl _INT0
                                     67 	.globl _TXD0
                                     68 	.globl _TXD
                                     69 	.globl _RXD0
                                     70 	.globl _RXD
                                     71 	.globl _P3_7
                                     72 	.globl _P3_6
                                     73 	.globl _P3_5
                                     74 	.globl _P3_4
                                     75 	.globl _P3_3
                                     76 	.globl _P3_2
                                     77 	.globl _P3_1
                                     78 	.globl _P3_0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _P1_7
                                     88 	.globl _P1_6
                                     89 	.globl _P1_5
                                     90 	.globl _P1_4
                                     91 	.globl _P1_3
                                     92 	.globl _P1_2
                                     93 	.globl _P1_1
                                     94 	.globl _P1_0
                                     95 	.globl _P0_7
                                     96 	.globl _P0_6
                                     97 	.globl _P0_5
                                     98 	.globl _P0_4
                                     99 	.globl _P0_3
                                    100 	.globl _P0_2
                                    101 	.globl _P0_1
                                    102 	.globl _P0_0
                                    103 	.globl _PS
                                    104 	.globl _PT1
                                    105 	.globl _PX1
                                    106 	.globl _PT0
                                    107 	.globl _PX0
                                    108 	.globl _EA
                                    109 	.globl _ES
                                    110 	.globl _ET1
                                    111 	.globl _EX1
                                    112 	.globl _ET0
                                    113 	.globl _EX0
                                    114 	.globl _BREG_F7
                                    115 	.globl _BREG_F6
                                    116 	.globl _BREG_F5
                                    117 	.globl _BREG_F4
                                    118 	.globl _BREG_F3
                                    119 	.globl _BREG_F2
                                    120 	.globl _BREG_F1
                                    121 	.globl _BREG_F0
                                    122 	.globl _P5_7
                                    123 	.globl _P5_6
                                    124 	.globl _P5_5
                                    125 	.globl _P5_4
                                    126 	.globl _P5_3
                                    127 	.globl _P5_2
                                    128 	.globl _P5_1
                                    129 	.globl _P5_0
                                    130 	.globl _P4_7
                                    131 	.globl _P4_6
                                    132 	.globl _P4_5
                                    133 	.globl _P4_4
                                    134 	.globl _P4_3
                                    135 	.globl _P4_2
                                    136 	.globl _P4_1
                                    137 	.globl _P4_0
                                    138 	.globl _PX0L
                                    139 	.globl _PT0L
                                    140 	.globl _PX1L
                                    141 	.globl _PT1L
                                    142 	.globl _PSL
                                    143 	.globl _PT2L
                                    144 	.globl _PPCL
                                    145 	.globl _EC
                                    146 	.globl _CCF0
                                    147 	.globl _CCF1
                                    148 	.globl _CCF2
                                    149 	.globl _CCF3
                                    150 	.globl _CCF4
                                    151 	.globl _CR
                                    152 	.globl _CF
                                    153 	.globl _TF2
                                    154 	.globl _EXF2
                                    155 	.globl _RCLK
                                    156 	.globl _TCLK
                                    157 	.globl _EXEN2
                                    158 	.globl _TR2
                                    159 	.globl _C_T2
                                    160 	.globl _CP_RL2
                                    161 	.globl _T2CON_7
                                    162 	.globl _T2CON_6
                                    163 	.globl _T2CON_5
                                    164 	.globl _T2CON_4
                                    165 	.globl _T2CON_3
                                    166 	.globl _T2CON_2
                                    167 	.globl _T2CON_1
                                    168 	.globl _T2CON_0
                                    169 	.globl _PT2
                                    170 	.globl _ET2
                                    171 	.globl _TMOD
                                    172 	.globl _TL1
                                    173 	.globl _TL0
                                    174 	.globl _TH1
                                    175 	.globl _TH0
                                    176 	.globl _TCON
                                    177 	.globl _SP
                                    178 	.globl _SCON
                                    179 	.globl _SBUF0
                                    180 	.globl _SBUF
                                    181 	.globl _PSW
                                    182 	.globl _PCON
                                    183 	.globl _P3
                                    184 	.globl _P2
                                    185 	.globl _P1
                                    186 	.globl _P0
                                    187 	.globl _IP
                                    188 	.globl _IE
                                    189 	.globl _DP0L
                                    190 	.globl _DPL
                                    191 	.globl _DP0H
                                    192 	.globl _DPH
                                    193 	.globl _B
                                    194 	.globl _ACC
                                    195 	.globl _EECON
                                    196 	.globl _KBF
                                    197 	.globl _KBE
                                    198 	.globl _KBLS
                                    199 	.globl _BRL
                                    200 	.globl _BDRCON
                                    201 	.globl _T2MOD
                                    202 	.globl _SPDAT
                                    203 	.globl _SPSTA
                                    204 	.globl _SPCON
                                    205 	.globl _SADEN
                                    206 	.globl _SADDR
                                    207 	.globl _WDTPRG
                                    208 	.globl _WDTRST
                                    209 	.globl _P5
                                    210 	.globl _P4
                                    211 	.globl _IPH1
                                    212 	.globl _IPL1
                                    213 	.globl _IPH0
                                    214 	.globl _IPL0
                                    215 	.globl _IEN1
                                    216 	.globl _IEN0
                                    217 	.globl _CMOD
                                    218 	.globl _CL
                                    219 	.globl _CH
                                    220 	.globl _CCON
                                    221 	.globl _CCAPM4
                                    222 	.globl _CCAPM3
                                    223 	.globl _CCAPM2
                                    224 	.globl _CCAPM1
                                    225 	.globl _CCAPM0
                                    226 	.globl _CCAP4L
                                    227 	.globl _CCAP3L
                                    228 	.globl _CCAP2L
                                    229 	.globl _CCAP1L
                                    230 	.globl _CCAP0L
                                    231 	.globl _CCAP4H
                                    232 	.globl _CCAP3H
                                    233 	.globl _CCAP2H
                                    234 	.globl _CCAP1H
                                    235 	.globl _CCAP0H
                                    236 	.globl _CKCON1
                                    237 	.globl _CKCON0
                                    238 	.globl _CKRL
                                    239 	.globl _AUXR1
                                    240 	.globl _AUXR
                                    241 	.globl _TH2
                                    242 	.globl _TL2
                                    243 	.globl _RCAP2H
                                    244 	.globl _RCAP2L
                                    245 	.globl _T2CON
                                    246 	.globl _target_ip
                                    247 	.globl _device_ip
                                    248 	.globl _target_mac
                                    249 	.globl _device_mac
                                    250 ;--------------------------------------------------------
                                    251 ; special function registers
                                    252 ;--------------------------------------------------------
                                    253 	.area RSEG    (ABS,DATA)
      000000                        254 	.org 0x0000
                           0000C8   255 _T2CON	=	0x00c8
                           0000CA   256 _RCAP2L	=	0x00ca
                           0000CB   257 _RCAP2H	=	0x00cb
                           0000CC   258 _TL2	=	0x00cc
                           0000CD   259 _TH2	=	0x00cd
                           00008E   260 _AUXR	=	0x008e
                           0000A2   261 _AUXR1	=	0x00a2
                           000097   262 _CKRL	=	0x0097
                           00008F   263 _CKCON0	=	0x008f
                           0000AF   264 _CKCON1	=	0x00af
                           0000FA   265 _CCAP0H	=	0x00fa
                           0000FB   266 _CCAP1H	=	0x00fb
                           0000FC   267 _CCAP2H	=	0x00fc
                           0000FD   268 _CCAP3H	=	0x00fd
                           0000FE   269 _CCAP4H	=	0x00fe
                           0000EA   270 _CCAP0L	=	0x00ea
                           0000EB   271 _CCAP1L	=	0x00eb
                           0000EC   272 _CCAP2L	=	0x00ec
                           0000ED   273 _CCAP3L	=	0x00ed
                           0000EE   274 _CCAP4L	=	0x00ee
                           0000DA   275 _CCAPM0	=	0x00da
                           0000DB   276 _CCAPM1	=	0x00db
                           0000DC   277 _CCAPM2	=	0x00dc
                           0000DD   278 _CCAPM3	=	0x00dd
                           0000DE   279 _CCAPM4	=	0x00de
                           0000D8   280 _CCON	=	0x00d8
                           0000F9   281 _CH	=	0x00f9
                           0000E9   282 _CL	=	0x00e9
                           0000D9   283 _CMOD	=	0x00d9
                           0000A8   284 _IEN0	=	0x00a8
                           0000B1   285 _IEN1	=	0x00b1
                           0000B8   286 _IPL0	=	0x00b8
                           0000B7   287 _IPH0	=	0x00b7
                           0000B2   288 _IPL1	=	0x00b2
                           0000B3   289 _IPH1	=	0x00b3
                           0000C0   290 _P4	=	0x00c0
                           0000E8   291 _P5	=	0x00e8
                           0000A6   292 _WDTRST	=	0x00a6
                           0000A7   293 _WDTPRG	=	0x00a7
                           0000A9   294 _SADDR	=	0x00a9
                           0000B9   295 _SADEN	=	0x00b9
                           0000C3   296 _SPCON	=	0x00c3
                           0000C4   297 _SPSTA	=	0x00c4
                           0000C5   298 _SPDAT	=	0x00c5
                           0000C9   299 _T2MOD	=	0x00c9
                           00009B   300 _BDRCON	=	0x009b
                           00009A   301 _BRL	=	0x009a
                           00009C   302 _KBLS	=	0x009c
                           00009D   303 _KBE	=	0x009d
                           00009E   304 _KBF	=	0x009e
                           0000D2   305 _EECON	=	0x00d2
                           0000E0   306 _ACC	=	0x00e0
                           0000F0   307 _B	=	0x00f0
                           000083   308 _DPH	=	0x0083
                           000083   309 _DP0H	=	0x0083
                           000082   310 _DPL	=	0x0082
                           000082   311 _DP0L	=	0x0082
                           0000A8   312 _IE	=	0x00a8
                           0000B8   313 _IP	=	0x00b8
                           000080   314 _P0	=	0x0080
                           000090   315 _P1	=	0x0090
                           0000A0   316 _P2	=	0x00a0
                           0000B0   317 _P3	=	0x00b0
                           000087   318 _PCON	=	0x0087
                           0000D0   319 _PSW	=	0x00d0
                           000099   320 _SBUF	=	0x0099
                           000099   321 _SBUF0	=	0x0099
                           000098   322 _SCON	=	0x0098
                           000081   323 _SP	=	0x0081
                           000088   324 _TCON	=	0x0088
                           00008C   325 _TH0	=	0x008c
                           00008D   326 _TH1	=	0x008d
                           00008A   327 _TL0	=	0x008a
                           00008B   328 _TL1	=	0x008b
                           000089   329 _TMOD	=	0x0089
                                    330 ;--------------------------------------------------------
                                    331 ; special function bits
                                    332 ;--------------------------------------------------------
                                    333 	.area RSEG    (ABS,DATA)
      000000                        334 	.org 0x0000
                           0000AD   335 _ET2	=	0x00ad
                           0000BD   336 _PT2	=	0x00bd
                           0000C8   337 _T2CON_0	=	0x00c8
                           0000C9   338 _T2CON_1	=	0x00c9
                           0000CA   339 _T2CON_2	=	0x00ca
                           0000CB   340 _T2CON_3	=	0x00cb
                           0000CC   341 _T2CON_4	=	0x00cc
                           0000CD   342 _T2CON_5	=	0x00cd
                           0000CE   343 _T2CON_6	=	0x00ce
                           0000CF   344 _T2CON_7	=	0x00cf
                           0000C8   345 _CP_RL2	=	0x00c8
                           0000C9   346 _C_T2	=	0x00c9
                           0000CA   347 _TR2	=	0x00ca
                           0000CB   348 _EXEN2	=	0x00cb
                           0000CC   349 _TCLK	=	0x00cc
                           0000CD   350 _RCLK	=	0x00cd
                           0000CE   351 _EXF2	=	0x00ce
                           0000CF   352 _TF2	=	0x00cf
                           0000DF   353 _CF	=	0x00df
                           0000DE   354 _CR	=	0x00de
                           0000DC   355 _CCF4	=	0x00dc
                           0000DB   356 _CCF3	=	0x00db
                           0000DA   357 _CCF2	=	0x00da
                           0000D9   358 _CCF1	=	0x00d9
                           0000D8   359 _CCF0	=	0x00d8
                           0000AE   360 _EC	=	0x00ae
                           0000BE   361 _PPCL	=	0x00be
                           0000BD   362 _PT2L	=	0x00bd
                           0000BC   363 _PSL	=	0x00bc
                           0000BB   364 _PT1L	=	0x00bb
                           0000BA   365 _PX1L	=	0x00ba
                           0000B9   366 _PT0L	=	0x00b9
                           0000B8   367 _PX0L	=	0x00b8
                           0000C0   368 _P4_0	=	0x00c0
                           0000C1   369 _P4_1	=	0x00c1
                           0000C2   370 _P4_2	=	0x00c2
                           0000C3   371 _P4_3	=	0x00c3
                           0000C4   372 _P4_4	=	0x00c4
                           0000C5   373 _P4_5	=	0x00c5
                           0000C6   374 _P4_6	=	0x00c6
                           0000C7   375 _P4_7	=	0x00c7
                           0000E8   376 _P5_0	=	0x00e8
                           0000E9   377 _P5_1	=	0x00e9
                           0000EA   378 _P5_2	=	0x00ea
                           0000EB   379 _P5_3	=	0x00eb
                           0000EC   380 _P5_4	=	0x00ec
                           0000ED   381 _P5_5	=	0x00ed
                           0000EE   382 _P5_6	=	0x00ee
                           0000EF   383 _P5_7	=	0x00ef
                           0000F0   384 _BREG_F0	=	0x00f0
                           0000F1   385 _BREG_F1	=	0x00f1
                           0000F2   386 _BREG_F2	=	0x00f2
                           0000F3   387 _BREG_F3	=	0x00f3
                           0000F4   388 _BREG_F4	=	0x00f4
                           0000F5   389 _BREG_F5	=	0x00f5
                           0000F6   390 _BREG_F6	=	0x00f6
                           0000F7   391 _BREG_F7	=	0x00f7
                           0000A8   392 _EX0	=	0x00a8
                           0000A9   393 _ET0	=	0x00a9
                           0000AA   394 _EX1	=	0x00aa
                           0000AB   395 _ET1	=	0x00ab
                           0000AC   396 _ES	=	0x00ac
                           0000AF   397 _EA	=	0x00af
                           0000B8   398 _PX0	=	0x00b8
                           0000B9   399 _PT0	=	0x00b9
                           0000BA   400 _PX1	=	0x00ba
                           0000BB   401 _PT1	=	0x00bb
                           0000BC   402 _PS	=	0x00bc
                           000080   403 _P0_0	=	0x0080
                           000081   404 _P0_1	=	0x0081
                           000082   405 _P0_2	=	0x0082
                           000083   406 _P0_3	=	0x0083
                           000084   407 _P0_4	=	0x0084
                           000085   408 _P0_5	=	0x0085
                           000086   409 _P0_6	=	0x0086
                           000087   410 _P0_7	=	0x0087
                           000090   411 _P1_0	=	0x0090
                           000091   412 _P1_1	=	0x0091
                           000092   413 _P1_2	=	0x0092
                           000093   414 _P1_3	=	0x0093
                           000094   415 _P1_4	=	0x0094
                           000095   416 _P1_5	=	0x0095
                           000096   417 _P1_6	=	0x0096
                           000097   418 _P1_7	=	0x0097
                           0000A0   419 _P2_0	=	0x00a0
                           0000A1   420 _P2_1	=	0x00a1
                           0000A2   421 _P2_2	=	0x00a2
                           0000A3   422 _P2_3	=	0x00a3
                           0000A4   423 _P2_4	=	0x00a4
                           0000A5   424 _P2_5	=	0x00a5
                           0000A6   425 _P2_6	=	0x00a6
                           0000A7   426 _P2_7	=	0x00a7
                           0000B0   427 _P3_0	=	0x00b0
                           0000B1   428 _P3_1	=	0x00b1
                           0000B2   429 _P3_2	=	0x00b2
                           0000B3   430 _P3_3	=	0x00b3
                           0000B4   431 _P3_4	=	0x00b4
                           0000B5   432 _P3_5	=	0x00b5
                           0000B6   433 _P3_6	=	0x00b6
                           0000B7   434 _P3_7	=	0x00b7
                           0000B0   435 _RXD	=	0x00b0
                           0000B0   436 _RXD0	=	0x00b0
                           0000B1   437 _TXD	=	0x00b1
                           0000B1   438 _TXD0	=	0x00b1
                           0000B2   439 _INT0	=	0x00b2
                           0000B3   440 _INT1	=	0x00b3
                           0000B4   441 _T0	=	0x00b4
                           0000B5   442 _T1	=	0x00b5
                           0000B6   443 _WR	=	0x00b6
                           0000B7   444 _RD	=	0x00b7
                           0000D0   445 _P	=	0x00d0
                           0000D1   446 _F1	=	0x00d1
                           0000D2   447 _OV	=	0x00d2
                           0000D3   448 _RS0	=	0x00d3
                           0000D4   449 _RS1	=	0x00d4
                           0000D5   450 _F0	=	0x00d5
                           0000D6   451 _AC	=	0x00d6
                           0000D7   452 _CY	=	0x00d7
                           000098   453 _RI	=	0x0098
                           000099   454 _TI	=	0x0099
                           00009A   455 _RB8	=	0x009a
                           00009B   456 _TB8	=	0x009b
                           00009C   457 _REN	=	0x009c
                           00009D   458 _SM2	=	0x009d
                           00009E   459 _SM1	=	0x009e
                           00009F   460 _SM0	=	0x009f
                           000088   461 _IT0	=	0x0088
                           000089   462 _IE0	=	0x0089
                           00008A   463 _IT1	=	0x008a
                           00008B   464 _IE1	=	0x008b
                           00008C   465 _TR0	=	0x008c
                           00008D   466 _TF0	=	0x008d
                           00008E   467 _TR1	=	0x008e
                           00008F   468 _TF1	=	0x008f
                                    469 ;--------------------------------------------------------
                                    470 ; overlayable register banks
                                    471 ;--------------------------------------------------------
                                    472 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        473 	.ds 8
                                    474 ;--------------------------------------------------------
                                    475 ; internal ram data
                                    476 ;--------------------------------------------------------
                                    477 	.area DSEG    (DATA)
      000000                        478 _main_sloc0_1_0:
      000000                        479 	.ds 2
      000002                        480 _main_sloc1_1_0:
      000002                        481 	.ds 2
      000004                        482 _main_sloc2_1_0:
      000004                        483 	.ds 2
      000006                        484 _main_sloc3_1_0:
      000006                        485 	.ds 2
      000008                        486 _main_sloc4_1_0:
      000008                        487 	.ds 2
      00000A                        488 _main_sloc5_1_0:
      00000A                        489 	.ds 3
                                    490 ;--------------------------------------------------------
                                    491 ; overlayable items in internal ram
                                    492 ;--------------------------------------------------------
                                    493 	.area	OSEG    (OVR,DATA)
      000000                        494 _hex_to_int_sloc0_1_0:
      000000                        495 	.ds 3
      000003                        496 _hex_to_int_sloc1_1_0:
      000003                        497 	.ds 1
      000004                        498 _hex_to_int_sloc2_1_0:
      000004                        499 	.ds 2
                                    500 ;--------------------------------------------------------
                                    501 ; Stack segment in internal ram
                                    502 ;--------------------------------------------------------
                                    503 	.area SSEG
      000000                        504 __start__stack:
      000000                        505 	.ds	1
                                    506 
                                    507 ;--------------------------------------------------------
                                    508 ; indirectly addressable internal ram data
                                    509 ;--------------------------------------------------------
                                    510 	.area ISEG    (DATA)
                                    511 ;--------------------------------------------------------
                                    512 ; absolute internal ram data
                                    513 ;--------------------------------------------------------
                                    514 	.area IABS    (ABS,DATA)
                                    515 	.area IABS    (ABS,DATA)
                                    516 ;--------------------------------------------------------
                                    517 ; bit data
                                    518 ;--------------------------------------------------------
                                    519 	.area BSEG    (BIT)
                                    520 ;--------------------------------------------------------
                                    521 ; paged external ram data
                                    522 ;--------------------------------------------------------
                                    523 	.area PSEG    (PAG,XDATA)
                                    524 ;--------------------------------------------------------
                                    525 ; uninitialized external ram data
                                    526 ;--------------------------------------------------------
                                    527 	.area XSEG    (XDATA)
      000000                        528 _hex_to_int_str_10000_127:
      000000                        529 	.ds 3
      000003                        530 _hex_to_int_result_10000_128:
      000003                        531 	.ds 2
      000005                        532 _hex_to_int_ASCII_20000_129:
      000005                        533 	.ds 2
      000007                        534 _get_user_buffer_size_input_10000_134:
      000007                        535 	.ds 10
      000011                        536 _main_device_mac_10000_137:
      000011                        537 	.ds 6
      000017                        538 _main_target_mac_10000_137:
      000017                        539 	.ds 6
      00001D                        540 _main_device_ip_10000_137:
      00001D                        541 	.ds 4
      000021                        542 _main_target_ip_10000_137:
      000021                        543 	.ds 4
      000025                        544 _main_buffer_40003_147:
      000025                        545 	.ds 256
      000125                        546 _main_buffer_40003_152:
      000125                        547 	.ds 256
      000225                        548 _main_gNextPacketPtr_60001_168:
      000225                        549 	.ds 2
      000227                        550 _main_is_tcp_for_target_60004_173:
      000227                        551 	.ds 2
      000229                        552 _main_response_size_70004_177:
      000229                        553 	.ds 2
                                    554 ;--------------------------------------------------------
                                    555 ; absolute external ram data
                                    556 ;--------------------------------------------------------
                                    557 	.area XABS    (ABS,XDATA)
                                    558 ;--------------------------------------------------------
                                    559 ; initialized external ram data
                                    560 ;--------------------------------------------------------
                                    561 	.area XISEG   (XDATA)
      000000                        562 _device_mac::
      000000                        563 	.ds 6
      000006                        564 _target_mac::
      000006                        565 	.ds 6
      00000C                        566 _device_ip::
      00000C                        567 	.ds 4
      000010                        568 _target_ip::
      000010                        569 	.ds 4
                                    570 	.area HOME    (CODE)
                                    571 	.area GSINIT0 (CODE)
                                    572 	.area GSINIT1 (CODE)
                                    573 	.area GSINIT2 (CODE)
                                    574 	.area GSINIT3 (CODE)
                                    575 	.area GSINIT4 (CODE)
                                    576 	.area GSINIT5 (CODE)
                                    577 	.area GSINIT  (CODE)
                                    578 	.area GSFINAL (CODE)
                                    579 	.area CSEG    (CODE)
                                    580 ;--------------------------------------------------------
                                    581 ; interrupt vector
                                    582 ;--------------------------------------------------------
                                    583 	.area HOME    (CODE)
      000000                        584 __interrupt_vect:
      000000 02r00r00         [24]  585 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  586 	ljmp	_external_interrupt0_isr
                                    587 ;--------------------------------------------------------
                                    588 ; global & static initialisations
                                    589 ;--------------------------------------------------------
                                    590 	.area HOME    (CODE)
                                    591 	.area GSINIT  (CODE)
                                    592 	.area GSFINAL (CODE)
                                    593 	.area GSINIT  (CODE)
                                    594 	.globl __sdcc_gsinit_startup
                                    595 	.globl __sdcc_program_startup
                                    596 	.globl __start__stack
                                    597 	.globl __mcs51_genXINIT
                                    598 	.globl __mcs51_genXRAMCLEAR
                                    599 	.globl __mcs51_genRAMCLEAR
                                    600 ;------------------------------------------------------------
                                    601 ;Allocation info for local variables in function 'main'
                                    602 ;------------------------------------------------------------
                                    603 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    604 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    605 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    606 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    607 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    608 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    609 ;device_mac                Allocated with name '_main_device_mac_10000_137'
                                    610 ;target_mac                Allocated with name '_main_target_mac_10000_137'
                                    611 ;device_ip                 Allocated with name '_main_device_ip_10000_137'
                                    612 ;target_ip                 Allocated with name '_main_target_ip_10000_137'
                                    613 ;c                         Allocated with name '_main_c_20001_139'
                                    614 ;reg_bank                  Allocated with name '_main_reg_bank_40002_142'
                                    615 ;addr                      Allocated with name '_main_addr_40003_143'
                                    616 ;data                      Allocated with name '_main_data_40004_144'
                                    617 ;num_bytes                 Allocated with name '_main_num_bytes_40002_146'
                                    618 ;start_address             Allocated with name '_main_start_address_40003_147'
                                    619 ;buffer                    Allocated with name '_main_buffer_40003_147'
                                    620 ;i                         Allocated with name '_main_i_50003_148'
                                    621 ;num_bytes                 Allocated with name '_main_num_bytes_40002_151'
                                    622 ;start_address             Allocated with name '_main_start_address_40003_152'
                                    623 ;buffer                    Allocated with name '_main_buffer_40003_152'
                                    624 ;reg_bank                  Allocated with name '_main_reg_bank_40002_154'
                                    625 ;addr                      Allocated with name '_main_addr_40003_155'
                                    626 ;data                      Allocated with name '_main_data_40003_155'
                                    627 ;addr                      Allocated with name '_main_addr_40002_157'
                                    628 ;data                      Allocated with name '_main_data_40003_158'
                                    629 ;addr                      Allocated with name '_main_addr_40002_160'
                                    630 ;data                      Allocated with name '_main_data_40002_160'
                                    631 ;addr                      Allocated with name '_main_addr_40002_163'
                                    632 ;bank                      Allocated with name '_main_bank_40003_164'
                                    633 ;data                      Allocated with name '_main_data_40003_164'
                                    634 ;nextPacket                Allocated with name '_main_nextPacket_60001_168'
                                    635 ;byteCount                 Allocated with name '_main_byteCount_60001_168'
                                    636 ;status                    Allocated with name '_main_status_60001_168'
                                    637 ;gNextPacketPtr            Allocated with name '_main_gNextPacketPtr_60001_168'
                                    638 ;len                       Allocated with name '_main_len_60001_168'
                                    639 ;packet_data               Allocated with name '_main_packet_data_60002_171'
                                    640 ;packet_data_actual        Allocated with name '_main_packet_data_actual_60003_172'
                                    641 ;is_tcp_for_target         Allocated with name '_main_is_tcp_for_target_60004_173'
                                    642 ;response_size             Allocated with name '_main_response_size_70004_177'
                                    643 ;response                  Allocated with name '_main_response_70004_177'
                                    644 ;read_econ2                Allocated with name '_main_read_econ2_60005_181'
                                    645 ;i                         Allocated with name '_main_i_50001_184'
                                    646 ;read_econ2                Allocated with name '_main_read_econ2_40002_187'
                                    647 ;------------------------------------------------------------
                                    648 ;	main.c:199: static uint16_t gNextPacketPtr = RX_BUFFER_START;
      000000 90r02r25         [24]  649 	mov	dptr,#_main_gNextPacketPtr_60001_168
      000003 E4               [12]  650 	clr	a
      000004 F0               [24]  651 	movx	@dptr,a
      000005 A3               [24]  652 	inc	dptr
      000006 F0               [24]  653 	movx	@dptr,a
                                    654 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  655 	ljmp	__sdcc_program_startup
                                    656 ;--------------------------------------------------------
                                    657 ; Home
                                    658 ;--------------------------------------------------------
                                    659 	.area HOME    (CODE)
                                    660 	.area HOME    (CODE)
      000006                        661 __sdcc_program_startup:
      000006 02r02r3E         [24]  662 	ljmp	_main
                                    663 ;	return from main will return to caller
                                    664 ;--------------------------------------------------------
                                    665 ; code
                                    666 ;--------------------------------------------------------
                                    667 	.area CSEG    (CODE)
                                    668 ;------------------------------------------------------------
                                    669 ;Allocation info for local variables in function 'hex_to_int'
                                    670 ;------------------------------------------------------------
                                    671 ;str                       Allocated with name '_hex_to_int_str_10000_127'
                                    672 ;i                         Allocated with name '_hex_to_int_i_10000_128'
                                    673 ;result                    Allocated with name '_hex_to_int_result_10000_128'
                                    674 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_129'
                                    675 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    676 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    677 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    678 ;------------------------------------------------------------
                                    679 ;	main.c:23: int hex_to_int(char* str)
                                    680 ;	-----------------------------------------
                                    681 ;	 function hex_to_int
                                    682 ;	-----------------------------------------
      000000                        683 _hex_to_int:
                           000007   684 	ar7 = 0x07
                           000006   685 	ar6 = 0x06
                           000005   686 	ar5 = 0x05
                           000004   687 	ar4 = 0x04
                           000003   688 	ar3 = 0x03
                           000002   689 	ar2 = 0x02
                           000001   690 	ar1 = 0x01
                           000000   691 	ar0 = 0x00
      000000 AF F0            [24]  692 	mov	r7,b
      000002 AE 83            [24]  693 	mov	r6,dph
      000004 E5 82            [12]  694 	mov	a,dpl
      000006 90r00r00         [24]  695 	mov	dptr,#_hex_to_int_str_10000_127
      000009 F0               [24]  696 	movx	@dptr,a
      00000A EE               [12]  697 	mov	a,r6
      00000B A3               [24]  698 	inc	dptr
      00000C F0               [24]  699 	movx	@dptr,a
      00000D EF               [12]  700 	mov	a,r7
      00000E A3               [24]  701 	inc	dptr
      00000F F0               [24]  702 	movx	@dptr,a
                                    703 ;	main.c:26: int i = 0, result = 0;
      000010 90r00r03         [24]  704 	mov	dptr,#_hex_to_int_result_10000_128
      000013 E4               [12]  705 	clr	a
      000014 F0               [24]  706 	movx	@dptr,a
      000015 A3               [24]  707 	inc	dptr
      000016 F0               [24]  708 	movx	@dptr,a
                                    709 ;	main.c:27: while(str[i] != '\0')
      000017 90r00r00         [24]  710 	mov	dptr,#_hex_to_int_str_10000_127
      00001A E0               [24]  711 	movx	a,@dptr
      00001B FD               [12]  712 	mov	r5,a
      00001C A3               [24]  713 	inc	dptr
      00001D E0               [24]  714 	movx	a,@dptr
      00001E FE               [12]  715 	mov	r6,a
      00001F A3               [24]  716 	inc	dptr
      000020 E0               [24]  717 	movx	a,@dptr
      000021 FF               [12]  718 	mov	r7,a
      000022 8D 02            [24]  719 	mov	ar2,r5
      000024 8E 03            [24]  720 	mov	ar3,r6
      000026 8F 04            [24]  721 	mov	ar4,r7
      000028 8D*00            [24]  722 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  723 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  724 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  725 	mov	r0,#0x00
      000030 79 00            [12]  726 	mov	r1,#0x00
      000032                        727 00112$:
      000032 C0 02            [24]  728 	push	ar2
      000034 C0 03            [24]  729 	push	ar3
      000036 C0 04            [24]  730 	push	ar4
      000038 E8               [12]  731 	mov	a,r0
      000039 25*00            [12]  732 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  733 	mov	r2,a
      00003C E9               [12]  734 	mov	a,r1
      00003D 35*01            [12]  735 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  736 	mov	r3,a
      000040 AC*02            [24]  737 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  738 	mov	dpl,r2
      000044 8B 83            [24]  739 	mov	dph,r3
      000046 8C F0            [24]  740 	mov	b,r4
      000048 12r00r00         [24]  741 	lcall	__gptrget
      00004B F5*03            [12]  742 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  743 	pop	ar4
      00004F D0 03            [24]  744 	pop	ar3
      000051 D0 02            [24]  745 	pop	ar2
      000053 E5*03            [12]  746 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  747 	jnz	00166$
      000057 02r01rAE         [24]  748 	ljmp	00114$
      00005A                        749 00166$:
                                    750 ;	main.c:29: int ASCII = (int)str[i];
      00005A C0 02            [24]  751 	push	ar2
      00005C C0 03            [24]  752 	push	ar3
      00005E C0 04            [24]  753 	push	ar4
      000060 85*03*04         [24]  754 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  755 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  756 	mov	dptr,#_hex_to_int_ASCII_20000_129
      000069 E5*04            [12]  757 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  758 	movx	@dptr,a
      00006C E5*05            [12]  759 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  760 	inc	dptr
      00006F F0               [24]  761 	movx	@dptr,a
                                    762 ;	main.c:30: result *= 16;
      000070 90r00r03         [24]  763 	mov	dptr,#_hex_to_int_result_10000_128
      000073 E0               [24]  764 	movx	a,@dptr
      000074 FB               [12]  765 	mov	r3,a
      000075 A3               [24]  766 	inc	dptr
      000076 E0               [24]  767 	movx	a,@dptr
      000077 C4               [12]  768 	swap	a
      000078 54 F0            [12]  769 	anl	a,#0xf0
      00007A CB               [12]  770 	xch	a,r3
      00007B C4               [12]  771 	swap	a
      00007C CB               [12]  772 	xch	a,r3
      00007D 6B               [12]  773 	xrl	a,r3
      00007E CB               [12]  774 	xch	a,r3
      00007F 54 F0            [12]  775 	anl	a,#0xf0
      000081 CB               [12]  776 	xch	a,r3
      000082 6B               [12]  777 	xrl	a,r3
      000083 FC               [12]  778 	mov	r4,a
      000084 90r00r03         [24]  779 	mov	dptr,#_hex_to_int_result_10000_128
      000087 EB               [12]  780 	mov	a,r3
      000088 F0               [24]  781 	movx	@dptr,a
      000089 EC               [12]  782 	mov	a,r4
      00008A A3               [24]  783 	inc	dptr
      00008B F0               [24]  784 	movx	@dptr,a
                                    785 ;	main.c:31: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  786 	clr	c
      00008D E5*04            [12]  787 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  788 	subb	a,#0x30
      000091 E5*05            [12]  789 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  790 	xrl	a,#0x80
      000095 94 80            [12]  791 	subb	a,#0x80
      000097 D0 04            [24]  792 	pop	ar4
      000099 D0 03            [24]  793 	pop	ar3
      00009B D0 02            [24]  794 	pop	ar2
      00009D 40 3F            [24]  795 	jc	00109$
      00009F 74 39            [12]  796 	mov	a,#0x39
      0000A1 95*04            [12]  797 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  798 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  799 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  800 	xrl	b,#0x80
      0000AB 95 F0            [12]  801 	subb	a,b
      0000AD 40 2F            [24]  802 	jc	00109$
                                    803 ;	main.c:33: result += str[i] - 48;
      0000AF C0 02            [24]  804 	push	ar2
      0000B1 C0 03            [24]  805 	push	ar3
      0000B3 C0 04            [24]  806 	push	ar4
      0000B5 E5*04            [12]  807 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  808 	add	a,#0xd0
      0000B9 F5*04            [12]  809 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  810 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  811 	addc	a,#0xff
      0000BF F5*05            [12]  812 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  813 	mov	dptr,#_hex_to_int_result_10000_128
      0000C4 E0               [24]  814 	movx	a,@dptr
      0000C5 FA               [12]  815 	mov	r2,a
      0000C6 A3               [24]  816 	inc	dptr
      0000C7 E0               [24]  817 	movx	a,@dptr
      0000C8 FC               [12]  818 	mov	r4,a
      0000C9 90r00r03         [24]  819 	mov	dptr,#_hex_to_int_result_10000_128
      0000CC E5*04            [12]  820 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  821 	add	a, r2
      0000CF F0               [24]  822 	movx	@dptr,a
      0000D0 E5*05            [12]  823 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  824 	addc	a, r4
      0000D3 A3               [24]  825 	inc	dptr
      0000D4 F0               [24]  826 	movx	@dptr,a
      0000D5 D0 04            [24]  827 	pop	ar4
      0000D7 D0 03            [24]  828 	pop	ar3
      0000D9 D0 02            [24]  829 	pop	ar2
      0000DB 02r01rA6         [24]  830 	ljmp	00110$
      0000DE                        831 00109$:
                                    832 ;	main.c:35: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  833 	mov	dptr,#_hex_to_int_ASCII_20000_129
      0000E1 E0               [24]  834 	movx	a,@dptr
      0000E2 F5*04            [12]  835 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  836 	inc	dptr
      0000E5 E0               [24]  837 	movx	a,@dptr
      0000E6 F5*05            [12]  838 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  839 	clr	c
      0000E9 E5*04            [12]  840 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  841 	subb	a,#0x41
      0000ED E5*05            [12]  842 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  843 	xrl	a,#0x80
      0000F1 94 80            [12]  844 	subb	a,#0x80
      0000F3 40 4E            [24]  845 	jc	00105$
      0000F5 74 46            [12]  846 	mov	a,#0x46
      0000F7 95*04            [12]  847 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  848 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  849 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  850 	xrl	b,#0x80
      000101 95 F0            [12]  851 	subb	a,b
      000103 40 3E            [24]  852 	jc	00105$
                                    853 ;	main.c:37: result += str[i] - 55;
      000105 C0 05            [24]  854 	push	ar5
      000107 C0 06            [24]  855 	push	ar6
      000109 C0 07            [24]  856 	push	ar7
      00010B E8               [12]  857 	mov	a,r0
      00010C 2A               [12]  858 	add	a, r2
      00010D FD               [12]  859 	mov	r5,a
      00010E E9               [12]  860 	mov	a,r1
      00010F 3B               [12]  861 	addc	a, r3
      000110 FE               [12]  862 	mov	r6,a
      000111 8C 07            [24]  863 	mov	ar7,r4
      000113 8D 82            [24]  864 	mov	dpl,r5
      000115 8E 83            [24]  865 	mov	dph,r6
      000117 8F F0            [24]  866 	mov	b,r7
      000119 12r00r00         [24]  867 	lcall	__gptrget
      00011C 7F 00            [12]  868 	mov	r7,#0x00
      00011E 24 C9            [12]  869 	add	a,#0xc9
      000120 F5*04            [12]  870 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  871 	mov	a,r7
      000123 34 FF            [12]  872 	addc	a,#0xff
      000125 F5*05            [12]  873 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  874 	mov	dptr,#_hex_to_int_result_10000_128
      00012A E0               [24]  875 	movx	a,@dptr
      00012B FE               [12]  876 	mov	r6,a
      00012C A3               [24]  877 	inc	dptr
      00012D E0               [24]  878 	movx	a,@dptr
      00012E FF               [12]  879 	mov	r7,a
      00012F 90r00r03         [24]  880 	mov	dptr,#_hex_to_int_result_10000_128
      000132 E5*04            [12]  881 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  882 	add	a, r6
      000135 F0               [24]  883 	movx	@dptr,a
      000136 E5*05            [12]  884 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  885 	addc	a, r7
      000139 A3               [24]  886 	inc	dptr
      00013A F0               [24]  887 	movx	@dptr,a
      00013B D0 07            [24]  888 	pop	ar7
      00013D D0 06            [24]  889 	pop	ar6
      00013F D0 05            [24]  890 	pop	ar5
      000141 80 63            [24]  891 	sjmp	00110$
      000143                        892 00105$:
                                    893 ;	main.c:39: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  894 	mov	dptr,#_hex_to_int_ASCII_20000_129
      000146 E0               [24]  895 	movx	a,@dptr
      000147 F5*04            [12]  896 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  897 	inc	dptr
      00014A E0               [24]  898 	movx	a,@dptr
      00014B F5*05            [12]  899 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  900 	clr	c
      00014E E5*04            [12]  901 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  902 	subb	a,#0x61
      000152 E5*05            [12]  903 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  904 	xrl	a,#0x80
      000156 94 80            [12]  905 	subb	a,#0x80
      000158 40 4C            [24]  906 	jc	00110$
      00015A 74 66            [12]  907 	mov	a,#0x66
      00015C 95*04            [12]  908 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  909 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  910 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  911 	xrl	b,#0x80
      000166 95 F0            [12]  912 	subb	a,b
      000168 40 3C            [24]  913 	jc	00110$
                                    914 ;	main.c:41: result += str[i] - 87;
      00016A C0 02            [24]  915 	push	ar2
      00016C C0 03            [24]  916 	push	ar3
      00016E C0 04            [24]  917 	push	ar4
      000170 E8               [12]  918 	mov	a,r0
      000171 2D               [12]  919 	add	a, r5
      000172 FA               [12]  920 	mov	r2,a
      000173 E9               [12]  921 	mov	a,r1
      000174 3E               [12]  922 	addc	a, r6
      000175 FB               [12]  923 	mov	r3,a
      000176 8F 04            [24]  924 	mov	ar4,r7
      000178 8A 82            [24]  925 	mov	dpl,r2
      00017A 8B 83            [24]  926 	mov	dph,r3
      00017C 8C F0            [24]  927 	mov	b,r4
      00017E 12r00r00         [24]  928 	lcall	__gptrget
      000181 7C 00            [12]  929 	mov	r4,#0x00
      000183 24 A9            [12]  930 	add	a,#0xa9
      000185 F5*04            [12]  931 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  932 	mov	a,r4
      000188 34 FF            [12]  933 	addc	a,#0xff
      00018A F5*05            [12]  934 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  935 	mov	dptr,#_hex_to_int_result_10000_128
      00018F E0               [24]  936 	movx	a,@dptr
      000190 FB               [12]  937 	mov	r3,a
      000191 A3               [24]  938 	inc	dptr
      000192 E0               [24]  939 	movx	a,@dptr
      000193 FC               [12]  940 	mov	r4,a
      000194 90r00r03         [24]  941 	mov	dptr,#_hex_to_int_result_10000_128
      000197 E5*04            [12]  942 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  943 	add	a, r3
      00019A F0               [24]  944 	movx	@dptr,a
      00019B E5*05            [12]  945 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  946 	addc	a, r4
      00019E A3               [24]  947 	inc	dptr
      00019F F0               [24]  948 	movx	@dptr,a
                                    949 ;	main.c:45: return result;
      0001A0 D0 04            [24]  950 	pop	ar4
      0001A2 D0 03            [24]  951 	pop	ar3
      0001A4 D0 02            [24]  952 	pop	ar2
                                    953 ;	main.c:41: result += str[i] - 87;
      0001A6                        954 00110$:
                                    955 ;	main.c:43: i++;
      0001A6 08               [12]  956 	inc	r0
      0001A7 B8 00 01         [24]  957 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  958 	inc	r1
      0001AB                        959 00173$:
      0001AB 02r00r32         [24]  960 	ljmp	00112$
      0001AE                        961 00114$:
                                    962 ;	main.c:45: return result;
      0001AE 90r00r03         [24]  963 	mov	dptr,#_hex_to_int_result_10000_128
      0001B1 E0               [24]  964 	movx	a,@dptr
      0001B2 FE               [12]  965 	mov	r6,a
      0001B3 A3               [24]  966 	inc	dptr
      0001B4 E0               [24]  967 	movx	a,@dptr
                                    968 ;	main.c:47: }
      0001B5 8E 82            [24]  969 	mov	dpl,r6
      0001B7 F5 83            [12]  970 	mov	dph,a
      0001B9 22               [24]  971 	ret
                                    972 ;------------------------------------------------------------
                                    973 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    974 ;------------------------------------------------------------
                                    975 ;i                         Allocated with name '_get_user_buffer_size_i_10000_134'
                                    976 ;output                    Allocated with name '_get_user_buffer_size_output_10000_134'
                                    977 ;input                     Allocated with name '_get_user_buffer_size_input_10000_134'
                                    978 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_134'
                                    979 ;------------------------------------------------------------
                                    980 ;	main.c:50: int get_user_buffer_size(void)
                                    981 ;	-----------------------------------------
                                    982 ;	 function get_user_buffer_size
                                    983 ;	-----------------------------------------
      0001BA                        984 _get_user_buffer_size:
                                    985 ;	main.c:56: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  986 	mov	r6,#0x00
      0001BC 7F 00            [12]  987 	mov	r7,#0x00
      0001BE                        988 00103$:
      0001BE C0 07            [24]  989 	push	ar7
      0001C0 C0 06            [24]  990 	push	ar6
      0001C2 12r00r00         [24]  991 	lcall	_getchar
      0001C5 AC 82            [24]  992 	mov	r4, dpl
      0001C7 D0 06            [24]  993 	pop	ar6
      0001C9 D0 07            [24]  994 	pop	ar7
      0001CB BC 0A 02         [24]  995 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  996 	sjmp	00105$
      0001D0                        997 00133$:
      0001D0 BC 0D 02         [24]  998 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  999 	sjmp	00105$
      0001D5                       1000 00134$:
      0001D5 C3               [12] 1001 	clr	c
      0001D6 EE               [12] 1002 	mov	a,r6
      0001D7 94 09            [12] 1003 	subb	a,#0x09
      0001D9 EF               [12] 1004 	mov	a,r7
      0001DA 64 80            [12] 1005 	xrl	a,#0x80
      0001DC 94 80            [12] 1006 	subb	a,#0x80
      0001DE 50 2A            [24] 1007 	jnc	00105$
                                   1008 ;	main.c:58: putchar(ch);
      0001E0 8C 03            [24] 1009 	mov	ar3,r4
      0001E2 7D 00            [12] 1010 	mov	r5,#0x00
      0001E4 8B 82            [24] 1011 	mov	dpl, r3
      0001E6 8D 83            [24] 1012 	mov	dph, r5
      0001E8 C0 07            [24] 1013 	push	ar7
      0001EA C0 06            [24] 1014 	push	ar6
      0001EC C0 04            [24] 1015 	push	ar4
      0001EE 12r00r00         [24] 1016 	lcall	_putchar
      0001F1 D0 04            [24] 1017 	pop	ar4
      0001F3 D0 06            [24] 1018 	pop	ar6
      0001F5 D0 07            [24] 1019 	pop	ar7
                                   1020 ;	main.c:59: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12] 1021 	mov	a,r6
      0001F8 24r07            [12] 1022 	add	a, #_get_user_buffer_size_input_10000_134
      0001FA F5 82            [12] 1023 	mov	dpl,a
      0001FC EF               [12] 1024 	mov	a,r7
      0001FD 34s00            [12] 1025 	addc	a, #(_get_user_buffer_size_input_10000_134 >> 8)
      0001FF F5 83            [12] 1026 	mov	dph,a
      000201 EC               [12] 1027 	mov	a,r4
      000202 F0               [24] 1028 	movx	@dptr,a
                                   1029 ;	main.c:60: i++;
      000203 0E               [12] 1030 	inc	r6
      000204 BE 00 B7         [24] 1031 	cjne	r6,#0x00,00103$
      000207 0F               [12] 1032 	inc	r7
      000208 80 B4            [24] 1033 	sjmp	00103$
      00020A                       1034 00105$:
                                   1035 ;	main.c:62: input[i] = '\0';
      00020A EE               [12] 1036 	mov	a,r6
      00020B 24r07            [12] 1037 	add	a, #_get_user_buffer_size_input_10000_134
      00020D F5 82            [12] 1038 	mov	dpl,a
      00020F EF               [12] 1039 	mov	a,r7
      000210 34s00            [12] 1040 	addc	a, #(_get_user_buffer_size_input_10000_134 >> 8)
      000212 F5 83            [12] 1041 	mov	dph,a
      000214 E4               [12] 1042 	clr	a
      000215 F0               [24] 1043 	movx	@dptr,a
                                   1044 ;	main.c:63: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24] 1045 	mov	dptr,#_get_user_buffer_size_input_10000_134
      000219 F5 F0            [12] 1046 	mov	b,a
      00021B 12r00r00         [24] 1047 	lcall	_hex_to_int
      00021E AE 82            [24] 1048 	mov	r6, dpl
      000220 AF 83            [24] 1049 	mov	r7, dph
                                   1050 ;	main.c:64: printf_tiny("\n\r");
      000222 C0 07            [24] 1051 	push	ar7
      000224 C0 06            [24] 1052 	push	ar6
      000226 74r00            [12] 1053 	mov	a,#___str_0
      000228 C0 E0            [24] 1054 	push	acc
      00022A 74s00            [12] 1055 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24] 1056 	push	acc
      00022E 12r00r00         [24] 1057 	lcall	_printf_tiny
      000231 15 81            [12] 1058 	dec	sp
      000233 15 81            [12] 1059 	dec	sp
      000235 D0 06            [24] 1060 	pop	ar6
      000237 D0 07            [24] 1061 	pop	ar7
                                   1062 ;	main.c:66: return output;
      000239 8E 82            [24] 1063 	mov	dpl, r6
      00023B 8F 83            [24] 1064 	mov	dph, r7
                                   1065 ;	main.c:67: }
      00023D 22               [24] 1066 	ret
                                   1067 ;------------------------------------------------------------
                                   1068 ;Allocation info for local variables in function 'main'
                                   1069 ;------------------------------------------------------------
                                   1070 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                   1071 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                   1072 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                   1073 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                   1074 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                   1075 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                   1076 ;device_mac                Allocated with name '_main_device_mac_10000_137'
                                   1077 ;target_mac                Allocated with name '_main_target_mac_10000_137'
                                   1078 ;device_ip                 Allocated with name '_main_device_ip_10000_137'
                                   1079 ;target_ip                 Allocated with name '_main_target_ip_10000_137'
                                   1080 ;c                         Allocated with name '_main_c_20001_139'
                                   1081 ;reg_bank                  Allocated with name '_main_reg_bank_40002_142'
                                   1082 ;addr                      Allocated with name '_main_addr_40003_143'
                                   1083 ;data                      Allocated with name '_main_data_40004_144'
                                   1084 ;num_bytes                 Allocated with name '_main_num_bytes_40002_146'
                                   1085 ;start_address             Allocated with name '_main_start_address_40003_147'
                                   1086 ;buffer                    Allocated with name '_main_buffer_40003_147'
                                   1087 ;i                         Allocated with name '_main_i_50003_148'
                                   1088 ;num_bytes                 Allocated with name '_main_num_bytes_40002_151'
                                   1089 ;start_address             Allocated with name '_main_start_address_40003_152'
                                   1090 ;buffer                    Allocated with name '_main_buffer_40003_152'
                                   1091 ;reg_bank                  Allocated with name '_main_reg_bank_40002_154'
                                   1092 ;addr                      Allocated with name '_main_addr_40003_155'
                                   1093 ;data                      Allocated with name '_main_data_40003_155'
                                   1094 ;addr                      Allocated with name '_main_addr_40002_157'
                                   1095 ;data                      Allocated with name '_main_data_40003_158'
                                   1096 ;addr                      Allocated with name '_main_addr_40002_160'
                                   1097 ;data                      Allocated with name '_main_data_40002_160'
                                   1098 ;addr                      Allocated with name '_main_addr_40002_163'
                                   1099 ;bank                      Allocated with name '_main_bank_40003_164'
                                   1100 ;data                      Allocated with name '_main_data_40003_164'
                                   1101 ;nextPacket                Allocated with name '_main_nextPacket_60001_168'
                                   1102 ;byteCount                 Allocated with name '_main_byteCount_60001_168'
                                   1103 ;status                    Allocated with name '_main_status_60001_168'
                                   1104 ;gNextPacketPtr            Allocated with name '_main_gNextPacketPtr_60001_168'
                                   1105 ;len                       Allocated with name '_main_len_60001_168'
                                   1106 ;packet_data               Allocated with name '_main_packet_data_60002_171'
                                   1107 ;packet_data_actual        Allocated with name '_main_packet_data_actual_60003_172'
                                   1108 ;is_tcp_for_target         Allocated with name '_main_is_tcp_for_target_60004_173'
                                   1109 ;response_size             Allocated with name '_main_response_size_70004_177'
                                   1110 ;response                  Allocated with name '_main_response_70004_177'
                                   1111 ;read_econ2                Allocated with name '_main_read_econ2_60005_181'
                                   1112 ;i                         Allocated with name '_main_i_50001_184'
                                   1113 ;read_econ2                Allocated with name '_main_read_econ2_40002_187'
                                   1114 ;------------------------------------------------------------
                                   1115 ;	main.c:69: void main(void)
                                   1116 ;	-----------------------------------------
                                   1117 ;	 function main
                                   1118 ;	-----------------------------------------
      00023E                       1119 _main:
                                   1120 ;	main.c:71: uint8_t device_mac[6] = { 0x02, 0x11, 0x22, 0x33, 0x44, 0x55 }; // Default MAC
      00023E 90r00r11         [24] 1121 	mov	dptr,#_main_device_mac_10000_137
      000241 74 02            [12] 1122 	mov	a,#0x02
      000243 F0               [24] 1123 	movx	@dptr,a
      000244 90r00r12         [24] 1124 	mov	dptr,#(_main_device_mac_10000_137 + 0x0001)
      000247 74 11            [12] 1125 	mov	a,#0x11
      000249 F0               [24] 1126 	movx	@dptr,a
      00024A 90r00r13         [24] 1127 	mov	dptr,#(_main_device_mac_10000_137 + 0x0002)
      00024D 23               [12] 1128 	rl	a
      00024E F0               [24] 1129 	movx	@dptr,a
      00024F 90r00r14         [24] 1130 	mov	dptr,#(_main_device_mac_10000_137 + 0x0003)
      000252 74 33            [12] 1131 	mov	a,#0x33
      000254 F0               [24] 1132 	movx	@dptr,a
      000255 90r00r15         [24] 1133 	mov	dptr,#(_main_device_mac_10000_137 + 0x0004)
      000258 74 44            [12] 1134 	mov	a,#0x44
      00025A F0               [24] 1135 	movx	@dptr,a
      00025B 90r00r16         [24] 1136 	mov	dptr,#(_main_device_mac_10000_137 + 0x0005)
      00025E 74 55            [12] 1137 	mov	a,#0x55
      000260 F0               [24] 1138 	movx	@dptr,a
                                   1139 ;	main.c:72: uint8_t target_mac[6] = { 0xF8, 0x75, 0xA4, 0x8C, 0x41, 0x31 }; // Default MAC
      000261 90r00r17         [24] 1140 	mov	dptr,#_main_target_mac_10000_137
      000264 74 F8            [12] 1141 	mov	a,#0xf8
      000266 F0               [24] 1142 	movx	@dptr,a
      000267 90r00r18         [24] 1143 	mov	dptr,#(_main_target_mac_10000_137 + 0x0001)
      00026A 74 75            [12] 1144 	mov	a,#0x75
      00026C F0               [24] 1145 	movx	@dptr,a
      00026D 90r00r19         [24] 1146 	mov	dptr,#(_main_target_mac_10000_137 + 0x0002)
      000270 74 A4            [12] 1147 	mov	a,#0xa4
      000272 F0               [24] 1148 	movx	@dptr,a
      000273 90r00r1A         [24] 1149 	mov	dptr,#(_main_target_mac_10000_137 + 0x0003)
      000276 74 8C            [12] 1150 	mov	a,#0x8c
      000278 F0               [24] 1151 	movx	@dptr,a
      000279 90r00r1B         [24] 1152 	mov	dptr,#(_main_target_mac_10000_137 + 0x0004)
      00027C 74 41            [12] 1153 	mov	a,#0x41
      00027E F0               [24] 1154 	movx	@dptr,a
      00027F 90r00r1C         [24] 1155 	mov	dptr,#(_main_target_mac_10000_137 + 0x0005)
      000282 74 31            [12] 1156 	mov	a,#0x31
      000284 F0               [24] 1157 	movx	@dptr,a
                                   1158 ;	main.c:73: uint8_t device_ip[4] = { 192, 168, 1, 100 }; // Default IP Address
      000285 90r00r1D         [24] 1159 	mov	dptr,#_main_device_ip_10000_137
      000288 74 C0            [12] 1160 	mov	a,#0xc0
      00028A F0               [24] 1161 	movx	@dptr,a
      00028B 90r00r1E         [24] 1162 	mov	dptr,#(_main_device_ip_10000_137 + 0x0001)
      00028E 74 A8            [12] 1163 	mov	a,#0xa8
      000290 F0               [24] 1164 	movx	@dptr,a
      000291 90r00r1F         [24] 1165 	mov	dptr,#(_main_device_ip_10000_137 + 0x0002)
      000294 74 01            [12] 1166 	mov	a,#0x01
      000296 F0               [24] 1167 	movx	@dptr,a
      000297 90r00r20         [24] 1168 	mov	dptr,#(_main_device_ip_10000_137 + 0x0003)
      00029A 74 64            [12] 1169 	mov	a,#0x64
      00029C F0               [24] 1170 	movx	@dptr,a
                                   1171 ;	main.c:74: uint8_t target_ip[4] = { 192, 168, 1, 1 };
      00029D 90r00r21         [24] 1172 	mov	dptr,#_main_target_ip_10000_137
      0002A0 74 C0            [12] 1173 	mov	a,#0xc0
      0002A2 F0               [24] 1174 	movx	@dptr,a
      0002A3 90r00r22         [24] 1175 	mov	dptr,#(_main_target_ip_10000_137 + 0x0001)
      0002A6 74 A8            [12] 1176 	mov	a,#0xa8
      0002A8 F0               [24] 1177 	movx	@dptr,a
      0002A9 90r00r23         [24] 1178 	mov	dptr,#(_main_target_ip_10000_137 + 0x0002)
      0002AC 74 01            [12] 1179 	mov	a,#0x01
      0002AE F0               [24] 1180 	movx	@dptr,a
      0002AF 90r00r24         [24] 1181 	mov	dptr,#(_main_target_ip_10000_137 + 0x0003)
      0002B2 F0               [24] 1182 	movx	@dptr,a
                                   1183 ;	main.c:76: printf("SPI Operations on 8051\n\r");
      0002B3 74r03            [12] 1184 	mov	a,#___str_1
      0002B5 C0 E0            [24] 1185 	push	acc
      0002B7 74s00            [12] 1186 	mov	a,#(___str_1 >> 8)
      0002B9 C0 E0            [24] 1187 	push	acc
      0002BB 74 80            [12] 1188 	mov	a,#0x80
      0002BD C0 E0            [24] 1189 	push	acc
      0002BF 12r00r00         [24] 1190 	lcall	_printf
      0002C2 15 81            [12] 1191 	dec	sp
      0002C4 15 81            [12] 1192 	dec	sp
      0002C6 15 81            [12] 1193 	dec	sp
                                   1194 ;	main.c:77: configure_SPI();
      0002C8 12r00r00         [24] 1195 	lcall	_configure_SPI
                                   1196 ;	main.c:79: enc_init(device_mac);
      0002CB 90r00r11         [24] 1197 	mov	dptr,#_main_device_mac_10000_137
      0002CE 75 F0 00         [24] 1198 	mov	b, #0x00
      0002D1 12r00r00         [24] 1199 	lcall	_enc_init
                                   1200 ;	main.c:81: while(1)
      0002D4                       1201 00142$:
                                   1202 ;	main.c:83: printf("\n\rChoose an action: \n\r");
      0002D4 74r1C            [12] 1203 	mov	a,#___str_2
      0002D6 C0 E0            [24] 1204 	push	acc
      0002D8 74s00            [12] 1205 	mov	a,#(___str_2 >> 8)
      0002DA C0 E0            [24] 1206 	push	acc
      0002DC 74 80            [12] 1207 	mov	a,#0x80
      0002DE C0 E0            [24] 1208 	push	acc
      0002E0 12r00r00         [24] 1209 	lcall	_printf
      0002E3 15 81            [12] 1210 	dec	sp
      0002E5 15 81            [12] 1211 	dec	sp
      0002E7 15 81            [12] 1212 	dec	sp
                                   1213 ;	main.c:84: printf("1 --> Control Write\n\r");
      0002E9 74r33            [12] 1214 	mov	a,#___str_3
      0002EB C0 E0            [24] 1215 	push	acc
      0002ED 74s00            [12] 1216 	mov	a,#(___str_3 >> 8)
      0002EF C0 E0            [24] 1217 	push	acc
      0002F1 74 80            [12] 1218 	mov	a,#0x80
      0002F3 C0 E0            [24] 1219 	push	acc
      0002F5 12r00r00         [24] 1220 	lcall	_printf
      0002F8 15 81            [12] 1221 	dec	sp
      0002FA 15 81            [12] 1222 	dec	sp
      0002FC 15 81            [12] 1223 	dec	sp
                                   1224 ;	main.c:85: printf("2 --> Buffer Write\n\r");
      0002FE 74r49            [12] 1225 	mov	a,#___str_4
      000300 C0 E0            [24] 1226 	push	acc
      000302 74s00            [12] 1227 	mov	a,#(___str_4 >> 8)
      000304 C0 E0            [24] 1228 	push	acc
      000306 74 80            [12] 1229 	mov	a,#0x80
      000308 C0 E0            [24] 1230 	push	acc
      00030A 12r00r00         [24] 1231 	lcall	_printf
      00030D 15 81            [12] 1232 	dec	sp
      00030F 15 81            [12] 1233 	dec	sp
      000311 15 81            [12] 1234 	dec	sp
                                   1235 ;	main.c:86: printf("3 --> Buffer Read\n\r");
      000313 74r5E            [12] 1236 	mov	a,#___str_5
      000315 C0 E0            [24] 1237 	push	acc
      000317 74s00            [12] 1238 	mov	a,#(___str_5 >> 8)
      000319 C0 E0            [24] 1239 	push	acc
      00031B 74 80            [12] 1240 	mov	a,#0x80
      00031D C0 E0            [24] 1241 	push	acc
      00031F 12r00r00         [24] 1242 	lcall	_printf
      000322 15 81            [12] 1243 	dec	sp
      000324 15 81            [12] 1244 	dec	sp
      000326 15 81            [12] 1245 	dec	sp
                                   1246 ;	main.c:87: printf("4 --> MAC Register Read\n\r");
      000328 74r72            [12] 1247 	mov	a,#___str_6
      00032A C0 E0            [24] 1248 	push	acc
      00032C 74s00            [12] 1249 	mov	a,#(___str_6 >> 8)
      00032E C0 E0            [24] 1250 	push	acc
      000330 74 80            [12] 1251 	mov	a,#0x80
      000332 C0 E0            [24] 1252 	push	acc
      000334 12r00r00         [24] 1253 	lcall	_printf
      000337 15 81            [12] 1254 	dec	sp
      000339 15 81            [12] 1255 	dec	sp
      00033B 15 81            [12] 1256 	dec	sp
                                   1257 ;	main.c:88: printf("5 --> PHY SPI Write\n\r");
      00033D 74r8C            [12] 1258 	mov	a,#___str_7
      00033F C0 E0            [24] 1259 	push	acc
      000341 74s00            [12] 1260 	mov	a,#(___str_7 >> 8)
      000343 C0 E0            [24] 1261 	push	acc
      000345 74 80            [12] 1262 	mov	a,#0x80
      000347 C0 E0            [24] 1263 	push	acc
      000349 12r00r00         [24] 1264 	lcall	_printf
      00034C 15 81            [12] 1265 	dec	sp
      00034E 15 81            [12] 1266 	dec	sp
      000350 15 81            [12] 1267 	dec	sp
                                   1268 ;	main.c:89: printf("6 --> PHY SPI Read\n\r");
      000352 74rA2            [12] 1269 	mov	a,#___str_8
      000354 C0 E0            [24] 1270 	push	acc
      000356 74s00            [12] 1271 	mov	a,#(___str_8 >> 8)
      000358 C0 E0            [24] 1272 	push	acc
      00035A 74 80            [12] 1273 	mov	a,#0x80
      00035C C0 E0            [24] 1274 	push	acc
      00035E 12r00r00         [24] 1275 	lcall	_printf
      000361 15 81            [12] 1276 	dec	sp
      000363 15 81            [12] 1277 	dec	sp
      000365 15 81            [12] 1278 	dec	sp
                                   1279 ;	main.c:90: printf("7 --> ENC Reset\n\r");
      000367 74rB7            [12] 1280 	mov	a,#___str_9
      000369 C0 E0            [24] 1281 	push	acc
      00036B 74s00            [12] 1282 	mov	a,#(___str_9 >> 8)
      00036D C0 E0            [24] 1283 	push	acc
      00036F 74 80            [12] 1284 	mov	a,#0x80
      000371 C0 E0            [24] 1285 	push	acc
      000373 12r00r00         [24] 1286 	lcall	_printf
      000376 15 81            [12] 1287 	dec	sp
      000378 15 81            [12] 1288 	dec	sp
      00037A 15 81            [12] 1289 	dec	sp
                                   1290 ;	main.c:91: printf("8 --> Read ETH Register\n\r");
      00037C 74rC9            [12] 1291 	mov	a,#___str_10
      00037E C0 E0            [24] 1292 	push	acc
      000380 74s00            [12] 1293 	mov	a,#(___str_10 >> 8)
      000382 C0 E0            [24] 1294 	push	acc
      000384 74 80            [12] 1295 	mov	a,#0x80
      000386 C0 E0            [24] 1296 	push	acc
      000388 12r00r00         [24] 1297 	lcall	_printf
      00038B 15 81            [12] 1298 	dec	sp
      00038D 15 81            [12] 1299 	dec	sp
      00038F 15 81            [12] 1300 	dec	sp
                                   1301 ;	main.c:92: printf("9 --> Display Menu\n\r");
      000391 74rE3            [12] 1302 	mov	a,#___str_11
      000393 C0 E0            [24] 1303 	push	acc
      000395 74s00            [12] 1304 	mov	a,#(___str_11 >> 8)
      000397 C0 E0            [24] 1305 	push	acc
      000399 74 80            [12] 1306 	mov	a,#0x80
      00039B C0 E0            [24] 1307 	push	acc
      00039D 12r00r00         [24] 1308 	lcall	_printf
      0003A0 15 81            [12] 1309 	dec	sp
      0003A2 15 81            [12] 1310 	dec	sp
      0003A4 15 81            [12] 1311 	dec	sp
                                   1312 ;	main.c:93: printf("A --> Send ARP Request\n\r");
      0003A6 74rF8            [12] 1313 	mov	a,#___str_12
      0003A8 C0 E0            [24] 1314 	push	acc
      0003AA 74s00            [12] 1315 	mov	a,#(___str_12 >> 8)
      0003AC C0 E0            [24] 1316 	push	acc
      0003AE 74 80            [12] 1317 	mov	a,#0x80
      0003B0 C0 E0            [24] 1318 	push	acc
      0003B2 12r00r00         [24] 1319 	lcall	_printf
      0003B5 15 81            [12] 1320 	dec	sp
      0003B7 15 81            [12] 1321 	dec	sp
      0003B9 15 81            [12] 1322 	dec	sp
                                   1323 ;	main.c:94: printf("B --> Init RX buffers\n\r");
      0003BB 74r11            [12] 1324 	mov	a,#___str_13
      0003BD C0 E0            [24] 1325 	push	acc
      0003BF 74s01            [12] 1326 	mov	a,#(___str_13 >> 8)
      0003C1 C0 E0            [24] 1327 	push	acc
      0003C3 74 80            [12] 1328 	mov	a,#0x80
      0003C5 C0 E0            [24] 1329 	push	acc
      0003C7 12r00r00         [24] 1330 	lcall	_printf
      0003CA 15 81            [12] 1331 	dec	sp
      0003CC 15 81            [12] 1332 	dec	sp
      0003CE 15 81            [12] 1333 	dec	sp
                                   1334 ;	main.c:95: printf("C --> Hard Reset(nRESET pin)\n\r");
      0003D0 74r29            [12] 1335 	mov	a,#___str_14
      0003D2 C0 E0            [24] 1336 	push	acc
      0003D4 74s01            [12] 1337 	mov	a,#(___str_14 >> 8)
      0003D6 C0 E0            [24] 1338 	push	acc
      0003D8 74 80            [12] 1339 	mov	a,#0x80
      0003DA C0 E0            [24] 1340 	push	acc
      0003DC 12r00r00         [24] 1341 	lcall	_printf
      0003DF 15 81            [12] 1342 	dec	sp
      0003E1 15 81            [12] 1343 	dec	sp
      0003E3 15 81            [12] 1344 	dec	sp
                                   1345 ;	main.c:96: printf("D --> Process TCP\n\r");
      0003E5 74r48            [12] 1346 	mov	a,#___str_15
      0003E7 C0 E0            [24] 1347 	push	acc
      0003E9 74s01            [12] 1348 	mov	a,#(___str_15 >> 8)
      0003EB C0 E0            [24] 1349 	push	acc
      0003ED 74 80            [12] 1350 	mov	a,#0x80
      0003EF C0 E0            [24] 1351 	push	acc
      0003F1 12r00r00         [24] 1352 	lcall	_printf
      0003F4 15 81            [12] 1353 	dec	sp
      0003F6 15 81            [12] 1354 	dec	sp
      0003F8 15 81            [12] 1355 	dec	sp
                                   1356 ;	main.c:97: printf("E --> Enable TX interrupt\n\r");
      0003FA 74r5C            [12] 1357 	mov	a,#___str_16
      0003FC C0 E0            [24] 1358 	push	acc
      0003FE 74s01            [12] 1359 	mov	a,#(___str_16 >> 8)
      000400 C0 E0            [24] 1360 	push	acc
      000402 74 80            [12] 1361 	mov	a,#0x80
      000404 C0 E0            [24] 1362 	push	acc
      000406 12r00r00         [24] 1363 	lcall	_printf
      000409 15 81            [12] 1364 	dec	sp
      00040B 15 81            [12] 1365 	dec	sp
      00040D 15 81            [12] 1366 	dec	sp
                                   1367 ;	main.c:98: printf("F --> Disabling TX interrupt\n\r");
      00040F 74r78            [12] 1368 	mov	a,#___str_17
      000411 C0 E0            [24] 1369 	push	acc
      000413 74s01            [12] 1370 	mov	a,#(___str_17 >> 8)
      000415 C0 E0            [24] 1371 	push	acc
      000417 74 80            [12] 1372 	mov	a,#0x80
      000419 C0 E0            [24] 1373 	push	acc
      00041B 12r00r00         [24] 1374 	lcall	_printf
      00041E 15 81            [12] 1375 	dec	sp
      000420 15 81            [12] 1376 	dec	sp
      000422 15 81            [12] 1377 	dec	sp
                                   1378 ;	main.c:100: char c = getchar();
      000424 12r00r00         [24] 1379 	lcall	_getchar
      000427 AE 82            [24] 1380 	mov	r6, dpl
                                   1381 ;	main.c:101: putchar(c);
      000429 8E 05            [24] 1382 	mov	ar5,r6
      00042B 7F 00            [12] 1383 	mov	r7,#0x00
      00042D 8D 82            [24] 1384 	mov	dpl, r5
      00042F 8F 83            [24] 1385 	mov	dph, r7
      000431 C0 06            [24] 1386 	push	ar6
      000433 12r00r00         [24] 1387 	lcall	_putchar
                                   1388 ;	main.c:102: printf("\n\r");
      000436 74r00            [12] 1389 	mov	a,#___str_0
      000438 C0 E0            [24] 1390 	push	acc
      00043A 74s00            [12] 1391 	mov	a,#(___str_0 >> 8)
      00043C C0 E0            [24] 1392 	push	acc
      00043E 74 80            [12] 1393 	mov	a,#0x80
      000440 C0 E0            [24] 1394 	push	acc
      000442 12r00r00         [24] 1395 	lcall	_printf
      000445 15 81            [12] 1396 	dec	sp
      000447 15 81            [12] 1397 	dec	sp
      000449 15 81            [12] 1398 	dec	sp
      00044B D0 06            [24] 1399 	pop	ar6
                                   1400 ;	main.c:104: switch(c)
      00044D BE 31 00         [24] 1401 	cjne	r6,#0x31,00250$
      000450                       1402 00250$:
      000450 50 03            [24] 1403 	jnc	00251$
      000452 02r0Dr19         [24] 1404 	ljmp	00139$
      000455                       1405 00251$:
      000455 EE               [12] 1406 	mov	a,r6
      000456 24 B9            [12] 1407 	add	a,#0xff - 0x46
      000458 50 03            [24] 1408 	jnc	00252$
      00045A 02r0Dr19         [24] 1409 	ljmp	00139$
      00045D                       1410 00252$:
      00045D EE               [12] 1411 	mov	a,r6
      00045E 24 CF            [12] 1412 	add	a,#0xcf
      000460 FE               [12] 1413 	mov	r6,a
      000461 24 0A            [12] 1414 	add	a,#(00253$-3-.)
      000463 83               [24] 1415 	movc	a,@a+pc
      000464 F5 82            [12] 1416 	mov	dpl,a
      000466 EE               [12] 1417 	mov	a,r6
      000467 24 1A            [12] 1418 	add	a,#(00254$-3-.)
      000469 83               [24] 1419 	movc	a,@a+pc
      00046A F5 83            [12] 1420 	mov	dph,a
      00046C E4               [12] 1421 	clr	a
      00046D 73               [24] 1422 	jmp	@a+dptr
      00046E                       1423 00253$:
      00046Er9A                    1424 	.db	00101$
      00046Fr02                    1425 	.db	00102$
      000470r00                    1426 	.db	00104$
      000471r5F                    1427 	.db	00105$
      000472rC1                    1428 	.db	00106$
      000473r2C                    1429 	.db	00107$
      000474r67                    1430 	.db	00108$
      000475r82                    1431 	.db	00109$
      000476rE4                    1432 	.db	00110$
      000477r19                    1433 	.db	00139$
      000478r19                    1434 	.db	00139$
      000479r19                    1435 	.db	00139$
      00047Ar19                    1436 	.db	00139$
      00047Br19                    1437 	.db	00139$
      00047Cr19                    1438 	.db	00139$
      00047Dr19                    1439 	.db	00139$
      00047ErA4                    1440 	.db	00111$
      00047FrD4                    1441 	.db	00142$
      000480r7D                    1442 	.db	00134$
      000481rAF                    1443 	.db	00136$
      000482rB8                    1444 	.db	00137$
      000483rF3                    1445 	.db	00138$
      000484                       1446 00254$:
      000484s04                    1447 	.db	00101$>>8
      000485s05                    1448 	.db	00102$>>8
      000486s06                    1449 	.db	00104$>>8
      000487s06                    1450 	.db	00105$>>8
      000488s06                    1451 	.db	00106$>>8
      000489s07                    1452 	.db	00107$>>8
      00048As07                    1453 	.db	00108$>>8
      00048Bs07                    1454 	.db	00109$>>8
      00048Cs07                    1455 	.db	00110$>>8
      00048Ds0D                    1456 	.db	00139$>>8
      00048Es0D                    1457 	.db	00139$>>8
      00048Fs0D                    1458 	.db	00139$>>8
      000490s0D                    1459 	.db	00139$>>8
      000491s0D                    1460 	.db	00139$>>8
      000492s0D                    1461 	.db	00139$>>8
      000493s0D                    1462 	.db	00139$>>8
      000494s08                    1463 	.db	00111$>>8
      000495s02                    1464 	.db	00142$>>8
      000496s0C                    1465 	.db	00134$>>8
      000497s0C                    1466 	.db	00136$>>8
      000498s0C                    1467 	.db	00137$>>8
      000499s0C                    1468 	.db	00138$>>8
                                   1469 ;	main.c:106: case '1': {
      00049A                       1470 00101$:
                                   1471 ;	main.c:107: printf("Enter the register bank to select:\n\r");
      00049A 74r97            [12] 1472 	mov	a,#___str_18
      00049C C0 E0            [24] 1473 	push	acc
      00049E 74s01            [12] 1474 	mov	a,#(___str_18 >> 8)
      0004A0 C0 E0            [24] 1475 	push	acc
      0004A2 74 80            [12] 1476 	mov	a,#0x80
      0004A4 C0 E0            [24] 1477 	push	acc
      0004A6 12r00r00         [24] 1478 	lcall	_printf
      0004A9 15 81            [12] 1479 	dec	sp
      0004AB 15 81            [12] 1480 	dec	sp
      0004AD 15 81            [12] 1481 	dec	sp
                                   1482 ;	main.c:108: uint8_t reg_bank = get_user_buffer_size();
      0004AF 12r01rBA         [24] 1483 	lcall	_get_user_buffer_size
      0004B2 AE 82            [24] 1484 	mov	r6, dpl
                                   1485 ;	main.c:109: printf("Enter the address of the Control Register:\n\r");
      0004B4 C0 06            [24] 1486 	push	ar6
      0004B6 74rBC            [12] 1487 	mov	a,#___str_19
      0004B8 C0 E0            [24] 1488 	push	acc
      0004BA 74s01            [12] 1489 	mov	a,#(___str_19 >> 8)
      0004BC C0 E0            [24] 1490 	push	acc
      0004BE 74 80            [12] 1491 	mov	a,#0x80
      0004C0 C0 E0            [24] 1492 	push	acc
      0004C2 12r00r00         [24] 1493 	lcall	_printf
      0004C5 15 81            [12] 1494 	dec	sp
      0004C7 15 81            [12] 1495 	dec	sp
      0004C9 15 81            [12] 1496 	dec	sp
                                   1497 ;	main.c:110: uint8_t addr = get_user_buffer_size();
      0004CB 12r01rBA         [24] 1498 	lcall	_get_user_buffer_size
      0004CE AD 82            [24] 1499 	mov	r5, dpl
                                   1500 ;	main.c:111: printf("Enter the data you want to write:\n\r");
      0004D0 C0 05            [24] 1501 	push	ar5
      0004D2 74rE9            [12] 1502 	mov	a,#___str_20
      0004D4 C0 E0            [24] 1503 	push	acc
      0004D6 74s01            [12] 1504 	mov	a,#(___str_20 >> 8)
      0004D8 C0 E0            [24] 1505 	push	acc
      0004DA 74 80            [12] 1506 	mov	a,#0x80
      0004DC C0 E0            [24] 1507 	push	acc
      0004DE 12r00r00         [24] 1508 	lcall	_printf
      0004E1 15 81            [12] 1509 	dec	sp
      0004E3 15 81            [12] 1510 	dec	sp
      0004E5 15 81            [12] 1511 	dec	sp
                                   1512 ;	main.c:112: uint8_t data = get_user_buffer_size();
      0004E7 12r01rBA         [24] 1513 	lcall	_get_user_buffer_size
      0004EA AC 82            [24] 1514 	mov	r4, dpl
      0004EC D0 05            [24] 1515 	pop	ar5
      0004EE D0 06            [24] 1516 	pop	ar6
                                   1517 ;	main.c:113: spi_control_write(reg_bank, addr, data);
      0004F0 90r00r00         [24] 1518 	mov	dptr,#_spi_control_write_PARM_2
      0004F3 ED               [12] 1519 	mov	a,r5
      0004F4 F0               [24] 1520 	movx	@dptr,a
      0004F5 90r00r00         [24] 1521 	mov	dptr,#_spi_control_write_PARM_3
      0004F8 EC               [12] 1522 	mov	a,r4
      0004F9 F0               [24] 1523 	movx	@dptr,a
      0004FA 8E 82            [24] 1524 	mov	dpl, r6
      0004FC 12r00r00         [24] 1525 	lcall	_spi_control_write
                                   1526 ;	main.c:114: break;
      0004FF 02r02rD4         [24] 1527 	ljmp	00142$
                                   1528 ;	main.c:116: case '2': {
      000502                       1529 00102$:
                                   1530 ;	main.c:117: printf("Enter the number of bytes to write:\n\r");
      000502 74r0D            [12] 1531 	mov	a,#___str_21
      000504 C0 E0            [24] 1532 	push	acc
      000506 74s02            [12] 1533 	mov	a,#(___str_21 >> 8)
      000508 C0 E0            [24] 1534 	push	acc
      00050A 74 80            [12] 1535 	mov	a,#0x80
      00050C C0 E0            [24] 1536 	push	acc
      00050E 12r00r00         [24] 1537 	lcall	_printf
      000511 15 81            [12] 1538 	dec	sp
      000513 15 81            [12] 1539 	dec	sp
      000515 15 81            [12] 1540 	dec	sp
                                   1541 ;	main.c:118: int num_bytes = get_user_buffer_size();
      000517 12r01rBA         [24] 1542 	lcall	_get_user_buffer_size
      00051A AE 82            [24] 1543 	mov	r6, dpl
      00051C AF 83            [24] 1544 	mov	r7, dph
                                   1545 ;	main.c:119: printf("Enter the starting address:\n\r");
      00051E C0 07            [24] 1546 	push	ar7
      000520 C0 06            [24] 1547 	push	ar6
      000522 74r33            [12] 1548 	mov	a,#___str_22
      000524 C0 E0            [24] 1549 	push	acc
      000526 74s02            [12] 1550 	mov	a,#(___str_22 >> 8)
      000528 C0 E0            [24] 1551 	push	acc
      00052A 74 80            [12] 1552 	mov	a,#0x80
      00052C C0 E0            [24] 1553 	push	acc
      00052E 12r00r00         [24] 1554 	lcall	_printf
      000531 15 81            [12] 1555 	dec	sp
      000533 15 81            [12] 1556 	dec	sp
      000535 15 81            [12] 1557 	dec	sp
                                   1558 ;	main.c:120: uint16_t start_address = get_user_buffer_size();
      000537 12r01rBA         [24] 1559 	lcall	_get_user_buffer_size
      00053A AC 82            [24] 1560 	mov	r4, dpl
      00053C AD 83            [24] 1561 	mov	r5, dph
      00053E D0 06            [24] 1562 	pop	ar6
      000540 D0 07            [24] 1563 	pop	ar7
                                   1564 ;	main.c:122: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      000542 C0 07            [24] 1565 	push	ar7
      000544 C0 06            [24] 1566 	push	ar6
      000546 C0 05            [24] 1567 	push	ar5
      000548 C0 04            [24] 1568 	push	ar4
      00054A C0 06            [24] 1569 	push	ar6
      00054C C0 07            [24] 1570 	push	ar7
      00054E 74r51            [12] 1571 	mov	a,#___str_23
      000550 C0 E0            [24] 1572 	push	acc
      000552 74s02            [12] 1573 	mov	a,#(___str_23 >> 8)
      000554 C0 E0            [24] 1574 	push	acc
      000556 74 80            [12] 1575 	mov	a,#0x80
      000558 C0 E0            [24] 1576 	push	acc
      00055A 12r00r00         [24] 1577 	lcall	_printf
      00055D E5 81            [12] 1578 	mov	a,sp
      00055F 24 FB            [12] 1579 	add	a,#0xfb
      000561 F5 81            [12] 1580 	mov	sp,a
      000563 D0 04            [24] 1581 	pop	ar4
      000565 D0 05            [24] 1582 	pop	ar5
      000567 D0 06            [24] 1583 	pop	ar6
      000569 D0 07            [24] 1584 	pop	ar7
                                   1585 ;	main.c:123: for (int i = 0; i < num_bytes; i++) {
      00056B 7A 00            [12] 1586 	mov	r2,#0x00
      00056D 7B 00            [12] 1587 	mov	r3,#0x00
      00056F                       1588 00145$:
      00056F C3               [12] 1589 	clr	c
      000570 EA               [12] 1590 	mov	a,r2
      000571 9E               [12] 1591 	subb	a,r6
      000572 EB               [12] 1592 	mov	a,r3
      000573 64 80            [12] 1593 	xrl	a,#0x80
      000575 8F F0            [24] 1594 	mov	b,r7
      000577 63 F0 80         [24] 1595 	xrl	b,#0x80
      00057A 95 F0            [12] 1596 	subb	a,b
      00057C 50 63            [24] 1597 	jnc	00103$
                                   1598 ;	main.c:124: printf("Byte %d: ", i);
      00057E C0 04            [24] 1599 	push	ar4
      000580 C0 05            [24] 1600 	push	ar5
      000582 C0 07            [24] 1601 	push	ar7
      000584 C0 06            [24] 1602 	push	ar6
      000586 C0 05            [24] 1603 	push	ar5
      000588 C0 04            [24] 1604 	push	ar4
      00058A C0 03            [24] 1605 	push	ar3
      00058C C0 02            [24] 1606 	push	ar2
      00058E C0 02            [24] 1607 	push	ar2
      000590 C0 03            [24] 1608 	push	ar3
      000592 74r74            [12] 1609 	mov	a,#___str_24
      000594 C0 E0            [24] 1610 	push	acc
      000596 74s02            [12] 1611 	mov	a,#(___str_24 >> 8)
      000598 C0 E0            [24] 1612 	push	acc
      00059A 74 80            [12] 1613 	mov	a,#0x80
      00059C C0 E0            [24] 1614 	push	acc
      00059E 12r00r00         [24] 1615 	lcall	_printf
      0005A1 E5 81            [12] 1616 	mov	a,sp
      0005A3 24 FB            [12] 1617 	add	a,#0xfb
      0005A5 F5 81            [12] 1618 	mov	sp,a
      0005A7 D0 02            [24] 1619 	pop	ar2
      0005A9 D0 03            [24] 1620 	pop	ar3
      0005AB D0 04            [24] 1621 	pop	ar4
      0005AD D0 05            [24] 1622 	pop	ar5
                                   1623 ;	main.c:125: buffer[i] = get_user_buffer_size();
      0005AF EA               [12] 1624 	mov	a,r2
      0005B0 24r25            [12] 1625 	add	a, #_main_buffer_40003_147
      0005B2 F8               [12] 1626 	mov	r0,a
      0005B3 EB               [12] 1627 	mov	a,r3
      0005B4 34s00            [12] 1628 	addc	a, #(_main_buffer_40003_147 >> 8)
      0005B6 F9               [12] 1629 	mov	r1,a
      0005B7 C0 03            [24] 1630 	push	ar3
      0005B9 C0 02            [24] 1631 	push	ar2
      0005BB C0 01            [24] 1632 	push	ar1
      0005BD C0 00            [24] 1633 	push	ar0
      0005BF 12r01rBA         [24] 1634 	lcall	_get_user_buffer_size
      0005C2 AC 82            [24] 1635 	mov	r4, dpl
      0005C4 D0 00            [24] 1636 	pop	ar0
      0005C6 D0 01            [24] 1637 	pop	ar1
      0005C8 D0 02            [24] 1638 	pop	ar2
      0005CA D0 03            [24] 1639 	pop	ar3
      0005CC D0 06            [24] 1640 	pop	ar6
      0005CE D0 07            [24] 1641 	pop	ar7
      0005D0 88 82            [24] 1642 	mov	dpl,r0
      0005D2 89 83            [24] 1643 	mov	dph,r1
      0005D4 EC               [12] 1644 	mov	a,r4
      0005D5 F0               [24] 1645 	movx	@dptr,a
                                   1646 ;	main.c:123: for (int i = 0; i < num_bytes; i++) {
      0005D6 0A               [12] 1647 	inc	r2
      0005D7 BA 00 01         [24] 1648 	cjne	r2,#0x00,00256$
      0005DA 0B               [12] 1649 	inc	r3
      0005DB                       1650 00256$:
      0005DB D0 05            [24] 1651 	pop	ar5
      0005DD D0 04            [24] 1652 	pop	ar4
      0005DF 80 8E            [24] 1653 	sjmp	00145$
      0005E1                       1654 00103$:
                                   1655 ;	main.c:127: spi_buffer_write(num_bytes, start_address, buffer);
      0005E1 90r00r00         [24] 1656 	mov	dptr,#_spi_buffer_write_PARM_2
      0005E4 EC               [12] 1657 	mov	a,r4
      0005E5 F0               [24] 1658 	movx	@dptr,a
      0005E6 ED               [12] 1659 	mov	a,r5
      0005E7 A3               [24] 1660 	inc	dptr
      0005E8 F0               [24] 1661 	movx	@dptr,a
      0005E9 90r00r00         [24] 1662 	mov	dptr,#_spi_buffer_write_PARM_3
      0005EC 74r25            [12] 1663 	mov	a,#_main_buffer_40003_147
      0005EE F0               [24] 1664 	movx	@dptr,a
      0005EF 74s00            [12] 1665 	mov	a,#(_main_buffer_40003_147 >> 8)
      0005F1 A3               [24] 1666 	inc	dptr
      0005F2 F0               [24] 1667 	movx	@dptr,a
      0005F3 E4               [12] 1668 	clr	a
      0005F4 A3               [24] 1669 	inc	dptr
      0005F5 F0               [24] 1670 	movx	@dptr,a
      0005F6 8E 82            [24] 1671 	mov	dpl, r6
      0005F8 8F 83            [24] 1672 	mov	dph, r7
      0005FA 12r00r00         [24] 1673 	lcall	_spi_buffer_write
                                   1674 ;	main.c:128: break;
      0005FD 02r02rD4         [24] 1675 	ljmp	00142$
                                   1676 ;	main.c:130: case '3': {
      000600                       1677 00104$:
                                   1678 ;	main.c:131: printf("Enter the number of bytes to read:\n\r");
      000600 74r7E            [12] 1679 	mov	a,#___str_25
      000602 C0 E0            [24] 1680 	push	acc
      000604 74s02            [12] 1681 	mov	a,#(___str_25 >> 8)
      000606 C0 E0            [24] 1682 	push	acc
      000608 74 80            [12] 1683 	mov	a,#0x80
      00060A C0 E0            [24] 1684 	push	acc
      00060C 12r00r00         [24] 1685 	lcall	_printf
      00060F 15 81            [12] 1686 	dec	sp
      000611 15 81            [12] 1687 	dec	sp
      000613 15 81            [12] 1688 	dec	sp
                                   1689 ;	main.c:132: int num_bytes = get_user_buffer_size();
      000615 12r01rBA         [24] 1690 	lcall	_get_user_buffer_size
      000618 AE 82            [24] 1691 	mov	r6, dpl
      00061A AF 83            [24] 1692 	mov	r7, dph
                                   1693 ;	main.c:133: printf("Enter the starting address:\n\r");
      00061C C0 07            [24] 1694 	push	ar7
      00061E C0 06            [24] 1695 	push	ar6
      000620 74r33            [12] 1696 	mov	a,#___str_22
      000622 C0 E0            [24] 1697 	push	acc
      000624 74s02            [12] 1698 	mov	a,#(___str_22 >> 8)
      000626 C0 E0            [24] 1699 	push	acc
      000628 74 80            [12] 1700 	mov	a,#0x80
      00062A C0 E0            [24] 1701 	push	acc
      00062C 12r00r00         [24] 1702 	lcall	_printf
      00062F 15 81            [12] 1703 	dec	sp
      000631 15 81            [12] 1704 	dec	sp
      000633 15 81            [12] 1705 	dec	sp
                                   1706 ;	main.c:134: uint16_t start_address = get_user_buffer_size();
      000635 12r01rBA         [24] 1707 	lcall	_get_user_buffer_size
      000638 AC 82            [24] 1708 	mov	r4, dpl
      00063A AD 83            [24] 1709 	mov	r5, dph
      00063C D0 06            [24] 1710 	pop	ar6
      00063E D0 07            [24] 1711 	pop	ar7
      000640 90r00r00         [24] 1712 	mov	dptr,#_spi_buffer_read_PARM_2
      000643 EC               [12] 1713 	mov	a,r4
      000644 F0               [24] 1714 	movx	@dptr,a
      000645 ED               [12] 1715 	mov	a,r5
      000646 A3               [24] 1716 	inc	dptr
      000647 F0               [24] 1717 	movx	@dptr,a
                                   1718 ;	main.c:136: spi_buffer_read(num_bytes, start_address, buffer);
      000648 90r00r00         [24] 1719 	mov	dptr,#_spi_buffer_read_PARM_3
      00064B 74r25            [12] 1720 	mov	a,#_main_buffer_40003_152
      00064D F0               [24] 1721 	movx	@dptr,a
      00064E 74s01            [12] 1722 	mov	a,#(_main_buffer_40003_152 >> 8)
      000650 A3               [24] 1723 	inc	dptr
      000651 F0               [24] 1724 	movx	@dptr,a
      000652 E4               [12] 1725 	clr	a
      000653 A3               [24] 1726 	inc	dptr
      000654 F0               [24] 1727 	movx	@dptr,a
      000655 8E 82            [24] 1728 	mov	dpl, r6
      000657 8F 83            [24] 1729 	mov	dph, r7
      000659 12r00r00         [24] 1730 	lcall	_spi_buffer_read
                                   1731 ;	main.c:137: break;
      00065C 02r02rD4         [24] 1732 	ljmp	00142$
                                   1733 ;	main.c:139: case '4': {
      00065F                       1734 00105$:
                                   1735 ;	main.c:140: printf("Enter the MAC register bank to select:\n\r");
      00065F 74rA3            [12] 1736 	mov	a,#___str_26
      000661 C0 E0            [24] 1737 	push	acc
      000663 74s02            [12] 1738 	mov	a,#(___str_26 >> 8)
      000665 C0 E0            [24] 1739 	push	acc
      000667 74 80            [12] 1740 	mov	a,#0x80
      000669 C0 E0            [24] 1741 	push	acc
      00066B 12r00r00         [24] 1742 	lcall	_printf
      00066E 15 81            [12] 1743 	dec	sp
      000670 15 81            [12] 1744 	dec	sp
      000672 15 81            [12] 1745 	dec	sp
                                   1746 ;	main.c:141: uint8_t reg_bank = get_user_buffer_size();
      000674 12r01rBA         [24] 1747 	lcall	_get_user_buffer_size
      000677 AE 82            [24] 1748 	mov	r6, dpl
                                   1749 ;	main.c:142: printf("Enter the address of the MAC Register:\n\r");
      000679 C0 06            [24] 1750 	push	ar6
      00067B 74rCC            [12] 1751 	mov	a,#___str_27
      00067D C0 E0            [24] 1752 	push	acc
      00067F 74s02            [12] 1753 	mov	a,#(___str_27 >> 8)
      000681 C0 E0            [24] 1754 	push	acc
      000683 74 80            [12] 1755 	mov	a,#0x80
      000685 C0 E0            [24] 1756 	push	acc
      000687 12r00r00         [24] 1757 	lcall	_printf
      00068A 15 81            [12] 1758 	dec	sp
      00068C 15 81            [12] 1759 	dec	sp
      00068E 15 81            [12] 1760 	dec	sp
                                   1761 ;	main.c:143: uint8_t addr = get_user_buffer_size();
      000690 12r01rBA         [24] 1762 	lcall	_get_user_buffer_size
      000693 AD 82            [24] 1763 	mov	r5, dpl
      000695 D0 06            [24] 1764 	pop	ar6
                                   1765 ;	main.c:144: uint8_t data = mac_spi_read(addr, reg_bank);
      000697 90r00r00         [24] 1766 	mov	dptr,#_mac_spi_read_PARM_2
      00069A EE               [12] 1767 	mov	a,r6
      00069B F0               [24] 1768 	movx	@dptr,a
      00069C 8D 82            [24] 1769 	mov	dpl, r5
      00069E 12r00r00         [24] 1770 	lcall	_mac_spi_read
      0006A1 AF 82            [24] 1771 	mov	r7, dpl
                                   1772 ;	main.c:145: printf("MAC Register Data: 0x%02X\n\r", data);
      0006A3 7E 00            [12] 1773 	mov	r6,#0x00
      0006A5 C0 07            [24] 1774 	push	ar7
      0006A7 C0 06            [24] 1775 	push	ar6
      0006A9 74rF5            [12] 1776 	mov	a,#___str_28
      0006AB C0 E0            [24] 1777 	push	acc
      0006AD 74s02            [12] 1778 	mov	a,#(___str_28 >> 8)
      0006AF C0 E0            [24] 1779 	push	acc
      0006B1 74 80            [12] 1780 	mov	a,#0x80
      0006B3 C0 E0            [24] 1781 	push	acc
      0006B5 12r00r00         [24] 1782 	lcall	_printf
      0006B8 E5 81            [12] 1783 	mov	a,sp
      0006BA 24 FB            [12] 1784 	add	a,#0xfb
      0006BC F5 81            [12] 1785 	mov	sp,a
                                   1786 ;	main.c:146: break;
      0006BE 02r02rD4         [24] 1787 	ljmp	00142$
                                   1788 ;	main.c:148: case '5': {
      0006C1                       1789 00106$:
                                   1790 ;	main.c:149: printf("Enter the PHY register address:\n\r");
      0006C1 74r11            [12] 1791 	mov	a,#___str_29
      0006C3 C0 E0            [24] 1792 	push	acc
      0006C5 74s03            [12] 1793 	mov	a,#(___str_29 >> 8)
      0006C7 C0 E0            [24] 1794 	push	acc
      0006C9 74 80            [12] 1795 	mov	a,#0x80
      0006CB C0 E0            [24] 1796 	push	acc
      0006CD 12r00r00         [24] 1797 	lcall	_printf
      0006D0 15 81            [12] 1798 	dec	sp
      0006D2 15 81            [12] 1799 	dec	sp
      0006D4 15 81            [12] 1800 	dec	sp
                                   1801 ;	main.c:150: uint8_t addr = get_user_buffer_size();
      0006D6 12r01rBA         [24] 1802 	lcall	_get_user_buffer_size
      0006D9 AE 82            [24] 1803 	mov	r6, dpl
                                   1804 ;	main.c:151: printf("Enter the 16-bit data to write:\n\r");
      0006DB C0 06            [24] 1805 	push	ar6
      0006DD 74r33            [12] 1806 	mov	a,#___str_30
      0006DF C0 E0            [24] 1807 	push	acc
      0006E1 74s03            [12] 1808 	mov	a,#(___str_30 >> 8)
      0006E3 C0 E0            [24] 1809 	push	acc
      0006E5 74 80            [12] 1810 	mov	a,#0x80
      0006E7 C0 E0            [24] 1811 	push	acc
      0006E9 12r00r00         [24] 1812 	lcall	_printf
      0006EC 15 81            [12] 1813 	dec	sp
      0006EE 15 81            [12] 1814 	dec	sp
      0006F0 15 81            [12] 1815 	dec	sp
                                   1816 ;	main.c:152: uint16_t data = get_user_buffer_size();
      0006F2 12r01rBA         [24] 1817 	lcall	_get_user_buffer_size
      0006F5 AD 82            [24] 1818 	mov	r5, dpl
      0006F7 AF 83            [24] 1819 	mov	r7, dph
      0006F9 D0 06            [24] 1820 	pop	ar6
                                   1821 ;	main.c:153: phy_spi_write(addr, data);
      0006FB 90r00r00         [24] 1822 	mov	dptr,#_phy_spi_write_PARM_2
      0006FE ED               [12] 1823 	mov	a,r5
      0006FF F0               [24] 1824 	movx	@dptr,a
      000700 EF               [12] 1825 	mov	a,r7
      000701 A3               [24] 1826 	inc	dptr
      000702 F0               [24] 1827 	movx	@dptr,a
      000703 8E 82            [24] 1828 	mov	dpl, r6
      000705 C0 07            [24] 1829 	push	ar7
      000707 C0 05            [24] 1830 	push	ar5
      000709 12r00r00         [24] 1831 	lcall	_phy_spi_write
      00070C D0 05            [24] 1832 	pop	ar5
      00070E D0 07            [24] 1833 	pop	ar7
                                   1834 ;	main.c:154: printf("PHY Write Data: 0x%04X\n\r", data);
      000710 C0 05            [24] 1835 	push	ar5
      000712 C0 07            [24] 1836 	push	ar7
      000714 74r55            [12] 1837 	mov	a,#___str_31
      000716 C0 E0            [24] 1838 	push	acc
      000718 74s03            [12] 1839 	mov	a,#(___str_31 >> 8)
      00071A C0 E0            [24] 1840 	push	acc
      00071C 74 80            [12] 1841 	mov	a,#0x80
      00071E C0 E0            [24] 1842 	push	acc
      000720 12r00r00         [24] 1843 	lcall	_printf
      000723 E5 81            [12] 1844 	mov	a,sp
      000725 24 FB            [12] 1845 	add	a,#0xfb
      000727 F5 81            [12] 1846 	mov	sp,a
                                   1847 ;	main.c:155: break;
      000729 02r02rD4         [24] 1848 	ljmp	00142$
                                   1849 ;	main.c:157: case '6': {
      00072C                       1850 00107$:
                                   1851 ;	main.c:158: printf("Enter the PHY register address to read:\n\r");
      00072C 74r6E            [12] 1852 	mov	a,#___str_32
      00072E C0 E0            [24] 1853 	push	acc
      000730 74s03            [12] 1854 	mov	a,#(___str_32 >> 8)
      000732 C0 E0            [24] 1855 	push	acc
      000734 74 80            [12] 1856 	mov	a,#0x80
      000736 C0 E0            [24] 1857 	push	acc
      000738 12r00r00         [24] 1858 	lcall	_printf
      00073B 15 81            [12] 1859 	dec	sp
      00073D 15 81            [12] 1860 	dec	sp
      00073F 15 81            [12] 1861 	dec	sp
                                   1862 ;	main.c:159: uint8_t addr = get_user_buffer_size();
      000741 12r01rBA         [24] 1863 	lcall	_get_user_buffer_size
                                   1864 ;	main.c:160: uint16_t data = phy_spi_read(addr);
      000744 12r00r00         [24] 1865 	lcall	_phy_spi_read
      000747 AE 82            [24] 1866 	mov	r6, dpl
      000749 AF 83            [24] 1867 	mov	r7, dph
                                   1868 ;	main.c:161: printf("PHY Read Data: 0x%04X\n\r", data);
      00074B C0 06            [24] 1869 	push	ar6
      00074D C0 07            [24] 1870 	push	ar7
      00074F 74r98            [12] 1871 	mov	a,#___str_33
      000751 C0 E0            [24] 1872 	push	acc
      000753 74s03            [12] 1873 	mov	a,#(___str_33 >> 8)
      000755 C0 E0            [24] 1874 	push	acc
      000757 74 80            [12] 1875 	mov	a,#0x80
      000759 C0 E0            [24] 1876 	push	acc
      00075B 12r00r00         [24] 1877 	lcall	_printf
      00075E E5 81            [12] 1878 	mov	a,sp
      000760 24 FB            [12] 1879 	add	a,#0xfb
      000762 F5 81            [12] 1880 	mov	sp,a
                                   1881 ;	main.c:162: break;
      000764 02r02rD4         [24] 1882 	ljmp	00142$
                                   1883 ;	main.c:164: case '7': {
      000767                       1884 00108$:
                                   1885 ;	main.c:165: printf("Resetting ENC28J60...\n\r");
      000767 74rB0            [12] 1886 	mov	a,#___str_34
      000769 C0 E0            [24] 1887 	push	acc
      00076B 74s03            [12] 1888 	mov	a,#(___str_34 >> 8)
      00076D C0 E0            [24] 1889 	push	acc
      00076F 74 80            [12] 1890 	mov	a,#0x80
      000771 C0 E0            [24] 1891 	push	acc
      000773 12r00r00         [24] 1892 	lcall	_printf
      000776 15 81            [12] 1893 	dec	sp
      000778 15 81            [12] 1894 	dec	sp
      00077A 15 81            [12] 1895 	dec	sp
                                   1896 ;	main.c:166: enc_reset();
      00077C 12r00r00         [24] 1897 	lcall	_enc_reset
                                   1898 ;	main.c:167: break;
      00077F 02r02rD4         [24] 1899 	ljmp	00142$
                                   1900 ;	main.c:169: case '8': {
      000782                       1901 00109$:
                                   1902 ;	main.c:170: printf("Enter the ETH register address to read:\n\r");
      000782 74rC8            [12] 1903 	mov	a,#___str_35
      000784 C0 E0            [24] 1904 	push	acc
      000786 74s03            [12] 1905 	mov	a,#(___str_35 >> 8)
      000788 C0 E0            [24] 1906 	push	acc
      00078A 74 80            [12] 1907 	mov	a,#0x80
      00078C C0 E0            [24] 1908 	push	acc
      00078E 12r00r00         [24] 1909 	lcall	_printf
      000791 15 81            [12] 1910 	dec	sp
      000793 15 81            [12] 1911 	dec	sp
      000795 15 81            [12] 1912 	dec	sp
                                   1913 ;	main.c:171: uint8_t addr = get_user_buffer_size();
      000797 12r01rBA         [24] 1914 	lcall	_get_user_buffer_size
      00079A AE 82            [24] 1915 	mov	r6, dpl
                                   1916 ;	main.c:172: printf("Enter the bank (0 or 1):\n\r");
      00079C C0 06            [24] 1917 	push	ar6
      00079E 74rF2            [12] 1918 	mov	a,#___str_36
      0007A0 C0 E0            [24] 1919 	push	acc
      0007A2 74s03            [12] 1920 	mov	a,#(___str_36 >> 8)
      0007A4 C0 E0            [24] 1921 	push	acc
      0007A6 74 80            [12] 1922 	mov	a,#0x80
      0007A8 C0 E0            [24] 1923 	push	acc
      0007AA 12r00r00         [24] 1924 	lcall	_printf
      0007AD 15 81            [12] 1925 	dec	sp
      0007AF 15 81            [12] 1926 	dec	sp
      0007B1 15 81            [12] 1927 	dec	sp
                                   1928 ;	main.c:173: uint8_t bank = get_user_buffer_size();
      0007B3 12r01rBA         [24] 1929 	lcall	_get_user_buffer_size
      0007B6 AD 82            [24] 1930 	mov	r5, dpl
      0007B8 D0 06            [24] 1931 	pop	ar6
      0007BA 90r00r00         [24] 1932 	mov	dptr,#_eth_spi_read_PARM_2
      0007BD ED               [12] 1933 	mov	a,r5
      0007BE F0               [24] 1934 	movx	@dptr,a
                                   1935 ;	main.c:174: uint8_t data = eth_spi_read(addr, bank);
      0007BF 8E 82            [24] 1936 	mov	dpl, r6
      0007C1 12r00r00         [24] 1937 	lcall	_eth_spi_read
      0007C4 AF 82            [24] 1938 	mov	r7, dpl
                                   1939 ;	main.c:175: printf("ETH Register Data: 0x%02X\n\r", data);
      0007C6 7E 00            [12] 1940 	mov	r6,#0x00
      0007C8 C0 07            [24] 1941 	push	ar7
      0007CA C0 06            [24] 1942 	push	ar6
      0007CC 74r0D            [12] 1943 	mov	a,#___str_37
      0007CE C0 E0            [24] 1944 	push	acc
      0007D0 74s04            [12] 1945 	mov	a,#(___str_37 >> 8)
      0007D2 C0 E0            [24] 1946 	push	acc
      0007D4 74 80            [12] 1947 	mov	a,#0x80
      0007D6 C0 E0            [24] 1948 	push	acc
      0007D8 12r00r00         [24] 1949 	lcall	_printf
      0007DB E5 81            [12] 1950 	mov	a,sp
      0007DD 24 FB            [12] 1951 	add	a,#0xfb
      0007DF F5 81            [12] 1952 	mov	sp,a
                                   1953 ;	main.c:176: break;
      0007E1 02r02rD4         [24] 1954 	ljmp	00142$
                                   1955 ;	main.c:178: case '9': {
      0007E4                       1956 00110$:
                                   1957 ;	main.c:179: printf("\n\rChoose an action: \n\r");
      0007E4 74r1C            [12] 1958 	mov	a,#___str_2
      0007E6 C0 E0            [24] 1959 	push	acc
      0007E8 74s00            [12] 1960 	mov	a,#(___str_2 >> 8)
      0007EA C0 E0            [24] 1961 	push	acc
      0007EC 74 80            [12] 1962 	mov	a,#0x80
      0007EE C0 E0            [24] 1963 	push	acc
      0007F0 12r00r00         [24] 1964 	lcall	_printf
      0007F3 15 81            [12] 1965 	dec	sp
      0007F5 15 81            [12] 1966 	dec	sp
      0007F7 15 81            [12] 1967 	dec	sp
                                   1968 ;	main.c:180: printf("1 --> Control Write\n\r");
      0007F9 74r33            [12] 1969 	mov	a,#___str_3
      0007FB C0 E0            [24] 1970 	push	acc
      0007FD 74s00            [12] 1971 	mov	a,#(___str_3 >> 8)
      0007FF C0 E0            [24] 1972 	push	acc
      000801 74 80            [12] 1973 	mov	a,#0x80
      000803 C0 E0            [24] 1974 	push	acc
      000805 12r00r00         [24] 1975 	lcall	_printf
      000808 15 81            [12] 1976 	dec	sp
      00080A 15 81            [12] 1977 	dec	sp
      00080C 15 81            [12] 1978 	dec	sp
                                   1979 ;	main.c:181: printf("2 --> Buffer Write\n\r");
      00080E 74r49            [12] 1980 	mov	a,#___str_4
      000810 C0 E0            [24] 1981 	push	acc
      000812 74s00            [12] 1982 	mov	a,#(___str_4 >> 8)
      000814 C0 E0            [24] 1983 	push	acc
      000816 74 80            [12] 1984 	mov	a,#0x80
      000818 C0 E0            [24] 1985 	push	acc
      00081A 12r00r00         [24] 1986 	lcall	_printf
      00081D 15 81            [12] 1987 	dec	sp
      00081F 15 81            [12] 1988 	dec	sp
      000821 15 81            [12] 1989 	dec	sp
                                   1990 ;	main.c:182: printf("3 --> Buffer Read\n\r");
      000823 74r5E            [12] 1991 	mov	a,#___str_5
      000825 C0 E0            [24] 1992 	push	acc
      000827 74s00            [12] 1993 	mov	a,#(___str_5 >> 8)
      000829 C0 E0            [24] 1994 	push	acc
      00082B 74 80            [12] 1995 	mov	a,#0x80
      00082D C0 E0            [24] 1996 	push	acc
      00082F 12r00r00         [24] 1997 	lcall	_printf
      000832 15 81            [12] 1998 	dec	sp
      000834 15 81            [12] 1999 	dec	sp
      000836 15 81            [12] 2000 	dec	sp
                                   2001 ;	main.c:183: printf("4 --> MAC Register Read\n\r");
      000838 74r72            [12] 2002 	mov	a,#___str_6
      00083A C0 E0            [24] 2003 	push	acc
      00083C 74s00            [12] 2004 	mov	a,#(___str_6 >> 8)
      00083E C0 E0            [24] 2005 	push	acc
      000840 74 80            [12] 2006 	mov	a,#0x80
      000842 C0 E0            [24] 2007 	push	acc
      000844 12r00r00         [24] 2008 	lcall	_printf
      000847 15 81            [12] 2009 	dec	sp
      000849 15 81            [12] 2010 	dec	sp
      00084B 15 81            [12] 2011 	dec	sp
                                   2012 ;	main.c:184: printf("5 --> PHY SPI Write\n\r");
      00084D 74r8C            [12] 2013 	mov	a,#___str_7
      00084F C0 E0            [24] 2014 	push	acc
      000851 74s00            [12] 2015 	mov	a,#(___str_7 >> 8)
      000853 C0 E0            [24] 2016 	push	acc
      000855 74 80            [12] 2017 	mov	a,#0x80
      000857 C0 E0            [24] 2018 	push	acc
      000859 12r00r00         [24] 2019 	lcall	_printf
      00085C 15 81            [12] 2020 	dec	sp
      00085E 15 81            [12] 2021 	dec	sp
      000860 15 81            [12] 2022 	dec	sp
                                   2023 ;	main.c:185: printf("6 --> PHY SPI Read\n\r");
      000862 74rA2            [12] 2024 	mov	a,#___str_8
      000864 C0 E0            [24] 2025 	push	acc
      000866 74s00            [12] 2026 	mov	a,#(___str_8 >> 8)
      000868 C0 E0            [24] 2027 	push	acc
      00086A 74 80            [12] 2028 	mov	a,#0x80
      00086C C0 E0            [24] 2029 	push	acc
      00086E 12r00r00         [24] 2030 	lcall	_printf
      000871 15 81            [12] 2031 	dec	sp
      000873 15 81            [12] 2032 	dec	sp
      000875 15 81            [12] 2033 	dec	sp
                                   2034 ;	main.c:186: printf("7 --> ENC Reset\n\r");
      000877 74rB7            [12] 2035 	mov	a,#___str_9
      000879 C0 E0            [24] 2036 	push	acc
      00087B 74s00            [12] 2037 	mov	a,#(___str_9 >> 8)
      00087D C0 E0            [24] 2038 	push	acc
      00087F 74 80            [12] 2039 	mov	a,#0x80
      000881 C0 E0            [24] 2040 	push	acc
      000883 12r00r00         [24] 2041 	lcall	_printf
      000886 15 81            [12] 2042 	dec	sp
      000888 15 81            [12] 2043 	dec	sp
      00088A 15 81            [12] 2044 	dec	sp
                                   2045 ;	main.c:187: printf("8 --> Read ETH Register\n\r");
      00088C 74rC9            [12] 2046 	mov	a,#___str_10
      00088E C0 E0            [24] 2047 	push	acc
      000890 74s00            [12] 2048 	mov	a,#(___str_10 >> 8)
      000892 C0 E0            [24] 2049 	push	acc
      000894 74 80            [12] 2050 	mov	a,#0x80
      000896 C0 E0            [24] 2051 	push	acc
      000898 12r00r00         [24] 2052 	lcall	_printf
      00089B 15 81            [12] 2053 	dec	sp
      00089D 15 81            [12] 2054 	dec	sp
      00089F 15 81            [12] 2055 	dec	sp
                                   2056 ;	main.c:188: break;
      0008A1 02r02rD4         [24] 2057 	ljmp	00142$
                                   2058 ;	main.c:190: case 'A':{
      0008A4                       2059 00111$:
                                   2060 ;	main.c:191: send_arp_request();
      0008A4 12r00r00         [24] 2061 	lcall	_send_arp_request
                                   2062 ;	main.c:192: while(1)
      0008A7                       2063 00131$:
                                   2064 ;	main.c:194: if(ENC_pkt_count() > 0)
      0008A7 12r00r00         [24] 2065 	lcall	_ENC_pkt_count
      0008AA E5 82            [12] 2066 	mov	a, dpl
      0008AC 60 F9            [24] 2067 	jz	00131$
                                   2068 ;	main.c:201: if (gNextPacketPtr == 0)
      0008AE 90r02r25         [24] 2069 	mov	dptr,#_main_gNextPacketPtr_60001_168
      0008B1 E0               [24] 2070 	movx	a,@dptr
      0008B2 FE               [12] 2071 	mov	r6,a
      0008B3 A3               [24] 2072 	inc	dptr
      0008B4 E0               [24] 2073 	movx	a,@dptr
      0008B5 FF               [12] 2074 	mov	r7,a
      0008B6 90r02r25         [24] 2075 	mov	dptr,#_main_gNextPacketPtr_60001_168
      0008B9 E0               [24] 2076 	movx	a,@dptr
      0008BA F5 F0            [12] 2077 	mov	b,a
      0008BC A3               [24] 2078 	inc	dptr
      0008BD E0               [24] 2079 	movx	a,@dptr
      0008BE 45 F0            [12] 2080 	orl	a,b
      0008C0 70 08            [24] 2081 	jnz	00113$
                                   2082 ;	main.c:203: update_ERXRDPT(RX_BUFFER_END);
      0008C2 90 0B FF         [24] 2083 	mov	dptr,#0x0bff
      0008C5 12r00r00         [24] 2084 	lcall	_update_ERXRDPT
      0008C8 80 0C            [24] 2085 	sjmp	00114$
      0008CA                       2086 00113$:
                                   2087 ;	main.c:207: update_ERXRDPT(gNextPacketPtr - 1);
      0008CA 1E               [12] 2088 	dec	r6
      0008CB BE FF 01         [24] 2089 	cjne	r6,#0xff,00259$
      0008CE 1F               [12] 2090 	dec	r7
      0008CF                       2091 00259$:
      0008CF 8E 82            [24] 2092 	mov	dpl, r6
      0008D1 8F 83            [24] 2093 	mov	dph, r7
      0008D3 12r00r00         [24] 2094 	lcall	_update_ERXRDPT
      0008D6                       2095 00114$:
                                   2096 ;	main.c:209: uint8_t *packet_data = (uint8_t *)malloc(6);
      0008D6 90 00 06         [24] 2097 	mov	dptr,#0x0006
      0008D9 12r00r00         [24] 2098 	lcall	_malloc
      0008DC AE 82            [24] 2099 	mov	r6, dpl
      0008DE AD 83            [24] 2100 	mov	r5,dph
      0008E0 7F 00            [12] 2101 	mov	r7,#0x00
                                   2102 ;	main.c:210: spi_buffer_read(6, gNextPacketPtr, packet_data);
      0008E2 90r02r25         [24] 2103 	mov	dptr,#_main_gNextPacketPtr_60001_168
      0008E5 E0               [24] 2104 	movx	a,@dptr
      0008E6 FB               [12] 2105 	mov	r3,a
      0008E7 A3               [24] 2106 	inc	dptr
      0008E8 E0               [24] 2107 	movx	a,@dptr
      0008E9 FC               [12] 2108 	mov	r4,a
      0008EA 90r00r00         [24] 2109 	mov	dptr,#_spi_buffer_read_PARM_2
      0008ED EB               [12] 2110 	mov	a,r3
      0008EE F0               [24] 2111 	movx	@dptr,a
      0008EF EC               [12] 2112 	mov	a,r4
      0008F0 A3               [24] 2113 	inc	dptr
      0008F1 F0               [24] 2114 	movx	@dptr,a
      0008F2 90r00r00         [24] 2115 	mov	dptr,#_spi_buffer_read_PARM_3
      0008F5 EE               [12] 2116 	mov	a,r6
      0008F6 F0               [24] 2117 	movx	@dptr,a
      0008F7 ED               [12] 2118 	mov	a,r5
      0008F8 A3               [24] 2119 	inc	dptr
      0008F9 F0               [24] 2120 	movx	@dptr,a
      0008FA EF               [12] 2121 	mov	a,r7
      0008FB A3               [24] 2122 	inc	dptr
      0008FC F0               [24] 2123 	movx	@dptr,a
      0008FD 90 00 06         [24] 2124 	mov	dptr,#0x0006
      000900 C0 07            [24] 2125 	push	ar7
      000902 C0 06            [24] 2126 	push	ar6
      000904 C0 05            [24] 2127 	push	ar5
      000906 12r00r00         [24] 2128 	lcall	_spi_buffer_read
      000909 D0 05            [24] 2129 	pop	ar5
      00090B D0 06            [24] 2130 	pop	ar6
      00090D D0 07            [24] 2131 	pop	ar7
                                   2132 ;	main.c:214: nextPacket = (uint16_t)(packet_data[1] << 8 | packet_data[0]); // Next Packet (MSB, LSB)
      00090F 74 01            [12] 2133 	mov	a,#0x01
      000911 2E               [12] 2134 	add	a, r6
      000912 FA               [12] 2135 	mov	r2,a
      000913 E4               [12] 2136 	clr	a
      000914 3D               [12] 2137 	addc	a, r5
      000915 FB               [12] 2138 	mov	r3,a
      000916 8F 04            [24] 2139 	mov	ar4,r7
      000918 8A 82            [24] 2140 	mov	dpl,r2
      00091A 8B 83            [24] 2141 	mov	dph,r3
      00091C 8C F0            [24] 2142 	mov	b,r4
      00091E 12r00r00         [24] 2143 	lcall	__gptrget
      000921 FC               [12] 2144 	mov	r4,a
      000922 7A 00            [12] 2145 	mov	r2,#0x00
      000924 8E 82            [24] 2146 	mov	dpl,r6
      000926 8D 83            [24] 2147 	mov	dph,r5
      000928 8F F0            [24] 2148 	mov	b,r7
      00092A 12r00r00         [24] 2149 	lcall	__gptrget
      00092D 7B 00            [12] 2150 	mov	r3,#0x00
      00092F 42 02            [12] 2151 	orl	ar2,a
      000931 EB               [12] 2152 	mov	a,r3
      000932 42 04            [12] 2153 	orl	ar4,a
      000934 8A*08            [24] 2154 	mov	_main_sloc4_1_0,r2
      000936 8C*09            [24] 2155 	mov	(_main_sloc4_1_0 + 1),r4
                                   2156 ;	main.c:215: byteCount = (uint16_t)(packet_data[3] << 8 | packet_data[2]);  // Byte Count (MSB, LSB)
      000938 74 03            [12] 2157 	mov	a,#0x03
      00093A 2E               [12] 2158 	add	a, r6
      00093B F8               [12] 2159 	mov	r0,a
      00093C E4               [12] 2160 	clr	a
      00093D 3D               [12] 2161 	addc	a, r5
      00093E F9               [12] 2162 	mov	r1,a
      00093F 8F 03            [24] 2163 	mov	ar3,r7
      000941 88 82            [24] 2164 	mov	dpl,r0
      000943 89 83            [24] 2165 	mov	dph,r1
      000945 8B F0            [24] 2166 	mov	b,r3
      000947 12r00r00         [24] 2167 	lcall	__gptrget
      00094A F8               [12] 2168 	mov	r0,a
      00094B 7B 00            [12] 2169 	mov	r3,#0x00
      00094D 88*01            [24] 2170 	mov	(_main_sloc0_1_0 + 1),r0
      00094F 8B*00            [24] 2171 	mov	_main_sloc0_1_0,r3
      000951 74 02            [12] 2172 	mov	a,#0x02
      000953 2E               [12] 2173 	add	a, r6
      000954 F8               [12] 2174 	mov	r0,a
      000955 E4               [12] 2175 	clr	a
      000956 3D               [12] 2176 	addc	a, r5
      000957 F9               [12] 2177 	mov	r1,a
      000958 8F 03            [24] 2178 	mov	ar3,r7
      00095A 88 82            [24] 2179 	mov	dpl,r0
      00095C 89 83            [24] 2180 	mov	dph,r1
      00095E 8B F0            [24] 2181 	mov	b,r3
      000960 12r00r00         [24] 2182 	lcall	__gptrget
      000963 F8               [12] 2183 	mov	r0,a
      000964 7B 00            [12] 2184 	mov	r3,#0x00
      000966 E5*01            [12] 2185 	mov	a,(_main_sloc0_1_0 + 1)
      000968 42 03            [12] 2186 	orl	ar3,a
      00096A 88*00            [24] 2187 	mov	_main_sloc0_1_0,r0
      00096C 8B*01            [24] 2188 	mov	(_main_sloc0_1_0 + 1),r3
                                   2189 ;	main.c:216: status = (uint16_t)(packet_data[5] << 8 | packet_data[4]);     // Status (MSB, LSB)
      00096E 74 05            [12] 2190 	mov	a,#0x05
      000970 2E               [12] 2191 	add	a, r6
      000971 F8               [12] 2192 	mov	r0,a
      000972 E4               [12] 2193 	clr	a
      000973 3D               [12] 2194 	addc	a, r5
      000974 F9               [12] 2195 	mov	r1,a
      000975 8F 03            [24] 2196 	mov	ar3,r7
      000977 88 82            [24] 2197 	mov	dpl,r0
      000979 89 83            [24] 2198 	mov	dph,r1
      00097B 8B F0            [24] 2199 	mov	b,r3
      00097D 12r00r00         [24] 2200 	lcall	__gptrget
      000980 F8               [12] 2201 	mov	r0,a
      000981 7B 00            [12] 2202 	mov	r3,#0x00
      000983 88*03            [24] 2203 	mov	(_main_sloc1_1_0 + 1),r0
      000985 8B*02            [24] 2204 	mov	_main_sloc1_1_0,r3
      000987 74 04            [12] 2205 	mov	a,#0x04
      000989 2E               [12] 2206 	add	a, r6
      00098A F8               [12] 2207 	mov	r0,a
      00098B E4               [12] 2208 	clr	a
      00098C 3D               [12] 2209 	addc	a, r5
      00098D F9               [12] 2210 	mov	r1,a
      00098E 8F 03            [24] 2211 	mov	ar3,r7
      000990 88 82            [24] 2212 	mov	dpl,r0
      000992 89 83            [24] 2213 	mov	dph,r1
      000994 8B F0            [24] 2214 	mov	b,r3
      000996 12r00r00         [24] 2215 	lcall	__gptrget
      000999 F8               [12] 2216 	mov	r0,a
      00099A 7B 00            [12] 2217 	mov	r3,#0x00
      00099C E5*03            [12] 2218 	mov	a,(_main_sloc1_1_0 + 1)
      00099E 42 03            [12] 2219 	orl	ar3,a
      0009A0 88*02            [24] 2220 	mov	_main_sloc1_1_0,r0
      0009A2 8B*03            [24] 2221 	mov	(_main_sloc1_1_0 + 1),r3
                                   2222 ;	main.c:219: len = byteCount - 4;
      0009A4 A9*00            [24] 2223 	mov	r1,_main_sloc0_1_0
      0009A6 AB*01            [24] 2224 	mov	r3,(_main_sloc0_1_0 + 1)
      0009A8 E9               [12] 2225 	mov	a,r1
      0009A9 24 FC            [12] 2226 	add	a,#0xfc
      0009AB F9               [12] 2227 	mov	r1,a
      0009AC EB               [12] 2228 	mov	a,r3
      0009AD 34 FF            [12] 2229 	addc	a,#0xff
      0009AF FB               [12] 2230 	mov	r3,a
      0009B0 89*06            [24] 2231 	mov	_main_sloc3_1_0,r1
      0009B2 8B*07            [24] 2232 	mov	(_main_sloc3_1_0 + 1),r3
                                   2233 ;	main.c:221: uint8_t *packet_data_actual = (uint8_t *)malloc(len);
      0009B4 85*06*04         [24] 2234 	mov	_main_sloc2_1_0,_main_sloc3_1_0
      0009B7 85*07*05         [24] 2235 	mov	(_main_sloc2_1_0 + 1),(_main_sloc3_1_0 + 1)
      0009BA 85*04 82         [24] 2236 	mov	dpl, _main_sloc2_1_0
      0009BD 85*05 83         [24] 2237 	mov	dph, (_main_sloc2_1_0 + 1)
      0009C0 C0 07            [24] 2238 	push	ar7
      0009C2 C0 06            [24] 2239 	push	ar6
      0009C4 C0 05            [24] 2240 	push	ar5
      0009C6 12r00r00         [24] 2241 	lcall	_malloc
      0009C9 A8 82            [24] 2242 	mov	r0, dpl
      0009CB AB 83            [24] 2243 	mov	r3, dph
      0009CD D0 05            [24] 2244 	pop	ar5
      0009CF D0 06            [24] 2245 	pop	ar6
      0009D1 D0 07            [24] 2246 	pop	ar7
      0009D3 88*0A            [24] 2247 	mov	_main_sloc5_1_0,r0
      0009D5 8B*0B            [24] 2248 	mov	(_main_sloc5_1_0 + 1),r3
      0009D7 75*0C 00         [24] 2249 	mov	(_main_sloc5_1_0 + 2),#0x00
                                   2250 ;	main.c:222: spi_buffer_read(len, gNextPacketPtr + 6, packet_data_actual);
      0009DA 90r02r25         [24] 2251 	mov	dptr,#_main_gNextPacketPtr_60001_168
      0009DD E0               [24] 2252 	movx	a,@dptr
      0009DE FA               [12] 2253 	mov	r2,a
      0009DF A3               [24] 2254 	inc	dptr
      0009E0 E0               [24] 2255 	movx	a,@dptr
      0009E1 FC               [12] 2256 	mov	r4,a
      0009E2 74 06            [12] 2257 	mov	a,#0x06
      0009E4 2A               [12] 2258 	add	a, r2
      0009E5 FA               [12] 2259 	mov	r2,a
      0009E6 E4               [12] 2260 	clr	a
      0009E7 3C               [12] 2261 	addc	a, r4
      0009E8 FC               [12] 2262 	mov	r4,a
      0009E9 90r00r00         [24] 2263 	mov	dptr,#_spi_buffer_read_PARM_2
      0009EC EA               [12] 2264 	mov	a,r2
      0009ED F0               [24] 2265 	movx	@dptr,a
      0009EE EC               [12] 2266 	mov	a,r4
      0009EF A3               [24] 2267 	inc	dptr
      0009F0 F0               [24] 2268 	movx	@dptr,a
      0009F1 90r00r00         [24] 2269 	mov	dptr,#_spi_buffer_read_PARM_3
      0009F4 E5*0A            [12] 2270 	mov	a,_main_sloc5_1_0
      0009F6 F0               [24] 2271 	movx	@dptr,a
      0009F7 E5*0B            [12] 2272 	mov	a,(_main_sloc5_1_0 + 1)
      0009F9 A3               [24] 2273 	inc	dptr
      0009FA F0               [24] 2274 	movx	@dptr,a
      0009FB E5*0C            [12] 2275 	mov	a,(_main_sloc5_1_0 + 2)
      0009FD A3               [24] 2276 	inc	dptr
      0009FE F0               [24] 2277 	movx	@dptr,a
      0009FF 85*06 82         [24] 2278 	mov	dpl, _main_sloc3_1_0
      000A02 85*07 83         [24] 2279 	mov	dph, (_main_sloc3_1_0 + 1)
      000A05 C0 07            [24] 2280 	push	ar7
      000A07 C0 06            [24] 2281 	push	ar6
      000A09 C0 05            [24] 2282 	push	ar5
      000A0B 12r00r00         [24] 2283 	lcall	_spi_buffer_read
                                   2284 ;	main.c:224: int is_tcp_for_target = 0;
      000A0E 90r02r27         [24] 2285 	mov	dptr,#_main_is_tcp_for_target_60004_173
      000A11 E4               [12] 2286 	clr	a
      000A12 F0               [24] 2287 	movx	@dptr,a
      000A13 A3               [24] 2288 	inc	dptr
      000A14 F0               [24] 2289 	movx	@dptr,a
                                   2290 ;	main.c:227: if (memcmp(packet_data_actual, device_mac, 6) == 0) {
      000A15 AA*0A            [24] 2291 	mov	r2,_main_sloc5_1_0
      000A17 AB*0B            [24] 2292 	mov	r3,(_main_sloc5_1_0 + 1)
      000A19 FC               [12] 2293 	mov	r4,a
      000A1A 90r00r00         [24] 2294 	mov	dptr,#_memcmp_PARM_2
      000A1D 74r11            [12] 2295 	mov	a,#_main_device_mac_10000_137
      000A1F F0               [24] 2296 	movx	@dptr,a
      000A20 74s00            [12] 2297 	mov	a,#(_main_device_mac_10000_137 >> 8)
      000A22 A3               [24] 2298 	inc	dptr
      000A23 F0               [24] 2299 	movx	@dptr,a
      000A24 E4               [12] 2300 	clr	a
      000A25 A3               [24] 2301 	inc	dptr
      000A26 F0               [24] 2302 	movx	@dptr,a
      000A27 90r00r00         [24] 2303 	mov	dptr,#_memcmp_PARM_3
      000A2A 74 06            [12] 2304 	mov	a,#0x06
      000A2C F0               [24] 2305 	movx	@dptr,a
      000A2D E4               [12] 2306 	clr	a
      000A2E A3               [24] 2307 	inc	dptr
      000A2F F0               [24] 2308 	movx	@dptr,a
      000A30 8A 82            [24] 2309 	mov	dpl, r2
      000A32 8B 83            [24] 2310 	mov	dph, r3
      000A34 8C F0            [24] 2311 	mov	b, r4
      000A36 12r00r00         [24] 2312 	lcall	_memcmp
      000A39 E5 82            [12] 2313 	mov	a, dpl
      000A3B 85 83 F0         [24] 2314 	mov	b, dph
      000A3E D0 05            [24] 2315 	pop	ar5
      000A40 D0 06            [24] 2316 	pop	ar6
      000A42 D0 07            [24] 2317 	pop	ar7
      000A44 45 F0            [12] 2318 	orl	a,b
      000A46 70 70            [24] 2319 	jnz	00121$
                                   2320 ;	main.c:230: if (packet_data_actual[12] == 0x08 && packet_data_actual[13] == 0x00) {
      000A48 74 0C            [12] 2321 	mov	a,#0x0c
      000A4A 25*0A            [12] 2322 	add	a, _main_sloc5_1_0
      000A4C FA               [12] 2323 	mov	r2,a
      000A4D E4               [12] 2324 	clr	a
      000A4E 35*0B            [12] 2325 	addc	a, (_main_sloc5_1_0 + 1)
      000A50 FB               [12] 2326 	mov	r3,a
      000A51 AC*0C            [24] 2327 	mov	r4,(_main_sloc5_1_0 + 2)
      000A53 8A 82            [24] 2328 	mov	dpl,r2
      000A55 8B 83            [24] 2329 	mov	dph,r3
      000A57 8C F0            [24] 2330 	mov	b,r4
      000A59 12r00r00         [24] 2331 	lcall	__gptrget
      000A5C FA               [12] 2332 	mov	r2,a
      000A5D BA 08 58         [24] 2333 	cjne	r2,#0x08,00121$
      000A60 74 0D            [12] 2334 	mov	a,#0x0d
      000A62 25*0A            [12] 2335 	add	a, _main_sloc5_1_0
      000A64 FA               [12] 2336 	mov	r2,a
      000A65 E4               [12] 2337 	clr	a
      000A66 35*0B            [12] 2338 	addc	a, (_main_sloc5_1_0 + 1)
      000A68 FB               [12] 2339 	mov	r3,a
      000A69 AC*0C            [24] 2340 	mov	r4,(_main_sloc5_1_0 + 2)
      000A6B 8A 82            [24] 2341 	mov	dpl,r2
      000A6D 8B 83            [24] 2342 	mov	dph,r3
      000A6F 8C F0            [24] 2343 	mov	b,r4
      000A71 12r00r00         [24] 2344 	lcall	__gptrget
      000A74 70 42            [24] 2345 	jnz	00121$
                                   2346 ;	main.c:231: printf("Valid ETHER packet.....................\n\r");
      000A76 C0 07            [24] 2347 	push	ar7
      000A78 C0 06            [24] 2348 	push	ar6
      000A7A C0 05            [24] 2349 	push	ar5
      000A7C 74r29            [12] 2350 	mov	a,#___str_38
      000A7E C0 E0            [24] 2351 	push	acc
      000A80 74s04            [12] 2352 	mov	a,#(___str_38 >> 8)
      000A82 C0 E0            [24] 2353 	push	acc
      000A84 74 80            [12] 2354 	mov	a,#0x80
      000A86 C0 E0            [24] 2355 	push	acc
      000A88 12r00r00         [24] 2356 	lcall	_printf
      000A8B 15 81            [12] 2357 	dec	sp
      000A8D 15 81            [12] 2358 	dec	sp
      000A8F 15 81            [12] 2359 	dec	sp
      000A91 D0 05            [24] 2360 	pop	ar5
      000A93 D0 06            [24] 2361 	pop	ar6
      000A95 D0 07            [24] 2362 	pop	ar7
                                   2363 ;	main.c:233: if (packet_data_actual[23] == 0x06) {
      000A97 74 17            [12] 2364 	mov	a,#0x17
      000A99 25*0A            [12] 2365 	add	a, _main_sloc5_1_0
      000A9B FA               [12] 2366 	mov	r2,a
      000A9C E4               [12] 2367 	clr	a
      000A9D 35*0B            [12] 2368 	addc	a, (_main_sloc5_1_0 + 1)
      000A9F FB               [12] 2369 	mov	r3,a
      000AA0 AC*0C            [24] 2370 	mov	r4,(_main_sloc5_1_0 + 2)
      000AA2 8A 82            [24] 2371 	mov	dpl,r2
      000AA4 8B 83            [24] 2372 	mov	dph,r3
      000AA6 8C F0            [24] 2373 	mov	b,r4
      000AA8 12r00r00         [24] 2374 	lcall	__gptrget
      000AAB FA               [12] 2375 	mov	r2,a
      000AAC BA 06 09         [24] 2376 	cjne	r2,#0x06,00121$
                                   2377 ;	main.c:234: is_tcp_for_target = 1;
      000AAF 90r02r27         [24] 2378 	mov	dptr,#_main_is_tcp_for_target_60004_173
      000AB2 74 01            [12] 2379 	mov	a,#0x01
      000AB4 F0               [24] 2380 	movx	@dptr,a
      000AB5 E4               [12] 2381 	clr	a
      000AB6 A3               [24] 2382 	inc	dptr
      000AB7 F0               [24] 2383 	movx	@dptr,a
      000AB8                       2384 00121$:
                                   2385 ;	main.c:238: if (is_tcp_for_target)
      000AB8 90r02r27         [24] 2386 	mov	dptr,#_main_is_tcp_for_target_60004_173
      000ABB E0               [24] 2387 	movx	a,@dptr
      000ABC F5 F0            [12] 2388 	mov	b,a
      000ABE A3               [24] 2389 	inc	dptr
      000ABF E0               [24] 2390 	movx	a,@dptr
      000AC0 45 F0            [12] 2391 	orl	a,b
      000AC2 70 03            [24] 2392 	jnz	00266$
      000AC4 02r0BrB4         [24] 2393 	ljmp	00126$
      000AC7                       2394 00266$:
                                   2395 ;	main.c:243: uint8_t *response = process_tcp_packet(packet_data_actual, len+4, &response_size);
      000AC7 74 04            [12] 2396 	mov	a,#0x04
      000AC9 25*04            [12] 2397 	add	a, _main_sloc2_1_0
      000ACB FB               [12] 2398 	mov	r3,a
      000ACC E4               [12] 2399 	clr	a
      000ACD 35*05            [12] 2400 	addc	a, (_main_sloc2_1_0 + 1)
      000ACF FC               [12] 2401 	mov	r4,a
      000AD0 90r00r00         [24] 2402 	mov	dptr,#_process_tcp_packet_PARM_2
      000AD3 EB               [12] 2403 	mov	a,r3
      000AD4 F0               [24] 2404 	movx	@dptr,a
      000AD5 EC               [12] 2405 	mov	a,r4
      000AD6 A3               [24] 2406 	inc	dptr
      000AD7 F0               [24] 2407 	movx	@dptr,a
      000AD8 90r00r00         [24] 2408 	mov	dptr,#_process_tcp_packet_PARM_3
      000ADB 74r29            [12] 2409 	mov	a,#_main_response_size_70004_177
      000ADD F0               [24] 2410 	movx	@dptr,a
      000ADE 74s02            [12] 2411 	mov	a,#(_main_response_size_70004_177 >> 8)
      000AE0 A3               [24] 2412 	inc	dptr
      000AE1 F0               [24] 2413 	movx	@dptr,a
      000AE2 E4               [12] 2414 	clr	a
      000AE3 A3               [24] 2415 	inc	dptr
      000AE4 F0               [24] 2416 	movx	@dptr,a
      000AE5 85*0A 82         [24] 2417 	mov	dpl, _main_sloc5_1_0
      000AE8 85*0B 83         [24] 2418 	mov	dph, (_main_sloc5_1_0 + 1)
      000AEB 85*0C F0         [24] 2419 	mov	b, (_main_sloc5_1_0 + 2)
      000AEE C0 07            [24] 2420 	push	ar7
      000AF0 C0 06            [24] 2421 	push	ar6
      000AF2 C0 05            [24] 2422 	push	ar5
      000AF4 12r00r00         [24] 2423 	lcall	_process_tcp_packet
      000AF7 AA 82            [24] 2424 	mov	r2, dpl
      000AF9 AB 83            [24] 2425 	mov	r3, dph
      000AFB AC F0            [24] 2426 	mov	r4, b
      000AFD D0 05            [24] 2427 	pop	ar5
      000AFF D0 06            [24] 2428 	pop	ar6
      000B01 D0 07            [24] 2429 	pop	ar7
                                   2430 ;	main.c:246: if (response != NULL) {
      000B03 EA               [12] 2431 	mov	a,r2
      000B04 4B               [12] 2432 	orl	a,r3
      000B05 60 69            [24] 2433 	jz	00123$
                                   2434 ;	main.c:247: printf("\nProcessed response data:\n");
      000B07 C0 07            [24] 2435 	push	ar7
      000B09 C0 06            [24] 2436 	push	ar6
      000B0B C0 05            [24] 2437 	push	ar5
      000B0D C0 04            [24] 2438 	push	ar4
      000B0F C0 03            [24] 2439 	push	ar3
      000B11 C0 02            [24] 2440 	push	ar2
      000B13 74r53            [12] 2441 	mov	a,#___str_39
      000B15 C0 E0            [24] 2442 	push	acc
      000B17 74s04            [12] 2443 	mov	a,#(___str_39 >> 8)
      000B19 C0 E0            [24] 2444 	push	acc
      000B1B 74 80            [12] 2445 	mov	a,#0x80
      000B1D C0 E0            [24] 2446 	push	acc
      000B1F 12r00r00         [24] 2447 	lcall	_printf
      000B22 15 81            [12] 2448 	dec	sp
      000B24 15 81            [12] 2449 	dec	sp
      000B26 15 81            [12] 2450 	dec	sp
      000B28 D0 02            [24] 2451 	pop	ar2
      000B2A D0 03            [24] 2452 	pop	ar3
      000B2C D0 04            [24] 2453 	pop	ar4
      000B2E D0 05            [24] 2454 	pop	ar5
      000B30 D0 06            [24] 2455 	pop	ar6
      000B32 D0 07            [24] 2456 	pop	ar7
                                   2457 ;	main.c:249: transmit_tcp_packet(response, response_size);
      000B34 90r02r29         [24] 2458 	mov	dptr,#_main_response_size_70004_177
      000B37 E0               [24] 2459 	movx	a,@dptr
      000B38 F8               [12] 2460 	mov	r0,a
      000B39 A3               [24] 2461 	inc	dptr
      000B3A E0               [24] 2462 	movx	a,@dptr
      000B3B F9               [12] 2463 	mov	r1,a
      000B3C 90r00r00         [24] 2464 	mov	dptr,#_transmit_tcp_packet_PARM_2
      000B3F E8               [12] 2465 	mov	a,r0
      000B40 F0               [24] 2466 	movx	@dptr,a
      000B41 E9               [12] 2467 	mov	a,r1
      000B42 A3               [24] 2468 	inc	dptr
      000B43 F0               [24] 2469 	movx	@dptr,a
      000B44 8A 82            [24] 2470 	mov	dpl, r2
      000B46 8B 83            [24] 2471 	mov	dph, r3
      000B48 8C F0            [24] 2472 	mov	b, r4
      000B4A C0 07            [24] 2473 	push	ar7
      000B4C C0 06            [24] 2474 	push	ar6
      000B4E C0 05            [24] 2475 	push	ar5
      000B50 C0 04            [24] 2476 	push	ar4
      000B52 C0 03            [24] 2477 	push	ar3
      000B54 C0 02            [24] 2478 	push	ar2
      000B56 12r00r00         [24] 2479 	lcall	_transmit_tcp_packet
      000B59 D0 02            [24] 2480 	pop	ar2
      000B5B D0 03            [24] 2481 	pop	ar3
      000B5D D0 04            [24] 2482 	pop	ar4
                                   2483 ;	main.c:250: free(response); // Free response memory if allocated dynamically
      000B5F 8A 82            [24] 2484 	mov	dpl, r2
      000B61 8B 83            [24] 2485 	mov	dph, r3
      000B63 8C F0            [24] 2486 	mov	b, r4
      000B65 12r00r00         [24] 2487 	lcall	_free
      000B68 D0 05            [24] 2488 	pop	ar5
      000B6A D0 06            [24] 2489 	pop	ar6
      000B6C D0 07            [24] 2490 	pop	ar7
      000B6E 80 21            [24] 2491 	sjmp	00124$
      000B70                       2492 00123$:
                                   2493 ;	main.c:252: printf("\nNo response generated by TCP packet processing.\n");
      000B70 C0 07            [24] 2494 	push	ar7
      000B72 C0 06            [24] 2495 	push	ar6
      000B74 C0 05            [24] 2496 	push	ar5
      000B76 74r6E            [12] 2497 	mov	a,#___str_40
      000B78 C0 E0            [24] 2498 	push	acc
      000B7A 74s04            [12] 2499 	mov	a,#(___str_40 >> 8)
      000B7C C0 E0            [24] 2500 	push	acc
      000B7E 74 80            [12] 2501 	mov	a,#0x80
      000B80 C0 E0            [24] 2502 	push	acc
      000B82 12r00r00         [24] 2503 	lcall	_printf
      000B85 15 81            [12] 2504 	dec	sp
      000B87 15 81            [12] 2505 	dec	sp
      000B89 15 81            [12] 2506 	dec	sp
      000B8B D0 05            [24] 2507 	pop	ar5
      000B8D D0 06            [24] 2508 	pop	ar6
      000B8F D0 07            [24] 2509 	pop	ar7
      000B91                       2510 00124$:
                                   2511 ;	main.c:255: printf("YESSSS\n");
      000B91 C0 07            [24] 2512 	push	ar7
      000B93 C0 06            [24] 2513 	push	ar6
      000B95 C0 05            [24] 2514 	push	ar5
      000B97 74rA0            [12] 2515 	mov	a,#___str_41
      000B99 C0 E0            [24] 2516 	push	acc
      000B9B 74s04            [12] 2517 	mov	a,#(___str_41 >> 8)
      000B9D C0 E0            [24] 2518 	push	acc
      000B9F 74 80            [12] 2519 	mov	a,#0x80
      000BA1 C0 E0            [24] 2520 	push	acc
      000BA3 12r00r00         [24] 2521 	lcall	_printf
      000BA6 15 81            [12] 2522 	dec	sp
      000BA8 15 81            [12] 2523 	dec	sp
      000BAA 15 81            [12] 2524 	dec	sp
      000BAC D0 05            [24] 2525 	pop	ar5
      000BAE D0 06            [24] 2526 	pop	ar6
      000BB0 D0 07            [24] 2527 	pop	ar7
      000BB2 80 21            [24] 2528 	sjmp	00127$
      000BB4                       2529 00126$:
                                   2530 ;	main.c:259: printf("NOOOO\n");
      000BB4 C0 07            [24] 2531 	push	ar7
      000BB6 C0 06            [24] 2532 	push	ar6
      000BB8 C0 05            [24] 2533 	push	ar5
      000BBA 74rA8            [12] 2534 	mov	a,#___str_42
      000BBC C0 E0            [24] 2535 	push	acc
      000BBE 74s04            [12] 2536 	mov	a,#(___str_42 >> 8)
      000BC0 C0 E0            [24] 2537 	push	acc
      000BC2 74 80            [12] 2538 	mov	a,#0x80
      000BC4 C0 E0            [24] 2539 	push	acc
      000BC6 12r00r00         [24] 2540 	lcall	_printf
      000BC9 15 81            [12] 2541 	dec	sp
      000BCB 15 81            [12] 2542 	dec	sp
      000BCD 15 81            [12] 2543 	dec	sp
      000BCF D0 05            [24] 2544 	pop	ar5
      000BD1 D0 06            [24] 2545 	pop	ar6
      000BD3 D0 07            [24] 2546 	pop	ar7
      000BD5                       2547 00127$:
                                   2548 ;	main.c:263: gNextPacketPtr = nextPacket;
      000BD5 90r02r25         [24] 2549 	mov	dptr,#_main_gNextPacketPtr_60001_168
      000BD8 E5*08            [12] 2550 	mov	a,_main_sloc4_1_0
      000BDA F0               [24] 2551 	movx	@dptr,a
      000BDB E5*09            [12] 2552 	mov	a,(_main_sloc4_1_0 + 1)
      000BDD A3               [24] 2553 	inc	dptr
      000BDE F0               [24] 2554 	movx	@dptr,a
                                   2555 ;	main.c:268: printf("nextPacket: 0x%04X\n", nextPacket);
      000BDF C0 07            [24] 2556 	push	ar7
      000BE1 C0 06            [24] 2557 	push	ar6
      000BE3 C0 05            [24] 2558 	push	ar5
      000BE5 C0*08            [24] 2559 	push	_main_sloc4_1_0
      000BE7 C0*09            [24] 2560 	push	(_main_sloc4_1_0 + 1)
      000BE9 74rAF            [12] 2561 	mov	a,#___str_43
      000BEB C0 E0            [24] 2562 	push	acc
      000BED 74s04            [12] 2563 	mov	a,#(___str_43 >> 8)
      000BEF C0 E0            [24] 2564 	push	acc
      000BF1 74 80            [12] 2565 	mov	a,#0x80
      000BF3 C0 E0            [24] 2566 	push	acc
      000BF5 12r00r00         [24] 2567 	lcall	_printf
      000BF8 E5 81            [12] 2568 	mov	a,sp
      000BFA 24 FB            [12] 2569 	add	a,#0xfb
      000BFC F5 81            [12] 2570 	mov	sp,a
                                   2571 ;	main.c:269: printf("byteCount: %d\n", byteCount);
      000BFE C0*00            [24] 2572 	push	_main_sloc0_1_0
      000C00 C0*01            [24] 2573 	push	(_main_sloc0_1_0 + 1)
      000C02 74rC3            [12] 2574 	mov	a,#___str_44
      000C04 C0 E0            [24] 2575 	push	acc
      000C06 74s04            [12] 2576 	mov	a,#(___str_44 >> 8)
      000C08 C0 E0            [24] 2577 	push	acc
      000C0A 74 80            [12] 2578 	mov	a,#0x80
      000C0C C0 E0            [24] 2579 	push	acc
      000C0E 12r00r00         [24] 2580 	lcall	_printf
      000C11 E5 81            [12] 2581 	mov	a,sp
      000C13 24 FB            [12] 2582 	add	a,#0xfb
      000C15 F5 81            [12] 2583 	mov	sp,a
                                   2584 ;	main.c:270: printf("status: 0x%02X\n", status);
      000C17 C0*02            [24] 2585 	push	_main_sloc1_1_0
      000C19 C0*03            [24] 2586 	push	(_main_sloc1_1_0 + 1)
      000C1B 74rD2            [12] 2587 	mov	a,#___str_45
      000C1D C0 E0            [24] 2588 	push	acc
      000C1F 74s04            [12] 2589 	mov	a,#(___str_45 >> 8)
      000C21 C0 E0            [24] 2590 	push	acc
      000C23 74 80            [12] 2591 	mov	a,#0x80
      000C25 C0 E0            [24] 2592 	push	acc
      000C27 12r00r00         [24] 2593 	lcall	_printf
      000C2A E5 81            [12] 2594 	mov	a,sp
      000C2C 24 FB            [12] 2595 	add	a,#0xfb
      000C2E F5 81            [12] 2596 	mov	sp,a
      000C30 D0 05            [24] 2597 	pop	ar5
      000C32 D0 06            [24] 2598 	pop	ar6
      000C34 D0 07            [24] 2599 	pop	ar7
                                   2600 ;	main.c:273: uint8_t read_econ2 = mac_spi_read(0x1E, 0); //mac enable for reception
      000C36 90r00r00         [24] 2601 	mov	dptr,#_mac_spi_read_PARM_2
      000C39 E4               [12] 2602 	clr	a
      000C3A F0               [24] 2603 	movx	@dptr,a
      000C3B 75 82 1E         [24] 2604 	mov	dpl, #0x1e
      000C3E C0 07            [24] 2605 	push	ar7
      000C40 C0 06            [24] 2606 	push	ar6
      000C42 C0 05            [24] 2607 	push	ar5
      000C44 12r00r00         [24] 2608 	lcall	_mac_spi_read
      000C47 E5 82            [12] 2609 	mov	a, dpl
      000C49 D0 05            [24] 2610 	pop	ar5
      000C4B D0 06            [24] 2611 	pop	ar6
      000C4D D0 07            [24] 2612 	pop	ar7
                                   2613 ;	main.c:274: spi_control_write(2, 0x1E, (read_econ2 | (1 << 6))); //mac enable for reception
      000C4F 44 40            [12] 2614 	orl	a,#0x40
      000C51 FC               [12] 2615 	mov	r4,a
      000C52 90r00r00         [24] 2616 	mov	dptr,#_spi_control_write_PARM_2
      000C55 74 1E            [12] 2617 	mov	a,#0x1e
      000C57 F0               [24] 2618 	movx	@dptr,a
      000C58 90r00r00         [24] 2619 	mov	dptr,#_spi_control_write_PARM_3
      000C5B EC               [12] 2620 	mov	a,r4
      000C5C F0               [24] 2621 	movx	@dptr,a
      000C5D 75 82 02         [24] 2622 	mov	dpl, #0x02
      000C60 C0 07            [24] 2623 	push	ar7
      000C62 C0 06            [24] 2624 	push	ar6
      000C64 C0 05            [24] 2625 	push	ar5
      000C66 12r00r00         [24] 2626 	lcall	_spi_control_write
      000C69 D0 05            [24] 2627 	pop	ar5
      000C6B D0 06            [24] 2628 	pop	ar6
      000C6D D0 07            [24] 2629 	pop	ar7
                                   2630 ;	main.c:275: free(packet_data);
      000C6F 7F 00            [12] 2631 	mov	r7,#0x00
      000C71 8E 82            [24] 2632 	mov	dpl, r6
      000C73 8D 83            [24] 2633 	mov	dph, r5
      000C75 8F F0            [24] 2634 	mov	b, r7
      000C77 12r00r00         [24] 2635 	lcall	_free
      000C7A 02r08rA7         [24] 2636 	ljmp	00131$
                                   2637 ;	main.c:286: case 'C':{
      000C7D                       2638 00134$:
                                   2639 ;	main.c:287: printf(" Resetting ENC using RESET pin in Hardware(P1_0)\n\r");
      000C7D 74rE2            [12] 2640 	mov	a,#___str_46
      000C7F C0 E0            [24] 2641 	push	acc
      000C81 74s04            [12] 2642 	mov	a,#(___str_46 >> 8)
      000C83 C0 E0            [24] 2643 	push	acc
      000C85 74 80            [12] 2644 	mov	a,#0x80
      000C87 C0 E0            [24] 2645 	push	acc
      000C89 12r00r00         [24] 2646 	lcall	_printf
      000C8C 15 81            [12] 2647 	dec	sp
      000C8E 15 81            [12] 2648 	dec	sp
      000C90 15 81            [12] 2649 	dec	sp
                                   2650 ;	main.c:288: ENC_RESET = 0;
                                   2651 ;	assignBit
      000C92 C2 90            [12] 2652 	clr	_P1_0
                                   2653 ;	main.c:289: for(int i = 0; i < 6000; i++);
      000C94 7E 00            [12] 2654 	mov	r6,#0x00
      000C96 7F 00            [12] 2655 	mov	r7,#0x00
      000C98                       2656 00148$:
      000C98 C3               [12] 2657 	clr	c
      000C99 EE               [12] 2658 	mov	a,r6
      000C9A 94 70            [12] 2659 	subb	a,#0x70
      000C9C EF               [12] 2660 	mov	a,r7
      000C9D 64 80            [12] 2661 	xrl	a,#0x80
      000C9F 94 97            [12] 2662 	subb	a,#0x97
      000CA1 50 07            [24] 2663 	jnc	00135$
      000CA3 0E               [12] 2664 	inc	r6
      000CA4 BE 00 F1         [24] 2665 	cjne	r6,#0x00,00148$
      000CA7 0F               [12] 2666 	inc	r7
      000CA8 80 EE            [24] 2667 	sjmp	00148$
      000CAA                       2668 00135$:
                                   2669 ;	main.c:290: ENC_RESET = 1;
                                   2670 ;	assignBit
      000CAA D2 90            [12] 2671 	setb	_P1_0
                                   2672 ;	main.c:291: break;
      000CAC 02r02rD4         [24] 2673 	ljmp	00142$
                                   2674 ;	main.c:293: case 'D':
      000CAF                       2675 00136$:
                                   2676 ;	main.c:297: process_packet_from_buffer(0x0846);
      000CAF 90 08 46         [24] 2677 	mov	dptr,#0x0846
      000CB2 12r00r00         [24] 2678 	lcall	_process_packet_from_buffer
                                   2679 ;	main.c:298: break;
      000CB5 02r02rD4         [24] 2680 	ljmp	00142$
                                   2681 ;	main.c:300: case 'E':{
      000CB8                       2682 00137$:
                                   2683 ;	main.c:301: IT0 = 1;  // Edge-triggered mode for INT0
                                   2684 ;	assignBit
      000CB8 D2 88            [12] 2685 	setb	_IT0
                                   2686 ;	main.c:302: EX0 = 1;  // Enable INT0
                                   2687 ;	assignBit
      000CBA D2 A8            [12] 2688 	setb	_EX0
                                   2689 ;	main.c:303: EA = 1;   // Enable global interrupts
                                   2690 ;	assignBit
      000CBC D2 AF            [12] 2691 	setb	_EA
                                   2692 ;	main.c:304: uint8_t read_econ2 = mac_spi_read(0x1E, 0); //mac enable for reception
      000CBE 90r00r00         [24] 2693 	mov	dptr,#_mac_spi_read_PARM_2
      000CC1 E4               [12] 2694 	clr	a
      000CC2 F0               [24] 2695 	movx	@dptr,a
      000CC3 75 82 1E         [24] 2696 	mov	dpl, #0x1e
      000CC6 12r00r00         [24] 2697 	lcall	_mac_spi_read
                                   2698 ;	main.c:306: printf("Enabling TXPKTIE\n\r");
      000CC9 74r15            [12] 2699 	mov	a,#___str_47
      000CCB C0 E0            [24] 2700 	push	acc
      000CCD 74s05            [12] 2701 	mov	a,#(___str_47 >> 8)
      000CCF C0 E0            [24] 2702 	push	acc
      000CD1 74 80            [12] 2703 	mov	a,#0x80
      000CD3 C0 E0            [24] 2704 	push	acc
      000CD5 12r00r00         [24] 2705 	lcall	_printf
      000CD8 15 81            [12] 2706 	dec	sp
      000CDA 15 81            [12] 2707 	dec	sp
      000CDC 15 81            [12] 2708 	dec	sp
                                   2709 ;	main.c:307: spi_control_write(0, 0x1B, 0xC0);
      000CDE 90r00r00         [24] 2710 	mov	dptr,#_spi_control_write_PARM_2
      000CE1 74 1B            [12] 2711 	mov	a,#0x1b
      000CE3 F0               [24] 2712 	movx	@dptr,a
      000CE4 90r00r00         [24] 2713 	mov	dptr,#_spi_control_write_PARM_3
      000CE7 74 C0            [12] 2714 	mov	a,#0xc0
      000CE9 F0               [24] 2715 	movx	@dptr,a
      000CEA 75 82 00         [24] 2716 	mov	dpl, #0x00
      000CED 12r00r00         [24] 2717 	lcall	_spi_control_write
                                   2718 ;	main.c:308: break;
      000CF0 02r02rD4         [24] 2719 	ljmp	00142$
                                   2720 ;	main.c:310: case 'F':{
      000CF3                       2721 00138$:
                                   2722 ;	main.c:311: printf("Disabling TXPKTIE\n\r");
      000CF3 74r28            [12] 2723 	mov	a,#___str_48
      000CF5 C0 E0            [24] 2724 	push	acc
      000CF7 74s05            [12] 2725 	mov	a,#(___str_48 >> 8)
      000CF9 C0 E0            [24] 2726 	push	acc
      000CFB 74 80            [12] 2727 	mov	a,#0x80
      000CFD C0 E0            [24] 2728 	push	acc
      000CFF 12r00r00         [24] 2729 	lcall	_printf
      000D02 15 81            [12] 2730 	dec	sp
      000D04 15 81            [12] 2731 	dec	sp
      000D06 15 81            [12] 2732 	dec	sp
                                   2733 ;	main.c:312: spi_control_write(0, 0x1B, 0);
      000D08 90r00r00         [24] 2734 	mov	dptr,#_spi_control_write_PARM_2
      000D0B 74 1B            [12] 2735 	mov	a,#0x1b
      000D0D F0               [24] 2736 	movx	@dptr,a
      000D0E 90r00r00         [24] 2737 	mov	dptr,#_spi_control_write_PARM_3
      000D11 E4               [12] 2738 	clr	a
      000D12 F0               [24] 2739 	movx	@dptr,a
      000D13 75 82 00         [24] 2740 	mov	dpl, #0x00
      000D16 12r00r00         [24] 2741 	lcall	_spi_control_write
                                   2742 ;	main.c:314: default: {
      000D19                       2743 00139$:
                                   2744 ;	main.c:315: printf("Invalid option. Please select a valid action.\n\r");
      000D19 74r3C            [12] 2745 	mov	a,#___str_49
      000D1B C0 E0            [24] 2746 	push	acc
      000D1D 74s05            [12] 2747 	mov	a,#(___str_49 >> 8)
      000D1F C0 E0            [24] 2748 	push	acc
      000D21 74 80            [12] 2749 	mov	a,#0x80
      000D23 C0 E0            [24] 2750 	push	acc
      000D25 12r00r00         [24] 2751 	lcall	_printf
      000D28 15 81            [12] 2752 	dec	sp
      000D2A 15 81            [12] 2753 	dec	sp
      000D2C 15 81            [12] 2754 	dec	sp
                                   2755 ;	main.c:318: }
                                   2756 ;	main.c:320: }
      000D2E 02r02rD4         [24] 2757 	ljmp	00142$
                                   2758 	.area CSEG    (CODE)
                                   2759 	.area CONST   (CODE)
                                   2760 	.area CONST   (CODE)
      000000                       2761 ___str_0:
      000000 0A                    2762 	.db 0x0a
      000001 0D                    2763 	.db 0x0d
      000002 00                    2764 	.db 0x00
                                   2765 	.area CSEG    (CODE)
                                   2766 	.area CONST   (CODE)
      000003                       2767 ___str_1:
      000003 53 50 49 20 4F 70 65  2768 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    2769 	.db 0x0a
      00001A 0D                    2770 	.db 0x0d
      00001B 00                    2771 	.db 0x00
                                   2772 	.area CSEG    (CODE)
                                   2773 	.area CONST   (CODE)
      00001C                       2774 ___str_2:
      00001C 0A                    2775 	.db 0x0a
      00001D 0D                    2776 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  2777 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    2778 	.db 0x0a
      000031 0D                    2779 	.db 0x0d
      000032 00                    2780 	.db 0x00
                                   2781 	.area CSEG    (CODE)
                                   2782 	.area CONST   (CODE)
      000033                       2783 ___str_3:
      000033 31 20 2D 2D 3E 20 43  2784 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    2785 	.db 0x0a
      000047 0D                    2786 	.db 0x0d
      000048 00                    2787 	.db 0x00
                                   2788 	.area CSEG    (CODE)
                                   2789 	.area CONST   (CODE)
      000049                       2790 ___str_4:
      000049 32 20 2D 2D 3E 20 42  2791 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    2792 	.db 0x0a
      00005C 0D                    2793 	.db 0x0d
      00005D 00                    2794 	.db 0x00
                                   2795 	.area CSEG    (CODE)
                                   2796 	.area CONST   (CODE)
      00005E                       2797 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  2798 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    2799 	.db 0x0a
      000070 0D                    2800 	.db 0x0d
      000071 00                    2801 	.db 0x00
                                   2802 	.area CSEG    (CODE)
                                   2803 	.area CONST   (CODE)
      000072                       2804 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  2805 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    2806 	.db 0x0a
      00008A 0D                    2807 	.db 0x0d
      00008B 00                    2808 	.db 0x00
                                   2809 	.area CSEG    (CODE)
                                   2810 	.area CONST   (CODE)
      00008C                       2811 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  2812 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    2813 	.db 0x0a
      0000A0 0D                    2814 	.db 0x0d
      0000A1 00                    2815 	.db 0x00
                                   2816 	.area CSEG    (CODE)
                                   2817 	.area CONST   (CODE)
      0000A2                       2818 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  2819 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    2820 	.db 0x0a
      0000B5 0D                    2821 	.db 0x0d
      0000B6 00                    2822 	.db 0x00
                                   2823 	.area CSEG    (CODE)
                                   2824 	.area CONST   (CODE)
      0000B7                       2825 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  2826 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    2827 	.db 0x0a
      0000C7 0D                    2828 	.db 0x0d
      0000C8 00                    2829 	.db 0x00
                                   2830 	.area CSEG    (CODE)
                                   2831 	.area CONST   (CODE)
      0000C9                       2832 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  2833 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    2834 	.db 0x0a
      0000E1 0D                    2835 	.db 0x0d
      0000E2 00                    2836 	.db 0x00
                                   2837 	.area CSEG    (CODE)
                                   2838 	.area CONST   (CODE)
      0000E3                       2839 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  2840 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    2841 	.db 0x0a
      0000F6 0D                    2842 	.db 0x0d
      0000F7 00                    2843 	.db 0x00
                                   2844 	.area CSEG    (CODE)
                                   2845 	.area CONST   (CODE)
      0000F8                       2846 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  2847 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    2848 	.db 0x0a
      00010F 0D                    2849 	.db 0x0d
      000110 00                    2850 	.db 0x00
                                   2851 	.area CSEG    (CODE)
                                   2852 	.area CONST   (CODE)
      000111                       2853 ___str_13:
      000111 42 20 2D 2D 3E 20 49  2854 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2855 	.db 0x0a
      000127 0D                    2856 	.db 0x0d
      000128 00                    2857 	.db 0x00
                                   2858 	.area CSEG    (CODE)
                                   2859 	.area CONST   (CODE)
      000129                       2860 ___str_14:
      000129 43 20 2D 2D 3E 20 48  2861 	.ascii "C --> Hard Reset(nRESET pin)"
             61 72 64 20 52 65 73
             65 74 28 6E 52 45 53
             45 54 20 70 69 6E 29
      000145 0A                    2862 	.db 0x0a
      000146 0D                    2863 	.db 0x0d
      000147 00                    2864 	.db 0x00
                                   2865 	.area CSEG    (CODE)
                                   2866 	.area CONST   (CODE)
      000148                       2867 ___str_15:
      000148 44 20 2D 2D 3E 20 50  2868 	.ascii "D --> Process TCP"
             72 6F 63 65 73 73 20
             54 43 50
      000159 0A                    2869 	.db 0x0a
      00015A 0D                    2870 	.db 0x0d
      00015B 00                    2871 	.db 0x00
                                   2872 	.area CSEG    (CODE)
                                   2873 	.area CONST   (CODE)
      00015C                       2874 ___str_16:
      00015C 45 20 2D 2D 3E 20 45  2875 	.ascii "E --> Enable TX interrupt"
             6E 61 62 6C 65 20 54
             58 20 69 6E 74 65 72
             72 75 70 74
      000175 0A                    2876 	.db 0x0a
      000176 0D                    2877 	.db 0x0d
      000177 00                    2878 	.db 0x00
                                   2879 	.area CSEG    (CODE)
                                   2880 	.area CONST   (CODE)
      000178                       2881 ___str_17:
      000178 46 20 2D 2D 3E 20 44  2882 	.ascii "F --> Disabling TX interrupt"
             69 73 61 62 6C 69 6E
             67 20 54 58 20 69 6E
             74 65 72 72 75 70 74
      000194 0A                    2883 	.db 0x0a
      000195 0D                    2884 	.db 0x0d
      000196 00                    2885 	.db 0x00
                                   2886 	.area CSEG    (CODE)
                                   2887 	.area CONST   (CODE)
      000197                       2888 ___str_18:
      000197 45 6E 74 65 72 20 74  2889 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      0001B9 0A                    2890 	.db 0x0a
      0001BA 0D                    2891 	.db 0x0d
      0001BB 00                    2892 	.db 0x00
                                   2893 	.area CSEG    (CODE)
                                   2894 	.area CONST   (CODE)
      0001BC                       2895 ___str_19:
      0001BC 45 6E 74 65 72 20 74  2896 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      0001E6 0A                    2897 	.db 0x0a
      0001E7 0D                    2898 	.db 0x0d
      0001E8 00                    2899 	.db 0x00
                                   2900 	.area CSEG    (CODE)
                                   2901 	.area CONST   (CODE)
      0001E9                       2902 ___str_20:
      0001E9 45 6E 74 65 72 20 74  2903 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      00020A 0A                    2904 	.db 0x0a
      00020B 0D                    2905 	.db 0x0d
      00020C 00                    2906 	.db 0x00
                                   2907 	.area CSEG    (CODE)
                                   2908 	.area CONST   (CODE)
      00020D                       2909 ___str_21:
      00020D 45 6E 74 65 72 20 74  2910 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      000230 0A                    2911 	.db 0x0a
      000231 0D                    2912 	.db 0x0d
      000232 00                    2913 	.db 0x00
                                   2914 	.area CSEG    (CODE)
                                   2915 	.area CONST   (CODE)
      000233                       2916 ___str_22:
      000233 45 6E 74 65 72 20 74  2917 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      00024E 0A                    2918 	.db 0x0a
      00024F 0D                    2919 	.db 0x0d
      000250 00                    2920 	.db 0x00
                                   2921 	.area CSEG    (CODE)
                                   2922 	.area CONST   (CODE)
      000251                       2923 ___str_23:
      000251 45 6E 74 65 72 20 25  2924 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000271 0A                    2925 	.db 0x0a
      000272 0D                    2926 	.db 0x0d
      000273 00                    2927 	.db 0x00
                                   2928 	.area CSEG    (CODE)
                                   2929 	.area CONST   (CODE)
      000274                       2930 ___str_24:
      000274 42 79 74 65 20 25 64  2931 	.ascii "Byte %d: "
             3A 20
      00027D 00                    2932 	.db 0x00
                                   2933 	.area CSEG    (CODE)
                                   2934 	.area CONST   (CODE)
      00027E                       2935 ___str_25:
      00027E 45 6E 74 65 72 20 74  2936 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      0002A0 0A                    2937 	.db 0x0a
      0002A1 0D                    2938 	.db 0x0d
      0002A2 00                    2939 	.db 0x00
                                   2940 	.area CSEG    (CODE)
                                   2941 	.area CONST   (CODE)
      0002A3                       2942 ___str_26:
      0002A3 45 6E 74 65 72 20 74  2943 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      0002C9 0A                    2944 	.db 0x0a
      0002CA 0D                    2945 	.db 0x0d
      0002CB 00                    2946 	.db 0x00
                                   2947 	.area CSEG    (CODE)
                                   2948 	.area CONST   (CODE)
      0002CC                       2949 ___str_27:
      0002CC 45 6E 74 65 72 20 74  2950 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002F2 0A                    2951 	.db 0x0a
      0002F3 0D                    2952 	.db 0x0d
      0002F4 00                    2953 	.db 0x00
                                   2954 	.area CSEG    (CODE)
                                   2955 	.area CONST   (CODE)
      0002F5                       2956 ___str_28:
      0002F5 4D 41 43 20 52 65 67  2957 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      00030E 0A                    2958 	.db 0x0a
      00030F 0D                    2959 	.db 0x0d
      000310 00                    2960 	.db 0x00
                                   2961 	.area CSEG    (CODE)
                                   2962 	.area CONST   (CODE)
      000311                       2963 ___str_29:
      000311 45 6E 74 65 72 20 74  2964 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      000330 0A                    2965 	.db 0x0a
      000331 0D                    2966 	.db 0x0d
      000332 00                    2967 	.db 0x00
                                   2968 	.area CSEG    (CODE)
                                   2969 	.area CONST   (CODE)
      000333                       2970 ___str_30:
      000333 45 6E 74 65 72 20 74  2971 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      000352 0A                    2972 	.db 0x0a
      000353 0D                    2973 	.db 0x0d
      000354 00                    2974 	.db 0x00
                                   2975 	.area CSEG    (CODE)
                                   2976 	.area CONST   (CODE)
      000355                       2977 ___str_31:
      000355 50 48 59 20 57 72 69  2978 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      00036B 0A                    2979 	.db 0x0a
      00036C 0D                    2980 	.db 0x0d
      00036D 00                    2981 	.db 0x00
                                   2982 	.area CSEG    (CODE)
                                   2983 	.area CONST   (CODE)
      00036E                       2984 ___str_32:
      00036E 45 6E 74 65 72 20 74  2985 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000395 0A                    2986 	.db 0x0a
      000396 0D                    2987 	.db 0x0d
      000397 00                    2988 	.db 0x00
                                   2989 	.area CSEG    (CODE)
                                   2990 	.area CONST   (CODE)
      000398                       2991 ___str_33:
      000398 50 48 59 20 52 65 61  2992 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      0003AD 0A                    2993 	.db 0x0a
      0003AE 0D                    2994 	.db 0x0d
      0003AF 00                    2995 	.db 0x00
                                   2996 	.area CSEG    (CODE)
                                   2997 	.area CONST   (CODE)
      0003B0                       2998 ___str_34:
      0003B0 52 65 73 65 74 74 69  2999 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      0003C5 0A                    3000 	.db 0x0a
      0003C6 0D                    3001 	.db 0x0d
      0003C7 00                    3002 	.db 0x00
                                   3003 	.area CSEG    (CODE)
                                   3004 	.area CONST   (CODE)
      0003C8                       3005 ___str_35:
      0003C8 45 6E 74 65 72 20 74  3006 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003EF 0A                    3007 	.db 0x0a
      0003F0 0D                    3008 	.db 0x0d
      0003F1 00                    3009 	.db 0x00
                                   3010 	.area CSEG    (CODE)
                                   3011 	.area CONST   (CODE)
      0003F2                       3012 ___str_36:
      0003F2 45 6E 74 65 72 20 74  3013 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      00040A 0A                    3014 	.db 0x0a
      00040B 0D                    3015 	.db 0x0d
      00040C 00                    3016 	.db 0x00
                                   3017 	.area CSEG    (CODE)
                                   3018 	.area CONST   (CODE)
      00040D                       3019 ___str_37:
      00040D 45 54 48 20 52 65 67  3020 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      000426 0A                    3021 	.db 0x0a
      000427 0D                    3022 	.db 0x0d
      000428 00                    3023 	.db 0x00
                                   3024 	.area CSEG    (CODE)
                                   3025 	.area CONST   (CODE)
      000429                       3026 ___str_38:
      000429 56 61 6C 69 64 20 45  3027 	.ascii "Valid ETHER packet....................."
             54 48 45 52 20 70 61
             63 6B 65 74 2E 2E 2E
             2E 2E 2E 2E 2E 2E 2E
             2E 2E 2E 2E 2E 2E 2E
             2E 2E 2E 2E
      000450 0A                    3028 	.db 0x0a
      000451 0D                    3029 	.db 0x0d
      000452 00                    3030 	.db 0x00
                                   3031 	.area CSEG    (CODE)
                                   3032 	.area CONST   (CODE)
      000453                       3033 ___str_39:
      000453 0A                    3034 	.db 0x0a
      000454 50 72 6F 63 65 73 73  3035 	.ascii "Processed response data:"
             65 64 20 72 65 73 70
             6F 6E 73 65 20 64 61
             74 61 3A
      00046C 0A                    3036 	.db 0x0a
      00046D 00                    3037 	.db 0x00
                                   3038 	.area CSEG    (CODE)
                                   3039 	.area CONST   (CODE)
      00046E                       3040 ___str_40:
      00046E 0A                    3041 	.db 0x0a
      00046F 4E 6F 20 72 65 73 70  3042 	.ascii "No response generated by TCP packet processing."
             6F 6E 73 65 20 67 65
             6E 65 72 61 74 65 64
             20 62 79 20 54 43 50
             20 70 61 63 6B 65 74
             20 70 72 6F 63 65 73
             73 69 6E 67 2E
      00049E 0A                    3043 	.db 0x0a
      00049F 00                    3044 	.db 0x00
                                   3045 	.area CSEG    (CODE)
                                   3046 	.area CONST   (CODE)
      0004A0                       3047 ___str_41:
      0004A0 59 45 53 53 53 53     3048 	.ascii "YESSSS"
      0004A6 0A                    3049 	.db 0x0a
      0004A7 00                    3050 	.db 0x00
                                   3051 	.area CSEG    (CODE)
                                   3052 	.area CONST   (CODE)
      0004A8                       3053 ___str_42:
      0004A8 4E 4F 4F 4F 4F        3054 	.ascii "NOOOO"
      0004AD 0A                    3055 	.db 0x0a
      0004AE 00                    3056 	.db 0x00
                                   3057 	.area CSEG    (CODE)
                                   3058 	.area CONST   (CODE)
      0004AF                       3059 ___str_43:
      0004AF 6E 65 78 74 50 61 63  3060 	.ascii "nextPacket: 0x%04X"
             6B 65 74 3A 20 30 78
             25 30 34 58
      0004C1 0A                    3061 	.db 0x0a
      0004C2 00                    3062 	.db 0x00
                                   3063 	.area CSEG    (CODE)
                                   3064 	.area CONST   (CODE)
      0004C3                       3065 ___str_44:
      0004C3 62 79 74 65 43 6F 75  3066 	.ascii "byteCount: %d"
             6E 74 3A 20 25 64
      0004D0 0A                    3067 	.db 0x0a
      0004D1 00                    3068 	.db 0x00
                                   3069 	.area CSEG    (CODE)
                                   3070 	.area CONST   (CODE)
      0004D2                       3071 ___str_45:
      0004D2 73 74 61 74 75 73 3A  3072 	.ascii "status: 0x%02X"
             20 30 78 25 30 32 58
      0004E0 0A                    3073 	.db 0x0a
      0004E1 00                    3074 	.db 0x00
                                   3075 	.area CSEG    (CODE)
                                   3076 	.area CONST   (CODE)
      0004E2                       3077 ___str_46:
      0004E2 20 52 65 73 65 74 74  3078 	.ascii " Resetting ENC using RESET pin in Hardware(P1_0)"
             69 6E 67 20 45 4E 43
             20 75 73 69 6E 67 20
             52 45 53 45 54 20 70
             69 6E 20 69 6E 20 48
             61 72 64 77 61 72 65
             28 50 31 5F 30 29
      000512 0A                    3079 	.db 0x0a
      000513 0D                    3080 	.db 0x0d
      000514 00                    3081 	.db 0x00
                                   3082 	.area CSEG    (CODE)
                                   3083 	.area CONST   (CODE)
      000515                       3084 ___str_47:
      000515 45 6E 61 62 6C 69 6E  3085 	.ascii "Enabling TXPKTIE"
             67 20 54 58 50 4B 54
             49 45
      000525 0A                    3086 	.db 0x0a
      000526 0D                    3087 	.db 0x0d
      000527 00                    3088 	.db 0x00
                                   3089 	.area CSEG    (CODE)
                                   3090 	.area CONST   (CODE)
      000528                       3091 ___str_48:
      000528 44 69 73 61 62 6C 69  3092 	.ascii "Disabling TXPKTIE"
             6E 67 20 54 58 50 4B
             54 49 45
      000539 0A                    3093 	.db 0x0a
      00053A 0D                    3094 	.db 0x0d
      00053B 00                    3095 	.db 0x00
                                   3096 	.area CSEG    (CODE)
                                   3097 	.area CONST   (CODE)
      00053C                       3098 ___str_49:
      00053C 49 6E 76 61 6C 69 64  3099 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      000569 0A                    3100 	.db 0x0a
      00056A 0D                    3101 	.db 0x0d
      00056B 00                    3102 	.db 0x00
                                   3103 	.area CSEG    (CODE)
                                   3104 	.area XINIT   (CODE)
      000000                       3105 __xinit__device_mac:
      000000 02                    3106 	.db #0x02	; 2
      000001 11                    3107 	.db #0x11	; 17
      000002 22                    3108 	.db #0x22	; 34
      000003 33                    3109 	.db #0x33	; 51	'3'
      000004 44                    3110 	.db #0x44	; 68	'D'
      000005 55                    3111 	.db #0x55	; 85	'U'
      000006                       3112 __xinit__target_mac:
      000006 F8                    3113 	.db #0xf8	; 248
      000007 75                    3114 	.db #0x75	; 117	'u'
      000008 A4                    3115 	.db #0xa4	; 164
      000009 8C                    3116 	.db #0x8c	; 140
      00000A 41                    3117 	.db #0x41	; 65	'A'
      00000B 31                    3118 	.db #0x31	; 49	'1'
      00000C                       3119 __xinit__device_ip:
      00000C C0                    3120 	.db #0xc0	; 192
      00000D A8                    3121 	.db #0xa8	; 168
      00000E 01                    3122 	.db #0x01	; 1
      00000F 64                    3123 	.db #0x64	; 100	'd'
      000010                       3124 __xinit__target_ip:
      000010 C0                    3125 	.db #0xc0	; 192
      000011 A8                    3126 	.db #0xa8	; 168
      000012 01                    3127 	.db #0x01	; 1
      000013 01                    3128 	.db #0x01	; 1
                                   3129 	.area CABS    (ABS,CODE)
