                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _send_arp_request
                                     15 	.globl _init_MAC
                                     16 	.globl _init_ENC
                                     17 	.globl _spi_control_write
                                     18 	.globl _eth_spi_read
                                     19 	.globl _phy_spi_write
                                     20 	.globl _phy_spi_read
                                     21 	.globl _spi_buffer_write
                                     22 	.globl _spi_buffer_read
                                     23 	.globl _mac_spi_read
                                     24 	.globl _enc_reset
                                     25 	.globl _configure_SPI
                                     26 	.globl _printf_tiny
                                     27 	.globl _putchar
                                     28 	.globl _getchar
                                     29 	.globl _printf
                                     30 	.globl _TF1
                                     31 	.globl _TR1
                                     32 	.globl _TF0
                                     33 	.globl _TR0
                                     34 	.globl _IE1
                                     35 	.globl _IT1
                                     36 	.globl _IE0
                                     37 	.globl _IT0
                                     38 	.globl _SM0
                                     39 	.globl _SM1
                                     40 	.globl _SM2
                                     41 	.globl _REN
                                     42 	.globl _TB8
                                     43 	.globl _RB8
                                     44 	.globl _TI
                                     45 	.globl _RI
                                     46 	.globl _CY
                                     47 	.globl _AC
                                     48 	.globl _F0
                                     49 	.globl _RS1
                                     50 	.globl _RS0
                                     51 	.globl _OV
                                     52 	.globl _F1
                                     53 	.globl _P
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD0
                                     61 	.globl _TXD
                                     62 	.globl _RXD0
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _P1_7
                                     81 	.globl _P1_6
                                     82 	.globl _P1_5
                                     83 	.globl _P1_4
                                     84 	.globl _P1_3
                                     85 	.globl _P1_2
                                     86 	.globl _P1_1
                                     87 	.globl _P1_0
                                     88 	.globl _P0_7
                                     89 	.globl _P0_6
                                     90 	.globl _P0_5
                                     91 	.globl _P0_4
                                     92 	.globl _P0_3
                                     93 	.globl _P0_2
                                     94 	.globl _P0_1
                                     95 	.globl _P0_0
                                     96 	.globl _PS
                                     97 	.globl _PT1
                                     98 	.globl _PX1
                                     99 	.globl _PT0
                                    100 	.globl _PX0
                                    101 	.globl _EA
                                    102 	.globl _ES
                                    103 	.globl _ET1
                                    104 	.globl _EX1
                                    105 	.globl _ET0
                                    106 	.globl _EX0
                                    107 	.globl _BREG_F7
                                    108 	.globl _BREG_F6
                                    109 	.globl _BREG_F5
                                    110 	.globl _BREG_F4
                                    111 	.globl _BREG_F3
                                    112 	.globl _BREG_F2
                                    113 	.globl _BREG_F1
                                    114 	.globl _BREG_F0
                                    115 	.globl _P5_7
                                    116 	.globl _P5_6
                                    117 	.globl _P5_5
                                    118 	.globl _P5_4
                                    119 	.globl _P5_3
                                    120 	.globl _P5_2
                                    121 	.globl _P5_1
                                    122 	.globl _P5_0
                                    123 	.globl _P4_7
                                    124 	.globl _P4_6
                                    125 	.globl _P4_5
                                    126 	.globl _P4_4
                                    127 	.globl _P4_3
                                    128 	.globl _P4_2
                                    129 	.globl _P4_1
                                    130 	.globl _P4_0
                                    131 	.globl _PX0L
                                    132 	.globl _PT0L
                                    133 	.globl _PX1L
                                    134 	.globl _PT1L
                                    135 	.globl _PSL
                                    136 	.globl _PT2L
                                    137 	.globl _PPCL
                                    138 	.globl _EC
                                    139 	.globl _CCF0
                                    140 	.globl _CCF1
                                    141 	.globl _CCF2
                                    142 	.globl _CCF3
                                    143 	.globl _CCF4
                                    144 	.globl _CR
                                    145 	.globl _CF
                                    146 	.globl _TF2
                                    147 	.globl _EXF2
                                    148 	.globl _RCLK
                                    149 	.globl _TCLK
                                    150 	.globl _EXEN2
                                    151 	.globl _TR2
                                    152 	.globl _C_T2
                                    153 	.globl _CP_RL2
                                    154 	.globl _T2CON_7
                                    155 	.globl _T2CON_6
                                    156 	.globl _T2CON_5
                                    157 	.globl _T2CON_4
                                    158 	.globl _T2CON_3
                                    159 	.globl _T2CON_2
                                    160 	.globl _T2CON_1
                                    161 	.globl _T2CON_0
                                    162 	.globl _PT2
                                    163 	.globl _ET2
                                    164 	.globl _TMOD
                                    165 	.globl _TL1
                                    166 	.globl _TL0
                                    167 	.globl _TH1
                                    168 	.globl _TH0
                                    169 	.globl _TCON
                                    170 	.globl _SP
                                    171 	.globl _SCON
                                    172 	.globl _SBUF0
                                    173 	.globl _SBUF
                                    174 	.globl _PSW
                                    175 	.globl _PCON
                                    176 	.globl _P3
                                    177 	.globl _P2
                                    178 	.globl _P1
                                    179 	.globl _P0
                                    180 	.globl _IP
                                    181 	.globl _IE
                                    182 	.globl _DP0L
                                    183 	.globl _DPL
                                    184 	.globl _DP0H
                                    185 	.globl _DPH
                                    186 	.globl _B
                                    187 	.globl _ACC
                                    188 	.globl _EECON
                                    189 	.globl _KBF
                                    190 	.globl _KBE
                                    191 	.globl _KBLS
                                    192 	.globl _BRL
                                    193 	.globl _BDRCON
                                    194 	.globl _T2MOD
                                    195 	.globl _SPDAT
                                    196 	.globl _SPSTA
                                    197 	.globl _SPCON
                                    198 	.globl _SADEN
                                    199 	.globl _SADDR
                                    200 	.globl _WDTPRG
                                    201 	.globl _WDTRST
                                    202 	.globl _P5
                                    203 	.globl _P4
                                    204 	.globl _IPH1
                                    205 	.globl _IPL1
                                    206 	.globl _IPH0
                                    207 	.globl _IPL0
                                    208 	.globl _IEN1
                                    209 	.globl _IEN0
                                    210 	.globl _CMOD
                                    211 	.globl _CL
                                    212 	.globl _CH
                                    213 	.globl _CCON
                                    214 	.globl _CCAPM4
                                    215 	.globl _CCAPM3
                                    216 	.globl _CCAPM2
                                    217 	.globl _CCAPM1
                                    218 	.globl _CCAPM0
                                    219 	.globl _CCAP4L
                                    220 	.globl _CCAP3L
                                    221 	.globl _CCAP2L
                                    222 	.globl _CCAP1L
                                    223 	.globl _CCAP0L
                                    224 	.globl _CCAP4H
                                    225 	.globl _CCAP3H
                                    226 	.globl _CCAP2H
                                    227 	.globl _CCAP1H
                                    228 	.globl _CCAP0H
                                    229 	.globl _CKCON1
                                    230 	.globl _CKCON0
                                    231 	.globl _CKRL
                                    232 	.globl _AUXR1
                                    233 	.globl _AUXR
                                    234 	.globl _TH2
                                    235 	.globl _TL2
                                    236 	.globl _RCAP2H
                                    237 	.globl _RCAP2L
                                    238 	.globl _T2CON
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           0000C8   244 _T2CON	=	0x00c8
                           0000CA   245 _RCAP2L	=	0x00ca
                           0000CB   246 _RCAP2H	=	0x00cb
                           0000CC   247 _TL2	=	0x00cc
                           0000CD   248 _TH2	=	0x00cd
                           00008E   249 _AUXR	=	0x008e
                           0000A2   250 _AUXR1	=	0x00a2
                           000097   251 _CKRL	=	0x0097
                           00008F   252 _CKCON0	=	0x008f
                           0000AF   253 _CKCON1	=	0x00af
                           0000FA   254 _CCAP0H	=	0x00fa
                           0000FB   255 _CCAP1H	=	0x00fb
                           0000FC   256 _CCAP2H	=	0x00fc
                           0000FD   257 _CCAP3H	=	0x00fd
                           0000FE   258 _CCAP4H	=	0x00fe
                           0000EA   259 _CCAP0L	=	0x00ea
                           0000EB   260 _CCAP1L	=	0x00eb
                           0000EC   261 _CCAP2L	=	0x00ec
                           0000ED   262 _CCAP3L	=	0x00ed
                           0000EE   263 _CCAP4L	=	0x00ee
                           0000DA   264 _CCAPM0	=	0x00da
                           0000DB   265 _CCAPM1	=	0x00db
                           0000DC   266 _CCAPM2	=	0x00dc
                           0000DD   267 _CCAPM3	=	0x00dd
                           0000DE   268 _CCAPM4	=	0x00de
                           0000D8   269 _CCON	=	0x00d8
                           0000F9   270 _CH	=	0x00f9
                           0000E9   271 _CL	=	0x00e9
                           0000D9   272 _CMOD	=	0x00d9
                           0000A8   273 _IEN0	=	0x00a8
                           0000B1   274 _IEN1	=	0x00b1
                           0000B8   275 _IPL0	=	0x00b8
                           0000B7   276 _IPH0	=	0x00b7
                           0000B2   277 _IPL1	=	0x00b2
                           0000B3   278 _IPH1	=	0x00b3
                           0000C0   279 _P4	=	0x00c0
                           0000E8   280 _P5	=	0x00e8
                           0000A6   281 _WDTRST	=	0x00a6
                           0000A7   282 _WDTPRG	=	0x00a7
                           0000A9   283 _SADDR	=	0x00a9
                           0000B9   284 _SADEN	=	0x00b9
                           0000C3   285 _SPCON	=	0x00c3
                           0000C4   286 _SPSTA	=	0x00c4
                           0000C5   287 _SPDAT	=	0x00c5
                           0000C9   288 _T2MOD	=	0x00c9
                           00009B   289 _BDRCON	=	0x009b
                           00009A   290 _BRL	=	0x009a
                           00009C   291 _KBLS	=	0x009c
                           00009D   292 _KBE	=	0x009d
                           00009E   293 _KBF	=	0x009e
                           0000D2   294 _EECON	=	0x00d2
                           0000E0   295 _ACC	=	0x00e0
                           0000F0   296 _B	=	0x00f0
                           000083   297 _DPH	=	0x0083
                           000083   298 _DP0H	=	0x0083
                           000082   299 _DPL	=	0x0082
                           000082   300 _DP0L	=	0x0082
                           0000A8   301 _IE	=	0x00a8
                           0000B8   302 _IP	=	0x00b8
                           000080   303 _P0	=	0x0080
                           000090   304 _P1	=	0x0090
                           0000A0   305 _P2	=	0x00a0
                           0000B0   306 _P3	=	0x00b0
                           000087   307 _PCON	=	0x0087
                           0000D0   308 _PSW	=	0x00d0
                           000099   309 _SBUF	=	0x0099
                           000099   310 _SBUF0	=	0x0099
                           000098   311 _SCON	=	0x0098
                           000081   312 _SP	=	0x0081
                           000088   313 _TCON	=	0x0088
                           00008C   314 _TH0	=	0x008c
                           00008D   315 _TH1	=	0x008d
                           00008A   316 _TL0	=	0x008a
                           00008B   317 _TL1	=	0x008b
                           000089   318 _TMOD	=	0x0089
                                    319 ;--------------------------------------------------------
                                    320 ; special function bits
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           0000AD   324 _ET2	=	0x00ad
                           0000BD   325 _PT2	=	0x00bd
                           0000C8   326 _T2CON_0	=	0x00c8
                           0000C9   327 _T2CON_1	=	0x00c9
                           0000CA   328 _T2CON_2	=	0x00ca
                           0000CB   329 _T2CON_3	=	0x00cb
                           0000CC   330 _T2CON_4	=	0x00cc
                           0000CD   331 _T2CON_5	=	0x00cd
                           0000CE   332 _T2CON_6	=	0x00ce
                           0000CF   333 _T2CON_7	=	0x00cf
                           0000C8   334 _CP_RL2	=	0x00c8
                           0000C9   335 _C_T2	=	0x00c9
                           0000CA   336 _TR2	=	0x00ca
                           0000CB   337 _EXEN2	=	0x00cb
                           0000CC   338 _TCLK	=	0x00cc
                           0000CD   339 _RCLK	=	0x00cd
                           0000CE   340 _EXF2	=	0x00ce
                           0000CF   341 _TF2	=	0x00cf
                           0000DF   342 _CF	=	0x00df
                           0000DE   343 _CR	=	0x00de
                           0000DC   344 _CCF4	=	0x00dc
                           0000DB   345 _CCF3	=	0x00db
                           0000DA   346 _CCF2	=	0x00da
                           0000D9   347 _CCF1	=	0x00d9
                           0000D8   348 _CCF0	=	0x00d8
                           0000AE   349 _EC	=	0x00ae
                           0000BE   350 _PPCL	=	0x00be
                           0000BD   351 _PT2L	=	0x00bd
                           0000BC   352 _PSL	=	0x00bc
                           0000BB   353 _PT1L	=	0x00bb
                           0000BA   354 _PX1L	=	0x00ba
                           0000B9   355 _PT0L	=	0x00b9
                           0000B8   356 _PX0L	=	0x00b8
                           0000C0   357 _P4_0	=	0x00c0
                           0000C1   358 _P4_1	=	0x00c1
                           0000C2   359 _P4_2	=	0x00c2
                           0000C3   360 _P4_3	=	0x00c3
                           0000C4   361 _P4_4	=	0x00c4
                           0000C5   362 _P4_5	=	0x00c5
                           0000C6   363 _P4_6	=	0x00c6
                           0000C7   364 _P4_7	=	0x00c7
                           0000E8   365 _P5_0	=	0x00e8
                           0000E9   366 _P5_1	=	0x00e9
                           0000EA   367 _P5_2	=	0x00ea
                           0000EB   368 _P5_3	=	0x00eb
                           0000EC   369 _P5_4	=	0x00ec
                           0000ED   370 _P5_5	=	0x00ed
                           0000EE   371 _P5_6	=	0x00ee
                           0000EF   372 _P5_7	=	0x00ef
                           0000F0   373 _BREG_F0	=	0x00f0
                           0000F1   374 _BREG_F1	=	0x00f1
                           0000F2   375 _BREG_F2	=	0x00f2
                           0000F3   376 _BREG_F3	=	0x00f3
                           0000F4   377 _BREG_F4	=	0x00f4
                           0000F5   378 _BREG_F5	=	0x00f5
                           0000F6   379 _BREG_F6	=	0x00f6
                           0000F7   380 _BREG_F7	=	0x00f7
                           0000A8   381 _EX0	=	0x00a8
                           0000A9   382 _ET0	=	0x00a9
                           0000AA   383 _EX1	=	0x00aa
                           0000AB   384 _ET1	=	0x00ab
                           0000AC   385 _ES	=	0x00ac
                           0000AF   386 _EA	=	0x00af
                           0000B8   387 _PX0	=	0x00b8
                           0000B9   388 _PT0	=	0x00b9
                           0000BA   389 _PX1	=	0x00ba
                           0000BB   390 _PT1	=	0x00bb
                           0000BC   391 _PS	=	0x00bc
                           000080   392 _P0_0	=	0x0080
                           000081   393 _P0_1	=	0x0081
                           000082   394 _P0_2	=	0x0082
                           000083   395 _P0_3	=	0x0083
                           000084   396 _P0_4	=	0x0084
                           000085   397 _P0_5	=	0x0085
                           000086   398 _P0_6	=	0x0086
                           000087   399 _P0_7	=	0x0087
                           000090   400 _P1_0	=	0x0090
                           000091   401 _P1_1	=	0x0091
                           000092   402 _P1_2	=	0x0092
                           000093   403 _P1_3	=	0x0093
                           000094   404 _P1_4	=	0x0094
                           000095   405 _P1_5	=	0x0095
                           000096   406 _P1_6	=	0x0096
                           000097   407 _P1_7	=	0x0097
                           0000A0   408 _P2_0	=	0x00a0
                           0000A1   409 _P2_1	=	0x00a1
                           0000A2   410 _P2_2	=	0x00a2
                           0000A3   411 _P2_3	=	0x00a3
                           0000A4   412 _P2_4	=	0x00a4
                           0000A5   413 _P2_5	=	0x00a5
                           0000A6   414 _P2_6	=	0x00a6
                           0000A7   415 _P2_7	=	0x00a7
                           0000B0   416 _P3_0	=	0x00b0
                           0000B1   417 _P3_1	=	0x00b1
                           0000B2   418 _P3_2	=	0x00b2
                           0000B3   419 _P3_3	=	0x00b3
                           0000B4   420 _P3_4	=	0x00b4
                           0000B5   421 _P3_5	=	0x00b5
                           0000B6   422 _P3_6	=	0x00b6
                           0000B7   423 _P3_7	=	0x00b7
                           0000B0   424 _RXD	=	0x00b0
                           0000B0   425 _RXD0	=	0x00b0
                           0000B1   426 _TXD	=	0x00b1
                           0000B1   427 _TXD0	=	0x00b1
                           0000B2   428 _INT0	=	0x00b2
                           0000B3   429 _INT1	=	0x00b3
                           0000B4   430 _T0	=	0x00b4
                           0000B5   431 _T1	=	0x00b5
                           0000B6   432 _WR	=	0x00b6
                           0000B7   433 _RD	=	0x00b7
                           0000D0   434 _P	=	0x00d0
                           0000D1   435 _F1	=	0x00d1
                           0000D2   436 _OV	=	0x00d2
                           0000D3   437 _RS0	=	0x00d3
                           0000D4   438 _RS1	=	0x00d4
                           0000D5   439 _F0	=	0x00d5
                           0000D6   440 _AC	=	0x00d6
                           0000D7   441 _CY	=	0x00d7
                           000098   442 _RI	=	0x0098
                           000099   443 _TI	=	0x0099
                           00009A   444 _RB8	=	0x009a
                           00009B   445 _TB8	=	0x009b
                           00009C   446 _REN	=	0x009c
                           00009D   447 _SM2	=	0x009d
                           00009E   448 _SM1	=	0x009e
                           00009F   449 _SM0	=	0x009f
                           000088   450 _IT0	=	0x0088
                           000089   451 _IE0	=	0x0089
                           00008A   452 _IT1	=	0x008a
                           00008B   453 _IE1	=	0x008b
                           00008C   454 _TR0	=	0x008c
                           00008D   455 _TF0	=	0x008d
                           00008E   456 _TR1	=	0x008e
                           00008F   457 _TF1	=	0x008f
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable register banks
                                    460 ;--------------------------------------------------------
                                    461 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        462 	.ds 8
                                    463 ;--------------------------------------------------------
                                    464 ; internal ram data
                                    465 ;--------------------------------------------------------
                                    466 	.area DSEG    (DATA)
                                    467 ;--------------------------------------------------------
                                    468 ; overlayable items in internal ram
                                    469 ;--------------------------------------------------------
                                    470 	.area	OSEG    (OVR,DATA)
      000000                        471 _hex_to_int_sloc0_1_0:
      000000                        472 	.ds 3
      000003                        473 _hex_to_int_sloc1_1_0:
      000003                        474 	.ds 1
      000004                        475 _hex_to_int_sloc2_1_0:
      000004                        476 	.ds 2
                                    477 ;--------------------------------------------------------
                                    478 ; Stack segment in internal ram
                                    479 ;--------------------------------------------------------
                                    480 	.area SSEG
      000000                        481 __start__stack:
      000000                        482 	.ds	1
                                    483 
                                    484 ;--------------------------------------------------------
                                    485 ; indirectly addressable internal ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area ISEG    (DATA)
                                    488 ;--------------------------------------------------------
                                    489 ; absolute internal ram data
                                    490 ;--------------------------------------------------------
                                    491 	.area IABS    (ABS,DATA)
                                    492 	.area IABS    (ABS,DATA)
                                    493 ;--------------------------------------------------------
                                    494 ; bit data
                                    495 ;--------------------------------------------------------
                                    496 	.area BSEG    (BIT)
                                    497 ;--------------------------------------------------------
                                    498 ; paged external ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area PSEG    (PAG,XDATA)
                                    501 ;--------------------------------------------------------
                                    502 ; uninitialized external ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area XSEG    (XDATA)
      000000                        505 _hex_to_int_str_10000_69:
      000000                        506 	.ds 3
      000003                        507 _hex_to_int_result_10000_70:
      000003                        508 	.ds 2
      000005                        509 _hex_to_int_ASCII_20000_71:
      000005                        510 	.ds 2
      000007                        511 _get_user_buffer_size_input_10000_76:
      000007                        512 	.ds 10
      000011                        513 _main_buffer_40003_89:
      000011                        514 	.ds 256
      000111                        515 _main_buffer_40003_94:
      000111                        516 	.ds 256
                                    517 ;--------------------------------------------------------
                                    518 ; absolute external ram data
                                    519 ;--------------------------------------------------------
                                    520 	.area XABS    (ABS,XDATA)
                                    521 ;--------------------------------------------------------
                                    522 ; initialized external ram data
                                    523 ;--------------------------------------------------------
                                    524 	.area XISEG   (XDATA)
                                    525 	.area HOME    (CODE)
                                    526 	.area GSINIT0 (CODE)
                                    527 	.area GSINIT1 (CODE)
                                    528 	.area GSINIT2 (CODE)
                                    529 	.area GSINIT3 (CODE)
                                    530 	.area GSINIT4 (CODE)
                                    531 	.area GSINIT5 (CODE)
                                    532 	.area GSINIT  (CODE)
                                    533 	.area GSFINAL (CODE)
                                    534 	.area CSEG    (CODE)
                                    535 ;--------------------------------------------------------
                                    536 ; interrupt vector
                                    537 ;--------------------------------------------------------
                                    538 	.area HOME    (CODE)
      000000                        539 __interrupt_vect:
      000000 02r00r00         [24]  540 	ljmp	__sdcc_gsinit_startup
                                    541 ;--------------------------------------------------------
                                    542 ; global & static initialisations
                                    543 ;--------------------------------------------------------
                                    544 	.area HOME    (CODE)
                                    545 	.area GSINIT  (CODE)
                                    546 	.area GSFINAL (CODE)
                                    547 	.area GSINIT  (CODE)
                                    548 	.globl __sdcc_gsinit_startup
                                    549 	.globl __sdcc_program_startup
                                    550 	.globl __start__stack
                                    551 	.globl __mcs51_genXINIT
                                    552 	.globl __mcs51_genXRAMCLEAR
                                    553 	.globl __mcs51_genRAMCLEAR
                                    554 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  555 	ljmp	__sdcc_program_startup
                                    556 ;--------------------------------------------------------
                                    557 ; Home
                                    558 ;--------------------------------------------------------
                                    559 	.area HOME    (CODE)
                                    560 	.area HOME    (CODE)
      000003                        561 __sdcc_program_startup:
      000003 02r02r3E         [24]  562 	ljmp	_main
                                    563 ;	return from main will return to caller
                                    564 ;--------------------------------------------------------
                                    565 ; code
                                    566 ;--------------------------------------------------------
                                    567 	.area CSEG    (CODE)
                                    568 ;------------------------------------------------------------
                                    569 ;Allocation info for local variables in function 'hex_to_int'
                                    570 ;------------------------------------------------------------
                                    571 ;str                       Allocated with name '_hex_to_int_str_10000_69'
                                    572 ;i                         Allocated with name '_hex_to_int_i_10000_70'
                                    573 ;result                    Allocated with name '_hex_to_int_result_10000_70'
                                    574 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_71'
                                    575 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    576 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    577 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    578 ;------------------------------------------------------------
                                    579 ;	main.c:9: int hex_to_int(char* str)
                                    580 ;	-----------------------------------------
                                    581 ;	 function hex_to_int
                                    582 ;	-----------------------------------------
      000000                        583 _hex_to_int:
                           000007   584 	ar7 = 0x07
                           000006   585 	ar6 = 0x06
                           000005   586 	ar5 = 0x05
                           000004   587 	ar4 = 0x04
                           000003   588 	ar3 = 0x03
                           000002   589 	ar2 = 0x02
                           000001   590 	ar1 = 0x01
                           000000   591 	ar0 = 0x00
      000000 AF F0            [24]  592 	mov	r7,b
      000002 AE 83            [24]  593 	mov	r6,dph
      000004 E5 82            [12]  594 	mov	a,dpl
      000006 90r00r00         [24]  595 	mov	dptr,#_hex_to_int_str_10000_69
      000009 F0               [24]  596 	movx	@dptr,a
      00000A EE               [12]  597 	mov	a,r6
      00000B A3               [24]  598 	inc	dptr
      00000C F0               [24]  599 	movx	@dptr,a
      00000D EF               [12]  600 	mov	a,r7
      00000E A3               [24]  601 	inc	dptr
      00000F F0               [24]  602 	movx	@dptr,a
                                    603 ;	main.c:12: int i = 0, result = 0;
      000010 90r00r03         [24]  604 	mov	dptr,#_hex_to_int_result_10000_70
      000013 E4               [12]  605 	clr	a
      000014 F0               [24]  606 	movx	@dptr,a
      000015 A3               [24]  607 	inc	dptr
      000016 F0               [24]  608 	movx	@dptr,a
                                    609 ;	main.c:13: while(str[i] != '\0')
      000017 90r00r00         [24]  610 	mov	dptr,#_hex_to_int_str_10000_69
      00001A E0               [24]  611 	movx	a,@dptr
      00001B FD               [12]  612 	mov	r5,a
      00001C A3               [24]  613 	inc	dptr
      00001D E0               [24]  614 	movx	a,@dptr
      00001E FE               [12]  615 	mov	r6,a
      00001F A3               [24]  616 	inc	dptr
      000020 E0               [24]  617 	movx	a,@dptr
      000021 FF               [12]  618 	mov	r7,a
      000022 8D 02            [24]  619 	mov	ar2,r5
      000024 8E 03            [24]  620 	mov	ar3,r6
      000026 8F 04            [24]  621 	mov	ar4,r7
      000028 8D*00            [24]  622 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  623 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  624 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  625 	mov	r0,#0x00
      000030 79 00            [12]  626 	mov	r1,#0x00
      000032                        627 00112$:
      000032 C0 02            [24]  628 	push	ar2
      000034 C0 03            [24]  629 	push	ar3
      000036 C0 04            [24]  630 	push	ar4
      000038 E8               [12]  631 	mov	a,r0
      000039 25*00            [12]  632 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  633 	mov	r2,a
      00003C E9               [12]  634 	mov	a,r1
      00003D 35*01            [12]  635 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  636 	mov	r3,a
      000040 AC*02            [24]  637 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  638 	mov	dpl,r2
      000044 8B 83            [24]  639 	mov	dph,r3
      000046 8C F0            [24]  640 	mov	b,r4
      000048 12r00r00         [24]  641 	lcall	__gptrget
      00004B F5*03            [12]  642 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  643 	pop	ar4
      00004F D0 03            [24]  644 	pop	ar3
      000051 D0 02            [24]  645 	pop	ar2
      000053 E5*03            [12]  646 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  647 	jnz	00166$
      000057 02r01rAE         [24]  648 	ljmp	00114$
      00005A                        649 00166$:
                                    650 ;	main.c:15: int ASCII = (int)str[i];
      00005A C0 02            [24]  651 	push	ar2
      00005C C0 03            [24]  652 	push	ar3
      00005E C0 04            [24]  653 	push	ar4
      000060 85*03*04         [24]  654 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  655 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  656 	mov	dptr,#_hex_to_int_ASCII_20000_71
      000069 E5*04            [12]  657 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  658 	movx	@dptr,a
      00006C E5*05            [12]  659 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  660 	inc	dptr
      00006F F0               [24]  661 	movx	@dptr,a
                                    662 ;	main.c:16: result *= 16;
      000070 90r00r03         [24]  663 	mov	dptr,#_hex_to_int_result_10000_70
      000073 E0               [24]  664 	movx	a,@dptr
      000074 FB               [12]  665 	mov	r3,a
      000075 A3               [24]  666 	inc	dptr
      000076 E0               [24]  667 	movx	a,@dptr
      000077 C4               [12]  668 	swap	a
      000078 54 F0            [12]  669 	anl	a,#0xf0
      00007A CB               [12]  670 	xch	a,r3
      00007B C4               [12]  671 	swap	a
      00007C CB               [12]  672 	xch	a,r3
      00007D 6B               [12]  673 	xrl	a,r3
      00007E CB               [12]  674 	xch	a,r3
      00007F 54 F0            [12]  675 	anl	a,#0xf0
      000081 CB               [12]  676 	xch	a,r3
      000082 6B               [12]  677 	xrl	a,r3
      000083 FC               [12]  678 	mov	r4,a
      000084 90r00r03         [24]  679 	mov	dptr,#_hex_to_int_result_10000_70
      000087 EB               [12]  680 	mov	a,r3
      000088 F0               [24]  681 	movx	@dptr,a
      000089 EC               [12]  682 	mov	a,r4
      00008A A3               [24]  683 	inc	dptr
      00008B F0               [24]  684 	movx	@dptr,a
                                    685 ;	main.c:17: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  686 	clr	c
      00008D E5*04            [12]  687 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  688 	subb	a,#0x30
      000091 E5*05            [12]  689 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  690 	xrl	a,#0x80
      000095 94 80            [12]  691 	subb	a,#0x80
      000097 D0 04            [24]  692 	pop	ar4
      000099 D0 03            [24]  693 	pop	ar3
      00009B D0 02            [24]  694 	pop	ar2
      00009D 40 3F            [24]  695 	jc	00109$
      00009F 74 39            [12]  696 	mov	a,#0x39
      0000A1 95*04            [12]  697 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  698 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  699 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  700 	xrl	b,#0x80
      0000AB 95 F0            [12]  701 	subb	a,b
      0000AD 40 2F            [24]  702 	jc	00109$
                                    703 ;	main.c:19: result += str[i] - 48;
      0000AF C0 02            [24]  704 	push	ar2
      0000B1 C0 03            [24]  705 	push	ar3
      0000B3 C0 04            [24]  706 	push	ar4
      0000B5 E5*04            [12]  707 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  708 	add	a,#0xd0
      0000B9 F5*04            [12]  709 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  710 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  711 	addc	a,#0xff
      0000BF F5*05            [12]  712 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  713 	mov	dptr,#_hex_to_int_result_10000_70
      0000C4 E0               [24]  714 	movx	a,@dptr
      0000C5 FA               [12]  715 	mov	r2,a
      0000C6 A3               [24]  716 	inc	dptr
      0000C7 E0               [24]  717 	movx	a,@dptr
      0000C8 FC               [12]  718 	mov	r4,a
      0000C9 90r00r03         [24]  719 	mov	dptr,#_hex_to_int_result_10000_70
      0000CC E5*04            [12]  720 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  721 	add	a, r2
      0000CF F0               [24]  722 	movx	@dptr,a
      0000D0 E5*05            [12]  723 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  724 	addc	a, r4
      0000D3 A3               [24]  725 	inc	dptr
      0000D4 F0               [24]  726 	movx	@dptr,a
      0000D5 D0 04            [24]  727 	pop	ar4
      0000D7 D0 03            [24]  728 	pop	ar3
      0000D9 D0 02            [24]  729 	pop	ar2
      0000DB 02r01rA6         [24]  730 	ljmp	00110$
      0000DE                        731 00109$:
                                    732 ;	main.c:21: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  733 	mov	dptr,#_hex_to_int_ASCII_20000_71
      0000E1 E0               [24]  734 	movx	a,@dptr
      0000E2 F5*04            [12]  735 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  736 	inc	dptr
      0000E5 E0               [24]  737 	movx	a,@dptr
      0000E6 F5*05            [12]  738 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  739 	clr	c
      0000E9 E5*04            [12]  740 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  741 	subb	a,#0x41
      0000ED E5*05            [12]  742 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  743 	xrl	a,#0x80
      0000F1 94 80            [12]  744 	subb	a,#0x80
      0000F3 40 4E            [24]  745 	jc	00105$
      0000F5 74 46            [12]  746 	mov	a,#0x46
      0000F7 95*04            [12]  747 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  748 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  749 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  750 	xrl	b,#0x80
      000101 95 F0            [12]  751 	subb	a,b
      000103 40 3E            [24]  752 	jc	00105$
                                    753 ;	main.c:23: result += str[i] - 55;
      000105 C0 05            [24]  754 	push	ar5
      000107 C0 06            [24]  755 	push	ar6
      000109 C0 07            [24]  756 	push	ar7
      00010B E8               [12]  757 	mov	a,r0
      00010C 2A               [12]  758 	add	a, r2
      00010D FD               [12]  759 	mov	r5,a
      00010E E9               [12]  760 	mov	a,r1
      00010F 3B               [12]  761 	addc	a, r3
      000110 FE               [12]  762 	mov	r6,a
      000111 8C 07            [24]  763 	mov	ar7,r4
      000113 8D 82            [24]  764 	mov	dpl,r5
      000115 8E 83            [24]  765 	mov	dph,r6
      000117 8F F0            [24]  766 	mov	b,r7
      000119 12r00r00         [24]  767 	lcall	__gptrget
      00011C 7F 00            [12]  768 	mov	r7,#0x00
      00011E 24 C9            [12]  769 	add	a,#0xc9
      000120 F5*04            [12]  770 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  771 	mov	a,r7
      000123 34 FF            [12]  772 	addc	a,#0xff
      000125 F5*05            [12]  773 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  774 	mov	dptr,#_hex_to_int_result_10000_70
      00012A E0               [24]  775 	movx	a,@dptr
      00012B FE               [12]  776 	mov	r6,a
      00012C A3               [24]  777 	inc	dptr
      00012D E0               [24]  778 	movx	a,@dptr
      00012E FF               [12]  779 	mov	r7,a
      00012F 90r00r03         [24]  780 	mov	dptr,#_hex_to_int_result_10000_70
      000132 E5*04            [12]  781 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  782 	add	a, r6
      000135 F0               [24]  783 	movx	@dptr,a
      000136 E5*05            [12]  784 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  785 	addc	a, r7
      000139 A3               [24]  786 	inc	dptr
      00013A F0               [24]  787 	movx	@dptr,a
      00013B D0 07            [24]  788 	pop	ar7
      00013D D0 06            [24]  789 	pop	ar6
      00013F D0 05            [24]  790 	pop	ar5
      000141 80 63            [24]  791 	sjmp	00110$
      000143                        792 00105$:
                                    793 ;	main.c:25: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  794 	mov	dptr,#_hex_to_int_ASCII_20000_71
      000146 E0               [24]  795 	movx	a,@dptr
      000147 F5*04            [12]  796 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  797 	inc	dptr
      00014A E0               [24]  798 	movx	a,@dptr
      00014B F5*05            [12]  799 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  800 	clr	c
      00014E E5*04            [12]  801 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  802 	subb	a,#0x61
      000152 E5*05            [12]  803 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  804 	xrl	a,#0x80
      000156 94 80            [12]  805 	subb	a,#0x80
      000158 40 4C            [24]  806 	jc	00110$
      00015A 74 66            [12]  807 	mov	a,#0x66
      00015C 95*04            [12]  808 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  809 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  810 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  811 	xrl	b,#0x80
      000166 95 F0            [12]  812 	subb	a,b
      000168 40 3C            [24]  813 	jc	00110$
                                    814 ;	main.c:27: result += str[i] - 87;
      00016A C0 02            [24]  815 	push	ar2
      00016C C0 03            [24]  816 	push	ar3
      00016E C0 04            [24]  817 	push	ar4
      000170 E8               [12]  818 	mov	a,r0
      000171 2D               [12]  819 	add	a, r5
      000172 FA               [12]  820 	mov	r2,a
      000173 E9               [12]  821 	mov	a,r1
      000174 3E               [12]  822 	addc	a, r6
      000175 FB               [12]  823 	mov	r3,a
      000176 8F 04            [24]  824 	mov	ar4,r7
      000178 8A 82            [24]  825 	mov	dpl,r2
      00017A 8B 83            [24]  826 	mov	dph,r3
      00017C 8C F0            [24]  827 	mov	b,r4
      00017E 12r00r00         [24]  828 	lcall	__gptrget
      000181 7C 00            [12]  829 	mov	r4,#0x00
      000183 24 A9            [12]  830 	add	a,#0xa9
      000185 F5*04            [12]  831 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  832 	mov	a,r4
      000188 34 FF            [12]  833 	addc	a,#0xff
      00018A F5*05            [12]  834 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  835 	mov	dptr,#_hex_to_int_result_10000_70
      00018F E0               [24]  836 	movx	a,@dptr
      000190 FB               [12]  837 	mov	r3,a
      000191 A3               [24]  838 	inc	dptr
      000192 E0               [24]  839 	movx	a,@dptr
      000193 FC               [12]  840 	mov	r4,a
      000194 90r00r03         [24]  841 	mov	dptr,#_hex_to_int_result_10000_70
      000197 E5*04            [12]  842 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  843 	add	a, r3
      00019A F0               [24]  844 	movx	@dptr,a
      00019B E5*05            [12]  845 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  846 	addc	a, r4
      00019E A3               [24]  847 	inc	dptr
      00019F F0               [24]  848 	movx	@dptr,a
                                    849 ;	main.c:31: return result;
      0001A0 D0 04            [24]  850 	pop	ar4
      0001A2 D0 03            [24]  851 	pop	ar3
      0001A4 D0 02            [24]  852 	pop	ar2
                                    853 ;	main.c:27: result += str[i] - 87;
      0001A6                        854 00110$:
                                    855 ;	main.c:29: i++;
      0001A6 08               [12]  856 	inc	r0
      0001A7 B8 00 01         [24]  857 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  858 	inc	r1
      0001AB                        859 00173$:
      0001AB 02r00r32         [24]  860 	ljmp	00112$
      0001AE                        861 00114$:
                                    862 ;	main.c:31: return result;
      0001AE 90r00r03         [24]  863 	mov	dptr,#_hex_to_int_result_10000_70
      0001B1 E0               [24]  864 	movx	a,@dptr
      0001B2 FE               [12]  865 	mov	r6,a
      0001B3 A3               [24]  866 	inc	dptr
      0001B4 E0               [24]  867 	movx	a,@dptr
                                    868 ;	main.c:33: }
      0001B5 8E 82            [24]  869 	mov	dpl,r6
      0001B7 F5 83            [12]  870 	mov	dph,a
      0001B9 22               [24]  871 	ret
                                    872 ;------------------------------------------------------------
                                    873 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    874 ;------------------------------------------------------------
                                    875 ;i                         Allocated with name '_get_user_buffer_size_i_10000_76'
                                    876 ;output                    Allocated with name '_get_user_buffer_size_output_10000_76'
                                    877 ;input                     Allocated with name '_get_user_buffer_size_input_10000_76'
                                    878 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_76'
                                    879 ;------------------------------------------------------------
                                    880 ;	main.c:36: int get_user_buffer_size(void)
                                    881 ;	-----------------------------------------
                                    882 ;	 function get_user_buffer_size
                                    883 ;	-----------------------------------------
      0001BA                        884 _get_user_buffer_size:
                                    885 ;	main.c:42: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  886 	mov	r6,#0x00
      0001BC 7F 00            [12]  887 	mov	r7,#0x00
      0001BE                        888 00103$:
      0001BE C0 07            [24]  889 	push	ar7
      0001C0 C0 06            [24]  890 	push	ar6
      0001C2 12r00r00         [24]  891 	lcall	_getchar
      0001C5 AC 82            [24]  892 	mov	r4, dpl
      0001C7 D0 06            [24]  893 	pop	ar6
      0001C9 D0 07            [24]  894 	pop	ar7
      0001CB BC 0A 02         [24]  895 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  896 	sjmp	00105$
      0001D0                        897 00133$:
      0001D0 BC 0D 02         [24]  898 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  899 	sjmp	00105$
      0001D5                        900 00134$:
      0001D5 C3               [12]  901 	clr	c
      0001D6 EE               [12]  902 	mov	a,r6
      0001D7 94 09            [12]  903 	subb	a,#0x09
      0001D9 EF               [12]  904 	mov	a,r7
      0001DA 64 80            [12]  905 	xrl	a,#0x80
      0001DC 94 80            [12]  906 	subb	a,#0x80
      0001DE 50 2A            [24]  907 	jnc	00105$
                                    908 ;	main.c:44: putchar(ch);
      0001E0 8C 03            [24]  909 	mov	ar3,r4
      0001E2 7D 00            [12]  910 	mov	r5,#0x00
      0001E4 8B 82            [24]  911 	mov	dpl, r3
      0001E6 8D 83            [24]  912 	mov	dph, r5
      0001E8 C0 07            [24]  913 	push	ar7
      0001EA C0 06            [24]  914 	push	ar6
      0001EC C0 04            [24]  915 	push	ar4
      0001EE 12r00r00         [24]  916 	lcall	_putchar
      0001F1 D0 04            [24]  917 	pop	ar4
      0001F3 D0 06            [24]  918 	pop	ar6
      0001F5 D0 07            [24]  919 	pop	ar7
                                    920 ;	main.c:45: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12]  921 	mov	a,r6
      0001F8 24r07            [12]  922 	add	a, #_get_user_buffer_size_input_10000_76
      0001FA F5 82            [12]  923 	mov	dpl,a
      0001FC EF               [12]  924 	mov	a,r7
      0001FD 34s00            [12]  925 	addc	a, #(_get_user_buffer_size_input_10000_76 >> 8)
      0001FF F5 83            [12]  926 	mov	dph,a
      000201 EC               [12]  927 	mov	a,r4
      000202 F0               [24]  928 	movx	@dptr,a
                                    929 ;	main.c:46: i++;
      000203 0E               [12]  930 	inc	r6
      000204 BE 00 B7         [24]  931 	cjne	r6,#0x00,00103$
      000207 0F               [12]  932 	inc	r7
      000208 80 B4            [24]  933 	sjmp	00103$
      00020A                        934 00105$:
                                    935 ;	main.c:48: input[i] = '\0';
      00020A EE               [12]  936 	mov	a,r6
      00020B 24r07            [12]  937 	add	a, #_get_user_buffer_size_input_10000_76
      00020D F5 82            [12]  938 	mov	dpl,a
      00020F EF               [12]  939 	mov	a,r7
      000210 34s00            [12]  940 	addc	a, #(_get_user_buffer_size_input_10000_76 >> 8)
      000212 F5 83            [12]  941 	mov	dph,a
      000214 E4               [12]  942 	clr	a
      000215 F0               [24]  943 	movx	@dptr,a
                                    944 ;	main.c:49: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24]  945 	mov	dptr,#_get_user_buffer_size_input_10000_76
      000219 F5 F0            [12]  946 	mov	b,a
      00021B 12r00r00         [24]  947 	lcall	_hex_to_int
      00021E AE 82            [24]  948 	mov	r6, dpl
      000220 AF 83            [24]  949 	mov	r7, dph
                                    950 ;	main.c:50: printf_tiny("\n\r");
      000222 C0 07            [24]  951 	push	ar7
      000224 C0 06            [24]  952 	push	ar6
      000226 74r00            [12]  953 	mov	a,#___str_0
      000228 C0 E0            [24]  954 	push	acc
      00022A 74s00            [12]  955 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24]  956 	push	acc
      00022E 12r00r00         [24]  957 	lcall	_printf_tiny
      000231 15 81            [12]  958 	dec	sp
      000233 15 81            [12]  959 	dec	sp
      000235 D0 06            [24]  960 	pop	ar6
      000237 D0 07            [24]  961 	pop	ar7
                                    962 ;	main.c:52: return output;
      000239 8E 82            [24]  963 	mov	dpl, r6
      00023B 8F 83            [24]  964 	mov	dph, r7
                                    965 ;	main.c:53: }
      00023D 22               [24]  966 	ret
                                    967 ;------------------------------------------------------------
                                    968 ;Allocation info for local variables in function 'main'
                                    969 ;------------------------------------------------------------
                                    970 ;c                         Allocated with name '_main_c_20001_81'
                                    971 ;reg_bank                  Allocated with name '_main_reg_bank_40002_84'
                                    972 ;addr                      Allocated with name '_main_addr_40003_85'
                                    973 ;data                      Allocated with name '_main_data_40004_86'
                                    974 ;num_bytes                 Allocated with name '_main_num_bytes_40002_88'
                                    975 ;start_address             Allocated with name '_main_start_address_40003_89'
                                    976 ;buffer                    Allocated with name '_main_buffer_40003_89'
                                    977 ;i                         Allocated with name '_main_i_50003_90'
                                    978 ;num_bytes                 Allocated with name '_main_num_bytes_40002_93'
                                    979 ;start_address             Allocated with name '_main_start_address_40003_94'
                                    980 ;buffer                    Allocated with name '_main_buffer_40003_94'
                                    981 ;i                         Allocated with name '_main_i_50003_95'
                                    982 ;reg_bank                  Allocated with name '_main_reg_bank_40002_98'
                                    983 ;addr                      Allocated with name '_main_addr_40003_99'
                                    984 ;data                      Allocated with name '_main_data_40003_99'
                                    985 ;addr                      Allocated with name '_main_addr_40002_101'
                                    986 ;data                      Allocated with name '_main_data_40003_102'
                                    987 ;addr                      Allocated with name '_main_addr_40002_104'
                                    988 ;data                      Allocated with name '_main_data_40002_104'
                                    989 ;addr                      Allocated with name '_main_addr_40002_107'
                                    990 ;bank                      Allocated with name '_main_bank_40003_108'
                                    991 ;data                      Allocated with name '_main_data_40003_108'
                                    992 ;------------------------------------------------------------
                                    993 ;	main.c:55: void main(void)
                                    994 ;	-----------------------------------------
                                    995 ;	 function main
                                    996 ;	-----------------------------------------
      00023E                        997 _main:
                                    998 ;	main.c:57: printf("SPI Operations on 8051\n\r");
      00023E 74r03            [12]  999 	mov	a,#___str_1
      000240 C0 E0            [24] 1000 	push	acc
      000242 74s00            [12] 1001 	mov	a,#(___str_1 >> 8)
      000244 C0 E0            [24] 1002 	push	acc
      000246 74 80            [12] 1003 	mov	a,#0x80
      000248 C0 E0            [24] 1004 	push	acc
      00024A 12r00r00         [24] 1005 	lcall	_printf
      00024D 15 81            [12] 1006 	dec	sp
      00024F 15 81            [12] 1007 	dec	sp
      000251 15 81            [12] 1008 	dec	sp
                                   1009 ;	main.c:58: configure_SPI();
      000253 12r00r00         [24] 1010 	lcall	_configure_SPI
                                   1011 ;	main.c:59: init_ENC();
      000256 12r00r00         [24] 1012 	lcall	_init_ENC
                                   1013 ;	main.c:61: while(1)
      000259                       1014 00117$:
                                   1015 ;	main.c:63: printf("\n\rChoose an action: \n\r");
      000259 74r1C            [12] 1016 	mov	a,#___str_2
      00025B C0 E0            [24] 1017 	push	acc
      00025D 74s00            [12] 1018 	mov	a,#(___str_2 >> 8)
      00025F C0 E0            [24] 1019 	push	acc
      000261 74 80            [12] 1020 	mov	a,#0x80
      000263 C0 E0            [24] 1021 	push	acc
      000265 12r00r00         [24] 1022 	lcall	_printf
      000268 15 81            [12] 1023 	dec	sp
      00026A 15 81            [12] 1024 	dec	sp
      00026C 15 81            [12] 1025 	dec	sp
                                   1026 ;	main.c:64: printf("1 --> Control Write\n\r");
      00026E 74r33            [12] 1027 	mov	a,#___str_3
      000270 C0 E0            [24] 1028 	push	acc
      000272 74s00            [12] 1029 	mov	a,#(___str_3 >> 8)
      000274 C0 E0            [24] 1030 	push	acc
      000276 74 80            [12] 1031 	mov	a,#0x80
      000278 C0 E0            [24] 1032 	push	acc
      00027A 12r00r00         [24] 1033 	lcall	_printf
      00027D 15 81            [12] 1034 	dec	sp
      00027F 15 81            [12] 1035 	dec	sp
      000281 15 81            [12] 1036 	dec	sp
                                   1037 ;	main.c:65: printf("2 --> Buffer Write\n\r");
      000283 74r49            [12] 1038 	mov	a,#___str_4
      000285 C0 E0            [24] 1039 	push	acc
      000287 74s00            [12] 1040 	mov	a,#(___str_4 >> 8)
      000289 C0 E0            [24] 1041 	push	acc
      00028B 74 80            [12] 1042 	mov	a,#0x80
      00028D C0 E0            [24] 1043 	push	acc
      00028F 12r00r00         [24] 1044 	lcall	_printf
      000292 15 81            [12] 1045 	dec	sp
      000294 15 81            [12] 1046 	dec	sp
      000296 15 81            [12] 1047 	dec	sp
                                   1048 ;	main.c:66: printf("3 --> Buffer Read\n\r");
      000298 74r5E            [12] 1049 	mov	a,#___str_5
      00029A C0 E0            [24] 1050 	push	acc
      00029C 74s00            [12] 1051 	mov	a,#(___str_5 >> 8)
      00029E C0 E0            [24] 1052 	push	acc
      0002A0 74 80            [12] 1053 	mov	a,#0x80
      0002A2 C0 E0            [24] 1054 	push	acc
      0002A4 12r00r00         [24] 1055 	lcall	_printf
      0002A7 15 81            [12] 1056 	dec	sp
      0002A9 15 81            [12] 1057 	dec	sp
      0002AB 15 81            [12] 1058 	dec	sp
                                   1059 ;	main.c:67: printf("4 --> MAC Register Read\n\r");
      0002AD 74r72            [12] 1060 	mov	a,#___str_6
      0002AF C0 E0            [24] 1061 	push	acc
      0002B1 74s00            [12] 1062 	mov	a,#(___str_6 >> 8)
      0002B3 C0 E0            [24] 1063 	push	acc
      0002B5 74 80            [12] 1064 	mov	a,#0x80
      0002B7 C0 E0            [24] 1065 	push	acc
      0002B9 12r00r00         [24] 1066 	lcall	_printf
      0002BC 15 81            [12] 1067 	dec	sp
      0002BE 15 81            [12] 1068 	dec	sp
      0002C0 15 81            [12] 1069 	dec	sp
                                   1070 ;	main.c:68: printf("5 --> PHY SPI Write\n\r");
      0002C2 74r8C            [12] 1071 	mov	a,#___str_7
      0002C4 C0 E0            [24] 1072 	push	acc
      0002C6 74s00            [12] 1073 	mov	a,#(___str_7 >> 8)
      0002C8 C0 E0            [24] 1074 	push	acc
      0002CA 74 80            [12] 1075 	mov	a,#0x80
      0002CC C0 E0            [24] 1076 	push	acc
      0002CE 12r00r00         [24] 1077 	lcall	_printf
      0002D1 15 81            [12] 1078 	dec	sp
      0002D3 15 81            [12] 1079 	dec	sp
      0002D5 15 81            [12] 1080 	dec	sp
                                   1081 ;	main.c:69: printf("6 --> PHY SPI Read\n\r");
      0002D7 74rA2            [12] 1082 	mov	a,#___str_8
      0002D9 C0 E0            [24] 1083 	push	acc
      0002DB 74s00            [12] 1084 	mov	a,#(___str_8 >> 8)
      0002DD C0 E0            [24] 1085 	push	acc
      0002DF 74 80            [12] 1086 	mov	a,#0x80
      0002E1 C0 E0            [24] 1087 	push	acc
      0002E3 12r00r00         [24] 1088 	lcall	_printf
      0002E6 15 81            [12] 1089 	dec	sp
      0002E8 15 81            [12] 1090 	dec	sp
      0002EA 15 81            [12] 1091 	dec	sp
                                   1092 ;	main.c:70: printf("7 --> ENC Reset\n\r");
      0002EC 74rB7            [12] 1093 	mov	a,#___str_9
      0002EE C0 E0            [24] 1094 	push	acc
      0002F0 74s00            [12] 1095 	mov	a,#(___str_9 >> 8)
      0002F2 C0 E0            [24] 1096 	push	acc
      0002F4 74 80            [12] 1097 	mov	a,#0x80
      0002F6 C0 E0            [24] 1098 	push	acc
      0002F8 12r00r00         [24] 1099 	lcall	_printf
      0002FB 15 81            [12] 1100 	dec	sp
      0002FD 15 81            [12] 1101 	dec	sp
      0002FF 15 81            [12] 1102 	dec	sp
                                   1103 ;	main.c:71: printf("8 --> Read ETH Register\n\r");
      000301 74rC9            [12] 1104 	mov	a,#___str_10
      000303 C0 E0            [24] 1105 	push	acc
      000305 74s00            [12] 1106 	mov	a,#(___str_10 >> 8)
      000307 C0 E0            [24] 1107 	push	acc
      000309 74 80            [12] 1108 	mov	a,#0x80
      00030B C0 E0            [24] 1109 	push	acc
      00030D 12r00r00         [24] 1110 	lcall	_printf
      000310 15 81            [12] 1111 	dec	sp
      000312 15 81            [12] 1112 	dec	sp
      000314 15 81            [12] 1113 	dec	sp
                                   1114 ;	main.c:72: printf("9 --> Display Menu\n\r");
      000316 74rE3            [12] 1115 	mov	a,#___str_11
      000318 C0 E0            [24] 1116 	push	acc
      00031A 74s00            [12] 1117 	mov	a,#(___str_11 >> 8)
      00031C C0 E0            [24] 1118 	push	acc
      00031E 74 80            [12] 1119 	mov	a,#0x80
      000320 C0 E0            [24] 1120 	push	acc
      000322 12r00r00         [24] 1121 	lcall	_printf
      000325 15 81            [12] 1122 	dec	sp
      000327 15 81            [12] 1123 	dec	sp
      000329 15 81            [12] 1124 	dec	sp
                                   1125 ;	main.c:73: printf("A --> Send ARP Request\n\r");
      00032B 74rF8            [12] 1126 	mov	a,#___str_12
      00032D C0 E0            [24] 1127 	push	acc
      00032F 74s00            [12] 1128 	mov	a,#(___str_12 >> 8)
      000331 C0 E0            [24] 1129 	push	acc
      000333 74 80            [12] 1130 	mov	a,#0x80
      000335 C0 E0            [24] 1131 	push	acc
      000337 12r00r00         [24] 1132 	lcall	_printf
      00033A 15 81            [12] 1133 	dec	sp
      00033C 15 81            [12] 1134 	dec	sp
      00033E 15 81            [12] 1135 	dec	sp
                                   1136 ;	main.c:74: printf("B --> Init RX buffers\n\r");
      000340 74r11            [12] 1137 	mov	a,#___str_13
      000342 C0 E0            [24] 1138 	push	acc
      000344 74s01            [12] 1139 	mov	a,#(___str_13 >> 8)
      000346 C0 E0            [24] 1140 	push	acc
      000348 74 80            [12] 1141 	mov	a,#0x80
      00034A C0 E0            [24] 1142 	push	acc
      00034C 12r00r00         [24] 1143 	lcall	_printf
      00034F 15 81            [12] 1144 	dec	sp
      000351 15 81            [12] 1145 	dec	sp
      000353 15 81            [12] 1146 	dec	sp
                                   1147 ;	main.c:76: char c = getchar();
      000355 12r00r00         [24] 1148 	lcall	_getchar
      000358 AE 82            [24] 1149 	mov	r6, dpl
                                   1150 ;	main.c:77: putchar(c);
      00035A 8E 05            [24] 1151 	mov	ar5,r6
      00035C 7F 00            [12] 1152 	mov	r7,#0x00
      00035E 8D 82            [24] 1153 	mov	dpl, r5
      000360 8F 83            [24] 1154 	mov	dph, r7
      000362 C0 06            [24] 1155 	push	ar6
      000364 12r00r00         [24] 1156 	lcall	_putchar
                                   1157 ;	main.c:78: printf("\n\r");
      000367 74r00            [12] 1158 	mov	a,#___str_0
      000369 C0 E0            [24] 1159 	push	acc
      00036B 74s00            [12] 1160 	mov	a,#(___str_0 >> 8)
      00036D C0 E0            [24] 1161 	push	acc
      00036F 74 80            [12] 1162 	mov	a,#0x80
      000371 C0 E0            [24] 1163 	push	acc
      000373 12r00r00         [24] 1164 	lcall	_printf
      000376 15 81            [12] 1165 	dec	sp
      000378 15 81            [12] 1166 	dec	sp
      00037A 15 81            [12] 1167 	dec	sp
      00037C D0 06            [24] 1168 	pop	ar6
                                   1169 ;	main.c:80: switch(c)
      00037E BE 31 00         [24] 1170 	cjne	r6,#0x31,00170$
      000381                       1171 00170$:
      000381 50 03            [24] 1172 	jnc	00171$
      000383 02r08r4E         [24] 1173 	ljmp	00114$
      000386                       1174 00171$:
      000386 EE               [12] 1175 	mov	a,r6
      000387 24 BD            [12] 1176 	add	a,#0xff - 0x42
      000389 50 03            [24] 1177 	jnc	00172$
      00038B 02r08r4E         [24] 1178 	ljmp	00114$
      00038E                       1179 00172$:
      00038E EE               [12] 1180 	mov	a,r6
      00038F 24 CF            [12] 1181 	add	a,#0xcf
      000391 FE               [12] 1182 	mov	r6,a
      000392 24 0A            [12] 1183 	add	a,#(00173$-3-.)
      000394 83               [24] 1184 	movc	a,@a+pc
      000395 F5 82            [12] 1185 	mov	dpl,a
      000397 EE               [12] 1186 	mov	a,r6
      000398 24 16            [12] 1187 	add	a,#(00174$-3-.)
      00039A 83               [24] 1188 	movc	a,@a+pc
      00039B F5 83            [12] 1189 	mov	dph,a
      00039D E4               [12] 1190 	clr	a
      00039E 73               [24] 1191 	jmp	@a+dptr
      00039F                       1192 00173$:
      00039FrC3                    1193 	.db	00101$
      0003A0r2B                    1194 	.db	00102$
      0003A1r29                    1195 	.db	00104$
      0003A2rFA                    1196 	.db	00106$
      0003A3r5C                    1197 	.db	00107$
      0003A4rC7                    1198 	.db	00108$
      0003A5r02                    1199 	.db	00109$
      0003A6r1D                    1200 	.db	00110$
      0003A7r7F                    1201 	.db	00111$
      0003A8r4E                    1202 	.db	00114$
      0003A9r4E                    1203 	.db	00114$
      0003AAr4E                    1204 	.db	00114$
      0003ABr4E                    1205 	.db	00114$
      0003ACr4E                    1206 	.db	00114$
      0003ADr4E                    1207 	.db	00114$
      0003AEr4E                    1208 	.db	00114$
      0003AFr3F                    1209 	.db	00112$
      0003B0r48                    1210 	.db	00113$
      0003B1                       1211 00174$:
      0003B1s03                    1212 	.db	00101$>>8
      0003B2s04                    1213 	.db	00102$>>8
      0003B3s05                    1214 	.db	00104$>>8
      0003B4s05                    1215 	.db	00106$>>8
      0003B5s06                    1216 	.db	00107$>>8
      0003B6s06                    1217 	.db	00108$>>8
      0003B7s07                    1218 	.db	00109$>>8
      0003B8s07                    1219 	.db	00110$>>8
      0003B9s07                    1220 	.db	00111$>>8
      0003BAs08                    1221 	.db	00114$>>8
      0003BBs08                    1222 	.db	00114$>>8
      0003BCs08                    1223 	.db	00114$>>8
      0003BDs08                    1224 	.db	00114$>>8
      0003BEs08                    1225 	.db	00114$>>8
      0003BFs08                    1226 	.db	00114$>>8
      0003C0s08                    1227 	.db	00114$>>8
      0003C1s08                    1228 	.db	00112$>>8
      0003C2s08                    1229 	.db	00113$>>8
                                   1230 ;	main.c:82: case '1': {
      0003C3                       1231 00101$:
                                   1232 ;	main.c:83: printf("Enter the register bank to select:\n\r");
      0003C3 74r29            [12] 1233 	mov	a,#___str_14
      0003C5 C0 E0            [24] 1234 	push	acc
      0003C7 74s01            [12] 1235 	mov	a,#(___str_14 >> 8)
      0003C9 C0 E0            [24] 1236 	push	acc
      0003CB 74 80            [12] 1237 	mov	a,#0x80
      0003CD C0 E0            [24] 1238 	push	acc
      0003CF 12r00r00         [24] 1239 	lcall	_printf
      0003D2 15 81            [12] 1240 	dec	sp
      0003D4 15 81            [12] 1241 	dec	sp
      0003D6 15 81            [12] 1242 	dec	sp
                                   1243 ;	main.c:84: uint8_t reg_bank = get_user_buffer_size();
      0003D8 12r01rBA         [24] 1244 	lcall	_get_user_buffer_size
      0003DB AE 82            [24] 1245 	mov	r6, dpl
                                   1246 ;	main.c:85: printf("Enter the address of the Control Register:\n\r");
      0003DD C0 06            [24] 1247 	push	ar6
      0003DF 74r4E            [12] 1248 	mov	a,#___str_15
      0003E1 C0 E0            [24] 1249 	push	acc
      0003E3 74s01            [12] 1250 	mov	a,#(___str_15 >> 8)
      0003E5 C0 E0            [24] 1251 	push	acc
      0003E7 74 80            [12] 1252 	mov	a,#0x80
      0003E9 C0 E0            [24] 1253 	push	acc
      0003EB 12r00r00         [24] 1254 	lcall	_printf
      0003EE 15 81            [12] 1255 	dec	sp
      0003F0 15 81            [12] 1256 	dec	sp
      0003F2 15 81            [12] 1257 	dec	sp
                                   1258 ;	main.c:86: uint8_t addr = get_user_buffer_size();
      0003F4 12r01rBA         [24] 1259 	lcall	_get_user_buffer_size
      0003F7 AD 82            [24] 1260 	mov	r5, dpl
                                   1261 ;	main.c:87: printf("Enter the data you want to write:\n\r");
      0003F9 C0 05            [24] 1262 	push	ar5
      0003FB 74r7B            [12] 1263 	mov	a,#___str_16
      0003FD C0 E0            [24] 1264 	push	acc
      0003FF 74s01            [12] 1265 	mov	a,#(___str_16 >> 8)
      000401 C0 E0            [24] 1266 	push	acc
      000403 74 80            [12] 1267 	mov	a,#0x80
      000405 C0 E0            [24] 1268 	push	acc
      000407 12r00r00         [24] 1269 	lcall	_printf
      00040A 15 81            [12] 1270 	dec	sp
      00040C 15 81            [12] 1271 	dec	sp
      00040E 15 81            [12] 1272 	dec	sp
                                   1273 ;	main.c:88: uint8_t data = get_user_buffer_size();
      000410 12r01rBA         [24] 1274 	lcall	_get_user_buffer_size
      000413 AC 82            [24] 1275 	mov	r4, dpl
      000415 D0 05            [24] 1276 	pop	ar5
      000417 D0 06            [24] 1277 	pop	ar6
                                   1278 ;	main.c:89: spi_control_write(reg_bank, addr, data);
      000419 90r00r00         [24] 1279 	mov	dptr,#_spi_control_write_PARM_2
      00041C ED               [12] 1280 	mov	a,r5
      00041D F0               [24] 1281 	movx	@dptr,a
      00041E 90r00r00         [24] 1282 	mov	dptr,#_spi_control_write_PARM_3
      000421 EC               [12] 1283 	mov	a,r4
      000422 F0               [24] 1284 	movx	@dptr,a
      000423 8E 82            [24] 1285 	mov	dpl, r6
      000425 12r00r00         [24] 1286 	lcall	_spi_control_write
                                   1287 ;	main.c:90: break;
      000428 02r02r59         [24] 1288 	ljmp	00117$
                                   1289 ;	main.c:92: case '2': {
      00042B                       1290 00102$:
                                   1291 ;	main.c:93: printf("Enter the number of bytes to write:\n\r");
      00042B 74r9F            [12] 1292 	mov	a,#___str_17
      00042D C0 E0            [24] 1293 	push	acc
      00042F 74s01            [12] 1294 	mov	a,#(___str_17 >> 8)
      000431 C0 E0            [24] 1295 	push	acc
      000433 74 80            [12] 1296 	mov	a,#0x80
      000435 C0 E0            [24] 1297 	push	acc
      000437 12r00r00         [24] 1298 	lcall	_printf
      00043A 15 81            [12] 1299 	dec	sp
      00043C 15 81            [12] 1300 	dec	sp
      00043E 15 81            [12] 1301 	dec	sp
                                   1302 ;	main.c:94: int num_bytes = get_user_buffer_size();
      000440 12r01rBA         [24] 1303 	lcall	_get_user_buffer_size
      000443 AE 82            [24] 1304 	mov	r6, dpl
      000445 AF 83            [24] 1305 	mov	r7, dph
                                   1306 ;	main.c:95: printf("Enter the starting address:\n\r");
      000447 C0 07            [24] 1307 	push	ar7
      000449 C0 06            [24] 1308 	push	ar6
      00044B 74rC5            [12] 1309 	mov	a,#___str_18
      00044D C0 E0            [24] 1310 	push	acc
      00044F 74s01            [12] 1311 	mov	a,#(___str_18 >> 8)
      000451 C0 E0            [24] 1312 	push	acc
      000453 74 80            [12] 1313 	mov	a,#0x80
      000455 C0 E0            [24] 1314 	push	acc
      000457 12r00r00         [24] 1315 	lcall	_printf
      00045A 15 81            [12] 1316 	dec	sp
      00045C 15 81            [12] 1317 	dec	sp
      00045E 15 81            [12] 1318 	dec	sp
                                   1319 ;	main.c:96: uint16_t start_address = get_user_buffer_size();
      000460 12r01rBA         [24] 1320 	lcall	_get_user_buffer_size
      000463 AC 82            [24] 1321 	mov	r4, dpl
      000465 AD 83            [24] 1322 	mov	r5, dph
      000467 D0 06            [24] 1323 	pop	ar6
      000469 D0 07            [24] 1324 	pop	ar7
                                   1325 ;	main.c:98: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      00046B C0 07            [24] 1326 	push	ar7
      00046D C0 06            [24] 1327 	push	ar6
      00046F C0 05            [24] 1328 	push	ar5
      000471 C0 04            [24] 1329 	push	ar4
      000473 C0 06            [24] 1330 	push	ar6
      000475 C0 07            [24] 1331 	push	ar7
      000477 74rE3            [12] 1332 	mov	a,#___str_19
      000479 C0 E0            [24] 1333 	push	acc
      00047B 74s01            [12] 1334 	mov	a,#(___str_19 >> 8)
      00047D C0 E0            [24] 1335 	push	acc
      00047F 74 80            [12] 1336 	mov	a,#0x80
      000481 C0 E0            [24] 1337 	push	acc
      000483 12r00r00         [24] 1338 	lcall	_printf
      000486 E5 81            [12] 1339 	mov	a,sp
      000488 24 FB            [12] 1340 	add	a,#0xfb
      00048A F5 81            [12] 1341 	mov	sp,a
      00048C D0 04            [24] 1342 	pop	ar4
      00048E D0 05            [24] 1343 	pop	ar5
      000490 D0 06            [24] 1344 	pop	ar6
      000492 D0 07            [24] 1345 	pop	ar7
                                   1346 ;	main.c:99: for (int i = 0; i < num_bytes; i++) {
      000494 7A 00            [12] 1347 	mov	r2,#0x00
      000496 7B 00            [12] 1348 	mov	r3,#0x00
      000498                       1349 00120$:
      000498 C3               [12] 1350 	clr	c
      000499 EA               [12] 1351 	mov	a,r2
      00049A 9E               [12] 1352 	subb	a,r6
      00049B EB               [12] 1353 	mov	a,r3
      00049C 64 80            [12] 1354 	xrl	a,#0x80
      00049E 8F F0            [24] 1355 	mov	b,r7
      0004A0 63 F0 80         [24] 1356 	xrl	b,#0x80
      0004A3 95 F0            [12] 1357 	subb	a,b
      0004A5 50 63            [24] 1358 	jnc	00103$
                                   1359 ;	main.c:100: printf("Byte %d: ", i);
      0004A7 C0 04            [24] 1360 	push	ar4
      0004A9 C0 05            [24] 1361 	push	ar5
      0004AB C0 07            [24] 1362 	push	ar7
      0004AD C0 06            [24] 1363 	push	ar6
      0004AF C0 05            [24] 1364 	push	ar5
      0004B1 C0 04            [24] 1365 	push	ar4
      0004B3 C0 03            [24] 1366 	push	ar3
      0004B5 C0 02            [24] 1367 	push	ar2
      0004B7 C0 02            [24] 1368 	push	ar2
      0004B9 C0 03            [24] 1369 	push	ar3
      0004BB 74r06            [12] 1370 	mov	a,#___str_20
      0004BD C0 E0            [24] 1371 	push	acc
      0004BF 74s02            [12] 1372 	mov	a,#(___str_20 >> 8)
      0004C1 C0 E0            [24] 1373 	push	acc
      0004C3 74 80            [12] 1374 	mov	a,#0x80
      0004C5 C0 E0            [24] 1375 	push	acc
      0004C7 12r00r00         [24] 1376 	lcall	_printf
      0004CA E5 81            [12] 1377 	mov	a,sp
      0004CC 24 FB            [12] 1378 	add	a,#0xfb
      0004CE F5 81            [12] 1379 	mov	sp,a
      0004D0 D0 02            [24] 1380 	pop	ar2
      0004D2 D0 03            [24] 1381 	pop	ar3
      0004D4 D0 04            [24] 1382 	pop	ar4
      0004D6 D0 05            [24] 1383 	pop	ar5
                                   1384 ;	main.c:101: buffer[i] = get_user_buffer_size();
      0004D8 EA               [12] 1385 	mov	a,r2
      0004D9 24r11            [12] 1386 	add	a, #_main_buffer_40003_89
      0004DB F8               [12] 1387 	mov	r0,a
      0004DC EB               [12] 1388 	mov	a,r3
      0004DD 34s00            [12] 1389 	addc	a, #(_main_buffer_40003_89 >> 8)
      0004DF F9               [12] 1390 	mov	r1,a
      0004E0 C0 03            [24] 1391 	push	ar3
      0004E2 C0 02            [24] 1392 	push	ar2
      0004E4 C0 01            [24] 1393 	push	ar1
      0004E6 C0 00            [24] 1394 	push	ar0
      0004E8 12r01rBA         [24] 1395 	lcall	_get_user_buffer_size
      0004EB AC 82            [24] 1396 	mov	r4, dpl
      0004ED D0 00            [24] 1397 	pop	ar0
      0004EF D0 01            [24] 1398 	pop	ar1
      0004F1 D0 02            [24] 1399 	pop	ar2
      0004F3 D0 03            [24] 1400 	pop	ar3
      0004F5 D0 06            [24] 1401 	pop	ar6
      0004F7 D0 07            [24] 1402 	pop	ar7
      0004F9 88 82            [24] 1403 	mov	dpl,r0
      0004FB 89 83            [24] 1404 	mov	dph,r1
      0004FD EC               [12] 1405 	mov	a,r4
      0004FE F0               [24] 1406 	movx	@dptr,a
                                   1407 ;	main.c:99: for (int i = 0; i < num_bytes; i++) {
      0004FF 0A               [12] 1408 	inc	r2
      000500 BA 00 01         [24] 1409 	cjne	r2,#0x00,00176$
      000503 0B               [12] 1410 	inc	r3
      000504                       1411 00176$:
      000504 D0 05            [24] 1412 	pop	ar5
      000506 D0 04            [24] 1413 	pop	ar4
      000508 80 8E            [24] 1414 	sjmp	00120$
      00050A                       1415 00103$:
                                   1416 ;	main.c:103: spi_buffer_write(num_bytes, start_address, buffer);
      00050A 90r00r00         [24] 1417 	mov	dptr,#_spi_buffer_write_PARM_2
      00050D EC               [12] 1418 	mov	a,r4
      00050E F0               [24] 1419 	movx	@dptr,a
      00050F ED               [12] 1420 	mov	a,r5
      000510 A3               [24] 1421 	inc	dptr
      000511 F0               [24] 1422 	movx	@dptr,a
      000512 90r00r00         [24] 1423 	mov	dptr,#_spi_buffer_write_PARM_3
      000515 74r11            [12] 1424 	mov	a,#_main_buffer_40003_89
      000517 F0               [24] 1425 	movx	@dptr,a
      000518 74s00            [12] 1426 	mov	a,#(_main_buffer_40003_89 >> 8)
      00051A A3               [24] 1427 	inc	dptr
      00051B F0               [24] 1428 	movx	@dptr,a
      00051C E4               [12] 1429 	clr	a
      00051D A3               [24] 1430 	inc	dptr
      00051E F0               [24] 1431 	movx	@dptr,a
      00051F 8E 82            [24] 1432 	mov	dpl, r6
      000521 8F 83            [24] 1433 	mov	dph, r7
      000523 12r00r00         [24] 1434 	lcall	_spi_buffer_write
                                   1435 ;	main.c:104: break;
      000526 02r02r59         [24] 1436 	ljmp	00117$
                                   1437 ;	main.c:106: case '3': {
      000529                       1438 00104$:
                                   1439 ;	main.c:107: printf("Enter the number of bytes to read:\n\r");
      000529 74r10            [12] 1440 	mov	a,#___str_21
      00052B C0 E0            [24] 1441 	push	acc
      00052D 74s02            [12] 1442 	mov	a,#(___str_21 >> 8)
      00052F C0 E0            [24] 1443 	push	acc
      000531 74 80            [12] 1444 	mov	a,#0x80
      000533 C0 E0            [24] 1445 	push	acc
      000535 12r00r00         [24] 1446 	lcall	_printf
      000538 15 81            [12] 1447 	dec	sp
      00053A 15 81            [12] 1448 	dec	sp
      00053C 15 81            [12] 1449 	dec	sp
                                   1450 ;	main.c:108: int num_bytes = get_user_buffer_size();
      00053E 12r01rBA         [24] 1451 	lcall	_get_user_buffer_size
      000541 AE 82            [24] 1452 	mov	r6, dpl
      000543 AF 83            [24] 1453 	mov	r7, dph
                                   1454 ;	main.c:109: printf("Enter the starting address:\n\r");
      000545 C0 07            [24] 1455 	push	ar7
      000547 C0 06            [24] 1456 	push	ar6
      000549 74rC5            [12] 1457 	mov	a,#___str_18
      00054B C0 E0            [24] 1458 	push	acc
      00054D 74s01            [12] 1459 	mov	a,#(___str_18 >> 8)
      00054F C0 E0            [24] 1460 	push	acc
      000551 74 80            [12] 1461 	mov	a,#0x80
      000553 C0 E0            [24] 1462 	push	acc
      000555 12r00r00         [24] 1463 	lcall	_printf
      000558 15 81            [12] 1464 	dec	sp
      00055A 15 81            [12] 1465 	dec	sp
      00055C 15 81            [12] 1466 	dec	sp
                                   1467 ;	main.c:110: uint16_t start_address = get_user_buffer_size();
      00055E 12r01rBA         [24] 1468 	lcall	_get_user_buffer_size
      000561 AC 82            [24] 1469 	mov	r4, dpl
      000563 AD 83            [24] 1470 	mov	r5, dph
      000565 D0 06            [24] 1471 	pop	ar6
      000567 D0 07            [24] 1472 	pop	ar7
                                   1473 ;	main.c:112: spi_buffer_read(num_bytes, start_address, buffer);
      000569 90r00r00         [24] 1474 	mov	dptr,#_spi_buffer_read_PARM_2
      00056C EC               [12] 1475 	mov	a,r4
      00056D F0               [24] 1476 	movx	@dptr,a
      00056E ED               [12] 1477 	mov	a,r5
      00056F A3               [24] 1478 	inc	dptr
      000570 F0               [24] 1479 	movx	@dptr,a
      000571 90r00r00         [24] 1480 	mov	dptr,#_spi_buffer_read_PARM_3
      000574 74r11            [12] 1481 	mov	a,#_main_buffer_40003_94
      000576 F0               [24] 1482 	movx	@dptr,a
      000577 74s01            [12] 1483 	mov	a,#(_main_buffer_40003_94 >> 8)
      000579 A3               [24] 1484 	inc	dptr
      00057A F0               [24] 1485 	movx	@dptr,a
      00057B E4               [12] 1486 	clr	a
      00057C A3               [24] 1487 	inc	dptr
      00057D F0               [24] 1488 	movx	@dptr,a
      00057E 8E 82            [24] 1489 	mov	dpl, r6
      000580 8F 83            [24] 1490 	mov	dph, r7
      000582 C0 07            [24] 1491 	push	ar7
      000584 C0 06            [24] 1492 	push	ar6
      000586 12r00r00         [24] 1493 	lcall	_spi_buffer_read
                                   1494 ;	main.c:113: printf("Read Data:\n\r");
      000589 74r35            [12] 1495 	mov	a,#___str_22
      00058B C0 E0            [24] 1496 	push	acc
      00058D 74s02            [12] 1497 	mov	a,#(___str_22 >> 8)
      00058F C0 E0            [24] 1498 	push	acc
      000591 74 80            [12] 1499 	mov	a,#0x80
      000593 C0 E0            [24] 1500 	push	acc
      000595 12r00r00         [24] 1501 	lcall	_printf
      000598 15 81            [12] 1502 	dec	sp
      00059A 15 81            [12] 1503 	dec	sp
      00059C 15 81            [12] 1504 	dec	sp
      00059E D0 06            [24] 1505 	pop	ar6
      0005A0 D0 07            [24] 1506 	pop	ar7
                                   1507 ;	main.c:114: for (int i = 0; i < num_bytes; i++) {
      0005A2 7C 00            [12] 1508 	mov	r4,#0x00
      0005A4 7D 00            [12] 1509 	mov	r5,#0x00
      0005A6                       1510 00123$:
      0005A6 C3               [12] 1511 	clr	c
      0005A7 EC               [12] 1512 	mov	a,r4
      0005A8 9E               [12] 1513 	subb	a,r6
      0005A9 ED               [12] 1514 	mov	a,r5
      0005AA 64 80            [12] 1515 	xrl	a,#0x80
      0005AC 8F F0            [24] 1516 	mov	b,r7
      0005AE 63 F0 80         [24] 1517 	xrl	b,#0x80
      0005B1 95 F0            [12] 1518 	subb	a,b
      0005B3 40 03            [24] 1519 	jc	00177$
      0005B5 02r02r59         [24] 1520 	ljmp	00117$
      0005B8                       1521 00177$:
                                   1522 ;	main.c:115: printf("Byte %d: 0x%02X\n\r", i, buffer[i]);
      0005B8 EC               [12] 1523 	mov	a,r4
      0005B9 24r11            [12] 1524 	add	a, #_main_buffer_40003_94
      0005BB F5 82            [12] 1525 	mov	dpl,a
      0005BD ED               [12] 1526 	mov	a,r5
      0005BE 34s01            [12] 1527 	addc	a, #(_main_buffer_40003_94 >> 8)
      0005C0 F5 83            [12] 1528 	mov	dph,a
      0005C2 E0               [24] 1529 	movx	a,@dptr
      0005C3 FB               [12] 1530 	mov	r3,a
      0005C4 7A 00            [12] 1531 	mov	r2,#0x00
      0005C6 C0 07            [24] 1532 	push	ar7
      0005C8 C0 06            [24] 1533 	push	ar6
      0005CA C0 05            [24] 1534 	push	ar5
      0005CC C0 04            [24] 1535 	push	ar4
      0005CE C0 03            [24] 1536 	push	ar3
      0005D0 C0 02            [24] 1537 	push	ar2
      0005D2 C0 04            [24] 1538 	push	ar4
      0005D4 C0 05            [24] 1539 	push	ar5
      0005D6 74r42            [12] 1540 	mov	a,#___str_23
      0005D8 C0 E0            [24] 1541 	push	acc
      0005DA 74s02            [12] 1542 	mov	a,#(___str_23 >> 8)
      0005DC C0 E0            [24] 1543 	push	acc
      0005DE 74 80            [12] 1544 	mov	a,#0x80
      0005E0 C0 E0            [24] 1545 	push	acc
      0005E2 12r00r00         [24] 1546 	lcall	_printf
      0005E5 E5 81            [12] 1547 	mov	a,sp
      0005E7 24 F9            [12] 1548 	add	a,#0xf9
      0005E9 F5 81            [12] 1549 	mov	sp,a
      0005EB D0 04            [24] 1550 	pop	ar4
      0005ED D0 05            [24] 1551 	pop	ar5
      0005EF D0 06            [24] 1552 	pop	ar6
      0005F1 D0 07            [24] 1553 	pop	ar7
                                   1554 ;	main.c:114: for (int i = 0; i < num_bytes; i++) {
      0005F3 0C               [12] 1555 	inc	r4
                                   1556 ;	main.c:119: case '4': {
      0005F4 BC 00 AF         [24] 1557 	cjne	r4,#0x00,00123$
      0005F7 0D               [12] 1558 	inc	r5
      0005F8 80 AC            [24] 1559 	sjmp	00123$
      0005FA                       1560 00106$:
                                   1561 ;	main.c:120: printf("Enter the MAC register bank to select:\n\r");
      0005FA 74r54            [12] 1562 	mov	a,#___str_24
      0005FC C0 E0            [24] 1563 	push	acc
      0005FE 74s02            [12] 1564 	mov	a,#(___str_24 >> 8)
      000600 C0 E0            [24] 1565 	push	acc
      000602 74 80            [12] 1566 	mov	a,#0x80
      000604 C0 E0            [24] 1567 	push	acc
      000606 12r00r00         [24] 1568 	lcall	_printf
      000609 15 81            [12] 1569 	dec	sp
      00060B 15 81            [12] 1570 	dec	sp
      00060D 15 81            [12] 1571 	dec	sp
                                   1572 ;	main.c:121: uint8_t reg_bank = get_user_buffer_size();
      00060F 12r01rBA         [24] 1573 	lcall	_get_user_buffer_size
      000612 AE 82            [24] 1574 	mov	r6, dpl
                                   1575 ;	main.c:122: printf("Enter the address of the MAC Register:\n\r");
      000614 C0 06            [24] 1576 	push	ar6
      000616 74r7D            [12] 1577 	mov	a,#___str_25
      000618 C0 E0            [24] 1578 	push	acc
      00061A 74s02            [12] 1579 	mov	a,#(___str_25 >> 8)
      00061C C0 E0            [24] 1580 	push	acc
      00061E 74 80            [12] 1581 	mov	a,#0x80
      000620 C0 E0            [24] 1582 	push	acc
      000622 12r00r00         [24] 1583 	lcall	_printf
      000625 15 81            [12] 1584 	dec	sp
      000627 15 81            [12] 1585 	dec	sp
      000629 15 81            [12] 1586 	dec	sp
                                   1587 ;	main.c:123: uint8_t addr = get_user_buffer_size();
      00062B 12r01rBA         [24] 1588 	lcall	_get_user_buffer_size
      00062E AD 82            [24] 1589 	mov	r5, dpl
      000630 D0 06            [24] 1590 	pop	ar6
                                   1591 ;	main.c:124: uint8_t data = mac_spi_read(addr, reg_bank);
      000632 90r00r00         [24] 1592 	mov	dptr,#_mac_spi_read_PARM_2
      000635 EE               [12] 1593 	mov	a,r6
      000636 F0               [24] 1594 	movx	@dptr,a
      000637 8D 82            [24] 1595 	mov	dpl, r5
      000639 12r00r00         [24] 1596 	lcall	_mac_spi_read
      00063C AF 82            [24] 1597 	mov	r7, dpl
                                   1598 ;	main.c:125: printf("MAC Register Data: 0x%02X\n\r", data);
      00063E 7E 00            [12] 1599 	mov	r6,#0x00
      000640 C0 07            [24] 1600 	push	ar7
      000642 C0 06            [24] 1601 	push	ar6
      000644 74rA6            [12] 1602 	mov	a,#___str_26
      000646 C0 E0            [24] 1603 	push	acc
      000648 74s02            [12] 1604 	mov	a,#(___str_26 >> 8)
      00064A C0 E0            [24] 1605 	push	acc
      00064C 74 80            [12] 1606 	mov	a,#0x80
      00064E C0 E0            [24] 1607 	push	acc
      000650 12r00r00         [24] 1608 	lcall	_printf
      000653 E5 81            [12] 1609 	mov	a,sp
      000655 24 FB            [12] 1610 	add	a,#0xfb
      000657 F5 81            [12] 1611 	mov	sp,a
                                   1612 ;	main.c:126: break;
      000659 02r02r59         [24] 1613 	ljmp	00117$
                                   1614 ;	main.c:128: case '5': {
      00065C                       1615 00107$:
                                   1616 ;	main.c:129: printf("Enter the PHY register address:\n\r");
      00065C 74rC2            [12] 1617 	mov	a,#___str_27
      00065E C0 E0            [24] 1618 	push	acc
      000660 74s02            [12] 1619 	mov	a,#(___str_27 >> 8)
      000662 C0 E0            [24] 1620 	push	acc
      000664 74 80            [12] 1621 	mov	a,#0x80
      000666 C0 E0            [24] 1622 	push	acc
      000668 12r00r00         [24] 1623 	lcall	_printf
      00066B 15 81            [12] 1624 	dec	sp
      00066D 15 81            [12] 1625 	dec	sp
      00066F 15 81            [12] 1626 	dec	sp
                                   1627 ;	main.c:130: uint8_t addr = get_user_buffer_size();
      000671 12r01rBA         [24] 1628 	lcall	_get_user_buffer_size
      000674 AE 82            [24] 1629 	mov	r6, dpl
                                   1630 ;	main.c:131: printf("Enter the 16-bit data to write:\n\r");
      000676 C0 06            [24] 1631 	push	ar6
      000678 74rE4            [12] 1632 	mov	a,#___str_28
      00067A C0 E0            [24] 1633 	push	acc
      00067C 74s02            [12] 1634 	mov	a,#(___str_28 >> 8)
      00067E C0 E0            [24] 1635 	push	acc
      000680 74 80            [12] 1636 	mov	a,#0x80
      000682 C0 E0            [24] 1637 	push	acc
      000684 12r00r00         [24] 1638 	lcall	_printf
      000687 15 81            [12] 1639 	dec	sp
      000689 15 81            [12] 1640 	dec	sp
      00068B 15 81            [12] 1641 	dec	sp
                                   1642 ;	main.c:132: uint16_t data = get_user_buffer_size();
      00068D 12r01rBA         [24] 1643 	lcall	_get_user_buffer_size
      000690 AD 82            [24] 1644 	mov	r5, dpl
      000692 AF 83            [24] 1645 	mov	r7, dph
      000694 D0 06            [24] 1646 	pop	ar6
                                   1647 ;	main.c:133: phy_spi_write(addr, data);
      000696 90r00r00         [24] 1648 	mov	dptr,#_phy_spi_write_PARM_2
      000699 ED               [12] 1649 	mov	a,r5
      00069A F0               [24] 1650 	movx	@dptr,a
      00069B EF               [12] 1651 	mov	a,r7
      00069C A3               [24] 1652 	inc	dptr
      00069D F0               [24] 1653 	movx	@dptr,a
      00069E 8E 82            [24] 1654 	mov	dpl, r6
      0006A0 C0 07            [24] 1655 	push	ar7
      0006A2 C0 05            [24] 1656 	push	ar5
      0006A4 12r00r00         [24] 1657 	lcall	_phy_spi_write
      0006A7 D0 05            [24] 1658 	pop	ar5
      0006A9 D0 07            [24] 1659 	pop	ar7
                                   1660 ;	main.c:134: printf("PHY Write Data: 0x%04X\n\r", data);
      0006AB C0 05            [24] 1661 	push	ar5
      0006AD C0 07            [24] 1662 	push	ar7
      0006AF 74r06            [12] 1663 	mov	a,#___str_29
      0006B1 C0 E0            [24] 1664 	push	acc
      0006B3 74s03            [12] 1665 	mov	a,#(___str_29 >> 8)
      0006B5 C0 E0            [24] 1666 	push	acc
      0006B7 74 80            [12] 1667 	mov	a,#0x80
      0006B9 C0 E0            [24] 1668 	push	acc
      0006BB 12r00r00         [24] 1669 	lcall	_printf
      0006BE E5 81            [12] 1670 	mov	a,sp
      0006C0 24 FB            [12] 1671 	add	a,#0xfb
      0006C2 F5 81            [12] 1672 	mov	sp,a
                                   1673 ;	main.c:135: break;
      0006C4 02r02r59         [24] 1674 	ljmp	00117$
                                   1675 ;	main.c:137: case '6': {
      0006C7                       1676 00108$:
                                   1677 ;	main.c:138: printf("Enter the PHY register address to read:\n\r");
      0006C7 74r1F            [12] 1678 	mov	a,#___str_30
      0006C9 C0 E0            [24] 1679 	push	acc
      0006CB 74s03            [12] 1680 	mov	a,#(___str_30 >> 8)
      0006CD C0 E0            [24] 1681 	push	acc
      0006CF 74 80            [12] 1682 	mov	a,#0x80
      0006D1 C0 E0            [24] 1683 	push	acc
      0006D3 12r00r00         [24] 1684 	lcall	_printf
      0006D6 15 81            [12] 1685 	dec	sp
      0006D8 15 81            [12] 1686 	dec	sp
      0006DA 15 81            [12] 1687 	dec	sp
                                   1688 ;	main.c:139: uint8_t addr = get_user_buffer_size();
      0006DC 12r01rBA         [24] 1689 	lcall	_get_user_buffer_size
                                   1690 ;	main.c:140: uint16_t data = phy_spi_read(addr);
      0006DF 12r00r00         [24] 1691 	lcall	_phy_spi_read
      0006E2 AE 82            [24] 1692 	mov	r6, dpl
      0006E4 AF 83            [24] 1693 	mov	r7, dph
                                   1694 ;	main.c:141: printf("PHY Read Data: 0x%04X\n\r", data);
      0006E6 C0 06            [24] 1695 	push	ar6
      0006E8 C0 07            [24] 1696 	push	ar7
      0006EA 74r49            [12] 1697 	mov	a,#___str_31
      0006EC C0 E0            [24] 1698 	push	acc
      0006EE 74s03            [12] 1699 	mov	a,#(___str_31 >> 8)
      0006F0 C0 E0            [24] 1700 	push	acc
      0006F2 74 80            [12] 1701 	mov	a,#0x80
      0006F4 C0 E0            [24] 1702 	push	acc
      0006F6 12r00r00         [24] 1703 	lcall	_printf
      0006F9 E5 81            [12] 1704 	mov	a,sp
      0006FB 24 FB            [12] 1705 	add	a,#0xfb
      0006FD F5 81            [12] 1706 	mov	sp,a
                                   1707 ;	main.c:142: break;
      0006FF 02r02r59         [24] 1708 	ljmp	00117$
                                   1709 ;	main.c:144: case '7': {
      000702                       1710 00109$:
                                   1711 ;	main.c:145: printf("Resetting ENC28J60...\n\r");
      000702 74r61            [12] 1712 	mov	a,#___str_32
      000704 C0 E0            [24] 1713 	push	acc
      000706 74s03            [12] 1714 	mov	a,#(___str_32 >> 8)
      000708 C0 E0            [24] 1715 	push	acc
      00070A 74 80            [12] 1716 	mov	a,#0x80
      00070C C0 E0            [24] 1717 	push	acc
      00070E 12r00r00         [24] 1718 	lcall	_printf
      000711 15 81            [12] 1719 	dec	sp
      000713 15 81            [12] 1720 	dec	sp
      000715 15 81            [12] 1721 	dec	sp
                                   1722 ;	main.c:146: enc_reset();
      000717 12r00r00         [24] 1723 	lcall	_enc_reset
                                   1724 ;	main.c:147: break;
      00071A 02r02r59         [24] 1725 	ljmp	00117$
                                   1726 ;	main.c:149: case '8': {
      00071D                       1727 00110$:
                                   1728 ;	main.c:150: printf("Enter the ETH register address to read:\n\r");
      00071D 74r79            [12] 1729 	mov	a,#___str_33
      00071F C0 E0            [24] 1730 	push	acc
      000721 74s03            [12] 1731 	mov	a,#(___str_33 >> 8)
      000723 C0 E0            [24] 1732 	push	acc
      000725 74 80            [12] 1733 	mov	a,#0x80
      000727 C0 E0            [24] 1734 	push	acc
      000729 12r00r00         [24] 1735 	lcall	_printf
      00072C 15 81            [12] 1736 	dec	sp
      00072E 15 81            [12] 1737 	dec	sp
      000730 15 81            [12] 1738 	dec	sp
                                   1739 ;	main.c:151: uint8_t addr = get_user_buffer_size();
      000732 12r01rBA         [24] 1740 	lcall	_get_user_buffer_size
      000735 AE 82            [24] 1741 	mov	r6, dpl
                                   1742 ;	main.c:152: printf("Enter the bank (0 or 1):\n\r");
      000737 C0 06            [24] 1743 	push	ar6
      000739 74rA3            [12] 1744 	mov	a,#___str_34
      00073B C0 E0            [24] 1745 	push	acc
      00073D 74s03            [12] 1746 	mov	a,#(___str_34 >> 8)
      00073F C0 E0            [24] 1747 	push	acc
      000741 74 80            [12] 1748 	mov	a,#0x80
      000743 C0 E0            [24] 1749 	push	acc
      000745 12r00r00         [24] 1750 	lcall	_printf
      000748 15 81            [12] 1751 	dec	sp
      00074A 15 81            [12] 1752 	dec	sp
      00074C 15 81            [12] 1753 	dec	sp
                                   1754 ;	main.c:153: uint8_t bank = get_user_buffer_size();
      00074E 12r01rBA         [24] 1755 	lcall	_get_user_buffer_size
      000751 AD 82            [24] 1756 	mov	r5, dpl
      000753 D0 06            [24] 1757 	pop	ar6
      000755 90r00r00         [24] 1758 	mov	dptr,#_eth_spi_read_PARM_2
      000758 ED               [12] 1759 	mov	a,r5
      000759 F0               [24] 1760 	movx	@dptr,a
                                   1761 ;	main.c:154: uint8_t data = eth_spi_read(addr, bank);
      00075A 8E 82            [24] 1762 	mov	dpl, r6
      00075C 12r00r00         [24] 1763 	lcall	_eth_spi_read
      00075F AF 82            [24] 1764 	mov	r7, dpl
                                   1765 ;	main.c:155: printf("ETH Register Data: 0x%02X\n\r", data);
      000761 7E 00            [12] 1766 	mov	r6,#0x00
      000763 C0 07            [24] 1767 	push	ar7
      000765 C0 06            [24] 1768 	push	ar6
      000767 74rBE            [12] 1769 	mov	a,#___str_35
      000769 C0 E0            [24] 1770 	push	acc
      00076B 74s03            [12] 1771 	mov	a,#(___str_35 >> 8)
      00076D C0 E0            [24] 1772 	push	acc
      00076F 74 80            [12] 1773 	mov	a,#0x80
      000771 C0 E0            [24] 1774 	push	acc
      000773 12r00r00         [24] 1775 	lcall	_printf
      000776 E5 81            [12] 1776 	mov	a,sp
      000778 24 FB            [12] 1777 	add	a,#0xfb
      00077A F5 81            [12] 1778 	mov	sp,a
                                   1779 ;	main.c:156: break;
      00077C 02r02r59         [24] 1780 	ljmp	00117$
                                   1781 ;	main.c:158: case '9': {
      00077F                       1782 00111$:
                                   1783 ;	main.c:159: printf("\n\rChoose an action: \n\r");
      00077F 74r1C            [12] 1784 	mov	a,#___str_2
      000781 C0 E0            [24] 1785 	push	acc
      000783 74s00            [12] 1786 	mov	a,#(___str_2 >> 8)
      000785 C0 E0            [24] 1787 	push	acc
      000787 74 80            [12] 1788 	mov	a,#0x80
      000789 C0 E0            [24] 1789 	push	acc
      00078B 12r00r00         [24] 1790 	lcall	_printf
      00078E 15 81            [12] 1791 	dec	sp
      000790 15 81            [12] 1792 	dec	sp
      000792 15 81            [12] 1793 	dec	sp
                                   1794 ;	main.c:160: printf("1 --> Control Write\n\r");
      000794 74r33            [12] 1795 	mov	a,#___str_3
      000796 C0 E0            [24] 1796 	push	acc
      000798 74s00            [12] 1797 	mov	a,#(___str_3 >> 8)
      00079A C0 E0            [24] 1798 	push	acc
      00079C 74 80            [12] 1799 	mov	a,#0x80
      00079E C0 E0            [24] 1800 	push	acc
      0007A0 12r00r00         [24] 1801 	lcall	_printf
      0007A3 15 81            [12] 1802 	dec	sp
      0007A5 15 81            [12] 1803 	dec	sp
      0007A7 15 81            [12] 1804 	dec	sp
                                   1805 ;	main.c:161: printf("2 --> Buffer Write\n\r");
      0007A9 74r49            [12] 1806 	mov	a,#___str_4
      0007AB C0 E0            [24] 1807 	push	acc
      0007AD 74s00            [12] 1808 	mov	a,#(___str_4 >> 8)
      0007AF C0 E0            [24] 1809 	push	acc
      0007B1 74 80            [12] 1810 	mov	a,#0x80
      0007B3 C0 E0            [24] 1811 	push	acc
      0007B5 12r00r00         [24] 1812 	lcall	_printf
      0007B8 15 81            [12] 1813 	dec	sp
      0007BA 15 81            [12] 1814 	dec	sp
      0007BC 15 81            [12] 1815 	dec	sp
                                   1816 ;	main.c:162: printf("3 --> Buffer Read\n\r");
      0007BE 74r5E            [12] 1817 	mov	a,#___str_5
      0007C0 C0 E0            [24] 1818 	push	acc
      0007C2 74s00            [12] 1819 	mov	a,#(___str_5 >> 8)
      0007C4 C0 E0            [24] 1820 	push	acc
      0007C6 74 80            [12] 1821 	mov	a,#0x80
      0007C8 C0 E0            [24] 1822 	push	acc
      0007CA 12r00r00         [24] 1823 	lcall	_printf
      0007CD 15 81            [12] 1824 	dec	sp
      0007CF 15 81            [12] 1825 	dec	sp
      0007D1 15 81            [12] 1826 	dec	sp
                                   1827 ;	main.c:163: printf("4 --> MAC Register Read\n\r");
      0007D3 74r72            [12] 1828 	mov	a,#___str_6
      0007D5 C0 E0            [24] 1829 	push	acc
      0007D7 74s00            [12] 1830 	mov	a,#(___str_6 >> 8)
      0007D9 C0 E0            [24] 1831 	push	acc
      0007DB 74 80            [12] 1832 	mov	a,#0x80
      0007DD C0 E0            [24] 1833 	push	acc
      0007DF 12r00r00         [24] 1834 	lcall	_printf
      0007E2 15 81            [12] 1835 	dec	sp
      0007E4 15 81            [12] 1836 	dec	sp
      0007E6 15 81            [12] 1837 	dec	sp
                                   1838 ;	main.c:164: printf("5 --> PHY SPI Write\n\r");
      0007E8 74r8C            [12] 1839 	mov	a,#___str_7
      0007EA C0 E0            [24] 1840 	push	acc
      0007EC 74s00            [12] 1841 	mov	a,#(___str_7 >> 8)
      0007EE C0 E0            [24] 1842 	push	acc
      0007F0 74 80            [12] 1843 	mov	a,#0x80
      0007F2 C0 E0            [24] 1844 	push	acc
      0007F4 12r00r00         [24] 1845 	lcall	_printf
      0007F7 15 81            [12] 1846 	dec	sp
      0007F9 15 81            [12] 1847 	dec	sp
      0007FB 15 81            [12] 1848 	dec	sp
                                   1849 ;	main.c:165: printf("6 --> PHY SPI Read\n\r");
      0007FD 74rA2            [12] 1850 	mov	a,#___str_8
      0007FF C0 E0            [24] 1851 	push	acc
      000801 74s00            [12] 1852 	mov	a,#(___str_8 >> 8)
      000803 C0 E0            [24] 1853 	push	acc
      000805 74 80            [12] 1854 	mov	a,#0x80
      000807 C0 E0            [24] 1855 	push	acc
      000809 12r00r00         [24] 1856 	lcall	_printf
      00080C 15 81            [12] 1857 	dec	sp
      00080E 15 81            [12] 1858 	dec	sp
      000810 15 81            [12] 1859 	dec	sp
                                   1860 ;	main.c:166: printf("7 --> ENC Reset\n\r");
      000812 74rB7            [12] 1861 	mov	a,#___str_9
      000814 C0 E0            [24] 1862 	push	acc
      000816 74s00            [12] 1863 	mov	a,#(___str_9 >> 8)
      000818 C0 E0            [24] 1864 	push	acc
      00081A 74 80            [12] 1865 	mov	a,#0x80
      00081C C0 E0            [24] 1866 	push	acc
      00081E 12r00r00         [24] 1867 	lcall	_printf
      000821 15 81            [12] 1868 	dec	sp
      000823 15 81            [12] 1869 	dec	sp
      000825 15 81            [12] 1870 	dec	sp
                                   1871 ;	main.c:167: printf("8 --> Read ETH Register\n\r");
      000827 74rC9            [12] 1872 	mov	a,#___str_10
      000829 C0 E0            [24] 1873 	push	acc
      00082B 74s00            [12] 1874 	mov	a,#(___str_10 >> 8)
      00082D C0 E0            [24] 1875 	push	acc
      00082F 74 80            [12] 1876 	mov	a,#0x80
      000831 C0 E0            [24] 1877 	push	acc
      000833 12r00r00         [24] 1878 	lcall	_printf
      000836 15 81            [12] 1879 	dec	sp
      000838 15 81            [12] 1880 	dec	sp
      00083A 15 81            [12] 1881 	dec	sp
                                   1882 ;	main.c:168: break;
      00083C 02r02r59         [24] 1883 	ljmp	00117$
                                   1884 ;	main.c:170: case 'A':{
      00083F                       1885 00112$:
                                   1886 ;	main.c:171: init_MAC();
      00083F 12r00r00         [24] 1887 	lcall	_init_MAC
                                   1888 ;	main.c:172: send_arp_request();
      000842 12r00r00         [24] 1889 	lcall	_send_arp_request
                                   1890 ;	main.c:173: break;
      000845 02r02r59         [24] 1891 	ljmp	00117$
                                   1892 ;	main.c:175: case 'B':{
      000848                       1893 00113$:
                                   1894 ;	main.c:176: init_ENC();
      000848 12r00r00         [24] 1895 	lcall	_init_ENC
                                   1896 ;	main.c:177: break;
      00084B 02r02r59         [24] 1897 	ljmp	00117$
                                   1898 ;	main.c:179: default: {
      00084E                       1899 00114$:
                                   1900 ;	main.c:180: printf("Invalid option. Please select a valid action.\n\r");
      00084E 74rDA            [12] 1901 	mov	a,#___str_36
      000850 C0 E0            [24] 1902 	push	acc
      000852 74s03            [12] 1903 	mov	a,#(___str_36 >> 8)
      000854 C0 E0            [24] 1904 	push	acc
      000856 74 80            [12] 1905 	mov	a,#0x80
      000858 C0 E0            [24] 1906 	push	acc
      00085A 12r00r00         [24] 1907 	lcall	_printf
      00085D 15 81            [12] 1908 	dec	sp
      00085F 15 81            [12] 1909 	dec	sp
      000861 15 81            [12] 1910 	dec	sp
                                   1911 ;	main.c:183: }
                                   1912 ;	main.c:185: }
      000863 02r02r59         [24] 1913 	ljmp	00117$
                                   1914 	.area CSEG    (CODE)
                                   1915 	.area CONST   (CODE)
                                   1916 	.area CONST   (CODE)
      000000                       1917 ___str_0:
      000000 0A                    1918 	.db 0x0a
      000001 0D                    1919 	.db 0x0d
      000002 00                    1920 	.db 0x00
                                   1921 	.area CSEG    (CODE)
                                   1922 	.area CONST   (CODE)
      000003                       1923 ___str_1:
      000003 53 50 49 20 4F 70 65  1924 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    1925 	.db 0x0a
      00001A 0D                    1926 	.db 0x0d
      00001B 00                    1927 	.db 0x00
                                   1928 	.area CSEG    (CODE)
                                   1929 	.area CONST   (CODE)
      00001C                       1930 ___str_2:
      00001C 0A                    1931 	.db 0x0a
      00001D 0D                    1932 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  1933 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    1934 	.db 0x0a
      000031 0D                    1935 	.db 0x0d
      000032 00                    1936 	.db 0x00
                                   1937 	.area CSEG    (CODE)
                                   1938 	.area CONST   (CODE)
      000033                       1939 ___str_3:
      000033 31 20 2D 2D 3E 20 43  1940 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    1941 	.db 0x0a
      000047 0D                    1942 	.db 0x0d
      000048 00                    1943 	.db 0x00
                                   1944 	.area CSEG    (CODE)
                                   1945 	.area CONST   (CODE)
      000049                       1946 ___str_4:
      000049 32 20 2D 2D 3E 20 42  1947 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    1948 	.db 0x0a
      00005C 0D                    1949 	.db 0x0d
      00005D 00                    1950 	.db 0x00
                                   1951 	.area CSEG    (CODE)
                                   1952 	.area CONST   (CODE)
      00005E                       1953 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  1954 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    1955 	.db 0x0a
      000070 0D                    1956 	.db 0x0d
      000071 00                    1957 	.db 0x00
                                   1958 	.area CSEG    (CODE)
                                   1959 	.area CONST   (CODE)
      000072                       1960 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  1961 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    1962 	.db 0x0a
      00008A 0D                    1963 	.db 0x0d
      00008B 00                    1964 	.db 0x00
                                   1965 	.area CSEG    (CODE)
                                   1966 	.area CONST   (CODE)
      00008C                       1967 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  1968 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    1969 	.db 0x0a
      0000A0 0D                    1970 	.db 0x0d
      0000A1 00                    1971 	.db 0x00
                                   1972 	.area CSEG    (CODE)
                                   1973 	.area CONST   (CODE)
      0000A2                       1974 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  1975 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    1976 	.db 0x0a
      0000B5 0D                    1977 	.db 0x0d
      0000B6 00                    1978 	.db 0x00
                                   1979 	.area CSEG    (CODE)
                                   1980 	.area CONST   (CODE)
      0000B7                       1981 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  1982 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    1983 	.db 0x0a
      0000C7 0D                    1984 	.db 0x0d
      0000C8 00                    1985 	.db 0x00
                                   1986 	.area CSEG    (CODE)
                                   1987 	.area CONST   (CODE)
      0000C9                       1988 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  1989 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    1990 	.db 0x0a
      0000E1 0D                    1991 	.db 0x0d
      0000E2 00                    1992 	.db 0x00
                                   1993 	.area CSEG    (CODE)
                                   1994 	.area CONST   (CODE)
      0000E3                       1995 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  1996 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    1997 	.db 0x0a
      0000F6 0D                    1998 	.db 0x0d
      0000F7 00                    1999 	.db 0x00
                                   2000 	.area CSEG    (CODE)
                                   2001 	.area CONST   (CODE)
      0000F8                       2002 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  2003 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    2004 	.db 0x0a
      00010F 0D                    2005 	.db 0x0d
      000110 00                    2006 	.db 0x00
                                   2007 	.area CSEG    (CODE)
                                   2008 	.area CONST   (CODE)
      000111                       2009 ___str_13:
      000111 42 20 2D 2D 3E 20 49  2010 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2011 	.db 0x0a
      000127 0D                    2012 	.db 0x0d
      000128 00                    2013 	.db 0x00
                                   2014 	.area CSEG    (CODE)
                                   2015 	.area CONST   (CODE)
      000129                       2016 ___str_14:
      000129 45 6E 74 65 72 20 74  2017 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      00014B 0A                    2018 	.db 0x0a
      00014C 0D                    2019 	.db 0x0d
      00014D 00                    2020 	.db 0x00
                                   2021 	.area CSEG    (CODE)
                                   2022 	.area CONST   (CODE)
      00014E                       2023 ___str_15:
      00014E 45 6E 74 65 72 20 74  2024 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      000178 0A                    2025 	.db 0x0a
      000179 0D                    2026 	.db 0x0d
      00017A 00                    2027 	.db 0x00
                                   2028 	.area CSEG    (CODE)
                                   2029 	.area CONST   (CODE)
      00017B                       2030 ___str_16:
      00017B 45 6E 74 65 72 20 74  2031 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      00019C 0A                    2032 	.db 0x0a
      00019D 0D                    2033 	.db 0x0d
      00019E 00                    2034 	.db 0x00
                                   2035 	.area CSEG    (CODE)
                                   2036 	.area CONST   (CODE)
      00019F                       2037 ___str_17:
      00019F 45 6E 74 65 72 20 74  2038 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      0001C2 0A                    2039 	.db 0x0a
      0001C3 0D                    2040 	.db 0x0d
      0001C4 00                    2041 	.db 0x00
                                   2042 	.area CSEG    (CODE)
                                   2043 	.area CONST   (CODE)
      0001C5                       2044 ___str_18:
      0001C5 45 6E 74 65 72 20 74  2045 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      0001E0 0A                    2046 	.db 0x0a
      0001E1 0D                    2047 	.db 0x0d
      0001E2 00                    2048 	.db 0x00
                                   2049 	.area CSEG    (CODE)
                                   2050 	.area CONST   (CODE)
      0001E3                       2051 ___str_19:
      0001E3 45 6E 74 65 72 20 25  2052 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000203 0A                    2053 	.db 0x0a
      000204 0D                    2054 	.db 0x0d
      000205 00                    2055 	.db 0x00
                                   2056 	.area CSEG    (CODE)
                                   2057 	.area CONST   (CODE)
      000206                       2058 ___str_20:
      000206 42 79 74 65 20 25 64  2059 	.ascii "Byte %d: "
             3A 20
      00020F 00                    2060 	.db 0x00
                                   2061 	.area CSEG    (CODE)
                                   2062 	.area CONST   (CODE)
      000210                       2063 ___str_21:
      000210 45 6E 74 65 72 20 74  2064 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      000232 0A                    2065 	.db 0x0a
      000233 0D                    2066 	.db 0x0d
      000234 00                    2067 	.db 0x00
                                   2068 	.area CSEG    (CODE)
                                   2069 	.area CONST   (CODE)
      000235                       2070 ___str_22:
      000235 52 65 61 64 20 44 61  2071 	.ascii "Read Data:"
             74 61 3A
      00023F 0A                    2072 	.db 0x0a
      000240 0D                    2073 	.db 0x0d
      000241 00                    2074 	.db 0x00
                                   2075 	.area CSEG    (CODE)
                                   2076 	.area CONST   (CODE)
      000242                       2077 ___str_23:
      000242 42 79 74 65 20 25 64  2078 	.ascii "Byte %d: 0x%02X"
             3A 20 30 78 25 30 32
             58
      000251 0A                    2079 	.db 0x0a
      000252 0D                    2080 	.db 0x0d
      000253 00                    2081 	.db 0x00
                                   2082 	.area CSEG    (CODE)
                                   2083 	.area CONST   (CODE)
      000254                       2084 ___str_24:
      000254 45 6E 74 65 72 20 74  2085 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      00027A 0A                    2086 	.db 0x0a
      00027B 0D                    2087 	.db 0x0d
      00027C 00                    2088 	.db 0x00
                                   2089 	.area CSEG    (CODE)
                                   2090 	.area CONST   (CODE)
      00027D                       2091 ___str_25:
      00027D 45 6E 74 65 72 20 74  2092 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002A3 0A                    2093 	.db 0x0a
      0002A4 0D                    2094 	.db 0x0d
      0002A5 00                    2095 	.db 0x00
                                   2096 	.area CSEG    (CODE)
                                   2097 	.area CONST   (CODE)
      0002A6                       2098 ___str_26:
      0002A6 4D 41 43 20 52 65 67  2099 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0002BF 0A                    2100 	.db 0x0a
      0002C0 0D                    2101 	.db 0x0d
      0002C1 00                    2102 	.db 0x00
                                   2103 	.area CSEG    (CODE)
                                   2104 	.area CONST   (CODE)
      0002C2                       2105 ___str_27:
      0002C2 45 6E 74 65 72 20 74  2106 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      0002E1 0A                    2107 	.db 0x0a
      0002E2 0D                    2108 	.db 0x0d
      0002E3 00                    2109 	.db 0x00
                                   2110 	.area CSEG    (CODE)
                                   2111 	.area CONST   (CODE)
      0002E4                       2112 ___str_28:
      0002E4 45 6E 74 65 72 20 74  2113 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      000303 0A                    2114 	.db 0x0a
      000304 0D                    2115 	.db 0x0d
      000305 00                    2116 	.db 0x00
                                   2117 	.area CSEG    (CODE)
                                   2118 	.area CONST   (CODE)
      000306                       2119 ___str_29:
      000306 50 48 59 20 57 72 69  2120 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      00031C 0A                    2121 	.db 0x0a
      00031D 0D                    2122 	.db 0x0d
      00031E 00                    2123 	.db 0x00
                                   2124 	.area CSEG    (CODE)
                                   2125 	.area CONST   (CODE)
      00031F                       2126 ___str_30:
      00031F 45 6E 74 65 72 20 74  2127 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000346 0A                    2128 	.db 0x0a
      000347 0D                    2129 	.db 0x0d
      000348 00                    2130 	.db 0x00
                                   2131 	.area CSEG    (CODE)
                                   2132 	.area CONST   (CODE)
      000349                       2133 ___str_31:
      000349 50 48 59 20 52 65 61  2134 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      00035E 0A                    2135 	.db 0x0a
      00035F 0D                    2136 	.db 0x0d
      000360 00                    2137 	.db 0x00
                                   2138 	.area CSEG    (CODE)
                                   2139 	.area CONST   (CODE)
      000361                       2140 ___str_32:
      000361 52 65 73 65 74 74 69  2141 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      000376 0A                    2142 	.db 0x0a
      000377 0D                    2143 	.db 0x0d
      000378 00                    2144 	.db 0x00
                                   2145 	.area CSEG    (CODE)
                                   2146 	.area CONST   (CODE)
      000379                       2147 ___str_33:
      000379 45 6E 74 65 72 20 74  2148 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003A0 0A                    2149 	.db 0x0a
      0003A1 0D                    2150 	.db 0x0d
      0003A2 00                    2151 	.db 0x00
                                   2152 	.area CSEG    (CODE)
                                   2153 	.area CONST   (CODE)
      0003A3                       2154 ___str_34:
      0003A3 45 6E 74 65 72 20 74  2155 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      0003BB 0A                    2156 	.db 0x0a
      0003BC 0D                    2157 	.db 0x0d
      0003BD 00                    2158 	.db 0x00
                                   2159 	.area CSEG    (CODE)
                                   2160 	.area CONST   (CODE)
      0003BE                       2161 ___str_35:
      0003BE 45 54 48 20 52 65 67  2162 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0003D7 0A                    2163 	.db 0x0a
      0003D8 0D                    2164 	.db 0x0d
      0003D9 00                    2165 	.db 0x00
                                   2166 	.area CSEG    (CODE)
                                   2167 	.area CONST   (CODE)
      0003DA                       2168 ___str_36:
      0003DA 49 6E 76 61 6C 69 64  2169 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      000407 0A                    2170 	.db 0x0a
      000408 0D                    2171 	.db 0x0d
      000409 00                    2172 	.db 0x00
                                   2173 	.area CSEG    (CODE)
                                   2174 	.area XINIT   (CODE)
                                   2175 	.area CABS    (ABS,CODE)
