                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _RX_disable
                                     15 	.globl _send_arp_request
                                     16 	.globl _init_ENC
                                     17 	.globl _spi_control_write
                                     18 	.globl _eth_spi_read
                                     19 	.globl _phy_spi_write
                                     20 	.globl _phy_spi_read
                                     21 	.globl _spi_buffer_write
                                     22 	.globl _spi_buffer_read
                                     23 	.globl _mac_spi_read
                                     24 	.globl _enc_reset
                                     25 	.globl _configure_SPI
                                     26 	.globl _printf_tiny
                                     27 	.globl _putchar
                                     28 	.globl _getchar
                                     29 	.globl _printf
                                     30 	.globl _TF1
                                     31 	.globl _TR1
                                     32 	.globl _TF0
                                     33 	.globl _TR0
                                     34 	.globl _IE1
                                     35 	.globl _IT1
                                     36 	.globl _IE0
                                     37 	.globl _IT0
                                     38 	.globl _SM0
                                     39 	.globl _SM1
                                     40 	.globl _SM2
                                     41 	.globl _REN
                                     42 	.globl _TB8
                                     43 	.globl _RB8
                                     44 	.globl _TI
                                     45 	.globl _RI
                                     46 	.globl _CY
                                     47 	.globl _AC
                                     48 	.globl _F0
                                     49 	.globl _RS1
                                     50 	.globl _RS0
                                     51 	.globl _OV
                                     52 	.globl _F1
                                     53 	.globl _P
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD0
                                     61 	.globl _TXD
                                     62 	.globl _RXD0
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _P1_7
                                     81 	.globl _P1_6
                                     82 	.globl _P1_5
                                     83 	.globl _P1_4
                                     84 	.globl _P1_3
                                     85 	.globl _P1_2
                                     86 	.globl _P1_1
                                     87 	.globl _P1_0
                                     88 	.globl _P0_7
                                     89 	.globl _P0_6
                                     90 	.globl _P0_5
                                     91 	.globl _P0_4
                                     92 	.globl _P0_3
                                     93 	.globl _P0_2
                                     94 	.globl _P0_1
                                     95 	.globl _P0_0
                                     96 	.globl _PS
                                     97 	.globl _PT1
                                     98 	.globl _PX1
                                     99 	.globl _PT0
                                    100 	.globl _PX0
                                    101 	.globl _EA
                                    102 	.globl _ES
                                    103 	.globl _ET1
                                    104 	.globl _EX1
                                    105 	.globl _ET0
                                    106 	.globl _EX0
                                    107 	.globl _BREG_F7
                                    108 	.globl _BREG_F6
                                    109 	.globl _BREG_F5
                                    110 	.globl _BREG_F4
                                    111 	.globl _BREG_F3
                                    112 	.globl _BREG_F2
                                    113 	.globl _BREG_F1
                                    114 	.globl _BREG_F0
                                    115 	.globl _P5_7
                                    116 	.globl _P5_6
                                    117 	.globl _P5_5
                                    118 	.globl _P5_4
                                    119 	.globl _P5_3
                                    120 	.globl _P5_2
                                    121 	.globl _P5_1
                                    122 	.globl _P5_0
                                    123 	.globl _P4_7
                                    124 	.globl _P4_6
                                    125 	.globl _P4_5
                                    126 	.globl _P4_4
                                    127 	.globl _P4_3
                                    128 	.globl _P4_2
                                    129 	.globl _P4_1
                                    130 	.globl _P4_0
                                    131 	.globl _PX0L
                                    132 	.globl _PT0L
                                    133 	.globl _PX1L
                                    134 	.globl _PT1L
                                    135 	.globl _PSL
                                    136 	.globl _PT2L
                                    137 	.globl _PPCL
                                    138 	.globl _EC
                                    139 	.globl _CCF0
                                    140 	.globl _CCF1
                                    141 	.globl _CCF2
                                    142 	.globl _CCF3
                                    143 	.globl _CCF4
                                    144 	.globl _CR
                                    145 	.globl _CF
                                    146 	.globl _TF2
                                    147 	.globl _EXF2
                                    148 	.globl _RCLK
                                    149 	.globl _TCLK
                                    150 	.globl _EXEN2
                                    151 	.globl _TR2
                                    152 	.globl _C_T2
                                    153 	.globl _CP_RL2
                                    154 	.globl _T2CON_7
                                    155 	.globl _T2CON_6
                                    156 	.globl _T2CON_5
                                    157 	.globl _T2CON_4
                                    158 	.globl _T2CON_3
                                    159 	.globl _T2CON_2
                                    160 	.globl _T2CON_1
                                    161 	.globl _T2CON_0
                                    162 	.globl _PT2
                                    163 	.globl _ET2
                                    164 	.globl _TMOD
                                    165 	.globl _TL1
                                    166 	.globl _TL0
                                    167 	.globl _TH1
                                    168 	.globl _TH0
                                    169 	.globl _TCON
                                    170 	.globl _SP
                                    171 	.globl _SCON
                                    172 	.globl _SBUF0
                                    173 	.globl _SBUF
                                    174 	.globl _PSW
                                    175 	.globl _PCON
                                    176 	.globl _P3
                                    177 	.globl _P2
                                    178 	.globl _P1
                                    179 	.globl _P0
                                    180 	.globl _IP
                                    181 	.globl _IE
                                    182 	.globl _DP0L
                                    183 	.globl _DPL
                                    184 	.globl _DP0H
                                    185 	.globl _DPH
                                    186 	.globl _B
                                    187 	.globl _ACC
                                    188 	.globl _EECON
                                    189 	.globl _KBF
                                    190 	.globl _KBE
                                    191 	.globl _KBLS
                                    192 	.globl _BRL
                                    193 	.globl _BDRCON
                                    194 	.globl _T2MOD
                                    195 	.globl _SPDAT
                                    196 	.globl _SPSTA
                                    197 	.globl _SPCON
                                    198 	.globl _SADEN
                                    199 	.globl _SADDR
                                    200 	.globl _WDTPRG
                                    201 	.globl _WDTRST
                                    202 	.globl _P5
                                    203 	.globl _P4
                                    204 	.globl _IPH1
                                    205 	.globl _IPL1
                                    206 	.globl _IPH0
                                    207 	.globl _IPL0
                                    208 	.globl _IEN1
                                    209 	.globl _IEN0
                                    210 	.globl _CMOD
                                    211 	.globl _CL
                                    212 	.globl _CH
                                    213 	.globl _CCON
                                    214 	.globl _CCAPM4
                                    215 	.globl _CCAPM3
                                    216 	.globl _CCAPM2
                                    217 	.globl _CCAPM1
                                    218 	.globl _CCAPM0
                                    219 	.globl _CCAP4L
                                    220 	.globl _CCAP3L
                                    221 	.globl _CCAP2L
                                    222 	.globl _CCAP1L
                                    223 	.globl _CCAP0L
                                    224 	.globl _CCAP4H
                                    225 	.globl _CCAP3H
                                    226 	.globl _CCAP2H
                                    227 	.globl _CCAP1H
                                    228 	.globl _CCAP0H
                                    229 	.globl _CKCON1
                                    230 	.globl _CKCON0
                                    231 	.globl _CKRL
                                    232 	.globl _AUXR1
                                    233 	.globl _AUXR
                                    234 	.globl _TH2
                                    235 	.globl _TL2
                                    236 	.globl _RCAP2H
                                    237 	.globl _RCAP2L
                                    238 	.globl _T2CON
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           0000C8   244 _T2CON	=	0x00c8
                           0000CA   245 _RCAP2L	=	0x00ca
                           0000CB   246 _RCAP2H	=	0x00cb
                           0000CC   247 _TL2	=	0x00cc
                           0000CD   248 _TH2	=	0x00cd
                           00008E   249 _AUXR	=	0x008e
                           0000A2   250 _AUXR1	=	0x00a2
                           000097   251 _CKRL	=	0x0097
                           00008F   252 _CKCON0	=	0x008f
                           0000AF   253 _CKCON1	=	0x00af
                           0000FA   254 _CCAP0H	=	0x00fa
                           0000FB   255 _CCAP1H	=	0x00fb
                           0000FC   256 _CCAP2H	=	0x00fc
                           0000FD   257 _CCAP3H	=	0x00fd
                           0000FE   258 _CCAP4H	=	0x00fe
                           0000EA   259 _CCAP0L	=	0x00ea
                           0000EB   260 _CCAP1L	=	0x00eb
                           0000EC   261 _CCAP2L	=	0x00ec
                           0000ED   262 _CCAP3L	=	0x00ed
                           0000EE   263 _CCAP4L	=	0x00ee
                           0000DA   264 _CCAPM0	=	0x00da
                           0000DB   265 _CCAPM1	=	0x00db
                           0000DC   266 _CCAPM2	=	0x00dc
                           0000DD   267 _CCAPM3	=	0x00dd
                           0000DE   268 _CCAPM4	=	0x00de
                           0000D8   269 _CCON	=	0x00d8
                           0000F9   270 _CH	=	0x00f9
                           0000E9   271 _CL	=	0x00e9
                           0000D9   272 _CMOD	=	0x00d9
                           0000A8   273 _IEN0	=	0x00a8
                           0000B1   274 _IEN1	=	0x00b1
                           0000B8   275 _IPL0	=	0x00b8
                           0000B7   276 _IPH0	=	0x00b7
                           0000B2   277 _IPL1	=	0x00b2
                           0000B3   278 _IPH1	=	0x00b3
                           0000C0   279 _P4	=	0x00c0
                           0000E8   280 _P5	=	0x00e8
                           0000A6   281 _WDTRST	=	0x00a6
                           0000A7   282 _WDTPRG	=	0x00a7
                           0000A9   283 _SADDR	=	0x00a9
                           0000B9   284 _SADEN	=	0x00b9
                           0000C3   285 _SPCON	=	0x00c3
                           0000C4   286 _SPSTA	=	0x00c4
                           0000C5   287 _SPDAT	=	0x00c5
                           0000C9   288 _T2MOD	=	0x00c9
                           00009B   289 _BDRCON	=	0x009b
                           00009A   290 _BRL	=	0x009a
                           00009C   291 _KBLS	=	0x009c
                           00009D   292 _KBE	=	0x009d
                           00009E   293 _KBF	=	0x009e
                           0000D2   294 _EECON	=	0x00d2
                           0000E0   295 _ACC	=	0x00e0
                           0000F0   296 _B	=	0x00f0
                           000083   297 _DPH	=	0x0083
                           000083   298 _DP0H	=	0x0083
                           000082   299 _DPL	=	0x0082
                           000082   300 _DP0L	=	0x0082
                           0000A8   301 _IE	=	0x00a8
                           0000B8   302 _IP	=	0x00b8
                           000080   303 _P0	=	0x0080
                           000090   304 _P1	=	0x0090
                           0000A0   305 _P2	=	0x00a0
                           0000B0   306 _P3	=	0x00b0
                           000087   307 _PCON	=	0x0087
                           0000D0   308 _PSW	=	0x00d0
                           000099   309 _SBUF	=	0x0099
                           000099   310 _SBUF0	=	0x0099
                           000098   311 _SCON	=	0x0098
                           000081   312 _SP	=	0x0081
                           000088   313 _TCON	=	0x0088
                           00008C   314 _TH0	=	0x008c
                           00008D   315 _TH1	=	0x008d
                           00008A   316 _TL0	=	0x008a
                           00008B   317 _TL1	=	0x008b
                           000089   318 _TMOD	=	0x0089
                                    319 ;--------------------------------------------------------
                                    320 ; special function bits
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           0000AD   324 _ET2	=	0x00ad
                           0000BD   325 _PT2	=	0x00bd
                           0000C8   326 _T2CON_0	=	0x00c8
                           0000C9   327 _T2CON_1	=	0x00c9
                           0000CA   328 _T2CON_2	=	0x00ca
                           0000CB   329 _T2CON_3	=	0x00cb
                           0000CC   330 _T2CON_4	=	0x00cc
                           0000CD   331 _T2CON_5	=	0x00cd
                           0000CE   332 _T2CON_6	=	0x00ce
                           0000CF   333 _T2CON_7	=	0x00cf
                           0000C8   334 _CP_RL2	=	0x00c8
                           0000C9   335 _C_T2	=	0x00c9
                           0000CA   336 _TR2	=	0x00ca
                           0000CB   337 _EXEN2	=	0x00cb
                           0000CC   338 _TCLK	=	0x00cc
                           0000CD   339 _RCLK	=	0x00cd
                           0000CE   340 _EXF2	=	0x00ce
                           0000CF   341 _TF2	=	0x00cf
                           0000DF   342 _CF	=	0x00df
                           0000DE   343 _CR	=	0x00de
                           0000DC   344 _CCF4	=	0x00dc
                           0000DB   345 _CCF3	=	0x00db
                           0000DA   346 _CCF2	=	0x00da
                           0000D9   347 _CCF1	=	0x00d9
                           0000D8   348 _CCF0	=	0x00d8
                           0000AE   349 _EC	=	0x00ae
                           0000BE   350 _PPCL	=	0x00be
                           0000BD   351 _PT2L	=	0x00bd
                           0000BC   352 _PSL	=	0x00bc
                           0000BB   353 _PT1L	=	0x00bb
                           0000BA   354 _PX1L	=	0x00ba
                           0000B9   355 _PT0L	=	0x00b9
                           0000B8   356 _PX0L	=	0x00b8
                           0000C0   357 _P4_0	=	0x00c0
                           0000C1   358 _P4_1	=	0x00c1
                           0000C2   359 _P4_2	=	0x00c2
                           0000C3   360 _P4_3	=	0x00c3
                           0000C4   361 _P4_4	=	0x00c4
                           0000C5   362 _P4_5	=	0x00c5
                           0000C6   363 _P4_6	=	0x00c6
                           0000C7   364 _P4_7	=	0x00c7
                           0000E8   365 _P5_0	=	0x00e8
                           0000E9   366 _P5_1	=	0x00e9
                           0000EA   367 _P5_2	=	0x00ea
                           0000EB   368 _P5_3	=	0x00eb
                           0000EC   369 _P5_4	=	0x00ec
                           0000ED   370 _P5_5	=	0x00ed
                           0000EE   371 _P5_6	=	0x00ee
                           0000EF   372 _P5_7	=	0x00ef
                           0000F0   373 _BREG_F0	=	0x00f0
                           0000F1   374 _BREG_F1	=	0x00f1
                           0000F2   375 _BREG_F2	=	0x00f2
                           0000F3   376 _BREG_F3	=	0x00f3
                           0000F4   377 _BREG_F4	=	0x00f4
                           0000F5   378 _BREG_F5	=	0x00f5
                           0000F6   379 _BREG_F6	=	0x00f6
                           0000F7   380 _BREG_F7	=	0x00f7
                           0000A8   381 _EX0	=	0x00a8
                           0000A9   382 _ET0	=	0x00a9
                           0000AA   383 _EX1	=	0x00aa
                           0000AB   384 _ET1	=	0x00ab
                           0000AC   385 _ES	=	0x00ac
                           0000AF   386 _EA	=	0x00af
                           0000B8   387 _PX0	=	0x00b8
                           0000B9   388 _PT0	=	0x00b9
                           0000BA   389 _PX1	=	0x00ba
                           0000BB   390 _PT1	=	0x00bb
                           0000BC   391 _PS	=	0x00bc
                           000080   392 _P0_0	=	0x0080
                           000081   393 _P0_1	=	0x0081
                           000082   394 _P0_2	=	0x0082
                           000083   395 _P0_3	=	0x0083
                           000084   396 _P0_4	=	0x0084
                           000085   397 _P0_5	=	0x0085
                           000086   398 _P0_6	=	0x0086
                           000087   399 _P0_7	=	0x0087
                           000090   400 _P1_0	=	0x0090
                           000091   401 _P1_1	=	0x0091
                           000092   402 _P1_2	=	0x0092
                           000093   403 _P1_3	=	0x0093
                           000094   404 _P1_4	=	0x0094
                           000095   405 _P1_5	=	0x0095
                           000096   406 _P1_6	=	0x0096
                           000097   407 _P1_7	=	0x0097
                           0000A0   408 _P2_0	=	0x00a0
                           0000A1   409 _P2_1	=	0x00a1
                           0000A2   410 _P2_2	=	0x00a2
                           0000A3   411 _P2_3	=	0x00a3
                           0000A4   412 _P2_4	=	0x00a4
                           0000A5   413 _P2_5	=	0x00a5
                           0000A6   414 _P2_6	=	0x00a6
                           0000A7   415 _P2_7	=	0x00a7
                           0000B0   416 _P3_0	=	0x00b0
                           0000B1   417 _P3_1	=	0x00b1
                           0000B2   418 _P3_2	=	0x00b2
                           0000B3   419 _P3_3	=	0x00b3
                           0000B4   420 _P3_4	=	0x00b4
                           0000B5   421 _P3_5	=	0x00b5
                           0000B6   422 _P3_6	=	0x00b6
                           0000B7   423 _P3_7	=	0x00b7
                           0000B0   424 _RXD	=	0x00b0
                           0000B0   425 _RXD0	=	0x00b0
                           0000B1   426 _TXD	=	0x00b1
                           0000B1   427 _TXD0	=	0x00b1
                           0000B2   428 _INT0	=	0x00b2
                           0000B3   429 _INT1	=	0x00b3
                           0000B4   430 _T0	=	0x00b4
                           0000B5   431 _T1	=	0x00b5
                           0000B6   432 _WR	=	0x00b6
                           0000B7   433 _RD	=	0x00b7
                           0000D0   434 _P	=	0x00d0
                           0000D1   435 _F1	=	0x00d1
                           0000D2   436 _OV	=	0x00d2
                           0000D3   437 _RS0	=	0x00d3
                           0000D4   438 _RS1	=	0x00d4
                           0000D5   439 _F0	=	0x00d5
                           0000D6   440 _AC	=	0x00d6
                           0000D7   441 _CY	=	0x00d7
                           000098   442 _RI	=	0x0098
                           000099   443 _TI	=	0x0099
                           00009A   444 _RB8	=	0x009a
                           00009B   445 _TB8	=	0x009b
                           00009C   446 _REN	=	0x009c
                           00009D   447 _SM2	=	0x009d
                           00009E   448 _SM1	=	0x009e
                           00009F   449 _SM0	=	0x009f
                           000088   450 _IT0	=	0x0088
                           000089   451 _IE0	=	0x0089
                           00008A   452 _IT1	=	0x008a
                           00008B   453 _IE1	=	0x008b
                           00008C   454 _TR0	=	0x008c
                           00008D   455 _TF0	=	0x008d
                           00008E   456 _TR1	=	0x008e
                           00008F   457 _TF1	=	0x008f
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable register banks
                                    460 ;--------------------------------------------------------
                                    461 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        462 	.ds 8
                                    463 ;--------------------------------------------------------
                                    464 ; internal ram data
                                    465 ;--------------------------------------------------------
                                    466 	.area DSEG    (DATA)
                                    467 ;--------------------------------------------------------
                                    468 ; overlayable items in internal ram
                                    469 ;--------------------------------------------------------
                                    470 	.area	OSEG    (OVR,DATA)
      000000                        471 _hex_to_int_sloc0_1_0:
      000000                        472 	.ds 3
      000003                        473 _hex_to_int_sloc1_1_0:
      000003                        474 	.ds 1
      000004                        475 _hex_to_int_sloc2_1_0:
      000004                        476 	.ds 2
                                    477 ;--------------------------------------------------------
                                    478 ; Stack segment in internal ram
                                    479 ;--------------------------------------------------------
                                    480 	.area SSEG
      000000                        481 __start__stack:
      000000                        482 	.ds	1
                                    483 
                                    484 ;--------------------------------------------------------
                                    485 ; indirectly addressable internal ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area ISEG    (DATA)
                                    488 ;--------------------------------------------------------
                                    489 ; absolute internal ram data
                                    490 ;--------------------------------------------------------
                                    491 	.area IABS    (ABS,DATA)
                                    492 	.area IABS    (ABS,DATA)
                                    493 ;--------------------------------------------------------
                                    494 ; bit data
                                    495 ;--------------------------------------------------------
                                    496 	.area BSEG    (BIT)
                                    497 ;--------------------------------------------------------
                                    498 ; paged external ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area PSEG    (PAG,XDATA)
                                    501 ;--------------------------------------------------------
                                    502 ; uninitialized external ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area XSEG    (XDATA)
      000000                        505 _hex_to_int_str_10000_74:
      000000                        506 	.ds 3
      000003                        507 _hex_to_int_result_10000_75:
      000003                        508 	.ds 2
      000005                        509 _hex_to_int_ASCII_20000_76:
      000005                        510 	.ds 2
      000007                        511 _get_user_buffer_size_input_10000_81:
      000007                        512 	.ds 10
      000011                        513 _main_buffer_40003_94:
      000011                        514 	.ds 256
      000111                        515 _main_buffer_40003_99:
      000111                        516 	.ds 256
                                    517 ;--------------------------------------------------------
                                    518 ; absolute external ram data
                                    519 ;--------------------------------------------------------
                                    520 	.area XABS    (ABS,XDATA)
                                    521 ;--------------------------------------------------------
                                    522 ; initialized external ram data
                                    523 ;--------------------------------------------------------
                                    524 	.area XISEG   (XDATA)
                                    525 	.area HOME    (CODE)
                                    526 	.area GSINIT0 (CODE)
                                    527 	.area GSINIT1 (CODE)
                                    528 	.area GSINIT2 (CODE)
                                    529 	.area GSINIT3 (CODE)
                                    530 	.area GSINIT4 (CODE)
                                    531 	.area GSINIT5 (CODE)
                                    532 	.area GSINIT  (CODE)
                                    533 	.area GSFINAL (CODE)
                                    534 	.area CSEG    (CODE)
                                    535 ;--------------------------------------------------------
                                    536 ; interrupt vector
                                    537 ;--------------------------------------------------------
                                    538 	.area HOME    (CODE)
      000000                        539 __interrupt_vect:
      000000 02r00r00         [24]  540 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  541 	ljmp	_external_interrupt0_isr
                                    542 ;--------------------------------------------------------
                                    543 ; global & static initialisations
                                    544 ;--------------------------------------------------------
                                    545 	.area HOME    (CODE)
                                    546 	.area GSINIT  (CODE)
                                    547 	.area GSFINAL (CODE)
                                    548 	.area GSINIT  (CODE)
                                    549 	.globl __sdcc_gsinit_startup
                                    550 	.globl __sdcc_program_startup
                                    551 	.globl __start__stack
                                    552 	.globl __mcs51_genXINIT
                                    553 	.globl __mcs51_genXRAMCLEAR
                                    554 	.globl __mcs51_genRAMCLEAR
                                    555 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  556 	ljmp	__sdcc_program_startup
                                    557 ;--------------------------------------------------------
                                    558 ; Home
                                    559 ;--------------------------------------------------------
                                    560 	.area HOME    (CODE)
                                    561 	.area HOME    (CODE)
      000006                        562 __sdcc_program_startup:
      000006 02r02r3E         [24]  563 	ljmp	_main
                                    564 ;	return from main will return to caller
                                    565 ;--------------------------------------------------------
                                    566 ; code
                                    567 ;--------------------------------------------------------
                                    568 	.area CSEG    (CODE)
                                    569 ;------------------------------------------------------------
                                    570 ;Allocation info for local variables in function 'hex_to_int'
                                    571 ;------------------------------------------------------------
                                    572 ;str                       Allocated with name '_hex_to_int_str_10000_74'
                                    573 ;i                         Allocated with name '_hex_to_int_i_10000_75'
                                    574 ;result                    Allocated with name '_hex_to_int_result_10000_75'
                                    575 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_76'
                                    576 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    577 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    578 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    579 ;------------------------------------------------------------
                                    580 ;	main.c:12: int hex_to_int(char* str)
                                    581 ;	-----------------------------------------
                                    582 ;	 function hex_to_int
                                    583 ;	-----------------------------------------
      000000                        584 _hex_to_int:
                           000007   585 	ar7 = 0x07
                           000006   586 	ar6 = 0x06
                           000005   587 	ar5 = 0x05
                           000004   588 	ar4 = 0x04
                           000003   589 	ar3 = 0x03
                           000002   590 	ar2 = 0x02
                           000001   591 	ar1 = 0x01
                           000000   592 	ar0 = 0x00
      000000 AF F0            [24]  593 	mov	r7,b
      000002 AE 83            [24]  594 	mov	r6,dph
      000004 E5 82            [12]  595 	mov	a,dpl
      000006 90r00r00         [24]  596 	mov	dptr,#_hex_to_int_str_10000_74
      000009 F0               [24]  597 	movx	@dptr,a
      00000A EE               [12]  598 	mov	a,r6
      00000B A3               [24]  599 	inc	dptr
      00000C F0               [24]  600 	movx	@dptr,a
      00000D EF               [12]  601 	mov	a,r7
      00000E A3               [24]  602 	inc	dptr
      00000F F0               [24]  603 	movx	@dptr,a
                                    604 ;	main.c:15: int i = 0, result = 0;
      000010 90r00r03         [24]  605 	mov	dptr,#_hex_to_int_result_10000_75
      000013 E4               [12]  606 	clr	a
      000014 F0               [24]  607 	movx	@dptr,a
      000015 A3               [24]  608 	inc	dptr
      000016 F0               [24]  609 	movx	@dptr,a
                                    610 ;	main.c:16: while(str[i] != '\0')
      000017 90r00r00         [24]  611 	mov	dptr,#_hex_to_int_str_10000_74
      00001A E0               [24]  612 	movx	a,@dptr
      00001B FD               [12]  613 	mov	r5,a
      00001C A3               [24]  614 	inc	dptr
      00001D E0               [24]  615 	movx	a,@dptr
      00001E FE               [12]  616 	mov	r6,a
      00001F A3               [24]  617 	inc	dptr
      000020 E0               [24]  618 	movx	a,@dptr
      000021 FF               [12]  619 	mov	r7,a
      000022 8D 02            [24]  620 	mov	ar2,r5
      000024 8E 03            [24]  621 	mov	ar3,r6
      000026 8F 04            [24]  622 	mov	ar4,r7
      000028 8D*00            [24]  623 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  624 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  625 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  626 	mov	r0,#0x00
      000030 79 00            [12]  627 	mov	r1,#0x00
      000032                        628 00112$:
      000032 C0 02            [24]  629 	push	ar2
      000034 C0 03            [24]  630 	push	ar3
      000036 C0 04            [24]  631 	push	ar4
      000038 E8               [12]  632 	mov	a,r0
      000039 25*00            [12]  633 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  634 	mov	r2,a
      00003C E9               [12]  635 	mov	a,r1
      00003D 35*01            [12]  636 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  637 	mov	r3,a
      000040 AC*02            [24]  638 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  639 	mov	dpl,r2
      000044 8B 83            [24]  640 	mov	dph,r3
      000046 8C F0            [24]  641 	mov	b,r4
      000048 12r00r00         [24]  642 	lcall	__gptrget
      00004B F5*03            [12]  643 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  644 	pop	ar4
      00004F D0 03            [24]  645 	pop	ar3
      000051 D0 02            [24]  646 	pop	ar2
      000053 E5*03            [12]  647 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  648 	jnz	00166$
      000057 02r01rAE         [24]  649 	ljmp	00114$
      00005A                        650 00166$:
                                    651 ;	main.c:18: int ASCII = (int)str[i];
      00005A C0 02            [24]  652 	push	ar2
      00005C C0 03            [24]  653 	push	ar3
      00005E C0 04            [24]  654 	push	ar4
      000060 85*03*04         [24]  655 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  656 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  657 	mov	dptr,#_hex_to_int_ASCII_20000_76
      000069 E5*04            [12]  658 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  659 	movx	@dptr,a
      00006C E5*05            [12]  660 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  661 	inc	dptr
      00006F F0               [24]  662 	movx	@dptr,a
                                    663 ;	main.c:19: result *= 16;
      000070 90r00r03         [24]  664 	mov	dptr,#_hex_to_int_result_10000_75
      000073 E0               [24]  665 	movx	a,@dptr
      000074 FB               [12]  666 	mov	r3,a
      000075 A3               [24]  667 	inc	dptr
      000076 E0               [24]  668 	movx	a,@dptr
      000077 C4               [12]  669 	swap	a
      000078 54 F0            [12]  670 	anl	a,#0xf0
      00007A CB               [12]  671 	xch	a,r3
      00007B C4               [12]  672 	swap	a
      00007C CB               [12]  673 	xch	a,r3
      00007D 6B               [12]  674 	xrl	a,r3
      00007E CB               [12]  675 	xch	a,r3
      00007F 54 F0            [12]  676 	anl	a,#0xf0
      000081 CB               [12]  677 	xch	a,r3
      000082 6B               [12]  678 	xrl	a,r3
      000083 FC               [12]  679 	mov	r4,a
      000084 90r00r03         [24]  680 	mov	dptr,#_hex_to_int_result_10000_75
      000087 EB               [12]  681 	mov	a,r3
      000088 F0               [24]  682 	movx	@dptr,a
      000089 EC               [12]  683 	mov	a,r4
      00008A A3               [24]  684 	inc	dptr
      00008B F0               [24]  685 	movx	@dptr,a
                                    686 ;	main.c:20: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  687 	clr	c
      00008D E5*04            [12]  688 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  689 	subb	a,#0x30
      000091 E5*05            [12]  690 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  691 	xrl	a,#0x80
      000095 94 80            [12]  692 	subb	a,#0x80
      000097 D0 04            [24]  693 	pop	ar4
      000099 D0 03            [24]  694 	pop	ar3
      00009B D0 02            [24]  695 	pop	ar2
      00009D 40 3F            [24]  696 	jc	00109$
      00009F 74 39            [12]  697 	mov	a,#0x39
      0000A1 95*04            [12]  698 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  699 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  700 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  701 	xrl	b,#0x80
      0000AB 95 F0            [12]  702 	subb	a,b
      0000AD 40 2F            [24]  703 	jc	00109$
                                    704 ;	main.c:22: result += str[i] - 48;
      0000AF C0 02            [24]  705 	push	ar2
      0000B1 C0 03            [24]  706 	push	ar3
      0000B3 C0 04            [24]  707 	push	ar4
      0000B5 E5*04            [12]  708 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  709 	add	a,#0xd0
      0000B9 F5*04            [12]  710 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  711 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  712 	addc	a,#0xff
      0000BF F5*05            [12]  713 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  714 	mov	dptr,#_hex_to_int_result_10000_75
      0000C4 E0               [24]  715 	movx	a,@dptr
      0000C5 FA               [12]  716 	mov	r2,a
      0000C6 A3               [24]  717 	inc	dptr
      0000C7 E0               [24]  718 	movx	a,@dptr
      0000C8 FC               [12]  719 	mov	r4,a
      0000C9 90r00r03         [24]  720 	mov	dptr,#_hex_to_int_result_10000_75
      0000CC E5*04            [12]  721 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  722 	add	a, r2
      0000CF F0               [24]  723 	movx	@dptr,a
      0000D0 E5*05            [12]  724 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  725 	addc	a, r4
      0000D3 A3               [24]  726 	inc	dptr
      0000D4 F0               [24]  727 	movx	@dptr,a
      0000D5 D0 04            [24]  728 	pop	ar4
      0000D7 D0 03            [24]  729 	pop	ar3
      0000D9 D0 02            [24]  730 	pop	ar2
      0000DB 02r01rA6         [24]  731 	ljmp	00110$
      0000DE                        732 00109$:
                                    733 ;	main.c:24: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  734 	mov	dptr,#_hex_to_int_ASCII_20000_76
      0000E1 E0               [24]  735 	movx	a,@dptr
      0000E2 F5*04            [12]  736 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  737 	inc	dptr
      0000E5 E0               [24]  738 	movx	a,@dptr
      0000E6 F5*05            [12]  739 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  740 	clr	c
      0000E9 E5*04            [12]  741 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  742 	subb	a,#0x41
      0000ED E5*05            [12]  743 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  744 	xrl	a,#0x80
      0000F1 94 80            [12]  745 	subb	a,#0x80
      0000F3 40 4E            [24]  746 	jc	00105$
      0000F5 74 46            [12]  747 	mov	a,#0x46
      0000F7 95*04            [12]  748 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  749 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  750 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  751 	xrl	b,#0x80
      000101 95 F0            [12]  752 	subb	a,b
      000103 40 3E            [24]  753 	jc	00105$
                                    754 ;	main.c:26: result += str[i] - 55;
      000105 C0 05            [24]  755 	push	ar5
      000107 C0 06            [24]  756 	push	ar6
      000109 C0 07            [24]  757 	push	ar7
      00010B E8               [12]  758 	mov	a,r0
      00010C 2A               [12]  759 	add	a, r2
      00010D FD               [12]  760 	mov	r5,a
      00010E E9               [12]  761 	mov	a,r1
      00010F 3B               [12]  762 	addc	a, r3
      000110 FE               [12]  763 	mov	r6,a
      000111 8C 07            [24]  764 	mov	ar7,r4
      000113 8D 82            [24]  765 	mov	dpl,r5
      000115 8E 83            [24]  766 	mov	dph,r6
      000117 8F F0            [24]  767 	mov	b,r7
      000119 12r00r00         [24]  768 	lcall	__gptrget
      00011C 7F 00            [12]  769 	mov	r7,#0x00
      00011E 24 C9            [12]  770 	add	a,#0xc9
      000120 F5*04            [12]  771 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  772 	mov	a,r7
      000123 34 FF            [12]  773 	addc	a,#0xff
      000125 F5*05            [12]  774 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  775 	mov	dptr,#_hex_to_int_result_10000_75
      00012A E0               [24]  776 	movx	a,@dptr
      00012B FE               [12]  777 	mov	r6,a
      00012C A3               [24]  778 	inc	dptr
      00012D E0               [24]  779 	movx	a,@dptr
      00012E FF               [12]  780 	mov	r7,a
      00012F 90r00r03         [24]  781 	mov	dptr,#_hex_to_int_result_10000_75
      000132 E5*04            [12]  782 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  783 	add	a, r6
      000135 F0               [24]  784 	movx	@dptr,a
      000136 E5*05            [12]  785 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  786 	addc	a, r7
      000139 A3               [24]  787 	inc	dptr
      00013A F0               [24]  788 	movx	@dptr,a
      00013B D0 07            [24]  789 	pop	ar7
      00013D D0 06            [24]  790 	pop	ar6
      00013F D0 05            [24]  791 	pop	ar5
      000141 80 63            [24]  792 	sjmp	00110$
      000143                        793 00105$:
                                    794 ;	main.c:28: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  795 	mov	dptr,#_hex_to_int_ASCII_20000_76
      000146 E0               [24]  796 	movx	a,@dptr
      000147 F5*04            [12]  797 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  798 	inc	dptr
      00014A E0               [24]  799 	movx	a,@dptr
      00014B F5*05            [12]  800 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  801 	clr	c
      00014E E5*04            [12]  802 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  803 	subb	a,#0x61
      000152 E5*05            [12]  804 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  805 	xrl	a,#0x80
      000156 94 80            [12]  806 	subb	a,#0x80
      000158 40 4C            [24]  807 	jc	00110$
      00015A 74 66            [12]  808 	mov	a,#0x66
      00015C 95*04            [12]  809 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  810 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  811 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  812 	xrl	b,#0x80
      000166 95 F0            [12]  813 	subb	a,b
      000168 40 3C            [24]  814 	jc	00110$
                                    815 ;	main.c:30: result += str[i] - 87;
      00016A C0 02            [24]  816 	push	ar2
      00016C C0 03            [24]  817 	push	ar3
      00016E C0 04            [24]  818 	push	ar4
      000170 E8               [12]  819 	mov	a,r0
      000171 2D               [12]  820 	add	a, r5
      000172 FA               [12]  821 	mov	r2,a
      000173 E9               [12]  822 	mov	a,r1
      000174 3E               [12]  823 	addc	a, r6
      000175 FB               [12]  824 	mov	r3,a
      000176 8F 04            [24]  825 	mov	ar4,r7
      000178 8A 82            [24]  826 	mov	dpl,r2
      00017A 8B 83            [24]  827 	mov	dph,r3
      00017C 8C F0            [24]  828 	mov	b,r4
      00017E 12r00r00         [24]  829 	lcall	__gptrget
      000181 7C 00            [12]  830 	mov	r4,#0x00
      000183 24 A9            [12]  831 	add	a,#0xa9
      000185 F5*04            [12]  832 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  833 	mov	a,r4
      000188 34 FF            [12]  834 	addc	a,#0xff
      00018A F5*05            [12]  835 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  836 	mov	dptr,#_hex_to_int_result_10000_75
      00018F E0               [24]  837 	movx	a,@dptr
      000190 FB               [12]  838 	mov	r3,a
      000191 A3               [24]  839 	inc	dptr
      000192 E0               [24]  840 	movx	a,@dptr
      000193 FC               [12]  841 	mov	r4,a
      000194 90r00r03         [24]  842 	mov	dptr,#_hex_to_int_result_10000_75
      000197 E5*04            [12]  843 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  844 	add	a, r3
      00019A F0               [24]  845 	movx	@dptr,a
      00019B E5*05            [12]  846 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  847 	addc	a, r4
      00019E A3               [24]  848 	inc	dptr
      00019F F0               [24]  849 	movx	@dptr,a
                                    850 ;	main.c:34: return result;
      0001A0 D0 04            [24]  851 	pop	ar4
      0001A2 D0 03            [24]  852 	pop	ar3
      0001A4 D0 02            [24]  853 	pop	ar2
                                    854 ;	main.c:30: result += str[i] - 87;
      0001A6                        855 00110$:
                                    856 ;	main.c:32: i++;
      0001A6 08               [12]  857 	inc	r0
      0001A7 B8 00 01         [24]  858 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  859 	inc	r1
      0001AB                        860 00173$:
      0001AB 02r00r32         [24]  861 	ljmp	00112$
      0001AE                        862 00114$:
                                    863 ;	main.c:34: return result;
      0001AE 90r00r03         [24]  864 	mov	dptr,#_hex_to_int_result_10000_75
      0001B1 E0               [24]  865 	movx	a,@dptr
      0001B2 FE               [12]  866 	mov	r6,a
      0001B3 A3               [24]  867 	inc	dptr
      0001B4 E0               [24]  868 	movx	a,@dptr
                                    869 ;	main.c:36: }
      0001B5 8E 82            [24]  870 	mov	dpl,r6
      0001B7 F5 83            [12]  871 	mov	dph,a
      0001B9 22               [24]  872 	ret
                                    873 ;------------------------------------------------------------
                                    874 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    875 ;------------------------------------------------------------
                                    876 ;i                         Allocated with name '_get_user_buffer_size_i_10000_81'
                                    877 ;output                    Allocated with name '_get_user_buffer_size_output_10000_81'
                                    878 ;input                     Allocated with name '_get_user_buffer_size_input_10000_81'
                                    879 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_81'
                                    880 ;------------------------------------------------------------
                                    881 ;	main.c:39: int get_user_buffer_size(void)
                                    882 ;	-----------------------------------------
                                    883 ;	 function get_user_buffer_size
                                    884 ;	-----------------------------------------
      0001BA                        885 _get_user_buffer_size:
                                    886 ;	main.c:45: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  887 	mov	r6,#0x00
      0001BC 7F 00            [12]  888 	mov	r7,#0x00
      0001BE                        889 00103$:
      0001BE C0 07            [24]  890 	push	ar7
      0001C0 C0 06            [24]  891 	push	ar6
      0001C2 12r00r00         [24]  892 	lcall	_getchar
      0001C5 AC 82            [24]  893 	mov	r4, dpl
      0001C7 D0 06            [24]  894 	pop	ar6
      0001C9 D0 07            [24]  895 	pop	ar7
      0001CB BC 0A 02         [24]  896 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  897 	sjmp	00105$
      0001D0                        898 00133$:
      0001D0 BC 0D 02         [24]  899 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  900 	sjmp	00105$
      0001D5                        901 00134$:
      0001D5 C3               [12]  902 	clr	c
      0001D6 EE               [12]  903 	mov	a,r6
      0001D7 94 09            [12]  904 	subb	a,#0x09
      0001D9 EF               [12]  905 	mov	a,r7
      0001DA 64 80            [12]  906 	xrl	a,#0x80
      0001DC 94 80            [12]  907 	subb	a,#0x80
      0001DE 50 2A            [24]  908 	jnc	00105$
                                    909 ;	main.c:47: putchar(ch);
      0001E0 8C 03            [24]  910 	mov	ar3,r4
      0001E2 7D 00            [12]  911 	mov	r5,#0x00
      0001E4 8B 82            [24]  912 	mov	dpl, r3
      0001E6 8D 83            [24]  913 	mov	dph, r5
      0001E8 C0 07            [24]  914 	push	ar7
      0001EA C0 06            [24]  915 	push	ar6
      0001EC C0 04            [24]  916 	push	ar4
      0001EE 12r00r00         [24]  917 	lcall	_putchar
      0001F1 D0 04            [24]  918 	pop	ar4
      0001F3 D0 06            [24]  919 	pop	ar6
      0001F5 D0 07            [24]  920 	pop	ar7
                                    921 ;	main.c:48: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12]  922 	mov	a,r6
      0001F8 24r07            [12]  923 	add	a, #_get_user_buffer_size_input_10000_81
      0001FA F5 82            [12]  924 	mov	dpl,a
      0001FC EF               [12]  925 	mov	a,r7
      0001FD 34s00            [12]  926 	addc	a, #(_get_user_buffer_size_input_10000_81 >> 8)
      0001FF F5 83            [12]  927 	mov	dph,a
      000201 EC               [12]  928 	mov	a,r4
      000202 F0               [24]  929 	movx	@dptr,a
                                    930 ;	main.c:49: i++;
      000203 0E               [12]  931 	inc	r6
      000204 BE 00 B7         [24]  932 	cjne	r6,#0x00,00103$
      000207 0F               [12]  933 	inc	r7
      000208 80 B4            [24]  934 	sjmp	00103$
      00020A                        935 00105$:
                                    936 ;	main.c:51: input[i] = '\0';
      00020A EE               [12]  937 	mov	a,r6
      00020B 24r07            [12]  938 	add	a, #_get_user_buffer_size_input_10000_81
      00020D F5 82            [12]  939 	mov	dpl,a
      00020F EF               [12]  940 	mov	a,r7
      000210 34s00            [12]  941 	addc	a, #(_get_user_buffer_size_input_10000_81 >> 8)
      000212 F5 83            [12]  942 	mov	dph,a
      000214 E4               [12]  943 	clr	a
      000215 F0               [24]  944 	movx	@dptr,a
                                    945 ;	main.c:52: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24]  946 	mov	dptr,#_get_user_buffer_size_input_10000_81
      000219 F5 F0            [12]  947 	mov	b,a
      00021B 12r00r00         [24]  948 	lcall	_hex_to_int
      00021E AE 82            [24]  949 	mov	r6, dpl
      000220 AF 83            [24]  950 	mov	r7, dph
                                    951 ;	main.c:53: printf_tiny("\n\r");
      000222 C0 07            [24]  952 	push	ar7
      000224 C0 06            [24]  953 	push	ar6
      000226 74r00            [12]  954 	mov	a,#___str_0
      000228 C0 E0            [24]  955 	push	acc
      00022A 74s00            [12]  956 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24]  957 	push	acc
      00022E 12r00r00         [24]  958 	lcall	_printf_tiny
      000231 15 81            [12]  959 	dec	sp
      000233 15 81            [12]  960 	dec	sp
      000235 D0 06            [24]  961 	pop	ar6
      000237 D0 07            [24]  962 	pop	ar7
                                    963 ;	main.c:55: return output;
      000239 8E 82            [24]  964 	mov	dpl, r6
      00023B 8F 83            [24]  965 	mov	dph, r7
                                    966 ;	main.c:56: }
      00023D 22               [24]  967 	ret
                                    968 ;------------------------------------------------------------
                                    969 ;Allocation info for local variables in function 'main'
                                    970 ;------------------------------------------------------------
                                    971 ;c                         Allocated with name '_main_c_20001_86'
                                    972 ;reg_bank                  Allocated with name '_main_reg_bank_40002_89'
                                    973 ;addr                      Allocated with name '_main_addr_40003_90'
                                    974 ;data                      Allocated with name '_main_data_40004_91'
                                    975 ;num_bytes                 Allocated with name '_main_num_bytes_40002_93'
                                    976 ;start_address             Allocated with name '_main_start_address_40003_94'
                                    977 ;buffer                    Allocated with name '_main_buffer_40003_94'
                                    978 ;i                         Allocated with name '_main_i_50003_95'
                                    979 ;num_bytes                 Allocated with name '_main_num_bytes_40002_98'
                                    980 ;start_address             Allocated with name '_main_start_address_40003_99'
                                    981 ;buffer                    Allocated with name '_main_buffer_40003_99'
                                    982 ;current_erxrdpt           Allocated with name '_main_current_erxrdpt_40004_100'
                                    983 ;erxrdpt_low               Allocated with name '_main_erxrdpt_low_40004_100'
                                    984 ;erxrdpt_high              Allocated with name '_main_erxrdpt_high_40004_100'
                                    985 ;reg_bank                  Allocated with name '_main_reg_bank_40002_102'
                                    986 ;addr                      Allocated with name '_main_addr_40003_103'
                                    987 ;data                      Allocated with name '_main_data_40003_103'
                                    988 ;addr                      Allocated with name '_main_addr_40002_105'
                                    989 ;data                      Allocated with name '_main_data_40003_106'
                                    990 ;addr                      Allocated with name '_main_addr_40002_108'
                                    991 ;data                      Allocated with name '_main_data_40002_108'
                                    992 ;addr                      Allocated with name '_main_addr_40002_111'
                                    993 ;bank                      Allocated with name '_main_bank_40003_112'
                                    994 ;data                      Allocated with name '_main_data_40003_112'
                                    995 ;i                         Allocated with name '_main_i_50001_117'
                                    996 ;------------------------------------------------------------
                                    997 ;	main.c:58: void main(void)
                                    998 ;	-----------------------------------------
                                    999 ;	 function main
                                   1000 ;	-----------------------------------------
      00023E                       1001 _main:
                                   1002 ;	main.c:60: ENC_RESET = 1;
                                   1003 ;	assignBit
      00023E D2 90            [12] 1004 	setb	_P1_0
                                   1005 ;	main.c:61: printf("SPI Operations on 8051\n\r");
      000240 74r03            [12] 1006 	mov	a,#___str_1
      000242 C0 E0            [24] 1007 	push	acc
      000244 74s00            [12] 1008 	mov	a,#(___str_1 >> 8)
      000246 C0 E0            [24] 1009 	push	acc
      000248 74 80            [12] 1010 	mov	a,#0x80
      00024A C0 E0            [24] 1011 	push	acc
      00024C 12r00r00         [24] 1012 	lcall	_printf
      00024F 15 81            [12] 1013 	dec	sp
      000251 15 81            [12] 1014 	dec	sp
      000253 15 81            [12] 1015 	dec	sp
                                   1016 ;	main.c:62: configure_SPI();
      000255 12r00r00         [24] 1017 	lcall	_configure_SPI
                                   1018 ;	main.c:63: RX_disable();
      000258 12r00r00         [24] 1019 	lcall	_RX_disable
                                   1020 ;	main.c:65: while(1)
      00025B                       1021 00118$:
                                   1022 ;	main.c:67: printf("\n\rChoose an action: \n\r");
      00025B 74r1C            [12] 1023 	mov	a,#___str_2
      00025D C0 E0            [24] 1024 	push	acc
      00025F 74s00            [12] 1025 	mov	a,#(___str_2 >> 8)
      000261 C0 E0            [24] 1026 	push	acc
      000263 74 80            [12] 1027 	mov	a,#0x80
      000265 C0 E0            [24] 1028 	push	acc
      000267 12r00r00         [24] 1029 	lcall	_printf
      00026A 15 81            [12] 1030 	dec	sp
      00026C 15 81            [12] 1031 	dec	sp
      00026E 15 81            [12] 1032 	dec	sp
                                   1033 ;	main.c:68: printf("1 --> Control Write\n\r");
      000270 74r33            [12] 1034 	mov	a,#___str_3
      000272 C0 E0            [24] 1035 	push	acc
      000274 74s00            [12] 1036 	mov	a,#(___str_3 >> 8)
      000276 C0 E0            [24] 1037 	push	acc
      000278 74 80            [12] 1038 	mov	a,#0x80
      00027A C0 E0            [24] 1039 	push	acc
      00027C 12r00r00         [24] 1040 	lcall	_printf
      00027F 15 81            [12] 1041 	dec	sp
      000281 15 81            [12] 1042 	dec	sp
      000283 15 81            [12] 1043 	dec	sp
                                   1044 ;	main.c:69: printf("2 --> Buffer Write\n\r");
      000285 74r49            [12] 1045 	mov	a,#___str_4
      000287 C0 E0            [24] 1046 	push	acc
      000289 74s00            [12] 1047 	mov	a,#(___str_4 >> 8)
      00028B C0 E0            [24] 1048 	push	acc
      00028D 74 80            [12] 1049 	mov	a,#0x80
      00028F C0 E0            [24] 1050 	push	acc
      000291 12r00r00         [24] 1051 	lcall	_printf
      000294 15 81            [12] 1052 	dec	sp
      000296 15 81            [12] 1053 	dec	sp
      000298 15 81            [12] 1054 	dec	sp
                                   1055 ;	main.c:70: printf("3 --> Buffer Read\n\r");
      00029A 74r5E            [12] 1056 	mov	a,#___str_5
      00029C C0 E0            [24] 1057 	push	acc
      00029E 74s00            [12] 1058 	mov	a,#(___str_5 >> 8)
      0002A0 C0 E0            [24] 1059 	push	acc
      0002A2 74 80            [12] 1060 	mov	a,#0x80
      0002A4 C0 E0            [24] 1061 	push	acc
      0002A6 12r00r00         [24] 1062 	lcall	_printf
      0002A9 15 81            [12] 1063 	dec	sp
      0002AB 15 81            [12] 1064 	dec	sp
      0002AD 15 81            [12] 1065 	dec	sp
                                   1066 ;	main.c:71: printf("4 --> MAC Register Read\n\r");
      0002AF 74r72            [12] 1067 	mov	a,#___str_6
      0002B1 C0 E0            [24] 1068 	push	acc
      0002B3 74s00            [12] 1069 	mov	a,#(___str_6 >> 8)
      0002B5 C0 E0            [24] 1070 	push	acc
      0002B7 74 80            [12] 1071 	mov	a,#0x80
      0002B9 C0 E0            [24] 1072 	push	acc
      0002BB 12r00r00         [24] 1073 	lcall	_printf
      0002BE 15 81            [12] 1074 	dec	sp
      0002C0 15 81            [12] 1075 	dec	sp
      0002C2 15 81            [12] 1076 	dec	sp
                                   1077 ;	main.c:72: printf("5 --> PHY SPI Write\n\r");
      0002C4 74r8C            [12] 1078 	mov	a,#___str_7
      0002C6 C0 E0            [24] 1079 	push	acc
      0002C8 74s00            [12] 1080 	mov	a,#(___str_7 >> 8)
      0002CA C0 E0            [24] 1081 	push	acc
      0002CC 74 80            [12] 1082 	mov	a,#0x80
      0002CE C0 E0            [24] 1083 	push	acc
      0002D0 12r00r00         [24] 1084 	lcall	_printf
      0002D3 15 81            [12] 1085 	dec	sp
      0002D5 15 81            [12] 1086 	dec	sp
      0002D7 15 81            [12] 1087 	dec	sp
                                   1088 ;	main.c:73: printf("6 --> PHY SPI Read\n\r");
      0002D9 74rA2            [12] 1089 	mov	a,#___str_8
      0002DB C0 E0            [24] 1090 	push	acc
      0002DD 74s00            [12] 1091 	mov	a,#(___str_8 >> 8)
      0002DF C0 E0            [24] 1092 	push	acc
      0002E1 74 80            [12] 1093 	mov	a,#0x80
      0002E3 C0 E0            [24] 1094 	push	acc
      0002E5 12r00r00         [24] 1095 	lcall	_printf
      0002E8 15 81            [12] 1096 	dec	sp
      0002EA 15 81            [12] 1097 	dec	sp
      0002EC 15 81            [12] 1098 	dec	sp
                                   1099 ;	main.c:74: printf("7 --> ENC Reset\n\r");
      0002EE 74rB7            [12] 1100 	mov	a,#___str_9
      0002F0 C0 E0            [24] 1101 	push	acc
      0002F2 74s00            [12] 1102 	mov	a,#(___str_9 >> 8)
      0002F4 C0 E0            [24] 1103 	push	acc
      0002F6 74 80            [12] 1104 	mov	a,#0x80
      0002F8 C0 E0            [24] 1105 	push	acc
      0002FA 12r00r00         [24] 1106 	lcall	_printf
      0002FD 15 81            [12] 1107 	dec	sp
      0002FF 15 81            [12] 1108 	dec	sp
      000301 15 81            [12] 1109 	dec	sp
                                   1110 ;	main.c:75: printf("8 --> Read ETH Register\n\r");
      000303 74rC9            [12] 1111 	mov	a,#___str_10
      000305 C0 E0            [24] 1112 	push	acc
      000307 74s00            [12] 1113 	mov	a,#(___str_10 >> 8)
      000309 C0 E0            [24] 1114 	push	acc
      00030B 74 80            [12] 1115 	mov	a,#0x80
      00030D C0 E0            [24] 1116 	push	acc
      00030F 12r00r00         [24] 1117 	lcall	_printf
      000312 15 81            [12] 1118 	dec	sp
      000314 15 81            [12] 1119 	dec	sp
      000316 15 81            [12] 1120 	dec	sp
                                   1121 ;	main.c:76: printf("9 --> Display Menu\n\r");
      000318 74rE3            [12] 1122 	mov	a,#___str_11
      00031A C0 E0            [24] 1123 	push	acc
      00031C 74s00            [12] 1124 	mov	a,#(___str_11 >> 8)
      00031E C0 E0            [24] 1125 	push	acc
      000320 74 80            [12] 1126 	mov	a,#0x80
      000322 C0 E0            [24] 1127 	push	acc
      000324 12r00r00         [24] 1128 	lcall	_printf
      000327 15 81            [12] 1129 	dec	sp
      000329 15 81            [12] 1130 	dec	sp
      00032B 15 81            [12] 1131 	dec	sp
                                   1132 ;	main.c:77: printf("A --> Send ARP Request\n\r");
      00032D 74rF8            [12] 1133 	mov	a,#___str_12
      00032F C0 E0            [24] 1134 	push	acc
      000331 74s00            [12] 1135 	mov	a,#(___str_12 >> 8)
      000333 C0 E0            [24] 1136 	push	acc
      000335 74 80            [12] 1137 	mov	a,#0x80
      000337 C0 E0            [24] 1138 	push	acc
      000339 12r00r00         [24] 1139 	lcall	_printf
      00033C 15 81            [12] 1140 	dec	sp
      00033E 15 81            [12] 1141 	dec	sp
      000340 15 81            [12] 1142 	dec	sp
                                   1143 ;	main.c:78: printf("B --> Init RX buffers\n\r");
      000342 74r11            [12] 1144 	mov	a,#___str_13
      000344 C0 E0            [24] 1145 	push	acc
      000346 74s01            [12] 1146 	mov	a,#(___str_13 >> 8)
      000348 C0 E0            [24] 1147 	push	acc
      00034A 74 80            [12] 1148 	mov	a,#0x80
      00034C C0 E0            [24] 1149 	push	acc
      00034E 12r00r00         [24] 1150 	lcall	_printf
      000351 15 81            [12] 1151 	dec	sp
      000353 15 81            [12] 1152 	dec	sp
      000355 15 81            [12] 1153 	dec	sp
                                   1154 ;	main.c:79: printf("C --> Hard Reset(nRESET pin)\n\r");
      000357 74r29            [12] 1155 	mov	a,#___str_14
      000359 C0 E0            [24] 1156 	push	acc
      00035B 74s01            [12] 1157 	mov	a,#(___str_14 >> 8)
      00035D C0 E0            [24] 1158 	push	acc
      00035F 74 80            [12] 1159 	mov	a,#0x80
      000361 C0 E0            [24] 1160 	push	acc
      000363 12r00r00         [24] 1161 	lcall	_printf
      000366 15 81            [12] 1162 	dec	sp
      000368 15 81            [12] 1163 	dec	sp
      00036A 15 81            [12] 1164 	dec	sp
                                   1165 ;	main.c:81: char c = getchar();
      00036C 12r00r00         [24] 1166 	lcall	_getchar
      00036F AE 82            [24] 1167 	mov	r6, dpl
                                   1168 ;	main.c:82: putchar(c);
      000371 8E 05            [24] 1169 	mov	ar5,r6
      000373 7F 00            [12] 1170 	mov	r7,#0x00
      000375 8D 82            [24] 1171 	mov	dpl, r5
      000377 8F 83            [24] 1172 	mov	dph, r7
      000379 C0 06            [24] 1173 	push	ar6
      00037B 12r00r00         [24] 1174 	lcall	_putchar
                                   1175 ;	main.c:83: printf("\n\r");
      00037E 74r00            [12] 1176 	mov	a,#___str_0
      000380 C0 E0            [24] 1177 	push	acc
      000382 74s00            [12] 1178 	mov	a,#(___str_0 >> 8)
      000384 C0 E0            [24] 1179 	push	acc
      000386 74 80            [12] 1180 	mov	a,#0x80
      000388 C0 E0            [24] 1181 	push	acc
      00038A 12r00r00         [24] 1182 	lcall	_printf
      00038D 15 81            [12] 1183 	dec	sp
      00038F 15 81            [12] 1184 	dec	sp
      000391 15 81            [12] 1185 	dec	sp
      000393 D0 06            [24] 1186 	pop	ar6
                                   1187 ;	main.c:85: switch(c)
      000395 BE 31 00         [24] 1188 	cjne	r6,#0x31,00172$
      000398                       1189 00172$:
      000398 50 03            [24] 1190 	jnc	00173$
      00039A 02r08rD6         [24] 1191 	ljmp	00115$
      00039D                       1192 00173$:
      00039D EE               [12] 1193 	mov	a,r6
      00039E 24 BC            [12] 1194 	add	a,#0xff - 0x43
      0003A0 50 03            [24] 1195 	jnc	00174$
      0003A2 02r08rD6         [24] 1196 	ljmp	00115$
      0003A5                       1197 00174$:
      0003A5 EE               [12] 1198 	mov	a,r6
      0003A6 24 CF            [12] 1199 	add	a,#0xcf
      0003A8 FE               [12] 1200 	mov	r6,a
      0003A9 24 0A            [12] 1201 	add	a,#(00175$-3-.)
      0003AB 83               [24] 1202 	movc	a,@a+pc
      0003AC F5 82            [12] 1203 	mov	dpl,a
      0003AE EE               [12] 1204 	mov	a,r6
      0003AF 24 17            [12] 1205 	add	a,#(00176$-3-.)
      0003B1 83               [24] 1206 	movc	a,@a+pc
      0003B2 F5 83            [12] 1207 	mov	dph,a
      0003B4 E4               [12] 1208 	clr	a
      0003B5 73               [24] 1209 	jmp	@a+dptr
      0003B6                       1210 00175$:
      0003B6rDC                    1211 	.db	00101$
      0003B7r44                    1212 	.db	00102$
      0003B8r42                    1213 	.db	00104$
      0003B9r50                    1214 	.db	00105$
      0003BArB2                    1215 	.db	00106$
      0003BBr1D                    1216 	.db	00107$
      0003BCr58                    1217 	.db	00108$
      0003BDr73                    1218 	.db	00109$
      0003BErD5                    1219 	.db	00110$
      0003BFrD6                    1220 	.db	00115$
      0003C0rD6                    1221 	.db	00115$
      0003C1rD6                    1222 	.db	00115$
      0003C2rD6                    1223 	.db	00115$
      0003C3rD6                    1224 	.db	00115$
      0003C4rD6                    1225 	.db	00115$
      0003C5rD6                    1226 	.db	00115$
      0003C6r95                    1227 	.db	00111$
      0003C7r9E                    1228 	.db	00112$
      0003C8rA4                    1229 	.db	00113$
      0003C9                       1230 00176$:
      0003C9s03                    1231 	.db	00101$>>8
      0003CAs04                    1232 	.db	00102$>>8
      0003CBs05                    1233 	.db	00104$>>8
      0003CCs06                    1234 	.db	00105$>>8
      0003CDs06                    1235 	.db	00106$>>8
      0003CEs07                    1236 	.db	00107$>>8
      0003CFs07                    1237 	.db	00108$>>8
      0003D0s07                    1238 	.db	00109$>>8
      0003D1s07                    1239 	.db	00110$>>8
      0003D2s08                    1240 	.db	00115$>>8
      0003D3s08                    1241 	.db	00115$>>8
      0003D4s08                    1242 	.db	00115$>>8
      0003D5s08                    1243 	.db	00115$>>8
      0003D6s08                    1244 	.db	00115$>>8
      0003D7s08                    1245 	.db	00115$>>8
      0003D8s08                    1246 	.db	00115$>>8
      0003D9s08                    1247 	.db	00111$>>8
      0003DAs08                    1248 	.db	00112$>>8
      0003DBs08                    1249 	.db	00113$>>8
                                   1250 ;	main.c:87: case '1': {
      0003DC                       1251 00101$:
                                   1252 ;	main.c:88: printf("Enter the register bank to select:\n\r");
      0003DC 74r48            [12] 1253 	mov	a,#___str_15
      0003DE C0 E0            [24] 1254 	push	acc
      0003E0 74s01            [12] 1255 	mov	a,#(___str_15 >> 8)
      0003E2 C0 E0            [24] 1256 	push	acc
      0003E4 74 80            [12] 1257 	mov	a,#0x80
      0003E6 C0 E0            [24] 1258 	push	acc
      0003E8 12r00r00         [24] 1259 	lcall	_printf
      0003EB 15 81            [12] 1260 	dec	sp
      0003ED 15 81            [12] 1261 	dec	sp
      0003EF 15 81            [12] 1262 	dec	sp
                                   1263 ;	main.c:89: uint8_t reg_bank = get_user_buffer_size();
      0003F1 12r01rBA         [24] 1264 	lcall	_get_user_buffer_size
      0003F4 AE 82            [24] 1265 	mov	r6, dpl
                                   1266 ;	main.c:90: printf("Enter the address of the Control Register:\n\r");
      0003F6 C0 06            [24] 1267 	push	ar6
      0003F8 74r6D            [12] 1268 	mov	a,#___str_16
      0003FA C0 E0            [24] 1269 	push	acc
      0003FC 74s01            [12] 1270 	mov	a,#(___str_16 >> 8)
      0003FE C0 E0            [24] 1271 	push	acc
      000400 74 80            [12] 1272 	mov	a,#0x80
      000402 C0 E0            [24] 1273 	push	acc
      000404 12r00r00         [24] 1274 	lcall	_printf
      000407 15 81            [12] 1275 	dec	sp
      000409 15 81            [12] 1276 	dec	sp
      00040B 15 81            [12] 1277 	dec	sp
                                   1278 ;	main.c:91: uint8_t addr = get_user_buffer_size();
      00040D 12r01rBA         [24] 1279 	lcall	_get_user_buffer_size
      000410 AD 82            [24] 1280 	mov	r5, dpl
                                   1281 ;	main.c:92: printf("Enter the data you want to write:\n\r");
      000412 C0 05            [24] 1282 	push	ar5
      000414 74r9A            [12] 1283 	mov	a,#___str_17
      000416 C0 E0            [24] 1284 	push	acc
      000418 74s01            [12] 1285 	mov	a,#(___str_17 >> 8)
      00041A C0 E0            [24] 1286 	push	acc
      00041C 74 80            [12] 1287 	mov	a,#0x80
      00041E C0 E0            [24] 1288 	push	acc
      000420 12r00r00         [24] 1289 	lcall	_printf
      000423 15 81            [12] 1290 	dec	sp
      000425 15 81            [12] 1291 	dec	sp
      000427 15 81            [12] 1292 	dec	sp
                                   1293 ;	main.c:93: uint8_t data = get_user_buffer_size();
      000429 12r01rBA         [24] 1294 	lcall	_get_user_buffer_size
      00042C AC 82            [24] 1295 	mov	r4, dpl
      00042E D0 05            [24] 1296 	pop	ar5
      000430 D0 06            [24] 1297 	pop	ar6
                                   1298 ;	main.c:94: spi_control_write(reg_bank, addr, data);
      000432 90r00r00         [24] 1299 	mov	dptr,#_spi_control_write_PARM_2
      000435 ED               [12] 1300 	mov	a,r5
      000436 F0               [24] 1301 	movx	@dptr,a
      000437 90r00r00         [24] 1302 	mov	dptr,#_spi_control_write_PARM_3
      00043A EC               [12] 1303 	mov	a,r4
      00043B F0               [24] 1304 	movx	@dptr,a
      00043C 8E 82            [24] 1305 	mov	dpl, r6
      00043E 12r00r00         [24] 1306 	lcall	_spi_control_write
                                   1307 ;	main.c:95: break;
      000441 02r02r5B         [24] 1308 	ljmp	00118$
                                   1309 ;	main.c:97: case '2': {
      000444                       1310 00102$:
                                   1311 ;	main.c:98: printf("Enter the number of bytes to write:\n\r");
      000444 74rBE            [12] 1312 	mov	a,#___str_18
      000446 C0 E0            [24] 1313 	push	acc
      000448 74s01            [12] 1314 	mov	a,#(___str_18 >> 8)
      00044A C0 E0            [24] 1315 	push	acc
      00044C 74 80            [12] 1316 	mov	a,#0x80
      00044E C0 E0            [24] 1317 	push	acc
      000450 12r00r00         [24] 1318 	lcall	_printf
      000453 15 81            [12] 1319 	dec	sp
      000455 15 81            [12] 1320 	dec	sp
      000457 15 81            [12] 1321 	dec	sp
                                   1322 ;	main.c:99: int num_bytes = get_user_buffer_size();
      000459 12r01rBA         [24] 1323 	lcall	_get_user_buffer_size
      00045C AE 82            [24] 1324 	mov	r6, dpl
      00045E AF 83            [24] 1325 	mov	r7, dph
                                   1326 ;	main.c:100: printf("Enter the starting address:\n\r");
      000460 C0 07            [24] 1327 	push	ar7
      000462 C0 06            [24] 1328 	push	ar6
      000464 74rE4            [12] 1329 	mov	a,#___str_19
      000466 C0 E0            [24] 1330 	push	acc
      000468 74s01            [12] 1331 	mov	a,#(___str_19 >> 8)
      00046A C0 E0            [24] 1332 	push	acc
      00046C 74 80            [12] 1333 	mov	a,#0x80
      00046E C0 E0            [24] 1334 	push	acc
      000470 12r00r00         [24] 1335 	lcall	_printf
      000473 15 81            [12] 1336 	dec	sp
      000475 15 81            [12] 1337 	dec	sp
      000477 15 81            [12] 1338 	dec	sp
                                   1339 ;	main.c:101: uint16_t start_address = get_user_buffer_size();
      000479 12r01rBA         [24] 1340 	lcall	_get_user_buffer_size
      00047C AC 82            [24] 1341 	mov	r4, dpl
      00047E AD 83            [24] 1342 	mov	r5, dph
      000480 D0 06            [24] 1343 	pop	ar6
      000482 D0 07            [24] 1344 	pop	ar7
                                   1345 ;	main.c:103: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      000484 C0 07            [24] 1346 	push	ar7
      000486 C0 06            [24] 1347 	push	ar6
      000488 C0 05            [24] 1348 	push	ar5
      00048A C0 04            [24] 1349 	push	ar4
      00048C C0 06            [24] 1350 	push	ar6
      00048E C0 07            [24] 1351 	push	ar7
      000490 74r02            [12] 1352 	mov	a,#___str_20
      000492 C0 E0            [24] 1353 	push	acc
      000494 74s02            [12] 1354 	mov	a,#(___str_20 >> 8)
      000496 C0 E0            [24] 1355 	push	acc
      000498 74 80            [12] 1356 	mov	a,#0x80
      00049A C0 E0            [24] 1357 	push	acc
      00049C 12r00r00         [24] 1358 	lcall	_printf
      00049F E5 81            [12] 1359 	mov	a,sp
      0004A1 24 FB            [12] 1360 	add	a,#0xfb
      0004A3 F5 81            [12] 1361 	mov	sp,a
      0004A5 D0 04            [24] 1362 	pop	ar4
      0004A7 D0 05            [24] 1363 	pop	ar5
      0004A9 D0 06            [24] 1364 	pop	ar6
      0004AB D0 07            [24] 1365 	pop	ar7
                                   1366 ;	main.c:104: for (int i = 0; i < num_bytes; i++) {
      0004AD 7A 00            [12] 1367 	mov	r2,#0x00
      0004AF 7B 00            [12] 1368 	mov	r3,#0x00
      0004B1                       1369 00121$:
      0004B1 C3               [12] 1370 	clr	c
      0004B2 EA               [12] 1371 	mov	a,r2
      0004B3 9E               [12] 1372 	subb	a,r6
      0004B4 EB               [12] 1373 	mov	a,r3
      0004B5 64 80            [12] 1374 	xrl	a,#0x80
      0004B7 8F F0            [24] 1375 	mov	b,r7
      0004B9 63 F0 80         [24] 1376 	xrl	b,#0x80
      0004BC 95 F0            [12] 1377 	subb	a,b
      0004BE 50 63            [24] 1378 	jnc	00103$
                                   1379 ;	main.c:105: printf("Byte %d: ", i);
      0004C0 C0 04            [24] 1380 	push	ar4
      0004C2 C0 05            [24] 1381 	push	ar5
      0004C4 C0 07            [24] 1382 	push	ar7
      0004C6 C0 06            [24] 1383 	push	ar6
      0004C8 C0 05            [24] 1384 	push	ar5
      0004CA C0 04            [24] 1385 	push	ar4
      0004CC C0 03            [24] 1386 	push	ar3
      0004CE C0 02            [24] 1387 	push	ar2
      0004D0 C0 02            [24] 1388 	push	ar2
      0004D2 C0 03            [24] 1389 	push	ar3
      0004D4 74r25            [12] 1390 	mov	a,#___str_21
      0004D6 C0 E0            [24] 1391 	push	acc
      0004D8 74s02            [12] 1392 	mov	a,#(___str_21 >> 8)
      0004DA C0 E0            [24] 1393 	push	acc
      0004DC 74 80            [12] 1394 	mov	a,#0x80
      0004DE C0 E0            [24] 1395 	push	acc
      0004E0 12r00r00         [24] 1396 	lcall	_printf
      0004E3 E5 81            [12] 1397 	mov	a,sp
      0004E5 24 FB            [12] 1398 	add	a,#0xfb
      0004E7 F5 81            [12] 1399 	mov	sp,a
      0004E9 D0 02            [24] 1400 	pop	ar2
      0004EB D0 03            [24] 1401 	pop	ar3
      0004ED D0 04            [24] 1402 	pop	ar4
      0004EF D0 05            [24] 1403 	pop	ar5
                                   1404 ;	main.c:106: buffer[i] = get_user_buffer_size();
      0004F1 EA               [12] 1405 	mov	a,r2
      0004F2 24r11            [12] 1406 	add	a, #_main_buffer_40003_94
      0004F4 F8               [12] 1407 	mov	r0,a
      0004F5 EB               [12] 1408 	mov	a,r3
      0004F6 34s00            [12] 1409 	addc	a, #(_main_buffer_40003_94 >> 8)
      0004F8 F9               [12] 1410 	mov	r1,a
      0004F9 C0 03            [24] 1411 	push	ar3
      0004FB C0 02            [24] 1412 	push	ar2
      0004FD C0 01            [24] 1413 	push	ar1
      0004FF C0 00            [24] 1414 	push	ar0
      000501 12r01rBA         [24] 1415 	lcall	_get_user_buffer_size
      000504 AC 82            [24] 1416 	mov	r4, dpl
      000506 D0 00            [24] 1417 	pop	ar0
      000508 D0 01            [24] 1418 	pop	ar1
      00050A D0 02            [24] 1419 	pop	ar2
      00050C D0 03            [24] 1420 	pop	ar3
      00050E D0 06            [24] 1421 	pop	ar6
      000510 D0 07            [24] 1422 	pop	ar7
      000512 88 82            [24] 1423 	mov	dpl,r0
      000514 89 83            [24] 1424 	mov	dph,r1
      000516 EC               [12] 1425 	mov	a,r4
      000517 F0               [24] 1426 	movx	@dptr,a
                                   1427 ;	main.c:104: for (int i = 0; i < num_bytes; i++) {
      000518 0A               [12] 1428 	inc	r2
      000519 BA 00 01         [24] 1429 	cjne	r2,#0x00,00178$
      00051C 0B               [12] 1430 	inc	r3
      00051D                       1431 00178$:
      00051D D0 05            [24] 1432 	pop	ar5
      00051F D0 04            [24] 1433 	pop	ar4
      000521 80 8E            [24] 1434 	sjmp	00121$
      000523                       1435 00103$:
                                   1436 ;	main.c:108: spi_buffer_write(num_bytes, start_address, buffer);
      000523 90r00r00         [24] 1437 	mov	dptr,#_spi_buffer_write_PARM_2
      000526 EC               [12] 1438 	mov	a,r4
      000527 F0               [24] 1439 	movx	@dptr,a
      000528 ED               [12] 1440 	mov	a,r5
      000529 A3               [24] 1441 	inc	dptr
      00052A F0               [24] 1442 	movx	@dptr,a
      00052B 90r00r00         [24] 1443 	mov	dptr,#_spi_buffer_write_PARM_3
      00052E 74r11            [12] 1444 	mov	a,#_main_buffer_40003_94
      000530 F0               [24] 1445 	movx	@dptr,a
      000531 74s00            [12] 1446 	mov	a,#(_main_buffer_40003_94 >> 8)
      000533 A3               [24] 1447 	inc	dptr
      000534 F0               [24] 1448 	movx	@dptr,a
      000535 E4               [12] 1449 	clr	a
      000536 A3               [24] 1450 	inc	dptr
      000537 F0               [24] 1451 	movx	@dptr,a
      000538 8E 82            [24] 1452 	mov	dpl, r6
      00053A 8F 83            [24] 1453 	mov	dph, r7
      00053C 12r00r00         [24] 1454 	lcall	_spi_buffer_write
                                   1455 ;	main.c:109: break;
      00053F 02r02r5B         [24] 1456 	ljmp	00118$
                                   1457 ;	main.c:111: case '3': {
      000542                       1458 00104$:
                                   1459 ;	main.c:112: printf("Enter the number of bytes to read:\n\r");
      000542 74r2F            [12] 1460 	mov	a,#___str_22
      000544 C0 E0            [24] 1461 	push	acc
      000546 74s02            [12] 1462 	mov	a,#(___str_22 >> 8)
      000548 C0 E0            [24] 1463 	push	acc
      00054A 74 80            [12] 1464 	mov	a,#0x80
      00054C C0 E0            [24] 1465 	push	acc
      00054E 12r00r00         [24] 1466 	lcall	_printf
      000551 15 81            [12] 1467 	dec	sp
      000553 15 81            [12] 1468 	dec	sp
      000555 15 81            [12] 1469 	dec	sp
                                   1470 ;	main.c:113: int num_bytes = get_user_buffer_size();
      000557 12r01rBA         [24] 1471 	lcall	_get_user_buffer_size
      00055A AE 82            [24] 1472 	mov	r6, dpl
      00055C AF 83            [24] 1473 	mov	r7, dph
                                   1474 ;	main.c:114: printf("Enter the starting address:\n\r");
      00055E C0 07            [24] 1475 	push	ar7
      000560 C0 06            [24] 1476 	push	ar6
      000562 74rE4            [12] 1477 	mov	a,#___str_19
      000564 C0 E0            [24] 1478 	push	acc
      000566 74s01            [12] 1479 	mov	a,#(___str_19 >> 8)
      000568 C0 E0            [24] 1480 	push	acc
      00056A 74 80            [12] 1481 	mov	a,#0x80
      00056C C0 E0            [24] 1482 	push	acc
      00056E 12r00r00         [24] 1483 	lcall	_printf
      000571 15 81            [12] 1484 	dec	sp
      000573 15 81            [12] 1485 	dec	sp
      000575 15 81            [12] 1486 	dec	sp
                                   1487 ;	main.c:115: uint16_t start_address = get_user_buffer_size();
      000577 12r01rBA         [24] 1488 	lcall	_get_user_buffer_size
      00057A AC 82            [24] 1489 	mov	r4, dpl
      00057C AD 83            [24] 1490 	mov	r5, dph
      00057E D0 06            [24] 1491 	pop	ar6
      000580 D0 07            [24] 1492 	pop	ar7
                                   1493 ;	main.c:117: spi_buffer_read(num_bytes, start_address, buffer);
      000582 90r00r00         [24] 1494 	mov	dptr,#_spi_buffer_read_PARM_2
      000585 EC               [12] 1495 	mov	a,r4
      000586 F0               [24] 1496 	movx	@dptr,a
      000587 ED               [12] 1497 	mov	a,r5
      000588 A3               [24] 1498 	inc	dptr
      000589 F0               [24] 1499 	movx	@dptr,a
      00058A 90r00r00         [24] 1500 	mov	dptr,#_spi_buffer_read_PARM_3
      00058D 74r11            [12] 1501 	mov	a,#_main_buffer_40003_99
      00058F F0               [24] 1502 	movx	@dptr,a
      000590 74s01            [12] 1503 	mov	a,#(_main_buffer_40003_99 >> 8)
      000592 A3               [24] 1504 	inc	dptr
      000593 F0               [24] 1505 	movx	@dptr,a
      000594 E4               [12] 1506 	clr	a
      000595 A3               [24] 1507 	inc	dptr
      000596 F0               [24] 1508 	movx	@dptr,a
      000597 8E 82            [24] 1509 	mov	dpl, r6
      000599 8F 83            [24] 1510 	mov	dph, r7
      00059B C0 07            [24] 1511 	push	ar7
      00059D C0 06            [24] 1512 	push	ar6
      00059F 12r00r00         [24] 1513 	lcall	_spi_buffer_read
      0005A2 D0 06            [24] 1514 	pop	ar6
      0005A4 D0 07            [24] 1515 	pop	ar7
                                   1516 ;	main.c:127: uint8_t erxrdpt_low = mac_spi_read(0x0C, 0);  // ERXRDPTL
      0005A6 90r00r00         [24] 1517 	mov	dptr,#_mac_spi_read_PARM_2
      0005A9 E4               [12] 1518 	clr	a
      0005AA F0               [24] 1519 	movx	@dptr,a
      0005AB 75 82 0C         [24] 1520 	mov	dpl, #0x0c
      0005AE C0 07            [24] 1521 	push	ar7
      0005B0 C0 06            [24] 1522 	push	ar6
      0005B2 12r00r00         [24] 1523 	lcall	_mac_spi_read
      0005B5 AD 82            [24] 1524 	mov	r5, dpl
      0005B7 D0 06            [24] 1525 	pop	ar6
      0005B9 D0 07            [24] 1526 	pop	ar7
                                   1527 ;	main.c:128: uint8_t erxrdpt_high = mac_spi_read(0x0D, 0); // ERXRDPTH
      0005BB 90r00r00         [24] 1528 	mov	dptr,#_mac_spi_read_PARM_2
      0005BE E4               [12] 1529 	clr	a
      0005BF F0               [24] 1530 	movx	@dptr,a
      0005C0 75 82 0D         [24] 1531 	mov	dpl, #0x0d
      0005C3 C0 07            [24] 1532 	push	ar7
      0005C5 C0 06            [24] 1533 	push	ar6
      0005C7 C0 05            [24] 1534 	push	ar5
      0005C9 12r00r00         [24] 1535 	lcall	_mac_spi_read
      0005CC AC 82            [24] 1536 	mov	r4, dpl
      0005CE D0 05            [24] 1537 	pop	ar5
                                   1538 ;	main.c:129: current_erxrdpt = ((uint16_t)erxrdpt_high << 8) | erxrdpt_low;
      0005D0 8C 03            [24] 1539 	mov	ar3,r4
      0005D2 E4               [12] 1540 	clr	a
      0005D3 FC               [12] 1541 	mov	r4,a
      0005D4 FA               [12] 1542 	mov	r2,a
      0005D5 ED               [12] 1543 	mov	a,r5
      0005D6 42 04            [12] 1544 	orl	ar4,a
      0005D8 EA               [12] 1545 	mov	a,r2
      0005D9 42 03            [12] 1546 	orl	ar3,a
                                   1547 ;	main.c:131: printf("Current ERXRDPT: 0x%04X\n\r", current_erxrdpt);
      0005DB C0 04            [24] 1548 	push	ar4
      0005DD C0 03            [24] 1549 	push	ar3
      0005DF C0 04            [24] 1550 	push	ar4
      0005E1 C0 03            [24] 1551 	push	ar3
      0005E3 74r54            [12] 1552 	mov	a,#___str_23
      0005E5 C0 E0            [24] 1553 	push	acc
      0005E7 74s02            [12] 1554 	mov	a,#(___str_23 >> 8)
      0005E9 C0 E0            [24] 1555 	push	acc
      0005EB 74 80            [12] 1556 	mov	a,#0x80
      0005ED C0 E0            [24] 1557 	push	acc
      0005EF 12r00r00         [24] 1558 	lcall	_printf
      0005F2 E5 81            [12] 1559 	mov	a,sp
      0005F4 24 FB            [12] 1560 	add	a,#0xfb
      0005F6 F5 81            [12] 1561 	mov	sp,a
      0005F8 D0 03            [24] 1562 	pop	ar3
      0005FA D0 04            [24] 1563 	pop	ar4
      0005FC D0 06            [24] 1564 	pop	ar6
      0005FE D0 07            [24] 1565 	pop	ar7
                                   1566 ;	main.c:134: current_erxrdpt += num_bytes;
      000600 EE               [12] 1567 	mov	a,r6
      000601 2C               [12] 1568 	add	a, r4
      000602 FC               [12] 1569 	mov	r4,a
      000603 EF               [12] 1570 	mov	a,r7
      000604 3B               [12] 1571 	addc	a, r3
      000605 FB               [12] 1572 	mov	r3,a
                                   1573 ;	main.c:137: spi_control_write(0, 0x0C, (uint8_t)(current_erxrdpt & 0xFF));  // ERXRDPTL (low byte)
      000606 8C 07            [24] 1574 	mov	ar7,r4
      000608 90r00r00         [24] 1575 	mov	dptr,#_spi_control_write_PARM_2
      00060B 74 0C            [12] 1576 	mov	a,#0x0c
      00060D F0               [24] 1577 	movx	@dptr,a
      00060E 90r00r00         [24] 1578 	mov	dptr,#_spi_control_write_PARM_3
      000611 EF               [12] 1579 	mov	a,r7
      000612 F0               [24] 1580 	movx	@dptr,a
      000613 75 82 00         [24] 1581 	mov	dpl, #0x00
      000616 C0 04            [24] 1582 	push	ar4
      000618 C0 03            [24] 1583 	push	ar3
      00061A 12r00r00         [24] 1584 	lcall	_spi_control_write
      00061D D0 03            [24] 1585 	pop	ar3
      00061F D0 04            [24] 1586 	pop	ar4
                                   1587 ;	main.c:138: spi_control_write(0, 0x0D, (uint8_t)((current_erxrdpt >> 8) & 0xFF));  // ERXRDPTH (high byte)
      000621 8B 07            [24] 1588 	mov	ar7,r3
      000623 90r00r00         [24] 1589 	mov	dptr,#_spi_control_write_PARM_2
      000626 74 0D            [12] 1590 	mov	a,#0x0d
      000628 F0               [24] 1591 	movx	@dptr,a
      000629 90r00r00         [24] 1592 	mov	dptr,#_spi_control_write_PARM_3
      00062C EF               [12] 1593 	mov	a,r7
      00062D F0               [24] 1594 	movx	@dptr,a
      00062E 75 82 00         [24] 1595 	mov	dpl, #0x00
      000631 C0 04            [24] 1596 	push	ar4
      000633 C0 03            [24] 1597 	push	ar3
      000635 12r00r00         [24] 1598 	lcall	_spi_control_write
                                   1599 ;	main.c:140: printf("Updated ERXRDPT to: 0x%04X\n\r", current_erxrdpt);
      000638 74r6E            [12] 1600 	mov	a,#___str_24
      00063A C0 E0            [24] 1601 	push	acc
      00063C 74s02            [12] 1602 	mov	a,#(___str_24 >> 8)
      00063E C0 E0            [24] 1603 	push	acc
      000640 74 80            [12] 1604 	mov	a,#0x80
      000642 C0 E0            [24] 1605 	push	acc
      000644 12r00r00         [24] 1606 	lcall	_printf
      000647 E5 81            [12] 1607 	mov	a,sp
      000649 24 FB            [12] 1608 	add	a,#0xfb
      00064B F5 81            [12] 1609 	mov	sp,a
                                   1610 ;	main.c:144: break;
      00064D 02r02r5B         [24] 1611 	ljmp	00118$
                                   1612 ;	main.c:146: case '4': {
      000650                       1613 00105$:
                                   1614 ;	main.c:147: printf("Enter the MAC register bank to select:\n\r");
      000650 74r8B            [12] 1615 	mov	a,#___str_25
      000652 C0 E0            [24] 1616 	push	acc
      000654 74s02            [12] 1617 	mov	a,#(___str_25 >> 8)
      000656 C0 E0            [24] 1618 	push	acc
      000658 74 80            [12] 1619 	mov	a,#0x80
      00065A C0 E0            [24] 1620 	push	acc
      00065C 12r00r00         [24] 1621 	lcall	_printf
      00065F 15 81            [12] 1622 	dec	sp
      000661 15 81            [12] 1623 	dec	sp
      000663 15 81            [12] 1624 	dec	sp
                                   1625 ;	main.c:148: uint8_t reg_bank = get_user_buffer_size();
      000665 12r01rBA         [24] 1626 	lcall	_get_user_buffer_size
      000668 AE 82            [24] 1627 	mov	r6, dpl
                                   1628 ;	main.c:149: printf("Enter the address of the MAC Register:\n\r");
      00066A C0 06            [24] 1629 	push	ar6
      00066C 74rB4            [12] 1630 	mov	a,#___str_26
      00066E C0 E0            [24] 1631 	push	acc
      000670 74s02            [12] 1632 	mov	a,#(___str_26 >> 8)
      000672 C0 E0            [24] 1633 	push	acc
      000674 74 80            [12] 1634 	mov	a,#0x80
      000676 C0 E0            [24] 1635 	push	acc
      000678 12r00r00         [24] 1636 	lcall	_printf
      00067B 15 81            [12] 1637 	dec	sp
      00067D 15 81            [12] 1638 	dec	sp
      00067F 15 81            [12] 1639 	dec	sp
                                   1640 ;	main.c:150: uint8_t addr = get_user_buffer_size();
      000681 12r01rBA         [24] 1641 	lcall	_get_user_buffer_size
      000684 AD 82            [24] 1642 	mov	r5, dpl
      000686 D0 06            [24] 1643 	pop	ar6
                                   1644 ;	main.c:151: uint8_t data = mac_spi_read(addr, reg_bank);
      000688 90r00r00         [24] 1645 	mov	dptr,#_mac_spi_read_PARM_2
      00068B EE               [12] 1646 	mov	a,r6
      00068C F0               [24] 1647 	movx	@dptr,a
      00068D 8D 82            [24] 1648 	mov	dpl, r5
      00068F 12r00r00         [24] 1649 	lcall	_mac_spi_read
      000692 AF 82            [24] 1650 	mov	r7, dpl
                                   1651 ;	main.c:152: printf("MAC Register Data: 0x%02X\n\r", data);
      000694 7E 00            [12] 1652 	mov	r6,#0x00
      000696 C0 07            [24] 1653 	push	ar7
      000698 C0 06            [24] 1654 	push	ar6
      00069A 74rDD            [12] 1655 	mov	a,#___str_27
      00069C C0 E0            [24] 1656 	push	acc
      00069E 74s02            [12] 1657 	mov	a,#(___str_27 >> 8)
      0006A0 C0 E0            [24] 1658 	push	acc
      0006A2 74 80            [12] 1659 	mov	a,#0x80
      0006A4 C0 E0            [24] 1660 	push	acc
      0006A6 12r00r00         [24] 1661 	lcall	_printf
      0006A9 E5 81            [12] 1662 	mov	a,sp
      0006AB 24 FB            [12] 1663 	add	a,#0xfb
      0006AD F5 81            [12] 1664 	mov	sp,a
                                   1665 ;	main.c:153: break;
      0006AF 02r02r5B         [24] 1666 	ljmp	00118$
                                   1667 ;	main.c:155: case '5': {
      0006B2                       1668 00106$:
                                   1669 ;	main.c:156: printf("Enter the PHY register address:\n\r");
      0006B2 74rF9            [12] 1670 	mov	a,#___str_28
      0006B4 C0 E0            [24] 1671 	push	acc
      0006B6 74s02            [12] 1672 	mov	a,#(___str_28 >> 8)
      0006B8 C0 E0            [24] 1673 	push	acc
      0006BA 74 80            [12] 1674 	mov	a,#0x80
      0006BC C0 E0            [24] 1675 	push	acc
      0006BE 12r00r00         [24] 1676 	lcall	_printf
      0006C1 15 81            [12] 1677 	dec	sp
      0006C3 15 81            [12] 1678 	dec	sp
      0006C5 15 81            [12] 1679 	dec	sp
                                   1680 ;	main.c:157: uint8_t addr = get_user_buffer_size();
      0006C7 12r01rBA         [24] 1681 	lcall	_get_user_buffer_size
      0006CA AE 82            [24] 1682 	mov	r6, dpl
                                   1683 ;	main.c:158: printf("Enter the 16-bit data to write:\n\r");
      0006CC C0 06            [24] 1684 	push	ar6
      0006CE 74r1B            [12] 1685 	mov	a,#___str_29
      0006D0 C0 E0            [24] 1686 	push	acc
      0006D2 74s03            [12] 1687 	mov	a,#(___str_29 >> 8)
      0006D4 C0 E0            [24] 1688 	push	acc
      0006D6 74 80            [12] 1689 	mov	a,#0x80
      0006D8 C0 E0            [24] 1690 	push	acc
      0006DA 12r00r00         [24] 1691 	lcall	_printf
      0006DD 15 81            [12] 1692 	dec	sp
      0006DF 15 81            [12] 1693 	dec	sp
      0006E1 15 81            [12] 1694 	dec	sp
                                   1695 ;	main.c:159: uint16_t data = get_user_buffer_size();
      0006E3 12r01rBA         [24] 1696 	lcall	_get_user_buffer_size
      0006E6 AD 82            [24] 1697 	mov	r5, dpl
      0006E8 AF 83            [24] 1698 	mov	r7, dph
      0006EA D0 06            [24] 1699 	pop	ar6
                                   1700 ;	main.c:160: phy_spi_write(addr, data);
      0006EC 90r00r00         [24] 1701 	mov	dptr,#_phy_spi_write_PARM_2
      0006EF ED               [12] 1702 	mov	a,r5
      0006F0 F0               [24] 1703 	movx	@dptr,a
      0006F1 EF               [12] 1704 	mov	a,r7
      0006F2 A3               [24] 1705 	inc	dptr
      0006F3 F0               [24] 1706 	movx	@dptr,a
      0006F4 8E 82            [24] 1707 	mov	dpl, r6
      0006F6 C0 07            [24] 1708 	push	ar7
      0006F8 C0 05            [24] 1709 	push	ar5
      0006FA 12r00r00         [24] 1710 	lcall	_phy_spi_write
      0006FD D0 05            [24] 1711 	pop	ar5
      0006FF D0 07            [24] 1712 	pop	ar7
                                   1713 ;	main.c:161: printf("PHY Write Data: 0x%04X\n\r", data);
      000701 C0 05            [24] 1714 	push	ar5
      000703 C0 07            [24] 1715 	push	ar7
      000705 74r3D            [12] 1716 	mov	a,#___str_30
      000707 C0 E0            [24] 1717 	push	acc
      000709 74s03            [12] 1718 	mov	a,#(___str_30 >> 8)
      00070B C0 E0            [24] 1719 	push	acc
      00070D 74 80            [12] 1720 	mov	a,#0x80
      00070F C0 E0            [24] 1721 	push	acc
      000711 12r00r00         [24] 1722 	lcall	_printf
      000714 E5 81            [12] 1723 	mov	a,sp
      000716 24 FB            [12] 1724 	add	a,#0xfb
      000718 F5 81            [12] 1725 	mov	sp,a
                                   1726 ;	main.c:162: break;
      00071A 02r02r5B         [24] 1727 	ljmp	00118$
                                   1728 ;	main.c:164: case '6': {
      00071D                       1729 00107$:
                                   1730 ;	main.c:165: printf("Enter the PHY register address to read:\n\r");
      00071D 74r56            [12] 1731 	mov	a,#___str_31
      00071F C0 E0            [24] 1732 	push	acc
      000721 74s03            [12] 1733 	mov	a,#(___str_31 >> 8)
      000723 C0 E0            [24] 1734 	push	acc
      000725 74 80            [12] 1735 	mov	a,#0x80
      000727 C0 E0            [24] 1736 	push	acc
      000729 12r00r00         [24] 1737 	lcall	_printf
      00072C 15 81            [12] 1738 	dec	sp
      00072E 15 81            [12] 1739 	dec	sp
      000730 15 81            [12] 1740 	dec	sp
                                   1741 ;	main.c:166: uint8_t addr = get_user_buffer_size();
      000732 12r01rBA         [24] 1742 	lcall	_get_user_buffer_size
                                   1743 ;	main.c:167: uint16_t data = phy_spi_read(addr);
      000735 12r00r00         [24] 1744 	lcall	_phy_spi_read
      000738 AE 82            [24] 1745 	mov	r6, dpl
      00073A AF 83            [24] 1746 	mov	r7, dph
                                   1747 ;	main.c:168: printf("PHY Read Data: 0x%04X\n\r", data);
      00073C C0 06            [24] 1748 	push	ar6
      00073E C0 07            [24] 1749 	push	ar7
      000740 74r80            [12] 1750 	mov	a,#___str_32
      000742 C0 E0            [24] 1751 	push	acc
      000744 74s03            [12] 1752 	mov	a,#(___str_32 >> 8)
      000746 C0 E0            [24] 1753 	push	acc
      000748 74 80            [12] 1754 	mov	a,#0x80
      00074A C0 E0            [24] 1755 	push	acc
      00074C 12r00r00         [24] 1756 	lcall	_printf
      00074F E5 81            [12] 1757 	mov	a,sp
      000751 24 FB            [12] 1758 	add	a,#0xfb
      000753 F5 81            [12] 1759 	mov	sp,a
                                   1760 ;	main.c:169: break;
      000755 02r02r5B         [24] 1761 	ljmp	00118$
                                   1762 ;	main.c:171: case '7': {
      000758                       1763 00108$:
                                   1764 ;	main.c:172: printf("Resetting ENC28J60...\n\r");
      000758 74r98            [12] 1765 	mov	a,#___str_33
      00075A C0 E0            [24] 1766 	push	acc
      00075C 74s03            [12] 1767 	mov	a,#(___str_33 >> 8)
      00075E C0 E0            [24] 1768 	push	acc
      000760 74 80            [12] 1769 	mov	a,#0x80
      000762 C0 E0            [24] 1770 	push	acc
      000764 12r00r00         [24] 1771 	lcall	_printf
      000767 15 81            [12] 1772 	dec	sp
      000769 15 81            [12] 1773 	dec	sp
      00076B 15 81            [12] 1774 	dec	sp
                                   1775 ;	main.c:173: enc_reset();
      00076D 12r00r00         [24] 1776 	lcall	_enc_reset
                                   1777 ;	main.c:174: break;
      000770 02r02r5B         [24] 1778 	ljmp	00118$
                                   1779 ;	main.c:176: case '8': {
      000773                       1780 00109$:
                                   1781 ;	main.c:177: printf("Enter the ETH register address to read:\n\r");
      000773 74rB0            [12] 1782 	mov	a,#___str_34
      000775 C0 E0            [24] 1783 	push	acc
      000777 74s03            [12] 1784 	mov	a,#(___str_34 >> 8)
      000779 C0 E0            [24] 1785 	push	acc
      00077B 74 80            [12] 1786 	mov	a,#0x80
      00077D C0 E0            [24] 1787 	push	acc
      00077F 12r00r00         [24] 1788 	lcall	_printf
      000782 15 81            [12] 1789 	dec	sp
      000784 15 81            [12] 1790 	dec	sp
      000786 15 81            [12] 1791 	dec	sp
                                   1792 ;	main.c:178: uint8_t addr = get_user_buffer_size();
      000788 12r01rBA         [24] 1793 	lcall	_get_user_buffer_size
      00078B AE 82            [24] 1794 	mov	r6, dpl
                                   1795 ;	main.c:179: printf("Enter the bank (0 or 1):\n\r");
      00078D C0 06            [24] 1796 	push	ar6
      00078F 74rDA            [12] 1797 	mov	a,#___str_35
      000791 C0 E0            [24] 1798 	push	acc
      000793 74s03            [12] 1799 	mov	a,#(___str_35 >> 8)
      000795 C0 E0            [24] 1800 	push	acc
      000797 74 80            [12] 1801 	mov	a,#0x80
      000799 C0 E0            [24] 1802 	push	acc
      00079B 12r00r00         [24] 1803 	lcall	_printf
      00079E 15 81            [12] 1804 	dec	sp
      0007A0 15 81            [12] 1805 	dec	sp
      0007A2 15 81            [12] 1806 	dec	sp
                                   1807 ;	main.c:180: uint8_t bank = get_user_buffer_size();
      0007A4 12r01rBA         [24] 1808 	lcall	_get_user_buffer_size
      0007A7 AD 82            [24] 1809 	mov	r5, dpl
      0007A9 D0 06            [24] 1810 	pop	ar6
      0007AB 90r00r00         [24] 1811 	mov	dptr,#_eth_spi_read_PARM_2
      0007AE ED               [12] 1812 	mov	a,r5
      0007AF F0               [24] 1813 	movx	@dptr,a
                                   1814 ;	main.c:181: uint8_t data = eth_spi_read(addr, bank);
      0007B0 8E 82            [24] 1815 	mov	dpl, r6
      0007B2 12r00r00         [24] 1816 	lcall	_eth_spi_read
      0007B5 AF 82            [24] 1817 	mov	r7, dpl
                                   1818 ;	main.c:182: printf("ETH Register Data: 0x%02X\n\r", data);
      0007B7 7E 00            [12] 1819 	mov	r6,#0x00
      0007B9 C0 07            [24] 1820 	push	ar7
      0007BB C0 06            [24] 1821 	push	ar6
      0007BD 74rF5            [12] 1822 	mov	a,#___str_36
      0007BF C0 E0            [24] 1823 	push	acc
      0007C1 74s03            [12] 1824 	mov	a,#(___str_36 >> 8)
      0007C3 C0 E0            [24] 1825 	push	acc
      0007C5 74 80            [12] 1826 	mov	a,#0x80
      0007C7 C0 E0            [24] 1827 	push	acc
      0007C9 12r00r00         [24] 1828 	lcall	_printf
      0007CC E5 81            [12] 1829 	mov	a,sp
      0007CE 24 FB            [12] 1830 	add	a,#0xfb
      0007D0 F5 81            [12] 1831 	mov	sp,a
                                   1832 ;	main.c:183: break;
      0007D2 02r02r5B         [24] 1833 	ljmp	00118$
                                   1834 ;	main.c:185: case '9': {
      0007D5                       1835 00110$:
                                   1836 ;	main.c:186: printf("\n\rChoose an action: \n\r");
      0007D5 74r1C            [12] 1837 	mov	a,#___str_2
      0007D7 C0 E0            [24] 1838 	push	acc
      0007D9 74s00            [12] 1839 	mov	a,#(___str_2 >> 8)
      0007DB C0 E0            [24] 1840 	push	acc
      0007DD 74 80            [12] 1841 	mov	a,#0x80
      0007DF C0 E0            [24] 1842 	push	acc
      0007E1 12r00r00         [24] 1843 	lcall	_printf
      0007E4 15 81            [12] 1844 	dec	sp
      0007E6 15 81            [12] 1845 	dec	sp
      0007E8 15 81            [12] 1846 	dec	sp
                                   1847 ;	main.c:187: printf("1 --> Control Write\n\r");
      0007EA 74r33            [12] 1848 	mov	a,#___str_3
      0007EC C0 E0            [24] 1849 	push	acc
      0007EE 74s00            [12] 1850 	mov	a,#(___str_3 >> 8)
      0007F0 C0 E0            [24] 1851 	push	acc
      0007F2 74 80            [12] 1852 	mov	a,#0x80
      0007F4 C0 E0            [24] 1853 	push	acc
      0007F6 12r00r00         [24] 1854 	lcall	_printf
      0007F9 15 81            [12] 1855 	dec	sp
      0007FB 15 81            [12] 1856 	dec	sp
      0007FD 15 81            [12] 1857 	dec	sp
                                   1858 ;	main.c:188: printf("2 --> Buffer Write\n\r");
      0007FF 74r49            [12] 1859 	mov	a,#___str_4
      000801 C0 E0            [24] 1860 	push	acc
      000803 74s00            [12] 1861 	mov	a,#(___str_4 >> 8)
      000805 C0 E0            [24] 1862 	push	acc
      000807 74 80            [12] 1863 	mov	a,#0x80
      000809 C0 E0            [24] 1864 	push	acc
      00080B 12r00r00         [24] 1865 	lcall	_printf
      00080E 15 81            [12] 1866 	dec	sp
      000810 15 81            [12] 1867 	dec	sp
      000812 15 81            [12] 1868 	dec	sp
                                   1869 ;	main.c:189: printf("3 --> Buffer Read\n\r");
      000814 74r5E            [12] 1870 	mov	a,#___str_5
      000816 C0 E0            [24] 1871 	push	acc
      000818 74s00            [12] 1872 	mov	a,#(___str_5 >> 8)
      00081A C0 E0            [24] 1873 	push	acc
      00081C 74 80            [12] 1874 	mov	a,#0x80
      00081E C0 E0            [24] 1875 	push	acc
      000820 12r00r00         [24] 1876 	lcall	_printf
      000823 15 81            [12] 1877 	dec	sp
      000825 15 81            [12] 1878 	dec	sp
      000827 15 81            [12] 1879 	dec	sp
                                   1880 ;	main.c:190: printf("4 --> MAC Register Read\n\r");
      000829 74r72            [12] 1881 	mov	a,#___str_6
      00082B C0 E0            [24] 1882 	push	acc
      00082D 74s00            [12] 1883 	mov	a,#(___str_6 >> 8)
      00082F C0 E0            [24] 1884 	push	acc
      000831 74 80            [12] 1885 	mov	a,#0x80
      000833 C0 E0            [24] 1886 	push	acc
      000835 12r00r00         [24] 1887 	lcall	_printf
      000838 15 81            [12] 1888 	dec	sp
      00083A 15 81            [12] 1889 	dec	sp
      00083C 15 81            [12] 1890 	dec	sp
                                   1891 ;	main.c:191: printf("5 --> PHY SPI Write\n\r");
      00083E 74r8C            [12] 1892 	mov	a,#___str_7
      000840 C0 E0            [24] 1893 	push	acc
      000842 74s00            [12] 1894 	mov	a,#(___str_7 >> 8)
      000844 C0 E0            [24] 1895 	push	acc
      000846 74 80            [12] 1896 	mov	a,#0x80
      000848 C0 E0            [24] 1897 	push	acc
      00084A 12r00r00         [24] 1898 	lcall	_printf
      00084D 15 81            [12] 1899 	dec	sp
      00084F 15 81            [12] 1900 	dec	sp
      000851 15 81            [12] 1901 	dec	sp
                                   1902 ;	main.c:192: printf("6 --> PHY SPI Read\n\r");
      000853 74rA2            [12] 1903 	mov	a,#___str_8
      000855 C0 E0            [24] 1904 	push	acc
      000857 74s00            [12] 1905 	mov	a,#(___str_8 >> 8)
      000859 C0 E0            [24] 1906 	push	acc
      00085B 74 80            [12] 1907 	mov	a,#0x80
      00085D C0 E0            [24] 1908 	push	acc
      00085F 12r00r00         [24] 1909 	lcall	_printf
      000862 15 81            [12] 1910 	dec	sp
      000864 15 81            [12] 1911 	dec	sp
      000866 15 81            [12] 1912 	dec	sp
                                   1913 ;	main.c:193: printf("7 --> ENC Reset\n\r");
      000868 74rB7            [12] 1914 	mov	a,#___str_9
      00086A C0 E0            [24] 1915 	push	acc
      00086C 74s00            [12] 1916 	mov	a,#(___str_9 >> 8)
      00086E C0 E0            [24] 1917 	push	acc
      000870 74 80            [12] 1918 	mov	a,#0x80
      000872 C0 E0            [24] 1919 	push	acc
      000874 12r00r00         [24] 1920 	lcall	_printf
      000877 15 81            [12] 1921 	dec	sp
      000879 15 81            [12] 1922 	dec	sp
      00087B 15 81            [12] 1923 	dec	sp
                                   1924 ;	main.c:194: printf("8 --> Read ETH Register\n\r");
      00087D 74rC9            [12] 1925 	mov	a,#___str_10
      00087F C0 E0            [24] 1926 	push	acc
      000881 74s00            [12] 1927 	mov	a,#(___str_10 >> 8)
      000883 C0 E0            [24] 1928 	push	acc
      000885 74 80            [12] 1929 	mov	a,#0x80
      000887 C0 E0            [24] 1930 	push	acc
      000889 12r00r00         [24] 1931 	lcall	_printf
      00088C 15 81            [12] 1932 	dec	sp
      00088E 15 81            [12] 1933 	dec	sp
      000890 15 81            [12] 1934 	dec	sp
                                   1935 ;	main.c:195: break;
      000892 02r02r5B         [24] 1936 	ljmp	00118$
                                   1937 ;	main.c:197: case 'A':{
      000895                       1938 00111$:
                                   1939 ;	main.c:198: init_ENC();
      000895 12r00r00         [24] 1940 	lcall	_init_ENC
                                   1941 ;	main.c:200: send_arp_request();
      000898 12r00r00         [24] 1942 	lcall	_send_arp_request
                                   1943 ;	main.c:201: break;
      00089B 02r02r5B         [24] 1944 	ljmp	00118$
                                   1945 ;	main.c:203: case 'B':{
      00089E                       1946 00112$:
                                   1947 ;	main.c:204: init_ENC();
      00089E 12r00r00         [24] 1948 	lcall	_init_ENC
                                   1949 ;	main.c:205: break;
      0008A1 02r02r5B         [24] 1950 	ljmp	00118$
                                   1951 ;	main.c:207: case 'C':{
      0008A4                       1952 00113$:
                                   1953 ;	main.c:208: printf(" Resetting ENC using RESET pin in Hardware(P1_0)\n\r");
      0008A4 74r11            [12] 1954 	mov	a,#___str_37
      0008A6 C0 E0            [24] 1955 	push	acc
      0008A8 74s04            [12] 1956 	mov	a,#(___str_37 >> 8)
      0008AA C0 E0            [24] 1957 	push	acc
      0008AC 74 80            [12] 1958 	mov	a,#0x80
      0008AE C0 E0            [24] 1959 	push	acc
      0008B0 12r00r00         [24] 1960 	lcall	_printf
      0008B3 15 81            [12] 1961 	dec	sp
      0008B5 15 81            [12] 1962 	dec	sp
      0008B7 15 81            [12] 1963 	dec	sp
                                   1964 ;	main.c:209: ENC_RESET = 0;
                                   1965 ;	assignBit
      0008B9 C2 90            [12] 1966 	clr	_P1_0
                                   1967 ;	main.c:210: for(int i = 0; i < 6000; i++);
      0008BB 7E 00            [12] 1968 	mov	r6,#0x00
      0008BD 7F 00            [12] 1969 	mov	r7,#0x00
      0008BF                       1970 00124$:
      0008BF C3               [12] 1971 	clr	c
      0008C0 EE               [12] 1972 	mov	a,r6
      0008C1 94 70            [12] 1973 	subb	a,#0x70
      0008C3 EF               [12] 1974 	mov	a,r7
      0008C4 64 80            [12] 1975 	xrl	a,#0x80
      0008C6 94 97            [12] 1976 	subb	a,#0x97
      0008C8 50 07            [24] 1977 	jnc	00114$
      0008CA 0E               [12] 1978 	inc	r6
      0008CB BE 00 F1         [24] 1979 	cjne	r6,#0x00,00124$
      0008CE 0F               [12] 1980 	inc	r7
      0008CF 80 EE            [24] 1981 	sjmp	00124$
      0008D1                       1982 00114$:
                                   1983 ;	main.c:211: ENC_RESET = 1;
                                   1984 ;	assignBit
      0008D1 D2 90            [12] 1985 	setb	_P1_0
                                   1986 ;	main.c:212: break;
      0008D3 02r02r5B         [24] 1987 	ljmp	00118$
                                   1988 ;	main.c:214: default: {
      0008D6                       1989 00115$:
                                   1990 ;	main.c:215: printf("Invalid option. Please select a valid action.\n\r");
      0008D6 74r44            [12] 1991 	mov	a,#___str_38
      0008D8 C0 E0            [24] 1992 	push	acc
      0008DA 74s04            [12] 1993 	mov	a,#(___str_38 >> 8)
      0008DC C0 E0            [24] 1994 	push	acc
      0008DE 74 80            [12] 1995 	mov	a,#0x80
      0008E0 C0 E0            [24] 1996 	push	acc
      0008E2 12r00r00         [24] 1997 	lcall	_printf
      0008E5 15 81            [12] 1998 	dec	sp
      0008E7 15 81            [12] 1999 	dec	sp
      0008E9 15 81            [12] 2000 	dec	sp
                                   2001 ;	main.c:218: }
                                   2002 ;	main.c:220: }
      0008EB 02r02r5B         [24] 2003 	ljmp	00118$
                                   2004 	.area CSEG    (CODE)
                                   2005 	.area CONST   (CODE)
                                   2006 	.area CONST   (CODE)
      000000                       2007 ___str_0:
      000000 0A                    2008 	.db 0x0a
      000001 0D                    2009 	.db 0x0d
      000002 00                    2010 	.db 0x00
                                   2011 	.area CSEG    (CODE)
                                   2012 	.area CONST   (CODE)
      000003                       2013 ___str_1:
      000003 53 50 49 20 4F 70 65  2014 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    2015 	.db 0x0a
      00001A 0D                    2016 	.db 0x0d
      00001B 00                    2017 	.db 0x00
                                   2018 	.area CSEG    (CODE)
                                   2019 	.area CONST   (CODE)
      00001C                       2020 ___str_2:
      00001C 0A                    2021 	.db 0x0a
      00001D 0D                    2022 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  2023 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    2024 	.db 0x0a
      000031 0D                    2025 	.db 0x0d
      000032 00                    2026 	.db 0x00
                                   2027 	.area CSEG    (CODE)
                                   2028 	.area CONST   (CODE)
      000033                       2029 ___str_3:
      000033 31 20 2D 2D 3E 20 43  2030 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    2031 	.db 0x0a
      000047 0D                    2032 	.db 0x0d
      000048 00                    2033 	.db 0x00
                                   2034 	.area CSEG    (CODE)
                                   2035 	.area CONST   (CODE)
      000049                       2036 ___str_4:
      000049 32 20 2D 2D 3E 20 42  2037 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    2038 	.db 0x0a
      00005C 0D                    2039 	.db 0x0d
      00005D 00                    2040 	.db 0x00
                                   2041 	.area CSEG    (CODE)
                                   2042 	.area CONST   (CODE)
      00005E                       2043 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  2044 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    2045 	.db 0x0a
      000070 0D                    2046 	.db 0x0d
      000071 00                    2047 	.db 0x00
                                   2048 	.area CSEG    (CODE)
                                   2049 	.area CONST   (CODE)
      000072                       2050 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  2051 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    2052 	.db 0x0a
      00008A 0D                    2053 	.db 0x0d
      00008B 00                    2054 	.db 0x00
                                   2055 	.area CSEG    (CODE)
                                   2056 	.area CONST   (CODE)
      00008C                       2057 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  2058 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    2059 	.db 0x0a
      0000A0 0D                    2060 	.db 0x0d
      0000A1 00                    2061 	.db 0x00
                                   2062 	.area CSEG    (CODE)
                                   2063 	.area CONST   (CODE)
      0000A2                       2064 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  2065 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    2066 	.db 0x0a
      0000B5 0D                    2067 	.db 0x0d
      0000B6 00                    2068 	.db 0x00
                                   2069 	.area CSEG    (CODE)
                                   2070 	.area CONST   (CODE)
      0000B7                       2071 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  2072 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    2073 	.db 0x0a
      0000C7 0D                    2074 	.db 0x0d
      0000C8 00                    2075 	.db 0x00
                                   2076 	.area CSEG    (CODE)
                                   2077 	.area CONST   (CODE)
      0000C9                       2078 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  2079 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    2080 	.db 0x0a
      0000E1 0D                    2081 	.db 0x0d
      0000E2 00                    2082 	.db 0x00
                                   2083 	.area CSEG    (CODE)
                                   2084 	.area CONST   (CODE)
      0000E3                       2085 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  2086 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    2087 	.db 0x0a
      0000F6 0D                    2088 	.db 0x0d
      0000F7 00                    2089 	.db 0x00
                                   2090 	.area CSEG    (CODE)
                                   2091 	.area CONST   (CODE)
      0000F8                       2092 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  2093 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    2094 	.db 0x0a
      00010F 0D                    2095 	.db 0x0d
      000110 00                    2096 	.db 0x00
                                   2097 	.area CSEG    (CODE)
                                   2098 	.area CONST   (CODE)
      000111                       2099 ___str_13:
      000111 42 20 2D 2D 3E 20 49  2100 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2101 	.db 0x0a
      000127 0D                    2102 	.db 0x0d
      000128 00                    2103 	.db 0x00
                                   2104 	.area CSEG    (CODE)
                                   2105 	.area CONST   (CODE)
      000129                       2106 ___str_14:
      000129 43 20 2D 2D 3E 20 48  2107 	.ascii "C --> Hard Reset(nRESET pin)"
             61 72 64 20 52 65 73
             65 74 28 6E 52 45 53
             45 54 20 70 69 6E 29
      000145 0A                    2108 	.db 0x0a
      000146 0D                    2109 	.db 0x0d
      000147 00                    2110 	.db 0x00
                                   2111 	.area CSEG    (CODE)
                                   2112 	.area CONST   (CODE)
      000148                       2113 ___str_15:
      000148 45 6E 74 65 72 20 74  2114 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      00016A 0A                    2115 	.db 0x0a
      00016B 0D                    2116 	.db 0x0d
      00016C 00                    2117 	.db 0x00
                                   2118 	.area CSEG    (CODE)
                                   2119 	.area CONST   (CODE)
      00016D                       2120 ___str_16:
      00016D 45 6E 74 65 72 20 74  2121 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      000197 0A                    2122 	.db 0x0a
      000198 0D                    2123 	.db 0x0d
      000199 00                    2124 	.db 0x00
                                   2125 	.area CSEG    (CODE)
                                   2126 	.area CONST   (CODE)
      00019A                       2127 ___str_17:
      00019A 45 6E 74 65 72 20 74  2128 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      0001BB 0A                    2129 	.db 0x0a
      0001BC 0D                    2130 	.db 0x0d
      0001BD 00                    2131 	.db 0x00
                                   2132 	.area CSEG    (CODE)
                                   2133 	.area CONST   (CODE)
      0001BE                       2134 ___str_18:
      0001BE 45 6E 74 65 72 20 74  2135 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      0001E1 0A                    2136 	.db 0x0a
      0001E2 0D                    2137 	.db 0x0d
      0001E3 00                    2138 	.db 0x00
                                   2139 	.area CSEG    (CODE)
                                   2140 	.area CONST   (CODE)
      0001E4                       2141 ___str_19:
      0001E4 45 6E 74 65 72 20 74  2142 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      0001FF 0A                    2143 	.db 0x0a
      000200 0D                    2144 	.db 0x0d
      000201 00                    2145 	.db 0x00
                                   2146 	.area CSEG    (CODE)
                                   2147 	.area CONST   (CODE)
      000202                       2148 ___str_20:
      000202 45 6E 74 65 72 20 25  2149 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000222 0A                    2150 	.db 0x0a
      000223 0D                    2151 	.db 0x0d
      000224 00                    2152 	.db 0x00
                                   2153 	.area CSEG    (CODE)
                                   2154 	.area CONST   (CODE)
      000225                       2155 ___str_21:
      000225 42 79 74 65 20 25 64  2156 	.ascii "Byte %d: "
             3A 20
      00022E 00                    2157 	.db 0x00
                                   2158 	.area CSEG    (CODE)
                                   2159 	.area CONST   (CODE)
      00022F                       2160 ___str_22:
      00022F 45 6E 74 65 72 20 74  2161 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      000251 0A                    2162 	.db 0x0a
      000252 0D                    2163 	.db 0x0d
      000253 00                    2164 	.db 0x00
                                   2165 	.area CSEG    (CODE)
                                   2166 	.area CONST   (CODE)
      000254                       2167 ___str_23:
      000254 43 75 72 72 65 6E 74  2168 	.ascii "Current ERXRDPT: 0x%04X"
             20 45 52 58 52 44 50
             54 3A 20 30 78 25 30
             34 58
      00026B 0A                    2169 	.db 0x0a
      00026C 0D                    2170 	.db 0x0d
      00026D 00                    2171 	.db 0x00
                                   2172 	.area CSEG    (CODE)
                                   2173 	.area CONST   (CODE)
      00026E                       2174 ___str_24:
      00026E 55 70 64 61 74 65 64  2175 	.ascii "Updated ERXRDPT to: 0x%04X"
             20 45 52 58 52 44 50
             54 20 74 6F 3A 20 30
             78 25 30 34 58
      000288 0A                    2176 	.db 0x0a
      000289 0D                    2177 	.db 0x0d
      00028A 00                    2178 	.db 0x00
                                   2179 	.area CSEG    (CODE)
                                   2180 	.area CONST   (CODE)
      00028B                       2181 ___str_25:
      00028B 45 6E 74 65 72 20 74  2182 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      0002B1 0A                    2183 	.db 0x0a
      0002B2 0D                    2184 	.db 0x0d
      0002B3 00                    2185 	.db 0x00
                                   2186 	.area CSEG    (CODE)
                                   2187 	.area CONST   (CODE)
      0002B4                       2188 ___str_26:
      0002B4 45 6E 74 65 72 20 74  2189 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002DA 0A                    2190 	.db 0x0a
      0002DB 0D                    2191 	.db 0x0d
      0002DC 00                    2192 	.db 0x00
                                   2193 	.area CSEG    (CODE)
                                   2194 	.area CONST   (CODE)
      0002DD                       2195 ___str_27:
      0002DD 4D 41 43 20 52 65 67  2196 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0002F6 0A                    2197 	.db 0x0a
      0002F7 0D                    2198 	.db 0x0d
      0002F8 00                    2199 	.db 0x00
                                   2200 	.area CSEG    (CODE)
                                   2201 	.area CONST   (CODE)
      0002F9                       2202 ___str_28:
      0002F9 45 6E 74 65 72 20 74  2203 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      000318 0A                    2204 	.db 0x0a
      000319 0D                    2205 	.db 0x0d
      00031A 00                    2206 	.db 0x00
                                   2207 	.area CSEG    (CODE)
                                   2208 	.area CONST   (CODE)
      00031B                       2209 ___str_29:
      00031B 45 6E 74 65 72 20 74  2210 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      00033A 0A                    2211 	.db 0x0a
      00033B 0D                    2212 	.db 0x0d
      00033C 00                    2213 	.db 0x00
                                   2214 	.area CSEG    (CODE)
                                   2215 	.area CONST   (CODE)
      00033D                       2216 ___str_30:
      00033D 50 48 59 20 57 72 69  2217 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      000353 0A                    2218 	.db 0x0a
      000354 0D                    2219 	.db 0x0d
      000355 00                    2220 	.db 0x00
                                   2221 	.area CSEG    (CODE)
                                   2222 	.area CONST   (CODE)
      000356                       2223 ___str_31:
      000356 45 6E 74 65 72 20 74  2224 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      00037D 0A                    2225 	.db 0x0a
      00037E 0D                    2226 	.db 0x0d
      00037F 00                    2227 	.db 0x00
                                   2228 	.area CSEG    (CODE)
                                   2229 	.area CONST   (CODE)
      000380                       2230 ___str_32:
      000380 50 48 59 20 52 65 61  2231 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      000395 0A                    2232 	.db 0x0a
      000396 0D                    2233 	.db 0x0d
      000397 00                    2234 	.db 0x00
                                   2235 	.area CSEG    (CODE)
                                   2236 	.area CONST   (CODE)
      000398                       2237 ___str_33:
      000398 52 65 73 65 74 74 69  2238 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      0003AD 0A                    2239 	.db 0x0a
      0003AE 0D                    2240 	.db 0x0d
      0003AF 00                    2241 	.db 0x00
                                   2242 	.area CSEG    (CODE)
                                   2243 	.area CONST   (CODE)
      0003B0                       2244 ___str_34:
      0003B0 45 6E 74 65 72 20 74  2245 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003D7 0A                    2246 	.db 0x0a
      0003D8 0D                    2247 	.db 0x0d
      0003D9 00                    2248 	.db 0x00
                                   2249 	.area CSEG    (CODE)
                                   2250 	.area CONST   (CODE)
      0003DA                       2251 ___str_35:
      0003DA 45 6E 74 65 72 20 74  2252 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      0003F2 0A                    2253 	.db 0x0a
      0003F3 0D                    2254 	.db 0x0d
      0003F4 00                    2255 	.db 0x00
                                   2256 	.area CSEG    (CODE)
                                   2257 	.area CONST   (CODE)
      0003F5                       2258 ___str_36:
      0003F5 45 54 48 20 52 65 67  2259 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      00040E 0A                    2260 	.db 0x0a
      00040F 0D                    2261 	.db 0x0d
      000410 00                    2262 	.db 0x00
                                   2263 	.area CSEG    (CODE)
                                   2264 	.area CONST   (CODE)
      000411                       2265 ___str_37:
      000411 20 52 65 73 65 74 74  2266 	.ascii " Resetting ENC using RESET pin in Hardware(P1_0)"
             69 6E 67 20 45 4E 43
             20 75 73 69 6E 67 20
             52 45 53 45 54 20 70
             69 6E 20 69 6E 20 48
             61 72 64 77 61 72 65
             28 50 31 5F 30 29
      000441 0A                    2267 	.db 0x0a
      000442 0D                    2268 	.db 0x0d
      000443 00                    2269 	.db 0x00
                                   2270 	.area CSEG    (CODE)
                                   2271 	.area CONST   (CODE)
      000444                       2272 ___str_38:
      000444 49 6E 76 61 6C 69 64  2273 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      000471 0A                    2274 	.db 0x0a
      000472 0D                    2275 	.db 0x0d
      000473 00                    2276 	.db 0x00
                                   2277 	.area CSEG    (CODE)
                                   2278 	.area XINIT   (CODE)
                                   2279 	.area CABS    (ABS,CODE)
