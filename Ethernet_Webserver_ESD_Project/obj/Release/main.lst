                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _spi_control_write
                                     15 	.globl _eth_spi_read
                                     16 	.globl _phy_spi_write
                                     17 	.globl _phy_spi_read
                                     18 	.globl _spi_buffer_write
                                     19 	.globl _spi_buffer_read
                                     20 	.globl _mac_spi_read
                                     21 	.globl _enc_reset
                                     22 	.globl _configure_SPI
                                     23 	.globl _printf_tiny
                                     24 	.globl _putchar
                                     25 	.globl _getchar
                                     26 	.globl _printf
                                     27 	.globl _TF1
                                     28 	.globl _TR1
                                     29 	.globl _TF0
                                     30 	.globl _TR0
                                     31 	.globl _IE1
                                     32 	.globl _IT1
                                     33 	.globl _IE0
                                     34 	.globl _IT0
                                     35 	.globl _SM0
                                     36 	.globl _SM1
                                     37 	.globl _SM2
                                     38 	.globl _REN
                                     39 	.globl _TB8
                                     40 	.globl _RB8
                                     41 	.globl _TI
                                     42 	.globl _RI
                                     43 	.globl _CY
                                     44 	.globl _AC
                                     45 	.globl _F0
                                     46 	.globl _RS1
                                     47 	.globl _RS0
                                     48 	.globl _OV
                                     49 	.globl _F1
                                     50 	.globl _P
                                     51 	.globl _RD
                                     52 	.globl _WR
                                     53 	.globl _T1
                                     54 	.globl _T0
                                     55 	.globl _INT1
                                     56 	.globl _INT0
                                     57 	.globl _TXD0
                                     58 	.globl _TXD
                                     59 	.globl _RXD0
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _P2_7
                                     70 	.globl _P2_6
                                     71 	.globl _P2_5
                                     72 	.globl _P2_4
                                     73 	.globl _P2_3
                                     74 	.globl _P2_2
                                     75 	.globl _P2_1
                                     76 	.globl _P2_0
                                     77 	.globl _P1_7
                                     78 	.globl _P1_6
                                     79 	.globl _P1_5
                                     80 	.globl _P1_4
                                     81 	.globl _P1_3
                                     82 	.globl _P1_2
                                     83 	.globl _P1_1
                                     84 	.globl _P1_0
                                     85 	.globl _P0_7
                                     86 	.globl _P0_6
                                     87 	.globl _P0_5
                                     88 	.globl _P0_4
                                     89 	.globl _P0_3
                                     90 	.globl _P0_2
                                     91 	.globl _P0_1
                                     92 	.globl _P0_0
                                     93 	.globl _PS
                                     94 	.globl _PT1
                                     95 	.globl _PX1
                                     96 	.globl _PT0
                                     97 	.globl _PX0
                                     98 	.globl _EA
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _BREG_F7
                                    105 	.globl _BREG_F6
                                    106 	.globl _BREG_F5
                                    107 	.globl _BREG_F4
                                    108 	.globl _BREG_F3
                                    109 	.globl _BREG_F2
                                    110 	.globl _BREG_F1
                                    111 	.globl _BREG_F0
                                    112 	.globl _P5_7
                                    113 	.globl _P5_6
                                    114 	.globl _P5_5
                                    115 	.globl _P5_4
                                    116 	.globl _P5_3
                                    117 	.globl _P5_2
                                    118 	.globl _P5_1
                                    119 	.globl _P5_0
                                    120 	.globl _P4_7
                                    121 	.globl _P4_6
                                    122 	.globl _P4_5
                                    123 	.globl _P4_4
                                    124 	.globl _P4_3
                                    125 	.globl _P4_2
                                    126 	.globl _P4_1
                                    127 	.globl _P4_0
                                    128 	.globl _PX0L
                                    129 	.globl _PT0L
                                    130 	.globl _PX1L
                                    131 	.globl _PT1L
                                    132 	.globl _PSL
                                    133 	.globl _PT2L
                                    134 	.globl _PPCL
                                    135 	.globl _EC
                                    136 	.globl _CCF0
                                    137 	.globl _CCF1
                                    138 	.globl _CCF2
                                    139 	.globl _CCF3
                                    140 	.globl _CCF4
                                    141 	.globl _CR
                                    142 	.globl _CF
                                    143 	.globl _TF2
                                    144 	.globl _EXF2
                                    145 	.globl _RCLK
                                    146 	.globl _TCLK
                                    147 	.globl _EXEN2
                                    148 	.globl _TR2
                                    149 	.globl _C_T2
                                    150 	.globl _CP_RL2
                                    151 	.globl _T2CON_7
                                    152 	.globl _T2CON_6
                                    153 	.globl _T2CON_5
                                    154 	.globl _T2CON_4
                                    155 	.globl _T2CON_3
                                    156 	.globl _T2CON_2
                                    157 	.globl _T2CON_1
                                    158 	.globl _T2CON_0
                                    159 	.globl _PT2
                                    160 	.globl _ET2
                                    161 	.globl _TMOD
                                    162 	.globl _TL1
                                    163 	.globl _TL0
                                    164 	.globl _TH1
                                    165 	.globl _TH0
                                    166 	.globl _TCON
                                    167 	.globl _SP
                                    168 	.globl _SCON
                                    169 	.globl _SBUF0
                                    170 	.globl _SBUF
                                    171 	.globl _PSW
                                    172 	.globl _PCON
                                    173 	.globl _P3
                                    174 	.globl _P2
                                    175 	.globl _P1
                                    176 	.globl _P0
                                    177 	.globl _IP
                                    178 	.globl _IE
                                    179 	.globl _DP0L
                                    180 	.globl _DPL
                                    181 	.globl _DP0H
                                    182 	.globl _DPH
                                    183 	.globl _B
                                    184 	.globl _ACC
                                    185 	.globl _EECON
                                    186 	.globl _KBF
                                    187 	.globl _KBE
                                    188 	.globl _KBLS
                                    189 	.globl _BRL
                                    190 	.globl _BDRCON
                                    191 	.globl _T2MOD
                                    192 	.globl _SPDAT
                                    193 	.globl _SPSTA
                                    194 	.globl _SPCON
                                    195 	.globl _SADEN
                                    196 	.globl _SADDR
                                    197 	.globl _WDTPRG
                                    198 	.globl _WDTRST
                                    199 	.globl _P5
                                    200 	.globl _P4
                                    201 	.globl _IPH1
                                    202 	.globl _IPL1
                                    203 	.globl _IPH0
                                    204 	.globl _IPL0
                                    205 	.globl _IEN1
                                    206 	.globl _IEN0
                                    207 	.globl _CMOD
                                    208 	.globl _CL
                                    209 	.globl _CH
                                    210 	.globl _CCON
                                    211 	.globl _CCAPM4
                                    212 	.globl _CCAPM3
                                    213 	.globl _CCAPM2
                                    214 	.globl _CCAPM1
                                    215 	.globl _CCAPM0
                                    216 	.globl _CCAP4L
                                    217 	.globl _CCAP3L
                                    218 	.globl _CCAP2L
                                    219 	.globl _CCAP1L
                                    220 	.globl _CCAP0L
                                    221 	.globl _CCAP4H
                                    222 	.globl _CCAP3H
                                    223 	.globl _CCAP2H
                                    224 	.globl _CCAP1H
                                    225 	.globl _CCAP0H
                                    226 	.globl _CKCON1
                                    227 	.globl _CKCON0
                                    228 	.globl _CKRL
                                    229 	.globl _AUXR1
                                    230 	.globl _AUXR
                                    231 	.globl _TH2
                                    232 	.globl _TL2
                                    233 	.globl _RCAP2H
                                    234 	.globl _RCAP2L
                                    235 	.globl _T2CON
                                    236 ;--------------------------------------------------------
                                    237 ; special function registers
                                    238 ;--------------------------------------------------------
                                    239 	.area RSEG    (ABS,DATA)
      000000                        240 	.org 0x0000
                           0000C8   241 _T2CON	=	0x00c8
                           0000CA   242 _RCAP2L	=	0x00ca
                           0000CB   243 _RCAP2H	=	0x00cb
                           0000CC   244 _TL2	=	0x00cc
                           0000CD   245 _TH2	=	0x00cd
                           00008E   246 _AUXR	=	0x008e
                           0000A2   247 _AUXR1	=	0x00a2
                           000097   248 _CKRL	=	0x0097
                           00008F   249 _CKCON0	=	0x008f
                           0000AF   250 _CKCON1	=	0x00af
                           0000FA   251 _CCAP0H	=	0x00fa
                           0000FB   252 _CCAP1H	=	0x00fb
                           0000FC   253 _CCAP2H	=	0x00fc
                           0000FD   254 _CCAP3H	=	0x00fd
                           0000FE   255 _CCAP4H	=	0x00fe
                           0000EA   256 _CCAP0L	=	0x00ea
                           0000EB   257 _CCAP1L	=	0x00eb
                           0000EC   258 _CCAP2L	=	0x00ec
                           0000ED   259 _CCAP3L	=	0x00ed
                           0000EE   260 _CCAP4L	=	0x00ee
                           0000DA   261 _CCAPM0	=	0x00da
                           0000DB   262 _CCAPM1	=	0x00db
                           0000DC   263 _CCAPM2	=	0x00dc
                           0000DD   264 _CCAPM3	=	0x00dd
                           0000DE   265 _CCAPM4	=	0x00de
                           0000D8   266 _CCON	=	0x00d8
                           0000F9   267 _CH	=	0x00f9
                           0000E9   268 _CL	=	0x00e9
                           0000D9   269 _CMOD	=	0x00d9
                           0000A8   270 _IEN0	=	0x00a8
                           0000B1   271 _IEN1	=	0x00b1
                           0000B8   272 _IPL0	=	0x00b8
                           0000B7   273 _IPH0	=	0x00b7
                           0000B2   274 _IPL1	=	0x00b2
                           0000B3   275 _IPH1	=	0x00b3
                           0000C0   276 _P4	=	0x00c0
                           0000E8   277 _P5	=	0x00e8
                           0000A6   278 _WDTRST	=	0x00a6
                           0000A7   279 _WDTPRG	=	0x00a7
                           0000A9   280 _SADDR	=	0x00a9
                           0000B9   281 _SADEN	=	0x00b9
                           0000C3   282 _SPCON	=	0x00c3
                           0000C4   283 _SPSTA	=	0x00c4
                           0000C5   284 _SPDAT	=	0x00c5
                           0000C9   285 _T2MOD	=	0x00c9
                           00009B   286 _BDRCON	=	0x009b
                           00009A   287 _BRL	=	0x009a
                           00009C   288 _KBLS	=	0x009c
                           00009D   289 _KBE	=	0x009d
                           00009E   290 _KBF	=	0x009e
                           0000D2   291 _EECON	=	0x00d2
                           0000E0   292 _ACC	=	0x00e0
                           0000F0   293 _B	=	0x00f0
                           000083   294 _DPH	=	0x0083
                           000083   295 _DP0H	=	0x0083
                           000082   296 _DPL	=	0x0082
                           000082   297 _DP0L	=	0x0082
                           0000A8   298 _IE	=	0x00a8
                           0000B8   299 _IP	=	0x00b8
                           000080   300 _P0	=	0x0080
                           000090   301 _P1	=	0x0090
                           0000A0   302 _P2	=	0x00a0
                           0000B0   303 _P3	=	0x00b0
                           000087   304 _PCON	=	0x0087
                           0000D0   305 _PSW	=	0x00d0
                           000099   306 _SBUF	=	0x0099
                           000099   307 _SBUF0	=	0x0099
                           000098   308 _SCON	=	0x0098
                           000081   309 _SP	=	0x0081
                           000088   310 _TCON	=	0x0088
                           00008C   311 _TH0	=	0x008c
                           00008D   312 _TH1	=	0x008d
                           00008A   313 _TL0	=	0x008a
                           00008B   314 _TL1	=	0x008b
                           000089   315 _TMOD	=	0x0089
                                    316 ;--------------------------------------------------------
                                    317 ; special function bits
                                    318 ;--------------------------------------------------------
                                    319 	.area RSEG    (ABS,DATA)
      000000                        320 	.org 0x0000
                           0000AD   321 _ET2	=	0x00ad
                           0000BD   322 _PT2	=	0x00bd
                           0000C8   323 _T2CON_0	=	0x00c8
                           0000C9   324 _T2CON_1	=	0x00c9
                           0000CA   325 _T2CON_2	=	0x00ca
                           0000CB   326 _T2CON_3	=	0x00cb
                           0000CC   327 _T2CON_4	=	0x00cc
                           0000CD   328 _T2CON_5	=	0x00cd
                           0000CE   329 _T2CON_6	=	0x00ce
                           0000CF   330 _T2CON_7	=	0x00cf
                           0000C8   331 _CP_RL2	=	0x00c8
                           0000C9   332 _C_T2	=	0x00c9
                           0000CA   333 _TR2	=	0x00ca
                           0000CB   334 _EXEN2	=	0x00cb
                           0000CC   335 _TCLK	=	0x00cc
                           0000CD   336 _RCLK	=	0x00cd
                           0000CE   337 _EXF2	=	0x00ce
                           0000CF   338 _TF2	=	0x00cf
                           0000DF   339 _CF	=	0x00df
                           0000DE   340 _CR	=	0x00de
                           0000DC   341 _CCF4	=	0x00dc
                           0000DB   342 _CCF3	=	0x00db
                           0000DA   343 _CCF2	=	0x00da
                           0000D9   344 _CCF1	=	0x00d9
                           0000D8   345 _CCF0	=	0x00d8
                           0000AE   346 _EC	=	0x00ae
                           0000BE   347 _PPCL	=	0x00be
                           0000BD   348 _PT2L	=	0x00bd
                           0000BC   349 _PSL	=	0x00bc
                           0000BB   350 _PT1L	=	0x00bb
                           0000BA   351 _PX1L	=	0x00ba
                           0000B9   352 _PT0L	=	0x00b9
                           0000B8   353 _PX0L	=	0x00b8
                           0000C0   354 _P4_0	=	0x00c0
                           0000C1   355 _P4_1	=	0x00c1
                           0000C2   356 _P4_2	=	0x00c2
                           0000C3   357 _P4_3	=	0x00c3
                           0000C4   358 _P4_4	=	0x00c4
                           0000C5   359 _P4_5	=	0x00c5
                           0000C6   360 _P4_6	=	0x00c6
                           0000C7   361 _P4_7	=	0x00c7
                           0000E8   362 _P5_0	=	0x00e8
                           0000E9   363 _P5_1	=	0x00e9
                           0000EA   364 _P5_2	=	0x00ea
                           0000EB   365 _P5_3	=	0x00eb
                           0000EC   366 _P5_4	=	0x00ec
                           0000ED   367 _P5_5	=	0x00ed
                           0000EE   368 _P5_6	=	0x00ee
                           0000EF   369 _P5_7	=	0x00ef
                           0000F0   370 _BREG_F0	=	0x00f0
                           0000F1   371 _BREG_F1	=	0x00f1
                           0000F2   372 _BREG_F2	=	0x00f2
                           0000F3   373 _BREG_F3	=	0x00f3
                           0000F4   374 _BREG_F4	=	0x00f4
                           0000F5   375 _BREG_F5	=	0x00f5
                           0000F6   376 _BREG_F6	=	0x00f6
                           0000F7   377 _BREG_F7	=	0x00f7
                           0000A8   378 _EX0	=	0x00a8
                           0000A9   379 _ET0	=	0x00a9
                           0000AA   380 _EX1	=	0x00aa
                           0000AB   381 _ET1	=	0x00ab
                           0000AC   382 _ES	=	0x00ac
                           0000AF   383 _EA	=	0x00af
                           0000B8   384 _PX0	=	0x00b8
                           0000B9   385 _PT0	=	0x00b9
                           0000BA   386 _PX1	=	0x00ba
                           0000BB   387 _PT1	=	0x00bb
                           0000BC   388 _PS	=	0x00bc
                           000080   389 _P0_0	=	0x0080
                           000081   390 _P0_1	=	0x0081
                           000082   391 _P0_2	=	0x0082
                           000083   392 _P0_3	=	0x0083
                           000084   393 _P0_4	=	0x0084
                           000085   394 _P0_5	=	0x0085
                           000086   395 _P0_6	=	0x0086
                           000087   396 _P0_7	=	0x0087
                           000090   397 _P1_0	=	0x0090
                           000091   398 _P1_1	=	0x0091
                           000092   399 _P1_2	=	0x0092
                           000093   400 _P1_3	=	0x0093
                           000094   401 _P1_4	=	0x0094
                           000095   402 _P1_5	=	0x0095
                           000096   403 _P1_6	=	0x0096
                           000097   404 _P1_7	=	0x0097
                           0000A0   405 _P2_0	=	0x00a0
                           0000A1   406 _P2_1	=	0x00a1
                           0000A2   407 _P2_2	=	0x00a2
                           0000A3   408 _P2_3	=	0x00a3
                           0000A4   409 _P2_4	=	0x00a4
                           0000A5   410 _P2_5	=	0x00a5
                           0000A6   411 _P2_6	=	0x00a6
                           0000A7   412 _P2_7	=	0x00a7
                           0000B0   413 _P3_0	=	0x00b0
                           0000B1   414 _P3_1	=	0x00b1
                           0000B2   415 _P3_2	=	0x00b2
                           0000B3   416 _P3_3	=	0x00b3
                           0000B4   417 _P3_4	=	0x00b4
                           0000B5   418 _P3_5	=	0x00b5
                           0000B6   419 _P3_6	=	0x00b6
                           0000B7   420 _P3_7	=	0x00b7
                           0000B0   421 _RXD	=	0x00b0
                           0000B0   422 _RXD0	=	0x00b0
                           0000B1   423 _TXD	=	0x00b1
                           0000B1   424 _TXD0	=	0x00b1
                           0000B2   425 _INT0	=	0x00b2
                           0000B3   426 _INT1	=	0x00b3
                           0000B4   427 _T0	=	0x00b4
                           0000B5   428 _T1	=	0x00b5
                           0000B6   429 _WR	=	0x00b6
                           0000B7   430 _RD	=	0x00b7
                           0000D0   431 _P	=	0x00d0
                           0000D1   432 _F1	=	0x00d1
                           0000D2   433 _OV	=	0x00d2
                           0000D3   434 _RS0	=	0x00d3
                           0000D4   435 _RS1	=	0x00d4
                           0000D5   436 _F0	=	0x00d5
                           0000D6   437 _AC	=	0x00d6
                           0000D7   438 _CY	=	0x00d7
                           000098   439 _RI	=	0x0098
                           000099   440 _TI	=	0x0099
                           00009A   441 _RB8	=	0x009a
                           00009B   442 _TB8	=	0x009b
                           00009C   443 _REN	=	0x009c
                           00009D   444 _SM2	=	0x009d
                           00009E   445 _SM1	=	0x009e
                           00009F   446 _SM0	=	0x009f
                           000088   447 _IT0	=	0x0088
                           000089   448 _IE0	=	0x0089
                           00008A   449 _IT1	=	0x008a
                           00008B   450 _IE1	=	0x008b
                           00008C   451 _TR0	=	0x008c
                           00008D   452 _TF0	=	0x008d
                           00008E   453 _TR1	=	0x008e
                           00008F   454 _TF1	=	0x008f
                                    455 ;--------------------------------------------------------
                                    456 ; overlayable register banks
                                    457 ;--------------------------------------------------------
                                    458 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        459 	.ds 8
                                    460 ;--------------------------------------------------------
                                    461 ; internal ram data
                                    462 ;--------------------------------------------------------
                                    463 	.area DSEG    (DATA)
                                    464 ;--------------------------------------------------------
                                    465 ; overlayable items in internal ram
                                    466 ;--------------------------------------------------------
                                    467 	.area	OSEG    (OVR,DATA)
      000000                        468 _hex_to_int_sloc0_1_0:
      000000                        469 	.ds 3
      000003                        470 _hex_to_int_sloc1_1_0:
      000003                        471 	.ds 1
      000004                        472 _hex_to_int_sloc2_1_0:
      000004                        473 	.ds 2
                                    474 ;--------------------------------------------------------
                                    475 ; Stack segment in internal ram
                                    476 ;--------------------------------------------------------
                                    477 	.area SSEG
      000000                        478 __start__stack:
      000000                        479 	.ds	1
                                    480 
                                    481 ;--------------------------------------------------------
                                    482 ; indirectly addressable internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area ISEG    (DATA)
                                    485 ;--------------------------------------------------------
                                    486 ; absolute internal ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area IABS    (ABS,DATA)
                                    489 	.area IABS    (ABS,DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; bit data
                                    492 ;--------------------------------------------------------
                                    493 	.area BSEG    (BIT)
                                    494 ;--------------------------------------------------------
                                    495 ; paged external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area PSEG    (PAG,XDATA)
                                    498 ;--------------------------------------------------------
                                    499 ; uninitialized external ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area XSEG    (XDATA)
      000000                        502 _hex_to_int_str_10000_63:
      000000                        503 	.ds 3
      000003                        504 _hex_to_int_result_10000_64:
      000003                        505 	.ds 2
      000005                        506 _hex_to_int_ASCII_20000_65:
      000005                        507 	.ds 2
      000007                        508 _get_user_buffer_size_input_10000_70:
      000007                        509 	.ds 10
      000011                        510 _main_buffer_40003_83:
      000011                        511 	.ds 256
      000111                        512 _main_buffer_40003_88:
      000111                        513 	.ds 256
                                    514 ;--------------------------------------------------------
                                    515 ; absolute external ram data
                                    516 ;--------------------------------------------------------
                                    517 	.area XABS    (ABS,XDATA)
                                    518 ;--------------------------------------------------------
                                    519 ; initialized external ram data
                                    520 ;--------------------------------------------------------
                                    521 	.area XISEG   (XDATA)
                                    522 	.area HOME    (CODE)
                                    523 	.area GSINIT0 (CODE)
                                    524 	.area GSINIT1 (CODE)
                                    525 	.area GSINIT2 (CODE)
                                    526 	.area GSINIT3 (CODE)
                                    527 	.area GSINIT4 (CODE)
                                    528 	.area GSINIT5 (CODE)
                                    529 	.area GSINIT  (CODE)
                                    530 	.area GSFINAL (CODE)
                                    531 	.area CSEG    (CODE)
                                    532 ;--------------------------------------------------------
                                    533 ; interrupt vector
                                    534 ;--------------------------------------------------------
                                    535 	.area HOME    (CODE)
      000000                        536 __interrupt_vect:
      000000 02r00r00         [24]  537 	ljmp	__sdcc_gsinit_startup
                                    538 ;--------------------------------------------------------
                                    539 ; global & static initialisations
                                    540 ;--------------------------------------------------------
                                    541 	.area HOME    (CODE)
                                    542 	.area GSINIT  (CODE)
                                    543 	.area GSFINAL (CODE)
                                    544 	.area GSINIT  (CODE)
                                    545 	.globl __sdcc_gsinit_startup
                                    546 	.globl __sdcc_program_startup
                                    547 	.globl __start__stack
                                    548 	.globl __mcs51_genXINIT
                                    549 	.globl __mcs51_genXRAMCLEAR
                                    550 	.globl __mcs51_genRAMCLEAR
                                    551 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  552 	ljmp	__sdcc_program_startup
                                    553 ;--------------------------------------------------------
                                    554 ; Home
                                    555 ;--------------------------------------------------------
                                    556 	.area HOME    (CODE)
                                    557 	.area HOME    (CODE)
      000003                        558 __sdcc_program_startup:
      000003 02r02r3E         [24]  559 	ljmp	_main
                                    560 ;	return from main will return to caller
                                    561 ;--------------------------------------------------------
                                    562 ; code
                                    563 ;--------------------------------------------------------
                                    564 	.area CSEG    (CODE)
                                    565 ;------------------------------------------------------------
                                    566 ;Allocation info for local variables in function 'hex_to_int'
                                    567 ;------------------------------------------------------------
                                    568 ;str                       Allocated with name '_hex_to_int_str_10000_63'
                                    569 ;i                         Allocated with name '_hex_to_int_i_10000_64'
                                    570 ;result                    Allocated with name '_hex_to_int_result_10000_64'
                                    571 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_65'
                                    572 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    573 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    574 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    575 ;------------------------------------------------------------
                                    576 ;	main.c:8: int hex_to_int(char* str)
                                    577 ;	-----------------------------------------
                                    578 ;	 function hex_to_int
                                    579 ;	-----------------------------------------
      000000                        580 _hex_to_int:
                           000007   581 	ar7 = 0x07
                           000006   582 	ar6 = 0x06
                           000005   583 	ar5 = 0x05
                           000004   584 	ar4 = 0x04
                           000003   585 	ar3 = 0x03
                           000002   586 	ar2 = 0x02
                           000001   587 	ar1 = 0x01
                           000000   588 	ar0 = 0x00
      000000 AF F0            [24]  589 	mov	r7,b
      000002 AE 83            [24]  590 	mov	r6,dph
      000004 E5 82            [12]  591 	mov	a,dpl
      000006 90r00r00         [24]  592 	mov	dptr,#_hex_to_int_str_10000_63
      000009 F0               [24]  593 	movx	@dptr,a
      00000A EE               [12]  594 	mov	a,r6
      00000B A3               [24]  595 	inc	dptr
      00000C F0               [24]  596 	movx	@dptr,a
      00000D EF               [12]  597 	mov	a,r7
      00000E A3               [24]  598 	inc	dptr
      00000F F0               [24]  599 	movx	@dptr,a
                                    600 ;	main.c:11: int i = 0, result = 0;
      000010 90r00r03         [24]  601 	mov	dptr,#_hex_to_int_result_10000_64
      000013 E4               [12]  602 	clr	a
      000014 F0               [24]  603 	movx	@dptr,a
      000015 A3               [24]  604 	inc	dptr
      000016 F0               [24]  605 	movx	@dptr,a
                                    606 ;	main.c:12: while(str[i] != '\0')
      000017 90r00r00         [24]  607 	mov	dptr,#_hex_to_int_str_10000_63
      00001A E0               [24]  608 	movx	a,@dptr
      00001B FD               [12]  609 	mov	r5,a
      00001C A3               [24]  610 	inc	dptr
      00001D E0               [24]  611 	movx	a,@dptr
      00001E FE               [12]  612 	mov	r6,a
      00001F A3               [24]  613 	inc	dptr
      000020 E0               [24]  614 	movx	a,@dptr
      000021 FF               [12]  615 	mov	r7,a
      000022 8D 02            [24]  616 	mov	ar2,r5
      000024 8E 03            [24]  617 	mov	ar3,r6
      000026 8F 04            [24]  618 	mov	ar4,r7
      000028 8D*00            [24]  619 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  620 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  621 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  622 	mov	r0,#0x00
      000030 79 00            [12]  623 	mov	r1,#0x00
      000032                        624 00112$:
      000032 C0 02            [24]  625 	push	ar2
      000034 C0 03            [24]  626 	push	ar3
      000036 C0 04            [24]  627 	push	ar4
      000038 E8               [12]  628 	mov	a,r0
      000039 25*00            [12]  629 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  630 	mov	r2,a
      00003C E9               [12]  631 	mov	a,r1
      00003D 35*01            [12]  632 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  633 	mov	r3,a
      000040 AC*02            [24]  634 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  635 	mov	dpl,r2
      000044 8B 83            [24]  636 	mov	dph,r3
      000046 8C F0            [24]  637 	mov	b,r4
      000048 12r00r00         [24]  638 	lcall	__gptrget
      00004B F5*03            [12]  639 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  640 	pop	ar4
      00004F D0 03            [24]  641 	pop	ar3
      000051 D0 02            [24]  642 	pop	ar2
      000053 E5*03            [12]  643 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  644 	jnz	00166$
      000057 02r01rAE         [24]  645 	ljmp	00114$
      00005A                        646 00166$:
                                    647 ;	main.c:14: int ASCII = (int)str[i];
      00005A C0 02            [24]  648 	push	ar2
      00005C C0 03            [24]  649 	push	ar3
      00005E C0 04            [24]  650 	push	ar4
      000060 85*03*04         [24]  651 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  652 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  653 	mov	dptr,#_hex_to_int_ASCII_20000_65
      000069 E5*04            [12]  654 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  655 	movx	@dptr,a
      00006C E5*05            [12]  656 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  657 	inc	dptr
      00006F F0               [24]  658 	movx	@dptr,a
                                    659 ;	main.c:15: result *= 16;
      000070 90r00r03         [24]  660 	mov	dptr,#_hex_to_int_result_10000_64
      000073 E0               [24]  661 	movx	a,@dptr
      000074 FB               [12]  662 	mov	r3,a
      000075 A3               [24]  663 	inc	dptr
      000076 E0               [24]  664 	movx	a,@dptr
      000077 C4               [12]  665 	swap	a
      000078 54 F0            [12]  666 	anl	a,#0xf0
      00007A CB               [12]  667 	xch	a,r3
      00007B C4               [12]  668 	swap	a
      00007C CB               [12]  669 	xch	a,r3
      00007D 6B               [12]  670 	xrl	a,r3
      00007E CB               [12]  671 	xch	a,r3
      00007F 54 F0            [12]  672 	anl	a,#0xf0
      000081 CB               [12]  673 	xch	a,r3
      000082 6B               [12]  674 	xrl	a,r3
      000083 FC               [12]  675 	mov	r4,a
      000084 90r00r03         [24]  676 	mov	dptr,#_hex_to_int_result_10000_64
      000087 EB               [12]  677 	mov	a,r3
      000088 F0               [24]  678 	movx	@dptr,a
      000089 EC               [12]  679 	mov	a,r4
      00008A A3               [24]  680 	inc	dptr
      00008B F0               [24]  681 	movx	@dptr,a
                                    682 ;	main.c:16: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  683 	clr	c
      00008D E5*04            [12]  684 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  685 	subb	a,#0x30
      000091 E5*05            [12]  686 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  687 	xrl	a,#0x80
      000095 94 80            [12]  688 	subb	a,#0x80
      000097 D0 04            [24]  689 	pop	ar4
      000099 D0 03            [24]  690 	pop	ar3
      00009B D0 02            [24]  691 	pop	ar2
      00009D 40 3F            [24]  692 	jc	00109$
      00009F 74 39            [12]  693 	mov	a,#0x39
      0000A1 95*04            [12]  694 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  695 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  696 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  697 	xrl	b,#0x80
      0000AB 95 F0            [12]  698 	subb	a,b
      0000AD 40 2F            [24]  699 	jc	00109$
                                    700 ;	main.c:18: result += str[i] - 48;
      0000AF C0 02            [24]  701 	push	ar2
      0000B1 C0 03            [24]  702 	push	ar3
      0000B3 C0 04            [24]  703 	push	ar4
      0000B5 E5*04            [12]  704 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  705 	add	a,#0xd0
      0000B9 F5*04            [12]  706 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  707 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  708 	addc	a,#0xff
      0000BF F5*05            [12]  709 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  710 	mov	dptr,#_hex_to_int_result_10000_64
      0000C4 E0               [24]  711 	movx	a,@dptr
      0000C5 FA               [12]  712 	mov	r2,a
      0000C6 A3               [24]  713 	inc	dptr
      0000C7 E0               [24]  714 	movx	a,@dptr
      0000C8 FC               [12]  715 	mov	r4,a
      0000C9 90r00r03         [24]  716 	mov	dptr,#_hex_to_int_result_10000_64
      0000CC E5*04            [12]  717 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  718 	add	a, r2
      0000CF F0               [24]  719 	movx	@dptr,a
      0000D0 E5*05            [12]  720 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  721 	addc	a, r4
      0000D3 A3               [24]  722 	inc	dptr
      0000D4 F0               [24]  723 	movx	@dptr,a
      0000D5 D0 04            [24]  724 	pop	ar4
      0000D7 D0 03            [24]  725 	pop	ar3
      0000D9 D0 02            [24]  726 	pop	ar2
      0000DB 02r01rA6         [24]  727 	ljmp	00110$
      0000DE                        728 00109$:
                                    729 ;	main.c:20: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  730 	mov	dptr,#_hex_to_int_ASCII_20000_65
      0000E1 E0               [24]  731 	movx	a,@dptr
      0000E2 F5*04            [12]  732 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  733 	inc	dptr
      0000E5 E0               [24]  734 	movx	a,@dptr
      0000E6 F5*05            [12]  735 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  736 	clr	c
      0000E9 E5*04            [12]  737 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  738 	subb	a,#0x41
      0000ED E5*05            [12]  739 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  740 	xrl	a,#0x80
      0000F1 94 80            [12]  741 	subb	a,#0x80
      0000F3 40 4E            [24]  742 	jc	00105$
      0000F5 74 46            [12]  743 	mov	a,#0x46
      0000F7 95*04            [12]  744 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  745 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  746 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  747 	xrl	b,#0x80
      000101 95 F0            [12]  748 	subb	a,b
      000103 40 3E            [24]  749 	jc	00105$
                                    750 ;	main.c:22: result += str[i] - 55;
      000105 C0 05            [24]  751 	push	ar5
      000107 C0 06            [24]  752 	push	ar6
      000109 C0 07            [24]  753 	push	ar7
      00010B E8               [12]  754 	mov	a,r0
      00010C 2A               [12]  755 	add	a, r2
      00010D FD               [12]  756 	mov	r5,a
      00010E E9               [12]  757 	mov	a,r1
      00010F 3B               [12]  758 	addc	a, r3
      000110 FE               [12]  759 	mov	r6,a
      000111 8C 07            [24]  760 	mov	ar7,r4
      000113 8D 82            [24]  761 	mov	dpl,r5
      000115 8E 83            [24]  762 	mov	dph,r6
      000117 8F F0            [24]  763 	mov	b,r7
      000119 12r00r00         [24]  764 	lcall	__gptrget
      00011C 7F 00            [12]  765 	mov	r7,#0x00
      00011E 24 C9            [12]  766 	add	a,#0xc9
      000120 F5*04            [12]  767 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  768 	mov	a,r7
      000123 34 FF            [12]  769 	addc	a,#0xff
      000125 F5*05            [12]  770 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  771 	mov	dptr,#_hex_to_int_result_10000_64
      00012A E0               [24]  772 	movx	a,@dptr
      00012B FE               [12]  773 	mov	r6,a
      00012C A3               [24]  774 	inc	dptr
      00012D E0               [24]  775 	movx	a,@dptr
      00012E FF               [12]  776 	mov	r7,a
      00012F 90r00r03         [24]  777 	mov	dptr,#_hex_to_int_result_10000_64
      000132 E5*04            [12]  778 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  779 	add	a, r6
      000135 F0               [24]  780 	movx	@dptr,a
      000136 E5*05            [12]  781 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  782 	addc	a, r7
      000139 A3               [24]  783 	inc	dptr
      00013A F0               [24]  784 	movx	@dptr,a
      00013B D0 07            [24]  785 	pop	ar7
      00013D D0 06            [24]  786 	pop	ar6
      00013F D0 05            [24]  787 	pop	ar5
      000141 80 63            [24]  788 	sjmp	00110$
      000143                        789 00105$:
                                    790 ;	main.c:24: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  791 	mov	dptr,#_hex_to_int_ASCII_20000_65
      000146 E0               [24]  792 	movx	a,@dptr
      000147 F5*04            [12]  793 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  794 	inc	dptr
      00014A E0               [24]  795 	movx	a,@dptr
      00014B F5*05            [12]  796 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  797 	clr	c
      00014E E5*04            [12]  798 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  799 	subb	a,#0x61
      000152 E5*05            [12]  800 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  801 	xrl	a,#0x80
      000156 94 80            [12]  802 	subb	a,#0x80
      000158 40 4C            [24]  803 	jc	00110$
      00015A 74 66            [12]  804 	mov	a,#0x66
      00015C 95*04            [12]  805 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  806 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  807 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  808 	xrl	b,#0x80
      000166 95 F0            [12]  809 	subb	a,b
      000168 40 3C            [24]  810 	jc	00110$
                                    811 ;	main.c:26: result += str[i] - 87;
      00016A C0 02            [24]  812 	push	ar2
      00016C C0 03            [24]  813 	push	ar3
      00016E C0 04            [24]  814 	push	ar4
      000170 E8               [12]  815 	mov	a,r0
      000171 2D               [12]  816 	add	a, r5
      000172 FA               [12]  817 	mov	r2,a
      000173 E9               [12]  818 	mov	a,r1
      000174 3E               [12]  819 	addc	a, r6
      000175 FB               [12]  820 	mov	r3,a
      000176 8F 04            [24]  821 	mov	ar4,r7
      000178 8A 82            [24]  822 	mov	dpl,r2
      00017A 8B 83            [24]  823 	mov	dph,r3
      00017C 8C F0            [24]  824 	mov	b,r4
      00017E 12r00r00         [24]  825 	lcall	__gptrget
      000181 7C 00            [12]  826 	mov	r4,#0x00
      000183 24 A9            [12]  827 	add	a,#0xa9
      000185 F5*04            [12]  828 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  829 	mov	a,r4
      000188 34 FF            [12]  830 	addc	a,#0xff
      00018A F5*05            [12]  831 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  832 	mov	dptr,#_hex_to_int_result_10000_64
      00018F E0               [24]  833 	movx	a,@dptr
      000190 FB               [12]  834 	mov	r3,a
      000191 A3               [24]  835 	inc	dptr
      000192 E0               [24]  836 	movx	a,@dptr
      000193 FC               [12]  837 	mov	r4,a
      000194 90r00r03         [24]  838 	mov	dptr,#_hex_to_int_result_10000_64
      000197 E5*04            [12]  839 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  840 	add	a, r3
      00019A F0               [24]  841 	movx	@dptr,a
      00019B E5*05            [12]  842 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  843 	addc	a, r4
      00019E A3               [24]  844 	inc	dptr
      00019F F0               [24]  845 	movx	@dptr,a
                                    846 ;	main.c:30: return result;
      0001A0 D0 04            [24]  847 	pop	ar4
      0001A2 D0 03            [24]  848 	pop	ar3
      0001A4 D0 02            [24]  849 	pop	ar2
                                    850 ;	main.c:26: result += str[i] - 87;
      0001A6                        851 00110$:
                                    852 ;	main.c:28: i++;
      0001A6 08               [12]  853 	inc	r0
      0001A7 B8 00 01         [24]  854 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  855 	inc	r1
      0001AB                        856 00173$:
      0001AB 02r00r32         [24]  857 	ljmp	00112$
      0001AE                        858 00114$:
                                    859 ;	main.c:30: return result;
      0001AE 90r00r03         [24]  860 	mov	dptr,#_hex_to_int_result_10000_64
      0001B1 E0               [24]  861 	movx	a,@dptr
      0001B2 FE               [12]  862 	mov	r6,a
      0001B3 A3               [24]  863 	inc	dptr
      0001B4 E0               [24]  864 	movx	a,@dptr
                                    865 ;	main.c:32: }
      0001B5 8E 82            [24]  866 	mov	dpl,r6
      0001B7 F5 83            [12]  867 	mov	dph,a
      0001B9 22               [24]  868 	ret
                                    869 ;------------------------------------------------------------
                                    870 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    871 ;------------------------------------------------------------
                                    872 ;i                         Allocated with name '_get_user_buffer_size_i_10000_70'
                                    873 ;output                    Allocated with name '_get_user_buffer_size_output_10000_70'
                                    874 ;input                     Allocated with name '_get_user_buffer_size_input_10000_70'
                                    875 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_70'
                                    876 ;------------------------------------------------------------
                                    877 ;	main.c:35: int get_user_buffer_size(void)
                                    878 ;	-----------------------------------------
                                    879 ;	 function get_user_buffer_size
                                    880 ;	-----------------------------------------
      0001BA                        881 _get_user_buffer_size:
                                    882 ;	main.c:41: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  883 	mov	r6,#0x00
      0001BC 7F 00            [12]  884 	mov	r7,#0x00
      0001BE                        885 00103$:
      0001BE C0 07            [24]  886 	push	ar7
      0001C0 C0 06            [24]  887 	push	ar6
      0001C2 12r00r00         [24]  888 	lcall	_getchar
      0001C5 AC 82            [24]  889 	mov	r4, dpl
      0001C7 D0 06            [24]  890 	pop	ar6
      0001C9 D0 07            [24]  891 	pop	ar7
      0001CB BC 0A 02         [24]  892 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  893 	sjmp	00105$
      0001D0                        894 00133$:
      0001D0 BC 0D 02         [24]  895 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  896 	sjmp	00105$
      0001D5                        897 00134$:
      0001D5 C3               [12]  898 	clr	c
      0001D6 EE               [12]  899 	mov	a,r6
      0001D7 94 09            [12]  900 	subb	a,#0x09
      0001D9 EF               [12]  901 	mov	a,r7
      0001DA 64 80            [12]  902 	xrl	a,#0x80
      0001DC 94 80            [12]  903 	subb	a,#0x80
      0001DE 50 2A            [24]  904 	jnc	00105$
                                    905 ;	main.c:43: putchar(ch);
      0001E0 8C 03            [24]  906 	mov	ar3,r4
      0001E2 7D 00            [12]  907 	mov	r5,#0x00
      0001E4 8B 82            [24]  908 	mov	dpl, r3
      0001E6 8D 83            [24]  909 	mov	dph, r5
      0001E8 C0 07            [24]  910 	push	ar7
      0001EA C0 06            [24]  911 	push	ar6
      0001EC C0 04            [24]  912 	push	ar4
      0001EE 12r00r00         [24]  913 	lcall	_putchar
      0001F1 D0 04            [24]  914 	pop	ar4
      0001F3 D0 06            [24]  915 	pop	ar6
      0001F5 D0 07            [24]  916 	pop	ar7
                                    917 ;	main.c:44: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12]  918 	mov	a,r6
      0001F8 24r07            [12]  919 	add	a, #_get_user_buffer_size_input_10000_70
      0001FA F5 82            [12]  920 	mov	dpl,a
      0001FC EF               [12]  921 	mov	a,r7
      0001FD 34s00            [12]  922 	addc	a, #(_get_user_buffer_size_input_10000_70 >> 8)
      0001FF F5 83            [12]  923 	mov	dph,a
      000201 EC               [12]  924 	mov	a,r4
      000202 F0               [24]  925 	movx	@dptr,a
                                    926 ;	main.c:45: i++;
      000203 0E               [12]  927 	inc	r6
      000204 BE 00 B7         [24]  928 	cjne	r6,#0x00,00103$
      000207 0F               [12]  929 	inc	r7
      000208 80 B4            [24]  930 	sjmp	00103$
      00020A                        931 00105$:
                                    932 ;	main.c:47: input[i] = '\0';
      00020A EE               [12]  933 	mov	a,r6
      00020B 24r07            [12]  934 	add	a, #_get_user_buffer_size_input_10000_70
      00020D F5 82            [12]  935 	mov	dpl,a
      00020F EF               [12]  936 	mov	a,r7
      000210 34s00            [12]  937 	addc	a, #(_get_user_buffer_size_input_10000_70 >> 8)
      000212 F5 83            [12]  938 	mov	dph,a
      000214 E4               [12]  939 	clr	a
      000215 F0               [24]  940 	movx	@dptr,a
                                    941 ;	main.c:48: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24]  942 	mov	dptr,#_get_user_buffer_size_input_10000_70
      000219 F5 F0            [12]  943 	mov	b,a
      00021B 12r00r00         [24]  944 	lcall	_hex_to_int
      00021E AE 82            [24]  945 	mov	r6, dpl
      000220 AF 83            [24]  946 	mov	r7, dph
                                    947 ;	main.c:49: printf_tiny("\n\r");
      000222 C0 07            [24]  948 	push	ar7
      000224 C0 06            [24]  949 	push	ar6
      000226 74r00            [12]  950 	mov	a,#___str_0
      000228 C0 E0            [24]  951 	push	acc
      00022A 74s00            [12]  952 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24]  953 	push	acc
      00022E 12r00r00         [24]  954 	lcall	_printf_tiny
      000231 15 81            [12]  955 	dec	sp
      000233 15 81            [12]  956 	dec	sp
      000235 D0 06            [24]  957 	pop	ar6
      000237 D0 07            [24]  958 	pop	ar7
                                    959 ;	main.c:51: return output;
      000239 8E 82            [24]  960 	mov	dpl, r6
      00023B 8F 83            [24]  961 	mov	dph, r7
                                    962 ;	main.c:52: }
      00023D 22               [24]  963 	ret
                                    964 ;------------------------------------------------------------
                                    965 ;Allocation info for local variables in function 'main'
                                    966 ;------------------------------------------------------------
                                    967 ;c                         Allocated with name '_main_c_20001_75'
                                    968 ;reg_bank                  Allocated with name '_main_reg_bank_40002_78'
                                    969 ;addr                      Allocated with name '_main_addr_40003_79'
                                    970 ;data                      Allocated with name '_main_data_40004_80'
                                    971 ;num_bytes                 Allocated with name '_main_num_bytes_40002_82'
                                    972 ;start_address             Allocated with name '_main_start_address_40003_83'
                                    973 ;buffer                    Allocated with name '_main_buffer_40003_83'
                                    974 ;i                         Allocated with name '_main_i_50003_84'
                                    975 ;num_bytes                 Allocated with name '_main_num_bytes_40002_87'
                                    976 ;start_address             Allocated with name '_main_start_address_40003_88'
                                    977 ;buffer                    Allocated with name '_main_buffer_40003_88'
                                    978 ;i                         Allocated with name '_main_i_50003_89'
                                    979 ;reg_bank                  Allocated with name '_main_reg_bank_40002_92'
                                    980 ;addr                      Allocated with name '_main_addr_40003_93'
                                    981 ;data                      Allocated with name '_main_data_40003_93'
                                    982 ;addr                      Allocated with name '_main_addr_40002_95'
                                    983 ;data                      Allocated with name '_main_data_40003_96'
                                    984 ;addr                      Allocated with name '_main_addr_40002_98'
                                    985 ;data                      Allocated with name '_main_data_40002_98'
                                    986 ;addr                      Allocated with name '_main_addr_40002_101'
                                    987 ;bank                      Allocated with name '_main_bank_40003_102'
                                    988 ;data                      Allocated with name '_main_data_40003_102'
                                    989 ;------------------------------------------------------------
                                    990 ;	main.c:54: void main(void)
                                    991 ;	-----------------------------------------
                                    992 ;	 function main
                                    993 ;	-----------------------------------------
      00023E                        994 _main:
                                    995 ;	main.c:56: printf("SPI Operations on 8051\n\r");
      00023E 74r03            [12]  996 	mov	a,#___str_1
      000240 C0 E0            [24]  997 	push	acc
      000242 74s00            [12]  998 	mov	a,#(___str_1 >> 8)
      000244 C0 E0            [24]  999 	push	acc
      000246 74 80            [12] 1000 	mov	a,#0x80
      000248 C0 E0            [24] 1001 	push	acc
      00024A 12r00r00         [24] 1002 	lcall	_printf
      00024D 15 81            [12] 1003 	dec	sp
      00024F 15 81            [12] 1004 	dec	sp
      000251 15 81            [12] 1005 	dec	sp
                                   1006 ;	main.c:57: configure_SPI();
      000253 12r00r00         [24] 1007 	lcall	_configure_SPI
                                   1008 ;	main.c:59: while(1)
      000256                       1009 00115$:
                                   1010 ;	main.c:61: printf("\n\rChoose an action: \n\r");
      000256 74r1C            [12] 1011 	mov	a,#___str_2
      000258 C0 E0            [24] 1012 	push	acc
      00025A 74s00            [12] 1013 	mov	a,#(___str_2 >> 8)
      00025C C0 E0            [24] 1014 	push	acc
      00025E 74 80            [12] 1015 	mov	a,#0x80
      000260 C0 E0            [24] 1016 	push	acc
      000262 12r00r00         [24] 1017 	lcall	_printf
      000265 15 81            [12] 1018 	dec	sp
      000267 15 81            [12] 1019 	dec	sp
      000269 15 81            [12] 1020 	dec	sp
                                   1021 ;	main.c:62: printf("1 --> Control Write\n\r");
      00026B 74r33            [12] 1022 	mov	a,#___str_3
      00026D C0 E0            [24] 1023 	push	acc
      00026F 74s00            [12] 1024 	mov	a,#(___str_3 >> 8)
      000271 C0 E0            [24] 1025 	push	acc
      000273 74 80            [12] 1026 	mov	a,#0x80
      000275 C0 E0            [24] 1027 	push	acc
      000277 12r00r00         [24] 1028 	lcall	_printf
      00027A 15 81            [12] 1029 	dec	sp
      00027C 15 81            [12] 1030 	dec	sp
      00027E 15 81            [12] 1031 	dec	sp
                                   1032 ;	main.c:63: printf("2 --> Buffer Write\n\r");
      000280 74r49            [12] 1033 	mov	a,#___str_4
      000282 C0 E0            [24] 1034 	push	acc
      000284 74s00            [12] 1035 	mov	a,#(___str_4 >> 8)
      000286 C0 E0            [24] 1036 	push	acc
      000288 74 80            [12] 1037 	mov	a,#0x80
      00028A C0 E0            [24] 1038 	push	acc
      00028C 12r00r00         [24] 1039 	lcall	_printf
      00028F 15 81            [12] 1040 	dec	sp
      000291 15 81            [12] 1041 	dec	sp
      000293 15 81            [12] 1042 	dec	sp
                                   1043 ;	main.c:64: printf("3 --> Buffer Read\n\r");
      000295 74r5E            [12] 1044 	mov	a,#___str_5
      000297 C0 E0            [24] 1045 	push	acc
      000299 74s00            [12] 1046 	mov	a,#(___str_5 >> 8)
      00029B C0 E0            [24] 1047 	push	acc
      00029D 74 80            [12] 1048 	mov	a,#0x80
      00029F C0 E0            [24] 1049 	push	acc
      0002A1 12r00r00         [24] 1050 	lcall	_printf
      0002A4 15 81            [12] 1051 	dec	sp
      0002A6 15 81            [12] 1052 	dec	sp
      0002A8 15 81            [12] 1053 	dec	sp
                                   1054 ;	main.c:65: printf("4 --> MAC Register Read\n\r");
      0002AA 74r72            [12] 1055 	mov	a,#___str_6
      0002AC C0 E0            [24] 1056 	push	acc
      0002AE 74s00            [12] 1057 	mov	a,#(___str_6 >> 8)
      0002B0 C0 E0            [24] 1058 	push	acc
      0002B2 74 80            [12] 1059 	mov	a,#0x80
      0002B4 C0 E0            [24] 1060 	push	acc
      0002B6 12r00r00         [24] 1061 	lcall	_printf
      0002B9 15 81            [12] 1062 	dec	sp
      0002BB 15 81            [12] 1063 	dec	sp
      0002BD 15 81            [12] 1064 	dec	sp
                                   1065 ;	main.c:66: printf("5 --> PHY SPI Write\n\r");
      0002BF 74r8C            [12] 1066 	mov	a,#___str_7
      0002C1 C0 E0            [24] 1067 	push	acc
      0002C3 74s00            [12] 1068 	mov	a,#(___str_7 >> 8)
      0002C5 C0 E0            [24] 1069 	push	acc
      0002C7 74 80            [12] 1070 	mov	a,#0x80
      0002C9 C0 E0            [24] 1071 	push	acc
      0002CB 12r00r00         [24] 1072 	lcall	_printf
      0002CE 15 81            [12] 1073 	dec	sp
      0002D0 15 81            [12] 1074 	dec	sp
      0002D2 15 81            [12] 1075 	dec	sp
                                   1076 ;	main.c:67: printf("6 --> PHY SPI Read\n\r");
      0002D4 74rA2            [12] 1077 	mov	a,#___str_8
      0002D6 C0 E0            [24] 1078 	push	acc
      0002D8 74s00            [12] 1079 	mov	a,#(___str_8 >> 8)
      0002DA C0 E0            [24] 1080 	push	acc
      0002DC 74 80            [12] 1081 	mov	a,#0x80
      0002DE C0 E0            [24] 1082 	push	acc
      0002E0 12r00r00         [24] 1083 	lcall	_printf
      0002E3 15 81            [12] 1084 	dec	sp
      0002E5 15 81            [12] 1085 	dec	sp
      0002E7 15 81            [12] 1086 	dec	sp
                                   1087 ;	main.c:68: printf("7 --> ENC Reset\n\r");
      0002E9 74rB7            [12] 1088 	mov	a,#___str_9
      0002EB C0 E0            [24] 1089 	push	acc
      0002ED 74s00            [12] 1090 	mov	a,#(___str_9 >> 8)
      0002EF C0 E0            [24] 1091 	push	acc
      0002F1 74 80            [12] 1092 	mov	a,#0x80
      0002F3 C0 E0            [24] 1093 	push	acc
      0002F5 12r00r00         [24] 1094 	lcall	_printf
      0002F8 15 81            [12] 1095 	dec	sp
      0002FA 15 81            [12] 1096 	dec	sp
      0002FC 15 81            [12] 1097 	dec	sp
                                   1098 ;	main.c:69: printf("8 --> Read ETH Register\n\r");
      0002FE 74rC9            [12] 1099 	mov	a,#___str_10
      000300 C0 E0            [24] 1100 	push	acc
      000302 74s00            [12] 1101 	mov	a,#(___str_10 >> 8)
      000304 C0 E0            [24] 1102 	push	acc
      000306 74 80            [12] 1103 	mov	a,#0x80
      000308 C0 E0            [24] 1104 	push	acc
      00030A 12r00r00         [24] 1105 	lcall	_printf
      00030D 15 81            [12] 1106 	dec	sp
      00030F 15 81            [12] 1107 	dec	sp
      000311 15 81            [12] 1108 	dec	sp
                                   1109 ;	main.c:70: printf("9 --> Display Menu\n\r");
      000313 74rE3            [12] 1110 	mov	a,#___str_11
      000315 C0 E0            [24] 1111 	push	acc
      000317 74s00            [12] 1112 	mov	a,#(___str_11 >> 8)
      000319 C0 E0            [24] 1113 	push	acc
      00031B 74 80            [12] 1114 	mov	a,#0x80
      00031D C0 E0            [24] 1115 	push	acc
      00031F 12r00r00         [24] 1116 	lcall	_printf
      000322 15 81            [12] 1117 	dec	sp
      000324 15 81            [12] 1118 	dec	sp
      000326 15 81            [12] 1119 	dec	sp
                                   1120 ;	main.c:72: char c = getchar();
      000328 12r00r00         [24] 1121 	lcall	_getchar
      00032B AE 82            [24] 1122 	mov	r6, dpl
                                   1123 ;	main.c:73: putchar(c);
      00032D 8E 05            [24] 1124 	mov	ar5,r6
      00032F 7F 00            [12] 1125 	mov	r7,#0x00
      000331 8D 82            [24] 1126 	mov	dpl, r5
      000333 8F 83            [24] 1127 	mov	dph, r7
      000335 C0 06            [24] 1128 	push	ar6
      000337 12r00r00         [24] 1129 	lcall	_putchar
                                   1130 ;	main.c:74: printf("\n\r");
      00033A 74r00            [12] 1131 	mov	a,#___str_0
      00033C C0 E0            [24] 1132 	push	acc
      00033E 74s00            [12] 1133 	mov	a,#(___str_0 >> 8)
      000340 C0 E0            [24] 1134 	push	acc
      000342 74 80            [12] 1135 	mov	a,#0x80
      000344 C0 E0            [24] 1136 	push	acc
      000346 12r00r00         [24] 1137 	lcall	_printf
      000349 15 81            [12] 1138 	dec	sp
      00034B 15 81            [12] 1139 	dec	sp
      00034D 15 81            [12] 1140 	dec	sp
      00034F D0 06            [24] 1141 	pop	ar6
                                   1142 ;	main.c:76: switch(c)
      000351 BE 31 00         [24] 1143 	cjne	r6,#0x31,00168$
      000354                       1144 00168$:
      000354 50 03            [24] 1145 	jnc	00169$
      000356 02r08r00         [24] 1146 	ljmp	00112$
      000359                       1147 00169$:
      000359 EE               [12] 1148 	mov	a,r6
      00035A 24 C6            [12] 1149 	add	a,#0xff - 0x39
      00035C 50 03            [24] 1150 	jnc	00170$
      00035E 02r08r00         [24] 1151 	ljmp	00112$
      000361                       1152 00170$:
      000361 EE               [12] 1153 	mov	a,r6
      000362 24 CF            [12] 1154 	add	a,#0xcf
      000364 FE               [12] 1155 	mov	r6,a
      000365 24 0A            [12] 1156 	add	a,#(00171$-3-.)
      000367 83               [24] 1157 	movc	a,@a+pc
      000368 F5 82            [12] 1158 	mov	dpl,a
      00036A EE               [12] 1159 	mov	a,r6
      00036B 24 0D            [12] 1160 	add	a,#(00172$-3-.)
      00036D 83               [24] 1161 	movc	a,@a+pc
      00036E F5 83            [12] 1162 	mov	dph,a
      000370 E4               [12] 1163 	clr	a
      000371 73               [24] 1164 	jmp	@a+dptr
      000372                       1165 00171$:
      000372r84                    1166 	.db	00101$
      000373rEC                    1167 	.db	00102$
      000374rEA                    1168 	.db	00104$
      000375rBB                    1169 	.db	00106$
      000376r1D                    1170 	.db	00107$
      000377r88                    1171 	.db	00108$
      000378rC3                    1172 	.db	00109$
      000379rDE                    1173 	.db	00110$
      00037Ar40                    1174 	.db	00111$
      00037B                       1175 00172$:
      00037Bs03                    1176 	.db	00101$>>8
      00037Cs03                    1177 	.db	00102$>>8
      00037Ds04                    1178 	.db	00104$>>8
      00037Es05                    1179 	.db	00106$>>8
      00037Fs06                    1180 	.db	00107$>>8
      000380s06                    1181 	.db	00108$>>8
      000381s06                    1182 	.db	00109$>>8
      000382s06                    1183 	.db	00110$>>8
      000383s07                    1184 	.db	00111$>>8
                                   1185 ;	main.c:78: case '1': {
      000384                       1186 00101$:
                                   1187 ;	main.c:79: printf("Enter the register bank to select:\n\r");
      000384 74rF8            [12] 1188 	mov	a,#___str_12
      000386 C0 E0            [24] 1189 	push	acc
      000388 74s00            [12] 1190 	mov	a,#(___str_12 >> 8)
      00038A C0 E0            [24] 1191 	push	acc
      00038C 74 80            [12] 1192 	mov	a,#0x80
      00038E C0 E0            [24] 1193 	push	acc
      000390 12r00r00         [24] 1194 	lcall	_printf
      000393 15 81            [12] 1195 	dec	sp
      000395 15 81            [12] 1196 	dec	sp
      000397 15 81            [12] 1197 	dec	sp
                                   1198 ;	main.c:80: uint8_t reg_bank = get_user_buffer_size();
      000399 12r01rBA         [24] 1199 	lcall	_get_user_buffer_size
      00039C AE 82            [24] 1200 	mov	r6, dpl
                                   1201 ;	main.c:81: printf("Enter the address of the Control Register:\n\r");
      00039E C0 06            [24] 1202 	push	ar6
      0003A0 74r1D            [12] 1203 	mov	a,#___str_13
      0003A2 C0 E0            [24] 1204 	push	acc
      0003A4 74s01            [12] 1205 	mov	a,#(___str_13 >> 8)
      0003A6 C0 E0            [24] 1206 	push	acc
      0003A8 74 80            [12] 1207 	mov	a,#0x80
      0003AA C0 E0            [24] 1208 	push	acc
      0003AC 12r00r00         [24] 1209 	lcall	_printf
      0003AF 15 81            [12] 1210 	dec	sp
      0003B1 15 81            [12] 1211 	dec	sp
      0003B3 15 81            [12] 1212 	dec	sp
                                   1213 ;	main.c:82: uint8_t addr = get_user_buffer_size();
      0003B5 12r01rBA         [24] 1214 	lcall	_get_user_buffer_size
      0003B8 AD 82            [24] 1215 	mov	r5, dpl
                                   1216 ;	main.c:83: printf("Enter the data you want to write:\n\r");
      0003BA C0 05            [24] 1217 	push	ar5
      0003BC 74r4A            [12] 1218 	mov	a,#___str_14
      0003BE C0 E0            [24] 1219 	push	acc
      0003C0 74s01            [12] 1220 	mov	a,#(___str_14 >> 8)
      0003C2 C0 E0            [24] 1221 	push	acc
      0003C4 74 80            [12] 1222 	mov	a,#0x80
      0003C6 C0 E0            [24] 1223 	push	acc
      0003C8 12r00r00         [24] 1224 	lcall	_printf
      0003CB 15 81            [12] 1225 	dec	sp
      0003CD 15 81            [12] 1226 	dec	sp
      0003CF 15 81            [12] 1227 	dec	sp
                                   1228 ;	main.c:84: uint8_t data = get_user_buffer_size();
      0003D1 12r01rBA         [24] 1229 	lcall	_get_user_buffer_size
      0003D4 AC 82            [24] 1230 	mov	r4, dpl
      0003D6 D0 05            [24] 1231 	pop	ar5
      0003D8 D0 06            [24] 1232 	pop	ar6
                                   1233 ;	main.c:85: spi_control_write(reg_bank, addr, data);
      0003DA 90r00r00         [24] 1234 	mov	dptr,#_spi_control_write_PARM_2
      0003DD ED               [12] 1235 	mov	a,r5
      0003DE F0               [24] 1236 	movx	@dptr,a
      0003DF 90r00r00         [24] 1237 	mov	dptr,#_spi_control_write_PARM_3
      0003E2 EC               [12] 1238 	mov	a,r4
      0003E3 F0               [24] 1239 	movx	@dptr,a
      0003E4 8E 82            [24] 1240 	mov	dpl, r6
      0003E6 12r00r00         [24] 1241 	lcall	_spi_control_write
                                   1242 ;	main.c:86: break;
      0003E9 02r02r56         [24] 1243 	ljmp	00115$
                                   1244 ;	main.c:88: case '2': {
      0003EC                       1245 00102$:
                                   1246 ;	main.c:89: printf("Enter the number of bytes to write:\n\r");
      0003EC 74r6E            [12] 1247 	mov	a,#___str_15
      0003EE C0 E0            [24] 1248 	push	acc
      0003F0 74s01            [12] 1249 	mov	a,#(___str_15 >> 8)
      0003F2 C0 E0            [24] 1250 	push	acc
      0003F4 74 80            [12] 1251 	mov	a,#0x80
      0003F6 C0 E0            [24] 1252 	push	acc
      0003F8 12r00r00         [24] 1253 	lcall	_printf
      0003FB 15 81            [12] 1254 	dec	sp
      0003FD 15 81            [12] 1255 	dec	sp
      0003FF 15 81            [12] 1256 	dec	sp
                                   1257 ;	main.c:90: int num_bytes = get_user_buffer_size();
      000401 12r01rBA         [24] 1258 	lcall	_get_user_buffer_size
      000404 AE 82            [24] 1259 	mov	r6, dpl
      000406 AF 83            [24] 1260 	mov	r7, dph
                                   1261 ;	main.c:91: printf("Enter the starting address:\n\r");
      000408 C0 07            [24] 1262 	push	ar7
      00040A C0 06            [24] 1263 	push	ar6
      00040C 74r94            [12] 1264 	mov	a,#___str_16
      00040E C0 E0            [24] 1265 	push	acc
      000410 74s01            [12] 1266 	mov	a,#(___str_16 >> 8)
      000412 C0 E0            [24] 1267 	push	acc
      000414 74 80            [12] 1268 	mov	a,#0x80
      000416 C0 E0            [24] 1269 	push	acc
      000418 12r00r00         [24] 1270 	lcall	_printf
      00041B 15 81            [12] 1271 	dec	sp
      00041D 15 81            [12] 1272 	dec	sp
      00041F 15 81            [12] 1273 	dec	sp
                                   1274 ;	main.c:92: uint16_t start_address = get_user_buffer_size();
      000421 12r01rBA         [24] 1275 	lcall	_get_user_buffer_size
      000424 AC 82            [24] 1276 	mov	r4, dpl
      000426 AD 83            [24] 1277 	mov	r5, dph
      000428 D0 06            [24] 1278 	pop	ar6
      00042A D0 07            [24] 1279 	pop	ar7
                                   1280 ;	main.c:94: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      00042C C0 07            [24] 1281 	push	ar7
      00042E C0 06            [24] 1282 	push	ar6
      000430 C0 05            [24] 1283 	push	ar5
      000432 C0 04            [24] 1284 	push	ar4
      000434 C0 06            [24] 1285 	push	ar6
      000436 C0 07            [24] 1286 	push	ar7
      000438 74rB2            [12] 1287 	mov	a,#___str_17
      00043A C0 E0            [24] 1288 	push	acc
      00043C 74s01            [12] 1289 	mov	a,#(___str_17 >> 8)
      00043E C0 E0            [24] 1290 	push	acc
      000440 74 80            [12] 1291 	mov	a,#0x80
      000442 C0 E0            [24] 1292 	push	acc
      000444 12r00r00         [24] 1293 	lcall	_printf
      000447 E5 81            [12] 1294 	mov	a,sp
      000449 24 FB            [12] 1295 	add	a,#0xfb
      00044B F5 81            [12] 1296 	mov	sp,a
      00044D D0 04            [24] 1297 	pop	ar4
      00044F D0 05            [24] 1298 	pop	ar5
      000451 D0 06            [24] 1299 	pop	ar6
      000453 D0 07            [24] 1300 	pop	ar7
                                   1301 ;	main.c:95: for (int i = 0; i < num_bytes; i++) {
      000455 7A 00            [12] 1302 	mov	r2,#0x00
      000457 7B 00            [12] 1303 	mov	r3,#0x00
      000459                       1304 00118$:
      000459 C3               [12] 1305 	clr	c
      00045A EA               [12] 1306 	mov	a,r2
      00045B 9E               [12] 1307 	subb	a,r6
      00045C EB               [12] 1308 	mov	a,r3
      00045D 64 80            [12] 1309 	xrl	a,#0x80
      00045F 8F F0            [24] 1310 	mov	b,r7
      000461 63 F0 80         [24] 1311 	xrl	b,#0x80
      000464 95 F0            [12] 1312 	subb	a,b
      000466 50 63            [24] 1313 	jnc	00103$
                                   1314 ;	main.c:96: printf("Byte %d: ", i);
      000468 C0 04            [24] 1315 	push	ar4
      00046A C0 05            [24] 1316 	push	ar5
      00046C C0 07            [24] 1317 	push	ar7
      00046E C0 06            [24] 1318 	push	ar6
      000470 C0 05            [24] 1319 	push	ar5
      000472 C0 04            [24] 1320 	push	ar4
      000474 C0 03            [24] 1321 	push	ar3
      000476 C0 02            [24] 1322 	push	ar2
      000478 C0 02            [24] 1323 	push	ar2
      00047A C0 03            [24] 1324 	push	ar3
      00047C 74rD5            [12] 1325 	mov	a,#___str_18
      00047E C0 E0            [24] 1326 	push	acc
      000480 74s01            [12] 1327 	mov	a,#(___str_18 >> 8)
      000482 C0 E0            [24] 1328 	push	acc
      000484 74 80            [12] 1329 	mov	a,#0x80
      000486 C0 E0            [24] 1330 	push	acc
      000488 12r00r00         [24] 1331 	lcall	_printf
      00048B E5 81            [12] 1332 	mov	a,sp
      00048D 24 FB            [12] 1333 	add	a,#0xfb
      00048F F5 81            [12] 1334 	mov	sp,a
      000491 D0 02            [24] 1335 	pop	ar2
      000493 D0 03            [24] 1336 	pop	ar3
      000495 D0 04            [24] 1337 	pop	ar4
      000497 D0 05            [24] 1338 	pop	ar5
                                   1339 ;	main.c:97: buffer[i] = get_user_buffer_size();
      000499 EA               [12] 1340 	mov	a,r2
      00049A 24r11            [12] 1341 	add	a, #_main_buffer_40003_83
      00049C F8               [12] 1342 	mov	r0,a
      00049D EB               [12] 1343 	mov	a,r3
      00049E 34s00            [12] 1344 	addc	a, #(_main_buffer_40003_83 >> 8)
      0004A0 F9               [12] 1345 	mov	r1,a
      0004A1 C0 03            [24] 1346 	push	ar3
      0004A3 C0 02            [24] 1347 	push	ar2
      0004A5 C0 01            [24] 1348 	push	ar1
      0004A7 C0 00            [24] 1349 	push	ar0
      0004A9 12r01rBA         [24] 1350 	lcall	_get_user_buffer_size
      0004AC AC 82            [24] 1351 	mov	r4, dpl
      0004AE D0 00            [24] 1352 	pop	ar0
      0004B0 D0 01            [24] 1353 	pop	ar1
      0004B2 D0 02            [24] 1354 	pop	ar2
      0004B4 D0 03            [24] 1355 	pop	ar3
      0004B6 D0 06            [24] 1356 	pop	ar6
      0004B8 D0 07            [24] 1357 	pop	ar7
      0004BA 88 82            [24] 1358 	mov	dpl,r0
      0004BC 89 83            [24] 1359 	mov	dph,r1
      0004BE EC               [12] 1360 	mov	a,r4
      0004BF F0               [24] 1361 	movx	@dptr,a
                                   1362 ;	main.c:95: for (int i = 0; i < num_bytes; i++) {
      0004C0 0A               [12] 1363 	inc	r2
      0004C1 BA 00 01         [24] 1364 	cjne	r2,#0x00,00174$
      0004C4 0B               [12] 1365 	inc	r3
      0004C5                       1366 00174$:
      0004C5 D0 05            [24] 1367 	pop	ar5
      0004C7 D0 04            [24] 1368 	pop	ar4
      0004C9 80 8E            [24] 1369 	sjmp	00118$
      0004CB                       1370 00103$:
                                   1371 ;	main.c:99: spi_buffer_write(num_bytes, start_address, buffer);
      0004CB 90r00r00         [24] 1372 	mov	dptr,#_spi_buffer_write_PARM_2
      0004CE EC               [12] 1373 	mov	a,r4
      0004CF F0               [24] 1374 	movx	@dptr,a
      0004D0 ED               [12] 1375 	mov	a,r5
      0004D1 A3               [24] 1376 	inc	dptr
      0004D2 F0               [24] 1377 	movx	@dptr,a
      0004D3 90r00r00         [24] 1378 	mov	dptr,#_spi_buffer_write_PARM_3
      0004D6 74r11            [12] 1379 	mov	a,#_main_buffer_40003_83
      0004D8 F0               [24] 1380 	movx	@dptr,a
      0004D9 74s00            [12] 1381 	mov	a,#(_main_buffer_40003_83 >> 8)
      0004DB A3               [24] 1382 	inc	dptr
      0004DC F0               [24] 1383 	movx	@dptr,a
      0004DD E4               [12] 1384 	clr	a
      0004DE A3               [24] 1385 	inc	dptr
      0004DF F0               [24] 1386 	movx	@dptr,a
      0004E0 8E 82            [24] 1387 	mov	dpl, r6
      0004E2 8F 83            [24] 1388 	mov	dph, r7
      0004E4 12r00r00         [24] 1389 	lcall	_spi_buffer_write
                                   1390 ;	main.c:100: break;
      0004E7 02r02r56         [24] 1391 	ljmp	00115$
                                   1392 ;	main.c:102: case '3': {
      0004EA                       1393 00104$:
                                   1394 ;	main.c:103: printf("Enter the number of bytes to read:\n\r");
      0004EA 74rDF            [12] 1395 	mov	a,#___str_19
      0004EC C0 E0            [24] 1396 	push	acc
      0004EE 74s01            [12] 1397 	mov	a,#(___str_19 >> 8)
      0004F0 C0 E0            [24] 1398 	push	acc
      0004F2 74 80            [12] 1399 	mov	a,#0x80
      0004F4 C0 E0            [24] 1400 	push	acc
      0004F6 12r00r00         [24] 1401 	lcall	_printf
      0004F9 15 81            [12] 1402 	dec	sp
      0004FB 15 81            [12] 1403 	dec	sp
      0004FD 15 81            [12] 1404 	dec	sp
                                   1405 ;	main.c:104: int num_bytes = get_user_buffer_size();
      0004FF 12r01rBA         [24] 1406 	lcall	_get_user_buffer_size
      000502 AE 82            [24] 1407 	mov	r6, dpl
      000504 AF 83            [24] 1408 	mov	r7, dph
                                   1409 ;	main.c:105: printf("Enter the starting address:\n\r");
      000506 C0 07            [24] 1410 	push	ar7
      000508 C0 06            [24] 1411 	push	ar6
      00050A 74r94            [12] 1412 	mov	a,#___str_16
      00050C C0 E0            [24] 1413 	push	acc
      00050E 74s01            [12] 1414 	mov	a,#(___str_16 >> 8)
      000510 C0 E0            [24] 1415 	push	acc
      000512 74 80            [12] 1416 	mov	a,#0x80
      000514 C0 E0            [24] 1417 	push	acc
      000516 12r00r00         [24] 1418 	lcall	_printf
      000519 15 81            [12] 1419 	dec	sp
      00051B 15 81            [12] 1420 	dec	sp
      00051D 15 81            [12] 1421 	dec	sp
                                   1422 ;	main.c:106: uint16_t start_address = get_user_buffer_size();
      00051F 12r01rBA         [24] 1423 	lcall	_get_user_buffer_size
      000522 AC 82            [24] 1424 	mov	r4, dpl
      000524 AD 83            [24] 1425 	mov	r5, dph
      000526 D0 06            [24] 1426 	pop	ar6
      000528 D0 07            [24] 1427 	pop	ar7
                                   1428 ;	main.c:108: spi_buffer_read(num_bytes, start_address, buffer);
      00052A 90r00r00         [24] 1429 	mov	dptr,#_spi_buffer_read_PARM_2
      00052D EC               [12] 1430 	mov	a,r4
      00052E F0               [24] 1431 	movx	@dptr,a
      00052F ED               [12] 1432 	mov	a,r5
      000530 A3               [24] 1433 	inc	dptr
      000531 F0               [24] 1434 	movx	@dptr,a
      000532 90r00r00         [24] 1435 	mov	dptr,#_spi_buffer_read_PARM_3
      000535 74r11            [12] 1436 	mov	a,#_main_buffer_40003_88
      000537 F0               [24] 1437 	movx	@dptr,a
      000538 74s01            [12] 1438 	mov	a,#(_main_buffer_40003_88 >> 8)
      00053A A3               [24] 1439 	inc	dptr
      00053B F0               [24] 1440 	movx	@dptr,a
      00053C E4               [12] 1441 	clr	a
      00053D A3               [24] 1442 	inc	dptr
      00053E F0               [24] 1443 	movx	@dptr,a
      00053F 8E 82            [24] 1444 	mov	dpl, r6
      000541 8F 83            [24] 1445 	mov	dph, r7
      000543 C0 07            [24] 1446 	push	ar7
      000545 C0 06            [24] 1447 	push	ar6
      000547 12r00r00         [24] 1448 	lcall	_spi_buffer_read
                                   1449 ;	main.c:109: printf("Read Data:\n\r");
      00054A 74r04            [12] 1450 	mov	a,#___str_20
      00054C C0 E0            [24] 1451 	push	acc
      00054E 74s02            [12] 1452 	mov	a,#(___str_20 >> 8)
      000550 C0 E0            [24] 1453 	push	acc
      000552 74 80            [12] 1454 	mov	a,#0x80
      000554 C0 E0            [24] 1455 	push	acc
      000556 12r00r00         [24] 1456 	lcall	_printf
      000559 15 81            [12] 1457 	dec	sp
      00055B 15 81            [12] 1458 	dec	sp
      00055D 15 81            [12] 1459 	dec	sp
      00055F D0 06            [24] 1460 	pop	ar6
      000561 D0 07            [24] 1461 	pop	ar7
                                   1462 ;	main.c:110: for (int i = 0; i < num_bytes; i++) {
      000563 7C 00            [12] 1463 	mov	r4,#0x00
      000565 7D 00            [12] 1464 	mov	r5,#0x00
      000567                       1465 00121$:
      000567 C3               [12] 1466 	clr	c
      000568 EC               [12] 1467 	mov	a,r4
      000569 9E               [12] 1468 	subb	a,r6
      00056A ED               [12] 1469 	mov	a,r5
      00056B 64 80            [12] 1470 	xrl	a,#0x80
      00056D 8F F0            [24] 1471 	mov	b,r7
      00056F 63 F0 80         [24] 1472 	xrl	b,#0x80
      000572 95 F0            [12] 1473 	subb	a,b
      000574 40 03            [24] 1474 	jc	00175$
      000576 02r02r56         [24] 1475 	ljmp	00115$
      000579                       1476 00175$:
                                   1477 ;	main.c:111: printf("Byte %d: 0x%02X\n\r", i, buffer[i]);
      000579 EC               [12] 1478 	mov	a,r4
      00057A 24r11            [12] 1479 	add	a, #_main_buffer_40003_88
      00057C F5 82            [12] 1480 	mov	dpl,a
      00057E ED               [12] 1481 	mov	a,r5
      00057F 34s01            [12] 1482 	addc	a, #(_main_buffer_40003_88 >> 8)
      000581 F5 83            [12] 1483 	mov	dph,a
      000583 E0               [24] 1484 	movx	a,@dptr
      000584 FB               [12] 1485 	mov	r3,a
      000585 7A 00            [12] 1486 	mov	r2,#0x00
      000587 C0 07            [24] 1487 	push	ar7
      000589 C0 06            [24] 1488 	push	ar6
      00058B C0 05            [24] 1489 	push	ar5
      00058D C0 04            [24] 1490 	push	ar4
      00058F C0 03            [24] 1491 	push	ar3
      000591 C0 02            [24] 1492 	push	ar2
      000593 C0 04            [24] 1493 	push	ar4
      000595 C0 05            [24] 1494 	push	ar5
      000597 74r11            [12] 1495 	mov	a,#___str_21
      000599 C0 E0            [24] 1496 	push	acc
      00059B 74s02            [12] 1497 	mov	a,#(___str_21 >> 8)
      00059D C0 E0            [24] 1498 	push	acc
      00059F 74 80            [12] 1499 	mov	a,#0x80
      0005A1 C0 E0            [24] 1500 	push	acc
      0005A3 12r00r00         [24] 1501 	lcall	_printf
      0005A6 E5 81            [12] 1502 	mov	a,sp
      0005A8 24 F9            [12] 1503 	add	a,#0xf9
      0005AA F5 81            [12] 1504 	mov	sp,a
      0005AC D0 04            [24] 1505 	pop	ar4
      0005AE D0 05            [24] 1506 	pop	ar5
      0005B0 D0 06            [24] 1507 	pop	ar6
      0005B2 D0 07            [24] 1508 	pop	ar7
                                   1509 ;	main.c:110: for (int i = 0; i < num_bytes; i++) {
      0005B4 0C               [12] 1510 	inc	r4
                                   1511 ;	main.c:115: case '4': {
      0005B5 BC 00 AF         [24] 1512 	cjne	r4,#0x00,00121$
      0005B8 0D               [12] 1513 	inc	r5
      0005B9 80 AC            [24] 1514 	sjmp	00121$
      0005BB                       1515 00106$:
                                   1516 ;	main.c:116: printf("Enter the MAC register bank to select:\n\r");
      0005BB 74r23            [12] 1517 	mov	a,#___str_22
      0005BD C0 E0            [24] 1518 	push	acc
      0005BF 74s02            [12] 1519 	mov	a,#(___str_22 >> 8)
      0005C1 C0 E0            [24] 1520 	push	acc
      0005C3 74 80            [12] 1521 	mov	a,#0x80
      0005C5 C0 E0            [24] 1522 	push	acc
      0005C7 12r00r00         [24] 1523 	lcall	_printf
      0005CA 15 81            [12] 1524 	dec	sp
      0005CC 15 81            [12] 1525 	dec	sp
      0005CE 15 81            [12] 1526 	dec	sp
                                   1527 ;	main.c:117: uint8_t reg_bank = get_user_buffer_size();
      0005D0 12r01rBA         [24] 1528 	lcall	_get_user_buffer_size
      0005D3 AE 82            [24] 1529 	mov	r6, dpl
                                   1530 ;	main.c:118: printf("Enter the address of the MAC Register:\n\r");
      0005D5 C0 06            [24] 1531 	push	ar6
      0005D7 74r4C            [12] 1532 	mov	a,#___str_23
      0005D9 C0 E0            [24] 1533 	push	acc
      0005DB 74s02            [12] 1534 	mov	a,#(___str_23 >> 8)
      0005DD C0 E0            [24] 1535 	push	acc
      0005DF 74 80            [12] 1536 	mov	a,#0x80
      0005E1 C0 E0            [24] 1537 	push	acc
      0005E3 12r00r00         [24] 1538 	lcall	_printf
      0005E6 15 81            [12] 1539 	dec	sp
      0005E8 15 81            [12] 1540 	dec	sp
      0005EA 15 81            [12] 1541 	dec	sp
                                   1542 ;	main.c:119: uint8_t addr = get_user_buffer_size();
      0005EC 12r01rBA         [24] 1543 	lcall	_get_user_buffer_size
      0005EF AD 82            [24] 1544 	mov	r5, dpl
      0005F1 D0 06            [24] 1545 	pop	ar6
                                   1546 ;	main.c:120: uint8_t data = mac_spi_read(addr, reg_bank);
      0005F3 90r00r00         [24] 1547 	mov	dptr,#_mac_spi_read_PARM_2
      0005F6 EE               [12] 1548 	mov	a,r6
      0005F7 F0               [24] 1549 	movx	@dptr,a
      0005F8 8D 82            [24] 1550 	mov	dpl, r5
      0005FA 12r00r00         [24] 1551 	lcall	_mac_spi_read
      0005FD AF 82            [24] 1552 	mov	r7, dpl
                                   1553 ;	main.c:121: printf("MAC Register Data: 0x%02X\n\r", data);
      0005FF 7E 00            [12] 1554 	mov	r6,#0x00
      000601 C0 07            [24] 1555 	push	ar7
      000603 C0 06            [24] 1556 	push	ar6
      000605 74r75            [12] 1557 	mov	a,#___str_24
      000607 C0 E0            [24] 1558 	push	acc
      000609 74s02            [12] 1559 	mov	a,#(___str_24 >> 8)
      00060B C0 E0            [24] 1560 	push	acc
      00060D 74 80            [12] 1561 	mov	a,#0x80
      00060F C0 E0            [24] 1562 	push	acc
      000611 12r00r00         [24] 1563 	lcall	_printf
      000614 E5 81            [12] 1564 	mov	a,sp
      000616 24 FB            [12] 1565 	add	a,#0xfb
      000618 F5 81            [12] 1566 	mov	sp,a
                                   1567 ;	main.c:122: break;
      00061A 02r02r56         [24] 1568 	ljmp	00115$
                                   1569 ;	main.c:124: case '5': {
      00061D                       1570 00107$:
                                   1571 ;	main.c:125: printf("Enter the PHY register address:\n\r");
      00061D 74r91            [12] 1572 	mov	a,#___str_25
      00061F C0 E0            [24] 1573 	push	acc
      000621 74s02            [12] 1574 	mov	a,#(___str_25 >> 8)
      000623 C0 E0            [24] 1575 	push	acc
      000625 74 80            [12] 1576 	mov	a,#0x80
      000627 C0 E0            [24] 1577 	push	acc
      000629 12r00r00         [24] 1578 	lcall	_printf
      00062C 15 81            [12] 1579 	dec	sp
      00062E 15 81            [12] 1580 	dec	sp
      000630 15 81            [12] 1581 	dec	sp
                                   1582 ;	main.c:126: uint8_t addr = get_user_buffer_size();
      000632 12r01rBA         [24] 1583 	lcall	_get_user_buffer_size
      000635 AE 82            [24] 1584 	mov	r6, dpl
                                   1585 ;	main.c:127: printf("Enter the 16-bit data to write:\n\r");
      000637 C0 06            [24] 1586 	push	ar6
      000639 74rB3            [12] 1587 	mov	a,#___str_26
      00063B C0 E0            [24] 1588 	push	acc
      00063D 74s02            [12] 1589 	mov	a,#(___str_26 >> 8)
      00063F C0 E0            [24] 1590 	push	acc
      000641 74 80            [12] 1591 	mov	a,#0x80
      000643 C0 E0            [24] 1592 	push	acc
      000645 12r00r00         [24] 1593 	lcall	_printf
      000648 15 81            [12] 1594 	dec	sp
      00064A 15 81            [12] 1595 	dec	sp
      00064C 15 81            [12] 1596 	dec	sp
                                   1597 ;	main.c:128: uint16_t data = get_user_buffer_size();
      00064E 12r01rBA         [24] 1598 	lcall	_get_user_buffer_size
      000651 AD 82            [24] 1599 	mov	r5, dpl
      000653 AF 83            [24] 1600 	mov	r7, dph
      000655 D0 06            [24] 1601 	pop	ar6
                                   1602 ;	main.c:129: phy_spi_write(addr, data);
      000657 90r00r00         [24] 1603 	mov	dptr,#_phy_spi_write_PARM_2
      00065A ED               [12] 1604 	mov	a,r5
      00065B F0               [24] 1605 	movx	@dptr,a
      00065C EF               [12] 1606 	mov	a,r7
      00065D A3               [24] 1607 	inc	dptr
      00065E F0               [24] 1608 	movx	@dptr,a
      00065F 8E 82            [24] 1609 	mov	dpl, r6
      000661 C0 07            [24] 1610 	push	ar7
      000663 C0 05            [24] 1611 	push	ar5
      000665 12r00r00         [24] 1612 	lcall	_phy_spi_write
      000668 D0 05            [24] 1613 	pop	ar5
      00066A D0 07            [24] 1614 	pop	ar7
                                   1615 ;	main.c:130: printf("PHY Write Data: 0x%04X\n\r", data);
      00066C C0 05            [24] 1616 	push	ar5
      00066E C0 07            [24] 1617 	push	ar7
      000670 74rD5            [12] 1618 	mov	a,#___str_27
      000672 C0 E0            [24] 1619 	push	acc
      000674 74s02            [12] 1620 	mov	a,#(___str_27 >> 8)
      000676 C0 E0            [24] 1621 	push	acc
      000678 74 80            [12] 1622 	mov	a,#0x80
      00067A C0 E0            [24] 1623 	push	acc
      00067C 12r00r00         [24] 1624 	lcall	_printf
      00067F E5 81            [12] 1625 	mov	a,sp
      000681 24 FB            [12] 1626 	add	a,#0xfb
      000683 F5 81            [12] 1627 	mov	sp,a
                                   1628 ;	main.c:131: break;
      000685 02r02r56         [24] 1629 	ljmp	00115$
                                   1630 ;	main.c:133: case '6': {
      000688                       1631 00108$:
                                   1632 ;	main.c:134: printf("Enter the PHY register address to read:\n\r");
      000688 74rEE            [12] 1633 	mov	a,#___str_28
      00068A C0 E0            [24] 1634 	push	acc
      00068C 74s02            [12] 1635 	mov	a,#(___str_28 >> 8)
      00068E C0 E0            [24] 1636 	push	acc
      000690 74 80            [12] 1637 	mov	a,#0x80
      000692 C0 E0            [24] 1638 	push	acc
      000694 12r00r00         [24] 1639 	lcall	_printf
      000697 15 81            [12] 1640 	dec	sp
      000699 15 81            [12] 1641 	dec	sp
      00069B 15 81            [12] 1642 	dec	sp
                                   1643 ;	main.c:135: uint8_t addr = get_user_buffer_size();
      00069D 12r01rBA         [24] 1644 	lcall	_get_user_buffer_size
                                   1645 ;	main.c:136: uint16_t data = phy_spi_read(addr);
      0006A0 12r00r00         [24] 1646 	lcall	_phy_spi_read
      0006A3 AE 82            [24] 1647 	mov	r6, dpl
      0006A5 AF 83            [24] 1648 	mov	r7, dph
                                   1649 ;	main.c:137: printf("PHY Read Data: 0x%04X\n\r", data);
      0006A7 C0 06            [24] 1650 	push	ar6
      0006A9 C0 07            [24] 1651 	push	ar7
      0006AB 74r18            [12] 1652 	mov	a,#___str_29
      0006AD C0 E0            [24] 1653 	push	acc
      0006AF 74s03            [12] 1654 	mov	a,#(___str_29 >> 8)
      0006B1 C0 E0            [24] 1655 	push	acc
      0006B3 74 80            [12] 1656 	mov	a,#0x80
      0006B5 C0 E0            [24] 1657 	push	acc
      0006B7 12r00r00         [24] 1658 	lcall	_printf
      0006BA E5 81            [12] 1659 	mov	a,sp
      0006BC 24 FB            [12] 1660 	add	a,#0xfb
      0006BE F5 81            [12] 1661 	mov	sp,a
                                   1662 ;	main.c:138: break;
      0006C0 02r02r56         [24] 1663 	ljmp	00115$
                                   1664 ;	main.c:140: case '7': {
      0006C3                       1665 00109$:
                                   1666 ;	main.c:141: printf("Resetting ENC28J60...\n\r");
      0006C3 74r30            [12] 1667 	mov	a,#___str_30
      0006C5 C0 E0            [24] 1668 	push	acc
      0006C7 74s03            [12] 1669 	mov	a,#(___str_30 >> 8)
      0006C9 C0 E0            [24] 1670 	push	acc
      0006CB 74 80            [12] 1671 	mov	a,#0x80
      0006CD C0 E0            [24] 1672 	push	acc
      0006CF 12r00r00         [24] 1673 	lcall	_printf
      0006D2 15 81            [12] 1674 	dec	sp
      0006D4 15 81            [12] 1675 	dec	sp
      0006D6 15 81            [12] 1676 	dec	sp
                                   1677 ;	main.c:142: enc_reset();
      0006D8 12r00r00         [24] 1678 	lcall	_enc_reset
                                   1679 ;	main.c:143: break;
      0006DB 02r02r56         [24] 1680 	ljmp	00115$
                                   1681 ;	main.c:145: case '8': {
      0006DE                       1682 00110$:
                                   1683 ;	main.c:146: printf("Enter the ETH register address to read:\n\r");
      0006DE 74r48            [12] 1684 	mov	a,#___str_31
      0006E0 C0 E0            [24] 1685 	push	acc
      0006E2 74s03            [12] 1686 	mov	a,#(___str_31 >> 8)
      0006E4 C0 E0            [24] 1687 	push	acc
      0006E6 74 80            [12] 1688 	mov	a,#0x80
      0006E8 C0 E0            [24] 1689 	push	acc
      0006EA 12r00r00         [24] 1690 	lcall	_printf
      0006ED 15 81            [12] 1691 	dec	sp
      0006EF 15 81            [12] 1692 	dec	sp
      0006F1 15 81            [12] 1693 	dec	sp
                                   1694 ;	main.c:147: uint8_t addr = get_user_buffer_size();
      0006F3 12r01rBA         [24] 1695 	lcall	_get_user_buffer_size
      0006F6 AE 82            [24] 1696 	mov	r6, dpl
                                   1697 ;	main.c:148: printf("Enter the bank (0 or 1):\n\r");
      0006F8 C0 06            [24] 1698 	push	ar6
      0006FA 74r72            [12] 1699 	mov	a,#___str_32
      0006FC C0 E0            [24] 1700 	push	acc
      0006FE 74s03            [12] 1701 	mov	a,#(___str_32 >> 8)
      000700 C0 E0            [24] 1702 	push	acc
      000702 74 80            [12] 1703 	mov	a,#0x80
      000704 C0 E0            [24] 1704 	push	acc
      000706 12r00r00         [24] 1705 	lcall	_printf
      000709 15 81            [12] 1706 	dec	sp
      00070B 15 81            [12] 1707 	dec	sp
      00070D 15 81            [12] 1708 	dec	sp
                                   1709 ;	main.c:149: uint8_t bank = get_user_buffer_size();
      00070F 12r01rBA         [24] 1710 	lcall	_get_user_buffer_size
      000712 AD 82            [24] 1711 	mov	r5, dpl
      000714 D0 06            [24] 1712 	pop	ar6
      000716 90r00r00         [24] 1713 	mov	dptr,#_eth_spi_read_PARM_2
      000719 ED               [12] 1714 	mov	a,r5
      00071A F0               [24] 1715 	movx	@dptr,a
                                   1716 ;	main.c:150: uint8_t data = eth_spi_read(addr, bank);
      00071B 8E 82            [24] 1717 	mov	dpl, r6
      00071D 12r00r00         [24] 1718 	lcall	_eth_spi_read
      000720 AF 82            [24] 1719 	mov	r7, dpl
                                   1720 ;	main.c:151: printf("ETH Register Data: 0x%02X\n\r", data);
      000722 7E 00            [12] 1721 	mov	r6,#0x00
      000724 C0 07            [24] 1722 	push	ar7
      000726 C0 06            [24] 1723 	push	ar6
      000728 74r8D            [12] 1724 	mov	a,#___str_33
      00072A C0 E0            [24] 1725 	push	acc
      00072C 74s03            [12] 1726 	mov	a,#(___str_33 >> 8)
      00072E C0 E0            [24] 1727 	push	acc
      000730 74 80            [12] 1728 	mov	a,#0x80
      000732 C0 E0            [24] 1729 	push	acc
      000734 12r00r00         [24] 1730 	lcall	_printf
      000737 E5 81            [12] 1731 	mov	a,sp
      000739 24 FB            [12] 1732 	add	a,#0xfb
      00073B F5 81            [12] 1733 	mov	sp,a
                                   1734 ;	main.c:152: break;
      00073D 02r02r56         [24] 1735 	ljmp	00115$
                                   1736 ;	main.c:154: case '9': {
      000740                       1737 00111$:
                                   1738 ;	main.c:155: printf("\n\rChoose an action: \n\r");
      000740 74r1C            [12] 1739 	mov	a,#___str_2
      000742 C0 E0            [24] 1740 	push	acc
      000744 74s00            [12] 1741 	mov	a,#(___str_2 >> 8)
      000746 C0 E0            [24] 1742 	push	acc
      000748 74 80            [12] 1743 	mov	a,#0x80
      00074A C0 E0            [24] 1744 	push	acc
      00074C 12r00r00         [24] 1745 	lcall	_printf
      00074F 15 81            [12] 1746 	dec	sp
      000751 15 81            [12] 1747 	dec	sp
      000753 15 81            [12] 1748 	dec	sp
                                   1749 ;	main.c:156: printf("1 --> Control Write\n\r");
      000755 74r33            [12] 1750 	mov	a,#___str_3
      000757 C0 E0            [24] 1751 	push	acc
      000759 74s00            [12] 1752 	mov	a,#(___str_3 >> 8)
      00075B C0 E0            [24] 1753 	push	acc
      00075D 74 80            [12] 1754 	mov	a,#0x80
      00075F C0 E0            [24] 1755 	push	acc
      000761 12r00r00         [24] 1756 	lcall	_printf
      000764 15 81            [12] 1757 	dec	sp
      000766 15 81            [12] 1758 	dec	sp
      000768 15 81            [12] 1759 	dec	sp
                                   1760 ;	main.c:157: printf("2 --> Buffer Write\n\r");
      00076A 74r49            [12] 1761 	mov	a,#___str_4
      00076C C0 E0            [24] 1762 	push	acc
      00076E 74s00            [12] 1763 	mov	a,#(___str_4 >> 8)
      000770 C0 E0            [24] 1764 	push	acc
      000772 74 80            [12] 1765 	mov	a,#0x80
      000774 C0 E0            [24] 1766 	push	acc
      000776 12r00r00         [24] 1767 	lcall	_printf
      000779 15 81            [12] 1768 	dec	sp
      00077B 15 81            [12] 1769 	dec	sp
      00077D 15 81            [12] 1770 	dec	sp
                                   1771 ;	main.c:158: printf("3 --> Buffer Read\n\r");
      00077F 74r5E            [12] 1772 	mov	a,#___str_5
      000781 C0 E0            [24] 1773 	push	acc
      000783 74s00            [12] 1774 	mov	a,#(___str_5 >> 8)
      000785 C0 E0            [24] 1775 	push	acc
      000787 74 80            [12] 1776 	mov	a,#0x80
      000789 C0 E0            [24] 1777 	push	acc
      00078B 12r00r00         [24] 1778 	lcall	_printf
      00078E 15 81            [12] 1779 	dec	sp
      000790 15 81            [12] 1780 	dec	sp
      000792 15 81            [12] 1781 	dec	sp
                                   1782 ;	main.c:159: printf("4 --> MAC Register Read\n\r");
      000794 74r72            [12] 1783 	mov	a,#___str_6
      000796 C0 E0            [24] 1784 	push	acc
      000798 74s00            [12] 1785 	mov	a,#(___str_6 >> 8)
      00079A C0 E0            [24] 1786 	push	acc
      00079C 74 80            [12] 1787 	mov	a,#0x80
      00079E C0 E0            [24] 1788 	push	acc
      0007A0 12r00r00         [24] 1789 	lcall	_printf
      0007A3 15 81            [12] 1790 	dec	sp
      0007A5 15 81            [12] 1791 	dec	sp
      0007A7 15 81            [12] 1792 	dec	sp
                                   1793 ;	main.c:160: printf("5 --> PHY SPI Write\n\r");
      0007A9 74r8C            [12] 1794 	mov	a,#___str_7
      0007AB C0 E0            [24] 1795 	push	acc
      0007AD 74s00            [12] 1796 	mov	a,#(___str_7 >> 8)
      0007AF C0 E0            [24] 1797 	push	acc
      0007B1 74 80            [12] 1798 	mov	a,#0x80
      0007B3 C0 E0            [24] 1799 	push	acc
      0007B5 12r00r00         [24] 1800 	lcall	_printf
      0007B8 15 81            [12] 1801 	dec	sp
      0007BA 15 81            [12] 1802 	dec	sp
      0007BC 15 81            [12] 1803 	dec	sp
                                   1804 ;	main.c:161: printf("6 --> PHY SPI Read\n\r");
      0007BE 74rA2            [12] 1805 	mov	a,#___str_8
      0007C0 C0 E0            [24] 1806 	push	acc
      0007C2 74s00            [12] 1807 	mov	a,#(___str_8 >> 8)
      0007C4 C0 E0            [24] 1808 	push	acc
      0007C6 74 80            [12] 1809 	mov	a,#0x80
      0007C8 C0 E0            [24] 1810 	push	acc
      0007CA 12r00r00         [24] 1811 	lcall	_printf
      0007CD 15 81            [12] 1812 	dec	sp
      0007CF 15 81            [12] 1813 	dec	sp
      0007D1 15 81            [12] 1814 	dec	sp
                                   1815 ;	main.c:162: printf("7 --> ENC Reset\n\r");
      0007D3 74rB7            [12] 1816 	mov	a,#___str_9
      0007D5 C0 E0            [24] 1817 	push	acc
      0007D7 74s00            [12] 1818 	mov	a,#(___str_9 >> 8)
      0007D9 C0 E0            [24] 1819 	push	acc
      0007DB 74 80            [12] 1820 	mov	a,#0x80
      0007DD C0 E0            [24] 1821 	push	acc
      0007DF 12r00r00         [24] 1822 	lcall	_printf
      0007E2 15 81            [12] 1823 	dec	sp
      0007E4 15 81            [12] 1824 	dec	sp
      0007E6 15 81            [12] 1825 	dec	sp
                                   1826 ;	main.c:163: printf("8 --> Read ETH Register\n\r");
      0007E8 74rC9            [12] 1827 	mov	a,#___str_10
      0007EA C0 E0            [24] 1828 	push	acc
      0007EC 74s00            [12] 1829 	mov	a,#(___str_10 >> 8)
      0007EE C0 E0            [24] 1830 	push	acc
      0007F0 74 80            [12] 1831 	mov	a,#0x80
      0007F2 C0 E0            [24] 1832 	push	acc
      0007F4 12r00r00         [24] 1833 	lcall	_printf
      0007F7 15 81            [12] 1834 	dec	sp
      0007F9 15 81            [12] 1835 	dec	sp
      0007FB 15 81            [12] 1836 	dec	sp
                                   1837 ;	main.c:164: break;
      0007FD 02r02r56         [24] 1838 	ljmp	00115$
                                   1839 ;	main.c:166: default: {
      000800                       1840 00112$:
                                   1841 ;	main.c:167: printf("Invalid option. Please select a valid action.\n\r");
      000800 74rA9            [12] 1842 	mov	a,#___str_34
      000802 C0 E0            [24] 1843 	push	acc
      000804 74s03            [12] 1844 	mov	a,#(___str_34 >> 8)
      000806 C0 E0            [24] 1845 	push	acc
      000808 74 80            [12] 1846 	mov	a,#0x80
      00080A C0 E0            [24] 1847 	push	acc
      00080C 12r00r00         [24] 1848 	lcall	_printf
      00080F 15 81            [12] 1849 	dec	sp
      000811 15 81            [12] 1850 	dec	sp
      000813 15 81            [12] 1851 	dec	sp
                                   1852 ;	main.c:170: }
                                   1853 ;	main.c:172: }
      000815 02r02r56         [24] 1854 	ljmp	00115$
                                   1855 	.area CSEG    (CODE)
                                   1856 	.area CONST   (CODE)
                                   1857 	.area CONST   (CODE)
      000000                       1858 ___str_0:
      000000 0A                    1859 	.db 0x0a
      000001 0D                    1860 	.db 0x0d
      000002 00                    1861 	.db 0x00
                                   1862 	.area CSEG    (CODE)
                                   1863 	.area CONST   (CODE)
      000003                       1864 ___str_1:
      000003 53 50 49 20 4F 70 65  1865 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    1866 	.db 0x0a
      00001A 0D                    1867 	.db 0x0d
      00001B 00                    1868 	.db 0x00
                                   1869 	.area CSEG    (CODE)
                                   1870 	.area CONST   (CODE)
      00001C                       1871 ___str_2:
      00001C 0A                    1872 	.db 0x0a
      00001D 0D                    1873 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  1874 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    1875 	.db 0x0a
      000031 0D                    1876 	.db 0x0d
      000032 00                    1877 	.db 0x00
                                   1878 	.area CSEG    (CODE)
                                   1879 	.area CONST   (CODE)
      000033                       1880 ___str_3:
      000033 31 20 2D 2D 3E 20 43  1881 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    1882 	.db 0x0a
      000047 0D                    1883 	.db 0x0d
      000048 00                    1884 	.db 0x00
                                   1885 	.area CSEG    (CODE)
                                   1886 	.area CONST   (CODE)
      000049                       1887 ___str_4:
      000049 32 20 2D 2D 3E 20 42  1888 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    1889 	.db 0x0a
      00005C 0D                    1890 	.db 0x0d
      00005D 00                    1891 	.db 0x00
                                   1892 	.area CSEG    (CODE)
                                   1893 	.area CONST   (CODE)
      00005E                       1894 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  1895 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    1896 	.db 0x0a
      000070 0D                    1897 	.db 0x0d
      000071 00                    1898 	.db 0x00
                                   1899 	.area CSEG    (CODE)
                                   1900 	.area CONST   (CODE)
      000072                       1901 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  1902 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    1903 	.db 0x0a
      00008A 0D                    1904 	.db 0x0d
      00008B 00                    1905 	.db 0x00
                                   1906 	.area CSEG    (CODE)
                                   1907 	.area CONST   (CODE)
      00008C                       1908 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  1909 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    1910 	.db 0x0a
      0000A0 0D                    1911 	.db 0x0d
      0000A1 00                    1912 	.db 0x00
                                   1913 	.area CSEG    (CODE)
                                   1914 	.area CONST   (CODE)
      0000A2                       1915 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  1916 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    1917 	.db 0x0a
      0000B5 0D                    1918 	.db 0x0d
      0000B6 00                    1919 	.db 0x00
                                   1920 	.area CSEG    (CODE)
                                   1921 	.area CONST   (CODE)
      0000B7                       1922 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  1923 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    1924 	.db 0x0a
      0000C7 0D                    1925 	.db 0x0d
      0000C8 00                    1926 	.db 0x00
                                   1927 	.area CSEG    (CODE)
                                   1928 	.area CONST   (CODE)
      0000C9                       1929 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  1930 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    1931 	.db 0x0a
      0000E1 0D                    1932 	.db 0x0d
      0000E2 00                    1933 	.db 0x00
                                   1934 	.area CSEG    (CODE)
                                   1935 	.area CONST   (CODE)
      0000E3                       1936 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  1937 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    1938 	.db 0x0a
      0000F6 0D                    1939 	.db 0x0d
      0000F7 00                    1940 	.db 0x00
                                   1941 	.area CSEG    (CODE)
                                   1942 	.area CONST   (CODE)
      0000F8                       1943 ___str_12:
      0000F8 45 6E 74 65 72 20 74  1944 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      00011A 0A                    1945 	.db 0x0a
      00011B 0D                    1946 	.db 0x0d
      00011C 00                    1947 	.db 0x00
                                   1948 	.area CSEG    (CODE)
                                   1949 	.area CONST   (CODE)
      00011D                       1950 ___str_13:
      00011D 45 6E 74 65 72 20 74  1951 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      000147 0A                    1952 	.db 0x0a
      000148 0D                    1953 	.db 0x0d
      000149 00                    1954 	.db 0x00
                                   1955 	.area CSEG    (CODE)
                                   1956 	.area CONST   (CODE)
      00014A                       1957 ___str_14:
      00014A 45 6E 74 65 72 20 74  1958 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      00016B 0A                    1959 	.db 0x0a
      00016C 0D                    1960 	.db 0x0d
      00016D 00                    1961 	.db 0x00
                                   1962 	.area CSEG    (CODE)
                                   1963 	.area CONST   (CODE)
      00016E                       1964 ___str_15:
      00016E 45 6E 74 65 72 20 74  1965 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      000191 0A                    1966 	.db 0x0a
      000192 0D                    1967 	.db 0x0d
      000193 00                    1968 	.db 0x00
                                   1969 	.area CSEG    (CODE)
                                   1970 	.area CONST   (CODE)
      000194                       1971 ___str_16:
      000194 45 6E 74 65 72 20 74  1972 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      0001AF 0A                    1973 	.db 0x0a
      0001B0 0D                    1974 	.db 0x0d
      0001B1 00                    1975 	.db 0x00
                                   1976 	.area CSEG    (CODE)
                                   1977 	.area CONST   (CODE)
      0001B2                       1978 ___str_17:
      0001B2 45 6E 74 65 72 20 25  1979 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      0001D2 0A                    1980 	.db 0x0a
      0001D3 0D                    1981 	.db 0x0d
      0001D4 00                    1982 	.db 0x00
                                   1983 	.area CSEG    (CODE)
                                   1984 	.area CONST   (CODE)
      0001D5                       1985 ___str_18:
      0001D5 42 79 74 65 20 25 64  1986 	.ascii "Byte %d: "
             3A 20
      0001DE 00                    1987 	.db 0x00
                                   1988 	.area CSEG    (CODE)
                                   1989 	.area CONST   (CODE)
      0001DF                       1990 ___str_19:
      0001DF 45 6E 74 65 72 20 74  1991 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      000201 0A                    1992 	.db 0x0a
      000202 0D                    1993 	.db 0x0d
      000203 00                    1994 	.db 0x00
                                   1995 	.area CSEG    (CODE)
                                   1996 	.area CONST   (CODE)
      000204                       1997 ___str_20:
      000204 52 65 61 64 20 44 61  1998 	.ascii "Read Data:"
             74 61 3A
      00020E 0A                    1999 	.db 0x0a
      00020F 0D                    2000 	.db 0x0d
      000210 00                    2001 	.db 0x00
                                   2002 	.area CSEG    (CODE)
                                   2003 	.area CONST   (CODE)
      000211                       2004 ___str_21:
      000211 42 79 74 65 20 25 64  2005 	.ascii "Byte %d: 0x%02X"
             3A 20 30 78 25 30 32
             58
      000220 0A                    2006 	.db 0x0a
      000221 0D                    2007 	.db 0x0d
      000222 00                    2008 	.db 0x00
                                   2009 	.area CSEG    (CODE)
                                   2010 	.area CONST   (CODE)
      000223                       2011 ___str_22:
      000223 45 6E 74 65 72 20 74  2012 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      000249 0A                    2013 	.db 0x0a
      00024A 0D                    2014 	.db 0x0d
      00024B 00                    2015 	.db 0x00
                                   2016 	.area CSEG    (CODE)
                                   2017 	.area CONST   (CODE)
      00024C                       2018 ___str_23:
      00024C 45 6E 74 65 72 20 74  2019 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      000272 0A                    2020 	.db 0x0a
      000273 0D                    2021 	.db 0x0d
      000274 00                    2022 	.db 0x00
                                   2023 	.area CSEG    (CODE)
                                   2024 	.area CONST   (CODE)
      000275                       2025 ___str_24:
      000275 4D 41 43 20 52 65 67  2026 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      00028E 0A                    2027 	.db 0x0a
      00028F 0D                    2028 	.db 0x0d
      000290 00                    2029 	.db 0x00
                                   2030 	.area CSEG    (CODE)
                                   2031 	.area CONST   (CODE)
      000291                       2032 ___str_25:
      000291 45 6E 74 65 72 20 74  2033 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      0002B0 0A                    2034 	.db 0x0a
      0002B1 0D                    2035 	.db 0x0d
      0002B2 00                    2036 	.db 0x00
                                   2037 	.area CSEG    (CODE)
                                   2038 	.area CONST   (CODE)
      0002B3                       2039 ___str_26:
      0002B3 45 6E 74 65 72 20 74  2040 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      0002D2 0A                    2041 	.db 0x0a
      0002D3 0D                    2042 	.db 0x0d
      0002D4 00                    2043 	.db 0x00
                                   2044 	.area CSEG    (CODE)
                                   2045 	.area CONST   (CODE)
      0002D5                       2046 ___str_27:
      0002D5 50 48 59 20 57 72 69  2047 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      0002EB 0A                    2048 	.db 0x0a
      0002EC 0D                    2049 	.db 0x0d
      0002ED 00                    2050 	.db 0x00
                                   2051 	.area CSEG    (CODE)
                                   2052 	.area CONST   (CODE)
      0002EE                       2053 ___str_28:
      0002EE 45 6E 74 65 72 20 74  2054 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000315 0A                    2055 	.db 0x0a
      000316 0D                    2056 	.db 0x0d
      000317 00                    2057 	.db 0x00
                                   2058 	.area CSEG    (CODE)
                                   2059 	.area CONST   (CODE)
      000318                       2060 ___str_29:
      000318 50 48 59 20 52 65 61  2061 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      00032D 0A                    2062 	.db 0x0a
      00032E 0D                    2063 	.db 0x0d
      00032F 00                    2064 	.db 0x00
                                   2065 	.area CSEG    (CODE)
                                   2066 	.area CONST   (CODE)
      000330                       2067 ___str_30:
      000330 52 65 73 65 74 74 69  2068 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      000345 0A                    2069 	.db 0x0a
      000346 0D                    2070 	.db 0x0d
      000347 00                    2071 	.db 0x00
                                   2072 	.area CSEG    (CODE)
                                   2073 	.area CONST   (CODE)
      000348                       2074 ___str_31:
      000348 45 6E 74 65 72 20 74  2075 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      00036F 0A                    2076 	.db 0x0a
      000370 0D                    2077 	.db 0x0d
      000371 00                    2078 	.db 0x00
                                   2079 	.area CSEG    (CODE)
                                   2080 	.area CONST   (CODE)
      000372                       2081 ___str_32:
      000372 45 6E 74 65 72 20 74  2082 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      00038A 0A                    2083 	.db 0x0a
      00038B 0D                    2084 	.db 0x0d
      00038C 00                    2085 	.db 0x00
                                   2086 	.area CSEG    (CODE)
                                   2087 	.area CONST   (CODE)
      00038D                       2088 ___str_33:
      00038D 45 54 48 20 52 65 67  2089 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0003A6 0A                    2090 	.db 0x0a
      0003A7 0D                    2091 	.db 0x0d
      0003A8 00                    2092 	.db 0x00
                                   2093 	.area CSEG    (CODE)
                                   2094 	.area CONST   (CODE)
      0003A9                       2095 ___str_34:
      0003A9 49 6E 76 61 6C 69 64  2096 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      0003D6 0A                    2097 	.db 0x0a
      0003D7 0D                    2098 	.db 0x0d
      0003D8 00                    2099 	.db 0x00
                                   2100 	.area CSEG    (CODE)
                                   2101 	.area XINIT   (CODE)
                                   2102 	.area CABS    (ABS,CODE)
