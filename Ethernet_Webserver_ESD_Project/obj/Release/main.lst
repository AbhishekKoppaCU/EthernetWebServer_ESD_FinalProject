                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _packetLoop
                                     15 	.globl _update_ERXRDPT
                                     16 	.globl _ENC_pkt_count
                                     17 	.globl _enc_init
                                     18 	.globl _send_arp_request
                                     19 	.globl _spi_control_write
                                     20 	.globl _eth_spi_read
                                     21 	.globl _phy_spi_write
                                     22 	.globl _phy_spi_read
                                     23 	.globl _spi_buffer_write
                                     24 	.globl _spi_buffer_read
                                     25 	.globl _mac_spi_read
                                     26 	.globl _enc_reset
                                     27 	.globl _configure_SPI
                                     28 	.globl _process_packet_from_buffer
                                     29 	.globl _transmit_tcp_packet
                                     30 	.globl _process_tcp_packet
                                     31 	.globl _memcmp
                                     32 	.globl _free
                                     33 	.globl _malloc
                                     34 	.globl _printf_tiny
                                     35 	.globl _putchar
                                     36 	.globl _getchar
                                     37 	.globl _printf
                                     38 	.globl _TF1
                                     39 	.globl _TR1
                                     40 	.globl _TF0
                                     41 	.globl _TR0
                                     42 	.globl _IE1
                                     43 	.globl _IT1
                                     44 	.globl _IE0
                                     45 	.globl _IT0
                                     46 	.globl _SM0
                                     47 	.globl _SM1
                                     48 	.globl _SM2
                                     49 	.globl _REN
                                     50 	.globl _TB8
                                     51 	.globl _RB8
                                     52 	.globl _TI
                                     53 	.globl _RI
                                     54 	.globl _CY
                                     55 	.globl _AC
                                     56 	.globl _F0
                                     57 	.globl _RS1
                                     58 	.globl _RS0
                                     59 	.globl _OV
                                     60 	.globl _F1
                                     61 	.globl _P
                                     62 	.globl _RD
                                     63 	.globl _WR
                                     64 	.globl _T1
                                     65 	.globl _T0
                                     66 	.globl _INT1
                                     67 	.globl _INT0
                                     68 	.globl _TXD0
                                     69 	.globl _TXD
                                     70 	.globl _RXD0
                                     71 	.globl _RXD
                                     72 	.globl _P3_7
                                     73 	.globl _P3_6
                                     74 	.globl _P3_5
                                     75 	.globl _P3_4
                                     76 	.globl _P3_3
                                     77 	.globl _P3_2
                                     78 	.globl _P3_1
                                     79 	.globl _P3_0
                                     80 	.globl _P2_7
                                     81 	.globl _P2_6
                                     82 	.globl _P2_5
                                     83 	.globl _P2_4
                                     84 	.globl _P2_3
                                     85 	.globl _P2_2
                                     86 	.globl _P2_1
                                     87 	.globl _P2_0
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _P0_7
                                     97 	.globl _P0_6
                                     98 	.globl _P0_5
                                     99 	.globl _P0_4
                                    100 	.globl _P0_3
                                    101 	.globl _P0_2
                                    102 	.globl _P0_1
                                    103 	.globl _P0_0
                                    104 	.globl _PS
                                    105 	.globl _PT1
                                    106 	.globl _PX1
                                    107 	.globl _PT0
                                    108 	.globl _PX0
                                    109 	.globl _EA
                                    110 	.globl _ES
                                    111 	.globl _ET1
                                    112 	.globl _EX1
                                    113 	.globl _ET0
                                    114 	.globl _EX0
                                    115 	.globl _BREG_F7
                                    116 	.globl _BREG_F6
                                    117 	.globl _BREG_F5
                                    118 	.globl _BREG_F4
                                    119 	.globl _BREG_F3
                                    120 	.globl _BREG_F2
                                    121 	.globl _BREG_F1
                                    122 	.globl _BREG_F0
                                    123 	.globl _P5_7
                                    124 	.globl _P5_6
                                    125 	.globl _P5_5
                                    126 	.globl _P5_4
                                    127 	.globl _P5_3
                                    128 	.globl _P5_2
                                    129 	.globl _P5_1
                                    130 	.globl _P5_0
                                    131 	.globl _P4_7
                                    132 	.globl _P4_6
                                    133 	.globl _P4_5
                                    134 	.globl _P4_4
                                    135 	.globl _P4_3
                                    136 	.globl _P4_2
                                    137 	.globl _P4_1
                                    138 	.globl _P4_0
                                    139 	.globl _PX0L
                                    140 	.globl _PT0L
                                    141 	.globl _PX1L
                                    142 	.globl _PT1L
                                    143 	.globl _PSL
                                    144 	.globl _PT2L
                                    145 	.globl _PPCL
                                    146 	.globl _EC
                                    147 	.globl _CCF0
                                    148 	.globl _CCF1
                                    149 	.globl _CCF2
                                    150 	.globl _CCF3
                                    151 	.globl _CCF4
                                    152 	.globl _CR
                                    153 	.globl _CF
                                    154 	.globl _TF2
                                    155 	.globl _EXF2
                                    156 	.globl _RCLK
                                    157 	.globl _TCLK
                                    158 	.globl _EXEN2
                                    159 	.globl _TR2
                                    160 	.globl _C_T2
                                    161 	.globl _CP_RL2
                                    162 	.globl _T2CON_7
                                    163 	.globl _T2CON_6
                                    164 	.globl _T2CON_5
                                    165 	.globl _T2CON_4
                                    166 	.globl _T2CON_3
                                    167 	.globl _T2CON_2
                                    168 	.globl _T2CON_1
                                    169 	.globl _T2CON_0
                                    170 	.globl _PT2
                                    171 	.globl _ET2
                                    172 	.globl _TMOD
                                    173 	.globl _TL1
                                    174 	.globl _TL0
                                    175 	.globl _TH1
                                    176 	.globl _TH0
                                    177 	.globl _TCON
                                    178 	.globl _SP
                                    179 	.globl _SCON
                                    180 	.globl _SBUF0
                                    181 	.globl _SBUF
                                    182 	.globl _PSW
                                    183 	.globl _PCON
                                    184 	.globl _P3
                                    185 	.globl _P2
                                    186 	.globl _P1
                                    187 	.globl _P0
                                    188 	.globl _IP
                                    189 	.globl _IE
                                    190 	.globl _DP0L
                                    191 	.globl _DPL
                                    192 	.globl _DP0H
                                    193 	.globl _DPH
                                    194 	.globl _B
                                    195 	.globl _ACC
                                    196 	.globl _EECON
                                    197 	.globl _KBF
                                    198 	.globl _KBE
                                    199 	.globl _KBLS
                                    200 	.globl _BRL
                                    201 	.globl _BDRCON
                                    202 	.globl _T2MOD
                                    203 	.globl _SPDAT
                                    204 	.globl _SPSTA
                                    205 	.globl _SPCON
                                    206 	.globl _SADEN
                                    207 	.globl _SADDR
                                    208 	.globl _WDTPRG
                                    209 	.globl _WDTRST
                                    210 	.globl _P5
                                    211 	.globl _P4
                                    212 	.globl _IPH1
                                    213 	.globl _IPL1
                                    214 	.globl _IPH0
                                    215 	.globl _IPL0
                                    216 	.globl _IEN1
                                    217 	.globl _IEN0
                                    218 	.globl _CMOD
                                    219 	.globl _CL
                                    220 	.globl _CH
                                    221 	.globl _CCON
                                    222 	.globl _CCAPM4
                                    223 	.globl _CCAPM3
                                    224 	.globl _CCAPM2
                                    225 	.globl _CCAPM1
                                    226 	.globl _CCAPM0
                                    227 	.globl _CCAP4L
                                    228 	.globl _CCAP3L
                                    229 	.globl _CCAP2L
                                    230 	.globl _CCAP1L
                                    231 	.globl _CCAP0L
                                    232 	.globl _CCAP4H
                                    233 	.globl _CCAP3H
                                    234 	.globl _CCAP2H
                                    235 	.globl _CCAP1H
                                    236 	.globl _CCAP0H
                                    237 	.globl _CKCON1
                                    238 	.globl _CKCON0
                                    239 	.globl _CKRL
                                    240 	.globl _AUXR1
                                    241 	.globl _AUXR
                                    242 	.globl _TH2
                                    243 	.globl _TL2
                                    244 	.globl _RCAP2H
                                    245 	.globl _RCAP2L
                                    246 	.globl _T2CON
                                    247 ;--------------------------------------------------------
                                    248 ; special function registers
                                    249 ;--------------------------------------------------------
                                    250 	.area RSEG    (ABS,DATA)
      000000                        251 	.org 0x0000
                           0000C8   252 _T2CON	=	0x00c8
                           0000CA   253 _RCAP2L	=	0x00ca
                           0000CB   254 _RCAP2H	=	0x00cb
                           0000CC   255 _TL2	=	0x00cc
                           0000CD   256 _TH2	=	0x00cd
                           00008E   257 _AUXR	=	0x008e
                           0000A2   258 _AUXR1	=	0x00a2
                           000097   259 _CKRL	=	0x0097
                           00008F   260 _CKCON0	=	0x008f
                           0000AF   261 _CKCON1	=	0x00af
                           0000FA   262 _CCAP0H	=	0x00fa
                           0000FB   263 _CCAP1H	=	0x00fb
                           0000FC   264 _CCAP2H	=	0x00fc
                           0000FD   265 _CCAP3H	=	0x00fd
                           0000FE   266 _CCAP4H	=	0x00fe
                           0000EA   267 _CCAP0L	=	0x00ea
                           0000EB   268 _CCAP1L	=	0x00eb
                           0000EC   269 _CCAP2L	=	0x00ec
                           0000ED   270 _CCAP3L	=	0x00ed
                           0000EE   271 _CCAP4L	=	0x00ee
                           0000DA   272 _CCAPM0	=	0x00da
                           0000DB   273 _CCAPM1	=	0x00db
                           0000DC   274 _CCAPM2	=	0x00dc
                           0000DD   275 _CCAPM3	=	0x00dd
                           0000DE   276 _CCAPM4	=	0x00de
                           0000D8   277 _CCON	=	0x00d8
                           0000F9   278 _CH	=	0x00f9
                           0000E9   279 _CL	=	0x00e9
                           0000D9   280 _CMOD	=	0x00d9
                           0000A8   281 _IEN0	=	0x00a8
                           0000B1   282 _IEN1	=	0x00b1
                           0000B8   283 _IPL0	=	0x00b8
                           0000B7   284 _IPH0	=	0x00b7
                           0000B2   285 _IPL1	=	0x00b2
                           0000B3   286 _IPH1	=	0x00b3
                           0000C0   287 _P4	=	0x00c0
                           0000E8   288 _P5	=	0x00e8
                           0000A6   289 _WDTRST	=	0x00a6
                           0000A7   290 _WDTPRG	=	0x00a7
                           0000A9   291 _SADDR	=	0x00a9
                           0000B9   292 _SADEN	=	0x00b9
                           0000C3   293 _SPCON	=	0x00c3
                           0000C4   294 _SPSTA	=	0x00c4
                           0000C5   295 _SPDAT	=	0x00c5
                           0000C9   296 _T2MOD	=	0x00c9
                           00009B   297 _BDRCON	=	0x009b
                           00009A   298 _BRL	=	0x009a
                           00009C   299 _KBLS	=	0x009c
                           00009D   300 _KBE	=	0x009d
                           00009E   301 _KBF	=	0x009e
                           0000D2   302 _EECON	=	0x00d2
                           0000E0   303 _ACC	=	0x00e0
                           0000F0   304 _B	=	0x00f0
                           000083   305 _DPH	=	0x0083
                           000083   306 _DP0H	=	0x0083
                           000082   307 _DPL	=	0x0082
                           000082   308 _DP0L	=	0x0082
                           0000A8   309 _IE	=	0x00a8
                           0000B8   310 _IP	=	0x00b8
                           000080   311 _P0	=	0x0080
                           000090   312 _P1	=	0x0090
                           0000A0   313 _P2	=	0x00a0
                           0000B0   314 _P3	=	0x00b0
                           000087   315 _PCON	=	0x0087
                           0000D0   316 _PSW	=	0x00d0
                           000099   317 _SBUF	=	0x0099
                           000099   318 _SBUF0	=	0x0099
                           000098   319 _SCON	=	0x0098
                           000081   320 _SP	=	0x0081
                           000088   321 _TCON	=	0x0088
                           00008C   322 _TH0	=	0x008c
                           00008D   323 _TH1	=	0x008d
                           00008A   324 _TL0	=	0x008a
                           00008B   325 _TL1	=	0x008b
                           000089   326 _TMOD	=	0x0089
                                    327 ;--------------------------------------------------------
                                    328 ; special function bits
                                    329 ;--------------------------------------------------------
                                    330 	.area RSEG    (ABS,DATA)
      000000                        331 	.org 0x0000
                           0000AD   332 _ET2	=	0x00ad
                           0000BD   333 _PT2	=	0x00bd
                           0000C8   334 _T2CON_0	=	0x00c8
                           0000C9   335 _T2CON_1	=	0x00c9
                           0000CA   336 _T2CON_2	=	0x00ca
                           0000CB   337 _T2CON_3	=	0x00cb
                           0000CC   338 _T2CON_4	=	0x00cc
                           0000CD   339 _T2CON_5	=	0x00cd
                           0000CE   340 _T2CON_6	=	0x00ce
                           0000CF   341 _T2CON_7	=	0x00cf
                           0000C8   342 _CP_RL2	=	0x00c8
                           0000C9   343 _C_T2	=	0x00c9
                           0000CA   344 _TR2	=	0x00ca
                           0000CB   345 _EXEN2	=	0x00cb
                           0000CC   346 _TCLK	=	0x00cc
                           0000CD   347 _RCLK	=	0x00cd
                           0000CE   348 _EXF2	=	0x00ce
                           0000CF   349 _TF2	=	0x00cf
                           0000DF   350 _CF	=	0x00df
                           0000DE   351 _CR	=	0x00de
                           0000DC   352 _CCF4	=	0x00dc
                           0000DB   353 _CCF3	=	0x00db
                           0000DA   354 _CCF2	=	0x00da
                           0000D9   355 _CCF1	=	0x00d9
                           0000D8   356 _CCF0	=	0x00d8
                           0000AE   357 _EC	=	0x00ae
                           0000BE   358 _PPCL	=	0x00be
                           0000BD   359 _PT2L	=	0x00bd
                           0000BC   360 _PSL	=	0x00bc
                           0000BB   361 _PT1L	=	0x00bb
                           0000BA   362 _PX1L	=	0x00ba
                           0000B9   363 _PT0L	=	0x00b9
                           0000B8   364 _PX0L	=	0x00b8
                           0000C0   365 _P4_0	=	0x00c0
                           0000C1   366 _P4_1	=	0x00c1
                           0000C2   367 _P4_2	=	0x00c2
                           0000C3   368 _P4_3	=	0x00c3
                           0000C4   369 _P4_4	=	0x00c4
                           0000C5   370 _P4_5	=	0x00c5
                           0000C6   371 _P4_6	=	0x00c6
                           0000C7   372 _P4_7	=	0x00c7
                           0000E8   373 _P5_0	=	0x00e8
                           0000E9   374 _P5_1	=	0x00e9
                           0000EA   375 _P5_2	=	0x00ea
                           0000EB   376 _P5_3	=	0x00eb
                           0000EC   377 _P5_4	=	0x00ec
                           0000ED   378 _P5_5	=	0x00ed
                           0000EE   379 _P5_6	=	0x00ee
                           0000EF   380 _P5_7	=	0x00ef
                           0000F0   381 _BREG_F0	=	0x00f0
                           0000F1   382 _BREG_F1	=	0x00f1
                           0000F2   383 _BREG_F2	=	0x00f2
                           0000F3   384 _BREG_F3	=	0x00f3
                           0000F4   385 _BREG_F4	=	0x00f4
                           0000F5   386 _BREG_F5	=	0x00f5
                           0000F6   387 _BREG_F6	=	0x00f6
                           0000F7   388 _BREG_F7	=	0x00f7
                           0000A8   389 _EX0	=	0x00a8
                           0000A9   390 _ET0	=	0x00a9
                           0000AA   391 _EX1	=	0x00aa
                           0000AB   392 _ET1	=	0x00ab
                           0000AC   393 _ES	=	0x00ac
                           0000AF   394 _EA	=	0x00af
                           0000B8   395 _PX0	=	0x00b8
                           0000B9   396 _PT0	=	0x00b9
                           0000BA   397 _PX1	=	0x00ba
                           0000BB   398 _PT1	=	0x00bb
                           0000BC   399 _PS	=	0x00bc
                           000080   400 _P0_0	=	0x0080
                           000081   401 _P0_1	=	0x0081
                           000082   402 _P0_2	=	0x0082
                           000083   403 _P0_3	=	0x0083
                           000084   404 _P0_4	=	0x0084
                           000085   405 _P0_5	=	0x0085
                           000086   406 _P0_6	=	0x0086
                           000087   407 _P0_7	=	0x0087
                           000090   408 _P1_0	=	0x0090
                           000091   409 _P1_1	=	0x0091
                           000092   410 _P1_2	=	0x0092
                           000093   411 _P1_3	=	0x0093
                           000094   412 _P1_4	=	0x0094
                           000095   413 _P1_5	=	0x0095
                           000096   414 _P1_6	=	0x0096
                           000097   415 _P1_7	=	0x0097
                           0000A0   416 _P2_0	=	0x00a0
                           0000A1   417 _P2_1	=	0x00a1
                           0000A2   418 _P2_2	=	0x00a2
                           0000A3   419 _P2_3	=	0x00a3
                           0000A4   420 _P2_4	=	0x00a4
                           0000A5   421 _P2_5	=	0x00a5
                           0000A6   422 _P2_6	=	0x00a6
                           0000A7   423 _P2_7	=	0x00a7
                           0000B0   424 _P3_0	=	0x00b0
                           0000B1   425 _P3_1	=	0x00b1
                           0000B2   426 _P3_2	=	0x00b2
                           0000B3   427 _P3_3	=	0x00b3
                           0000B4   428 _P3_4	=	0x00b4
                           0000B5   429 _P3_5	=	0x00b5
                           0000B6   430 _P3_6	=	0x00b6
                           0000B7   431 _P3_7	=	0x00b7
                           0000B0   432 _RXD	=	0x00b0
                           0000B0   433 _RXD0	=	0x00b0
                           0000B1   434 _TXD	=	0x00b1
                           0000B1   435 _TXD0	=	0x00b1
                           0000B2   436 _INT0	=	0x00b2
                           0000B3   437 _INT1	=	0x00b3
                           0000B4   438 _T0	=	0x00b4
                           0000B5   439 _T1	=	0x00b5
                           0000B6   440 _WR	=	0x00b6
                           0000B7   441 _RD	=	0x00b7
                           0000D0   442 _P	=	0x00d0
                           0000D1   443 _F1	=	0x00d1
                           0000D2   444 _OV	=	0x00d2
                           0000D3   445 _RS0	=	0x00d3
                           0000D4   446 _RS1	=	0x00d4
                           0000D5   447 _F0	=	0x00d5
                           0000D6   448 _AC	=	0x00d6
                           0000D7   449 _CY	=	0x00d7
                           000098   450 _RI	=	0x0098
                           000099   451 _TI	=	0x0099
                           00009A   452 _RB8	=	0x009a
                           00009B   453 _TB8	=	0x009b
                           00009C   454 _REN	=	0x009c
                           00009D   455 _SM2	=	0x009d
                           00009E   456 _SM1	=	0x009e
                           00009F   457 _SM0	=	0x009f
                           000088   458 _IT0	=	0x0088
                           000089   459 _IE0	=	0x0089
                           00008A   460 _IT1	=	0x008a
                           00008B   461 _IE1	=	0x008b
                           00008C   462 _TR0	=	0x008c
                           00008D   463 _TF0	=	0x008d
                           00008E   464 _TR1	=	0x008e
                           00008F   465 _TF1	=	0x008f
                                    466 ;--------------------------------------------------------
                                    467 ; overlayable register banks
                                    468 ;--------------------------------------------------------
                                    469 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        470 	.ds 8
                                    471 ;--------------------------------------------------------
                                    472 ; internal ram data
                                    473 ;--------------------------------------------------------
                                    474 	.area DSEG    (DATA)
      000000                        475 _main_sloc0_1_0:
      000000                        476 	.ds 2
      000002                        477 _main_sloc1_1_0:
      000002                        478 	.ds 2
      000004                        479 _main_sloc2_1_0:
      000004                        480 	.ds 2
      000006                        481 _main_sloc3_1_0:
      000006                        482 	.ds 2
      000008                        483 _main_sloc4_1_0:
      000008                        484 	.ds 2
      00000A                        485 _main_sloc5_1_0:
      00000A                        486 	.ds 3
                                    487 ;--------------------------------------------------------
                                    488 ; overlayable items in internal ram
                                    489 ;--------------------------------------------------------
                                    490 	.area	OSEG    (OVR,DATA)
      000000                        491 _hex_to_int_sloc0_1_0:
      000000                        492 	.ds 3
      000003                        493 _hex_to_int_sloc1_1_0:
      000003                        494 	.ds 1
      000004                        495 _hex_to_int_sloc2_1_0:
      000004                        496 	.ds 2
                                    497 ;--------------------------------------------------------
                                    498 ; Stack segment in internal ram
                                    499 ;--------------------------------------------------------
                                    500 	.area SSEG
      000000                        501 __start__stack:
      000000                        502 	.ds	1
                                    503 
                                    504 ;--------------------------------------------------------
                                    505 ; indirectly addressable internal ram data
                                    506 ;--------------------------------------------------------
                                    507 	.area ISEG    (DATA)
                                    508 ;--------------------------------------------------------
                                    509 ; absolute internal ram data
                                    510 ;--------------------------------------------------------
                                    511 	.area IABS    (ABS,DATA)
                                    512 	.area IABS    (ABS,DATA)
                                    513 ;--------------------------------------------------------
                                    514 ; bit data
                                    515 ;--------------------------------------------------------
                                    516 	.area BSEG    (BIT)
                                    517 ;--------------------------------------------------------
                                    518 ; paged external ram data
                                    519 ;--------------------------------------------------------
                                    520 	.area PSEG    (PAG,XDATA)
                                    521 ;--------------------------------------------------------
                                    522 ; uninitialized external ram data
                                    523 ;--------------------------------------------------------
                                    524 	.area XSEG    (XDATA)
      000000                        525 _hex_to_int_str_10000_131:
      000000                        526 	.ds 3
      000003                        527 _hex_to_int_result_10000_132:
      000003                        528 	.ds 2
      000005                        529 _hex_to_int_ASCII_20000_133:
      000005                        530 	.ds 2
      000007                        531 _get_user_buffer_size_input_10000_138:
      000007                        532 	.ds 10
      000011                        533 _main_device_mac_10000_141:
      000011                        534 	.ds 6
      000017                        535 _main_target_mac_10000_141:
      000017                        536 	.ds 6
      00001D                        537 _main_device_ip_10000_141:
      00001D                        538 	.ds 4
      000021                        539 _main_target_ip_10000_141:
      000021                        540 	.ds 4
      000025                        541 _main_buffer_40003_151:
      000025                        542 	.ds 256
      000125                        543 _main_buffer_40003_156:
      000125                        544 	.ds 256
      000225                        545 _main_gNextPacketPtr_60001_172:
      000225                        546 	.ds 2
      000227                        547 _main_is_tcp_for_target_60004_177:
      000227                        548 	.ds 2
      000229                        549 _main_response_size_70004_181:
      000229                        550 	.ds 2
                                    551 ;--------------------------------------------------------
                                    552 ; absolute external ram data
                                    553 ;--------------------------------------------------------
                                    554 	.area XABS    (ABS,XDATA)
                                    555 ;--------------------------------------------------------
                                    556 ; initialized external ram data
                                    557 ;--------------------------------------------------------
                                    558 	.area XISEG   (XDATA)
                                    559 	.area HOME    (CODE)
                                    560 	.area GSINIT0 (CODE)
                                    561 	.area GSINIT1 (CODE)
                                    562 	.area GSINIT2 (CODE)
                                    563 	.area GSINIT3 (CODE)
                                    564 	.area GSINIT4 (CODE)
                                    565 	.area GSINIT5 (CODE)
                                    566 	.area GSINIT  (CODE)
                                    567 	.area GSFINAL (CODE)
                                    568 	.area CSEG    (CODE)
                                    569 ;--------------------------------------------------------
                                    570 ; interrupt vector
                                    571 ;--------------------------------------------------------
                                    572 	.area HOME    (CODE)
      000000                        573 __interrupt_vect:
      000000 02r00r00         [24]  574 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  575 	ljmp	_external_interrupt0_isr
                                    576 ;--------------------------------------------------------
                                    577 ; global & static initialisations
                                    578 ;--------------------------------------------------------
                                    579 	.area HOME    (CODE)
                                    580 	.area GSINIT  (CODE)
                                    581 	.area GSFINAL (CODE)
                                    582 	.area GSINIT  (CODE)
                                    583 	.globl __sdcc_gsinit_startup
                                    584 	.globl __sdcc_program_startup
                                    585 	.globl __start__stack
                                    586 	.globl __mcs51_genXINIT
                                    587 	.globl __mcs51_genXRAMCLEAR
                                    588 	.globl __mcs51_genRAMCLEAR
                                    589 ;------------------------------------------------------------
                                    590 ;Allocation info for local variables in function 'main'
                                    591 ;------------------------------------------------------------
                                    592 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    593 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    594 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    595 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    596 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    597 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    598 ;device_mac                Allocated with name '_main_device_mac_10000_141'
                                    599 ;target_mac                Allocated with name '_main_target_mac_10000_141'
                                    600 ;device_ip                 Allocated with name '_main_device_ip_10000_141'
                                    601 ;target_ip                 Allocated with name '_main_target_ip_10000_141'
                                    602 ;c                         Allocated with name '_main_c_20001_143'
                                    603 ;reg_bank                  Allocated with name '_main_reg_bank_40002_146'
                                    604 ;addr                      Allocated with name '_main_addr_40003_147'
                                    605 ;data                      Allocated with name '_main_data_40004_148'
                                    606 ;num_bytes                 Allocated with name '_main_num_bytes_40002_150'
                                    607 ;start_address             Allocated with name '_main_start_address_40003_151'
                                    608 ;buffer                    Allocated with name '_main_buffer_40003_151'
                                    609 ;i                         Allocated with name '_main_i_50003_152'
                                    610 ;num_bytes                 Allocated with name '_main_num_bytes_40002_155'
                                    611 ;start_address             Allocated with name '_main_start_address_40003_156'
                                    612 ;buffer                    Allocated with name '_main_buffer_40003_156'
                                    613 ;reg_bank                  Allocated with name '_main_reg_bank_40002_158'
                                    614 ;addr                      Allocated with name '_main_addr_40003_159'
                                    615 ;data                      Allocated with name '_main_data_40003_159'
                                    616 ;addr                      Allocated with name '_main_addr_40002_161'
                                    617 ;data                      Allocated with name '_main_data_40003_162'
                                    618 ;addr                      Allocated with name '_main_addr_40002_164'
                                    619 ;data                      Allocated with name '_main_data_40002_164'
                                    620 ;addr                      Allocated with name '_main_addr_40002_167'
                                    621 ;bank                      Allocated with name '_main_bank_40003_168'
                                    622 ;data                      Allocated with name '_main_data_40003_168'
                                    623 ;nextPacket                Allocated with name '_main_nextPacket_60001_172'
                                    624 ;byteCount                 Allocated with name '_main_byteCount_60001_172'
                                    625 ;status                    Allocated with name '_main_status_60001_172'
                                    626 ;gNextPacketPtr            Allocated with name '_main_gNextPacketPtr_60001_172'
                                    627 ;len                       Allocated with name '_main_len_60001_172'
                                    628 ;packet_data               Allocated with name '_main_packet_data_60002_175'
                                    629 ;packet_data_actual        Allocated with name '_main_packet_data_actual_60003_176'
                                    630 ;is_tcp_for_target         Allocated with name '_main_is_tcp_for_target_60004_177'
                                    631 ;response_size             Allocated with name '_main_response_size_70004_181'
                                    632 ;response                  Allocated with name '_main_response_70004_181'
                                    633 ;read_econ2                Allocated with name '_main_read_econ2_60005_185'
                                    634 ;i                         Allocated with name '_main_i_50001_188'
                                    635 ;read_econ2                Allocated with name '_main_read_econ2_40002_191'
                                    636 ;------------------------------------------------------------
                                    637 ;	main.c:197: static uint16_t gNextPacketPtr = RX_BUFFER_START;
      000000 90r02r25         [24]  638 	mov	dptr,#_main_gNextPacketPtr_60001_172
      000003 E4               [12]  639 	clr	a
      000004 F0               [24]  640 	movx	@dptr,a
      000005 A3               [24]  641 	inc	dptr
      000006 F0               [24]  642 	movx	@dptr,a
                                    643 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  644 	ljmp	__sdcc_program_startup
                                    645 ;--------------------------------------------------------
                                    646 ; Home
                                    647 ;--------------------------------------------------------
                                    648 	.area HOME    (CODE)
                                    649 	.area HOME    (CODE)
      000006                        650 __sdcc_program_startup:
      000006 02r02r3E         [24]  651 	ljmp	_main
                                    652 ;	return from main will return to caller
                                    653 ;--------------------------------------------------------
                                    654 ; code
                                    655 ;--------------------------------------------------------
                                    656 	.area CSEG    (CODE)
                                    657 ;------------------------------------------------------------
                                    658 ;Allocation info for local variables in function 'hex_to_int'
                                    659 ;------------------------------------------------------------
                                    660 ;str                       Allocated with name '_hex_to_int_str_10000_131'
                                    661 ;i                         Allocated with name '_hex_to_int_i_10000_132'
                                    662 ;result                    Allocated with name '_hex_to_int_result_10000_132'
                                    663 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_133'
                                    664 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    665 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    666 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    667 ;------------------------------------------------------------
                                    668 ;	main.c:21: int hex_to_int(char* str)
                                    669 ;	-----------------------------------------
                                    670 ;	 function hex_to_int
                                    671 ;	-----------------------------------------
      000000                        672 _hex_to_int:
                           000007   673 	ar7 = 0x07
                           000006   674 	ar6 = 0x06
                           000005   675 	ar5 = 0x05
                           000004   676 	ar4 = 0x04
                           000003   677 	ar3 = 0x03
                           000002   678 	ar2 = 0x02
                           000001   679 	ar1 = 0x01
                           000000   680 	ar0 = 0x00
      000000 AF F0            [24]  681 	mov	r7,b
      000002 AE 83            [24]  682 	mov	r6,dph
      000004 E5 82            [12]  683 	mov	a,dpl
      000006 90r00r00         [24]  684 	mov	dptr,#_hex_to_int_str_10000_131
      000009 F0               [24]  685 	movx	@dptr,a
      00000A EE               [12]  686 	mov	a,r6
      00000B A3               [24]  687 	inc	dptr
      00000C F0               [24]  688 	movx	@dptr,a
      00000D EF               [12]  689 	mov	a,r7
      00000E A3               [24]  690 	inc	dptr
      00000F F0               [24]  691 	movx	@dptr,a
                                    692 ;	main.c:24: int i = 0, result = 0;
      000010 90r00r03         [24]  693 	mov	dptr,#_hex_to_int_result_10000_132
      000013 E4               [12]  694 	clr	a
      000014 F0               [24]  695 	movx	@dptr,a
      000015 A3               [24]  696 	inc	dptr
      000016 F0               [24]  697 	movx	@dptr,a
                                    698 ;	main.c:25: while(str[i] != '\0')
      000017 90r00r00         [24]  699 	mov	dptr,#_hex_to_int_str_10000_131
      00001A E0               [24]  700 	movx	a,@dptr
      00001B FD               [12]  701 	mov	r5,a
      00001C A3               [24]  702 	inc	dptr
      00001D E0               [24]  703 	movx	a,@dptr
      00001E FE               [12]  704 	mov	r6,a
      00001F A3               [24]  705 	inc	dptr
      000020 E0               [24]  706 	movx	a,@dptr
      000021 FF               [12]  707 	mov	r7,a
      000022 8D 02            [24]  708 	mov	ar2,r5
      000024 8E 03            [24]  709 	mov	ar3,r6
      000026 8F 04            [24]  710 	mov	ar4,r7
      000028 8D*00            [24]  711 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  712 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  713 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  714 	mov	r0,#0x00
      000030 79 00            [12]  715 	mov	r1,#0x00
      000032                        716 00112$:
      000032 C0 02            [24]  717 	push	ar2
      000034 C0 03            [24]  718 	push	ar3
      000036 C0 04            [24]  719 	push	ar4
      000038 E8               [12]  720 	mov	a,r0
      000039 25*00            [12]  721 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  722 	mov	r2,a
      00003C E9               [12]  723 	mov	a,r1
      00003D 35*01            [12]  724 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  725 	mov	r3,a
      000040 AC*02            [24]  726 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  727 	mov	dpl,r2
      000044 8B 83            [24]  728 	mov	dph,r3
      000046 8C F0            [24]  729 	mov	b,r4
      000048 12r00r00         [24]  730 	lcall	__gptrget
      00004B F5*03            [12]  731 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  732 	pop	ar4
      00004F D0 03            [24]  733 	pop	ar3
      000051 D0 02            [24]  734 	pop	ar2
      000053 E5*03            [12]  735 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  736 	jnz	00166$
      000057 02r01rAE         [24]  737 	ljmp	00114$
      00005A                        738 00166$:
                                    739 ;	main.c:27: int ASCII = (int)str[i];
      00005A C0 02            [24]  740 	push	ar2
      00005C C0 03            [24]  741 	push	ar3
      00005E C0 04            [24]  742 	push	ar4
      000060 85*03*04         [24]  743 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  744 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  745 	mov	dptr,#_hex_to_int_ASCII_20000_133
      000069 E5*04            [12]  746 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  747 	movx	@dptr,a
      00006C E5*05            [12]  748 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  749 	inc	dptr
      00006F F0               [24]  750 	movx	@dptr,a
                                    751 ;	main.c:28: result *= 16;
      000070 90r00r03         [24]  752 	mov	dptr,#_hex_to_int_result_10000_132
      000073 E0               [24]  753 	movx	a,@dptr
      000074 FB               [12]  754 	mov	r3,a
      000075 A3               [24]  755 	inc	dptr
      000076 E0               [24]  756 	movx	a,@dptr
      000077 C4               [12]  757 	swap	a
      000078 54 F0            [12]  758 	anl	a,#0xf0
      00007A CB               [12]  759 	xch	a,r3
      00007B C4               [12]  760 	swap	a
      00007C CB               [12]  761 	xch	a,r3
      00007D 6B               [12]  762 	xrl	a,r3
      00007E CB               [12]  763 	xch	a,r3
      00007F 54 F0            [12]  764 	anl	a,#0xf0
      000081 CB               [12]  765 	xch	a,r3
      000082 6B               [12]  766 	xrl	a,r3
      000083 FC               [12]  767 	mov	r4,a
      000084 90r00r03         [24]  768 	mov	dptr,#_hex_to_int_result_10000_132
      000087 EB               [12]  769 	mov	a,r3
      000088 F0               [24]  770 	movx	@dptr,a
      000089 EC               [12]  771 	mov	a,r4
      00008A A3               [24]  772 	inc	dptr
      00008B F0               [24]  773 	movx	@dptr,a
                                    774 ;	main.c:29: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  775 	clr	c
      00008D E5*04            [12]  776 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  777 	subb	a,#0x30
      000091 E5*05            [12]  778 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  779 	xrl	a,#0x80
      000095 94 80            [12]  780 	subb	a,#0x80
      000097 D0 04            [24]  781 	pop	ar4
      000099 D0 03            [24]  782 	pop	ar3
      00009B D0 02            [24]  783 	pop	ar2
      00009D 40 3F            [24]  784 	jc	00109$
      00009F 74 39            [12]  785 	mov	a,#0x39
      0000A1 95*04            [12]  786 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  787 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  788 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  789 	xrl	b,#0x80
      0000AB 95 F0            [12]  790 	subb	a,b
      0000AD 40 2F            [24]  791 	jc	00109$
                                    792 ;	main.c:31: result += str[i] - 48;
      0000AF C0 02            [24]  793 	push	ar2
      0000B1 C0 03            [24]  794 	push	ar3
      0000B3 C0 04            [24]  795 	push	ar4
      0000B5 E5*04            [12]  796 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  797 	add	a,#0xd0
      0000B9 F5*04            [12]  798 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  799 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  800 	addc	a,#0xff
      0000BF F5*05            [12]  801 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  802 	mov	dptr,#_hex_to_int_result_10000_132
      0000C4 E0               [24]  803 	movx	a,@dptr
      0000C5 FA               [12]  804 	mov	r2,a
      0000C6 A3               [24]  805 	inc	dptr
      0000C7 E0               [24]  806 	movx	a,@dptr
      0000C8 FC               [12]  807 	mov	r4,a
      0000C9 90r00r03         [24]  808 	mov	dptr,#_hex_to_int_result_10000_132
      0000CC E5*04            [12]  809 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  810 	add	a, r2
      0000CF F0               [24]  811 	movx	@dptr,a
      0000D0 E5*05            [12]  812 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  813 	addc	a, r4
      0000D3 A3               [24]  814 	inc	dptr
      0000D4 F0               [24]  815 	movx	@dptr,a
      0000D5 D0 04            [24]  816 	pop	ar4
      0000D7 D0 03            [24]  817 	pop	ar3
      0000D9 D0 02            [24]  818 	pop	ar2
      0000DB 02r01rA6         [24]  819 	ljmp	00110$
      0000DE                        820 00109$:
                                    821 ;	main.c:33: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  822 	mov	dptr,#_hex_to_int_ASCII_20000_133
      0000E1 E0               [24]  823 	movx	a,@dptr
      0000E2 F5*04            [12]  824 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  825 	inc	dptr
      0000E5 E0               [24]  826 	movx	a,@dptr
      0000E6 F5*05            [12]  827 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  828 	clr	c
      0000E9 E5*04            [12]  829 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  830 	subb	a,#0x41
      0000ED E5*05            [12]  831 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  832 	xrl	a,#0x80
      0000F1 94 80            [12]  833 	subb	a,#0x80
      0000F3 40 4E            [24]  834 	jc	00105$
      0000F5 74 46            [12]  835 	mov	a,#0x46
      0000F7 95*04            [12]  836 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  837 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  838 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  839 	xrl	b,#0x80
      000101 95 F0            [12]  840 	subb	a,b
      000103 40 3E            [24]  841 	jc	00105$
                                    842 ;	main.c:35: result += str[i] - 55;
      000105 C0 05            [24]  843 	push	ar5
      000107 C0 06            [24]  844 	push	ar6
      000109 C0 07            [24]  845 	push	ar7
      00010B E8               [12]  846 	mov	a,r0
      00010C 2A               [12]  847 	add	a, r2
      00010D FD               [12]  848 	mov	r5,a
      00010E E9               [12]  849 	mov	a,r1
      00010F 3B               [12]  850 	addc	a, r3
      000110 FE               [12]  851 	mov	r6,a
      000111 8C 07            [24]  852 	mov	ar7,r4
      000113 8D 82            [24]  853 	mov	dpl,r5
      000115 8E 83            [24]  854 	mov	dph,r6
      000117 8F F0            [24]  855 	mov	b,r7
      000119 12r00r00         [24]  856 	lcall	__gptrget
      00011C 7F 00            [12]  857 	mov	r7,#0x00
      00011E 24 C9            [12]  858 	add	a,#0xc9
      000120 F5*04            [12]  859 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  860 	mov	a,r7
      000123 34 FF            [12]  861 	addc	a,#0xff
      000125 F5*05            [12]  862 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  863 	mov	dptr,#_hex_to_int_result_10000_132
      00012A E0               [24]  864 	movx	a,@dptr
      00012B FE               [12]  865 	mov	r6,a
      00012C A3               [24]  866 	inc	dptr
      00012D E0               [24]  867 	movx	a,@dptr
      00012E FF               [12]  868 	mov	r7,a
      00012F 90r00r03         [24]  869 	mov	dptr,#_hex_to_int_result_10000_132
      000132 E5*04            [12]  870 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  871 	add	a, r6
      000135 F0               [24]  872 	movx	@dptr,a
      000136 E5*05            [12]  873 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  874 	addc	a, r7
      000139 A3               [24]  875 	inc	dptr
      00013A F0               [24]  876 	movx	@dptr,a
      00013B D0 07            [24]  877 	pop	ar7
      00013D D0 06            [24]  878 	pop	ar6
      00013F D0 05            [24]  879 	pop	ar5
      000141 80 63            [24]  880 	sjmp	00110$
      000143                        881 00105$:
                                    882 ;	main.c:37: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  883 	mov	dptr,#_hex_to_int_ASCII_20000_133
      000146 E0               [24]  884 	movx	a,@dptr
      000147 F5*04            [12]  885 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  886 	inc	dptr
      00014A E0               [24]  887 	movx	a,@dptr
      00014B F5*05            [12]  888 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  889 	clr	c
      00014E E5*04            [12]  890 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  891 	subb	a,#0x61
      000152 E5*05            [12]  892 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  893 	xrl	a,#0x80
      000156 94 80            [12]  894 	subb	a,#0x80
      000158 40 4C            [24]  895 	jc	00110$
      00015A 74 66            [12]  896 	mov	a,#0x66
      00015C 95*04            [12]  897 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  898 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  899 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  900 	xrl	b,#0x80
      000166 95 F0            [12]  901 	subb	a,b
      000168 40 3C            [24]  902 	jc	00110$
                                    903 ;	main.c:39: result += str[i] - 87;
      00016A C0 02            [24]  904 	push	ar2
      00016C C0 03            [24]  905 	push	ar3
      00016E C0 04            [24]  906 	push	ar4
      000170 E8               [12]  907 	mov	a,r0
      000171 2D               [12]  908 	add	a, r5
      000172 FA               [12]  909 	mov	r2,a
      000173 E9               [12]  910 	mov	a,r1
      000174 3E               [12]  911 	addc	a, r6
      000175 FB               [12]  912 	mov	r3,a
      000176 8F 04            [24]  913 	mov	ar4,r7
      000178 8A 82            [24]  914 	mov	dpl,r2
      00017A 8B 83            [24]  915 	mov	dph,r3
      00017C 8C F0            [24]  916 	mov	b,r4
      00017E 12r00r00         [24]  917 	lcall	__gptrget
      000181 7C 00            [12]  918 	mov	r4,#0x00
      000183 24 A9            [12]  919 	add	a,#0xa9
      000185 F5*04            [12]  920 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  921 	mov	a,r4
      000188 34 FF            [12]  922 	addc	a,#0xff
      00018A F5*05            [12]  923 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  924 	mov	dptr,#_hex_to_int_result_10000_132
      00018F E0               [24]  925 	movx	a,@dptr
      000190 FB               [12]  926 	mov	r3,a
      000191 A3               [24]  927 	inc	dptr
      000192 E0               [24]  928 	movx	a,@dptr
      000193 FC               [12]  929 	mov	r4,a
      000194 90r00r03         [24]  930 	mov	dptr,#_hex_to_int_result_10000_132
      000197 E5*04            [12]  931 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  932 	add	a, r3
      00019A F0               [24]  933 	movx	@dptr,a
      00019B E5*05            [12]  934 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  935 	addc	a, r4
      00019E A3               [24]  936 	inc	dptr
      00019F F0               [24]  937 	movx	@dptr,a
                                    938 ;	main.c:43: return result;
      0001A0 D0 04            [24]  939 	pop	ar4
      0001A2 D0 03            [24]  940 	pop	ar3
      0001A4 D0 02            [24]  941 	pop	ar2
                                    942 ;	main.c:39: result += str[i] - 87;
      0001A6                        943 00110$:
                                    944 ;	main.c:41: i++;
      0001A6 08               [12]  945 	inc	r0
      0001A7 B8 00 01         [24]  946 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  947 	inc	r1
      0001AB                        948 00173$:
      0001AB 02r00r32         [24]  949 	ljmp	00112$
      0001AE                        950 00114$:
                                    951 ;	main.c:43: return result;
      0001AE 90r00r03         [24]  952 	mov	dptr,#_hex_to_int_result_10000_132
      0001B1 E0               [24]  953 	movx	a,@dptr
      0001B2 FE               [12]  954 	mov	r6,a
      0001B3 A3               [24]  955 	inc	dptr
      0001B4 E0               [24]  956 	movx	a,@dptr
                                    957 ;	main.c:45: }
      0001B5 8E 82            [24]  958 	mov	dpl,r6
      0001B7 F5 83            [12]  959 	mov	dph,a
      0001B9 22               [24]  960 	ret
                                    961 ;------------------------------------------------------------
                                    962 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    963 ;------------------------------------------------------------
                                    964 ;i                         Allocated with name '_get_user_buffer_size_i_10000_138'
                                    965 ;output                    Allocated with name '_get_user_buffer_size_output_10000_138'
                                    966 ;input                     Allocated with name '_get_user_buffer_size_input_10000_138'
                                    967 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_138'
                                    968 ;------------------------------------------------------------
                                    969 ;	main.c:48: int get_user_buffer_size(void)
                                    970 ;	-----------------------------------------
                                    971 ;	 function get_user_buffer_size
                                    972 ;	-----------------------------------------
      0001BA                        973 _get_user_buffer_size:
                                    974 ;	main.c:54: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  975 	mov	r6,#0x00
      0001BC 7F 00            [12]  976 	mov	r7,#0x00
      0001BE                        977 00103$:
      0001BE C0 07            [24]  978 	push	ar7
      0001C0 C0 06            [24]  979 	push	ar6
      0001C2 12r00r00         [24]  980 	lcall	_getchar
      0001C5 AC 82            [24]  981 	mov	r4, dpl
      0001C7 D0 06            [24]  982 	pop	ar6
      0001C9 D0 07            [24]  983 	pop	ar7
      0001CB BC 0A 02         [24]  984 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  985 	sjmp	00105$
      0001D0                        986 00133$:
      0001D0 BC 0D 02         [24]  987 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  988 	sjmp	00105$
      0001D5                        989 00134$:
      0001D5 C3               [12]  990 	clr	c
      0001D6 EE               [12]  991 	mov	a,r6
      0001D7 94 09            [12]  992 	subb	a,#0x09
      0001D9 EF               [12]  993 	mov	a,r7
      0001DA 64 80            [12]  994 	xrl	a,#0x80
      0001DC 94 80            [12]  995 	subb	a,#0x80
      0001DE 50 2A            [24]  996 	jnc	00105$
                                    997 ;	main.c:56: putchar(ch);
      0001E0 8C 03            [24]  998 	mov	ar3,r4
      0001E2 7D 00            [12]  999 	mov	r5,#0x00
      0001E4 8B 82            [24] 1000 	mov	dpl, r3
      0001E6 8D 83            [24] 1001 	mov	dph, r5
      0001E8 C0 07            [24] 1002 	push	ar7
      0001EA C0 06            [24] 1003 	push	ar6
      0001EC C0 04            [24] 1004 	push	ar4
      0001EE 12r00r00         [24] 1005 	lcall	_putchar
      0001F1 D0 04            [24] 1006 	pop	ar4
      0001F3 D0 06            [24] 1007 	pop	ar6
      0001F5 D0 07            [24] 1008 	pop	ar7
                                   1009 ;	main.c:57: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12] 1010 	mov	a,r6
      0001F8 24r07            [12] 1011 	add	a, #_get_user_buffer_size_input_10000_138
      0001FA F5 82            [12] 1012 	mov	dpl,a
      0001FC EF               [12] 1013 	mov	a,r7
      0001FD 34s00            [12] 1014 	addc	a, #(_get_user_buffer_size_input_10000_138 >> 8)
      0001FF F5 83            [12] 1015 	mov	dph,a
      000201 EC               [12] 1016 	mov	a,r4
      000202 F0               [24] 1017 	movx	@dptr,a
                                   1018 ;	main.c:58: i++;
      000203 0E               [12] 1019 	inc	r6
      000204 BE 00 B7         [24] 1020 	cjne	r6,#0x00,00103$
      000207 0F               [12] 1021 	inc	r7
      000208 80 B4            [24] 1022 	sjmp	00103$
      00020A                       1023 00105$:
                                   1024 ;	main.c:60: input[i] = '\0';
      00020A EE               [12] 1025 	mov	a,r6
      00020B 24r07            [12] 1026 	add	a, #_get_user_buffer_size_input_10000_138
      00020D F5 82            [12] 1027 	mov	dpl,a
      00020F EF               [12] 1028 	mov	a,r7
      000210 34s00            [12] 1029 	addc	a, #(_get_user_buffer_size_input_10000_138 >> 8)
      000212 F5 83            [12] 1030 	mov	dph,a
      000214 E4               [12] 1031 	clr	a
      000215 F0               [24] 1032 	movx	@dptr,a
                                   1033 ;	main.c:61: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24] 1034 	mov	dptr,#_get_user_buffer_size_input_10000_138
      000219 F5 F0            [12] 1035 	mov	b,a
      00021B 12r00r00         [24] 1036 	lcall	_hex_to_int
      00021E AE 82            [24] 1037 	mov	r6, dpl
      000220 AF 83            [24] 1038 	mov	r7, dph
                                   1039 ;	main.c:62: printf_tiny("\n\r");
      000222 C0 07            [24] 1040 	push	ar7
      000224 C0 06            [24] 1041 	push	ar6
      000226 74r00            [12] 1042 	mov	a,#___str_0
      000228 C0 E0            [24] 1043 	push	acc
      00022A 74s00            [12] 1044 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24] 1045 	push	acc
      00022E 12r00r00         [24] 1046 	lcall	_printf_tiny
      000231 15 81            [12] 1047 	dec	sp
      000233 15 81            [12] 1048 	dec	sp
      000235 D0 06            [24] 1049 	pop	ar6
      000237 D0 07            [24] 1050 	pop	ar7
                                   1051 ;	main.c:64: return output;
      000239 8E 82            [24] 1052 	mov	dpl, r6
      00023B 8F 83            [24] 1053 	mov	dph, r7
                                   1054 ;	main.c:65: }
      00023D 22               [24] 1055 	ret
                                   1056 ;------------------------------------------------------------
                                   1057 ;Allocation info for local variables in function 'main'
                                   1058 ;------------------------------------------------------------
                                   1059 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                   1060 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                   1061 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                   1062 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                   1063 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                   1064 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                   1065 ;device_mac                Allocated with name '_main_device_mac_10000_141'
                                   1066 ;target_mac                Allocated with name '_main_target_mac_10000_141'
                                   1067 ;device_ip                 Allocated with name '_main_device_ip_10000_141'
                                   1068 ;target_ip                 Allocated with name '_main_target_ip_10000_141'
                                   1069 ;c                         Allocated with name '_main_c_20001_143'
                                   1070 ;reg_bank                  Allocated with name '_main_reg_bank_40002_146'
                                   1071 ;addr                      Allocated with name '_main_addr_40003_147'
                                   1072 ;data                      Allocated with name '_main_data_40004_148'
                                   1073 ;num_bytes                 Allocated with name '_main_num_bytes_40002_150'
                                   1074 ;start_address             Allocated with name '_main_start_address_40003_151'
                                   1075 ;buffer                    Allocated with name '_main_buffer_40003_151'
                                   1076 ;i                         Allocated with name '_main_i_50003_152'
                                   1077 ;num_bytes                 Allocated with name '_main_num_bytes_40002_155'
                                   1078 ;start_address             Allocated with name '_main_start_address_40003_156'
                                   1079 ;buffer                    Allocated with name '_main_buffer_40003_156'
                                   1080 ;reg_bank                  Allocated with name '_main_reg_bank_40002_158'
                                   1081 ;addr                      Allocated with name '_main_addr_40003_159'
                                   1082 ;data                      Allocated with name '_main_data_40003_159'
                                   1083 ;addr                      Allocated with name '_main_addr_40002_161'
                                   1084 ;data                      Allocated with name '_main_data_40003_162'
                                   1085 ;addr                      Allocated with name '_main_addr_40002_164'
                                   1086 ;data                      Allocated with name '_main_data_40002_164'
                                   1087 ;addr                      Allocated with name '_main_addr_40002_167'
                                   1088 ;bank                      Allocated with name '_main_bank_40003_168'
                                   1089 ;data                      Allocated with name '_main_data_40003_168'
                                   1090 ;nextPacket                Allocated with name '_main_nextPacket_60001_172'
                                   1091 ;byteCount                 Allocated with name '_main_byteCount_60001_172'
                                   1092 ;status                    Allocated with name '_main_status_60001_172'
                                   1093 ;gNextPacketPtr            Allocated with name '_main_gNextPacketPtr_60001_172'
                                   1094 ;len                       Allocated with name '_main_len_60001_172'
                                   1095 ;packet_data               Allocated with name '_main_packet_data_60002_175'
                                   1096 ;packet_data_actual        Allocated with name '_main_packet_data_actual_60003_176'
                                   1097 ;is_tcp_for_target         Allocated with name '_main_is_tcp_for_target_60004_177'
                                   1098 ;response_size             Allocated with name '_main_response_size_70004_181'
                                   1099 ;response                  Allocated with name '_main_response_70004_181'
                                   1100 ;read_econ2                Allocated with name '_main_read_econ2_60005_185'
                                   1101 ;i                         Allocated with name '_main_i_50001_188'
                                   1102 ;read_econ2                Allocated with name '_main_read_econ2_40002_191'
                                   1103 ;------------------------------------------------------------
                                   1104 ;	main.c:67: void main(void)
                                   1105 ;	-----------------------------------------
                                   1106 ;	 function main
                                   1107 ;	-----------------------------------------
      00023E                       1108 _main:
                                   1109 ;	main.c:69: uint8_t device_mac[6] = { 0x02, 0x11, 0x22, 0x33, 0x44, 0x55 }; // Default MAC
      00023E 90r00r11         [24] 1110 	mov	dptr,#_main_device_mac_10000_141
      000241 74 02            [12] 1111 	mov	a,#0x02
      000243 F0               [24] 1112 	movx	@dptr,a
      000244 90r00r12         [24] 1113 	mov	dptr,#(_main_device_mac_10000_141 + 0x0001)
      000247 74 11            [12] 1114 	mov	a,#0x11
      000249 F0               [24] 1115 	movx	@dptr,a
      00024A 90r00r13         [24] 1116 	mov	dptr,#(_main_device_mac_10000_141 + 0x0002)
      00024D 23               [12] 1117 	rl	a
      00024E F0               [24] 1118 	movx	@dptr,a
      00024F 90r00r14         [24] 1119 	mov	dptr,#(_main_device_mac_10000_141 + 0x0003)
      000252 74 33            [12] 1120 	mov	a,#0x33
      000254 F0               [24] 1121 	movx	@dptr,a
      000255 90r00r15         [24] 1122 	mov	dptr,#(_main_device_mac_10000_141 + 0x0004)
      000258 74 44            [12] 1123 	mov	a,#0x44
      00025A F0               [24] 1124 	movx	@dptr,a
      00025B 90r00r16         [24] 1125 	mov	dptr,#(_main_device_mac_10000_141 + 0x0005)
      00025E 74 55            [12] 1126 	mov	a,#0x55
      000260 F0               [24] 1127 	movx	@dptr,a
                                   1128 ;	main.c:70: uint8_t target_mac[6] = { 0xF8, 0x75, 0xA4, 0x8C, 0x41, 0x31 }; // Default MAC
      000261 90r00r17         [24] 1129 	mov	dptr,#_main_target_mac_10000_141
      000264 74 F8            [12] 1130 	mov	a,#0xf8
      000266 F0               [24] 1131 	movx	@dptr,a
      000267 90r00r18         [24] 1132 	mov	dptr,#(_main_target_mac_10000_141 + 0x0001)
      00026A 74 75            [12] 1133 	mov	a,#0x75
      00026C F0               [24] 1134 	movx	@dptr,a
      00026D 90r00r19         [24] 1135 	mov	dptr,#(_main_target_mac_10000_141 + 0x0002)
      000270 74 A4            [12] 1136 	mov	a,#0xa4
      000272 F0               [24] 1137 	movx	@dptr,a
      000273 90r00r1A         [24] 1138 	mov	dptr,#(_main_target_mac_10000_141 + 0x0003)
      000276 74 8C            [12] 1139 	mov	a,#0x8c
      000278 F0               [24] 1140 	movx	@dptr,a
      000279 90r00r1B         [24] 1141 	mov	dptr,#(_main_target_mac_10000_141 + 0x0004)
      00027C 74 41            [12] 1142 	mov	a,#0x41
      00027E F0               [24] 1143 	movx	@dptr,a
      00027F 90r00r1C         [24] 1144 	mov	dptr,#(_main_target_mac_10000_141 + 0x0005)
      000282 74 31            [12] 1145 	mov	a,#0x31
      000284 F0               [24] 1146 	movx	@dptr,a
                                   1147 ;	main.c:71: uint8_t device_ip[4] = { 192, 168, 1, 100 }; // Default IP Address
      000285 90r00r1D         [24] 1148 	mov	dptr,#_main_device_ip_10000_141
      000288 74 C0            [12] 1149 	mov	a,#0xc0
      00028A F0               [24] 1150 	movx	@dptr,a
      00028B 90r00r1E         [24] 1151 	mov	dptr,#(_main_device_ip_10000_141 + 0x0001)
      00028E 74 A8            [12] 1152 	mov	a,#0xa8
      000290 F0               [24] 1153 	movx	@dptr,a
      000291 90r00r1F         [24] 1154 	mov	dptr,#(_main_device_ip_10000_141 + 0x0002)
      000294 74 01            [12] 1155 	mov	a,#0x01
      000296 F0               [24] 1156 	movx	@dptr,a
      000297 90r00r20         [24] 1157 	mov	dptr,#(_main_device_ip_10000_141 + 0x0003)
      00029A 74 64            [12] 1158 	mov	a,#0x64
      00029C F0               [24] 1159 	movx	@dptr,a
                                   1160 ;	main.c:72: uint8_t target_ip[4] = { 192, 168, 1, 1 };
      00029D 90r00r21         [24] 1161 	mov	dptr,#_main_target_ip_10000_141
      0002A0 74 C0            [12] 1162 	mov	a,#0xc0
      0002A2 F0               [24] 1163 	movx	@dptr,a
      0002A3 90r00r22         [24] 1164 	mov	dptr,#(_main_target_ip_10000_141 + 0x0001)
      0002A6 74 A8            [12] 1165 	mov	a,#0xa8
      0002A8 F0               [24] 1166 	movx	@dptr,a
      0002A9 90r00r23         [24] 1167 	mov	dptr,#(_main_target_ip_10000_141 + 0x0002)
      0002AC 74 01            [12] 1168 	mov	a,#0x01
      0002AE F0               [24] 1169 	movx	@dptr,a
      0002AF 90r00r24         [24] 1170 	mov	dptr,#(_main_target_ip_10000_141 + 0x0003)
      0002B2 F0               [24] 1171 	movx	@dptr,a
                                   1172 ;	main.c:74: printf("SPI Operations on 8051\n\r");
      0002B3 74r03            [12] 1173 	mov	a,#___str_1
      0002B5 C0 E0            [24] 1174 	push	acc
      0002B7 74s00            [12] 1175 	mov	a,#(___str_1 >> 8)
      0002B9 C0 E0            [24] 1176 	push	acc
      0002BB 74 80            [12] 1177 	mov	a,#0x80
      0002BD C0 E0            [24] 1178 	push	acc
      0002BF 12r00r00         [24] 1179 	lcall	_printf
      0002C2 15 81            [12] 1180 	dec	sp
      0002C4 15 81            [12] 1181 	dec	sp
      0002C6 15 81            [12] 1182 	dec	sp
                                   1183 ;	main.c:75: configure_SPI();
      0002C8 12r00r00         [24] 1184 	lcall	_configure_SPI
                                   1185 ;	main.c:77: enc_init(device_mac);
      0002CB 90r00r11         [24] 1186 	mov	dptr,#_main_device_mac_10000_141
      0002CE 75 F0 00         [24] 1187 	mov	b, #0x00
      0002D1 12r00r00         [24] 1188 	lcall	_enc_init
                                   1189 ;	main.c:79: while(1)
      0002D4                       1190 00146$:
                                   1191 ;	main.c:81: printf("\n\rChoose an action: \n\r");
      0002D4 74r1C            [12] 1192 	mov	a,#___str_2
      0002D6 C0 E0            [24] 1193 	push	acc
      0002D8 74s00            [12] 1194 	mov	a,#(___str_2 >> 8)
      0002DA C0 E0            [24] 1195 	push	acc
      0002DC 74 80            [12] 1196 	mov	a,#0x80
      0002DE C0 E0            [24] 1197 	push	acc
      0002E0 12r00r00         [24] 1198 	lcall	_printf
      0002E3 15 81            [12] 1199 	dec	sp
      0002E5 15 81            [12] 1200 	dec	sp
      0002E7 15 81            [12] 1201 	dec	sp
                                   1202 ;	main.c:82: printf("1 --> Control Write\n\r");
      0002E9 74r33            [12] 1203 	mov	a,#___str_3
      0002EB C0 E0            [24] 1204 	push	acc
      0002ED 74s00            [12] 1205 	mov	a,#(___str_3 >> 8)
      0002EF C0 E0            [24] 1206 	push	acc
      0002F1 74 80            [12] 1207 	mov	a,#0x80
      0002F3 C0 E0            [24] 1208 	push	acc
      0002F5 12r00r00         [24] 1209 	lcall	_printf
      0002F8 15 81            [12] 1210 	dec	sp
      0002FA 15 81            [12] 1211 	dec	sp
      0002FC 15 81            [12] 1212 	dec	sp
                                   1213 ;	main.c:83: printf("2 --> Buffer Write\n\r");
      0002FE 74r49            [12] 1214 	mov	a,#___str_4
      000300 C0 E0            [24] 1215 	push	acc
      000302 74s00            [12] 1216 	mov	a,#(___str_4 >> 8)
      000304 C0 E0            [24] 1217 	push	acc
      000306 74 80            [12] 1218 	mov	a,#0x80
      000308 C0 E0            [24] 1219 	push	acc
      00030A 12r00r00         [24] 1220 	lcall	_printf
      00030D 15 81            [12] 1221 	dec	sp
      00030F 15 81            [12] 1222 	dec	sp
      000311 15 81            [12] 1223 	dec	sp
                                   1224 ;	main.c:84: printf("3 --> Buffer Read\n\r");
      000313 74r5E            [12] 1225 	mov	a,#___str_5
      000315 C0 E0            [24] 1226 	push	acc
      000317 74s00            [12] 1227 	mov	a,#(___str_5 >> 8)
      000319 C0 E0            [24] 1228 	push	acc
      00031B 74 80            [12] 1229 	mov	a,#0x80
      00031D C0 E0            [24] 1230 	push	acc
      00031F 12r00r00         [24] 1231 	lcall	_printf
      000322 15 81            [12] 1232 	dec	sp
      000324 15 81            [12] 1233 	dec	sp
      000326 15 81            [12] 1234 	dec	sp
                                   1235 ;	main.c:85: printf("4 --> MAC Register Read\n\r");
      000328 74r72            [12] 1236 	mov	a,#___str_6
      00032A C0 E0            [24] 1237 	push	acc
      00032C 74s00            [12] 1238 	mov	a,#(___str_6 >> 8)
      00032E C0 E0            [24] 1239 	push	acc
      000330 74 80            [12] 1240 	mov	a,#0x80
      000332 C0 E0            [24] 1241 	push	acc
      000334 12r00r00         [24] 1242 	lcall	_printf
      000337 15 81            [12] 1243 	dec	sp
      000339 15 81            [12] 1244 	dec	sp
      00033B 15 81            [12] 1245 	dec	sp
                                   1246 ;	main.c:86: printf("5 --> PHY SPI Write\n\r");
      00033D 74r8C            [12] 1247 	mov	a,#___str_7
      00033F C0 E0            [24] 1248 	push	acc
      000341 74s00            [12] 1249 	mov	a,#(___str_7 >> 8)
      000343 C0 E0            [24] 1250 	push	acc
      000345 74 80            [12] 1251 	mov	a,#0x80
      000347 C0 E0            [24] 1252 	push	acc
      000349 12r00r00         [24] 1253 	lcall	_printf
      00034C 15 81            [12] 1254 	dec	sp
      00034E 15 81            [12] 1255 	dec	sp
      000350 15 81            [12] 1256 	dec	sp
                                   1257 ;	main.c:87: printf("6 --> PHY SPI Read\n\r");
      000352 74rA2            [12] 1258 	mov	a,#___str_8
      000354 C0 E0            [24] 1259 	push	acc
      000356 74s00            [12] 1260 	mov	a,#(___str_8 >> 8)
      000358 C0 E0            [24] 1261 	push	acc
      00035A 74 80            [12] 1262 	mov	a,#0x80
      00035C C0 E0            [24] 1263 	push	acc
      00035E 12r00r00         [24] 1264 	lcall	_printf
      000361 15 81            [12] 1265 	dec	sp
      000363 15 81            [12] 1266 	dec	sp
      000365 15 81            [12] 1267 	dec	sp
                                   1268 ;	main.c:88: printf("7 --> ENC Reset\n\r");
      000367 74rB7            [12] 1269 	mov	a,#___str_9
      000369 C0 E0            [24] 1270 	push	acc
      00036B 74s00            [12] 1271 	mov	a,#(___str_9 >> 8)
      00036D C0 E0            [24] 1272 	push	acc
      00036F 74 80            [12] 1273 	mov	a,#0x80
      000371 C0 E0            [24] 1274 	push	acc
      000373 12r00r00         [24] 1275 	lcall	_printf
      000376 15 81            [12] 1276 	dec	sp
      000378 15 81            [12] 1277 	dec	sp
      00037A 15 81            [12] 1278 	dec	sp
                                   1279 ;	main.c:89: printf("8 --> Read ETH Register\n\r");
      00037C 74rC9            [12] 1280 	mov	a,#___str_10
      00037E C0 E0            [24] 1281 	push	acc
      000380 74s00            [12] 1282 	mov	a,#(___str_10 >> 8)
      000382 C0 E0            [24] 1283 	push	acc
      000384 74 80            [12] 1284 	mov	a,#0x80
      000386 C0 E0            [24] 1285 	push	acc
      000388 12r00r00         [24] 1286 	lcall	_printf
      00038B 15 81            [12] 1287 	dec	sp
      00038D 15 81            [12] 1288 	dec	sp
      00038F 15 81            [12] 1289 	dec	sp
                                   1290 ;	main.c:90: printf("9 --> Display Menu\n\r");
      000391 74rE3            [12] 1291 	mov	a,#___str_11
      000393 C0 E0            [24] 1292 	push	acc
      000395 74s00            [12] 1293 	mov	a,#(___str_11 >> 8)
      000397 C0 E0            [24] 1294 	push	acc
      000399 74 80            [12] 1295 	mov	a,#0x80
      00039B C0 E0            [24] 1296 	push	acc
      00039D 12r00r00         [24] 1297 	lcall	_printf
      0003A0 15 81            [12] 1298 	dec	sp
      0003A2 15 81            [12] 1299 	dec	sp
      0003A4 15 81            [12] 1300 	dec	sp
                                   1301 ;	main.c:91: printf("A --> Send ARP Request\n\r");
      0003A6 74rF8            [12] 1302 	mov	a,#___str_12
      0003A8 C0 E0            [24] 1303 	push	acc
      0003AA 74s00            [12] 1304 	mov	a,#(___str_12 >> 8)
      0003AC C0 E0            [24] 1305 	push	acc
      0003AE 74 80            [12] 1306 	mov	a,#0x80
      0003B0 C0 E0            [24] 1307 	push	acc
      0003B2 12r00r00         [24] 1308 	lcall	_printf
      0003B5 15 81            [12] 1309 	dec	sp
      0003B7 15 81            [12] 1310 	dec	sp
      0003B9 15 81            [12] 1311 	dec	sp
                                   1312 ;	main.c:92: printf("B --> Init RX buffers\n\r");
      0003BB 74r11            [12] 1313 	mov	a,#___str_13
      0003BD C0 E0            [24] 1314 	push	acc
      0003BF 74s01            [12] 1315 	mov	a,#(___str_13 >> 8)
      0003C1 C0 E0            [24] 1316 	push	acc
      0003C3 74 80            [12] 1317 	mov	a,#0x80
      0003C5 C0 E0            [24] 1318 	push	acc
      0003C7 12r00r00         [24] 1319 	lcall	_printf
      0003CA 15 81            [12] 1320 	dec	sp
      0003CC 15 81            [12] 1321 	dec	sp
      0003CE 15 81            [12] 1322 	dec	sp
                                   1323 ;	main.c:93: printf("C --> Hard Reset(nRESET pin)\n\r");
      0003D0 74r29            [12] 1324 	mov	a,#___str_14
      0003D2 C0 E0            [24] 1325 	push	acc
      0003D4 74s01            [12] 1326 	mov	a,#(___str_14 >> 8)
      0003D6 C0 E0            [24] 1327 	push	acc
      0003D8 74 80            [12] 1328 	mov	a,#0x80
      0003DA C0 E0            [24] 1329 	push	acc
      0003DC 12r00r00         [24] 1330 	lcall	_printf
      0003DF 15 81            [12] 1331 	dec	sp
      0003E1 15 81            [12] 1332 	dec	sp
      0003E3 15 81            [12] 1333 	dec	sp
                                   1334 ;	main.c:94: printf("D --> Process TCP\n\r");
      0003E5 74r48            [12] 1335 	mov	a,#___str_15
      0003E7 C0 E0            [24] 1336 	push	acc
      0003E9 74s01            [12] 1337 	mov	a,#(___str_15 >> 8)
      0003EB C0 E0            [24] 1338 	push	acc
      0003ED 74 80            [12] 1339 	mov	a,#0x80
      0003EF C0 E0            [24] 1340 	push	acc
      0003F1 12r00r00         [24] 1341 	lcall	_printf
      0003F4 15 81            [12] 1342 	dec	sp
      0003F6 15 81            [12] 1343 	dec	sp
      0003F8 15 81            [12] 1344 	dec	sp
                                   1345 ;	main.c:95: printf("E --> Enable TX interrupt\n\r");
      0003FA 74r5C            [12] 1346 	mov	a,#___str_16
      0003FC C0 E0            [24] 1347 	push	acc
      0003FE 74s01            [12] 1348 	mov	a,#(___str_16 >> 8)
      000400 C0 E0            [24] 1349 	push	acc
      000402 74 80            [12] 1350 	mov	a,#0x80
      000404 C0 E0            [24] 1351 	push	acc
      000406 12r00r00         [24] 1352 	lcall	_printf
      000409 15 81            [12] 1353 	dec	sp
      00040B 15 81            [12] 1354 	dec	sp
      00040D 15 81            [12] 1355 	dec	sp
                                   1356 ;	main.c:96: printf("F --> Disabling TX interrupt\n\r");
      00040F 74r78            [12] 1357 	mov	a,#___str_17
      000411 C0 E0            [24] 1358 	push	acc
      000413 74s01            [12] 1359 	mov	a,#(___str_17 >> 8)
      000415 C0 E0            [24] 1360 	push	acc
      000417 74 80            [12] 1361 	mov	a,#0x80
      000419 C0 E0            [24] 1362 	push	acc
      00041B 12r00r00         [24] 1363 	lcall	_printf
      00041E 15 81            [12] 1364 	dec	sp
      000420 15 81            [12] 1365 	dec	sp
      000422 15 81            [12] 1366 	dec	sp
                                   1367 ;	main.c:98: char c = getchar();
      000424 12r00r00         [24] 1368 	lcall	_getchar
      000427 AE 82            [24] 1369 	mov	r6, dpl
                                   1370 ;	main.c:99: putchar(c);
      000429 8E 05            [24] 1371 	mov	ar5,r6
      00042B 7F 00            [12] 1372 	mov	r7,#0x00
      00042D 8D 82            [24] 1373 	mov	dpl, r5
      00042F 8F 83            [24] 1374 	mov	dph, r7
      000431 C0 06            [24] 1375 	push	ar6
      000433 12r00r00         [24] 1376 	lcall	_putchar
                                   1377 ;	main.c:100: printf("\n\r");
      000436 74r00            [12] 1378 	mov	a,#___str_0
      000438 C0 E0            [24] 1379 	push	acc
      00043A 74s00            [12] 1380 	mov	a,#(___str_0 >> 8)
      00043C C0 E0            [24] 1381 	push	acc
      00043E 74 80            [12] 1382 	mov	a,#0x80
      000440 C0 E0            [24] 1383 	push	acc
      000442 12r00r00         [24] 1384 	lcall	_printf
      000445 15 81            [12] 1385 	dec	sp
      000447 15 81            [12] 1386 	dec	sp
      000449 15 81            [12] 1387 	dec	sp
      00044B D0 06            [24] 1388 	pop	ar6
                                   1389 ;	main.c:102: switch(c)
      00044D BE 31 02         [24] 1390 	cjne	r6,#0x31,00344$
      000450 80 5D            [24] 1391 	sjmp	00101$
      000452                       1392 00344$:
      000452 BE 32 03         [24] 1393 	cjne	r6,#0x32,00345$
      000455 02r05r17         [24] 1394 	ljmp	00102$
      000458                       1395 00345$:
      000458 BE 33 03         [24] 1396 	cjne	r6,#0x33,00346$
      00045B 02r06r15         [24] 1397 	ljmp	00104$
      00045E                       1398 00346$:
      00045E BE 34 03         [24] 1399 	cjne	r6,#0x34,00347$
      000461 02r06r74         [24] 1400 	ljmp	00105$
      000464                       1401 00347$:
      000464 BE 35 03         [24] 1402 	cjne	r6,#0x35,00348$
      000467 02r06rD6         [24] 1403 	ljmp	00106$
      00046A                       1404 00348$:
      00046A BE 36 03         [24] 1405 	cjne	r6,#0x36,00349$
      00046D 02r07r41         [24] 1406 	ljmp	00107$
      000470                       1407 00349$:
      000470 BE 37 03         [24] 1408 	cjne	r6,#0x37,00350$
      000473 02r07r7C         [24] 1409 	ljmp	00108$
      000476                       1410 00350$:
      000476 BE 38 03         [24] 1411 	cjne	r6,#0x38,00351$
      000479 02r07r97         [24] 1412 	ljmp	00109$
      00047C                       1413 00351$:
      00047C BE 39 03         [24] 1414 	cjne	r6,#0x39,00352$
      00047F 02r07rF9         [24] 1415 	ljmp	00110$
      000482                       1416 00352$:
      000482 BE 41 03         [24] 1417 	cjne	r6,#0x41,00353$
      000485 02r08rB9         [24] 1418 	ljmp	00111$
      000488                       1419 00353$:
      000488 BE 42 03         [24] 1420 	cjne	r6,#0x42,00354$
      00048B 02r02rD4         [24] 1421 	ljmp	00146$
      00048E                       1422 00354$:
      00048E BE 43 03         [24] 1423 	cjne	r6,#0x43,00355$
      000491 02r0Cr92         [24] 1424 	ljmp	00134$
      000494                       1425 00355$:
      000494 BE 44 03         [24] 1426 	cjne	r6,#0x44,00356$
      000497 02r0CrC4         [24] 1427 	ljmp	00136$
      00049A                       1428 00356$:
      00049A BE 45 03         [24] 1429 	cjne	r6,#0x45,00357$
      00049D 02r0CrCD         [24] 1430 	ljmp	00137$
      0004A0                       1431 00357$:
      0004A0 BE 46 03         [24] 1432 	cjne	r6,#0x46,00358$
      0004A3 02r0Dr08         [24] 1433 	ljmp	00138$
      0004A6                       1434 00358$:
      0004A6 BE 58 03         [24] 1435 	cjne	r6,#0x58,00359$
      0004A9 02r0Dr2E         [24] 1436 	ljmp	00141$
      0004AC                       1437 00359$:
      0004AC 02r0Dr33         [24] 1438 	ljmp	00143$
                                   1439 ;	main.c:104: case '1': {
      0004AF                       1440 00101$:
                                   1441 ;	main.c:105: printf("Enter the register bank to select:\n\r");
      0004AF 74r97            [12] 1442 	mov	a,#___str_18
      0004B1 C0 E0            [24] 1443 	push	acc
      0004B3 74s01            [12] 1444 	mov	a,#(___str_18 >> 8)
      0004B5 C0 E0            [24] 1445 	push	acc
      0004B7 74 80            [12] 1446 	mov	a,#0x80
      0004B9 C0 E0            [24] 1447 	push	acc
      0004BB 12r00r00         [24] 1448 	lcall	_printf
      0004BE 15 81            [12] 1449 	dec	sp
      0004C0 15 81            [12] 1450 	dec	sp
      0004C2 15 81            [12] 1451 	dec	sp
                                   1452 ;	main.c:106: uint8_t reg_bank = get_user_buffer_size();
      0004C4 12r01rBA         [24] 1453 	lcall	_get_user_buffer_size
      0004C7 AE 82            [24] 1454 	mov	r6, dpl
                                   1455 ;	main.c:107: printf("Enter the address of the Control Register:\n\r");
      0004C9 C0 06            [24] 1456 	push	ar6
      0004CB 74rBC            [12] 1457 	mov	a,#___str_19
      0004CD C0 E0            [24] 1458 	push	acc
      0004CF 74s01            [12] 1459 	mov	a,#(___str_19 >> 8)
      0004D1 C0 E0            [24] 1460 	push	acc
      0004D3 74 80            [12] 1461 	mov	a,#0x80
      0004D5 C0 E0            [24] 1462 	push	acc
      0004D7 12r00r00         [24] 1463 	lcall	_printf
      0004DA 15 81            [12] 1464 	dec	sp
      0004DC 15 81            [12] 1465 	dec	sp
      0004DE 15 81            [12] 1466 	dec	sp
                                   1467 ;	main.c:108: uint8_t addr = get_user_buffer_size();
      0004E0 12r01rBA         [24] 1468 	lcall	_get_user_buffer_size
      0004E3 AD 82            [24] 1469 	mov	r5, dpl
                                   1470 ;	main.c:109: printf("Enter the data you want to write:\n\r");
      0004E5 C0 05            [24] 1471 	push	ar5
      0004E7 74rE9            [12] 1472 	mov	a,#___str_20
      0004E9 C0 E0            [24] 1473 	push	acc
      0004EB 74s01            [12] 1474 	mov	a,#(___str_20 >> 8)
      0004ED C0 E0            [24] 1475 	push	acc
      0004EF 74 80            [12] 1476 	mov	a,#0x80
      0004F1 C0 E0            [24] 1477 	push	acc
      0004F3 12r00r00         [24] 1478 	lcall	_printf
      0004F6 15 81            [12] 1479 	dec	sp
      0004F8 15 81            [12] 1480 	dec	sp
      0004FA 15 81            [12] 1481 	dec	sp
                                   1482 ;	main.c:110: uint8_t data = get_user_buffer_size();
      0004FC 12r01rBA         [24] 1483 	lcall	_get_user_buffer_size
      0004FF AC 82            [24] 1484 	mov	r4, dpl
      000501 D0 05            [24] 1485 	pop	ar5
      000503 D0 06            [24] 1486 	pop	ar6
                                   1487 ;	main.c:111: spi_control_write(reg_bank, addr, data);
      000505 90r00r00         [24] 1488 	mov	dptr,#_spi_control_write_PARM_2
      000508 ED               [12] 1489 	mov	a,r5
      000509 F0               [24] 1490 	movx	@dptr,a
      00050A 90r00r00         [24] 1491 	mov	dptr,#_spi_control_write_PARM_3
      00050D EC               [12] 1492 	mov	a,r4
      00050E F0               [24] 1493 	movx	@dptr,a
      00050F 8E 82            [24] 1494 	mov	dpl, r6
      000511 12r00r00         [24] 1495 	lcall	_spi_control_write
                                   1496 ;	main.c:112: break;
      000514 02r02rD4         [24] 1497 	ljmp	00146$
                                   1498 ;	main.c:114: case '2': {
      000517                       1499 00102$:
                                   1500 ;	main.c:115: printf("Enter the number of bytes to write:\n\r");
      000517 74r0D            [12] 1501 	mov	a,#___str_21
      000519 C0 E0            [24] 1502 	push	acc
      00051B 74s02            [12] 1503 	mov	a,#(___str_21 >> 8)
      00051D C0 E0            [24] 1504 	push	acc
      00051F 74 80            [12] 1505 	mov	a,#0x80
      000521 C0 E0            [24] 1506 	push	acc
      000523 12r00r00         [24] 1507 	lcall	_printf
      000526 15 81            [12] 1508 	dec	sp
      000528 15 81            [12] 1509 	dec	sp
      00052A 15 81            [12] 1510 	dec	sp
                                   1511 ;	main.c:116: int num_bytes = get_user_buffer_size();
      00052C 12r01rBA         [24] 1512 	lcall	_get_user_buffer_size
      00052F AE 82            [24] 1513 	mov	r6, dpl
      000531 AF 83            [24] 1514 	mov	r7, dph
                                   1515 ;	main.c:117: printf("Enter the starting address:\n\r");
      000533 C0 07            [24] 1516 	push	ar7
      000535 C0 06            [24] 1517 	push	ar6
      000537 74r33            [12] 1518 	mov	a,#___str_22
      000539 C0 E0            [24] 1519 	push	acc
      00053B 74s02            [12] 1520 	mov	a,#(___str_22 >> 8)
      00053D C0 E0            [24] 1521 	push	acc
      00053F 74 80            [12] 1522 	mov	a,#0x80
      000541 C0 E0            [24] 1523 	push	acc
      000543 12r00r00         [24] 1524 	lcall	_printf
      000546 15 81            [12] 1525 	dec	sp
      000548 15 81            [12] 1526 	dec	sp
      00054A 15 81            [12] 1527 	dec	sp
                                   1528 ;	main.c:118: uint16_t start_address = get_user_buffer_size();
      00054C 12r01rBA         [24] 1529 	lcall	_get_user_buffer_size
      00054F AC 82            [24] 1530 	mov	r4, dpl
      000551 AD 83            [24] 1531 	mov	r5, dph
      000553 D0 06            [24] 1532 	pop	ar6
      000555 D0 07            [24] 1533 	pop	ar7
                                   1534 ;	main.c:120: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      000557 C0 07            [24] 1535 	push	ar7
      000559 C0 06            [24] 1536 	push	ar6
      00055B C0 05            [24] 1537 	push	ar5
      00055D C0 04            [24] 1538 	push	ar4
      00055F C0 06            [24] 1539 	push	ar6
      000561 C0 07            [24] 1540 	push	ar7
      000563 74r51            [12] 1541 	mov	a,#___str_23
      000565 C0 E0            [24] 1542 	push	acc
      000567 74s02            [12] 1543 	mov	a,#(___str_23 >> 8)
      000569 C0 E0            [24] 1544 	push	acc
      00056B 74 80            [12] 1545 	mov	a,#0x80
      00056D C0 E0            [24] 1546 	push	acc
      00056F 12r00r00         [24] 1547 	lcall	_printf
      000572 E5 81            [12] 1548 	mov	a,sp
      000574 24 FB            [12] 1549 	add	a,#0xfb
      000576 F5 81            [12] 1550 	mov	sp,a
      000578 D0 04            [24] 1551 	pop	ar4
      00057A D0 05            [24] 1552 	pop	ar5
      00057C D0 06            [24] 1553 	pop	ar6
      00057E D0 07            [24] 1554 	pop	ar7
                                   1555 ;	main.c:121: for (int i = 0; i < num_bytes; i++) {
      000580 7A 00            [12] 1556 	mov	r2,#0x00
      000582 7B 00            [12] 1557 	mov	r3,#0x00
      000584                       1558 00149$:
      000584 C3               [12] 1559 	clr	c
      000585 EA               [12] 1560 	mov	a,r2
      000586 9E               [12] 1561 	subb	a,r6
      000587 EB               [12] 1562 	mov	a,r3
      000588 64 80            [12] 1563 	xrl	a,#0x80
      00058A 8F F0            [24] 1564 	mov	b,r7
      00058C 63 F0 80         [24] 1565 	xrl	b,#0x80
      00058F 95 F0            [12] 1566 	subb	a,b
      000591 50 63            [24] 1567 	jnc	00103$
                                   1568 ;	main.c:122: printf("Byte %d: ", i);
      000593 C0 04            [24] 1569 	push	ar4
      000595 C0 05            [24] 1570 	push	ar5
      000597 C0 07            [24] 1571 	push	ar7
      000599 C0 06            [24] 1572 	push	ar6
      00059B C0 05            [24] 1573 	push	ar5
      00059D C0 04            [24] 1574 	push	ar4
      00059F C0 03            [24] 1575 	push	ar3
      0005A1 C0 02            [24] 1576 	push	ar2
      0005A3 C0 02            [24] 1577 	push	ar2
      0005A5 C0 03            [24] 1578 	push	ar3
      0005A7 74r74            [12] 1579 	mov	a,#___str_24
      0005A9 C0 E0            [24] 1580 	push	acc
      0005AB 74s02            [12] 1581 	mov	a,#(___str_24 >> 8)
      0005AD C0 E0            [24] 1582 	push	acc
      0005AF 74 80            [12] 1583 	mov	a,#0x80
      0005B1 C0 E0            [24] 1584 	push	acc
      0005B3 12r00r00         [24] 1585 	lcall	_printf
      0005B6 E5 81            [12] 1586 	mov	a,sp
      0005B8 24 FB            [12] 1587 	add	a,#0xfb
      0005BA F5 81            [12] 1588 	mov	sp,a
      0005BC D0 02            [24] 1589 	pop	ar2
      0005BE D0 03            [24] 1590 	pop	ar3
      0005C0 D0 04            [24] 1591 	pop	ar4
      0005C2 D0 05            [24] 1592 	pop	ar5
                                   1593 ;	main.c:123: buffer[i] = get_user_buffer_size();
      0005C4 EA               [12] 1594 	mov	a,r2
      0005C5 24r25            [12] 1595 	add	a, #_main_buffer_40003_151
      0005C7 F8               [12] 1596 	mov	r0,a
      0005C8 EB               [12] 1597 	mov	a,r3
      0005C9 34s00            [12] 1598 	addc	a, #(_main_buffer_40003_151 >> 8)
      0005CB F9               [12] 1599 	mov	r1,a
      0005CC C0 03            [24] 1600 	push	ar3
      0005CE C0 02            [24] 1601 	push	ar2
      0005D0 C0 01            [24] 1602 	push	ar1
      0005D2 C0 00            [24] 1603 	push	ar0
      0005D4 12r01rBA         [24] 1604 	lcall	_get_user_buffer_size
      0005D7 AC 82            [24] 1605 	mov	r4, dpl
      0005D9 D0 00            [24] 1606 	pop	ar0
      0005DB D0 01            [24] 1607 	pop	ar1
      0005DD D0 02            [24] 1608 	pop	ar2
      0005DF D0 03            [24] 1609 	pop	ar3
      0005E1 D0 06            [24] 1610 	pop	ar6
      0005E3 D0 07            [24] 1611 	pop	ar7
      0005E5 88 82            [24] 1612 	mov	dpl,r0
      0005E7 89 83            [24] 1613 	mov	dph,r1
      0005E9 EC               [12] 1614 	mov	a,r4
      0005EA F0               [24] 1615 	movx	@dptr,a
                                   1616 ;	main.c:121: for (int i = 0; i < num_bytes; i++) {
      0005EB 0A               [12] 1617 	inc	r2
      0005EC BA 00 01         [24] 1618 	cjne	r2,#0x00,00361$
      0005EF 0B               [12] 1619 	inc	r3
      0005F0                       1620 00361$:
      0005F0 D0 05            [24] 1621 	pop	ar5
      0005F2 D0 04            [24] 1622 	pop	ar4
      0005F4 80 8E            [24] 1623 	sjmp	00149$
      0005F6                       1624 00103$:
                                   1625 ;	main.c:125: spi_buffer_write(num_bytes, start_address, buffer);
      0005F6 90r00r00         [24] 1626 	mov	dptr,#_spi_buffer_write_PARM_2
      0005F9 EC               [12] 1627 	mov	a,r4
      0005FA F0               [24] 1628 	movx	@dptr,a
      0005FB ED               [12] 1629 	mov	a,r5
      0005FC A3               [24] 1630 	inc	dptr
      0005FD F0               [24] 1631 	movx	@dptr,a
      0005FE 90r00r00         [24] 1632 	mov	dptr,#_spi_buffer_write_PARM_3
      000601 74r25            [12] 1633 	mov	a,#_main_buffer_40003_151
      000603 F0               [24] 1634 	movx	@dptr,a
      000604 74s00            [12] 1635 	mov	a,#(_main_buffer_40003_151 >> 8)
      000606 A3               [24] 1636 	inc	dptr
      000607 F0               [24] 1637 	movx	@dptr,a
      000608 E4               [12] 1638 	clr	a
      000609 A3               [24] 1639 	inc	dptr
      00060A F0               [24] 1640 	movx	@dptr,a
      00060B 8E 82            [24] 1641 	mov	dpl, r6
      00060D 8F 83            [24] 1642 	mov	dph, r7
      00060F 12r00r00         [24] 1643 	lcall	_spi_buffer_write
                                   1644 ;	main.c:126: break;
      000612 02r02rD4         [24] 1645 	ljmp	00146$
                                   1646 ;	main.c:128: case '3': {
      000615                       1647 00104$:
                                   1648 ;	main.c:129: printf("Enter the number of bytes to read:\n\r");
      000615 74r7E            [12] 1649 	mov	a,#___str_25
      000617 C0 E0            [24] 1650 	push	acc
      000619 74s02            [12] 1651 	mov	a,#(___str_25 >> 8)
      00061B C0 E0            [24] 1652 	push	acc
      00061D 74 80            [12] 1653 	mov	a,#0x80
      00061F C0 E0            [24] 1654 	push	acc
      000621 12r00r00         [24] 1655 	lcall	_printf
      000624 15 81            [12] 1656 	dec	sp
      000626 15 81            [12] 1657 	dec	sp
      000628 15 81            [12] 1658 	dec	sp
                                   1659 ;	main.c:130: int num_bytes = get_user_buffer_size();
      00062A 12r01rBA         [24] 1660 	lcall	_get_user_buffer_size
      00062D AE 82            [24] 1661 	mov	r6, dpl
      00062F AF 83            [24] 1662 	mov	r7, dph
                                   1663 ;	main.c:131: printf("Enter the starting address:\n\r");
      000631 C0 07            [24] 1664 	push	ar7
      000633 C0 06            [24] 1665 	push	ar6
      000635 74r33            [12] 1666 	mov	a,#___str_22
      000637 C0 E0            [24] 1667 	push	acc
      000639 74s02            [12] 1668 	mov	a,#(___str_22 >> 8)
      00063B C0 E0            [24] 1669 	push	acc
      00063D 74 80            [12] 1670 	mov	a,#0x80
      00063F C0 E0            [24] 1671 	push	acc
      000641 12r00r00         [24] 1672 	lcall	_printf
      000644 15 81            [12] 1673 	dec	sp
      000646 15 81            [12] 1674 	dec	sp
      000648 15 81            [12] 1675 	dec	sp
                                   1676 ;	main.c:132: uint16_t start_address = get_user_buffer_size();
      00064A 12r01rBA         [24] 1677 	lcall	_get_user_buffer_size
      00064D AC 82            [24] 1678 	mov	r4, dpl
      00064F AD 83            [24] 1679 	mov	r5, dph
      000651 D0 06            [24] 1680 	pop	ar6
      000653 D0 07            [24] 1681 	pop	ar7
      000655 90r00r00         [24] 1682 	mov	dptr,#_spi_buffer_read_PARM_2
      000658 EC               [12] 1683 	mov	a,r4
      000659 F0               [24] 1684 	movx	@dptr,a
      00065A ED               [12] 1685 	mov	a,r5
      00065B A3               [24] 1686 	inc	dptr
      00065C F0               [24] 1687 	movx	@dptr,a
                                   1688 ;	main.c:134: spi_buffer_read(num_bytes, start_address, buffer);
      00065D 90r00r00         [24] 1689 	mov	dptr,#_spi_buffer_read_PARM_3
      000660 74r25            [12] 1690 	mov	a,#_main_buffer_40003_156
      000662 F0               [24] 1691 	movx	@dptr,a
      000663 74s01            [12] 1692 	mov	a,#(_main_buffer_40003_156 >> 8)
      000665 A3               [24] 1693 	inc	dptr
      000666 F0               [24] 1694 	movx	@dptr,a
      000667 E4               [12] 1695 	clr	a
      000668 A3               [24] 1696 	inc	dptr
      000669 F0               [24] 1697 	movx	@dptr,a
      00066A 8E 82            [24] 1698 	mov	dpl, r6
      00066C 8F 83            [24] 1699 	mov	dph, r7
      00066E 12r00r00         [24] 1700 	lcall	_spi_buffer_read
                                   1701 ;	main.c:135: break;
      000671 02r02rD4         [24] 1702 	ljmp	00146$
                                   1703 ;	main.c:137: case '4': {
      000674                       1704 00105$:
                                   1705 ;	main.c:138: printf("Enter the MAC register bank to select:\n\r");
      000674 74rA3            [12] 1706 	mov	a,#___str_26
      000676 C0 E0            [24] 1707 	push	acc
      000678 74s02            [12] 1708 	mov	a,#(___str_26 >> 8)
      00067A C0 E0            [24] 1709 	push	acc
      00067C 74 80            [12] 1710 	mov	a,#0x80
      00067E C0 E0            [24] 1711 	push	acc
      000680 12r00r00         [24] 1712 	lcall	_printf
      000683 15 81            [12] 1713 	dec	sp
      000685 15 81            [12] 1714 	dec	sp
      000687 15 81            [12] 1715 	dec	sp
                                   1716 ;	main.c:139: uint8_t reg_bank = get_user_buffer_size();
      000689 12r01rBA         [24] 1717 	lcall	_get_user_buffer_size
      00068C AE 82            [24] 1718 	mov	r6, dpl
                                   1719 ;	main.c:140: printf("Enter the address of the MAC Register:\n\r");
      00068E C0 06            [24] 1720 	push	ar6
      000690 74rCC            [12] 1721 	mov	a,#___str_27
      000692 C0 E0            [24] 1722 	push	acc
      000694 74s02            [12] 1723 	mov	a,#(___str_27 >> 8)
      000696 C0 E0            [24] 1724 	push	acc
      000698 74 80            [12] 1725 	mov	a,#0x80
      00069A C0 E0            [24] 1726 	push	acc
      00069C 12r00r00         [24] 1727 	lcall	_printf
      00069F 15 81            [12] 1728 	dec	sp
      0006A1 15 81            [12] 1729 	dec	sp
      0006A3 15 81            [12] 1730 	dec	sp
                                   1731 ;	main.c:141: uint8_t addr = get_user_buffer_size();
      0006A5 12r01rBA         [24] 1732 	lcall	_get_user_buffer_size
      0006A8 AD 82            [24] 1733 	mov	r5, dpl
      0006AA D0 06            [24] 1734 	pop	ar6
                                   1735 ;	main.c:142: uint8_t data = mac_spi_read(addr, reg_bank);
      0006AC 90r00r00         [24] 1736 	mov	dptr,#_mac_spi_read_PARM_2
      0006AF EE               [12] 1737 	mov	a,r6
      0006B0 F0               [24] 1738 	movx	@dptr,a
      0006B1 8D 82            [24] 1739 	mov	dpl, r5
      0006B3 12r00r00         [24] 1740 	lcall	_mac_spi_read
      0006B6 AF 82            [24] 1741 	mov	r7, dpl
                                   1742 ;	main.c:143: printf("MAC Register Data: 0x%02X\n\r", data);
      0006B8 7E 00            [12] 1743 	mov	r6,#0x00
      0006BA C0 07            [24] 1744 	push	ar7
      0006BC C0 06            [24] 1745 	push	ar6
      0006BE 74rF5            [12] 1746 	mov	a,#___str_28
      0006C0 C0 E0            [24] 1747 	push	acc
      0006C2 74s02            [12] 1748 	mov	a,#(___str_28 >> 8)
      0006C4 C0 E0            [24] 1749 	push	acc
      0006C6 74 80            [12] 1750 	mov	a,#0x80
      0006C8 C0 E0            [24] 1751 	push	acc
      0006CA 12r00r00         [24] 1752 	lcall	_printf
      0006CD E5 81            [12] 1753 	mov	a,sp
      0006CF 24 FB            [12] 1754 	add	a,#0xfb
      0006D1 F5 81            [12] 1755 	mov	sp,a
                                   1756 ;	main.c:144: break;
      0006D3 02r02rD4         [24] 1757 	ljmp	00146$
                                   1758 ;	main.c:146: case '5': {
      0006D6                       1759 00106$:
                                   1760 ;	main.c:147: printf("Enter the PHY register address:\n\r");
      0006D6 74r11            [12] 1761 	mov	a,#___str_29
      0006D8 C0 E0            [24] 1762 	push	acc
      0006DA 74s03            [12] 1763 	mov	a,#(___str_29 >> 8)
      0006DC C0 E0            [24] 1764 	push	acc
      0006DE 74 80            [12] 1765 	mov	a,#0x80
      0006E0 C0 E0            [24] 1766 	push	acc
      0006E2 12r00r00         [24] 1767 	lcall	_printf
      0006E5 15 81            [12] 1768 	dec	sp
      0006E7 15 81            [12] 1769 	dec	sp
      0006E9 15 81            [12] 1770 	dec	sp
                                   1771 ;	main.c:148: uint8_t addr = get_user_buffer_size();
      0006EB 12r01rBA         [24] 1772 	lcall	_get_user_buffer_size
      0006EE AE 82            [24] 1773 	mov	r6, dpl
                                   1774 ;	main.c:149: printf("Enter the 16-bit data to write:\n\r");
      0006F0 C0 06            [24] 1775 	push	ar6
      0006F2 74r33            [12] 1776 	mov	a,#___str_30
      0006F4 C0 E0            [24] 1777 	push	acc
      0006F6 74s03            [12] 1778 	mov	a,#(___str_30 >> 8)
      0006F8 C0 E0            [24] 1779 	push	acc
      0006FA 74 80            [12] 1780 	mov	a,#0x80
      0006FC C0 E0            [24] 1781 	push	acc
      0006FE 12r00r00         [24] 1782 	lcall	_printf
      000701 15 81            [12] 1783 	dec	sp
      000703 15 81            [12] 1784 	dec	sp
      000705 15 81            [12] 1785 	dec	sp
                                   1786 ;	main.c:150: uint16_t data = get_user_buffer_size();
      000707 12r01rBA         [24] 1787 	lcall	_get_user_buffer_size
      00070A AD 82            [24] 1788 	mov	r5, dpl
      00070C AF 83            [24] 1789 	mov	r7, dph
      00070E D0 06            [24] 1790 	pop	ar6
                                   1791 ;	main.c:151: phy_spi_write(addr, data);
      000710 90r00r00         [24] 1792 	mov	dptr,#_phy_spi_write_PARM_2
      000713 ED               [12] 1793 	mov	a,r5
      000714 F0               [24] 1794 	movx	@dptr,a
      000715 EF               [12] 1795 	mov	a,r7
      000716 A3               [24] 1796 	inc	dptr
      000717 F0               [24] 1797 	movx	@dptr,a
      000718 8E 82            [24] 1798 	mov	dpl, r6
      00071A C0 07            [24] 1799 	push	ar7
      00071C C0 05            [24] 1800 	push	ar5
      00071E 12r00r00         [24] 1801 	lcall	_phy_spi_write
      000721 D0 05            [24] 1802 	pop	ar5
      000723 D0 07            [24] 1803 	pop	ar7
                                   1804 ;	main.c:152: printf("PHY Write Data: 0x%04X\n\r", data);
      000725 C0 05            [24] 1805 	push	ar5
      000727 C0 07            [24] 1806 	push	ar7
      000729 74r55            [12] 1807 	mov	a,#___str_31
      00072B C0 E0            [24] 1808 	push	acc
      00072D 74s03            [12] 1809 	mov	a,#(___str_31 >> 8)
      00072F C0 E0            [24] 1810 	push	acc
      000731 74 80            [12] 1811 	mov	a,#0x80
      000733 C0 E0            [24] 1812 	push	acc
      000735 12r00r00         [24] 1813 	lcall	_printf
      000738 E5 81            [12] 1814 	mov	a,sp
      00073A 24 FB            [12] 1815 	add	a,#0xfb
      00073C F5 81            [12] 1816 	mov	sp,a
                                   1817 ;	main.c:153: break;
      00073E 02r02rD4         [24] 1818 	ljmp	00146$
                                   1819 ;	main.c:155: case '6': {
      000741                       1820 00107$:
                                   1821 ;	main.c:156: printf("Enter the PHY register address to read:\n\r");
      000741 74r6E            [12] 1822 	mov	a,#___str_32
      000743 C0 E0            [24] 1823 	push	acc
      000745 74s03            [12] 1824 	mov	a,#(___str_32 >> 8)
      000747 C0 E0            [24] 1825 	push	acc
      000749 74 80            [12] 1826 	mov	a,#0x80
      00074B C0 E0            [24] 1827 	push	acc
      00074D 12r00r00         [24] 1828 	lcall	_printf
      000750 15 81            [12] 1829 	dec	sp
      000752 15 81            [12] 1830 	dec	sp
      000754 15 81            [12] 1831 	dec	sp
                                   1832 ;	main.c:157: uint8_t addr = get_user_buffer_size();
      000756 12r01rBA         [24] 1833 	lcall	_get_user_buffer_size
                                   1834 ;	main.c:158: uint16_t data = phy_spi_read(addr);
      000759 12r00r00         [24] 1835 	lcall	_phy_spi_read
      00075C AE 82            [24] 1836 	mov	r6, dpl
      00075E AF 83            [24] 1837 	mov	r7, dph
                                   1838 ;	main.c:159: printf("PHY Read Data: 0x%04X\n\r", data);
      000760 C0 06            [24] 1839 	push	ar6
      000762 C0 07            [24] 1840 	push	ar7
      000764 74r98            [12] 1841 	mov	a,#___str_33
      000766 C0 E0            [24] 1842 	push	acc
      000768 74s03            [12] 1843 	mov	a,#(___str_33 >> 8)
      00076A C0 E0            [24] 1844 	push	acc
      00076C 74 80            [12] 1845 	mov	a,#0x80
      00076E C0 E0            [24] 1846 	push	acc
      000770 12r00r00         [24] 1847 	lcall	_printf
      000773 E5 81            [12] 1848 	mov	a,sp
      000775 24 FB            [12] 1849 	add	a,#0xfb
      000777 F5 81            [12] 1850 	mov	sp,a
                                   1851 ;	main.c:160: break;
      000779 02r02rD4         [24] 1852 	ljmp	00146$
                                   1853 ;	main.c:162: case '7': {
      00077C                       1854 00108$:
                                   1855 ;	main.c:163: printf("Resetting ENC28J60...\n\r");
      00077C 74rB0            [12] 1856 	mov	a,#___str_34
      00077E C0 E0            [24] 1857 	push	acc
      000780 74s03            [12] 1858 	mov	a,#(___str_34 >> 8)
      000782 C0 E0            [24] 1859 	push	acc
      000784 74 80            [12] 1860 	mov	a,#0x80
      000786 C0 E0            [24] 1861 	push	acc
      000788 12r00r00         [24] 1862 	lcall	_printf
      00078B 15 81            [12] 1863 	dec	sp
      00078D 15 81            [12] 1864 	dec	sp
      00078F 15 81            [12] 1865 	dec	sp
                                   1866 ;	main.c:164: enc_reset();
      000791 12r00r00         [24] 1867 	lcall	_enc_reset
                                   1868 ;	main.c:165: break;
      000794 02r02rD4         [24] 1869 	ljmp	00146$
                                   1870 ;	main.c:167: case '8': {
      000797                       1871 00109$:
                                   1872 ;	main.c:168: printf("Enter the ETH register address to read:\n\r");
      000797 74rC8            [12] 1873 	mov	a,#___str_35
      000799 C0 E0            [24] 1874 	push	acc
      00079B 74s03            [12] 1875 	mov	a,#(___str_35 >> 8)
      00079D C0 E0            [24] 1876 	push	acc
      00079F 74 80            [12] 1877 	mov	a,#0x80
      0007A1 C0 E0            [24] 1878 	push	acc
      0007A3 12r00r00         [24] 1879 	lcall	_printf
      0007A6 15 81            [12] 1880 	dec	sp
      0007A8 15 81            [12] 1881 	dec	sp
      0007AA 15 81            [12] 1882 	dec	sp
                                   1883 ;	main.c:169: uint8_t addr = get_user_buffer_size();
      0007AC 12r01rBA         [24] 1884 	lcall	_get_user_buffer_size
      0007AF AE 82            [24] 1885 	mov	r6, dpl
                                   1886 ;	main.c:170: printf("Enter the bank (0 or 1):\n\r");
      0007B1 C0 06            [24] 1887 	push	ar6
      0007B3 74rF2            [12] 1888 	mov	a,#___str_36
      0007B5 C0 E0            [24] 1889 	push	acc
      0007B7 74s03            [12] 1890 	mov	a,#(___str_36 >> 8)
      0007B9 C0 E0            [24] 1891 	push	acc
      0007BB 74 80            [12] 1892 	mov	a,#0x80
      0007BD C0 E0            [24] 1893 	push	acc
      0007BF 12r00r00         [24] 1894 	lcall	_printf
      0007C2 15 81            [12] 1895 	dec	sp
      0007C4 15 81            [12] 1896 	dec	sp
      0007C6 15 81            [12] 1897 	dec	sp
                                   1898 ;	main.c:171: uint8_t bank = get_user_buffer_size();
      0007C8 12r01rBA         [24] 1899 	lcall	_get_user_buffer_size
      0007CB AD 82            [24] 1900 	mov	r5, dpl
      0007CD D0 06            [24] 1901 	pop	ar6
      0007CF 90r00r00         [24] 1902 	mov	dptr,#_eth_spi_read_PARM_2
      0007D2 ED               [12] 1903 	mov	a,r5
      0007D3 F0               [24] 1904 	movx	@dptr,a
                                   1905 ;	main.c:172: uint8_t data = eth_spi_read(addr, bank);
      0007D4 8E 82            [24] 1906 	mov	dpl, r6
      0007D6 12r00r00         [24] 1907 	lcall	_eth_spi_read
      0007D9 AF 82            [24] 1908 	mov	r7, dpl
                                   1909 ;	main.c:173: printf("ETH Register Data: 0x%02X\n\r", data);
      0007DB 7E 00            [12] 1910 	mov	r6,#0x00
      0007DD C0 07            [24] 1911 	push	ar7
      0007DF C0 06            [24] 1912 	push	ar6
      0007E1 74r0D            [12] 1913 	mov	a,#___str_37
      0007E3 C0 E0            [24] 1914 	push	acc
      0007E5 74s04            [12] 1915 	mov	a,#(___str_37 >> 8)
      0007E7 C0 E0            [24] 1916 	push	acc
      0007E9 74 80            [12] 1917 	mov	a,#0x80
      0007EB C0 E0            [24] 1918 	push	acc
      0007ED 12r00r00         [24] 1919 	lcall	_printf
      0007F0 E5 81            [12] 1920 	mov	a,sp
      0007F2 24 FB            [12] 1921 	add	a,#0xfb
      0007F4 F5 81            [12] 1922 	mov	sp,a
                                   1923 ;	main.c:174: break;
      0007F6 02r02rD4         [24] 1924 	ljmp	00146$
                                   1925 ;	main.c:176: case '9': {
      0007F9                       1926 00110$:
                                   1927 ;	main.c:177: printf("\n\rChoose an action: \n\r");
      0007F9 74r1C            [12] 1928 	mov	a,#___str_2
      0007FB C0 E0            [24] 1929 	push	acc
      0007FD 74s00            [12] 1930 	mov	a,#(___str_2 >> 8)
      0007FF C0 E0            [24] 1931 	push	acc
      000801 74 80            [12] 1932 	mov	a,#0x80
      000803 C0 E0            [24] 1933 	push	acc
      000805 12r00r00         [24] 1934 	lcall	_printf
      000808 15 81            [12] 1935 	dec	sp
      00080A 15 81            [12] 1936 	dec	sp
      00080C 15 81            [12] 1937 	dec	sp
                                   1938 ;	main.c:178: printf("1 --> Control Write\n\r");
      00080E 74r33            [12] 1939 	mov	a,#___str_3
      000810 C0 E0            [24] 1940 	push	acc
      000812 74s00            [12] 1941 	mov	a,#(___str_3 >> 8)
      000814 C0 E0            [24] 1942 	push	acc
      000816 74 80            [12] 1943 	mov	a,#0x80
      000818 C0 E0            [24] 1944 	push	acc
      00081A 12r00r00         [24] 1945 	lcall	_printf
      00081D 15 81            [12] 1946 	dec	sp
      00081F 15 81            [12] 1947 	dec	sp
      000821 15 81            [12] 1948 	dec	sp
                                   1949 ;	main.c:179: printf("2 --> Buffer Write\n\r");
      000823 74r49            [12] 1950 	mov	a,#___str_4
      000825 C0 E0            [24] 1951 	push	acc
      000827 74s00            [12] 1952 	mov	a,#(___str_4 >> 8)
      000829 C0 E0            [24] 1953 	push	acc
      00082B 74 80            [12] 1954 	mov	a,#0x80
      00082D C0 E0            [24] 1955 	push	acc
      00082F 12r00r00         [24] 1956 	lcall	_printf
      000832 15 81            [12] 1957 	dec	sp
      000834 15 81            [12] 1958 	dec	sp
      000836 15 81            [12] 1959 	dec	sp
                                   1960 ;	main.c:180: printf("3 --> Buffer Read\n\r");
      000838 74r5E            [12] 1961 	mov	a,#___str_5
      00083A C0 E0            [24] 1962 	push	acc
      00083C 74s00            [12] 1963 	mov	a,#(___str_5 >> 8)
      00083E C0 E0            [24] 1964 	push	acc
      000840 74 80            [12] 1965 	mov	a,#0x80
      000842 C0 E0            [24] 1966 	push	acc
      000844 12r00r00         [24] 1967 	lcall	_printf
      000847 15 81            [12] 1968 	dec	sp
      000849 15 81            [12] 1969 	dec	sp
      00084B 15 81            [12] 1970 	dec	sp
                                   1971 ;	main.c:181: printf("4 --> MAC Register Read\n\r");
      00084D 74r72            [12] 1972 	mov	a,#___str_6
      00084F C0 E0            [24] 1973 	push	acc
      000851 74s00            [12] 1974 	mov	a,#(___str_6 >> 8)
      000853 C0 E0            [24] 1975 	push	acc
      000855 74 80            [12] 1976 	mov	a,#0x80
      000857 C0 E0            [24] 1977 	push	acc
      000859 12r00r00         [24] 1978 	lcall	_printf
      00085C 15 81            [12] 1979 	dec	sp
      00085E 15 81            [12] 1980 	dec	sp
      000860 15 81            [12] 1981 	dec	sp
                                   1982 ;	main.c:182: printf("5 --> PHY SPI Write\n\r");
      000862 74r8C            [12] 1983 	mov	a,#___str_7
      000864 C0 E0            [24] 1984 	push	acc
      000866 74s00            [12] 1985 	mov	a,#(___str_7 >> 8)
      000868 C0 E0            [24] 1986 	push	acc
      00086A 74 80            [12] 1987 	mov	a,#0x80
      00086C C0 E0            [24] 1988 	push	acc
      00086E 12r00r00         [24] 1989 	lcall	_printf
      000871 15 81            [12] 1990 	dec	sp
      000873 15 81            [12] 1991 	dec	sp
      000875 15 81            [12] 1992 	dec	sp
                                   1993 ;	main.c:183: printf("6 --> PHY SPI Read\n\r");
      000877 74rA2            [12] 1994 	mov	a,#___str_8
      000879 C0 E0            [24] 1995 	push	acc
      00087B 74s00            [12] 1996 	mov	a,#(___str_8 >> 8)
      00087D C0 E0            [24] 1997 	push	acc
      00087F 74 80            [12] 1998 	mov	a,#0x80
      000881 C0 E0            [24] 1999 	push	acc
      000883 12r00r00         [24] 2000 	lcall	_printf
      000886 15 81            [12] 2001 	dec	sp
      000888 15 81            [12] 2002 	dec	sp
      00088A 15 81            [12] 2003 	dec	sp
                                   2004 ;	main.c:184: printf("7 --> ENC Reset\n\r");
      00088C 74rB7            [12] 2005 	mov	a,#___str_9
      00088E C0 E0            [24] 2006 	push	acc
      000890 74s00            [12] 2007 	mov	a,#(___str_9 >> 8)
      000892 C0 E0            [24] 2008 	push	acc
      000894 74 80            [12] 2009 	mov	a,#0x80
      000896 C0 E0            [24] 2010 	push	acc
      000898 12r00r00         [24] 2011 	lcall	_printf
      00089B 15 81            [12] 2012 	dec	sp
      00089D 15 81            [12] 2013 	dec	sp
      00089F 15 81            [12] 2014 	dec	sp
                                   2015 ;	main.c:185: printf("8 --> Read ETH Register\n\r");
      0008A1 74rC9            [12] 2016 	mov	a,#___str_10
      0008A3 C0 E0            [24] 2017 	push	acc
      0008A5 74s00            [12] 2018 	mov	a,#(___str_10 >> 8)
      0008A7 C0 E0            [24] 2019 	push	acc
      0008A9 74 80            [12] 2020 	mov	a,#0x80
      0008AB C0 E0            [24] 2021 	push	acc
      0008AD 12r00r00         [24] 2022 	lcall	_printf
      0008B0 15 81            [12] 2023 	dec	sp
      0008B2 15 81            [12] 2024 	dec	sp
      0008B4 15 81            [12] 2025 	dec	sp
                                   2026 ;	main.c:186: break;
      0008B6 02r02rD4         [24] 2027 	ljmp	00146$
                                   2028 ;	main.c:188: case 'A':{
      0008B9                       2029 00111$:
                                   2030 ;	main.c:189: send_arp_request();
      0008B9 12r00r00         [24] 2031 	lcall	_send_arp_request
                                   2032 ;	main.c:190: while(1)
      0008BC                       2033 00131$:
                                   2034 ;	main.c:192: if(ENC_pkt_count() > 0)
      0008BC 12r00r00         [24] 2035 	lcall	_ENC_pkt_count
      0008BF E5 82            [12] 2036 	mov	a, dpl
      0008C1 60 F9            [24] 2037 	jz	00131$
                                   2038 ;	main.c:199: if (gNextPacketPtr == 0)
      0008C3 90r02r25         [24] 2039 	mov	dptr,#_main_gNextPacketPtr_60001_172
      0008C6 E0               [24] 2040 	movx	a,@dptr
      0008C7 FE               [12] 2041 	mov	r6,a
      0008C8 A3               [24] 2042 	inc	dptr
      0008C9 E0               [24] 2043 	movx	a,@dptr
      0008CA FF               [12] 2044 	mov	r7,a
      0008CB 90r02r25         [24] 2045 	mov	dptr,#_main_gNextPacketPtr_60001_172
      0008CE E0               [24] 2046 	movx	a,@dptr
      0008CF F5 F0            [12] 2047 	mov	b,a
      0008D1 A3               [24] 2048 	inc	dptr
      0008D2 E0               [24] 2049 	movx	a,@dptr
      0008D3 45 F0            [12] 2050 	orl	a,b
      0008D5 70 08            [24] 2051 	jnz	00113$
                                   2052 ;	main.c:201: update_ERXRDPT(RX_BUFFER_END);
      0008D7 90 1B FF         [24] 2053 	mov	dptr,#0x1bff
      0008DA 12r00r00         [24] 2054 	lcall	_update_ERXRDPT
      0008DD 80 0C            [24] 2055 	sjmp	00114$
      0008DF                       2056 00113$:
                                   2057 ;	main.c:205: update_ERXRDPT(gNextPacketPtr - 1);
      0008DF 1E               [12] 2058 	dec	r6
      0008E0 BE FF 01         [24] 2059 	cjne	r6,#0xff,00364$
      0008E3 1F               [12] 2060 	dec	r7
      0008E4                       2061 00364$:
      0008E4 8E 82            [24] 2062 	mov	dpl, r6
      0008E6 8F 83            [24] 2063 	mov	dph, r7
      0008E8 12r00r00         [24] 2064 	lcall	_update_ERXRDPT
      0008EB                       2065 00114$:
                                   2066 ;	main.c:207: uint8_t *packet_data = (uint8_t *)malloc(6);
      0008EB 90 00 06         [24] 2067 	mov	dptr,#0x0006
      0008EE 12r00r00         [24] 2068 	lcall	_malloc
      0008F1 AE 82            [24] 2069 	mov	r6, dpl
      0008F3 AD 83            [24] 2070 	mov	r5,dph
      0008F5 7F 00            [12] 2071 	mov	r7,#0x00
                                   2072 ;	main.c:208: spi_buffer_read(6, gNextPacketPtr, packet_data);
      0008F7 90r02r25         [24] 2073 	mov	dptr,#_main_gNextPacketPtr_60001_172
      0008FA E0               [24] 2074 	movx	a,@dptr
      0008FB FB               [12] 2075 	mov	r3,a
      0008FC A3               [24] 2076 	inc	dptr
      0008FD E0               [24] 2077 	movx	a,@dptr
      0008FE FC               [12] 2078 	mov	r4,a
      0008FF 90r00r00         [24] 2079 	mov	dptr,#_spi_buffer_read_PARM_2
      000902 EB               [12] 2080 	mov	a,r3
      000903 F0               [24] 2081 	movx	@dptr,a
      000904 EC               [12] 2082 	mov	a,r4
      000905 A3               [24] 2083 	inc	dptr
      000906 F0               [24] 2084 	movx	@dptr,a
      000907 90r00r00         [24] 2085 	mov	dptr,#_spi_buffer_read_PARM_3
      00090A EE               [12] 2086 	mov	a,r6
      00090B F0               [24] 2087 	movx	@dptr,a
      00090C ED               [12] 2088 	mov	a,r5
      00090D A3               [24] 2089 	inc	dptr
      00090E F0               [24] 2090 	movx	@dptr,a
      00090F EF               [12] 2091 	mov	a,r7
      000910 A3               [24] 2092 	inc	dptr
      000911 F0               [24] 2093 	movx	@dptr,a
      000912 90 00 06         [24] 2094 	mov	dptr,#0x0006
      000915 C0 07            [24] 2095 	push	ar7
      000917 C0 06            [24] 2096 	push	ar6
      000919 C0 05            [24] 2097 	push	ar5
      00091B 12r00r00         [24] 2098 	lcall	_spi_buffer_read
      00091E D0 05            [24] 2099 	pop	ar5
      000920 D0 06            [24] 2100 	pop	ar6
      000922 D0 07            [24] 2101 	pop	ar7
                                   2102 ;	main.c:212: nextPacket = (uint16_t)(packet_data[1] << 8 | packet_data[0]); // Next Packet (MSB, LSB)
      000924 74 01            [12] 2103 	mov	a,#0x01
      000926 2E               [12] 2104 	add	a, r6
      000927 FA               [12] 2105 	mov	r2,a
      000928 E4               [12] 2106 	clr	a
      000929 3D               [12] 2107 	addc	a, r5
      00092A FB               [12] 2108 	mov	r3,a
      00092B 8F 04            [24] 2109 	mov	ar4,r7
      00092D 8A 82            [24] 2110 	mov	dpl,r2
      00092F 8B 83            [24] 2111 	mov	dph,r3
      000931 8C F0            [24] 2112 	mov	b,r4
      000933 12r00r00         [24] 2113 	lcall	__gptrget
      000936 FC               [12] 2114 	mov	r4,a
      000937 7A 00            [12] 2115 	mov	r2,#0x00
      000939 8E 82            [24] 2116 	mov	dpl,r6
      00093B 8D 83            [24] 2117 	mov	dph,r5
      00093D 8F F0            [24] 2118 	mov	b,r7
      00093F 12r00r00         [24] 2119 	lcall	__gptrget
      000942 7B 00            [12] 2120 	mov	r3,#0x00
      000944 42 02            [12] 2121 	orl	ar2,a
      000946 EB               [12] 2122 	mov	a,r3
      000947 42 04            [12] 2123 	orl	ar4,a
      000949 8A*08            [24] 2124 	mov	_main_sloc4_1_0,r2
      00094B 8C*09            [24] 2125 	mov	(_main_sloc4_1_0 + 1),r4
                                   2126 ;	main.c:213: byteCount = (uint16_t)(packet_data[3] << 8 | packet_data[2]);  // Byte Count (MSB, LSB)
      00094D 74 03            [12] 2127 	mov	a,#0x03
      00094F 2E               [12] 2128 	add	a, r6
      000950 F8               [12] 2129 	mov	r0,a
      000951 E4               [12] 2130 	clr	a
      000952 3D               [12] 2131 	addc	a, r5
      000953 F9               [12] 2132 	mov	r1,a
      000954 8F 03            [24] 2133 	mov	ar3,r7
      000956 88 82            [24] 2134 	mov	dpl,r0
      000958 89 83            [24] 2135 	mov	dph,r1
      00095A 8B F0            [24] 2136 	mov	b,r3
      00095C 12r00r00         [24] 2137 	lcall	__gptrget
      00095F F8               [12] 2138 	mov	r0,a
      000960 7B 00            [12] 2139 	mov	r3,#0x00
      000962 88*01            [24] 2140 	mov	(_main_sloc0_1_0 + 1),r0
      000964 8B*00            [24] 2141 	mov	_main_sloc0_1_0,r3
      000966 74 02            [12] 2142 	mov	a,#0x02
      000968 2E               [12] 2143 	add	a, r6
      000969 F8               [12] 2144 	mov	r0,a
      00096A E4               [12] 2145 	clr	a
      00096B 3D               [12] 2146 	addc	a, r5
      00096C F9               [12] 2147 	mov	r1,a
      00096D 8F 03            [24] 2148 	mov	ar3,r7
      00096F 88 82            [24] 2149 	mov	dpl,r0
      000971 89 83            [24] 2150 	mov	dph,r1
      000973 8B F0            [24] 2151 	mov	b,r3
      000975 12r00r00         [24] 2152 	lcall	__gptrget
      000978 F8               [12] 2153 	mov	r0,a
      000979 7B 00            [12] 2154 	mov	r3,#0x00
      00097B E5*01            [12] 2155 	mov	a,(_main_sloc0_1_0 + 1)
      00097D 42 03            [12] 2156 	orl	ar3,a
      00097F 88*00            [24] 2157 	mov	_main_sloc0_1_0,r0
      000981 8B*01            [24] 2158 	mov	(_main_sloc0_1_0 + 1),r3
                                   2159 ;	main.c:214: status = (uint16_t)(packet_data[5] << 8 | packet_data[4]);     // Status (MSB, LSB)
      000983 74 05            [12] 2160 	mov	a,#0x05
      000985 2E               [12] 2161 	add	a, r6
      000986 F8               [12] 2162 	mov	r0,a
      000987 E4               [12] 2163 	clr	a
      000988 3D               [12] 2164 	addc	a, r5
      000989 F9               [12] 2165 	mov	r1,a
      00098A 8F 03            [24] 2166 	mov	ar3,r7
      00098C 88 82            [24] 2167 	mov	dpl,r0
      00098E 89 83            [24] 2168 	mov	dph,r1
      000990 8B F0            [24] 2169 	mov	b,r3
      000992 12r00r00         [24] 2170 	lcall	__gptrget
      000995 F8               [12] 2171 	mov	r0,a
      000996 7B 00            [12] 2172 	mov	r3,#0x00
      000998 88*03            [24] 2173 	mov	(_main_sloc1_1_0 + 1),r0
      00099A 8B*02            [24] 2174 	mov	_main_sloc1_1_0,r3
      00099C 74 04            [12] 2175 	mov	a,#0x04
      00099E 2E               [12] 2176 	add	a, r6
      00099F F8               [12] 2177 	mov	r0,a
      0009A0 E4               [12] 2178 	clr	a
      0009A1 3D               [12] 2179 	addc	a, r5
      0009A2 F9               [12] 2180 	mov	r1,a
      0009A3 8F 03            [24] 2181 	mov	ar3,r7
      0009A5 88 82            [24] 2182 	mov	dpl,r0
      0009A7 89 83            [24] 2183 	mov	dph,r1
      0009A9 8B F0            [24] 2184 	mov	b,r3
      0009AB 12r00r00         [24] 2185 	lcall	__gptrget
      0009AE F8               [12] 2186 	mov	r0,a
      0009AF 7B 00            [12] 2187 	mov	r3,#0x00
      0009B1 E5*03            [12] 2188 	mov	a,(_main_sloc1_1_0 + 1)
      0009B3 42 03            [12] 2189 	orl	ar3,a
      0009B5 88*02            [24] 2190 	mov	_main_sloc1_1_0,r0
      0009B7 8B*03            [24] 2191 	mov	(_main_sloc1_1_0 + 1),r3
                                   2192 ;	main.c:217: len = byteCount - 4;
      0009B9 A9*00            [24] 2193 	mov	r1,_main_sloc0_1_0
      0009BB AB*01            [24] 2194 	mov	r3,(_main_sloc0_1_0 + 1)
      0009BD E9               [12] 2195 	mov	a,r1
      0009BE 24 FC            [12] 2196 	add	a,#0xfc
      0009C0 F9               [12] 2197 	mov	r1,a
      0009C1 EB               [12] 2198 	mov	a,r3
      0009C2 34 FF            [12] 2199 	addc	a,#0xff
      0009C4 FB               [12] 2200 	mov	r3,a
      0009C5 89*06            [24] 2201 	mov	_main_sloc3_1_0,r1
      0009C7 8B*07            [24] 2202 	mov	(_main_sloc3_1_0 + 1),r3
                                   2203 ;	main.c:219: uint8_t *packet_data_actual = (uint8_t *)malloc(len);
      0009C9 85*06*04         [24] 2204 	mov	_main_sloc2_1_0,_main_sloc3_1_0
      0009CC 85*07*05         [24] 2205 	mov	(_main_sloc2_1_0 + 1),(_main_sloc3_1_0 + 1)
      0009CF 85*04 82         [24] 2206 	mov	dpl, _main_sloc2_1_0
      0009D2 85*05 83         [24] 2207 	mov	dph, (_main_sloc2_1_0 + 1)
      0009D5 C0 07            [24] 2208 	push	ar7
      0009D7 C0 06            [24] 2209 	push	ar6
      0009D9 C0 05            [24] 2210 	push	ar5
      0009DB 12r00r00         [24] 2211 	lcall	_malloc
      0009DE A8 82            [24] 2212 	mov	r0, dpl
      0009E0 AB 83            [24] 2213 	mov	r3, dph
      0009E2 D0 05            [24] 2214 	pop	ar5
      0009E4 D0 06            [24] 2215 	pop	ar6
      0009E6 D0 07            [24] 2216 	pop	ar7
      0009E8 88*0A            [24] 2217 	mov	_main_sloc5_1_0,r0
      0009EA 8B*0B            [24] 2218 	mov	(_main_sloc5_1_0 + 1),r3
      0009EC 75*0C 00         [24] 2219 	mov	(_main_sloc5_1_0 + 2),#0x00
                                   2220 ;	main.c:220: spi_buffer_read(len, gNextPacketPtr + 6, packet_data_actual);
      0009EF 90r02r25         [24] 2221 	mov	dptr,#_main_gNextPacketPtr_60001_172
      0009F2 E0               [24] 2222 	movx	a,@dptr
      0009F3 FA               [12] 2223 	mov	r2,a
      0009F4 A3               [24] 2224 	inc	dptr
      0009F5 E0               [24] 2225 	movx	a,@dptr
      0009F6 FC               [12] 2226 	mov	r4,a
      0009F7 74 06            [12] 2227 	mov	a,#0x06
      0009F9 2A               [12] 2228 	add	a, r2
      0009FA FA               [12] 2229 	mov	r2,a
      0009FB E4               [12] 2230 	clr	a
      0009FC 3C               [12] 2231 	addc	a, r4
      0009FD FC               [12] 2232 	mov	r4,a
      0009FE 90r00r00         [24] 2233 	mov	dptr,#_spi_buffer_read_PARM_2
      000A01 EA               [12] 2234 	mov	a,r2
      000A02 F0               [24] 2235 	movx	@dptr,a
      000A03 EC               [12] 2236 	mov	a,r4
      000A04 A3               [24] 2237 	inc	dptr
      000A05 F0               [24] 2238 	movx	@dptr,a
      000A06 90r00r00         [24] 2239 	mov	dptr,#_spi_buffer_read_PARM_3
      000A09 E5*0A            [12] 2240 	mov	a,_main_sloc5_1_0
      000A0B F0               [24] 2241 	movx	@dptr,a
      000A0C E5*0B            [12] 2242 	mov	a,(_main_sloc5_1_0 + 1)
      000A0E A3               [24] 2243 	inc	dptr
      000A0F F0               [24] 2244 	movx	@dptr,a
      000A10 E5*0C            [12] 2245 	mov	a,(_main_sloc5_1_0 + 2)
      000A12 A3               [24] 2246 	inc	dptr
      000A13 F0               [24] 2247 	movx	@dptr,a
      000A14 85*06 82         [24] 2248 	mov	dpl, _main_sloc3_1_0
      000A17 85*07 83         [24] 2249 	mov	dph, (_main_sloc3_1_0 + 1)
      000A1A C0 07            [24] 2250 	push	ar7
      000A1C C0 06            [24] 2251 	push	ar6
      000A1E C0 05            [24] 2252 	push	ar5
      000A20 12r00r00         [24] 2253 	lcall	_spi_buffer_read
                                   2254 ;	main.c:222: int is_tcp_for_target = 0;
      000A23 90r02r27         [24] 2255 	mov	dptr,#_main_is_tcp_for_target_60004_177
      000A26 E4               [12] 2256 	clr	a
      000A27 F0               [24] 2257 	movx	@dptr,a
      000A28 A3               [24] 2258 	inc	dptr
      000A29 F0               [24] 2259 	movx	@dptr,a
                                   2260 ;	main.c:225: if (memcmp(packet_data_actual, device_mac, 6) == 0) {
      000A2A AA*0A            [24] 2261 	mov	r2,_main_sloc5_1_0
      000A2C AB*0B            [24] 2262 	mov	r3,(_main_sloc5_1_0 + 1)
      000A2E FC               [12] 2263 	mov	r4,a
      000A2F 90r00r00         [24] 2264 	mov	dptr,#_memcmp_PARM_2
      000A32 74r11            [12] 2265 	mov	a,#_main_device_mac_10000_141
      000A34 F0               [24] 2266 	movx	@dptr,a
      000A35 74s00            [12] 2267 	mov	a,#(_main_device_mac_10000_141 >> 8)
      000A37 A3               [24] 2268 	inc	dptr
      000A38 F0               [24] 2269 	movx	@dptr,a
      000A39 E4               [12] 2270 	clr	a
      000A3A A3               [24] 2271 	inc	dptr
      000A3B F0               [24] 2272 	movx	@dptr,a
      000A3C 90r00r00         [24] 2273 	mov	dptr,#_memcmp_PARM_3
      000A3F 74 06            [12] 2274 	mov	a,#0x06
      000A41 F0               [24] 2275 	movx	@dptr,a
      000A42 E4               [12] 2276 	clr	a
      000A43 A3               [24] 2277 	inc	dptr
      000A44 F0               [24] 2278 	movx	@dptr,a
      000A45 8A 82            [24] 2279 	mov	dpl, r2
      000A47 8B 83            [24] 2280 	mov	dph, r3
      000A49 8C F0            [24] 2281 	mov	b, r4
      000A4B 12r00r00         [24] 2282 	lcall	_memcmp
      000A4E E5 82            [12] 2283 	mov	a, dpl
      000A50 85 83 F0         [24] 2284 	mov	b, dph
      000A53 D0 05            [24] 2285 	pop	ar5
      000A55 D0 06            [24] 2286 	pop	ar6
      000A57 D0 07            [24] 2287 	pop	ar7
      000A59 45 F0            [12] 2288 	orl	a,b
      000A5B 70 70            [24] 2289 	jnz	00121$
                                   2290 ;	main.c:228: if (packet_data_actual[12] == 0x08 && packet_data_actual[13] == 0x00) {
      000A5D 74 0C            [12] 2291 	mov	a,#0x0c
      000A5F 25*0A            [12] 2292 	add	a, _main_sloc5_1_0
      000A61 FA               [12] 2293 	mov	r2,a
      000A62 E4               [12] 2294 	clr	a
      000A63 35*0B            [12] 2295 	addc	a, (_main_sloc5_1_0 + 1)
      000A65 FB               [12] 2296 	mov	r3,a
      000A66 AC*0C            [24] 2297 	mov	r4,(_main_sloc5_1_0 + 2)
      000A68 8A 82            [24] 2298 	mov	dpl,r2
      000A6A 8B 83            [24] 2299 	mov	dph,r3
      000A6C 8C F0            [24] 2300 	mov	b,r4
      000A6E 12r00r00         [24] 2301 	lcall	__gptrget
      000A71 FA               [12] 2302 	mov	r2,a
      000A72 BA 08 58         [24] 2303 	cjne	r2,#0x08,00121$
      000A75 74 0D            [12] 2304 	mov	a,#0x0d
      000A77 25*0A            [12] 2305 	add	a, _main_sloc5_1_0
      000A79 FA               [12] 2306 	mov	r2,a
      000A7A E4               [12] 2307 	clr	a
      000A7B 35*0B            [12] 2308 	addc	a, (_main_sloc5_1_0 + 1)
      000A7D FB               [12] 2309 	mov	r3,a
      000A7E AC*0C            [24] 2310 	mov	r4,(_main_sloc5_1_0 + 2)
      000A80 8A 82            [24] 2311 	mov	dpl,r2
      000A82 8B 83            [24] 2312 	mov	dph,r3
      000A84 8C F0            [24] 2313 	mov	b,r4
      000A86 12r00r00         [24] 2314 	lcall	__gptrget
      000A89 70 42            [24] 2315 	jnz	00121$
                                   2316 ;	main.c:229: printf("Valid ETHER packet.....................\n\r");
      000A8B C0 07            [24] 2317 	push	ar7
      000A8D C0 06            [24] 2318 	push	ar6
      000A8F C0 05            [24] 2319 	push	ar5
      000A91 74r29            [12] 2320 	mov	a,#___str_38
      000A93 C0 E0            [24] 2321 	push	acc
      000A95 74s04            [12] 2322 	mov	a,#(___str_38 >> 8)
      000A97 C0 E0            [24] 2323 	push	acc
      000A99 74 80            [12] 2324 	mov	a,#0x80
      000A9B C0 E0            [24] 2325 	push	acc
      000A9D 12r00r00         [24] 2326 	lcall	_printf
      000AA0 15 81            [12] 2327 	dec	sp
      000AA2 15 81            [12] 2328 	dec	sp
      000AA4 15 81            [12] 2329 	dec	sp
      000AA6 D0 05            [24] 2330 	pop	ar5
      000AA8 D0 06            [24] 2331 	pop	ar6
      000AAA D0 07            [24] 2332 	pop	ar7
                                   2333 ;	main.c:231: if (packet_data_actual[23] == 0x06) {
      000AAC 74 17            [12] 2334 	mov	a,#0x17
      000AAE 25*0A            [12] 2335 	add	a, _main_sloc5_1_0
      000AB0 FA               [12] 2336 	mov	r2,a
      000AB1 E4               [12] 2337 	clr	a
      000AB2 35*0B            [12] 2338 	addc	a, (_main_sloc5_1_0 + 1)
      000AB4 FB               [12] 2339 	mov	r3,a
      000AB5 AC*0C            [24] 2340 	mov	r4,(_main_sloc5_1_0 + 2)
      000AB7 8A 82            [24] 2341 	mov	dpl,r2
      000AB9 8B 83            [24] 2342 	mov	dph,r3
      000ABB 8C F0            [24] 2343 	mov	b,r4
      000ABD 12r00r00         [24] 2344 	lcall	__gptrget
      000AC0 FA               [12] 2345 	mov	r2,a
      000AC1 BA 06 09         [24] 2346 	cjne	r2,#0x06,00121$
                                   2347 ;	main.c:232: is_tcp_for_target = 1;
      000AC4 90r02r27         [24] 2348 	mov	dptr,#_main_is_tcp_for_target_60004_177
      000AC7 74 01            [12] 2349 	mov	a,#0x01
      000AC9 F0               [24] 2350 	movx	@dptr,a
      000ACA E4               [12] 2351 	clr	a
      000ACB A3               [24] 2352 	inc	dptr
      000ACC F0               [24] 2353 	movx	@dptr,a
      000ACD                       2354 00121$:
                                   2355 ;	main.c:236: if (is_tcp_for_target)
      000ACD 90r02r27         [24] 2356 	mov	dptr,#_main_is_tcp_for_target_60004_177
      000AD0 E0               [24] 2357 	movx	a,@dptr
      000AD1 F5 F0            [12] 2358 	mov	b,a
      000AD3 A3               [24] 2359 	inc	dptr
      000AD4 E0               [24] 2360 	movx	a,@dptr
      000AD5 45 F0            [12] 2361 	orl	a,b
      000AD7 70 03            [24] 2362 	jnz	00371$
      000AD9 02r0BrC9         [24] 2363 	ljmp	00126$
      000ADC                       2364 00371$:
                                   2365 ;	main.c:241: uint8_t *response = process_tcp_packet(packet_data_actual, len+4, &response_size);
      000ADC 74 04            [12] 2366 	mov	a,#0x04
      000ADE 25*04            [12] 2367 	add	a, _main_sloc2_1_0
      000AE0 FB               [12] 2368 	mov	r3,a
      000AE1 E4               [12] 2369 	clr	a
      000AE2 35*05            [12] 2370 	addc	a, (_main_sloc2_1_0 + 1)
      000AE4 FC               [12] 2371 	mov	r4,a
      000AE5 90r00r00         [24] 2372 	mov	dptr,#_process_tcp_packet_PARM_2
      000AE8 EB               [12] 2373 	mov	a,r3
      000AE9 F0               [24] 2374 	movx	@dptr,a
      000AEA EC               [12] 2375 	mov	a,r4
      000AEB A3               [24] 2376 	inc	dptr
      000AEC F0               [24] 2377 	movx	@dptr,a
      000AED 90r00r00         [24] 2378 	mov	dptr,#_process_tcp_packet_PARM_3
      000AF0 74r29            [12] 2379 	mov	a,#_main_response_size_70004_181
      000AF2 F0               [24] 2380 	movx	@dptr,a
      000AF3 74s02            [12] 2381 	mov	a,#(_main_response_size_70004_181 >> 8)
      000AF5 A3               [24] 2382 	inc	dptr
      000AF6 F0               [24] 2383 	movx	@dptr,a
      000AF7 E4               [12] 2384 	clr	a
      000AF8 A3               [24] 2385 	inc	dptr
      000AF9 F0               [24] 2386 	movx	@dptr,a
      000AFA 85*0A 82         [24] 2387 	mov	dpl, _main_sloc5_1_0
      000AFD 85*0B 83         [24] 2388 	mov	dph, (_main_sloc5_1_0 + 1)
      000B00 85*0C F0         [24] 2389 	mov	b, (_main_sloc5_1_0 + 2)
      000B03 C0 07            [24] 2390 	push	ar7
      000B05 C0 06            [24] 2391 	push	ar6
      000B07 C0 05            [24] 2392 	push	ar5
      000B09 12r00r00         [24] 2393 	lcall	_process_tcp_packet
      000B0C AA 82            [24] 2394 	mov	r2, dpl
      000B0E AB 83            [24] 2395 	mov	r3, dph
      000B10 AC F0            [24] 2396 	mov	r4, b
      000B12 D0 05            [24] 2397 	pop	ar5
      000B14 D0 06            [24] 2398 	pop	ar6
      000B16 D0 07            [24] 2399 	pop	ar7
                                   2400 ;	main.c:244: if (response != NULL) {
      000B18 EA               [12] 2401 	mov	a,r2
      000B19 4B               [12] 2402 	orl	a,r3
      000B1A 60 69            [24] 2403 	jz	00123$
                                   2404 ;	main.c:245: printf("\nProcessed response data:\n");
      000B1C C0 07            [24] 2405 	push	ar7
      000B1E C0 06            [24] 2406 	push	ar6
      000B20 C0 05            [24] 2407 	push	ar5
      000B22 C0 04            [24] 2408 	push	ar4
      000B24 C0 03            [24] 2409 	push	ar3
      000B26 C0 02            [24] 2410 	push	ar2
      000B28 74r53            [12] 2411 	mov	a,#___str_39
      000B2A C0 E0            [24] 2412 	push	acc
      000B2C 74s04            [12] 2413 	mov	a,#(___str_39 >> 8)
      000B2E C0 E0            [24] 2414 	push	acc
      000B30 74 80            [12] 2415 	mov	a,#0x80
      000B32 C0 E0            [24] 2416 	push	acc
      000B34 12r00r00         [24] 2417 	lcall	_printf
      000B37 15 81            [12] 2418 	dec	sp
      000B39 15 81            [12] 2419 	dec	sp
      000B3B 15 81            [12] 2420 	dec	sp
      000B3D D0 02            [24] 2421 	pop	ar2
      000B3F D0 03            [24] 2422 	pop	ar3
      000B41 D0 04            [24] 2423 	pop	ar4
      000B43 D0 05            [24] 2424 	pop	ar5
      000B45 D0 06            [24] 2425 	pop	ar6
      000B47 D0 07            [24] 2426 	pop	ar7
                                   2427 ;	main.c:247: transmit_tcp_packet(response, response_size);
      000B49 90r02r29         [24] 2428 	mov	dptr,#_main_response_size_70004_181
      000B4C E0               [24] 2429 	movx	a,@dptr
      000B4D F8               [12] 2430 	mov	r0,a
      000B4E A3               [24] 2431 	inc	dptr
      000B4F E0               [24] 2432 	movx	a,@dptr
      000B50 F9               [12] 2433 	mov	r1,a
      000B51 90r00r00         [24] 2434 	mov	dptr,#_transmit_tcp_packet_PARM_2
      000B54 E8               [12] 2435 	mov	a,r0
      000B55 F0               [24] 2436 	movx	@dptr,a
      000B56 E9               [12] 2437 	mov	a,r1
      000B57 A3               [24] 2438 	inc	dptr
      000B58 F0               [24] 2439 	movx	@dptr,a
      000B59 8A 82            [24] 2440 	mov	dpl, r2
      000B5B 8B 83            [24] 2441 	mov	dph, r3
      000B5D 8C F0            [24] 2442 	mov	b, r4
      000B5F C0 07            [24] 2443 	push	ar7
      000B61 C0 06            [24] 2444 	push	ar6
      000B63 C0 05            [24] 2445 	push	ar5
      000B65 C0 04            [24] 2446 	push	ar4
      000B67 C0 03            [24] 2447 	push	ar3
      000B69 C0 02            [24] 2448 	push	ar2
      000B6B 12r00r00         [24] 2449 	lcall	_transmit_tcp_packet
      000B6E D0 02            [24] 2450 	pop	ar2
      000B70 D0 03            [24] 2451 	pop	ar3
      000B72 D0 04            [24] 2452 	pop	ar4
                                   2453 ;	main.c:248: free(response); // Free response memory if allocated dynamically
      000B74 8A 82            [24] 2454 	mov	dpl, r2
      000B76 8B 83            [24] 2455 	mov	dph, r3
      000B78 8C F0            [24] 2456 	mov	b, r4
      000B7A 12r00r00         [24] 2457 	lcall	_free
      000B7D D0 05            [24] 2458 	pop	ar5
      000B7F D0 06            [24] 2459 	pop	ar6
      000B81 D0 07            [24] 2460 	pop	ar7
      000B83 80 21            [24] 2461 	sjmp	00124$
      000B85                       2462 00123$:
                                   2463 ;	main.c:250: printf("\nNo response generated by TCP packet processing.\n");
      000B85 C0 07            [24] 2464 	push	ar7
      000B87 C0 06            [24] 2465 	push	ar6
      000B89 C0 05            [24] 2466 	push	ar5
      000B8B 74r6E            [12] 2467 	mov	a,#___str_40
      000B8D C0 E0            [24] 2468 	push	acc
      000B8F 74s04            [12] 2469 	mov	a,#(___str_40 >> 8)
      000B91 C0 E0            [24] 2470 	push	acc
      000B93 74 80            [12] 2471 	mov	a,#0x80
      000B95 C0 E0            [24] 2472 	push	acc
      000B97 12r00r00         [24] 2473 	lcall	_printf
      000B9A 15 81            [12] 2474 	dec	sp
      000B9C 15 81            [12] 2475 	dec	sp
      000B9E 15 81            [12] 2476 	dec	sp
      000BA0 D0 05            [24] 2477 	pop	ar5
      000BA2 D0 06            [24] 2478 	pop	ar6
      000BA4 D0 07            [24] 2479 	pop	ar7
      000BA6                       2480 00124$:
                                   2481 ;	main.c:253: printf("YESSSS\n");
      000BA6 C0 07            [24] 2482 	push	ar7
      000BA8 C0 06            [24] 2483 	push	ar6
      000BAA C0 05            [24] 2484 	push	ar5
      000BAC 74rA0            [12] 2485 	mov	a,#___str_41
      000BAE C0 E0            [24] 2486 	push	acc
      000BB0 74s04            [12] 2487 	mov	a,#(___str_41 >> 8)
      000BB2 C0 E0            [24] 2488 	push	acc
      000BB4 74 80            [12] 2489 	mov	a,#0x80
      000BB6 C0 E0            [24] 2490 	push	acc
      000BB8 12r00r00         [24] 2491 	lcall	_printf
      000BBB 15 81            [12] 2492 	dec	sp
      000BBD 15 81            [12] 2493 	dec	sp
      000BBF 15 81            [12] 2494 	dec	sp
      000BC1 D0 05            [24] 2495 	pop	ar5
      000BC3 D0 06            [24] 2496 	pop	ar6
      000BC5 D0 07            [24] 2497 	pop	ar7
      000BC7 80 21            [24] 2498 	sjmp	00127$
      000BC9                       2499 00126$:
                                   2500 ;	main.c:257: printf("NOOOO\n");
      000BC9 C0 07            [24] 2501 	push	ar7
      000BCB C0 06            [24] 2502 	push	ar6
      000BCD C0 05            [24] 2503 	push	ar5
      000BCF 74rA8            [12] 2504 	mov	a,#___str_42
      000BD1 C0 E0            [24] 2505 	push	acc
      000BD3 74s04            [12] 2506 	mov	a,#(___str_42 >> 8)
      000BD5 C0 E0            [24] 2507 	push	acc
      000BD7 74 80            [12] 2508 	mov	a,#0x80
      000BD9 C0 E0            [24] 2509 	push	acc
      000BDB 12r00r00         [24] 2510 	lcall	_printf
      000BDE 15 81            [12] 2511 	dec	sp
      000BE0 15 81            [12] 2512 	dec	sp
      000BE2 15 81            [12] 2513 	dec	sp
      000BE4 D0 05            [24] 2514 	pop	ar5
      000BE6 D0 06            [24] 2515 	pop	ar6
      000BE8 D0 07            [24] 2516 	pop	ar7
      000BEA                       2517 00127$:
                                   2518 ;	main.c:261: gNextPacketPtr = nextPacket;
      000BEA 90r02r25         [24] 2519 	mov	dptr,#_main_gNextPacketPtr_60001_172
      000BED E5*08            [12] 2520 	mov	a,_main_sloc4_1_0
      000BEF F0               [24] 2521 	movx	@dptr,a
      000BF0 E5*09            [12] 2522 	mov	a,(_main_sloc4_1_0 + 1)
      000BF2 A3               [24] 2523 	inc	dptr
      000BF3 F0               [24] 2524 	movx	@dptr,a
                                   2525 ;	main.c:266: printf("nextPacket: 0x%04X\n", nextPacket);
      000BF4 C0 07            [24] 2526 	push	ar7
      000BF6 C0 06            [24] 2527 	push	ar6
      000BF8 C0 05            [24] 2528 	push	ar5
      000BFA C0*08            [24] 2529 	push	_main_sloc4_1_0
      000BFC C0*09            [24] 2530 	push	(_main_sloc4_1_0 + 1)
      000BFE 74rAF            [12] 2531 	mov	a,#___str_43
      000C00 C0 E0            [24] 2532 	push	acc
      000C02 74s04            [12] 2533 	mov	a,#(___str_43 >> 8)
      000C04 C0 E0            [24] 2534 	push	acc
      000C06 74 80            [12] 2535 	mov	a,#0x80
      000C08 C0 E0            [24] 2536 	push	acc
      000C0A 12r00r00         [24] 2537 	lcall	_printf
      000C0D E5 81            [12] 2538 	mov	a,sp
      000C0F 24 FB            [12] 2539 	add	a,#0xfb
      000C11 F5 81            [12] 2540 	mov	sp,a
                                   2541 ;	main.c:267: printf("byteCount: %d\n", byteCount);
      000C13 C0*00            [24] 2542 	push	_main_sloc0_1_0
      000C15 C0*01            [24] 2543 	push	(_main_sloc0_1_0 + 1)
      000C17 74rC3            [12] 2544 	mov	a,#___str_44
      000C19 C0 E0            [24] 2545 	push	acc
      000C1B 74s04            [12] 2546 	mov	a,#(___str_44 >> 8)
      000C1D C0 E0            [24] 2547 	push	acc
      000C1F 74 80            [12] 2548 	mov	a,#0x80
      000C21 C0 E0            [24] 2549 	push	acc
      000C23 12r00r00         [24] 2550 	lcall	_printf
      000C26 E5 81            [12] 2551 	mov	a,sp
      000C28 24 FB            [12] 2552 	add	a,#0xfb
      000C2A F5 81            [12] 2553 	mov	sp,a
                                   2554 ;	main.c:268: printf("status: 0x%02X\n", status);
      000C2C C0*02            [24] 2555 	push	_main_sloc1_1_0
      000C2E C0*03            [24] 2556 	push	(_main_sloc1_1_0 + 1)
      000C30 74rD2            [12] 2557 	mov	a,#___str_45
      000C32 C0 E0            [24] 2558 	push	acc
      000C34 74s04            [12] 2559 	mov	a,#(___str_45 >> 8)
      000C36 C0 E0            [24] 2560 	push	acc
      000C38 74 80            [12] 2561 	mov	a,#0x80
      000C3A C0 E0            [24] 2562 	push	acc
      000C3C 12r00r00         [24] 2563 	lcall	_printf
      000C3F E5 81            [12] 2564 	mov	a,sp
      000C41 24 FB            [12] 2565 	add	a,#0xfb
      000C43 F5 81            [12] 2566 	mov	sp,a
      000C45 D0 05            [24] 2567 	pop	ar5
      000C47 D0 06            [24] 2568 	pop	ar6
      000C49 D0 07            [24] 2569 	pop	ar7
                                   2570 ;	main.c:271: uint8_t read_econ2 = mac_spi_read(0x1E, 0); //mac enable for reception
      000C4B 90r00r00         [24] 2571 	mov	dptr,#_mac_spi_read_PARM_2
      000C4E E4               [12] 2572 	clr	a
      000C4F F0               [24] 2573 	movx	@dptr,a
      000C50 75 82 1E         [24] 2574 	mov	dpl, #0x1e
      000C53 C0 07            [24] 2575 	push	ar7
      000C55 C0 06            [24] 2576 	push	ar6
      000C57 C0 05            [24] 2577 	push	ar5
      000C59 12r00r00         [24] 2578 	lcall	_mac_spi_read
      000C5C E5 82            [12] 2579 	mov	a, dpl
      000C5E D0 05            [24] 2580 	pop	ar5
      000C60 D0 06            [24] 2581 	pop	ar6
      000C62 D0 07            [24] 2582 	pop	ar7
                                   2583 ;	main.c:272: spi_control_write(2, 0x1E, (read_econ2 | (1 << 6))); //mac enable for reception
      000C64 44 40            [12] 2584 	orl	a,#0x40
      000C66 FC               [12] 2585 	mov	r4,a
      000C67 90r00r00         [24] 2586 	mov	dptr,#_spi_control_write_PARM_2
      000C6A 74 1E            [12] 2587 	mov	a,#0x1e
      000C6C F0               [24] 2588 	movx	@dptr,a
      000C6D 90r00r00         [24] 2589 	mov	dptr,#_spi_control_write_PARM_3
      000C70 EC               [12] 2590 	mov	a,r4
      000C71 F0               [24] 2591 	movx	@dptr,a
      000C72 75 82 02         [24] 2592 	mov	dpl, #0x02
      000C75 C0 07            [24] 2593 	push	ar7
      000C77 C0 06            [24] 2594 	push	ar6
      000C79 C0 05            [24] 2595 	push	ar5
      000C7B 12r00r00         [24] 2596 	lcall	_spi_control_write
      000C7E D0 05            [24] 2597 	pop	ar5
      000C80 D0 06            [24] 2598 	pop	ar6
      000C82 D0 07            [24] 2599 	pop	ar7
                                   2600 ;	main.c:273: free(packet_data);
      000C84 7F 00            [12] 2601 	mov	r7,#0x00
      000C86 8E 82            [24] 2602 	mov	dpl, r6
      000C88 8D 83            [24] 2603 	mov	dph, r5
      000C8A 8F F0            [24] 2604 	mov	b, r7
      000C8C 12r00r00         [24] 2605 	lcall	_free
      000C8F 02r08rBC         [24] 2606 	ljmp	00131$
                                   2607 ;	main.c:284: case 'C':{
      000C92                       2608 00134$:
                                   2609 ;	main.c:285: printf(" Resetting ENC using RESET pin in Hardware(P1_0)\n\r");
      000C92 74rE2            [12] 2610 	mov	a,#___str_46
      000C94 C0 E0            [24] 2611 	push	acc
      000C96 74s04            [12] 2612 	mov	a,#(___str_46 >> 8)
      000C98 C0 E0            [24] 2613 	push	acc
      000C9A 74 80            [12] 2614 	mov	a,#0x80
      000C9C C0 E0            [24] 2615 	push	acc
      000C9E 12r00r00         [24] 2616 	lcall	_printf
      000CA1 15 81            [12] 2617 	dec	sp
      000CA3 15 81            [12] 2618 	dec	sp
      000CA5 15 81            [12] 2619 	dec	sp
                                   2620 ;	main.c:286: ENC_RESET = 0;
                                   2621 ;	assignBit
      000CA7 C2 90            [12] 2622 	clr	_P1_0
                                   2623 ;	main.c:287: for(int i = 0; i < 6000; i++);
      000CA9 7E 00            [12] 2624 	mov	r6,#0x00
      000CAB 7F 00            [12] 2625 	mov	r7,#0x00
      000CAD                       2626 00152$:
      000CAD C3               [12] 2627 	clr	c
      000CAE EE               [12] 2628 	mov	a,r6
      000CAF 94 70            [12] 2629 	subb	a,#0x70
      000CB1 EF               [12] 2630 	mov	a,r7
      000CB2 64 80            [12] 2631 	xrl	a,#0x80
      000CB4 94 97            [12] 2632 	subb	a,#0x97
      000CB6 50 07            [24] 2633 	jnc	00135$
      000CB8 0E               [12] 2634 	inc	r6
      000CB9 BE 00 F1         [24] 2635 	cjne	r6,#0x00,00152$
      000CBC 0F               [12] 2636 	inc	r7
      000CBD 80 EE            [24] 2637 	sjmp	00152$
      000CBF                       2638 00135$:
                                   2639 ;	main.c:288: ENC_RESET = 1;
                                   2640 ;	assignBit
      000CBF D2 90            [12] 2641 	setb	_P1_0
                                   2642 ;	main.c:289: break;
      000CC1 02r02rD4         [24] 2643 	ljmp	00146$
                                   2644 ;	main.c:291: case 'D':
      000CC4                       2645 00136$:
                                   2646 ;	main.c:295: process_packet_from_buffer(0x0846);
      000CC4 90 08 46         [24] 2647 	mov	dptr,#0x0846
      000CC7 12r00r00         [24] 2648 	lcall	_process_packet_from_buffer
                                   2649 ;	main.c:296: break;
      000CCA 02r02rD4         [24] 2650 	ljmp	00146$
                                   2651 ;	main.c:298: case 'E':{
      000CCD                       2652 00137$:
                                   2653 ;	main.c:299: IT0 = 1;  // Edge-triggered mode for INT0
                                   2654 ;	assignBit
      000CCD D2 88            [12] 2655 	setb	_IT0
                                   2656 ;	main.c:300: EX0 = 1;  // Enable INT0
                                   2657 ;	assignBit
      000CCF D2 A8            [12] 2658 	setb	_EX0
                                   2659 ;	main.c:301: EA = 1;   // Enable global interrupts
                                   2660 ;	assignBit
      000CD1 D2 AF            [12] 2661 	setb	_EA
                                   2662 ;	main.c:302: uint8_t read_econ2 = mac_spi_read(0x1E, 0); //mac enable for reception
      000CD3 90r00r00         [24] 2663 	mov	dptr,#_mac_spi_read_PARM_2
      000CD6 E4               [12] 2664 	clr	a
      000CD7 F0               [24] 2665 	movx	@dptr,a
      000CD8 75 82 1E         [24] 2666 	mov	dpl, #0x1e
      000CDB 12r00r00         [24] 2667 	lcall	_mac_spi_read
                                   2668 ;	main.c:304: printf("Enabling TXPKTIE\n\r");
      000CDE 74r15            [12] 2669 	mov	a,#___str_47
      000CE0 C0 E0            [24] 2670 	push	acc
      000CE2 74s05            [12] 2671 	mov	a,#(___str_47 >> 8)
      000CE4 C0 E0            [24] 2672 	push	acc
      000CE6 74 80            [12] 2673 	mov	a,#0x80
      000CE8 C0 E0            [24] 2674 	push	acc
      000CEA 12r00r00         [24] 2675 	lcall	_printf
      000CED 15 81            [12] 2676 	dec	sp
      000CEF 15 81            [12] 2677 	dec	sp
      000CF1 15 81            [12] 2678 	dec	sp
                                   2679 ;	main.c:305: spi_control_write(0, 0x1B, 0xC0);
      000CF3 90r00r00         [24] 2680 	mov	dptr,#_spi_control_write_PARM_2
      000CF6 74 1B            [12] 2681 	mov	a,#0x1b
      000CF8 F0               [24] 2682 	movx	@dptr,a
      000CF9 90r00r00         [24] 2683 	mov	dptr,#_spi_control_write_PARM_3
      000CFC 74 C0            [12] 2684 	mov	a,#0xc0
      000CFE F0               [24] 2685 	movx	@dptr,a
      000CFF 75 82 00         [24] 2686 	mov	dpl, #0x00
      000D02 12r00r00         [24] 2687 	lcall	_spi_control_write
                                   2688 ;	main.c:306: break;
      000D05 02r02rD4         [24] 2689 	ljmp	00146$
                                   2690 ;	main.c:308: case 'F':{
      000D08                       2691 00138$:
                                   2692 ;	main.c:309: printf("Disabling TXPKTIE\n\r");
      000D08 74r28            [12] 2693 	mov	a,#___str_48
      000D0A C0 E0            [24] 2694 	push	acc
      000D0C 74s05            [12] 2695 	mov	a,#(___str_48 >> 8)
      000D0E C0 E0            [24] 2696 	push	acc
      000D10 74 80            [12] 2697 	mov	a,#0x80
      000D12 C0 E0            [24] 2698 	push	acc
      000D14 12r00r00         [24] 2699 	lcall	_printf
      000D17 15 81            [12] 2700 	dec	sp
      000D19 15 81            [12] 2701 	dec	sp
      000D1B 15 81            [12] 2702 	dec	sp
                                   2703 ;	main.c:310: spi_control_write(0, 0x1B, 0);
      000D1D 90r00r00         [24] 2704 	mov	dptr,#_spi_control_write_PARM_2
      000D20 74 1B            [12] 2705 	mov	a,#0x1b
      000D22 F0               [24] 2706 	movx	@dptr,a
      000D23 90r00r00         [24] 2707 	mov	dptr,#_spi_control_write_PARM_3
      000D26 E4               [12] 2708 	clr	a
      000D27 F0               [24] 2709 	movx	@dptr,a
      000D28 75 82 00         [24] 2710 	mov	dpl, #0x00
      000D2B 12r00r00         [24] 2711 	lcall	_spi_control_write
                                   2712 ;	main.c:313: while(1)
      000D2E                       2713 00141$:
                                   2714 ;	main.c:315: packetLoop();
      000D2E 12r00r00         [24] 2715 	lcall	_packetLoop
                                   2716 ;	main.c:319: default: {
      000D31 80 FB            [24] 2717 	sjmp	00141$
      000D33                       2718 00143$:
                                   2719 ;	main.c:320: printf("Invalid option. Please select a valid action.\n\r");
      000D33 74r3C            [12] 2720 	mov	a,#___str_49
      000D35 C0 E0            [24] 2721 	push	acc
      000D37 74s05            [12] 2722 	mov	a,#(___str_49 >> 8)
      000D39 C0 E0            [24] 2723 	push	acc
      000D3B 74 80            [12] 2724 	mov	a,#0x80
      000D3D C0 E0            [24] 2725 	push	acc
      000D3F 12r00r00         [24] 2726 	lcall	_printf
      000D42 15 81            [12] 2727 	dec	sp
      000D44 15 81            [12] 2728 	dec	sp
      000D46 15 81            [12] 2729 	dec	sp
                                   2730 ;	main.c:323: }
                                   2731 ;	main.c:325: }
      000D48 02r02rD4         [24] 2732 	ljmp	00146$
                                   2733 	.area CSEG    (CODE)
                                   2734 	.area CONST   (CODE)
                                   2735 	.area CONST   (CODE)
      000000                       2736 ___str_0:
      000000 0A                    2737 	.db 0x0a
      000001 0D                    2738 	.db 0x0d
      000002 00                    2739 	.db 0x00
                                   2740 	.area CSEG    (CODE)
                                   2741 	.area CONST   (CODE)
      000003                       2742 ___str_1:
      000003 53 50 49 20 4F 70 65  2743 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    2744 	.db 0x0a
      00001A 0D                    2745 	.db 0x0d
      00001B 00                    2746 	.db 0x00
                                   2747 	.area CSEG    (CODE)
                                   2748 	.area CONST   (CODE)
      00001C                       2749 ___str_2:
      00001C 0A                    2750 	.db 0x0a
      00001D 0D                    2751 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  2752 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    2753 	.db 0x0a
      000031 0D                    2754 	.db 0x0d
      000032 00                    2755 	.db 0x00
                                   2756 	.area CSEG    (CODE)
                                   2757 	.area CONST   (CODE)
      000033                       2758 ___str_3:
      000033 31 20 2D 2D 3E 20 43  2759 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    2760 	.db 0x0a
      000047 0D                    2761 	.db 0x0d
      000048 00                    2762 	.db 0x00
                                   2763 	.area CSEG    (CODE)
                                   2764 	.area CONST   (CODE)
      000049                       2765 ___str_4:
      000049 32 20 2D 2D 3E 20 42  2766 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    2767 	.db 0x0a
      00005C 0D                    2768 	.db 0x0d
      00005D 00                    2769 	.db 0x00
                                   2770 	.area CSEG    (CODE)
                                   2771 	.area CONST   (CODE)
      00005E                       2772 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  2773 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    2774 	.db 0x0a
      000070 0D                    2775 	.db 0x0d
      000071 00                    2776 	.db 0x00
                                   2777 	.area CSEG    (CODE)
                                   2778 	.area CONST   (CODE)
      000072                       2779 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  2780 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    2781 	.db 0x0a
      00008A 0D                    2782 	.db 0x0d
      00008B 00                    2783 	.db 0x00
                                   2784 	.area CSEG    (CODE)
                                   2785 	.area CONST   (CODE)
      00008C                       2786 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  2787 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    2788 	.db 0x0a
      0000A0 0D                    2789 	.db 0x0d
      0000A1 00                    2790 	.db 0x00
                                   2791 	.area CSEG    (CODE)
                                   2792 	.area CONST   (CODE)
      0000A2                       2793 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  2794 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    2795 	.db 0x0a
      0000B5 0D                    2796 	.db 0x0d
      0000B6 00                    2797 	.db 0x00
                                   2798 	.area CSEG    (CODE)
                                   2799 	.area CONST   (CODE)
      0000B7                       2800 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  2801 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    2802 	.db 0x0a
      0000C7 0D                    2803 	.db 0x0d
      0000C8 00                    2804 	.db 0x00
                                   2805 	.area CSEG    (CODE)
                                   2806 	.area CONST   (CODE)
      0000C9                       2807 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  2808 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    2809 	.db 0x0a
      0000E1 0D                    2810 	.db 0x0d
      0000E2 00                    2811 	.db 0x00
                                   2812 	.area CSEG    (CODE)
                                   2813 	.area CONST   (CODE)
      0000E3                       2814 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  2815 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    2816 	.db 0x0a
      0000F6 0D                    2817 	.db 0x0d
      0000F7 00                    2818 	.db 0x00
                                   2819 	.area CSEG    (CODE)
                                   2820 	.area CONST   (CODE)
      0000F8                       2821 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  2822 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    2823 	.db 0x0a
      00010F 0D                    2824 	.db 0x0d
      000110 00                    2825 	.db 0x00
                                   2826 	.area CSEG    (CODE)
                                   2827 	.area CONST   (CODE)
      000111                       2828 ___str_13:
      000111 42 20 2D 2D 3E 20 49  2829 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2830 	.db 0x0a
      000127 0D                    2831 	.db 0x0d
      000128 00                    2832 	.db 0x00
                                   2833 	.area CSEG    (CODE)
                                   2834 	.area CONST   (CODE)
      000129                       2835 ___str_14:
      000129 43 20 2D 2D 3E 20 48  2836 	.ascii "C --> Hard Reset(nRESET pin)"
             61 72 64 20 52 65 73
             65 74 28 6E 52 45 53
             45 54 20 70 69 6E 29
      000145 0A                    2837 	.db 0x0a
      000146 0D                    2838 	.db 0x0d
      000147 00                    2839 	.db 0x00
                                   2840 	.area CSEG    (CODE)
                                   2841 	.area CONST   (CODE)
      000148                       2842 ___str_15:
      000148 44 20 2D 2D 3E 20 50  2843 	.ascii "D --> Process TCP"
             72 6F 63 65 73 73 20
             54 43 50
      000159 0A                    2844 	.db 0x0a
      00015A 0D                    2845 	.db 0x0d
      00015B 00                    2846 	.db 0x00
                                   2847 	.area CSEG    (CODE)
                                   2848 	.area CONST   (CODE)
      00015C                       2849 ___str_16:
      00015C 45 20 2D 2D 3E 20 45  2850 	.ascii "E --> Enable TX interrupt"
             6E 61 62 6C 65 20 54
             58 20 69 6E 74 65 72
             72 75 70 74
      000175 0A                    2851 	.db 0x0a
      000176 0D                    2852 	.db 0x0d
      000177 00                    2853 	.db 0x00
                                   2854 	.area CSEG    (CODE)
                                   2855 	.area CONST   (CODE)
      000178                       2856 ___str_17:
      000178 46 20 2D 2D 3E 20 44  2857 	.ascii "F --> Disabling TX interrupt"
             69 73 61 62 6C 69 6E
             67 20 54 58 20 69 6E
             74 65 72 72 75 70 74
      000194 0A                    2858 	.db 0x0a
      000195 0D                    2859 	.db 0x0d
      000196 00                    2860 	.db 0x00
                                   2861 	.area CSEG    (CODE)
                                   2862 	.area CONST   (CODE)
      000197                       2863 ___str_18:
      000197 45 6E 74 65 72 20 74  2864 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      0001B9 0A                    2865 	.db 0x0a
      0001BA 0D                    2866 	.db 0x0d
      0001BB 00                    2867 	.db 0x00
                                   2868 	.area CSEG    (CODE)
                                   2869 	.area CONST   (CODE)
      0001BC                       2870 ___str_19:
      0001BC 45 6E 74 65 72 20 74  2871 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      0001E6 0A                    2872 	.db 0x0a
      0001E7 0D                    2873 	.db 0x0d
      0001E8 00                    2874 	.db 0x00
                                   2875 	.area CSEG    (CODE)
                                   2876 	.area CONST   (CODE)
      0001E9                       2877 ___str_20:
      0001E9 45 6E 74 65 72 20 74  2878 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      00020A 0A                    2879 	.db 0x0a
      00020B 0D                    2880 	.db 0x0d
      00020C 00                    2881 	.db 0x00
                                   2882 	.area CSEG    (CODE)
                                   2883 	.area CONST   (CODE)
      00020D                       2884 ___str_21:
      00020D 45 6E 74 65 72 20 74  2885 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      000230 0A                    2886 	.db 0x0a
      000231 0D                    2887 	.db 0x0d
      000232 00                    2888 	.db 0x00
                                   2889 	.area CSEG    (CODE)
                                   2890 	.area CONST   (CODE)
      000233                       2891 ___str_22:
      000233 45 6E 74 65 72 20 74  2892 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      00024E 0A                    2893 	.db 0x0a
      00024F 0D                    2894 	.db 0x0d
      000250 00                    2895 	.db 0x00
                                   2896 	.area CSEG    (CODE)
                                   2897 	.area CONST   (CODE)
      000251                       2898 ___str_23:
      000251 45 6E 74 65 72 20 25  2899 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000271 0A                    2900 	.db 0x0a
      000272 0D                    2901 	.db 0x0d
      000273 00                    2902 	.db 0x00
                                   2903 	.area CSEG    (CODE)
                                   2904 	.area CONST   (CODE)
      000274                       2905 ___str_24:
      000274 42 79 74 65 20 25 64  2906 	.ascii "Byte %d: "
             3A 20
      00027D 00                    2907 	.db 0x00
                                   2908 	.area CSEG    (CODE)
                                   2909 	.area CONST   (CODE)
      00027E                       2910 ___str_25:
      00027E 45 6E 74 65 72 20 74  2911 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      0002A0 0A                    2912 	.db 0x0a
      0002A1 0D                    2913 	.db 0x0d
      0002A2 00                    2914 	.db 0x00
                                   2915 	.area CSEG    (CODE)
                                   2916 	.area CONST   (CODE)
      0002A3                       2917 ___str_26:
      0002A3 45 6E 74 65 72 20 74  2918 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      0002C9 0A                    2919 	.db 0x0a
      0002CA 0D                    2920 	.db 0x0d
      0002CB 00                    2921 	.db 0x00
                                   2922 	.area CSEG    (CODE)
                                   2923 	.area CONST   (CODE)
      0002CC                       2924 ___str_27:
      0002CC 45 6E 74 65 72 20 74  2925 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002F2 0A                    2926 	.db 0x0a
      0002F3 0D                    2927 	.db 0x0d
      0002F4 00                    2928 	.db 0x00
                                   2929 	.area CSEG    (CODE)
                                   2930 	.area CONST   (CODE)
      0002F5                       2931 ___str_28:
      0002F5 4D 41 43 20 52 65 67  2932 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      00030E 0A                    2933 	.db 0x0a
      00030F 0D                    2934 	.db 0x0d
      000310 00                    2935 	.db 0x00
                                   2936 	.area CSEG    (CODE)
                                   2937 	.area CONST   (CODE)
      000311                       2938 ___str_29:
      000311 45 6E 74 65 72 20 74  2939 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      000330 0A                    2940 	.db 0x0a
      000331 0D                    2941 	.db 0x0d
      000332 00                    2942 	.db 0x00
                                   2943 	.area CSEG    (CODE)
                                   2944 	.area CONST   (CODE)
      000333                       2945 ___str_30:
      000333 45 6E 74 65 72 20 74  2946 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      000352 0A                    2947 	.db 0x0a
      000353 0D                    2948 	.db 0x0d
      000354 00                    2949 	.db 0x00
                                   2950 	.area CSEG    (CODE)
                                   2951 	.area CONST   (CODE)
      000355                       2952 ___str_31:
      000355 50 48 59 20 57 72 69  2953 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      00036B 0A                    2954 	.db 0x0a
      00036C 0D                    2955 	.db 0x0d
      00036D 00                    2956 	.db 0x00
                                   2957 	.area CSEG    (CODE)
                                   2958 	.area CONST   (CODE)
      00036E                       2959 ___str_32:
      00036E 45 6E 74 65 72 20 74  2960 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000395 0A                    2961 	.db 0x0a
      000396 0D                    2962 	.db 0x0d
      000397 00                    2963 	.db 0x00
                                   2964 	.area CSEG    (CODE)
                                   2965 	.area CONST   (CODE)
      000398                       2966 ___str_33:
      000398 50 48 59 20 52 65 61  2967 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      0003AD 0A                    2968 	.db 0x0a
      0003AE 0D                    2969 	.db 0x0d
      0003AF 00                    2970 	.db 0x00
                                   2971 	.area CSEG    (CODE)
                                   2972 	.area CONST   (CODE)
      0003B0                       2973 ___str_34:
      0003B0 52 65 73 65 74 74 69  2974 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      0003C5 0A                    2975 	.db 0x0a
      0003C6 0D                    2976 	.db 0x0d
      0003C7 00                    2977 	.db 0x00
                                   2978 	.area CSEG    (CODE)
                                   2979 	.area CONST   (CODE)
      0003C8                       2980 ___str_35:
      0003C8 45 6E 74 65 72 20 74  2981 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003EF 0A                    2982 	.db 0x0a
      0003F0 0D                    2983 	.db 0x0d
      0003F1 00                    2984 	.db 0x00
                                   2985 	.area CSEG    (CODE)
                                   2986 	.area CONST   (CODE)
      0003F2                       2987 ___str_36:
      0003F2 45 6E 74 65 72 20 74  2988 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      00040A 0A                    2989 	.db 0x0a
      00040B 0D                    2990 	.db 0x0d
      00040C 00                    2991 	.db 0x00
                                   2992 	.area CSEG    (CODE)
                                   2993 	.area CONST   (CODE)
      00040D                       2994 ___str_37:
      00040D 45 54 48 20 52 65 67  2995 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      000426 0A                    2996 	.db 0x0a
      000427 0D                    2997 	.db 0x0d
      000428 00                    2998 	.db 0x00
                                   2999 	.area CSEG    (CODE)
                                   3000 	.area CONST   (CODE)
      000429                       3001 ___str_38:
      000429 56 61 6C 69 64 20 45  3002 	.ascii "Valid ETHER packet....................."
             54 48 45 52 20 70 61
             63 6B 65 74 2E 2E 2E
             2E 2E 2E 2E 2E 2E 2E
             2E 2E 2E 2E 2E 2E 2E
             2E 2E 2E 2E
      000450 0A                    3003 	.db 0x0a
      000451 0D                    3004 	.db 0x0d
      000452 00                    3005 	.db 0x00
                                   3006 	.area CSEG    (CODE)
                                   3007 	.area CONST   (CODE)
      000453                       3008 ___str_39:
      000453 0A                    3009 	.db 0x0a
      000454 50 72 6F 63 65 73 73  3010 	.ascii "Processed response data:"
             65 64 20 72 65 73 70
             6F 6E 73 65 20 64 61
             74 61 3A
      00046C 0A                    3011 	.db 0x0a
      00046D 00                    3012 	.db 0x00
                                   3013 	.area CSEG    (CODE)
                                   3014 	.area CONST   (CODE)
      00046E                       3015 ___str_40:
      00046E 0A                    3016 	.db 0x0a
      00046F 4E 6F 20 72 65 73 70  3017 	.ascii "No response generated by TCP packet processing."
             6F 6E 73 65 20 67 65
             6E 65 72 61 74 65 64
             20 62 79 20 54 43 50
             20 70 61 63 6B 65 74
             20 70 72 6F 63 65 73
             73 69 6E 67 2E
      00049E 0A                    3018 	.db 0x0a
      00049F 00                    3019 	.db 0x00
                                   3020 	.area CSEG    (CODE)
                                   3021 	.area CONST   (CODE)
      0004A0                       3022 ___str_41:
      0004A0 59 45 53 53 53 53     3023 	.ascii "YESSSS"
      0004A6 0A                    3024 	.db 0x0a
      0004A7 00                    3025 	.db 0x00
                                   3026 	.area CSEG    (CODE)
                                   3027 	.area CONST   (CODE)
      0004A8                       3028 ___str_42:
      0004A8 4E 4F 4F 4F 4F        3029 	.ascii "NOOOO"
      0004AD 0A                    3030 	.db 0x0a
      0004AE 00                    3031 	.db 0x00
                                   3032 	.area CSEG    (CODE)
                                   3033 	.area CONST   (CODE)
      0004AF                       3034 ___str_43:
      0004AF 6E 65 78 74 50 61 63  3035 	.ascii "nextPacket: 0x%04X"
             6B 65 74 3A 20 30 78
             25 30 34 58
      0004C1 0A                    3036 	.db 0x0a
      0004C2 00                    3037 	.db 0x00
                                   3038 	.area CSEG    (CODE)
                                   3039 	.area CONST   (CODE)
      0004C3                       3040 ___str_44:
      0004C3 62 79 74 65 43 6F 75  3041 	.ascii "byteCount: %d"
             6E 74 3A 20 25 64
      0004D0 0A                    3042 	.db 0x0a
      0004D1 00                    3043 	.db 0x00
                                   3044 	.area CSEG    (CODE)
                                   3045 	.area CONST   (CODE)
      0004D2                       3046 ___str_45:
      0004D2 73 74 61 74 75 73 3A  3047 	.ascii "status: 0x%02X"
             20 30 78 25 30 32 58
      0004E0 0A                    3048 	.db 0x0a
      0004E1 00                    3049 	.db 0x00
                                   3050 	.area CSEG    (CODE)
                                   3051 	.area CONST   (CODE)
      0004E2                       3052 ___str_46:
      0004E2 20 52 65 73 65 74 74  3053 	.ascii " Resetting ENC using RESET pin in Hardware(P1_0)"
             69 6E 67 20 45 4E 43
             20 75 73 69 6E 67 20
             52 45 53 45 54 20 70
             69 6E 20 69 6E 20 48
             61 72 64 77 61 72 65
             28 50 31 5F 30 29
      000512 0A                    3054 	.db 0x0a
      000513 0D                    3055 	.db 0x0d
      000514 00                    3056 	.db 0x00
                                   3057 	.area CSEG    (CODE)
                                   3058 	.area CONST   (CODE)
      000515                       3059 ___str_47:
      000515 45 6E 61 62 6C 69 6E  3060 	.ascii "Enabling TXPKTIE"
             67 20 54 58 50 4B 54
             49 45
      000525 0A                    3061 	.db 0x0a
      000526 0D                    3062 	.db 0x0d
      000527 00                    3063 	.db 0x00
                                   3064 	.area CSEG    (CODE)
                                   3065 	.area CONST   (CODE)
      000528                       3066 ___str_48:
      000528 44 69 73 61 62 6C 69  3067 	.ascii "Disabling TXPKTIE"
             6E 67 20 54 58 50 4B
             54 49 45
      000539 0A                    3068 	.db 0x0a
      00053A 0D                    3069 	.db 0x0d
      00053B 00                    3070 	.db 0x00
                                   3071 	.area CSEG    (CODE)
                                   3072 	.area CONST   (CODE)
      00053C                       3073 ___str_49:
      00053C 49 6E 76 61 6C 69 64  3074 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      000569 0A                    3075 	.db 0x0a
      00056A 0D                    3076 	.db 0x0d
      00056B 00                    3077 	.db 0x00
                                   3078 	.area CSEG    (CODE)
                                   3079 	.area XINIT   (CODE)
                                   3080 	.area CABS    (ABS,CODE)
