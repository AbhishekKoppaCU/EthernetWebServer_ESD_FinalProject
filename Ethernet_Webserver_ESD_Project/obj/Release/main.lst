                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _enc_init
                                     15 	.globl _send_arp_request
                                     16 	.globl _spi_control_write
                                     17 	.globl _eth_spi_read
                                     18 	.globl _phy_spi_write
                                     19 	.globl _phy_spi_read
                                     20 	.globl _spi_buffer_write
                                     21 	.globl _spi_buffer_read
                                     22 	.globl _mac_spi_read
                                     23 	.globl _enc_reset
                                     24 	.globl _configure_SPI
                                     25 	.globl _printf_tiny
                                     26 	.globl _putchar
                                     27 	.globl _getchar
                                     28 	.globl _printf
                                     29 	.globl _TF1
                                     30 	.globl _TR1
                                     31 	.globl _TF0
                                     32 	.globl _TR0
                                     33 	.globl _IE1
                                     34 	.globl _IT1
                                     35 	.globl _IE0
                                     36 	.globl _IT0
                                     37 	.globl _SM0
                                     38 	.globl _SM1
                                     39 	.globl _SM2
                                     40 	.globl _REN
                                     41 	.globl _TB8
                                     42 	.globl _RB8
                                     43 	.globl _TI
                                     44 	.globl _RI
                                     45 	.globl _CY
                                     46 	.globl _AC
                                     47 	.globl _F0
                                     48 	.globl _RS1
                                     49 	.globl _RS0
                                     50 	.globl _OV
                                     51 	.globl _F1
                                     52 	.globl _P
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD0
                                     60 	.globl _TXD
                                     61 	.globl _RXD0
                                     62 	.globl _RXD
                                     63 	.globl _P3_7
                                     64 	.globl _P3_6
                                     65 	.globl _P3_5
                                     66 	.globl _P3_4
                                     67 	.globl _P3_3
                                     68 	.globl _P3_2
                                     69 	.globl _P3_1
                                     70 	.globl _P3_0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _P1_7
                                     80 	.globl _P1_6
                                     81 	.globl _P1_5
                                     82 	.globl _P1_4
                                     83 	.globl _P1_3
                                     84 	.globl _P1_2
                                     85 	.globl _P1_1
                                     86 	.globl _P1_0
                                     87 	.globl _P0_7
                                     88 	.globl _P0_6
                                     89 	.globl _P0_5
                                     90 	.globl _P0_4
                                     91 	.globl _P0_3
                                     92 	.globl _P0_2
                                     93 	.globl _P0_1
                                     94 	.globl _P0_0
                                     95 	.globl _PS
                                     96 	.globl _PT1
                                     97 	.globl _PX1
                                     98 	.globl _PT0
                                     99 	.globl _PX0
                                    100 	.globl _EA
                                    101 	.globl _ES
                                    102 	.globl _ET1
                                    103 	.globl _EX1
                                    104 	.globl _ET0
                                    105 	.globl _EX0
                                    106 	.globl _BREG_F7
                                    107 	.globl _BREG_F6
                                    108 	.globl _BREG_F5
                                    109 	.globl _BREG_F4
                                    110 	.globl _BREG_F3
                                    111 	.globl _BREG_F2
                                    112 	.globl _BREG_F1
                                    113 	.globl _BREG_F0
                                    114 	.globl _P5_7
                                    115 	.globl _P5_6
                                    116 	.globl _P5_5
                                    117 	.globl _P5_4
                                    118 	.globl _P5_3
                                    119 	.globl _P5_2
                                    120 	.globl _P5_1
                                    121 	.globl _P5_0
                                    122 	.globl _P4_7
                                    123 	.globl _P4_6
                                    124 	.globl _P4_5
                                    125 	.globl _P4_4
                                    126 	.globl _P4_3
                                    127 	.globl _P4_2
                                    128 	.globl _P4_1
                                    129 	.globl _P4_0
                                    130 	.globl _PX0L
                                    131 	.globl _PT0L
                                    132 	.globl _PX1L
                                    133 	.globl _PT1L
                                    134 	.globl _PSL
                                    135 	.globl _PT2L
                                    136 	.globl _PPCL
                                    137 	.globl _EC
                                    138 	.globl _CCF0
                                    139 	.globl _CCF1
                                    140 	.globl _CCF2
                                    141 	.globl _CCF3
                                    142 	.globl _CCF4
                                    143 	.globl _CR
                                    144 	.globl _CF
                                    145 	.globl _TF2
                                    146 	.globl _EXF2
                                    147 	.globl _RCLK
                                    148 	.globl _TCLK
                                    149 	.globl _EXEN2
                                    150 	.globl _TR2
                                    151 	.globl _C_T2
                                    152 	.globl _CP_RL2
                                    153 	.globl _T2CON_7
                                    154 	.globl _T2CON_6
                                    155 	.globl _T2CON_5
                                    156 	.globl _T2CON_4
                                    157 	.globl _T2CON_3
                                    158 	.globl _T2CON_2
                                    159 	.globl _T2CON_1
                                    160 	.globl _T2CON_0
                                    161 	.globl _PT2
                                    162 	.globl _ET2
                                    163 	.globl _TMOD
                                    164 	.globl _TL1
                                    165 	.globl _TL0
                                    166 	.globl _TH1
                                    167 	.globl _TH0
                                    168 	.globl _TCON
                                    169 	.globl _SP
                                    170 	.globl _SCON
                                    171 	.globl _SBUF0
                                    172 	.globl _SBUF
                                    173 	.globl _PSW
                                    174 	.globl _PCON
                                    175 	.globl _P3
                                    176 	.globl _P2
                                    177 	.globl _P1
                                    178 	.globl _P0
                                    179 	.globl _IP
                                    180 	.globl _IE
                                    181 	.globl _DP0L
                                    182 	.globl _DPL
                                    183 	.globl _DP0H
                                    184 	.globl _DPH
                                    185 	.globl _B
                                    186 	.globl _ACC
                                    187 	.globl _EECON
                                    188 	.globl _KBF
                                    189 	.globl _KBE
                                    190 	.globl _KBLS
                                    191 	.globl _BRL
                                    192 	.globl _BDRCON
                                    193 	.globl _T2MOD
                                    194 	.globl _SPDAT
                                    195 	.globl _SPSTA
                                    196 	.globl _SPCON
                                    197 	.globl _SADEN
                                    198 	.globl _SADDR
                                    199 	.globl _WDTPRG
                                    200 	.globl _WDTRST
                                    201 	.globl _P5
                                    202 	.globl _P4
                                    203 	.globl _IPH1
                                    204 	.globl _IPL1
                                    205 	.globl _IPH0
                                    206 	.globl _IPL0
                                    207 	.globl _IEN1
                                    208 	.globl _IEN0
                                    209 	.globl _CMOD
                                    210 	.globl _CL
                                    211 	.globl _CH
                                    212 	.globl _CCON
                                    213 	.globl _CCAPM4
                                    214 	.globl _CCAPM3
                                    215 	.globl _CCAPM2
                                    216 	.globl _CCAPM1
                                    217 	.globl _CCAPM0
                                    218 	.globl _CCAP4L
                                    219 	.globl _CCAP3L
                                    220 	.globl _CCAP2L
                                    221 	.globl _CCAP1L
                                    222 	.globl _CCAP0L
                                    223 	.globl _CCAP4H
                                    224 	.globl _CCAP3H
                                    225 	.globl _CCAP2H
                                    226 	.globl _CCAP1H
                                    227 	.globl _CCAP0H
                                    228 	.globl _CKCON1
                                    229 	.globl _CKCON0
                                    230 	.globl _CKRL
                                    231 	.globl _AUXR1
                                    232 	.globl _AUXR
                                    233 	.globl _TH2
                                    234 	.globl _TL2
                                    235 	.globl _RCAP2H
                                    236 	.globl _RCAP2L
                                    237 	.globl _T2CON
                                    238 	.globl _target_ip
                                    239 	.globl _device_ip
                                    240 	.globl _target_mac
                                    241 	.globl _device_mac
                                    242 ;--------------------------------------------------------
                                    243 ; special function registers
                                    244 ;--------------------------------------------------------
                                    245 	.area RSEG    (ABS,DATA)
      000000                        246 	.org 0x0000
                           0000C8   247 _T2CON	=	0x00c8
                           0000CA   248 _RCAP2L	=	0x00ca
                           0000CB   249 _RCAP2H	=	0x00cb
                           0000CC   250 _TL2	=	0x00cc
                           0000CD   251 _TH2	=	0x00cd
                           00008E   252 _AUXR	=	0x008e
                           0000A2   253 _AUXR1	=	0x00a2
                           000097   254 _CKRL	=	0x0097
                           00008F   255 _CKCON0	=	0x008f
                           0000AF   256 _CKCON1	=	0x00af
                           0000FA   257 _CCAP0H	=	0x00fa
                           0000FB   258 _CCAP1H	=	0x00fb
                           0000FC   259 _CCAP2H	=	0x00fc
                           0000FD   260 _CCAP3H	=	0x00fd
                           0000FE   261 _CCAP4H	=	0x00fe
                           0000EA   262 _CCAP0L	=	0x00ea
                           0000EB   263 _CCAP1L	=	0x00eb
                           0000EC   264 _CCAP2L	=	0x00ec
                           0000ED   265 _CCAP3L	=	0x00ed
                           0000EE   266 _CCAP4L	=	0x00ee
                           0000DA   267 _CCAPM0	=	0x00da
                           0000DB   268 _CCAPM1	=	0x00db
                           0000DC   269 _CCAPM2	=	0x00dc
                           0000DD   270 _CCAPM3	=	0x00dd
                           0000DE   271 _CCAPM4	=	0x00de
                           0000D8   272 _CCON	=	0x00d8
                           0000F9   273 _CH	=	0x00f9
                           0000E9   274 _CL	=	0x00e9
                           0000D9   275 _CMOD	=	0x00d9
                           0000A8   276 _IEN0	=	0x00a8
                           0000B1   277 _IEN1	=	0x00b1
                           0000B8   278 _IPL0	=	0x00b8
                           0000B7   279 _IPH0	=	0x00b7
                           0000B2   280 _IPL1	=	0x00b2
                           0000B3   281 _IPH1	=	0x00b3
                           0000C0   282 _P4	=	0x00c0
                           0000E8   283 _P5	=	0x00e8
                           0000A6   284 _WDTRST	=	0x00a6
                           0000A7   285 _WDTPRG	=	0x00a7
                           0000A9   286 _SADDR	=	0x00a9
                           0000B9   287 _SADEN	=	0x00b9
                           0000C3   288 _SPCON	=	0x00c3
                           0000C4   289 _SPSTA	=	0x00c4
                           0000C5   290 _SPDAT	=	0x00c5
                           0000C9   291 _T2MOD	=	0x00c9
                           00009B   292 _BDRCON	=	0x009b
                           00009A   293 _BRL	=	0x009a
                           00009C   294 _KBLS	=	0x009c
                           00009D   295 _KBE	=	0x009d
                           00009E   296 _KBF	=	0x009e
                           0000D2   297 _EECON	=	0x00d2
                           0000E0   298 _ACC	=	0x00e0
                           0000F0   299 _B	=	0x00f0
                           000083   300 _DPH	=	0x0083
                           000083   301 _DP0H	=	0x0083
                           000082   302 _DPL	=	0x0082
                           000082   303 _DP0L	=	0x0082
                           0000A8   304 _IE	=	0x00a8
                           0000B8   305 _IP	=	0x00b8
                           000080   306 _P0	=	0x0080
                           000090   307 _P1	=	0x0090
                           0000A0   308 _P2	=	0x00a0
                           0000B0   309 _P3	=	0x00b0
                           000087   310 _PCON	=	0x0087
                           0000D0   311 _PSW	=	0x00d0
                           000099   312 _SBUF	=	0x0099
                           000099   313 _SBUF0	=	0x0099
                           000098   314 _SCON	=	0x0098
                           000081   315 _SP	=	0x0081
                           000088   316 _TCON	=	0x0088
                           00008C   317 _TH0	=	0x008c
                           00008D   318 _TH1	=	0x008d
                           00008A   319 _TL0	=	0x008a
                           00008B   320 _TL1	=	0x008b
                           000089   321 _TMOD	=	0x0089
                                    322 ;--------------------------------------------------------
                                    323 ; special function bits
                                    324 ;--------------------------------------------------------
                                    325 	.area RSEG    (ABS,DATA)
      000000                        326 	.org 0x0000
                           0000AD   327 _ET2	=	0x00ad
                           0000BD   328 _PT2	=	0x00bd
                           0000C8   329 _T2CON_0	=	0x00c8
                           0000C9   330 _T2CON_1	=	0x00c9
                           0000CA   331 _T2CON_2	=	0x00ca
                           0000CB   332 _T2CON_3	=	0x00cb
                           0000CC   333 _T2CON_4	=	0x00cc
                           0000CD   334 _T2CON_5	=	0x00cd
                           0000CE   335 _T2CON_6	=	0x00ce
                           0000CF   336 _T2CON_7	=	0x00cf
                           0000C8   337 _CP_RL2	=	0x00c8
                           0000C9   338 _C_T2	=	0x00c9
                           0000CA   339 _TR2	=	0x00ca
                           0000CB   340 _EXEN2	=	0x00cb
                           0000CC   341 _TCLK	=	0x00cc
                           0000CD   342 _RCLK	=	0x00cd
                           0000CE   343 _EXF2	=	0x00ce
                           0000CF   344 _TF2	=	0x00cf
                           0000DF   345 _CF	=	0x00df
                           0000DE   346 _CR	=	0x00de
                           0000DC   347 _CCF4	=	0x00dc
                           0000DB   348 _CCF3	=	0x00db
                           0000DA   349 _CCF2	=	0x00da
                           0000D9   350 _CCF1	=	0x00d9
                           0000D8   351 _CCF0	=	0x00d8
                           0000AE   352 _EC	=	0x00ae
                           0000BE   353 _PPCL	=	0x00be
                           0000BD   354 _PT2L	=	0x00bd
                           0000BC   355 _PSL	=	0x00bc
                           0000BB   356 _PT1L	=	0x00bb
                           0000BA   357 _PX1L	=	0x00ba
                           0000B9   358 _PT0L	=	0x00b9
                           0000B8   359 _PX0L	=	0x00b8
                           0000C0   360 _P4_0	=	0x00c0
                           0000C1   361 _P4_1	=	0x00c1
                           0000C2   362 _P4_2	=	0x00c2
                           0000C3   363 _P4_3	=	0x00c3
                           0000C4   364 _P4_4	=	0x00c4
                           0000C5   365 _P4_5	=	0x00c5
                           0000C6   366 _P4_6	=	0x00c6
                           0000C7   367 _P4_7	=	0x00c7
                           0000E8   368 _P5_0	=	0x00e8
                           0000E9   369 _P5_1	=	0x00e9
                           0000EA   370 _P5_2	=	0x00ea
                           0000EB   371 _P5_3	=	0x00eb
                           0000EC   372 _P5_4	=	0x00ec
                           0000ED   373 _P5_5	=	0x00ed
                           0000EE   374 _P5_6	=	0x00ee
                           0000EF   375 _P5_7	=	0x00ef
                           0000F0   376 _BREG_F0	=	0x00f0
                           0000F1   377 _BREG_F1	=	0x00f1
                           0000F2   378 _BREG_F2	=	0x00f2
                           0000F3   379 _BREG_F3	=	0x00f3
                           0000F4   380 _BREG_F4	=	0x00f4
                           0000F5   381 _BREG_F5	=	0x00f5
                           0000F6   382 _BREG_F6	=	0x00f6
                           0000F7   383 _BREG_F7	=	0x00f7
                           0000A8   384 _EX0	=	0x00a8
                           0000A9   385 _ET0	=	0x00a9
                           0000AA   386 _EX1	=	0x00aa
                           0000AB   387 _ET1	=	0x00ab
                           0000AC   388 _ES	=	0x00ac
                           0000AF   389 _EA	=	0x00af
                           0000B8   390 _PX0	=	0x00b8
                           0000B9   391 _PT0	=	0x00b9
                           0000BA   392 _PX1	=	0x00ba
                           0000BB   393 _PT1	=	0x00bb
                           0000BC   394 _PS	=	0x00bc
                           000080   395 _P0_0	=	0x0080
                           000081   396 _P0_1	=	0x0081
                           000082   397 _P0_2	=	0x0082
                           000083   398 _P0_3	=	0x0083
                           000084   399 _P0_4	=	0x0084
                           000085   400 _P0_5	=	0x0085
                           000086   401 _P0_6	=	0x0086
                           000087   402 _P0_7	=	0x0087
                           000090   403 _P1_0	=	0x0090
                           000091   404 _P1_1	=	0x0091
                           000092   405 _P1_2	=	0x0092
                           000093   406 _P1_3	=	0x0093
                           000094   407 _P1_4	=	0x0094
                           000095   408 _P1_5	=	0x0095
                           000096   409 _P1_6	=	0x0096
                           000097   410 _P1_7	=	0x0097
                           0000A0   411 _P2_0	=	0x00a0
                           0000A1   412 _P2_1	=	0x00a1
                           0000A2   413 _P2_2	=	0x00a2
                           0000A3   414 _P2_3	=	0x00a3
                           0000A4   415 _P2_4	=	0x00a4
                           0000A5   416 _P2_5	=	0x00a5
                           0000A6   417 _P2_6	=	0x00a6
                           0000A7   418 _P2_7	=	0x00a7
                           0000B0   419 _P3_0	=	0x00b0
                           0000B1   420 _P3_1	=	0x00b1
                           0000B2   421 _P3_2	=	0x00b2
                           0000B3   422 _P3_3	=	0x00b3
                           0000B4   423 _P3_4	=	0x00b4
                           0000B5   424 _P3_5	=	0x00b5
                           0000B6   425 _P3_6	=	0x00b6
                           0000B7   426 _P3_7	=	0x00b7
                           0000B0   427 _RXD	=	0x00b0
                           0000B0   428 _RXD0	=	0x00b0
                           0000B1   429 _TXD	=	0x00b1
                           0000B1   430 _TXD0	=	0x00b1
                           0000B2   431 _INT0	=	0x00b2
                           0000B3   432 _INT1	=	0x00b3
                           0000B4   433 _T0	=	0x00b4
                           0000B5   434 _T1	=	0x00b5
                           0000B6   435 _WR	=	0x00b6
                           0000B7   436 _RD	=	0x00b7
                           0000D0   437 _P	=	0x00d0
                           0000D1   438 _F1	=	0x00d1
                           0000D2   439 _OV	=	0x00d2
                           0000D3   440 _RS0	=	0x00d3
                           0000D4   441 _RS1	=	0x00d4
                           0000D5   442 _F0	=	0x00d5
                           0000D6   443 _AC	=	0x00d6
                           0000D7   444 _CY	=	0x00d7
                           000098   445 _RI	=	0x0098
                           000099   446 _TI	=	0x0099
                           00009A   447 _RB8	=	0x009a
                           00009B   448 _TB8	=	0x009b
                           00009C   449 _REN	=	0x009c
                           00009D   450 _SM2	=	0x009d
                           00009E   451 _SM1	=	0x009e
                           00009F   452 _SM0	=	0x009f
                           000088   453 _IT0	=	0x0088
                           000089   454 _IE0	=	0x0089
                           00008A   455 _IT1	=	0x008a
                           00008B   456 _IE1	=	0x008b
                           00008C   457 _TR0	=	0x008c
                           00008D   458 _TF0	=	0x008d
                           00008E   459 _TR1	=	0x008e
                           00008F   460 _TF1	=	0x008f
                                    461 ;--------------------------------------------------------
                                    462 ; overlayable register banks
                                    463 ;--------------------------------------------------------
                                    464 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        465 	.ds 8
                                    466 ;--------------------------------------------------------
                                    467 ; internal ram data
                                    468 ;--------------------------------------------------------
                                    469 	.area DSEG    (DATA)
                                    470 ;--------------------------------------------------------
                                    471 ; overlayable items in internal ram
                                    472 ;--------------------------------------------------------
                                    473 	.area	OSEG    (OVR,DATA)
      000000                        474 _hex_to_int_sloc0_1_0:
      000000                        475 	.ds 3
      000003                        476 _hex_to_int_sloc1_1_0:
      000003                        477 	.ds 1
      000004                        478 _hex_to_int_sloc2_1_0:
      000004                        479 	.ds 2
                                    480 ;--------------------------------------------------------
                                    481 ; Stack segment in internal ram
                                    482 ;--------------------------------------------------------
                                    483 	.area SSEG
      000000                        484 __start__stack:
      000000                        485 	.ds	1
                                    486 
                                    487 ;--------------------------------------------------------
                                    488 ; indirectly addressable internal ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area ISEG    (DATA)
                                    491 ;--------------------------------------------------------
                                    492 ; absolute internal ram data
                                    493 ;--------------------------------------------------------
                                    494 	.area IABS    (ABS,DATA)
                                    495 	.area IABS    (ABS,DATA)
                                    496 ;--------------------------------------------------------
                                    497 ; bit data
                                    498 ;--------------------------------------------------------
                                    499 	.area BSEG    (BIT)
                                    500 ;--------------------------------------------------------
                                    501 ; paged external ram data
                                    502 ;--------------------------------------------------------
                                    503 	.area PSEG    (PAG,XDATA)
                                    504 ;--------------------------------------------------------
                                    505 ; uninitialized external ram data
                                    506 ;--------------------------------------------------------
                                    507 	.area XSEG    (XDATA)
      000000                        508 _hex_to_int_str_10000_78:
      000000                        509 	.ds 3
      000003                        510 _hex_to_int_result_10000_79:
      000003                        511 	.ds 2
      000005                        512 _hex_to_int_ASCII_20000_80:
      000005                        513 	.ds 2
      000007                        514 _get_user_buffer_size_input_10000_85:
      000007                        515 	.ds 10
      000011                        516 _main_device_mac_10000_88:
      000011                        517 	.ds 6
      000017                        518 _main_target_mac_10000_88:
      000017                        519 	.ds 6
      00001D                        520 _main_device_ip_10000_88:
      00001D                        521 	.ds 4
      000021                        522 _main_target_ip_10000_88:
      000021                        523 	.ds 4
      000025                        524 _main_buffer_40003_98:
      000025                        525 	.ds 256
      000125                        526 _main_buffer_40003_103:
      000125                        527 	.ds 256
                                    528 ;--------------------------------------------------------
                                    529 ; absolute external ram data
                                    530 ;--------------------------------------------------------
                                    531 	.area XABS    (ABS,XDATA)
                                    532 ;--------------------------------------------------------
                                    533 ; initialized external ram data
                                    534 ;--------------------------------------------------------
                                    535 	.area XISEG   (XDATA)
      000000                        536 _device_mac::
      000000                        537 	.ds 6
      000006                        538 _target_mac::
      000006                        539 	.ds 6
      00000C                        540 _device_ip::
      00000C                        541 	.ds 4
      000010                        542 _target_ip::
      000010                        543 	.ds 4
                                    544 	.area HOME    (CODE)
                                    545 	.area GSINIT0 (CODE)
                                    546 	.area GSINIT1 (CODE)
                                    547 	.area GSINIT2 (CODE)
                                    548 	.area GSINIT3 (CODE)
                                    549 	.area GSINIT4 (CODE)
                                    550 	.area GSINIT5 (CODE)
                                    551 	.area GSINIT  (CODE)
                                    552 	.area GSFINAL (CODE)
                                    553 	.area CSEG    (CODE)
                                    554 ;--------------------------------------------------------
                                    555 ; interrupt vector
                                    556 ;--------------------------------------------------------
                                    557 	.area HOME    (CODE)
      000000                        558 __interrupt_vect:
      000000 02r00r00         [24]  559 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  560 	ljmp	_external_interrupt0_isr
                                    561 ;--------------------------------------------------------
                                    562 ; global & static initialisations
                                    563 ;--------------------------------------------------------
                                    564 	.area HOME    (CODE)
                                    565 	.area GSINIT  (CODE)
                                    566 	.area GSFINAL (CODE)
                                    567 	.area GSINIT  (CODE)
                                    568 	.globl __sdcc_gsinit_startup
                                    569 	.globl __sdcc_program_startup
                                    570 	.globl __start__stack
                                    571 	.globl __mcs51_genXINIT
                                    572 	.globl __mcs51_genXRAMCLEAR
                                    573 	.globl __mcs51_genRAMCLEAR
                                    574 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  575 	ljmp	__sdcc_program_startup
                                    576 ;--------------------------------------------------------
                                    577 ; Home
                                    578 ;--------------------------------------------------------
                                    579 	.area HOME    (CODE)
                                    580 	.area HOME    (CODE)
      000006                        581 __sdcc_program_startup:
      000006 02r02r3E         [24]  582 	ljmp	_main
                                    583 ;	return from main will return to caller
                                    584 ;--------------------------------------------------------
                                    585 ; code
                                    586 ;--------------------------------------------------------
                                    587 	.area CSEG    (CODE)
                                    588 ;------------------------------------------------------------
                                    589 ;Allocation info for local variables in function 'hex_to_int'
                                    590 ;------------------------------------------------------------
                                    591 ;str                       Allocated with name '_hex_to_int_str_10000_78'
                                    592 ;i                         Allocated with name '_hex_to_int_i_10000_79'
                                    593 ;result                    Allocated with name '_hex_to_int_result_10000_79'
                                    594 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_80'
                                    595 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    596 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    597 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    598 ;------------------------------------------------------------
                                    599 ;	main.c:22: int hex_to_int(char* str)
                                    600 ;	-----------------------------------------
                                    601 ;	 function hex_to_int
                                    602 ;	-----------------------------------------
      000000                        603 _hex_to_int:
                           000007   604 	ar7 = 0x07
                           000006   605 	ar6 = 0x06
                           000005   606 	ar5 = 0x05
                           000004   607 	ar4 = 0x04
                           000003   608 	ar3 = 0x03
                           000002   609 	ar2 = 0x02
                           000001   610 	ar1 = 0x01
                           000000   611 	ar0 = 0x00
      000000 AF F0            [24]  612 	mov	r7,b
      000002 AE 83            [24]  613 	mov	r6,dph
      000004 E5 82            [12]  614 	mov	a,dpl
      000006 90r00r00         [24]  615 	mov	dptr,#_hex_to_int_str_10000_78
      000009 F0               [24]  616 	movx	@dptr,a
      00000A EE               [12]  617 	mov	a,r6
      00000B A3               [24]  618 	inc	dptr
      00000C F0               [24]  619 	movx	@dptr,a
      00000D EF               [12]  620 	mov	a,r7
      00000E A3               [24]  621 	inc	dptr
      00000F F0               [24]  622 	movx	@dptr,a
                                    623 ;	main.c:25: int i = 0, result = 0;
      000010 90r00r03         [24]  624 	mov	dptr,#_hex_to_int_result_10000_79
      000013 E4               [12]  625 	clr	a
      000014 F0               [24]  626 	movx	@dptr,a
      000015 A3               [24]  627 	inc	dptr
      000016 F0               [24]  628 	movx	@dptr,a
                                    629 ;	main.c:26: while(str[i] != '\0')
      000017 90r00r00         [24]  630 	mov	dptr,#_hex_to_int_str_10000_78
      00001A E0               [24]  631 	movx	a,@dptr
      00001B FD               [12]  632 	mov	r5,a
      00001C A3               [24]  633 	inc	dptr
      00001D E0               [24]  634 	movx	a,@dptr
      00001E FE               [12]  635 	mov	r6,a
      00001F A3               [24]  636 	inc	dptr
      000020 E0               [24]  637 	movx	a,@dptr
      000021 FF               [12]  638 	mov	r7,a
      000022 8D 02            [24]  639 	mov	ar2,r5
      000024 8E 03            [24]  640 	mov	ar3,r6
      000026 8F 04            [24]  641 	mov	ar4,r7
      000028 8D*00            [24]  642 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  643 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  644 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  645 	mov	r0,#0x00
      000030 79 00            [12]  646 	mov	r1,#0x00
      000032                        647 00112$:
      000032 C0 02            [24]  648 	push	ar2
      000034 C0 03            [24]  649 	push	ar3
      000036 C0 04            [24]  650 	push	ar4
      000038 E8               [12]  651 	mov	a,r0
      000039 25*00            [12]  652 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  653 	mov	r2,a
      00003C E9               [12]  654 	mov	a,r1
      00003D 35*01            [12]  655 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  656 	mov	r3,a
      000040 AC*02            [24]  657 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  658 	mov	dpl,r2
      000044 8B 83            [24]  659 	mov	dph,r3
      000046 8C F0            [24]  660 	mov	b,r4
      000048 12r00r00         [24]  661 	lcall	__gptrget
      00004B F5*03            [12]  662 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  663 	pop	ar4
      00004F D0 03            [24]  664 	pop	ar3
      000051 D0 02            [24]  665 	pop	ar2
      000053 E5*03            [12]  666 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  667 	jnz	00166$
      000057 02r01rAE         [24]  668 	ljmp	00114$
      00005A                        669 00166$:
                                    670 ;	main.c:28: int ASCII = (int)str[i];
      00005A C0 02            [24]  671 	push	ar2
      00005C C0 03            [24]  672 	push	ar3
      00005E C0 04            [24]  673 	push	ar4
      000060 85*03*04         [24]  674 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  675 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  676 	mov	dptr,#_hex_to_int_ASCII_20000_80
      000069 E5*04            [12]  677 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  678 	movx	@dptr,a
      00006C E5*05            [12]  679 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  680 	inc	dptr
      00006F F0               [24]  681 	movx	@dptr,a
                                    682 ;	main.c:29: result *= 16;
      000070 90r00r03         [24]  683 	mov	dptr,#_hex_to_int_result_10000_79
      000073 E0               [24]  684 	movx	a,@dptr
      000074 FB               [12]  685 	mov	r3,a
      000075 A3               [24]  686 	inc	dptr
      000076 E0               [24]  687 	movx	a,@dptr
      000077 C4               [12]  688 	swap	a
      000078 54 F0            [12]  689 	anl	a,#0xf0
      00007A CB               [12]  690 	xch	a,r3
      00007B C4               [12]  691 	swap	a
      00007C CB               [12]  692 	xch	a,r3
      00007D 6B               [12]  693 	xrl	a,r3
      00007E CB               [12]  694 	xch	a,r3
      00007F 54 F0            [12]  695 	anl	a,#0xf0
      000081 CB               [12]  696 	xch	a,r3
      000082 6B               [12]  697 	xrl	a,r3
      000083 FC               [12]  698 	mov	r4,a
      000084 90r00r03         [24]  699 	mov	dptr,#_hex_to_int_result_10000_79
      000087 EB               [12]  700 	mov	a,r3
      000088 F0               [24]  701 	movx	@dptr,a
      000089 EC               [12]  702 	mov	a,r4
      00008A A3               [24]  703 	inc	dptr
      00008B F0               [24]  704 	movx	@dptr,a
                                    705 ;	main.c:30: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  706 	clr	c
      00008D E5*04            [12]  707 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  708 	subb	a,#0x30
      000091 E5*05            [12]  709 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  710 	xrl	a,#0x80
      000095 94 80            [12]  711 	subb	a,#0x80
      000097 D0 04            [24]  712 	pop	ar4
      000099 D0 03            [24]  713 	pop	ar3
      00009B D0 02            [24]  714 	pop	ar2
      00009D 40 3F            [24]  715 	jc	00109$
      00009F 74 39            [12]  716 	mov	a,#0x39
      0000A1 95*04            [12]  717 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  718 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  719 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  720 	xrl	b,#0x80
      0000AB 95 F0            [12]  721 	subb	a,b
      0000AD 40 2F            [24]  722 	jc	00109$
                                    723 ;	main.c:32: result += str[i] - 48;
      0000AF C0 02            [24]  724 	push	ar2
      0000B1 C0 03            [24]  725 	push	ar3
      0000B3 C0 04            [24]  726 	push	ar4
      0000B5 E5*04            [12]  727 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  728 	add	a,#0xd0
      0000B9 F5*04            [12]  729 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  730 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  731 	addc	a,#0xff
      0000BF F5*05            [12]  732 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  733 	mov	dptr,#_hex_to_int_result_10000_79
      0000C4 E0               [24]  734 	movx	a,@dptr
      0000C5 FA               [12]  735 	mov	r2,a
      0000C6 A3               [24]  736 	inc	dptr
      0000C7 E0               [24]  737 	movx	a,@dptr
      0000C8 FC               [12]  738 	mov	r4,a
      0000C9 90r00r03         [24]  739 	mov	dptr,#_hex_to_int_result_10000_79
      0000CC E5*04            [12]  740 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  741 	add	a, r2
      0000CF F0               [24]  742 	movx	@dptr,a
      0000D0 E5*05            [12]  743 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  744 	addc	a, r4
      0000D3 A3               [24]  745 	inc	dptr
      0000D4 F0               [24]  746 	movx	@dptr,a
      0000D5 D0 04            [24]  747 	pop	ar4
      0000D7 D0 03            [24]  748 	pop	ar3
      0000D9 D0 02            [24]  749 	pop	ar2
      0000DB 02r01rA6         [24]  750 	ljmp	00110$
      0000DE                        751 00109$:
                                    752 ;	main.c:34: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  753 	mov	dptr,#_hex_to_int_ASCII_20000_80
      0000E1 E0               [24]  754 	movx	a,@dptr
      0000E2 F5*04            [12]  755 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  756 	inc	dptr
      0000E5 E0               [24]  757 	movx	a,@dptr
      0000E6 F5*05            [12]  758 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  759 	clr	c
      0000E9 E5*04            [12]  760 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  761 	subb	a,#0x41
      0000ED E5*05            [12]  762 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  763 	xrl	a,#0x80
      0000F1 94 80            [12]  764 	subb	a,#0x80
      0000F3 40 4E            [24]  765 	jc	00105$
      0000F5 74 46            [12]  766 	mov	a,#0x46
      0000F7 95*04            [12]  767 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  768 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  769 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  770 	xrl	b,#0x80
      000101 95 F0            [12]  771 	subb	a,b
      000103 40 3E            [24]  772 	jc	00105$
                                    773 ;	main.c:36: result += str[i] - 55;
      000105 C0 05            [24]  774 	push	ar5
      000107 C0 06            [24]  775 	push	ar6
      000109 C0 07            [24]  776 	push	ar7
      00010B E8               [12]  777 	mov	a,r0
      00010C 2A               [12]  778 	add	a, r2
      00010D FD               [12]  779 	mov	r5,a
      00010E E9               [12]  780 	mov	a,r1
      00010F 3B               [12]  781 	addc	a, r3
      000110 FE               [12]  782 	mov	r6,a
      000111 8C 07            [24]  783 	mov	ar7,r4
      000113 8D 82            [24]  784 	mov	dpl,r5
      000115 8E 83            [24]  785 	mov	dph,r6
      000117 8F F0            [24]  786 	mov	b,r7
      000119 12r00r00         [24]  787 	lcall	__gptrget
      00011C 7F 00            [12]  788 	mov	r7,#0x00
      00011E 24 C9            [12]  789 	add	a,#0xc9
      000120 F5*04            [12]  790 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  791 	mov	a,r7
      000123 34 FF            [12]  792 	addc	a,#0xff
      000125 F5*05            [12]  793 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  794 	mov	dptr,#_hex_to_int_result_10000_79
      00012A E0               [24]  795 	movx	a,@dptr
      00012B FE               [12]  796 	mov	r6,a
      00012C A3               [24]  797 	inc	dptr
      00012D E0               [24]  798 	movx	a,@dptr
      00012E FF               [12]  799 	mov	r7,a
      00012F 90r00r03         [24]  800 	mov	dptr,#_hex_to_int_result_10000_79
      000132 E5*04            [12]  801 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  802 	add	a, r6
      000135 F0               [24]  803 	movx	@dptr,a
      000136 E5*05            [12]  804 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  805 	addc	a, r7
      000139 A3               [24]  806 	inc	dptr
      00013A F0               [24]  807 	movx	@dptr,a
      00013B D0 07            [24]  808 	pop	ar7
      00013D D0 06            [24]  809 	pop	ar6
      00013F D0 05            [24]  810 	pop	ar5
      000141 80 63            [24]  811 	sjmp	00110$
      000143                        812 00105$:
                                    813 ;	main.c:38: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  814 	mov	dptr,#_hex_to_int_ASCII_20000_80
      000146 E0               [24]  815 	movx	a,@dptr
      000147 F5*04            [12]  816 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  817 	inc	dptr
      00014A E0               [24]  818 	movx	a,@dptr
      00014B F5*05            [12]  819 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  820 	clr	c
      00014E E5*04            [12]  821 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  822 	subb	a,#0x61
      000152 E5*05            [12]  823 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  824 	xrl	a,#0x80
      000156 94 80            [12]  825 	subb	a,#0x80
      000158 40 4C            [24]  826 	jc	00110$
      00015A 74 66            [12]  827 	mov	a,#0x66
      00015C 95*04            [12]  828 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  829 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  830 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  831 	xrl	b,#0x80
      000166 95 F0            [12]  832 	subb	a,b
      000168 40 3C            [24]  833 	jc	00110$
                                    834 ;	main.c:40: result += str[i] - 87;
      00016A C0 02            [24]  835 	push	ar2
      00016C C0 03            [24]  836 	push	ar3
      00016E C0 04            [24]  837 	push	ar4
      000170 E8               [12]  838 	mov	a,r0
      000171 2D               [12]  839 	add	a, r5
      000172 FA               [12]  840 	mov	r2,a
      000173 E9               [12]  841 	mov	a,r1
      000174 3E               [12]  842 	addc	a, r6
      000175 FB               [12]  843 	mov	r3,a
      000176 8F 04            [24]  844 	mov	ar4,r7
      000178 8A 82            [24]  845 	mov	dpl,r2
      00017A 8B 83            [24]  846 	mov	dph,r3
      00017C 8C F0            [24]  847 	mov	b,r4
      00017E 12r00r00         [24]  848 	lcall	__gptrget
      000181 7C 00            [12]  849 	mov	r4,#0x00
      000183 24 A9            [12]  850 	add	a,#0xa9
      000185 F5*04            [12]  851 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  852 	mov	a,r4
      000188 34 FF            [12]  853 	addc	a,#0xff
      00018A F5*05            [12]  854 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  855 	mov	dptr,#_hex_to_int_result_10000_79
      00018F E0               [24]  856 	movx	a,@dptr
      000190 FB               [12]  857 	mov	r3,a
      000191 A3               [24]  858 	inc	dptr
      000192 E0               [24]  859 	movx	a,@dptr
      000193 FC               [12]  860 	mov	r4,a
      000194 90r00r03         [24]  861 	mov	dptr,#_hex_to_int_result_10000_79
      000197 E5*04            [12]  862 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  863 	add	a, r3
      00019A F0               [24]  864 	movx	@dptr,a
      00019B E5*05            [12]  865 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  866 	addc	a, r4
      00019E A3               [24]  867 	inc	dptr
      00019F F0               [24]  868 	movx	@dptr,a
                                    869 ;	main.c:44: return result;
      0001A0 D0 04            [24]  870 	pop	ar4
      0001A2 D0 03            [24]  871 	pop	ar3
      0001A4 D0 02            [24]  872 	pop	ar2
                                    873 ;	main.c:40: result += str[i] - 87;
      0001A6                        874 00110$:
                                    875 ;	main.c:42: i++;
      0001A6 08               [12]  876 	inc	r0
      0001A7 B8 00 01         [24]  877 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  878 	inc	r1
      0001AB                        879 00173$:
      0001AB 02r00r32         [24]  880 	ljmp	00112$
      0001AE                        881 00114$:
                                    882 ;	main.c:44: return result;
      0001AE 90r00r03         [24]  883 	mov	dptr,#_hex_to_int_result_10000_79
      0001B1 E0               [24]  884 	movx	a,@dptr
      0001B2 FE               [12]  885 	mov	r6,a
      0001B3 A3               [24]  886 	inc	dptr
      0001B4 E0               [24]  887 	movx	a,@dptr
                                    888 ;	main.c:46: }
      0001B5 8E 82            [24]  889 	mov	dpl,r6
      0001B7 F5 83            [12]  890 	mov	dph,a
      0001B9 22               [24]  891 	ret
                                    892 ;------------------------------------------------------------
                                    893 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    894 ;------------------------------------------------------------
                                    895 ;i                         Allocated with name '_get_user_buffer_size_i_10000_85'
                                    896 ;output                    Allocated with name '_get_user_buffer_size_output_10000_85'
                                    897 ;input                     Allocated with name '_get_user_buffer_size_input_10000_85'
                                    898 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_85'
                                    899 ;------------------------------------------------------------
                                    900 ;	main.c:49: int get_user_buffer_size(void)
                                    901 ;	-----------------------------------------
                                    902 ;	 function get_user_buffer_size
                                    903 ;	-----------------------------------------
      0001BA                        904 _get_user_buffer_size:
                                    905 ;	main.c:55: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  906 	mov	r6,#0x00
      0001BC 7F 00            [12]  907 	mov	r7,#0x00
      0001BE                        908 00103$:
      0001BE C0 07            [24]  909 	push	ar7
      0001C0 C0 06            [24]  910 	push	ar6
      0001C2 12r00r00         [24]  911 	lcall	_getchar
      0001C5 AC 82            [24]  912 	mov	r4, dpl
      0001C7 D0 06            [24]  913 	pop	ar6
      0001C9 D0 07            [24]  914 	pop	ar7
      0001CB BC 0A 02         [24]  915 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  916 	sjmp	00105$
      0001D0                        917 00133$:
      0001D0 BC 0D 02         [24]  918 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  919 	sjmp	00105$
      0001D5                        920 00134$:
      0001D5 C3               [12]  921 	clr	c
      0001D6 EE               [12]  922 	mov	a,r6
      0001D7 94 09            [12]  923 	subb	a,#0x09
      0001D9 EF               [12]  924 	mov	a,r7
      0001DA 64 80            [12]  925 	xrl	a,#0x80
      0001DC 94 80            [12]  926 	subb	a,#0x80
      0001DE 50 2A            [24]  927 	jnc	00105$
                                    928 ;	main.c:57: putchar(ch);
      0001E0 8C 03            [24]  929 	mov	ar3,r4
      0001E2 7D 00            [12]  930 	mov	r5,#0x00
      0001E4 8B 82            [24]  931 	mov	dpl, r3
      0001E6 8D 83            [24]  932 	mov	dph, r5
      0001E8 C0 07            [24]  933 	push	ar7
      0001EA C0 06            [24]  934 	push	ar6
      0001EC C0 04            [24]  935 	push	ar4
      0001EE 12r00r00         [24]  936 	lcall	_putchar
      0001F1 D0 04            [24]  937 	pop	ar4
      0001F3 D0 06            [24]  938 	pop	ar6
      0001F5 D0 07            [24]  939 	pop	ar7
                                    940 ;	main.c:58: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12]  941 	mov	a,r6
      0001F8 24r07            [12]  942 	add	a, #_get_user_buffer_size_input_10000_85
      0001FA F5 82            [12]  943 	mov	dpl,a
      0001FC EF               [12]  944 	mov	a,r7
      0001FD 34s00            [12]  945 	addc	a, #(_get_user_buffer_size_input_10000_85 >> 8)
      0001FF F5 83            [12]  946 	mov	dph,a
      000201 EC               [12]  947 	mov	a,r4
      000202 F0               [24]  948 	movx	@dptr,a
                                    949 ;	main.c:59: i++;
      000203 0E               [12]  950 	inc	r6
      000204 BE 00 B7         [24]  951 	cjne	r6,#0x00,00103$
      000207 0F               [12]  952 	inc	r7
      000208 80 B4            [24]  953 	sjmp	00103$
      00020A                        954 00105$:
                                    955 ;	main.c:61: input[i] = '\0';
      00020A EE               [12]  956 	mov	a,r6
      00020B 24r07            [12]  957 	add	a, #_get_user_buffer_size_input_10000_85
      00020D F5 82            [12]  958 	mov	dpl,a
      00020F EF               [12]  959 	mov	a,r7
      000210 34s00            [12]  960 	addc	a, #(_get_user_buffer_size_input_10000_85 >> 8)
      000212 F5 83            [12]  961 	mov	dph,a
      000214 E4               [12]  962 	clr	a
      000215 F0               [24]  963 	movx	@dptr,a
                                    964 ;	main.c:62: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24]  965 	mov	dptr,#_get_user_buffer_size_input_10000_85
      000219 F5 F0            [12]  966 	mov	b,a
      00021B 12r00r00         [24]  967 	lcall	_hex_to_int
      00021E AE 82            [24]  968 	mov	r6, dpl
      000220 AF 83            [24]  969 	mov	r7, dph
                                    970 ;	main.c:63: printf_tiny("\n\r");
      000222 C0 07            [24]  971 	push	ar7
      000224 C0 06            [24]  972 	push	ar6
      000226 74r00            [12]  973 	mov	a,#___str_0
      000228 C0 E0            [24]  974 	push	acc
      00022A 74s00            [12]  975 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24]  976 	push	acc
      00022E 12r00r00         [24]  977 	lcall	_printf_tiny
      000231 15 81            [12]  978 	dec	sp
      000233 15 81            [12]  979 	dec	sp
      000235 D0 06            [24]  980 	pop	ar6
      000237 D0 07            [24]  981 	pop	ar7
                                    982 ;	main.c:65: return output;
      000239 8E 82            [24]  983 	mov	dpl, r6
      00023B 8F 83            [24]  984 	mov	dph, r7
                                    985 ;	main.c:66: }
      00023D 22               [24]  986 	ret
                                    987 ;------------------------------------------------------------
                                    988 ;Allocation info for local variables in function 'main'
                                    989 ;------------------------------------------------------------
                                    990 ;device_mac                Allocated with name '_main_device_mac_10000_88'
                                    991 ;target_mac                Allocated with name '_main_target_mac_10000_88'
                                    992 ;device_ip                 Allocated with name '_main_device_ip_10000_88'
                                    993 ;target_ip                 Allocated with name '_main_target_ip_10000_88'
                                    994 ;c                         Allocated with name '_main_c_20001_90'
                                    995 ;reg_bank                  Allocated with name '_main_reg_bank_40002_93'
                                    996 ;addr                      Allocated with name '_main_addr_40003_94'
                                    997 ;data                      Allocated with name '_main_data_40004_95'
                                    998 ;num_bytes                 Allocated with name '_main_num_bytes_40002_97'
                                    999 ;start_address             Allocated with name '_main_start_address_40003_98'
                                   1000 ;buffer                    Allocated with name '_main_buffer_40003_98'
                                   1001 ;i                         Allocated with name '_main_i_50003_99'
                                   1002 ;num_bytes                 Allocated with name '_main_num_bytes_40002_102'
                                   1003 ;start_address             Allocated with name '_main_start_address_40003_103'
                                   1004 ;buffer                    Allocated with name '_main_buffer_40003_103'
                                   1005 ;reg_bank                  Allocated with name '_main_reg_bank_40002_105'
                                   1006 ;addr                      Allocated with name '_main_addr_40003_106'
                                   1007 ;data                      Allocated with name '_main_data_40003_106'
                                   1008 ;addr                      Allocated with name '_main_addr_40002_108'
                                   1009 ;data                      Allocated with name '_main_data_40003_109'
                                   1010 ;addr                      Allocated with name '_main_addr_40002_111'
                                   1011 ;data                      Allocated with name '_main_data_40002_111'
                                   1012 ;addr                      Allocated with name '_main_addr_40002_114'
                                   1013 ;bank                      Allocated with name '_main_bank_40003_115'
                                   1014 ;data                      Allocated with name '_main_data_40003_115'
                                   1015 ;i                         Allocated with name '_main_i_50001_120'
                                   1016 ;------------------------------------------------------------
                                   1017 ;	main.c:68: void main(void)
                                   1018 ;	-----------------------------------------
                                   1019 ;	 function main
                                   1020 ;	-----------------------------------------
      00023E                       1021 _main:
                                   1022 ;	main.c:70: uint8_t device_mac[6] = { 0x02, 0x11, 0x22, 0x33, 0x44, 0x55 }; // Default MAC
      00023E 90r00r11         [24] 1023 	mov	dptr,#_main_device_mac_10000_88
      000241 74 02            [12] 1024 	mov	a,#0x02
      000243 F0               [24] 1025 	movx	@dptr,a
      000244 90r00r12         [24] 1026 	mov	dptr,#(_main_device_mac_10000_88 + 0x0001)
      000247 74 11            [12] 1027 	mov	a,#0x11
      000249 F0               [24] 1028 	movx	@dptr,a
      00024A 90r00r13         [24] 1029 	mov	dptr,#(_main_device_mac_10000_88 + 0x0002)
      00024D 23               [12] 1030 	rl	a
      00024E F0               [24] 1031 	movx	@dptr,a
      00024F 90r00r14         [24] 1032 	mov	dptr,#(_main_device_mac_10000_88 + 0x0003)
      000252 74 33            [12] 1033 	mov	a,#0x33
      000254 F0               [24] 1034 	movx	@dptr,a
      000255 90r00r15         [24] 1035 	mov	dptr,#(_main_device_mac_10000_88 + 0x0004)
      000258 74 44            [12] 1036 	mov	a,#0x44
      00025A F0               [24] 1037 	movx	@dptr,a
      00025B 90r00r16         [24] 1038 	mov	dptr,#(_main_device_mac_10000_88 + 0x0005)
      00025E 74 55            [12] 1039 	mov	a,#0x55
      000260 F0               [24] 1040 	movx	@dptr,a
                                   1041 ;	main.c:71: uint8_t target_mac[6] = { 0xF8, 0x75, 0xA4, 0x8C, 0x41, 0x31 }; // Default MAC
      000261 90r00r17         [24] 1042 	mov	dptr,#_main_target_mac_10000_88
      000264 74 F8            [12] 1043 	mov	a,#0xf8
      000266 F0               [24] 1044 	movx	@dptr,a
      000267 90r00r18         [24] 1045 	mov	dptr,#(_main_target_mac_10000_88 + 0x0001)
      00026A 74 75            [12] 1046 	mov	a,#0x75
      00026C F0               [24] 1047 	movx	@dptr,a
      00026D 90r00r19         [24] 1048 	mov	dptr,#(_main_target_mac_10000_88 + 0x0002)
      000270 74 A4            [12] 1049 	mov	a,#0xa4
      000272 F0               [24] 1050 	movx	@dptr,a
      000273 90r00r1A         [24] 1051 	mov	dptr,#(_main_target_mac_10000_88 + 0x0003)
      000276 74 8C            [12] 1052 	mov	a,#0x8c
      000278 F0               [24] 1053 	movx	@dptr,a
      000279 90r00r1B         [24] 1054 	mov	dptr,#(_main_target_mac_10000_88 + 0x0004)
      00027C 74 41            [12] 1055 	mov	a,#0x41
      00027E F0               [24] 1056 	movx	@dptr,a
      00027F 90r00r1C         [24] 1057 	mov	dptr,#(_main_target_mac_10000_88 + 0x0005)
      000282 74 31            [12] 1058 	mov	a,#0x31
      000284 F0               [24] 1059 	movx	@dptr,a
                                   1060 ;	main.c:72: uint8_t device_ip[4] = { 192, 168, 1, 100 }; // Default IP Address
      000285 90r00r1D         [24] 1061 	mov	dptr,#_main_device_ip_10000_88
      000288 74 C0            [12] 1062 	mov	a,#0xc0
      00028A F0               [24] 1063 	movx	@dptr,a
      00028B 90r00r1E         [24] 1064 	mov	dptr,#(_main_device_ip_10000_88 + 0x0001)
      00028E 74 A8            [12] 1065 	mov	a,#0xa8
      000290 F0               [24] 1066 	movx	@dptr,a
      000291 90r00r1F         [24] 1067 	mov	dptr,#(_main_device_ip_10000_88 + 0x0002)
      000294 74 01            [12] 1068 	mov	a,#0x01
      000296 F0               [24] 1069 	movx	@dptr,a
      000297 90r00r20         [24] 1070 	mov	dptr,#(_main_device_ip_10000_88 + 0x0003)
      00029A 74 64            [12] 1071 	mov	a,#0x64
      00029C F0               [24] 1072 	movx	@dptr,a
                                   1073 ;	main.c:73: uint8_t target_ip[4] = { 192, 168, 1, 1 };
      00029D 90r00r21         [24] 1074 	mov	dptr,#_main_target_ip_10000_88
      0002A0 74 C0            [12] 1075 	mov	a,#0xc0
      0002A2 F0               [24] 1076 	movx	@dptr,a
      0002A3 90r00r22         [24] 1077 	mov	dptr,#(_main_target_ip_10000_88 + 0x0001)
      0002A6 74 A8            [12] 1078 	mov	a,#0xa8
      0002A8 F0               [24] 1079 	movx	@dptr,a
      0002A9 90r00r23         [24] 1080 	mov	dptr,#(_main_target_ip_10000_88 + 0x0002)
      0002AC 74 01            [12] 1081 	mov	a,#0x01
      0002AE F0               [24] 1082 	movx	@dptr,a
      0002AF 90r00r24         [24] 1083 	mov	dptr,#(_main_target_ip_10000_88 + 0x0003)
      0002B2 F0               [24] 1084 	movx	@dptr,a
                                   1085 ;	main.c:75: printf("SPI Operations on 8051\n\r");
      0002B3 74r03            [12] 1086 	mov	a,#___str_1
      0002B5 C0 E0            [24] 1087 	push	acc
      0002B7 74s00            [12] 1088 	mov	a,#(___str_1 >> 8)
      0002B9 C0 E0            [24] 1089 	push	acc
      0002BB 74 80            [12] 1090 	mov	a,#0x80
      0002BD C0 E0            [24] 1091 	push	acc
      0002BF 12r00r00         [24] 1092 	lcall	_printf
      0002C2 15 81            [12] 1093 	dec	sp
      0002C4 15 81            [12] 1094 	dec	sp
      0002C6 15 81            [12] 1095 	dec	sp
                                   1096 ;	main.c:76: configure_SPI();
      0002C8 12r00r00         [24] 1097 	lcall	_configure_SPI
                                   1098 ;	main.c:78: enc_init(device_mac);
      0002CB 90r00r11         [24] 1099 	mov	dptr,#_main_device_mac_10000_88
      0002CE 75 F0 00         [24] 1100 	mov	b, #0x00
      0002D1 12r00r00         [24] 1101 	lcall	_enc_init
                                   1102 ;	main.c:80: while(1)
      0002D4                       1103 00118$:
                                   1104 ;	main.c:82: printf("\n\rChoose an action: \n\r");
      0002D4 74r1C            [12] 1105 	mov	a,#___str_2
      0002D6 C0 E0            [24] 1106 	push	acc
      0002D8 74s00            [12] 1107 	mov	a,#(___str_2 >> 8)
      0002DA C0 E0            [24] 1108 	push	acc
      0002DC 74 80            [12] 1109 	mov	a,#0x80
      0002DE C0 E0            [24] 1110 	push	acc
      0002E0 12r00r00         [24] 1111 	lcall	_printf
      0002E3 15 81            [12] 1112 	dec	sp
      0002E5 15 81            [12] 1113 	dec	sp
      0002E7 15 81            [12] 1114 	dec	sp
                                   1115 ;	main.c:83: printf("1 --> Control Write\n\r");
      0002E9 74r33            [12] 1116 	mov	a,#___str_3
      0002EB C0 E0            [24] 1117 	push	acc
      0002ED 74s00            [12] 1118 	mov	a,#(___str_3 >> 8)
      0002EF C0 E0            [24] 1119 	push	acc
      0002F1 74 80            [12] 1120 	mov	a,#0x80
      0002F3 C0 E0            [24] 1121 	push	acc
      0002F5 12r00r00         [24] 1122 	lcall	_printf
      0002F8 15 81            [12] 1123 	dec	sp
      0002FA 15 81            [12] 1124 	dec	sp
      0002FC 15 81            [12] 1125 	dec	sp
                                   1126 ;	main.c:84: printf("2 --> Buffer Write\n\r");
      0002FE 74r49            [12] 1127 	mov	a,#___str_4
      000300 C0 E0            [24] 1128 	push	acc
      000302 74s00            [12] 1129 	mov	a,#(___str_4 >> 8)
      000304 C0 E0            [24] 1130 	push	acc
      000306 74 80            [12] 1131 	mov	a,#0x80
      000308 C0 E0            [24] 1132 	push	acc
      00030A 12r00r00         [24] 1133 	lcall	_printf
      00030D 15 81            [12] 1134 	dec	sp
      00030F 15 81            [12] 1135 	dec	sp
      000311 15 81            [12] 1136 	dec	sp
                                   1137 ;	main.c:85: printf("3 --> Buffer Read\n\r");
      000313 74r5E            [12] 1138 	mov	a,#___str_5
      000315 C0 E0            [24] 1139 	push	acc
      000317 74s00            [12] 1140 	mov	a,#(___str_5 >> 8)
      000319 C0 E0            [24] 1141 	push	acc
      00031B 74 80            [12] 1142 	mov	a,#0x80
      00031D C0 E0            [24] 1143 	push	acc
      00031F 12r00r00         [24] 1144 	lcall	_printf
      000322 15 81            [12] 1145 	dec	sp
      000324 15 81            [12] 1146 	dec	sp
      000326 15 81            [12] 1147 	dec	sp
                                   1148 ;	main.c:86: printf("4 --> MAC Register Read\n\r");
      000328 74r72            [12] 1149 	mov	a,#___str_6
      00032A C0 E0            [24] 1150 	push	acc
      00032C 74s00            [12] 1151 	mov	a,#(___str_6 >> 8)
      00032E C0 E0            [24] 1152 	push	acc
      000330 74 80            [12] 1153 	mov	a,#0x80
      000332 C0 E0            [24] 1154 	push	acc
      000334 12r00r00         [24] 1155 	lcall	_printf
      000337 15 81            [12] 1156 	dec	sp
      000339 15 81            [12] 1157 	dec	sp
      00033B 15 81            [12] 1158 	dec	sp
                                   1159 ;	main.c:87: printf("5 --> PHY SPI Write\n\r");
      00033D 74r8C            [12] 1160 	mov	a,#___str_7
      00033F C0 E0            [24] 1161 	push	acc
      000341 74s00            [12] 1162 	mov	a,#(___str_7 >> 8)
      000343 C0 E0            [24] 1163 	push	acc
      000345 74 80            [12] 1164 	mov	a,#0x80
      000347 C0 E0            [24] 1165 	push	acc
      000349 12r00r00         [24] 1166 	lcall	_printf
      00034C 15 81            [12] 1167 	dec	sp
      00034E 15 81            [12] 1168 	dec	sp
      000350 15 81            [12] 1169 	dec	sp
                                   1170 ;	main.c:88: printf("6 --> PHY SPI Read\n\r");
      000352 74rA2            [12] 1171 	mov	a,#___str_8
      000354 C0 E0            [24] 1172 	push	acc
      000356 74s00            [12] 1173 	mov	a,#(___str_8 >> 8)
      000358 C0 E0            [24] 1174 	push	acc
      00035A 74 80            [12] 1175 	mov	a,#0x80
      00035C C0 E0            [24] 1176 	push	acc
      00035E 12r00r00         [24] 1177 	lcall	_printf
      000361 15 81            [12] 1178 	dec	sp
      000363 15 81            [12] 1179 	dec	sp
      000365 15 81            [12] 1180 	dec	sp
                                   1181 ;	main.c:89: printf("7 --> ENC Reset\n\r");
      000367 74rB7            [12] 1182 	mov	a,#___str_9
      000369 C0 E0            [24] 1183 	push	acc
      00036B 74s00            [12] 1184 	mov	a,#(___str_9 >> 8)
      00036D C0 E0            [24] 1185 	push	acc
      00036F 74 80            [12] 1186 	mov	a,#0x80
      000371 C0 E0            [24] 1187 	push	acc
      000373 12r00r00         [24] 1188 	lcall	_printf
      000376 15 81            [12] 1189 	dec	sp
      000378 15 81            [12] 1190 	dec	sp
      00037A 15 81            [12] 1191 	dec	sp
                                   1192 ;	main.c:90: printf("8 --> Read ETH Register\n\r");
      00037C 74rC9            [12] 1193 	mov	a,#___str_10
      00037E C0 E0            [24] 1194 	push	acc
      000380 74s00            [12] 1195 	mov	a,#(___str_10 >> 8)
      000382 C0 E0            [24] 1196 	push	acc
      000384 74 80            [12] 1197 	mov	a,#0x80
      000386 C0 E0            [24] 1198 	push	acc
      000388 12r00r00         [24] 1199 	lcall	_printf
      00038B 15 81            [12] 1200 	dec	sp
      00038D 15 81            [12] 1201 	dec	sp
      00038F 15 81            [12] 1202 	dec	sp
                                   1203 ;	main.c:91: printf("9 --> Display Menu\n\r");
      000391 74rE3            [12] 1204 	mov	a,#___str_11
      000393 C0 E0            [24] 1205 	push	acc
      000395 74s00            [12] 1206 	mov	a,#(___str_11 >> 8)
      000397 C0 E0            [24] 1207 	push	acc
      000399 74 80            [12] 1208 	mov	a,#0x80
      00039B C0 E0            [24] 1209 	push	acc
      00039D 12r00r00         [24] 1210 	lcall	_printf
      0003A0 15 81            [12] 1211 	dec	sp
      0003A2 15 81            [12] 1212 	dec	sp
      0003A4 15 81            [12] 1213 	dec	sp
                                   1214 ;	main.c:92: printf("A --> Send ARP Request\n\r");
      0003A6 74rF8            [12] 1215 	mov	a,#___str_12
      0003A8 C0 E0            [24] 1216 	push	acc
      0003AA 74s00            [12] 1217 	mov	a,#(___str_12 >> 8)
      0003AC C0 E0            [24] 1218 	push	acc
      0003AE 74 80            [12] 1219 	mov	a,#0x80
      0003B0 C0 E0            [24] 1220 	push	acc
      0003B2 12r00r00         [24] 1221 	lcall	_printf
      0003B5 15 81            [12] 1222 	dec	sp
      0003B7 15 81            [12] 1223 	dec	sp
      0003B9 15 81            [12] 1224 	dec	sp
                                   1225 ;	main.c:93: printf("B --> Init RX buffers\n\r");
      0003BB 74r11            [12] 1226 	mov	a,#___str_13
      0003BD C0 E0            [24] 1227 	push	acc
      0003BF 74s01            [12] 1228 	mov	a,#(___str_13 >> 8)
      0003C1 C0 E0            [24] 1229 	push	acc
      0003C3 74 80            [12] 1230 	mov	a,#0x80
      0003C5 C0 E0            [24] 1231 	push	acc
      0003C7 12r00r00         [24] 1232 	lcall	_printf
      0003CA 15 81            [12] 1233 	dec	sp
      0003CC 15 81            [12] 1234 	dec	sp
      0003CE 15 81            [12] 1235 	dec	sp
                                   1236 ;	main.c:94: printf("C --> Hard Reset(nRESET pin)\n\r");
      0003D0 74r29            [12] 1237 	mov	a,#___str_14
      0003D2 C0 E0            [24] 1238 	push	acc
      0003D4 74s01            [12] 1239 	mov	a,#(___str_14 >> 8)
      0003D6 C0 E0            [24] 1240 	push	acc
      0003D8 74 80            [12] 1241 	mov	a,#0x80
      0003DA C0 E0            [24] 1242 	push	acc
      0003DC 12r00r00         [24] 1243 	lcall	_printf
      0003DF 15 81            [12] 1244 	dec	sp
      0003E1 15 81            [12] 1245 	dec	sp
      0003E3 15 81            [12] 1246 	dec	sp
                                   1247 ;	main.c:96: char c = getchar();
      0003E5 12r00r00         [24] 1248 	lcall	_getchar
      0003E8 AE 82            [24] 1249 	mov	r6, dpl
                                   1250 ;	main.c:97: putchar(c);
      0003EA 8E 05            [24] 1251 	mov	ar5,r6
      0003EC 7F 00            [12] 1252 	mov	r7,#0x00
      0003EE 8D 82            [24] 1253 	mov	dpl, r5
      0003F0 8F 83            [24] 1254 	mov	dph, r7
      0003F2 C0 06            [24] 1255 	push	ar6
      0003F4 12r00r00         [24] 1256 	lcall	_putchar
                                   1257 ;	main.c:98: printf("\n\r");
      0003F7 74r00            [12] 1258 	mov	a,#___str_0
      0003F9 C0 E0            [24] 1259 	push	acc
      0003FB 74s00            [12] 1260 	mov	a,#(___str_0 >> 8)
      0003FD C0 E0            [24] 1261 	push	acc
      0003FF 74 80            [12] 1262 	mov	a,#0x80
      000401 C0 E0            [24] 1263 	push	acc
      000403 12r00r00         [24] 1264 	lcall	_printf
      000406 15 81            [12] 1265 	dec	sp
      000408 15 81            [12] 1266 	dec	sp
      00040A 15 81            [12] 1267 	dec	sp
      00040C D0 06            [24] 1268 	pop	ar6
                                   1269 ;	main.c:100: switch(c)
      00040E BE 31 00         [24] 1270 	cjne	r6,#0x31,00172$
      000411                       1271 00172$:
      000411 50 03            [24] 1272 	jnc	00173$
      000413 02r08r97         [24] 1273 	ljmp	00115$
      000416                       1274 00173$:
      000416 EE               [12] 1275 	mov	a,r6
      000417 24 BC            [12] 1276 	add	a,#0xff - 0x43
      000419 50 03            [24] 1277 	jnc	00174$
      00041B 02r08r97         [24] 1278 	ljmp	00115$
      00041E                       1279 00174$:
      00041E EE               [12] 1280 	mov	a,r6
      00041F 24 CF            [12] 1281 	add	a,#0xcf
      000421 FE               [12] 1282 	mov	r6,a
      000422 24 0A            [12] 1283 	add	a,#(00175$-3-.)
      000424 83               [24] 1284 	movc	a,@a+pc
      000425 F5 82            [12] 1285 	mov	dpl,a
      000427 EE               [12] 1286 	mov	a,r6
      000428 24 17            [12] 1287 	add	a,#(00176$-3-.)
      00042A 83               [24] 1288 	movc	a,@a+pc
      00042B F5 83            [12] 1289 	mov	dph,a
      00042D E4               [12] 1290 	clr	a
      00042E 73               [24] 1291 	jmp	@a+dptr
      00042F                       1292 00175$:
      00042Fr55                    1293 	.db	00101$
      000430rBD                    1294 	.db	00102$
      000431rBB                    1295 	.db	00104$
      000432r1A                    1296 	.db	00105$
      000433r7C                    1297 	.db	00106$
      000434rE7                    1298 	.db	00107$
      000435r22                    1299 	.db	00108$
      000436r3D                    1300 	.db	00109$
      000437r9F                    1301 	.db	00110$
      000438r97                    1302 	.db	00115$
      000439r97                    1303 	.db	00115$
      00043Ar97                    1304 	.db	00115$
      00043Br97                    1305 	.db	00115$
      00043Cr97                    1306 	.db	00115$
      00043Dr97                    1307 	.db	00115$
      00043Er97                    1308 	.db	00115$
      00043Fr5F                    1309 	.db	00111$
      000440rD4                    1310 	.db	00118$
      000441r65                    1311 	.db	00113$
      000442                       1312 00176$:
      000442s04                    1313 	.db	00101$>>8
      000443s04                    1314 	.db	00102$>>8
      000444s05                    1315 	.db	00104$>>8
      000445s06                    1316 	.db	00105$>>8
      000446s06                    1317 	.db	00106$>>8
      000447s06                    1318 	.db	00107$>>8
      000448s07                    1319 	.db	00108$>>8
      000449s07                    1320 	.db	00109$>>8
      00044As07                    1321 	.db	00110$>>8
      00044Bs08                    1322 	.db	00115$>>8
      00044Cs08                    1323 	.db	00115$>>8
      00044Ds08                    1324 	.db	00115$>>8
      00044Es08                    1325 	.db	00115$>>8
      00044Fs08                    1326 	.db	00115$>>8
      000450s08                    1327 	.db	00115$>>8
      000451s08                    1328 	.db	00115$>>8
      000452s08                    1329 	.db	00111$>>8
      000453s02                    1330 	.db	00118$>>8
      000454s08                    1331 	.db	00113$>>8
                                   1332 ;	main.c:102: case '1': {
      000455                       1333 00101$:
                                   1334 ;	main.c:103: printf("Enter the register bank to select:\n\r");
      000455 74r48            [12] 1335 	mov	a,#___str_15
      000457 C0 E0            [24] 1336 	push	acc
      000459 74s01            [12] 1337 	mov	a,#(___str_15 >> 8)
      00045B C0 E0            [24] 1338 	push	acc
      00045D 74 80            [12] 1339 	mov	a,#0x80
      00045F C0 E0            [24] 1340 	push	acc
      000461 12r00r00         [24] 1341 	lcall	_printf
      000464 15 81            [12] 1342 	dec	sp
      000466 15 81            [12] 1343 	dec	sp
      000468 15 81            [12] 1344 	dec	sp
                                   1345 ;	main.c:104: uint8_t reg_bank = get_user_buffer_size();
      00046A 12r01rBA         [24] 1346 	lcall	_get_user_buffer_size
      00046D AE 82            [24] 1347 	mov	r6, dpl
                                   1348 ;	main.c:105: printf("Enter the address of the Control Register:\n\r");
      00046F C0 06            [24] 1349 	push	ar6
      000471 74r6D            [12] 1350 	mov	a,#___str_16
      000473 C0 E0            [24] 1351 	push	acc
      000475 74s01            [12] 1352 	mov	a,#(___str_16 >> 8)
      000477 C0 E0            [24] 1353 	push	acc
      000479 74 80            [12] 1354 	mov	a,#0x80
      00047B C0 E0            [24] 1355 	push	acc
      00047D 12r00r00         [24] 1356 	lcall	_printf
      000480 15 81            [12] 1357 	dec	sp
      000482 15 81            [12] 1358 	dec	sp
      000484 15 81            [12] 1359 	dec	sp
                                   1360 ;	main.c:106: uint8_t addr = get_user_buffer_size();
      000486 12r01rBA         [24] 1361 	lcall	_get_user_buffer_size
      000489 AD 82            [24] 1362 	mov	r5, dpl
                                   1363 ;	main.c:107: printf("Enter the data you want to write:\n\r");
      00048B C0 05            [24] 1364 	push	ar5
      00048D 74r9A            [12] 1365 	mov	a,#___str_17
      00048F C0 E0            [24] 1366 	push	acc
      000491 74s01            [12] 1367 	mov	a,#(___str_17 >> 8)
      000493 C0 E0            [24] 1368 	push	acc
      000495 74 80            [12] 1369 	mov	a,#0x80
      000497 C0 E0            [24] 1370 	push	acc
      000499 12r00r00         [24] 1371 	lcall	_printf
      00049C 15 81            [12] 1372 	dec	sp
      00049E 15 81            [12] 1373 	dec	sp
      0004A0 15 81            [12] 1374 	dec	sp
                                   1375 ;	main.c:108: uint8_t data = get_user_buffer_size();
      0004A2 12r01rBA         [24] 1376 	lcall	_get_user_buffer_size
      0004A5 AC 82            [24] 1377 	mov	r4, dpl
      0004A7 D0 05            [24] 1378 	pop	ar5
      0004A9 D0 06            [24] 1379 	pop	ar6
                                   1380 ;	main.c:109: spi_control_write(reg_bank, addr, data);
      0004AB 90r00r00         [24] 1381 	mov	dptr,#_spi_control_write_PARM_2
      0004AE ED               [12] 1382 	mov	a,r5
      0004AF F0               [24] 1383 	movx	@dptr,a
      0004B0 90r00r00         [24] 1384 	mov	dptr,#_spi_control_write_PARM_3
      0004B3 EC               [12] 1385 	mov	a,r4
      0004B4 F0               [24] 1386 	movx	@dptr,a
      0004B5 8E 82            [24] 1387 	mov	dpl, r6
      0004B7 12r00r00         [24] 1388 	lcall	_spi_control_write
                                   1389 ;	main.c:110: break;
      0004BA 02r02rD4         [24] 1390 	ljmp	00118$
                                   1391 ;	main.c:112: case '2': {
      0004BD                       1392 00102$:
                                   1393 ;	main.c:113: printf("Enter the number of bytes to write:\n\r");
      0004BD 74rBE            [12] 1394 	mov	a,#___str_18
      0004BF C0 E0            [24] 1395 	push	acc
      0004C1 74s01            [12] 1396 	mov	a,#(___str_18 >> 8)
      0004C3 C0 E0            [24] 1397 	push	acc
      0004C5 74 80            [12] 1398 	mov	a,#0x80
      0004C7 C0 E0            [24] 1399 	push	acc
      0004C9 12r00r00         [24] 1400 	lcall	_printf
      0004CC 15 81            [12] 1401 	dec	sp
      0004CE 15 81            [12] 1402 	dec	sp
      0004D0 15 81            [12] 1403 	dec	sp
                                   1404 ;	main.c:114: int num_bytes = get_user_buffer_size();
      0004D2 12r01rBA         [24] 1405 	lcall	_get_user_buffer_size
      0004D5 AE 82            [24] 1406 	mov	r6, dpl
      0004D7 AF 83            [24] 1407 	mov	r7, dph
                                   1408 ;	main.c:115: printf("Enter the starting address:\n\r");
      0004D9 C0 07            [24] 1409 	push	ar7
      0004DB C0 06            [24] 1410 	push	ar6
      0004DD 74rE4            [12] 1411 	mov	a,#___str_19
      0004DF C0 E0            [24] 1412 	push	acc
      0004E1 74s01            [12] 1413 	mov	a,#(___str_19 >> 8)
      0004E3 C0 E0            [24] 1414 	push	acc
      0004E5 74 80            [12] 1415 	mov	a,#0x80
      0004E7 C0 E0            [24] 1416 	push	acc
      0004E9 12r00r00         [24] 1417 	lcall	_printf
      0004EC 15 81            [12] 1418 	dec	sp
      0004EE 15 81            [12] 1419 	dec	sp
      0004F0 15 81            [12] 1420 	dec	sp
                                   1421 ;	main.c:116: uint16_t start_address = get_user_buffer_size();
      0004F2 12r01rBA         [24] 1422 	lcall	_get_user_buffer_size
      0004F5 AC 82            [24] 1423 	mov	r4, dpl
      0004F7 AD 83            [24] 1424 	mov	r5, dph
      0004F9 D0 06            [24] 1425 	pop	ar6
      0004FB D0 07            [24] 1426 	pop	ar7
                                   1427 ;	main.c:118: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      0004FD C0 07            [24] 1428 	push	ar7
      0004FF C0 06            [24] 1429 	push	ar6
      000501 C0 05            [24] 1430 	push	ar5
      000503 C0 04            [24] 1431 	push	ar4
      000505 C0 06            [24] 1432 	push	ar6
      000507 C0 07            [24] 1433 	push	ar7
      000509 74r02            [12] 1434 	mov	a,#___str_20
      00050B C0 E0            [24] 1435 	push	acc
      00050D 74s02            [12] 1436 	mov	a,#(___str_20 >> 8)
      00050F C0 E0            [24] 1437 	push	acc
      000511 74 80            [12] 1438 	mov	a,#0x80
      000513 C0 E0            [24] 1439 	push	acc
      000515 12r00r00         [24] 1440 	lcall	_printf
      000518 E5 81            [12] 1441 	mov	a,sp
      00051A 24 FB            [12] 1442 	add	a,#0xfb
      00051C F5 81            [12] 1443 	mov	sp,a
      00051E D0 04            [24] 1444 	pop	ar4
      000520 D0 05            [24] 1445 	pop	ar5
      000522 D0 06            [24] 1446 	pop	ar6
      000524 D0 07            [24] 1447 	pop	ar7
                                   1448 ;	main.c:119: for (int i = 0; i < num_bytes; i++) {
      000526 7A 00            [12] 1449 	mov	r2,#0x00
      000528 7B 00            [12] 1450 	mov	r3,#0x00
      00052A                       1451 00121$:
      00052A C3               [12] 1452 	clr	c
      00052B EA               [12] 1453 	mov	a,r2
      00052C 9E               [12] 1454 	subb	a,r6
      00052D EB               [12] 1455 	mov	a,r3
      00052E 64 80            [12] 1456 	xrl	a,#0x80
      000530 8F F0            [24] 1457 	mov	b,r7
      000532 63 F0 80         [24] 1458 	xrl	b,#0x80
      000535 95 F0            [12] 1459 	subb	a,b
      000537 50 63            [24] 1460 	jnc	00103$
                                   1461 ;	main.c:120: printf("Byte %d: ", i);
      000539 C0 04            [24] 1462 	push	ar4
      00053B C0 05            [24] 1463 	push	ar5
      00053D C0 07            [24] 1464 	push	ar7
      00053F C0 06            [24] 1465 	push	ar6
      000541 C0 05            [24] 1466 	push	ar5
      000543 C0 04            [24] 1467 	push	ar4
      000545 C0 03            [24] 1468 	push	ar3
      000547 C0 02            [24] 1469 	push	ar2
      000549 C0 02            [24] 1470 	push	ar2
      00054B C0 03            [24] 1471 	push	ar3
      00054D 74r25            [12] 1472 	mov	a,#___str_21
      00054F C0 E0            [24] 1473 	push	acc
      000551 74s02            [12] 1474 	mov	a,#(___str_21 >> 8)
      000553 C0 E0            [24] 1475 	push	acc
      000555 74 80            [12] 1476 	mov	a,#0x80
      000557 C0 E0            [24] 1477 	push	acc
      000559 12r00r00         [24] 1478 	lcall	_printf
      00055C E5 81            [12] 1479 	mov	a,sp
      00055E 24 FB            [12] 1480 	add	a,#0xfb
      000560 F5 81            [12] 1481 	mov	sp,a
      000562 D0 02            [24] 1482 	pop	ar2
      000564 D0 03            [24] 1483 	pop	ar3
      000566 D0 04            [24] 1484 	pop	ar4
      000568 D0 05            [24] 1485 	pop	ar5
                                   1486 ;	main.c:121: buffer[i] = get_user_buffer_size();
      00056A EA               [12] 1487 	mov	a,r2
      00056B 24r25            [12] 1488 	add	a, #_main_buffer_40003_98
      00056D F8               [12] 1489 	mov	r0,a
      00056E EB               [12] 1490 	mov	a,r3
      00056F 34s00            [12] 1491 	addc	a, #(_main_buffer_40003_98 >> 8)
      000571 F9               [12] 1492 	mov	r1,a
      000572 C0 03            [24] 1493 	push	ar3
      000574 C0 02            [24] 1494 	push	ar2
      000576 C0 01            [24] 1495 	push	ar1
      000578 C0 00            [24] 1496 	push	ar0
      00057A 12r01rBA         [24] 1497 	lcall	_get_user_buffer_size
      00057D AC 82            [24] 1498 	mov	r4, dpl
      00057F D0 00            [24] 1499 	pop	ar0
      000581 D0 01            [24] 1500 	pop	ar1
      000583 D0 02            [24] 1501 	pop	ar2
      000585 D0 03            [24] 1502 	pop	ar3
      000587 D0 06            [24] 1503 	pop	ar6
      000589 D0 07            [24] 1504 	pop	ar7
      00058B 88 82            [24] 1505 	mov	dpl,r0
      00058D 89 83            [24] 1506 	mov	dph,r1
      00058F EC               [12] 1507 	mov	a,r4
      000590 F0               [24] 1508 	movx	@dptr,a
                                   1509 ;	main.c:119: for (int i = 0; i < num_bytes; i++) {
      000591 0A               [12] 1510 	inc	r2
      000592 BA 00 01         [24] 1511 	cjne	r2,#0x00,00178$
      000595 0B               [12] 1512 	inc	r3
      000596                       1513 00178$:
      000596 D0 05            [24] 1514 	pop	ar5
      000598 D0 04            [24] 1515 	pop	ar4
      00059A 80 8E            [24] 1516 	sjmp	00121$
      00059C                       1517 00103$:
                                   1518 ;	main.c:123: spi_buffer_write(num_bytes, start_address, buffer);
      00059C 90r00r00         [24] 1519 	mov	dptr,#_spi_buffer_write_PARM_2
      00059F EC               [12] 1520 	mov	a,r4
      0005A0 F0               [24] 1521 	movx	@dptr,a
      0005A1 ED               [12] 1522 	mov	a,r5
      0005A2 A3               [24] 1523 	inc	dptr
      0005A3 F0               [24] 1524 	movx	@dptr,a
      0005A4 90r00r00         [24] 1525 	mov	dptr,#_spi_buffer_write_PARM_3
      0005A7 74r25            [12] 1526 	mov	a,#_main_buffer_40003_98
      0005A9 F0               [24] 1527 	movx	@dptr,a
      0005AA 74s00            [12] 1528 	mov	a,#(_main_buffer_40003_98 >> 8)
      0005AC A3               [24] 1529 	inc	dptr
      0005AD F0               [24] 1530 	movx	@dptr,a
      0005AE E4               [12] 1531 	clr	a
      0005AF A3               [24] 1532 	inc	dptr
      0005B0 F0               [24] 1533 	movx	@dptr,a
      0005B1 8E 82            [24] 1534 	mov	dpl, r6
      0005B3 8F 83            [24] 1535 	mov	dph, r7
      0005B5 12r00r00         [24] 1536 	lcall	_spi_buffer_write
                                   1537 ;	main.c:124: break;
      0005B8 02r02rD4         [24] 1538 	ljmp	00118$
                                   1539 ;	main.c:126: case '3': {
      0005BB                       1540 00104$:
                                   1541 ;	main.c:127: printf("Enter the number of bytes to read:\n\r");
      0005BB 74r2F            [12] 1542 	mov	a,#___str_22
      0005BD C0 E0            [24] 1543 	push	acc
      0005BF 74s02            [12] 1544 	mov	a,#(___str_22 >> 8)
      0005C1 C0 E0            [24] 1545 	push	acc
      0005C3 74 80            [12] 1546 	mov	a,#0x80
      0005C5 C0 E0            [24] 1547 	push	acc
      0005C7 12r00r00         [24] 1548 	lcall	_printf
      0005CA 15 81            [12] 1549 	dec	sp
      0005CC 15 81            [12] 1550 	dec	sp
      0005CE 15 81            [12] 1551 	dec	sp
                                   1552 ;	main.c:128: int num_bytes = get_user_buffer_size();
      0005D0 12r01rBA         [24] 1553 	lcall	_get_user_buffer_size
      0005D3 AE 82            [24] 1554 	mov	r6, dpl
      0005D5 AF 83            [24] 1555 	mov	r7, dph
                                   1556 ;	main.c:129: printf("Enter the starting address:\n\r");
      0005D7 C0 07            [24] 1557 	push	ar7
      0005D9 C0 06            [24] 1558 	push	ar6
      0005DB 74rE4            [12] 1559 	mov	a,#___str_19
      0005DD C0 E0            [24] 1560 	push	acc
      0005DF 74s01            [12] 1561 	mov	a,#(___str_19 >> 8)
      0005E1 C0 E0            [24] 1562 	push	acc
      0005E3 74 80            [12] 1563 	mov	a,#0x80
      0005E5 C0 E0            [24] 1564 	push	acc
      0005E7 12r00r00         [24] 1565 	lcall	_printf
      0005EA 15 81            [12] 1566 	dec	sp
      0005EC 15 81            [12] 1567 	dec	sp
      0005EE 15 81            [12] 1568 	dec	sp
                                   1569 ;	main.c:130: uint16_t start_address = get_user_buffer_size();
      0005F0 12r01rBA         [24] 1570 	lcall	_get_user_buffer_size
      0005F3 AC 82            [24] 1571 	mov	r4, dpl
      0005F5 AD 83            [24] 1572 	mov	r5, dph
      0005F7 D0 06            [24] 1573 	pop	ar6
      0005F9 D0 07            [24] 1574 	pop	ar7
                                   1575 ;	main.c:132: spi_buffer_read(num_bytes, start_address, buffer);
      0005FB 90r00r00         [24] 1576 	mov	dptr,#_spi_buffer_read_PARM_2
      0005FE EC               [12] 1577 	mov	a,r4
      0005FF F0               [24] 1578 	movx	@dptr,a
      000600 ED               [12] 1579 	mov	a,r5
      000601 A3               [24] 1580 	inc	dptr
      000602 F0               [24] 1581 	movx	@dptr,a
      000603 90r00r00         [24] 1582 	mov	dptr,#_spi_buffer_read_PARM_3
      000606 74r25            [12] 1583 	mov	a,#_main_buffer_40003_103
      000608 F0               [24] 1584 	movx	@dptr,a
      000609 74s01            [12] 1585 	mov	a,#(_main_buffer_40003_103 >> 8)
      00060B A3               [24] 1586 	inc	dptr
      00060C F0               [24] 1587 	movx	@dptr,a
      00060D E4               [12] 1588 	clr	a
      00060E A3               [24] 1589 	inc	dptr
      00060F F0               [24] 1590 	movx	@dptr,a
      000610 8E 82            [24] 1591 	mov	dpl, r6
      000612 8F 83            [24] 1592 	mov	dph, r7
      000614 12r00r00         [24] 1593 	lcall	_spi_buffer_read
                                   1594 ;	main.c:160: break;
      000617 02r02rD4         [24] 1595 	ljmp	00118$
                                   1596 ;	main.c:162: case '4': {
      00061A                       1597 00105$:
                                   1598 ;	main.c:163: printf("Enter the MAC register bank to select:\n\r");
      00061A 74r54            [12] 1599 	mov	a,#___str_23
      00061C C0 E0            [24] 1600 	push	acc
      00061E 74s02            [12] 1601 	mov	a,#(___str_23 >> 8)
      000620 C0 E0            [24] 1602 	push	acc
      000622 74 80            [12] 1603 	mov	a,#0x80
      000624 C0 E0            [24] 1604 	push	acc
      000626 12r00r00         [24] 1605 	lcall	_printf
      000629 15 81            [12] 1606 	dec	sp
      00062B 15 81            [12] 1607 	dec	sp
      00062D 15 81            [12] 1608 	dec	sp
                                   1609 ;	main.c:164: uint8_t reg_bank = get_user_buffer_size();
      00062F 12r01rBA         [24] 1610 	lcall	_get_user_buffer_size
      000632 AE 82            [24] 1611 	mov	r6, dpl
                                   1612 ;	main.c:165: printf("Enter the address of the MAC Register:\n\r");
      000634 C0 06            [24] 1613 	push	ar6
      000636 74r7D            [12] 1614 	mov	a,#___str_24
      000638 C0 E0            [24] 1615 	push	acc
      00063A 74s02            [12] 1616 	mov	a,#(___str_24 >> 8)
      00063C C0 E0            [24] 1617 	push	acc
      00063E 74 80            [12] 1618 	mov	a,#0x80
      000640 C0 E0            [24] 1619 	push	acc
      000642 12r00r00         [24] 1620 	lcall	_printf
      000645 15 81            [12] 1621 	dec	sp
      000647 15 81            [12] 1622 	dec	sp
      000649 15 81            [12] 1623 	dec	sp
                                   1624 ;	main.c:166: uint8_t addr = get_user_buffer_size();
      00064B 12r01rBA         [24] 1625 	lcall	_get_user_buffer_size
      00064E AD 82            [24] 1626 	mov	r5, dpl
      000650 D0 06            [24] 1627 	pop	ar6
                                   1628 ;	main.c:167: uint8_t data = mac_spi_read(addr, reg_bank);
      000652 90r00r00         [24] 1629 	mov	dptr,#_mac_spi_read_PARM_2
      000655 EE               [12] 1630 	mov	a,r6
      000656 F0               [24] 1631 	movx	@dptr,a
      000657 8D 82            [24] 1632 	mov	dpl, r5
      000659 12r00r00         [24] 1633 	lcall	_mac_spi_read
      00065C AF 82            [24] 1634 	mov	r7, dpl
                                   1635 ;	main.c:168: printf("MAC Register Data: 0x%02X\n\r", data);
      00065E 7E 00            [12] 1636 	mov	r6,#0x00
      000660 C0 07            [24] 1637 	push	ar7
      000662 C0 06            [24] 1638 	push	ar6
      000664 74rA6            [12] 1639 	mov	a,#___str_25
      000666 C0 E0            [24] 1640 	push	acc
      000668 74s02            [12] 1641 	mov	a,#(___str_25 >> 8)
      00066A C0 E0            [24] 1642 	push	acc
      00066C 74 80            [12] 1643 	mov	a,#0x80
      00066E C0 E0            [24] 1644 	push	acc
      000670 12r00r00         [24] 1645 	lcall	_printf
      000673 E5 81            [12] 1646 	mov	a,sp
      000675 24 FB            [12] 1647 	add	a,#0xfb
      000677 F5 81            [12] 1648 	mov	sp,a
                                   1649 ;	main.c:169: break;
      000679 02r02rD4         [24] 1650 	ljmp	00118$
                                   1651 ;	main.c:171: case '5': {
      00067C                       1652 00106$:
                                   1653 ;	main.c:172: printf("Enter the PHY register address:\n\r");
      00067C 74rC2            [12] 1654 	mov	a,#___str_26
      00067E C0 E0            [24] 1655 	push	acc
      000680 74s02            [12] 1656 	mov	a,#(___str_26 >> 8)
      000682 C0 E0            [24] 1657 	push	acc
      000684 74 80            [12] 1658 	mov	a,#0x80
      000686 C0 E0            [24] 1659 	push	acc
      000688 12r00r00         [24] 1660 	lcall	_printf
      00068B 15 81            [12] 1661 	dec	sp
      00068D 15 81            [12] 1662 	dec	sp
      00068F 15 81            [12] 1663 	dec	sp
                                   1664 ;	main.c:173: uint8_t addr = get_user_buffer_size();
      000691 12r01rBA         [24] 1665 	lcall	_get_user_buffer_size
      000694 AE 82            [24] 1666 	mov	r6, dpl
                                   1667 ;	main.c:174: printf("Enter the 16-bit data to write:\n\r");
      000696 C0 06            [24] 1668 	push	ar6
      000698 74rE4            [12] 1669 	mov	a,#___str_27
      00069A C0 E0            [24] 1670 	push	acc
      00069C 74s02            [12] 1671 	mov	a,#(___str_27 >> 8)
      00069E C0 E0            [24] 1672 	push	acc
      0006A0 74 80            [12] 1673 	mov	a,#0x80
      0006A2 C0 E0            [24] 1674 	push	acc
      0006A4 12r00r00         [24] 1675 	lcall	_printf
      0006A7 15 81            [12] 1676 	dec	sp
      0006A9 15 81            [12] 1677 	dec	sp
      0006AB 15 81            [12] 1678 	dec	sp
                                   1679 ;	main.c:175: uint16_t data = get_user_buffer_size();
      0006AD 12r01rBA         [24] 1680 	lcall	_get_user_buffer_size
      0006B0 AD 82            [24] 1681 	mov	r5, dpl
      0006B2 AF 83            [24] 1682 	mov	r7, dph
      0006B4 D0 06            [24] 1683 	pop	ar6
                                   1684 ;	main.c:176: phy_spi_write(addr, data);
      0006B6 90r00r00         [24] 1685 	mov	dptr,#_phy_spi_write_PARM_2
      0006B9 ED               [12] 1686 	mov	a,r5
      0006BA F0               [24] 1687 	movx	@dptr,a
      0006BB EF               [12] 1688 	mov	a,r7
      0006BC A3               [24] 1689 	inc	dptr
      0006BD F0               [24] 1690 	movx	@dptr,a
      0006BE 8E 82            [24] 1691 	mov	dpl, r6
      0006C0 C0 07            [24] 1692 	push	ar7
      0006C2 C0 05            [24] 1693 	push	ar5
      0006C4 12r00r00         [24] 1694 	lcall	_phy_spi_write
      0006C7 D0 05            [24] 1695 	pop	ar5
      0006C9 D0 07            [24] 1696 	pop	ar7
                                   1697 ;	main.c:177: printf("PHY Write Data: 0x%04X\n\r", data);
      0006CB C0 05            [24] 1698 	push	ar5
      0006CD C0 07            [24] 1699 	push	ar7
      0006CF 74r06            [12] 1700 	mov	a,#___str_28
      0006D1 C0 E0            [24] 1701 	push	acc
      0006D3 74s03            [12] 1702 	mov	a,#(___str_28 >> 8)
      0006D5 C0 E0            [24] 1703 	push	acc
      0006D7 74 80            [12] 1704 	mov	a,#0x80
      0006D9 C0 E0            [24] 1705 	push	acc
      0006DB 12r00r00         [24] 1706 	lcall	_printf
      0006DE E5 81            [12] 1707 	mov	a,sp
      0006E0 24 FB            [12] 1708 	add	a,#0xfb
      0006E2 F5 81            [12] 1709 	mov	sp,a
                                   1710 ;	main.c:178: break;
      0006E4 02r02rD4         [24] 1711 	ljmp	00118$
                                   1712 ;	main.c:180: case '6': {
      0006E7                       1713 00107$:
                                   1714 ;	main.c:181: printf("Enter the PHY register address to read:\n\r");
      0006E7 74r1F            [12] 1715 	mov	a,#___str_29
      0006E9 C0 E0            [24] 1716 	push	acc
      0006EB 74s03            [12] 1717 	mov	a,#(___str_29 >> 8)
      0006ED C0 E0            [24] 1718 	push	acc
      0006EF 74 80            [12] 1719 	mov	a,#0x80
      0006F1 C0 E0            [24] 1720 	push	acc
      0006F3 12r00r00         [24] 1721 	lcall	_printf
      0006F6 15 81            [12] 1722 	dec	sp
      0006F8 15 81            [12] 1723 	dec	sp
      0006FA 15 81            [12] 1724 	dec	sp
                                   1725 ;	main.c:182: uint8_t addr = get_user_buffer_size();
      0006FC 12r01rBA         [24] 1726 	lcall	_get_user_buffer_size
                                   1727 ;	main.c:183: uint16_t data = phy_spi_read(addr);
      0006FF 12r00r00         [24] 1728 	lcall	_phy_spi_read
      000702 AE 82            [24] 1729 	mov	r6, dpl
      000704 AF 83            [24] 1730 	mov	r7, dph
                                   1731 ;	main.c:184: printf("PHY Read Data: 0x%04X\n\r", data);
      000706 C0 06            [24] 1732 	push	ar6
      000708 C0 07            [24] 1733 	push	ar7
      00070A 74r49            [12] 1734 	mov	a,#___str_30
      00070C C0 E0            [24] 1735 	push	acc
      00070E 74s03            [12] 1736 	mov	a,#(___str_30 >> 8)
      000710 C0 E0            [24] 1737 	push	acc
      000712 74 80            [12] 1738 	mov	a,#0x80
      000714 C0 E0            [24] 1739 	push	acc
      000716 12r00r00         [24] 1740 	lcall	_printf
      000719 E5 81            [12] 1741 	mov	a,sp
      00071B 24 FB            [12] 1742 	add	a,#0xfb
      00071D F5 81            [12] 1743 	mov	sp,a
                                   1744 ;	main.c:185: break;
      00071F 02r02rD4         [24] 1745 	ljmp	00118$
                                   1746 ;	main.c:187: case '7': {
      000722                       1747 00108$:
                                   1748 ;	main.c:188: printf("Resetting ENC28J60...\n\r");
      000722 74r61            [12] 1749 	mov	a,#___str_31
      000724 C0 E0            [24] 1750 	push	acc
      000726 74s03            [12] 1751 	mov	a,#(___str_31 >> 8)
      000728 C0 E0            [24] 1752 	push	acc
      00072A 74 80            [12] 1753 	mov	a,#0x80
      00072C C0 E0            [24] 1754 	push	acc
      00072E 12r00r00         [24] 1755 	lcall	_printf
      000731 15 81            [12] 1756 	dec	sp
      000733 15 81            [12] 1757 	dec	sp
      000735 15 81            [12] 1758 	dec	sp
                                   1759 ;	main.c:189: enc_reset();
      000737 12r00r00         [24] 1760 	lcall	_enc_reset
                                   1761 ;	main.c:190: break;
      00073A 02r02rD4         [24] 1762 	ljmp	00118$
                                   1763 ;	main.c:192: case '8': {
      00073D                       1764 00109$:
                                   1765 ;	main.c:193: printf("Enter the ETH register address to read:\n\r");
      00073D 74r79            [12] 1766 	mov	a,#___str_32
      00073F C0 E0            [24] 1767 	push	acc
      000741 74s03            [12] 1768 	mov	a,#(___str_32 >> 8)
      000743 C0 E0            [24] 1769 	push	acc
      000745 74 80            [12] 1770 	mov	a,#0x80
      000747 C0 E0            [24] 1771 	push	acc
      000749 12r00r00         [24] 1772 	lcall	_printf
      00074C 15 81            [12] 1773 	dec	sp
      00074E 15 81            [12] 1774 	dec	sp
      000750 15 81            [12] 1775 	dec	sp
                                   1776 ;	main.c:194: uint8_t addr = get_user_buffer_size();
      000752 12r01rBA         [24] 1777 	lcall	_get_user_buffer_size
      000755 AE 82            [24] 1778 	mov	r6, dpl
                                   1779 ;	main.c:195: printf("Enter the bank (0 or 1):\n\r");
      000757 C0 06            [24] 1780 	push	ar6
      000759 74rA3            [12] 1781 	mov	a,#___str_33
      00075B C0 E0            [24] 1782 	push	acc
      00075D 74s03            [12] 1783 	mov	a,#(___str_33 >> 8)
      00075F C0 E0            [24] 1784 	push	acc
      000761 74 80            [12] 1785 	mov	a,#0x80
      000763 C0 E0            [24] 1786 	push	acc
      000765 12r00r00         [24] 1787 	lcall	_printf
      000768 15 81            [12] 1788 	dec	sp
      00076A 15 81            [12] 1789 	dec	sp
      00076C 15 81            [12] 1790 	dec	sp
                                   1791 ;	main.c:196: uint8_t bank = get_user_buffer_size();
      00076E 12r01rBA         [24] 1792 	lcall	_get_user_buffer_size
      000771 AD 82            [24] 1793 	mov	r5, dpl
      000773 D0 06            [24] 1794 	pop	ar6
      000775 90r00r00         [24] 1795 	mov	dptr,#_eth_spi_read_PARM_2
      000778 ED               [12] 1796 	mov	a,r5
      000779 F0               [24] 1797 	movx	@dptr,a
                                   1798 ;	main.c:197: uint8_t data = eth_spi_read(addr, bank);
      00077A 8E 82            [24] 1799 	mov	dpl, r6
      00077C 12r00r00         [24] 1800 	lcall	_eth_spi_read
      00077F AF 82            [24] 1801 	mov	r7, dpl
                                   1802 ;	main.c:198: printf("ETH Register Data: 0x%02X\n\r", data);
      000781 7E 00            [12] 1803 	mov	r6,#0x00
      000783 C0 07            [24] 1804 	push	ar7
      000785 C0 06            [24] 1805 	push	ar6
      000787 74rBE            [12] 1806 	mov	a,#___str_34
      000789 C0 E0            [24] 1807 	push	acc
      00078B 74s03            [12] 1808 	mov	a,#(___str_34 >> 8)
      00078D C0 E0            [24] 1809 	push	acc
      00078F 74 80            [12] 1810 	mov	a,#0x80
      000791 C0 E0            [24] 1811 	push	acc
      000793 12r00r00         [24] 1812 	lcall	_printf
      000796 E5 81            [12] 1813 	mov	a,sp
      000798 24 FB            [12] 1814 	add	a,#0xfb
      00079A F5 81            [12] 1815 	mov	sp,a
                                   1816 ;	main.c:199: break;
      00079C 02r02rD4         [24] 1817 	ljmp	00118$
                                   1818 ;	main.c:201: case '9': {
      00079F                       1819 00110$:
                                   1820 ;	main.c:202: printf("\n\rChoose an action: \n\r");
      00079F 74r1C            [12] 1821 	mov	a,#___str_2
      0007A1 C0 E0            [24] 1822 	push	acc
      0007A3 74s00            [12] 1823 	mov	a,#(___str_2 >> 8)
      0007A5 C0 E0            [24] 1824 	push	acc
      0007A7 74 80            [12] 1825 	mov	a,#0x80
      0007A9 C0 E0            [24] 1826 	push	acc
      0007AB 12r00r00         [24] 1827 	lcall	_printf
      0007AE 15 81            [12] 1828 	dec	sp
      0007B0 15 81            [12] 1829 	dec	sp
      0007B2 15 81            [12] 1830 	dec	sp
                                   1831 ;	main.c:203: printf("1 --> Control Write\n\r");
      0007B4 74r33            [12] 1832 	mov	a,#___str_3
      0007B6 C0 E0            [24] 1833 	push	acc
      0007B8 74s00            [12] 1834 	mov	a,#(___str_3 >> 8)
      0007BA C0 E0            [24] 1835 	push	acc
      0007BC 74 80            [12] 1836 	mov	a,#0x80
      0007BE C0 E0            [24] 1837 	push	acc
      0007C0 12r00r00         [24] 1838 	lcall	_printf
      0007C3 15 81            [12] 1839 	dec	sp
      0007C5 15 81            [12] 1840 	dec	sp
      0007C7 15 81            [12] 1841 	dec	sp
                                   1842 ;	main.c:204: printf("2 --> Buffer Write\n\r");
      0007C9 74r49            [12] 1843 	mov	a,#___str_4
      0007CB C0 E0            [24] 1844 	push	acc
      0007CD 74s00            [12] 1845 	mov	a,#(___str_4 >> 8)
      0007CF C0 E0            [24] 1846 	push	acc
      0007D1 74 80            [12] 1847 	mov	a,#0x80
      0007D3 C0 E0            [24] 1848 	push	acc
      0007D5 12r00r00         [24] 1849 	lcall	_printf
      0007D8 15 81            [12] 1850 	dec	sp
      0007DA 15 81            [12] 1851 	dec	sp
      0007DC 15 81            [12] 1852 	dec	sp
                                   1853 ;	main.c:205: printf("3 --> Buffer Read\n\r");
      0007DE 74r5E            [12] 1854 	mov	a,#___str_5
      0007E0 C0 E0            [24] 1855 	push	acc
      0007E2 74s00            [12] 1856 	mov	a,#(___str_5 >> 8)
      0007E4 C0 E0            [24] 1857 	push	acc
      0007E6 74 80            [12] 1858 	mov	a,#0x80
      0007E8 C0 E0            [24] 1859 	push	acc
      0007EA 12r00r00         [24] 1860 	lcall	_printf
      0007ED 15 81            [12] 1861 	dec	sp
      0007EF 15 81            [12] 1862 	dec	sp
      0007F1 15 81            [12] 1863 	dec	sp
                                   1864 ;	main.c:206: printf("4 --> MAC Register Read\n\r");
      0007F3 74r72            [12] 1865 	mov	a,#___str_6
      0007F5 C0 E0            [24] 1866 	push	acc
      0007F7 74s00            [12] 1867 	mov	a,#(___str_6 >> 8)
      0007F9 C0 E0            [24] 1868 	push	acc
      0007FB 74 80            [12] 1869 	mov	a,#0x80
      0007FD C0 E0            [24] 1870 	push	acc
      0007FF 12r00r00         [24] 1871 	lcall	_printf
      000802 15 81            [12] 1872 	dec	sp
      000804 15 81            [12] 1873 	dec	sp
      000806 15 81            [12] 1874 	dec	sp
                                   1875 ;	main.c:207: printf("5 --> PHY SPI Write\n\r");
      000808 74r8C            [12] 1876 	mov	a,#___str_7
      00080A C0 E0            [24] 1877 	push	acc
      00080C 74s00            [12] 1878 	mov	a,#(___str_7 >> 8)
      00080E C0 E0            [24] 1879 	push	acc
      000810 74 80            [12] 1880 	mov	a,#0x80
      000812 C0 E0            [24] 1881 	push	acc
      000814 12r00r00         [24] 1882 	lcall	_printf
      000817 15 81            [12] 1883 	dec	sp
      000819 15 81            [12] 1884 	dec	sp
      00081B 15 81            [12] 1885 	dec	sp
                                   1886 ;	main.c:208: printf("6 --> PHY SPI Read\n\r");
      00081D 74rA2            [12] 1887 	mov	a,#___str_8
      00081F C0 E0            [24] 1888 	push	acc
      000821 74s00            [12] 1889 	mov	a,#(___str_8 >> 8)
      000823 C0 E0            [24] 1890 	push	acc
      000825 74 80            [12] 1891 	mov	a,#0x80
      000827 C0 E0            [24] 1892 	push	acc
      000829 12r00r00         [24] 1893 	lcall	_printf
      00082C 15 81            [12] 1894 	dec	sp
      00082E 15 81            [12] 1895 	dec	sp
      000830 15 81            [12] 1896 	dec	sp
                                   1897 ;	main.c:209: printf("7 --> ENC Reset\n\r");
      000832 74rB7            [12] 1898 	mov	a,#___str_9
      000834 C0 E0            [24] 1899 	push	acc
      000836 74s00            [12] 1900 	mov	a,#(___str_9 >> 8)
      000838 C0 E0            [24] 1901 	push	acc
      00083A 74 80            [12] 1902 	mov	a,#0x80
      00083C C0 E0            [24] 1903 	push	acc
      00083E 12r00r00         [24] 1904 	lcall	_printf
      000841 15 81            [12] 1905 	dec	sp
      000843 15 81            [12] 1906 	dec	sp
      000845 15 81            [12] 1907 	dec	sp
                                   1908 ;	main.c:210: printf("8 --> Read ETH Register\n\r");
      000847 74rC9            [12] 1909 	mov	a,#___str_10
      000849 C0 E0            [24] 1910 	push	acc
      00084B 74s00            [12] 1911 	mov	a,#(___str_10 >> 8)
      00084D C0 E0            [24] 1912 	push	acc
      00084F 74 80            [12] 1913 	mov	a,#0x80
      000851 C0 E0            [24] 1914 	push	acc
      000853 12r00r00         [24] 1915 	lcall	_printf
      000856 15 81            [12] 1916 	dec	sp
      000858 15 81            [12] 1917 	dec	sp
      00085A 15 81            [12] 1918 	dec	sp
                                   1919 ;	main.c:211: break;
      00085C 02r02rD4         [24] 1920 	ljmp	00118$
                                   1921 ;	main.c:213: case 'A':{
      00085F                       1922 00111$:
                                   1923 ;	main.c:216: send_arp_request();
      00085F 12r00r00         [24] 1924 	lcall	_send_arp_request
                                   1925 ;	main.c:217: break;
      000862 02r02rD4         [24] 1926 	ljmp	00118$
                                   1927 ;	main.c:223: case 'C':{
      000865                       1928 00113$:
                                   1929 ;	main.c:224: printf(" Resetting ENC using RESET pin in Hardware(P1_0)\n\r");
      000865 74rDA            [12] 1930 	mov	a,#___str_35
      000867 C0 E0            [24] 1931 	push	acc
      000869 74s03            [12] 1932 	mov	a,#(___str_35 >> 8)
      00086B C0 E0            [24] 1933 	push	acc
      00086D 74 80            [12] 1934 	mov	a,#0x80
      00086F C0 E0            [24] 1935 	push	acc
      000871 12r00r00         [24] 1936 	lcall	_printf
      000874 15 81            [12] 1937 	dec	sp
      000876 15 81            [12] 1938 	dec	sp
      000878 15 81            [12] 1939 	dec	sp
                                   1940 ;	main.c:225: ENC_RESET = 0;
                                   1941 ;	assignBit
      00087A C2 90            [12] 1942 	clr	_P1_0
                                   1943 ;	main.c:226: for(int i = 0; i < 6000; i++);
      00087C 7E 00            [12] 1944 	mov	r6,#0x00
      00087E 7F 00            [12] 1945 	mov	r7,#0x00
      000880                       1946 00124$:
      000880 C3               [12] 1947 	clr	c
      000881 EE               [12] 1948 	mov	a,r6
      000882 94 70            [12] 1949 	subb	a,#0x70
      000884 EF               [12] 1950 	mov	a,r7
      000885 64 80            [12] 1951 	xrl	a,#0x80
      000887 94 97            [12] 1952 	subb	a,#0x97
      000889 50 07            [24] 1953 	jnc	00114$
      00088B 0E               [12] 1954 	inc	r6
      00088C BE 00 F1         [24] 1955 	cjne	r6,#0x00,00124$
      00088F 0F               [12] 1956 	inc	r7
      000890 80 EE            [24] 1957 	sjmp	00124$
      000892                       1958 00114$:
                                   1959 ;	main.c:227: ENC_RESET = 1;
                                   1960 ;	assignBit
      000892 D2 90            [12] 1961 	setb	_P1_0
                                   1962 ;	main.c:228: break;
      000894 02r02rD4         [24] 1963 	ljmp	00118$
                                   1964 ;	main.c:230: default: {
      000897                       1965 00115$:
                                   1966 ;	main.c:231: printf("Invalid option. Please select a valid action.\n\r");
      000897 74r0D            [12] 1967 	mov	a,#___str_36
      000899 C0 E0            [24] 1968 	push	acc
      00089B 74s04            [12] 1969 	mov	a,#(___str_36 >> 8)
      00089D C0 E0            [24] 1970 	push	acc
      00089F 74 80            [12] 1971 	mov	a,#0x80
      0008A1 C0 E0            [24] 1972 	push	acc
      0008A3 12r00r00         [24] 1973 	lcall	_printf
      0008A6 15 81            [12] 1974 	dec	sp
      0008A8 15 81            [12] 1975 	dec	sp
      0008AA 15 81            [12] 1976 	dec	sp
                                   1977 ;	main.c:234: }
                                   1978 ;	main.c:236: }
      0008AC 02r02rD4         [24] 1979 	ljmp	00118$
                                   1980 	.area CSEG    (CODE)
                                   1981 	.area CONST   (CODE)
                                   1982 	.area CONST   (CODE)
      000000                       1983 ___str_0:
      000000 0A                    1984 	.db 0x0a
      000001 0D                    1985 	.db 0x0d
      000002 00                    1986 	.db 0x00
                                   1987 	.area CSEG    (CODE)
                                   1988 	.area CONST   (CODE)
      000003                       1989 ___str_1:
      000003 53 50 49 20 4F 70 65  1990 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    1991 	.db 0x0a
      00001A 0D                    1992 	.db 0x0d
      00001B 00                    1993 	.db 0x00
                                   1994 	.area CSEG    (CODE)
                                   1995 	.area CONST   (CODE)
      00001C                       1996 ___str_2:
      00001C 0A                    1997 	.db 0x0a
      00001D 0D                    1998 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  1999 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    2000 	.db 0x0a
      000031 0D                    2001 	.db 0x0d
      000032 00                    2002 	.db 0x00
                                   2003 	.area CSEG    (CODE)
                                   2004 	.area CONST   (CODE)
      000033                       2005 ___str_3:
      000033 31 20 2D 2D 3E 20 43  2006 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    2007 	.db 0x0a
      000047 0D                    2008 	.db 0x0d
      000048 00                    2009 	.db 0x00
                                   2010 	.area CSEG    (CODE)
                                   2011 	.area CONST   (CODE)
      000049                       2012 ___str_4:
      000049 32 20 2D 2D 3E 20 42  2013 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    2014 	.db 0x0a
      00005C 0D                    2015 	.db 0x0d
      00005D 00                    2016 	.db 0x00
                                   2017 	.area CSEG    (CODE)
                                   2018 	.area CONST   (CODE)
      00005E                       2019 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  2020 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    2021 	.db 0x0a
      000070 0D                    2022 	.db 0x0d
      000071 00                    2023 	.db 0x00
                                   2024 	.area CSEG    (CODE)
                                   2025 	.area CONST   (CODE)
      000072                       2026 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  2027 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    2028 	.db 0x0a
      00008A 0D                    2029 	.db 0x0d
      00008B 00                    2030 	.db 0x00
                                   2031 	.area CSEG    (CODE)
                                   2032 	.area CONST   (CODE)
      00008C                       2033 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  2034 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    2035 	.db 0x0a
      0000A0 0D                    2036 	.db 0x0d
      0000A1 00                    2037 	.db 0x00
                                   2038 	.area CSEG    (CODE)
                                   2039 	.area CONST   (CODE)
      0000A2                       2040 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  2041 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    2042 	.db 0x0a
      0000B5 0D                    2043 	.db 0x0d
      0000B6 00                    2044 	.db 0x00
                                   2045 	.area CSEG    (CODE)
                                   2046 	.area CONST   (CODE)
      0000B7                       2047 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  2048 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    2049 	.db 0x0a
      0000C7 0D                    2050 	.db 0x0d
      0000C8 00                    2051 	.db 0x00
                                   2052 	.area CSEG    (CODE)
                                   2053 	.area CONST   (CODE)
      0000C9                       2054 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  2055 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    2056 	.db 0x0a
      0000E1 0D                    2057 	.db 0x0d
      0000E2 00                    2058 	.db 0x00
                                   2059 	.area CSEG    (CODE)
                                   2060 	.area CONST   (CODE)
      0000E3                       2061 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  2062 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    2063 	.db 0x0a
      0000F6 0D                    2064 	.db 0x0d
      0000F7 00                    2065 	.db 0x00
                                   2066 	.area CSEG    (CODE)
                                   2067 	.area CONST   (CODE)
      0000F8                       2068 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  2069 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    2070 	.db 0x0a
      00010F 0D                    2071 	.db 0x0d
      000110 00                    2072 	.db 0x00
                                   2073 	.area CSEG    (CODE)
                                   2074 	.area CONST   (CODE)
      000111                       2075 ___str_13:
      000111 42 20 2D 2D 3E 20 49  2076 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2077 	.db 0x0a
      000127 0D                    2078 	.db 0x0d
      000128 00                    2079 	.db 0x00
                                   2080 	.area CSEG    (CODE)
                                   2081 	.area CONST   (CODE)
      000129                       2082 ___str_14:
      000129 43 20 2D 2D 3E 20 48  2083 	.ascii "C --> Hard Reset(nRESET pin)"
             61 72 64 20 52 65 73
             65 74 28 6E 52 45 53
             45 54 20 70 69 6E 29
      000145 0A                    2084 	.db 0x0a
      000146 0D                    2085 	.db 0x0d
      000147 00                    2086 	.db 0x00
                                   2087 	.area CSEG    (CODE)
                                   2088 	.area CONST   (CODE)
      000148                       2089 ___str_15:
      000148 45 6E 74 65 72 20 74  2090 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      00016A 0A                    2091 	.db 0x0a
      00016B 0D                    2092 	.db 0x0d
      00016C 00                    2093 	.db 0x00
                                   2094 	.area CSEG    (CODE)
                                   2095 	.area CONST   (CODE)
      00016D                       2096 ___str_16:
      00016D 45 6E 74 65 72 20 74  2097 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      000197 0A                    2098 	.db 0x0a
      000198 0D                    2099 	.db 0x0d
      000199 00                    2100 	.db 0x00
                                   2101 	.area CSEG    (CODE)
                                   2102 	.area CONST   (CODE)
      00019A                       2103 ___str_17:
      00019A 45 6E 74 65 72 20 74  2104 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      0001BB 0A                    2105 	.db 0x0a
      0001BC 0D                    2106 	.db 0x0d
      0001BD 00                    2107 	.db 0x00
                                   2108 	.area CSEG    (CODE)
                                   2109 	.area CONST   (CODE)
      0001BE                       2110 ___str_18:
      0001BE 45 6E 74 65 72 20 74  2111 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      0001E1 0A                    2112 	.db 0x0a
      0001E2 0D                    2113 	.db 0x0d
      0001E3 00                    2114 	.db 0x00
                                   2115 	.area CSEG    (CODE)
                                   2116 	.area CONST   (CODE)
      0001E4                       2117 ___str_19:
      0001E4 45 6E 74 65 72 20 74  2118 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      0001FF 0A                    2119 	.db 0x0a
      000200 0D                    2120 	.db 0x0d
      000201 00                    2121 	.db 0x00
                                   2122 	.area CSEG    (CODE)
                                   2123 	.area CONST   (CODE)
      000202                       2124 ___str_20:
      000202 45 6E 74 65 72 20 25  2125 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000222 0A                    2126 	.db 0x0a
      000223 0D                    2127 	.db 0x0d
      000224 00                    2128 	.db 0x00
                                   2129 	.area CSEG    (CODE)
                                   2130 	.area CONST   (CODE)
      000225                       2131 ___str_21:
      000225 42 79 74 65 20 25 64  2132 	.ascii "Byte %d: "
             3A 20
      00022E 00                    2133 	.db 0x00
                                   2134 	.area CSEG    (CODE)
                                   2135 	.area CONST   (CODE)
      00022F                       2136 ___str_22:
      00022F 45 6E 74 65 72 20 74  2137 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      000251 0A                    2138 	.db 0x0a
      000252 0D                    2139 	.db 0x0d
      000253 00                    2140 	.db 0x00
                                   2141 	.area CSEG    (CODE)
                                   2142 	.area CONST   (CODE)
      000254                       2143 ___str_23:
      000254 45 6E 74 65 72 20 74  2144 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      00027A 0A                    2145 	.db 0x0a
      00027B 0D                    2146 	.db 0x0d
      00027C 00                    2147 	.db 0x00
                                   2148 	.area CSEG    (CODE)
                                   2149 	.area CONST   (CODE)
      00027D                       2150 ___str_24:
      00027D 45 6E 74 65 72 20 74  2151 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002A3 0A                    2152 	.db 0x0a
      0002A4 0D                    2153 	.db 0x0d
      0002A5 00                    2154 	.db 0x00
                                   2155 	.area CSEG    (CODE)
                                   2156 	.area CONST   (CODE)
      0002A6                       2157 ___str_25:
      0002A6 4D 41 43 20 52 65 67  2158 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0002BF 0A                    2159 	.db 0x0a
      0002C0 0D                    2160 	.db 0x0d
      0002C1 00                    2161 	.db 0x00
                                   2162 	.area CSEG    (CODE)
                                   2163 	.area CONST   (CODE)
      0002C2                       2164 ___str_26:
      0002C2 45 6E 74 65 72 20 74  2165 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      0002E1 0A                    2166 	.db 0x0a
      0002E2 0D                    2167 	.db 0x0d
      0002E3 00                    2168 	.db 0x00
                                   2169 	.area CSEG    (CODE)
                                   2170 	.area CONST   (CODE)
      0002E4                       2171 ___str_27:
      0002E4 45 6E 74 65 72 20 74  2172 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      000303 0A                    2173 	.db 0x0a
      000304 0D                    2174 	.db 0x0d
      000305 00                    2175 	.db 0x00
                                   2176 	.area CSEG    (CODE)
                                   2177 	.area CONST   (CODE)
      000306                       2178 ___str_28:
      000306 50 48 59 20 57 72 69  2179 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      00031C 0A                    2180 	.db 0x0a
      00031D 0D                    2181 	.db 0x0d
      00031E 00                    2182 	.db 0x00
                                   2183 	.area CSEG    (CODE)
                                   2184 	.area CONST   (CODE)
      00031F                       2185 ___str_29:
      00031F 45 6E 74 65 72 20 74  2186 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000346 0A                    2187 	.db 0x0a
      000347 0D                    2188 	.db 0x0d
      000348 00                    2189 	.db 0x00
                                   2190 	.area CSEG    (CODE)
                                   2191 	.area CONST   (CODE)
      000349                       2192 ___str_30:
      000349 50 48 59 20 52 65 61  2193 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      00035E 0A                    2194 	.db 0x0a
      00035F 0D                    2195 	.db 0x0d
      000360 00                    2196 	.db 0x00
                                   2197 	.area CSEG    (CODE)
                                   2198 	.area CONST   (CODE)
      000361                       2199 ___str_31:
      000361 52 65 73 65 74 74 69  2200 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      000376 0A                    2201 	.db 0x0a
      000377 0D                    2202 	.db 0x0d
      000378 00                    2203 	.db 0x00
                                   2204 	.area CSEG    (CODE)
                                   2205 	.area CONST   (CODE)
      000379                       2206 ___str_32:
      000379 45 6E 74 65 72 20 74  2207 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003A0 0A                    2208 	.db 0x0a
      0003A1 0D                    2209 	.db 0x0d
      0003A2 00                    2210 	.db 0x00
                                   2211 	.area CSEG    (CODE)
                                   2212 	.area CONST   (CODE)
      0003A3                       2213 ___str_33:
      0003A3 45 6E 74 65 72 20 74  2214 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      0003BB 0A                    2215 	.db 0x0a
      0003BC 0D                    2216 	.db 0x0d
      0003BD 00                    2217 	.db 0x00
                                   2218 	.area CSEG    (CODE)
                                   2219 	.area CONST   (CODE)
      0003BE                       2220 ___str_34:
      0003BE 45 54 48 20 52 65 67  2221 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0003D7 0A                    2222 	.db 0x0a
      0003D8 0D                    2223 	.db 0x0d
      0003D9 00                    2224 	.db 0x00
                                   2225 	.area CSEG    (CODE)
                                   2226 	.area CONST   (CODE)
      0003DA                       2227 ___str_35:
      0003DA 20 52 65 73 65 74 74  2228 	.ascii " Resetting ENC using RESET pin in Hardware(P1_0)"
             69 6E 67 20 45 4E 43
             20 75 73 69 6E 67 20
             52 45 53 45 54 20 70
             69 6E 20 69 6E 20 48
             61 72 64 77 61 72 65
             28 50 31 5F 30 29
      00040A 0A                    2229 	.db 0x0a
      00040B 0D                    2230 	.db 0x0d
      00040C 00                    2231 	.db 0x00
                                   2232 	.area CSEG    (CODE)
                                   2233 	.area CONST   (CODE)
      00040D                       2234 ___str_36:
      00040D 49 6E 76 61 6C 69 64  2235 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      00043A 0A                    2236 	.db 0x0a
      00043B 0D                    2237 	.db 0x0d
      00043C 00                    2238 	.db 0x00
                                   2239 	.area CSEG    (CODE)
                                   2240 	.area XINIT   (CODE)
      000000                       2241 __xinit__device_mac:
      000000 02                    2242 	.db #0x02	; 2
      000001 11                    2243 	.db #0x11	; 17
      000002 22                    2244 	.db #0x22	; 34
      000003 33                    2245 	.db #0x33	; 51	'3'
      000004 44                    2246 	.db #0x44	; 68	'D'
      000005 55                    2247 	.db #0x55	; 85	'U'
      000006                       2248 __xinit__target_mac:
      000006 F8                    2249 	.db #0xf8	; 248
      000007 75                    2250 	.db #0x75	; 117	'u'
      000008 A4                    2251 	.db #0xa4	; 164
      000009 8C                    2252 	.db #0x8c	; 140
      00000A 41                    2253 	.db #0x41	; 65	'A'
      00000B 31                    2254 	.db #0x31	; 49	'1'
      00000C                       2255 __xinit__device_ip:
      00000C C0                    2256 	.db #0xc0	; 192
      00000D A8                    2257 	.db #0xa8	; 168
      00000E 01                    2258 	.db #0x01	; 1
      00000F 64                    2259 	.db #0x64	; 100	'd'
      000010                       2260 __xinit__target_ip:
      000010 C0                    2261 	.db #0xc0	; 192
      000011 A8                    2262 	.db #0xa8	; 168
      000012 01                    2263 	.db #0x01	; 1
      000013 01                    2264 	.db #0x01	; 1
                                   2265 	.area CABS    (ABS,CODE)
