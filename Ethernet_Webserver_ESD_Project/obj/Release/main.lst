                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _LED_On
                                     15 	.globl _test_read_ctrl
                                     16 	.globl _delay_us
                                     17 	.globl _SPI_send
                                     18 	.globl _configure_SPI
                                     19 	.globl _printf_tiny
                                     20 	.globl _putchar
                                     21 	.globl _getchar
                                     22 	.globl _printf
                                     23 	.globl _TF1
                                     24 	.globl _TR1
                                     25 	.globl _TF0
                                     26 	.globl _TR0
                                     27 	.globl _IE1
                                     28 	.globl _IT1
                                     29 	.globl _IE0
                                     30 	.globl _IT0
                                     31 	.globl _SM0
                                     32 	.globl _SM1
                                     33 	.globl _SM2
                                     34 	.globl _REN
                                     35 	.globl _TB8
                                     36 	.globl _RB8
                                     37 	.globl _TI
                                     38 	.globl _RI
                                     39 	.globl _CY
                                     40 	.globl _AC
                                     41 	.globl _F0
                                     42 	.globl _RS1
                                     43 	.globl _RS0
                                     44 	.globl _OV
                                     45 	.globl _F1
                                     46 	.globl _P
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD0
                                     54 	.globl _TXD
                                     55 	.globl _RXD0
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _P1_7
                                     74 	.globl _P1_6
                                     75 	.globl _P1_5
                                     76 	.globl _P1_4
                                     77 	.globl _P1_3
                                     78 	.globl _P1_2
                                     79 	.globl _P1_1
                                     80 	.globl _P1_0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _PS
                                     90 	.globl _PT1
                                     91 	.globl _PX1
                                     92 	.globl _PT0
                                     93 	.globl _PX0
                                     94 	.globl _EA
                                     95 	.globl _ES
                                     96 	.globl _ET1
                                     97 	.globl _EX1
                                     98 	.globl _ET0
                                     99 	.globl _EX0
                                    100 	.globl _BREG_F7
                                    101 	.globl _BREG_F6
                                    102 	.globl _BREG_F5
                                    103 	.globl _BREG_F4
                                    104 	.globl _BREG_F3
                                    105 	.globl _BREG_F2
                                    106 	.globl _BREG_F1
                                    107 	.globl _BREG_F0
                                    108 	.globl _P5_7
                                    109 	.globl _P5_6
                                    110 	.globl _P5_5
                                    111 	.globl _P5_4
                                    112 	.globl _P5_3
                                    113 	.globl _P5_2
                                    114 	.globl _P5_1
                                    115 	.globl _P5_0
                                    116 	.globl _P4_7
                                    117 	.globl _P4_6
                                    118 	.globl _P4_5
                                    119 	.globl _P4_4
                                    120 	.globl _P4_3
                                    121 	.globl _P4_2
                                    122 	.globl _P4_1
                                    123 	.globl _P4_0
                                    124 	.globl _PX0L
                                    125 	.globl _PT0L
                                    126 	.globl _PX1L
                                    127 	.globl _PT1L
                                    128 	.globl _PSL
                                    129 	.globl _PT2L
                                    130 	.globl _PPCL
                                    131 	.globl _EC
                                    132 	.globl _CCF0
                                    133 	.globl _CCF1
                                    134 	.globl _CCF2
                                    135 	.globl _CCF3
                                    136 	.globl _CCF4
                                    137 	.globl _CR
                                    138 	.globl _CF
                                    139 	.globl _TF2
                                    140 	.globl _EXF2
                                    141 	.globl _RCLK
                                    142 	.globl _TCLK
                                    143 	.globl _EXEN2
                                    144 	.globl _TR2
                                    145 	.globl _C_T2
                                    146 	.globl _CP_RL2
                                    147 	.globl _T2CON_7
                                    148 	.globl _T2CON_6
                                    149 	.globl _T2CON_5
                                    150 	.globl _T2CON_4
                                    151 	.globl _T2CON_3
                                    152 	.globl _T2CON_2
                                    153 	.globl _T2CON_1
                                    154 	.globl _T2CON_0
                                    155 	.globl _PT2
                                    156 	.globl _ET2
                                    157 	.globl _TMOD
                                    158 	.globl _TL1
                                    159 	.globl _TL0
                                    160 	.globl _TH1
                                    161 	.globl _TH0
                                    162 	.globl _TCON
                                    163 	.globl _SP
                                    164 	.globl _SCON
                                    165 	.globl _SBUF0
                                    166 	.globl _SBUF
                                    167 	.globl _PSW
                                    168 	.globl _PCON
                                    169 	.globl _P3
                                    170 	.globl _P2
                                    171 	.globl _P1
                                    172 	.globl _P0
                                    173 	.globl _IP
                                    174 	.globl _IE
                                    175 	.globl _DP0L
                                    176 	.globl _DPL
                                    177 	.globl _DP0H
                                    178 	.globl _DPH
                                    179 	.globl _B
                                    180 	.globl _ACC
                                    181 	.globl _EECON
                                    182 	.globl _KBF
                                    183 	.globl _KBE
                                    184 	.globl _KBLS
                                    185 	.globl _BRL
                                    186 	.globl _BDRCON
                                    187 	.globl _T2MOD
                                    188 	.globl _SPDAT
                                    189 	.globl _SPSTA
                                    190 	.globl _SPCON
                                    191 	.globl _SADEN
                                    192 	.globl _SADDR
                                    193 	.globl _WDTPRG
                                    194 	.globl _WDTRST
                                    195 	.globl _P5
                                    196 	.globl _P4
                                    197 	.globl _IPH1
                                    198 	.globl _IPL1
                                    199 	.globl _IPH0
                                    200 	.globl _IPL0
                                    201 	.globl _IEN1
                                    202 	.globl _IEN0
                                    203 	.globl _CMOD
                                    204 	.globl _CL
                                    205 	.globl _CH
                                    206 	.globl _CCON
                                    207 	.globl _CCAPM4
                                    208 	.globl _CCAPM3
                                    209 	.globl _CCAPM2
                                    210 	.globl _CCAPM1
                                    211 	.globl _CCAPM0
                                    212 	.globl _CCAP4L
                                    213 	.globl _CCAP3L
                                    214 	.globl _CCAP2L
                                    215 	.globl _CCAP1L
                                    216 	.globl _CCAP0L
                                    217 	.globl _CCAP4H
                                    218 	.globl _CCAP3H
                                    219 	.globl _CCAP2H
                                    220 	.globl _CCAP1H
                                    221 	.globl _CCAP0H
                                    222 	.globl _CKCON1
                                    223 	.globl _CKCON0
                                    224 	.globl _CKRL
                                    225 	.globl _AUXR1
                                    226 	.globl _AUXR
                                    227 	.globl _TH2
                                    228 	.globl _TL2
                                    229 	.globl _RCAP2H
                                    230 	.globl _RCAP2L
                                    231 	.globl _T2CON
                                    232 ;--------------------------------------------------------
                                    233 ; special function registers
                                    234 ;--------------------------------------------------------
                                    235 	.area RSEG    (ABS,DATA)
      000000                        236 	.org 0x0000
                           0000C8   237 _T2CON	=	0x00c8
                           0000CA   238 _RCAP2L	=	0x00ca
                           0000CB   239 _RCAP2H	=	0x00cb
                           0000CC   240 _TL2	=	0x00cc
                           0000CD   241 _TH2	=	0x00cd
                           00008E   242 _AUXR	=	0x008e
                           0000A2   243 _AUXR1	=	0x00a2
                           000097   244 _CKRL	=	0x0097
                           00008F   245 _CKCON0	=	0x008f
                           0000AF   246 _CKCON1	=	0x00af
                           0000FA   247 _CCAP0H	=	0x00fa
                           0000FB   248 _CCAP1H	=	0x00fb
                           0000FC   249 _CCAP2H	=	0x00fc
                           0000FD   250 _CCAP3H	=	0x00fd
                           0000FE   251 _CCAP4H	=	0x00fe
                           0000EA   252 _CCAP0L	=	0x00ea
                           0000EB   253 _CCAP1L	=	0x00eb
                           0000EC   254 _CCAP2L	=	0x00ec
                           0000ED   255 _CCAP3L	=	0x00ed
                           0000EE   256 _CCAP4L	=	0x00ee
                           0000DA   257 _CCAPM0	=	0x00da
                           0000DB   258 _CCAPM1	=	0x00db
                           0000DC   259 _CCAPM2	=	0x00dc
                           0000DD   260 _CCAPM3	=	0x00dd
                           0000DE   261 _CCAPM4	=	0x00de
                           0000D8   262 _CCON	=	0x00d8
                           0000F9   263 _CH	=	0x00f9
                           0000E9   264 _CL	=	0x00e9
                           0000D9   265 _CMOD	=	0x00d9
                           0000A8   266 _IEN0	=	0x00a8
                           0000B1   267 _IEN1	=	0x00b1
                           0000B8   268 _IPL0	=	0x00b8
                           0000B7   269 _IPH0	=	0x00b7
                           0000B2   270 _IPL1	=	0x00b2
                           0000B3   271 _IPH1	=	0x00b3
                           0000C0   272 _P4	=	0x00c0
                           0000E8   273 _P5	=	0x00e8
                           0000A6   274 _WDTRST	=	0x00a6
                           0000A7   275 _WDTPRG	=	0x00a7
                           0000A9   276 _SADDR	=	0x00a9
                           0000B9   277 _SADEN	=	0x00b9
                           0000C3   278 _SPCON	=	0x00c3
                           0000C4   279 _SPSTA	=	0x00c4
                           0000C5   280 _SPDAT	=	0x00c5
                           0000C9   281 _T2MOD	=	0x00c9
                           00009B   282 _BDRCON	=	0x009b
                           00009A   283 _BRL	=	0x009a
                           00009C   284 _KBLS	=	0x009c
                           00009D   285 _KBE	=	0x009d
                           00009E   286 _KBF	=	0x009e
                           0000D2   287 _EECON	=	0x00d2
                           0000E0   288 _ACC	=	0x00e0
                           0000F0   289 _B	=	0x00f0
                           000083   290 _DPH	=	0x0083
                           000083   291 _DP0H	=	0x0083
                           000082   292 _DPL	=	0x0082
                           000082   293 _DP0L	=	0x0082
                           0000A8   294 _IE	=	0x00a8
                           0000B8   295 _IP	=	0x00b8
                           000080   296 _P0	=	0x0080
                           000090   297 _P1	=	0x0090
                           0000A0   298 _P2	=	0x00a0
                           0000B0   299 _P3	=	0x00b0
                           000087   300 _PCON	=	0x0087
                           0000D0   301 _PSW	=	0x00d0
                           000099   302 _SBUF	=	0x0099
                           000099   303 _SBUF0	=	0x0099
                           000098   304 _SCON	=	0x0098
                           000081   305 _SP	=	0x0081
                           000088   306 _TCON	=	0x0088
                           00008C   307 _TH0	=	0x008c
                           00008D   308 _TH1	=	0x008d
                           00008A   309 _TL0	=	0x008a
                           00008B   310 _TL1	=	0x008b
                           000089   311 _TMOD	=	0x0089
                                    312 ;--------------------------------------------------------
                                    313 ; special function bits
                                    314 ;--------------------------------------------------------
                                    315 	.area RSEG    (ABS,DATA)
      000000                        316 	.org 0x0000
                           0000AD   317 _ET2	=	0x00ad
                           0000BD   318 _PT2	=	0x00bd
                           0000C8   319 _T2CON_0	=	0x00c8
                           0000C9   320 _T2CON_1	=	0x00c9
                           0000CA   321 _T2CON_2	=	0x00ca
                           0000CB   322 _T2CON_3	=	0x00cb
                           0000CC   323 _T2CON_4	=	0x00cc
                           0000CD   324 _T2CON_5	=	0x00cd
                           0000CE   325 _T2CON_6	=	0x00ce
                           0000CF   326 _T2CON_7	=	0x00cf
                           0000C8   327 _CP_RL2	=	0x00c8
                           0000C9   328 _C_T2	=	0x00c9
                           0000CA   329 _TR2	=	0x00ca
                           0000CB   330 _EXEN2	=	0x00cb
                           0000CC   331 _TCLK	=	0x00cc
                           0000CD   332 _RCLK	=	0x00cd
                           0000CE   333 _EXF2	=	0x00ce
                           0000CF   334 _TF2	=	0x00cf
                           0000DF   335 _CF	=	0x00df
                           0000DE   336 _CR	=	0x00de
                           0000DC   337 _CCF4	=	0x00dc
                           0000DB   338 _CCF3	=	0x00db
                           0000DA   339 _CCF2	=	0x00da
                           0000D9   340 _CCF1	=	0x00d9
                           0000D8   341 _CCF0	=	0x00d8
                           0000AE   342 _EC	=	0x00ae
                           0000BE   343 _PPCL	=	0x00be
                           0000BD   344 _PT2L	=	0x00bd
                           0000BC   345 _PSL	=	0x00bc
                           0000BB   346 _PT1L	=	0x00bb
                           0000BA   347 _PX1L	=	0x00ba
                           0000B9   348 _PT0L	=	0x00b9
                           0000B8   349 _PX0L	=	0x00b8
                           0000C0   350 _P4_0	=	0x00c0
                           0000C1   351 _P4_1	=	0x00c1
                           0000C2   352 _P4_2	=	0x00c2
                           0000C3   353 _P4_3	=	0x00c3
                           0000C4   354 _P4_4	=	0x00c4
                           0000C5   355 _P4_5	=	0x00c5
                           0000C6   356 _P4_6	=	0x00c6
                           0000C7   357 _P4_7	=	0x00c7
                           0000E8   358 _P5_0	=	0x00e8
                           0000E9   359 _P5_1	=	0x00e9
                           0000EA   360 _P5_2	=	0x00ea
                           0000EB   361 _P5_3	=	0x00eb
                           0000EC   362 _P5_4	=	0x00ec
                           0000ED   363 _P5_5	=	0x00ed
                           0000EE   364 _P5_6	=	0x00ee
                           0000EF   365 _P5_7	=	0x00ef
                           0000F0   366 _BREG_F0	=	0x00f0
                           0000F1   367 _BREG_F1	=	0x00f1
                           0000F2   368 _BREG_F2	=	0x00f2
                           0000F3   369 _BREG_F3	=	0x00f3
                           0000F4   370 _BREG_F4	=	0x00f4
                           0000F5   371 _BREG_F5	=	0x00f5
                           0000F6   372 _BREG_F6	=	0x00f6
                           0000F7   373 _BREG_F7	=	0x00f7
                           0000A8   374 _EX0	=	0x00a8
                           0000A9   375 _ET0	=	0x00a9
                           0000AA   376 _EX1	=	0x00aa
                           0000AB   377 _ET1	=	0x00ab
                           0000AC   378 _ES	=	0x00ac
                           0000AF   379 _EA	=	0x00af
                           0000B8   380 _PX0	=	0x00b8
                           0000B9   381 _PT0	=	0x00b9
                           0000BA   382 _PX1	=	0x00ba
                           0000BB   383 _PT1	=	0x00bb
                           0000BC   384 _PS	=	0x00bc
                           000080   385 _P0_0	=	0x0080
                           000081   386 _P0_1	=	0x0081
                           000082   387 _P0_2	=	0x0082
                           000083   388 _P0_3	=	0x0083
                           000084   389 _P0_4	=	0x0084
                           000085   390 _P0_5	=	0x0085
                           000086   391 _P0_6	=	0x0086
                           000087   392 _P0_7	=	0x0087
                           000090   393 _P1_0	=	0x0090
                           000091   394 _P1_1	=	0x0091
                           000092   395 _P1_2	=	0x0092
                           000093   396 _P1_3	=	0x0093
                           000094   397 _P1_4	=	0x0094
                           000095   398 _P1_5	=	0x0095
                           000096   399 _P1_6	=	0x0096
                           000097   400 _P1_7	=	0x0097
                           0000A0   401 _P2_0	=	0x00a0
                           0000A1   402 _P2_1	=	0x00a1
                           0000A2   403 _P2_2	=	0x00a2
                           0000A3   404 _P2_3	=	0x00a3
                           0000A4   405 _P2_4	=	0x00a4
                           0000A5   406 _P2_5	=	0x00a5
                           0000A6   407 _P2_6	=	0x00a6
                           0000A7   408 _P2_7	=	0x00a7
                           0000B0   409 _P3_0	=	0x00b0
                           0000B1   410 _P3_1	=	0x00b1
                           0000B2   411 _P3_2	=	0x00b2
                           0000B3   412 _P3_3	=	0x00b3
                           0000B4   413 _P3_4	=	0x00b4
                           0000B5   414 _P3_5	=	0x00b5
                           0000B6   415 _P3_6	=	0x00b6
                           0000B7   416 _P3_7	=	0x00b7
                           0000B0   417 _RXD	=	0x00b0
                           0000B0   418 _RXD0	=	0x00b0
                           0000B1   419 _TXD	=	0x00b1
                           0000B1   420 _TXD0	=	0x00b1
                           0000B2   421 _INT0	=	0x00b2
                           0000B3   422 _INT1	=	0x00b3
                           0000B4   423 _T0	=	0x00b4
                           0000B5   424 _T1	=	0x00b5
                           0000B6   425 _WR	=	0x00b6
                           0000B7   426 _RD	=	0x00b7
                           0000D0   427 _P	=	0x00d0
                           0000D1   428 _F1	=	0x00d1
                           0000D2   429 _OV	=	0x00d2
                           0000D3   430 _RS0	=	0x00d3
                           0000D4   431 _RS1	=	0x00d4
                           0000D5   432 _F0	=	0x00d5
                           0000D6   433 _AC	=	0x00d6
                           0000D7   434 _CY	=	0x00d7
                           000098   435 _RI	=	0x0098
                           000099   436 _TI	=	0x0099
                           00009A   437 _RB8	=	0x009a
                           00009B   438 _TB8	=	0x009b
                           00009C   439 _REN	=	0x009c
                           00009D   440 _SM2	=	0x009d
                           00009E   441 _SM1	=	0x009e
                           00009F   442 _SM0	=	0x009f
                           000088   443 _IT0	=	0x0088
                           000089   444 _IE0	=	0x0089
                           00008A   445 _IT1	=	0x008a
                           00008B   446 _IE1	=	0x008b
                           00008C   447 _TR0	=	0x008c
                           00008D   448 _TF0	=	0x008d
                           00008E   449 _TR1	=	0x008e
                           00008F   450 _TF1	=	0x008f
                                    451 ;--------------------------------------------------------
                                    452 ; overlayable register banks
                                    453 ;--------------------------------------------------------
                                    454 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        455 	.ds 8
                                    456 ;--------------------------------------------------------
                                    457 ; internal ram data
                                    458 ;--------------------------------------------------------
                                    459 	.area DSEG    (DATA)
                                    460 ;--------------------------------------------------------
                                    461 ; overlayable items in internal ram
                                    462 ;--------------------------------------------------------
                                    463 	.area	OSEG    (OVR,DATA)
      000000                        464 _hex_to_int_sloc0_1_0:
      000000                        465 	.ds 3
      000003                        466 _hex_to_int_sloc1_1_0:
      000003                        467 	.ds 1
      000004                        468 _hex_to_int_sloc2_1_0:
      000004                        469 	.ds 2
                                    470 ;--------------------------------------------------------
                                    471 ; Stack segment in internal ram
                                    472 ;--------------------------------------------------------
                                    473 	.area SSEG
      000000                        474 __start__stack:
      000000                        475 	.ds	1
                                    476 
                                    477 ;--------------------------------------------------------
                                    478 ; indirectly addressable internal ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area ISEG    (DATA)
                                    481 ;--------------------------------------------------------
                                    482 ; absolute internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area IABS    (ABS,DATA)
                                    485 	.area IABS    (ABS,DATA)
                                    486 ;--------------------------------------------------------
                                    487 ; bit data
                                    488 ;--------------------------------------------------------
                                    489 	.area BSEG    (BIT)
                                    490 ;--------------------------------------------------------
                                    491 ; paged external ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area PSEG    (PAG,XDATA)
                                    494 ;--------------------------------------------------------
                                    495 ; uninitialized external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area XSEG    (XDATA)
      000000                        498 _hex_to_int_str_10000_58:
      000000                        499 	.ds 3
      000003                        500 _hex_to_int_result_10000_59:
      000003                        501 	.ds 2
      000005                        502 _hex_to_int_ASCII_20000_60:
      000005                        503 	.ds 2
      000007                        504 _get_user_buffer_size_input_10000_65:
      000007                        505 	.ds 10
                                    506 ;--------------------------------------------------------
                                    507 ; absolute external ram data
                                    508 ;--------------------------------------------------------
                                    509 	.area XABS    (ABS,XDATA)
                                    510 ;--------------------------------------------------------
                                    511 ; initialized external ram data
                                    512 ;--------------------------------------------------------
                                    513 	.area XISEG   (XDATA)
                                    514 	.area HOME    (CODE)
                                    515 	.area GSINIT0 (CODE)
                                    516 	.area GSINIT1 (CODE)
                                    517 	.area GSINIT2 (CODE)
                                    518 	.area GSINIT3 (CODE)
                                    519 	.area GSINIT4 (CODE)
                                    520 	.area GSINIT5 (CODE)
                                    521 	.area GSINIT  (CODE)
                                    522 	.area GSFINAL (CODE)
                                    523 	.area CSEG    (CODE)
                                    524 ;--------------------------------------------------------
                                    525 ; interrupt vector
                                    526 ;--------------------------------------------------------
                                    527 	.area HOME    (CODE)
      000000                        528 __interrupt_vect:
      000000 02r00r00         [24]  529 	ljmp	__sdcc_gsinit_startup
                                    530 ;--------------------------------------------------------
                                    531 ; global & static initialisations
                                    532 ;--------------------------------------------------------
                                    533 	.area HOME    (CODE)
                                    534 	.area GSINIT  (CODE)
                                    535 	.area GSFINAL (CODE)
                                    536 	.area GSINIT  (CODE)
                                    537 	.globl __sdcc_gsinit_startup
                                    538 	.globl __sdcc_program_startup
                                    539 	.globl __start__stack
                                    540 	.globl __mcs51_genXINIT
                                    541 	.globl __mcs51_genXRAMCLEAR
                                    542 	.globl __mcs51_genRAMCLEAR
                                    543 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  544 	ljmp	__sdcc_program_startup
                                    545 ;--------------------------------------------------------
                                    546 ; Home
                                    547 ;--------------------------------------------------------
                                    548 	.area HOME    (CODE)
                                    549 	.area HOME    (CODE)
      000003                        550 __sdcc_program_startup:
      000003 02r02r3E         [24]  551 	ljmp	_main
                                    552 ;	return from main will return to caller
                                    553 ;--------------------------------------------------------
                                    554 ; code
                                    555 ;--------------------------------------------------------
                                    556 	.area CSEG    (CODE)
                                    557 ;------------------------------------------------------------
                                    558 ;Allocation info for local variables in function 'hex_to_int'
                                    559 ;------------------------------------------------------------
                                    560 ;str                       Allocated with name '_hex_to_int_str_10000_58'
                                    561 ;i                         Allocated with name '_hex_to_int_i_10000_59'
                                    562 ;result                    Allocated with name '_hex_to_int_result_10000_59'
                                    563 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_60'
                                    564 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    565 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    566 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    567 ;------------------------------------------------------------
                                    568 ;	main.c:8: int hex_to_int(char* str)
                                    569 ;	-----------------------------------------
                                    570 ;	 function hex_to_int
                                    571 ;	-----------------------------------------
      000000                        572 _hex_to_int:
                           000007   573 	ar7 = 0x07
                           000006   574 	ar6 = 0x06
                           000005   575 	ar5 = 0x05
                           000004   576 	ar4 = 0x04
                           000003   577 	ar3 = 0x03
                           000002   578 	ar2 = 0x02
                           000001   579 	ar1 = 0x01
                           000000   580 	ar0 = 0x00
      000000 AF F0            [24]  581 	mov	r7,b
      000002 AE 83            [24]  582 	mov	r6,dph
      000004 E5 82            [12]  583 	mov	a,dpl
      000006 90r00r00         [24]  584 	mov	dptr,#_hex_to_int_str_10000_58
      000009 F0               [24]  585 	movx	@dptr,a
      00000A EE               [12]  586 	mov	a,r6
      00000B A3               [24]  587 	inc	dptr
      00000C F0               [24]  588 	movx	@dptr,a
      00000D EF               [12]  589 	mov	a,r7
      00000E A3               [24]  590 	inc	dptr
      00000F F0               [24]  591 	movx	@dptr,a
                                    592 ;	main.c:11: int i = 0, result = 0;
      000010 90r00r03         [24]  593 	mov	dptr,#_hex_to_int_result_10000_59
      000013 E4               [12]  594 	clr	a
      000014 F0               [24]  595 	movx	@dptr,a
      000015 A3               [24]  596 	inc	dptr
      000016 F0               [24]  597 	movx	@dptr,a
                                    598 ;	main.c:12: while(str[i] != '\0')
      000017 90r00r00         [24]  599 	mov	dptr,#_hex_to_int_str_10000_58
      00001A E0               [24]  600 	movx	a,@dptr
      00001B FD               [12]  601 	mov	r5,a
      00001C A3               [24]  602 	inc	dptr
      00001D E0               [24]  603 	movx	a,@dptr
      00001E FE               [12]  604 	mov	r6,a
      00001F A3               [24]  605 	inc	dptr
      000020 E0               [24]  606 	movx	a,@dptr
      000021 FF               [12]  607 	mov	r7,a
      000022 8D 02            [24]  608 	mov	ar2,r5
      000024 8E 03            [24]  609 	mov	ar3,r6
      000026 8F 04            [24]  610 	mov	ar4,r7
      000028 8D*00            [24]  611 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  612 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  613 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  614 	mov	r0,#0x00
      000030 79 00            [12]  615 	mov	r1,#0x00
      000032                        616 00112$:
      000032 C0 02            [24]  617 	push	ar2
      000034 C0 03            [24]  618 	push	ar3
      000036 C0 04            [24]  619 	push	ar4
      000038 E8               [12]  620 	mov	a,r0
      000039 25*00            [12]  621 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  622 	mov	r2,a
      00003C E9               [12]  623 	mov	a,r1
      00003D 35*01            [12]  624 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  625 	mov	r3,a
      000040 AC*02            [24]  626 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  627 	mov	dpl,r2
      000044 8B 83            [24]  628 	mov	dph,r3
      000046 8C F0            [24]  629 	mov	b,r4
      000048 12r00r00         [24]  630 	lcall	__gptrget
      00004B F5*03            [12]  631 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  632 	pop	ar4
      00004F D0 03            [24]  633 	pop	ar3
      000051 D0 02            [24]  634 	pop	ar2
      000053 E5*03            [12]  635 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  636 	jnz	00166$
      000057 02r01rAE         [24]  637 	ljmp	00114$
      00005A                        638 00166$:
                                    639 ;	main.c:14: int ASCII = (int)str[i];
      00005A C0 02            [24]  640 	push	ar2
      00005C C0 03            [24]  641 	push	ar3
      00005E C0 04            [24]  642 	push	ar4
      000060 85*03*04         [24]  643 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  644 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  645 	mov	dptr,#_hex_to_int_ASCII_20000_60
      000069 E5*04            [12]  646 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  647 	movx	@dptr,a
      00006C E5*05            [12]  648 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  649 	inc	dptr
      00006F F0               [24]  650 	movx	@dptr,a
                                    651 ;	main.c:15: result *= 16;
      000070 90r00r03         [24]  652 	mov	dptr,#_hex_to_int_result_10000_59
      000073 E0               [24]  653 	movx	a,@dptr
      000074 FB               [12]  654 	mov	r3,a
      000075 A3               [24]  655 	inc	dptr
      000076 E0               [24]  656 	movx	a,@dptr
      000077 C4               [12]  657 	swap	a
      000078 54 F0            [12]  658 	anl	a,#0xf0
      00007A CB               [12]  659 	xch	a,r3
      00007B C4               [12]  660 	swap	a
      00007C CB               [12]  661 	xch	a,r3
      00007D 6B               [12]  662 	xrl	a,r3
      00007E CB               [12]  663 	xch	a,r3
      00007F 54 F0            [12]  664 	anl	a,#0xf0
      000081 CB               [12]  665 	xch	a,r3
      000082 6B               [12]  666 	xrl	a,r3
      000083 FC               [12]  667 	mov	r4,a
      000084 90r00r03         [24]  668 	mov	dptr,#_hex_to_int_result_10000_59
      000087 EB               [12]  669 	mov	a,r3
      000088 F0               [24]  670 	movx	@dptr,a
      000089 EC               [12]  671 	mov	a,r4
      00008A A3               [24]  672 	inc	dptr
      00008B F0               [24]  673 	movx	@dptr,a
                                    674 ;	main.c:16: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  675 	clr	c
      00008D E5*04            [12]  676 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  677 	subb	a,#0x30
      000091 E5*05            [12]  678 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  679 	xrl	a,#0x80
      000095 94 80            [12]  680 	subb	a,#0x80
      000097 D0 04            [24]  681 	pop	ar4
      000099 D0 03            [24]  682 	pop	ar3
      00009B D0 02            [24]  683 	pop	ar2
      00009D 40 3F            [24]  684 	jc	00109$
      00009F 74 39            [12]  685 	mov	a,#0x39
      0000A1 95*04            [12]  686 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  687 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  688 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  689 	xrl	b,#0x80
      0000AB 95 F0            [12]  690 	subb	a,b
      0000AD 40 2F            [24]  691 	jc	00109$
                                    692 ;	main.c:18: result += str[i] - 48;
      0000AF C0 02            [24]  693 	push	ar2
      0000B1 C0 03            [24]  694 	push	ar3
      0000B3 C0 04            [24]  695 	push	ar4
      0000B5 E5*04            [12]  696 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  697 	add	a,#0xd0
      0000B9 F5*04            [12]  698 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  699 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  700 	addc	a,#0xff
      0000BF F5*05            [12]  701 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  702 	mov	dptr,#_hex_to_int_result_10000_59
      0000C4 E0               [24]  703 	movx	a,@dptr
      0000C5 FA               [12]  704 	mov	r2,a
      0000C6 A3               [24]  705 	inc	dptr
      0000C7 E0               [24]  706 	movx	a,@dptr
      0000C8 FC               [12]  707 	mov	r4,a
      0000C9 90r00r03         [24]  708 	mov	dptr,#_hex_to_int_result_10000_59
      0000CC E5*04            [12]  709 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  710 	add	a, r2
      0000CF F0               [24]  711 	movx	@dptr,a
      0000D0 E5*05            [12]  712 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  713 	addc	a, r4
      0000D3 A3               [24]  714 	inc	dptr
      0000D4 F0               [24]  715 	movx	@dptr,a
      0000D5 D0 04            [24]  716 	pop	ar4
      0000D7 D0 03            [24]  717 	pop	ar3
      0000D9 D0 02            [24]  718 	pop	ar2
      0000DB 02r01rA6         [24]  719 	ljmp	00110$
      0000DE                        720 00109$:
                                    721 ;	main.c:20: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  722 	mov	dptr,#_hex_to_int_ASCII_20000_60
      0000E1 E0               [24]  723 	movx	a,@dptr
      0000E2 F5*04            [12]  724 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  725 	inc	dptr
      0000E5 E0               [24]  726 	movx	a,@dptr
      0000E6 F5*05            [12]  727 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  728 	clr	c
      0000E9 E5*04            [12]  729 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  730 	subb	a,#0x41
      0000ED E5*05            [12]  731 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  732 	xrl	a,#0x80
      0000F1 94 80            [12]  733 	subb	a,#0x80
      0000F3 40 4E            [24]  734 	jc	00105$
      0000F5 74 46            [12]  735 	mov	a,#0x46
      0000F7 95*04            [12]  736 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  737 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  738 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  739 	xrl	b,#0x80
      000101 95 F0            [12]  740 	subb	a,b
      000103 40 3E            [24]  741 	jc	00105$
                                    742 ;	main.c:22: result += str[i] - 55;
      000105 C0 05            [24]  743 	push	ar5
      000107 C0 06            [24]  744 	push	ar6
      000109 C0 07            [24]  745 	push	ar7
      00010B E8               [12]  746 	mov	a,r0
      00010C 2A               [12]  747 	add	a, r2
      00010D FD               [12]  748 	mov	r5,a
      00010E E9               [12]  749 	mov	a,r1
      00010F 3B               [12]  750 	addc	a, r3
      000110 FE               [12]  751 	mov	r6,a
      000111 8C 07            [24]  752 	mov	ar7,r4
      000113 8D 82            [24]  753 	mov	dpl,r5
      000115 8E 83            [24]  754 	mov	dph,r6
      000117 8F F0            [24]  755 	mov	b,r7
      000119 12r00r00         [24]  756 	lcall	__gptrget
      00011C 7F 00            [12]  757 	mov	r7,#0x00
      00011E 24 C9            [12]  758 	add	a,#0xc9
      000120 F5*04            [12]  759 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  760 	mov	a,r7
      000123 34 FF            [12]  761 	addc	a,#0xff
      000125 F5*05            [12]  762 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  763 	mov	dptr,#_hex_to_int_result_10000_59
      00012A E0               [24]  764 	movx	a,@dptr
      00012B FE               [12]  765 	mov	r6,a
      00012C A3               [24]  766 	inc	dptr
      00012D E0               [24]  767 	movx	a,@dptr
      00012E FF               [12]  768 	mov	r7,a
      00012F 90r00r03         [24]  769 	mov	dptr,#_hex_to_int_result_10000_59
      000132 E5*04            [12]  770 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  771 	add	a, r6
      000135 F0               [24]  772 	movx	@dptr,a
      000136 E5*05            [12]  773 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  774 	addc	a, r7
      000139 A3               [24]  775 	inc	dptr
      00013A F0               [24]  776 	movx	@dptr,a
      00013B D0 07            [24]  777 	pop	ar7
      00013D D0 06            [24]  778 	pop	ar6
      00013F D0 05            [24]  779 	pop	ar5
      000141 80 63            [24]  780 	sjmp	00110$
      000143                        781 00105$:
                                    782 ;	main.c:24: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  783 	mov	dptr,#_hex_to_int_ASCII_20000_60
      000146 E0               [24]  784 	movx	a,@dptr
      000147 F5*04            [12]  785 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  786 	inc	dptr
      00014A E0               [24]  787 	movx	a,@dptr
      00014B F5*05            [12]  788 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  789 	clr	c
      00014E E5*04            [12]  790 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  791 	subb	a,#0x61
      000152 E5*05            [12]  792 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  793 	xrl	a,#0x80
      000156 94 80            [12]  794 	subb	a,#0x80
      000158 40 4C            [24]  795 	jc	00110$
      00015A 74 66            [12]  796 	mov	a,#0x66
      00015C 95*04            [12]  797 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  798 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  799 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  800 	xrl	b,#0x80
      000166 95 F0            [12]  801 	subb	a,b
      000168 40 3C            [24]  802 	jc	00110$
                                    803 ;	main.c:26: result += str[i] - 87;
      00016A C0 02            [24]  804 	push	ar2
      00016C C0 03            [24]  805 	push	ar3
      00016E C0 04            [24]  806 	push	ar4
      000170 E8               [12]  807 	mov	a,r0
      000171 2D               [12]  808 	add	a, r5
      000172 FA               [12]  809 	mov	r2,a
      000173 E9               [12]  810 	mov	a,r1
      000174 3E               [12]  811 	addc	a, r6
      000175 FB               [12]  812 	mov	r3,a
      000176 8F 04            [24]  813 	mov	ar4,r7
      000178 8A 82            [24]  814 	mov	dpl,r2
      00017A 8B 83            [24]  815 	mov	dph,r3
      00017C 8C F0            [24]  816 	mov	b,r4
      00017E 12r00r00         [24]  817 	lcall	__gptrget
      000181 7C 00            [12]  818 	mov	r4,#0x00
      000183 24 A9            [12]  819 	add	a,#0xa9
      000185 F5*04            [12]  820 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  821 	mov	a,r4
      000188 34 FF            [12]  822 	addc	a,#0xff
      00018A F5*05            [12]  823 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  824 	mov	dptr,#_hex_to_int_result_10000_59
      00018F E0               [24]  825 	movx	a,@dptr
      000190 FB               [12]  826 	mov	r3,a
      000191 A3               [24]  827 	inc	dptr
      000192 E0               [24]  828 	movx	a,@dptr
      000193 FC               [12]  829 	mov	r4,a
      000194 90r00r03         [24]  830 	mov	dptr,#_hex_to_int_result_10000_59
      000197 E5*04            [12]  831 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  832 	add	a, r3
      00019A F0               [24]  833 	movx	@dptr,a
      00019B E5*05            [12]  834 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  835 	addc	a, r4
      00019E A3               [24]  836 	inc	dptr
      00019F F0               [24]  837 	movx	@dptr,a
                                    838 ;	main.c:30: return result;
      0001A0 D0 04            [24]  839 	pop	ar4
      0001A2 D0 03            [24]  840 	pop	ar3
      0001A4 D0 02            [24]  841 	pop	ar2
                                    842 ;	main.c:26: result += str[i] - 87;
      0001A6                        843 00110$:
                                    844 ;	main.c:28: i++;
      0001A6 08               [12]  845 	inc	r0
      0001A7 B8 00 01         [24]  846 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  847 	inc	r1
      0001AB                        848 00173$:
      0001AB 02r00r32         [24]  849 	ljmp	00112$
      0001AE                        850 00114$:
                                    851 ;	main.c:30: return result;
      0001AE 90r00r03         [24]  852 	mov	dptr,#_hex_to_int_result_10000_59
      0001B1 E0               [24]  853 	movx	a,@dptr
      0001B2 FE               [12]  854 	mov	r6,a
      0001B3 A3               [24]  855 	inc	dptr
      0001B4 E0               [24]  856 	movx	a,@dptr
                                    857 ;	main.c:32: }
      0001B5 8E 82            [24]  858 	mov	dpl,r6
      0001B7 F5 83            [12]  859 	mov	dph,a
      0001B9 22               [24]  860 	ret
                                    861 ;------------------------------------------------------------
                                    862 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    863 ;------------------------------------------------------------
                                    864 ;size                      Allocated with name '_get_user_buffer_size_size_10000_65'
                                    865 ;i                         Allocated with name '_get_user_buffer_size_i_10000_65'
                                    866 ;output                    Allocated with name '_get_user_buffer_size_output_10000_65'
                                    867 ;input                     Allocated with name '_get_user_buffer_size_input_10000_65'
                                    868 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_65'
                                    869 ;------------------------------------------------------------
                                    870 ;	main.c:35: int get_user_buffer_size(void)
                                    871 ;	-----------------------------------------
                                    872 ;	 function get_user_buffer_size
                                    873 ;	-----------------------------------------
      0001BA                        874 _get_user_buffer_size:
                                    875 ;	main.c:41: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  876 	mov	r6,#0x00
      0001BC 7F 00            [12]  877 	mov	r7,#0x00
      0001BE                        878 00103$:
      0001BE C0 07            [24]  879 	push	ar7
      0001C0 C0 06            [24]  880 	push	ar6
      0001C2 12r00r00         [24]  881 	lcall	_getchar
      0001C5 AC 82            [24]  882 	mov	r4, dpl
      0001C7 D0 06            [24]  883 	pop	ar6
      0001C9 D0 07            [24]  884 	pop	ar7
      0001CB BC 0A 02         [24]  885 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  886 	sjmp	00105$
      0001D0                        887 00133$:
      0001D0 BC 0D 02         [24]  888 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  889 	sjmp	00105$
      0001D5                        890 00134$:
      0001D5 C3               [12]  891 	clr	c
      0001D6 EE               [12]  892 	mov	a,r6
      0001D7 94 09            [12]  893 	subb	a,#0x09
      0001D9 EF               [12]  894 	mov	a,r7
      0001DA 64 80            [12]  895 	xrl	a,#0x80
      0001DC 94 80            [12]  896 	subb	a,#0x80
      0001DE 50 2A            [24]  897 	jnc	00105$
                                    898 ;	main.c:43: putchar(ch);
      0001E0 8C 03            [24]  899 	mov	ar3,r4
      0001E2 7D 00            [12]  900 	mov	r5,#0x00
      0001E4 8B 82            [24]  901 	mov	dpl, r3
      0001E6 8D 83            [24]  902 	mov	dph, r5
      0001E8 C0 07            [24]  903 	push	ar7
      0001EA C0 06            [24]  904 	push	ar6
      0001EC C0 04            [24]  905 	push	ar4
      0001EE 12r00r00         [24]  906 	lcall	_putchar
      0001F1 D0 04            [24]  907 	pop	ar4
      0001F3 D0 06            [24]  908 	pop	ar6
      0001F5 D0 07            [24]  909 	pop	ar7
                                    910 ;	main.c:44: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12]  911 	mov	a,r6
      0001F8 24r07            [12]  912 	add	a, #_get_user_buffer_size_input_10000_65
      0001FA F5 82            [12]  913 	mov	dpl,a
      0001FC EF               [12]  914 	mov	a,r7
      0001FD 34s00            [12]  915 	addc	a, #(_get_user_buffer_size_input_10000_65 >> 8)
      0001FF F5 83            [12]  916 	mov	dph,a
      000201 EC               [12]  917 	mov	a,r4
      000202 F0               [24]  918 	movx	@dptr,a
                                    919 ;	main.c:45: i++;
      000203 0E               [12]  920 	inc	r6
      000204 BE 00 B7         [24]  921 	cjne	r6,#0x00,00103$
      000207 0F               [12]  922 	inc	r7
      000208 80 B4            [24]  923 	sjmp	00103$
      00020A                        924 00105$:
                                    925 ;	main.c:47: input[i] = '\0';
      00020A EE               [12]  926 	mov	a,r6
      00020B 24r07            [12]  927 	add	a, #_get_user_buffer_size_input_10000_65
      00020D F5 82            [12]  928 	mov	dpl,a
      00020F EF               [12]  929 	mov	a,r7
      000210 34s00            [12]  930 	addc	a, #(_get_user_buffer_size_input_10000_65 >> 8)
      000212 F5 83            [12]  931 	mov	dph,a
      000214 E4               [12]  932 	clr	a
      000215 F0               [24]  933 	movx	@dptr,a
                                    934 ;	main.c:48: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24]  935 	mov	dptr,#_get_user_buffer_size_input_10000_65
      000219 F5 F0            [12]  936 	mov	b,a
      00021B 12r00r00         [24]  937 	lcall	_hex_to_int
      00021E AE 82            [24]  938 	mov	r6, dpl
      000220 AF 83            [24]  939 	mov	r7, dph
                                    940 ;	main.c:49: printf_tiny("\n\r");
      000222 C0 07            [24]  941 	push	ar7
      000224 C0 06            [24]  942 	push	ar6
      000226 74r00            [12]  943 	mov	a,#___str_0
      000228 C0 E0            [24]  944 	push	acc
      00022A 74s00            [12]  945 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24]  946 	push	acc
      00022E 12r00r00         [24]  947 	lcall	_printf_tiny
      000231 15 81            [12]  948 	dec	sp
      000233 15 81            [12]  949 	dec	sp
      000235 D0 06            [24]  950 	pop	ar6
      000237 D0 07            [24]  951 	pop	ar7
                                    952 ;	main.c:51: return output;
      000239 8E 82            [24]  953 	mov	dpl, r6
      00023B 8F 83            [24]  954 	mov	dph, r7
                                    955 ;	main.c:52: }
      00023D 22               [24]  956 	ret
                                    957 ;------------------------------------------------------------
                                    958 ;Allocation info for local variables in function 'main'
                                    959 ;------------------------------------------------------------
                                    960 ;c                         Allocated with name '_main_c_20001_70'
                                    961 ;addr                      Allocated with name '_main_addr_30002_72'
                                    962 ;------------------------------------------------------------
                                    963 ;	main.c:54: void main(void)
                                    964 ;	-----------------------------------------
                                    965 ;	 function main
                                    966 ;	-----------------------------------------
      00023E                        967 _main:
                                    968 ;	main.c:57: printf("test\n\r");
      00023E 74r03            [12]  969 	mov	a,#___str_1
      000240 C0 E0            [24]  970 	push	acc
      000242 74s00            [12]  971 	mov	a,#(___str_1 >> 8)
      000244 C0 E0            [24]  972 	push	acc
      000246 74 80            [12]  973 	mov	a,#0x80
      000248 C0 E0            [24]  974 	push	acc
      00024A 12r00r00         [24]  975 	lcall	_printf
      00024D 15 81            [12]  976 	dec	sp
      00024F 15 81            [12]  977 	dec	sp
      000251 15 81            [12]  978 	dec	sp
                                    979 ;	main.c:58: configure_SPI();
      000253 12r00r00         [24]  980 	lcall	_configure_SPI
                                    981 ;	main.c:59: while(1)
      000256                        982 00106$:
                                    983 ;	main.c:61: printf("Choose action: L-->LED ON\n\rR-->Read\n\r");
      000256 74r0A            [12]  984 	mov	a,#___str_2
      000258 C0 E0            [24]  985 	push	acc
      00025A 74s00            [12]  986 	mov	a,#(___str_2 >> 8)
      00025C C0 E0            [24]  987 	push	acc
      00025E 74 80            [12]  988 	mov	a,#0x80
      000260 C0 E0            [24]  989 	push	acc
      000262 12r00r00         [24]  990 	lcall	_printf
      000265 15 81            [12]  991 	dec	sp
      000267 15 81            [12]  992 	dec	sp
      000269 15 81            [12]  993 	dec	sp
                                    994 ;	main.c:62: char c = getchar();
      00026B 12r00r00         [24]  995 	lcall	_getchar
      00026E AE 82            [24]  996 	mov	r6, dpl
                                    997 ;	main.c:63: putchar(c);
      000270 8E 05            [24]  998 	mov	ar5,r6
      000272 7F 00            [12]  999 	mov	r7,#0x00
      000274 8D 82            [24] 1000 	mov	dpl, r5
      000276 8F 83            [24] 1001 	mov	dph, r7
      000278 C0 06            [24] 1002 	push	ar6
      00027A 12r00r00         [24] 1003 	lcall	_putchar
                                   1004 ;	main.c:64: printf("\n\r");
      00027D 74r00            [12] 1005 	mov	a,#___str_0
      00027F C0 E0            [24] 1006 	push	acc
      000281 74s00            [12] 1007 	mov	a,#(___str_0 >> 8)
      000283 C0 E0            [24] 1008 	push	acc
      000285 74 80            [12] 1009 	mov	a,#0x80
      000287 C0 E0            [24] 1010 	push	acc
      000289 12r00r00         [24] 1011 	lcall	_printf
      00028C 15 81            [12] 1012 	dec	sp
      00028E 15 81            [12] 1013 	dec	sp
      000290 15 81            [12] 1014 	dec	sp
      000292 D0 06            [24] 1015 	pop	ar6
                                   1016 ;	main.c:65: switch(c)
      000294 BE 4C 02         [24] 1017 	cjne	r6,#0x4c,00137$
      000297 80 0A            [24] 1018 	sjmp	00101$
      000299                       1019 00137$:
      000299 BE 52 02         [24] 1020 	cjne	r6,#0x52,00138$
      00029C 80 0A            [24] 1021 	sjmp	00102$
      00029E                       1022 00138$:
                                   1023 ;	main.c:67: case 'L':
      00029E BE 57 B5         [24] 1024 	cjne	r6,#0x57,00106$
      0002A1 80 22            [24] 1025 	sjmp	00103$
      0002A3                       1026 00101$:
                                   1027 ;	main.c:68: LED_On();
      0002A3 12r00r00         [24] 1028 	lcall	_LED_On
                                   1029 ;	main.c:69: break;
                                   1030 ;	main.c:70: case 'R':
      0002A6 80 AE            [24] 1031 	sjmp	00106$
      0002A8                       1032 00102$:
                                   1033 ;	main.c:71: printf("Enter the Control register address you want to read from\n\r");
      0002A8 74r30            [12] 1034 	mov	a,#___str_3
      0002AA C0 E0            [24] 1035 	push	acc
      0002AC 74s00            [12] 1036 	mov	a,#(___str_3 >> 8)
      0002AE C0 E0            [24] 1037 	push	acc
      0002B0 74 80            [12] 1038 	mov	a,#0x80
      0002B2 C0 E0            [24] 1039 	push	acc
      0002B4 12r00r00         [24] 1040 	lcall	_printf
      0002B7 15 81            [12] 1041 	dec	sp
      0002B9 15 81            [12] 1042 	dec	sp
      0002BB 15 81            [12] 1043 	dec	sp
                                   1044 ;	main.c:72: uint8_t addr = get_user_buffer_size();
      0002BD 12r01rBA         [24] 1045 	lcall	_get_user_buffer_size
                                   1046 ;	main.c:73: test_read_ctrl(addr);
      0002C0 12r00r00         [24] 1047 	lcall	_test_read_ctrl
                                   1048 ;	main.c:74: break;
                                   1049 ;	main.c:75: case 'W':
      0002C3 80 91            [24] 1050 	sjmp	00106$
      0002C5                       1051 00103$:
                                   1052 ;	main.c:76: printf("Enter the 16 bit data write\n\r");
      0002C5 74r6B            [12] 1053 	mov	a,#___str_4
      0002C7 C0 E0            [24] 1054 	push	acc
      0002C9 74s00            [12] 1055 	mov	a,#(___str_4 >> 8)
      0002CB C0 E0            [24] 1056 	push	acc
      0002CD 74 80            [12] 1057 	mov	a,#0x80
      0002CF C0 E0            [24] 1058 	push	acc
      0002D1 12r00r00         [24] 1059 	lcall	_printf
      0002D4 15 81            [12] 1060 	dec	sp
      0002D6 15 81            [12] 1061 	dec	sp
      0002D8 15 81            [12] 1062 	dec	sp
                                   1063 ;	main.c:77: P1_1 = 0;
                                   1064 ;	assignBit
      0002DA C2 91            [12] 1065 	clr	_P1_1
                                   1066 ;	main.c:78: delay_us(2);
      0002DC 90 00 02         [24] 1067 	mov	dptr,#0x0002
      0002DF 12r00r00         [24] 1068 	lcall	_delay_us
                                   1069 ;	main.c:80: SPI_send(0x5F);
      0002E2 75 82 5F         [24] 1070 	mov	dpl, #0x5f
      0002E5 12r00r00         [24] 1071 	lcall	_SPI_send
                                   1072 ;	main.c:81: SPI_send(0x02);
      0002E8 75 82 02         [24] 1073 	mov	dpl, #0x02
      0002EB 12r00r00         [24] 1074 	lcall	_SPI_send
                                   1075 ;	main.c:82: delay_us(2);
      0002EE 90 00 02         [24] 1076 	mov	dptr,#0x0002
      0002F1 12r00r00         [24] 1077 	lcall	_delay_us
                                   1078 ;	main.c:83: P1_1 = 1;
                                   1079 ;	assignBit
      0002F4 D2 91            [12] 1080 	setb	_P1_1
                                   1081 ;	main.c:85: }
                                   1082 ;	main.c:128: while(1)
                                   1083 ;	main.c:130: }
      0002F6 02r02r56         [24] 1084 	ljmp	00106$
                                   1085 	.area CSEG    (CODE)
                                   1086 	.area CONST   (CODE)
                                   1087 	.area CONST   (CODE)
      000000                       1088 ___str_0:
      000000 0A                    1089 	.db 0x0a
      000001 0D                    1090 	.db 0x0d
      000002 00                    1091 	.db 0x00
                                   1092 	.area CSEG    (CODE)
                                   1093 	.area CONST   (CODE)
      000003                       1094 ___str_1:
      000003 74 65 73 74           1095 	.ascii "test"
      000007 0A                    1096 	.db 0x0a
      000008 0D                    1097 	.db 0x0d
      000009 00                    1098 	.db 0x00
                                   1099 	.area CSEG    (CODE)
                                   1100 	.area CONST   (CODE)
      00000A                       1101 ___str_2:
      00000A 43 68 6F 6F 73 65 20  1102 	.ascii "Choose action: L-->LED ON"
             61 63 74 69 6F 6E 3A
             20 4C 2D 2D 3E 4C 45
             44 20 4F 4E
      000023 0A                    1103 	.db 0x0a
      000024 0D                    1104 	.db 0x0d
      000025 52 2D 2D 3E 52 65 61  1105 	.ascii "R-->Read"
             64
      00002D 0A                    1106 	.db 0x0a
      00002E 0D                    1107 	.db 0x0d
      00002F 00                    1108 	.db 0x00
                                   1109 	.area CSEG    (CODE)
                                   1110 	.area CONST   (CODE)
      000030                       1111 ___str_3:
      000030 45 6E 74 65 72 20 74  1112 	.ascii "Enter the Control register address you want to read from"
             68 65 20 43 6F 6E 74
             72 6F 6C 20 72 65 67
             69 73 74 65 72 20 61
             64 64 72 65 73 73 20
             79 6F 75 20 77 61 6E
             74 20 74 6F 20 72 65
             61 64 20 66 72 6F 6D
      000068 0A                    1113 	.db 0x0a
      000069 0D                    1114 	.db 0x0d
      00006A 00                    1115 	.db 0x00
                                   1116 	.area CSEG    (CODE)
                                   1117 	.area CONST   (CODE)
      00006B                       1118 ___str_4:
      00006B 45 6E 74 65 72 20 74  1119 	.ascii "Enter the 16 bit data write"
             68 65 20 31 36 20 62
             69 74 20 64 61 74 61
             20 77 72 69 74 65
      000086 0A                    1120 	.db 0x0a
      000087 0D                    1121 	.db 0x0d
      000088 00                    1122 	.db 0x00
                                   1123 	.area CSEG    (CODE)
                                   1124 	.area XINIT   (CODE)
                                   1125 	.area CABS    (ABS,CODE)
