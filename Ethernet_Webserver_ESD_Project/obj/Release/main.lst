                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _packetLoop
                                     15 	.globl _update_ERXRDPT
                                     16 	.globl _ENC_pkt_count
                                     17 	.globl _enc_init
                                     18 	.globl _send_arp_request
                                     19 	.globl _spi_control_write
                                     20 	.globl _eth_spi_read
                                     21 	.globl _phy_spi_write
                                     22 	.globl _phy_spi_read
                                     23 	.globl _spi_buffer_write
                                     24 	.globl _spi_buffer_read
                                     25 	.globl _mac_spi_read
                                     26 	.globl _enc_reset
                                     27 	.globl _configure_SPI
                                     28 	.globl _process_packet_from_buffer
                                     29 	.globl _transmit_tcp_packet
                                     30 	.globl _process_tcp_packet
                                     31 	.globl _memcmp
                                     32 	.globl _free
                                     33 	.globl _malloc
                                     34 	.globl _printf_tiny
                                     35 	.globl _putchar
                                     36 	.globl _getchar
                                     37 	.globl _printf
                                     38 	.globl _TF1
                                     39 	.globl _TR1
                                     40 	.globl _TF0
                                     41 	.globl _TR0
                                     42 	.globl _IE1
                                     43 	.globl _IT1
                                     44 	.globl _IE0
                                     45 	.globl _IT0
                                     46 	.globl _SM0
                                     47 	.globl _SM1
                                     48 	.globl _SM2
                                     49 	.globl _REN
                                     50 	.globl _TB8
                                     51 	.globl _RB8
                                     52 	.globl _TI
                                     53 	.globl _RI
                                     54 	.globl _CY
                                     55 	.globl _AC
                                     56 	.globl _F0
                                     57 	.globl _RS1
                                     58 	.globl _RS0
                                     59 	.globl _OV
                                     60 	.globl _F1
                                     61 	.globl _P
                                     62 	.globl _RD
                                     63 	.globl _WR
                                     64 	.globl _T1
                                     65 	.globl _T0
                                     66 	.globl _INT1
                                     67 	.globl _INT0
                                     68 	.globl _TXD0
                                     69 	.globl _TXD
                                     70 	.globl _RXD0
                                     71 	.globl _RXD
                                     72 	.globl _P3_7
                                     73 	.globl _P3_6
                                     74 	.globl _P3_5
                                     75 	.globl _P3_4
                                     76 	.globl _P3_3
                                     77 	.globl _P3_2
                                     78 	.globl _P3_1
                                     79 	.globl _P3_0
                                     80 	.globl _P2_7
                                     81 	.globl _P2_6
                                     82 	.globl _P2_5
                                     83 	.globl _P2_4
                                     84 	.globl _P2_3
                                     85 	.globl _P2_2
                                     86 	.globl _P2_1
                                     87 	.globl _P2_0
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _P0_7
                                     97 	.globl _P0_6
                                     98 	.globl _P0_5
                                     99 	.globl _P0_4
                                    100 	.globl _P0_3
                                    101 	.globl _P0_2
                                    102 	.globl _P0_1
                                    103 	.globl _P0_0
                                    104 	.globl _PS
                                    105 	.globl _PT1
                                    106 	.globl _PX1
                                    107 	.globl _PT0
                                    108 	.globl _PX0
                                    109 	.globl _EA
                                    110 	.globl _ES
                                    111 	.globl _ET1
                                    112 	.globl _EX1
                                    113 	.globl _ET0
                                    114 	.globl _EX0
                                    115 	.globl _BREG_F7
                                    116 	.globl _BREG_F6
                                    117 	.globl _BREG_F5
                                    118 	.globl _BREG_F4
                                    119 	.globl _BREG_F3
                                    120 	.globl _BREG_F2
                                    121 	.globl _BREG_F1
                                    122 	.globl _BREG_F0
                                    123 	.globl _P5_7
                                    124 	.globl _P5_6
                                    125 	.globl _P5_5
                                    126 	.globl _P5_4
                                    127 	.globl _P5_3
                                    128 	.globl _P5_2
                                    129 	.globl _P5_1
                                    130 	.globl _P5_0
                                    131 	.globl _P4_7
                                    132 	.globl _P4_6
                                    133 	.globl _P4_5
                                    134 	.globl _P4_4
                                    135 	.globl _P4_3
                                    136 	.globl _P4_2
                                    137 	.globl _P4_1
                                    138 	.globl _P4_0
                                    139 	.globl _PX0L
                                    140 	.globl _PT0L
                                    141 	.globl _PX1L
                                    142 	.globl _PT1L
                                    143 	.globl _PSL
                                    144 	.globl _PT2L
                                    145 	.globl _PPCL
                                    146 	.globl _EC
                                    147 	.globl _CCF0
                                    148 	.globl _CCF1
                                    149 	.globl _CCF2
                                    150 	.globl _CCF3
                                    151 	.globl _CCF4
                                    152 	.globl _CR
                                    153 	.globl _CF
                                    154 	.globl _TF2
                                    155 	.globl _EXF2
                                    156 	.globl _RCLK
                                    157 	.globl _TCLK
                                    158 	.globl _EXEN2
                                    159 	.globl _TR2
                                    160 	.globl _C_T2
                                    161 	.globl _CP_RL2
                                    162 	.globl _T2CON_7
                                    163 	.globl _T2CON_6
                                    164 	.globl _T2CON_5
                                    165 	.globl _T2CON_4
                                    166 	.globl _T2CON_3
                                    167 	.globl _T2CON_2
                                    168 	.globl _T2CON_1
                                    169 	.globl _T2CON_0
                                    170 	.globl _PT2
                                    171 	.globl _ET2
                                    172 	.globl _TMOD
                                    173 	.globl _TL1
                                    174 	.globl _TL0
                                    175 	.globl _TH1
                                    176 	.globl _TH0
                                    177 	.globl _TCON
                                    178 	.globl _SP
                                    179 	.globl _SCON
                                    180 	.globl _SBUF0
                                    181 	.globl _SBUF
                                    182 	.globl _PSW
                                    183 	.globl _PCON
                                    184 	.globl _P3
                                    185 	.globl _P2
                                    186 	.globl _P1
                                    187 	.globl _P0
                                    188 	.globl _IP
                                    189 	.globl _IE
                                    190 	.globl _DP0L
                                    191 	.globl _DPL
                                    192 	.globl _DP0H
                                    193 	.globl _DPH
                                    194 	.globl _B
                                    195 	.globl _ACC
                                    196 	.globl _EECON
                                    197 	.globl _KBF
                                    198 	.globl _KBE
                                    199 	.globl _KBLS
                                    200 	.globl _BRL
                                    201 	.globl _BDRCON
                                    202 	.globl _T2MOD
                                    203 	.globl _SPDAT
                                    204 	.globl _SPSTA
                                    205 	.globl _SPCON
                                    206 	.globl _SADEN
                                    207 	.globl _SADDR
                                    208 	.globl _WDTPRG
                                    209 	.globl _WDTRST
                                    210 	.globl _P5
                                    211 	.globl _P4
                                    212 	.globl _IPH1
                                    213 	.globl _IPL1
                                    214 	.globl _IPH0
                                    215 	.globl _IPL0
                                    216 	.globl _IEN1
                                    217 	.globl _IEN0
                                    218 	.globl _CMOD
                                    219 	.globl _CL
                                    220 	.globl _CH
                                    221 	.globl _CCON
                                    222 	.globl _CCAPM4
                                    223 	.globl _CCAPM3
                                    224 	.globl _CCAPM2
                                    225 	.globl _CCAPM1
                                    226 	.globl _CCAPM0
                                    227 	.globl _CCAP4L
                                    228 	.globl _CCAP3L
                                    229 	.globl _CCAP2L
                                    230 	.globl _CCAP1L
                                    231 	.globl _CCAP0L
                                    232 	.globl _CCAP4H
                                    233 	.globl _CCAP3H
                                    234 	.globl _CCAP2H
                                    235 	.globl _CCAP1H
                                    236 	.globl _CCAP0H
                                    237 	.globl _CKCON1
                                    238 	.globl _CKCON0
                                    239 	.globl _CKRL
                                    240 	.globl _AUXR1
                                    241 	.globl _AUXR
                                    242 	.globl _TH2
                                    243 	.globl _TL2
                                    244 	.globl _RCAP2H
                                    245 	.globl _RCAP2L
                                    246 	.globl _T2CON
                                    247 	.globl _target_ip
                                    248 	.globl _device_ip
                                    249 	.globl _target_mac
                                    250 	.globl _device_mac
                                    251 ;--------------------------------------------------------
                                    252 ; special function registers
                                    253 ;--------------------------------------------------------
                                    254 	.area RSEG    (ABS,DATA)
      000000                        255 	.org 0x0000
                           0000C8   256 _T2CON	=	0x00c8
                           0000CA   257 _RCAP2L	=	0x00ca
                           0000CB   258 _RCAP2H	=	0x00cb
                           0000CC   259 _TL2	=	0x00cc
                           0000CD   260 _TH2	=	0x00cd
                           00008E   261 _AUXR	=	0x008e
                           0000A2   262 _AUXR1	=	0x00a2
                           000097   263 _CKRL	=	0x0097
                           00008F   264 _CKCON0	=	0x008f
                           0000AF   265 _CKCON1	=	0x00af
                           0000FA   266 _CCAP0H	=	0x00fa
                           0000FB   267 _CCAP1H	=	0x00fb
                           0000FC   268 _CCAP2H	=	0x00fc
                           0000FD   269 _CCAP3H	=	0x00fd
                           0000FE   270 _CCAP4H	=	0x00fe
                           0000EA   271 _CCAP0L	=	0x00ea
                           0000EB   272 _CCAP1L	=	0x00eb
                           0000EC   273 _CCAP2L	=	0x00ec
                           0000ED   274 _CCAP3L	=	0x00ed
                           0000EE   275 _CCAP4L	=	0x00ee
                           0000DA   276 _CCAPM0	=	0x00da
                           0000DB   277 _CCAPM1	=	0x00db
                           0000DC   278 _CCAPM2	=	0x00dc
                           0000DD   279 _CCAPM3	=	0x00dd
                           0000DE   280 _CCAPM4	=	0x00de
                           0000D8   281 _CCON	=	0x00d8
                           0000F9   282 _CH	=	0x00f9
                           0000E9   283 _CL	=	0x00e9
                           0000D9   284 _CMOD	=	0x00d9
                           0000A8   285 _IEN0	=	0x00a8
                           0000B1   286 _IEN1	=	0x00b1
                           0000B8   287 _IPL0	=	0x00b8
                           0000B7   288 _IPH0	=	0x00b7
                           0000B2   289 _IPL1	=	0x00b2
                           0000B3   290 _IPH1	=	0x00b3
                           0000C0   291 _P4	=	0x00c0
                           0000E8   292 _P5	=	0x00e8
                           0000A6   293 _WDTRST	=	0x00a6
                           0000A7   294 _WDTPRG	=	0x00a7
                           0000A9   295 _SADDR	=	0x00a9
                           0000B9   296 _SADEN	=	0x00b9
                           0000C3   297 _SPCON	=	0x00c3
                           0000C4   298 _SPSTA	=	0x00c4
                           0000C5   299 _SPDAT	=	0x00c5
                           0000C9   300 _T2MOD	=	0x00c9
                           00009B   301 _BDRCON	=	0x009b
                           00009A   302 _BRL	=	0x009a
                           00009C   303 _KBLS	=	0x009c
                           00009D   304 _KBE	=	0x009d
                           00009E   305 _KBF	=	0x009e
                           0000D2   306 _EECON	=	0x00d2
                           0000E0   307 _ACC	=	0x00e0
                           0000F0   308 _B	=	0x00f0
                           000083   309 _DPH	=	0x0083
                           000083   310 _DP0H	=	0x0083
                           000082   311 _DPL	=	0x0082
                           000082   312 _DP0L	=	0x0082
                           0000A8   313 _IE	=	0x00a8
                           0000B8   314 _IP	=	0x00b8
                           000080   315 _P0	=	0x0080
                           000090   316 _P1	=	0x0090
                           0000A0   317 _P2	=	0x00a0
                           0000B0   318 _P3	=	0x00b0
                           000087   319 _PCON	=	0x0087
                           0000D0   320 _PSW	=	0x00d0
                           000099   321 _SBUF	=	0x0099
                           000099   322 _SBUF0	=	0x0099
                           000098   323 _SCON	=	0x0098
                           000081   324 _SP	=	0x0081
                           000088   325 _TCON	=	0x0088
                           00008C   326 _TH0	=	0x008c
                           00008D   327 _TH1	=	0x008d
                           00008A   328 _TL0	=	0x008a
                           00008B   329 _TL1	=	0x008b
                           000089   330 _TMOD	=	0x0089
                                    331 ;--------------------------------------------------------
                                    332 ; special function bits
                                    333 ;--------------------------------------------------------
                                    334 	.area RSEG    (ABS,DATA)
      000000                        335 	.org 0x0000
                           0000AD   336 _ET2	=	0x00ad
                           0000BD   337 _PT2	=	0x00bd
                           0000C8   338 _T2CON_0	=	0x00c8
                           0000C9   339 _T2CON_1	=	0x00c9
                           0000CA   340 _T2CON_2	=	0x00ca
                           0000CB   341 _T2CON_3	=	0x00cb
                           0000CC   342 _T2CON_4	=	0x00cc
                           0000CD   343 _T2CON_5	=	0x00cd
                           0000CE   344 _T2CON_6	=	0x00ce
                           0000CF   345 _T2CON_7	=	0x00cf
                           0000C8   346 _CP_RL2	=	0x00c8
                           0000C9   347 _C_T2	=	0x00c9
                           0000CA   348 _TR2	=	0x00ca
                           0000CB   349 _EXEN2	=	0x00cb
                           0000CC   350 _TCLK	=	0x00cc
                           0000CD   351 _RCLK	=	0x00cd
                           0000CE   352 _EXF2	=	0x00ce
                           0000CF   353 _TF2	=	0x00cf
                           0000DF   354 _CF	=	0x00df
                           0000DE   355 _CR	=	0x00de
                           0000DC   356 _CCF4	=	0x00dc
                           0000DB   357 _CCF3	=	0x00db
                           0000DA   358 _CCF2	=	0x00da
                           0000D9   359 _CCF1	=	0x00d9
                           0000D8   360 _CCF0	=	0x00d8
                           0000AE   361 _EC	=	0x00ae
                           0000BE   362 _PPCL	=	0x00be
                           0000BD   363 _PT2L	=	0x00bd
                           0000BC   364 _PSL	=	0x00bc
                           0000BB   365 _PT1L	=	0x00bb
                           0000BA   366 _PX1L	=	0x00ba
                           0000B9   367 _PT0L	=	0x00b9
                           0000B8   368 _PX0L	=	0x00b8
                           0000C0   369 _P4_0	=	0x00c0
                           0000C1   370 _P4_1	=	0x00c1
                           0000C2   371 _P4_2	=	0x00c2
                           0000C3   372 _P4_3	=	0x00c3
                           0000C4   373 _P4_4	=	0x00c4
                           0000C5   374 _P4_5	=	0x00c5
                           0000C6   375 _P4_6	=	0x00c6
                           0000C7   376 _P4_7	=	0x00c7
                           0000E8   377 _P5_0	=	0x00e8
                           0000E9   378 _P5_1	=	0x00e9
                           0000EA   379 _P5_2	=	0x00ea
                           0000EB   380 _P5_3	=	0x00eb
                           0000EC   381 _P5_4	=	0x00ec
                           0000ED   382 _P5_5	=	0x00ed
                           0000EE   383 _P5_6	=	0x00ee
                           0000EF   384 _P5_7	=	0x00ef
                           0000F0   385 _BREG_F0	=	0x00f0
                           0000F1   386 _BREG_F1	=	0x00f1
                           0000F2   387 _BREG_F2	=	0x00f2
                           0000F3   388 _BREG_F3	=	0x00f3
                           0000F4   389 _BREG_F4	=	0x00f4
                           0000F5   390 _BREG_F5	=	0x00f5
                           0000F6   391 _BREG_F6	=	0x00f6
                           0000F7   392 _BREG_F7	=	0x00f7
                           0000A8   393 _EX0	=	0x00a8
                           0000A9   394 _ET0	=	0x00a9
                           0000AA   395 _EX1	=	0x00aa
                           0000AB   396 _ET1	=	0x00ab
                           0000AC   397 _ES	=	0x00ac
                           0000AF   398 _EA	=	0x00af
                           0000B8   399 _PX0	=	0x00b8
                           0000B9   400 _PT0	=	0x00b9
                           0000BA   401 _PX1	=	0x00ba
                           0000BB   402 _PT1	=	0x00bb
                           0000BC   403 _PS	=	0x00bc
                           000080   404 _P0_0	=	0x0080
                           000081   405 _P0_1	=	0x0081
                           000082   406 _P0_2	=	0x0082
                           000083   407 _P0_3	=	0x0083
                           000084   408 _P0_4	=	0x0084
                           000085   409 _P0_5	=	0x0085
                           000086   410 _P0_6	=	0x0086
                           000087   411 _P0_7	=	0x0087
                           000090   412 _P1_0	=	0x0090
                           000091   413 _P1_1	=	0x0091
                           000092   414 _P1_2	=	0x0092
                           000093   415 _P1_3	=	0x0093
                           000094   416 _P1_4	=	0x0094
                           000095   417 _P1_5	=	0x0095
                           000096   418 _P1_6	=	0x0096
                           000097   419 _P1_7	=	0x0097
                           0000A0   420 _P2_0	=	0x00a0
                           0000A1   421 _P2_1	=	0x00a1
                           0000A2   422 _P2_2	=	0x00a2
                           0000A3   423 _P2_3	=	0x00a3
                           0000A4   424 _P2_4	=	0x00a4
                           0000A5   425 _P2_5	=	0x00a5
                           0000A6   426 _P2_6	=	0x00a6
                           0000A7   427 _P2_7	=	0x00a7
                           0000B0   428 _P3_0	=	0x00b0
                           0000B1   429 _P3_1	=	0x00b1
                           0000B2   430 _P3_2	=	0x00b2
                           0000B3   431 _P3_3	=	0x00b3
                           0000B4   432 _P3_4	=	0x00b4
                           0000B5   433 _P3_5	=	0x00b5
                           0000B6   434 _P3_6	=	0x00b6
                           0000B7   435 _P3_7	=	0x00b7
                           0000B0   436 _RXD	=	0x00b0
                           0000B0   437 _RXD0	=	0x00b0
                           0000B1   438 _TXD	=	0x00b1
                           0000B1   439 _TXD0	=	0x00b1
                           0000B2   440 _INT0	=	0x00b2
                           0000B3   441 _INT1	=	0x00b3
                           0000B4   442 _T0	=	0x00b4
                           0000B5   443 _T1	=	0x00b5
                           0000B6   444 _WR	=	0x00b6
                           0000B7   445 _RD	=	0x00b7
                           0000D0   446 _P	=	0x00d0
                           0000D1   447 _F1	=	0x00d1
                           0000D2   448 _OV	=	0x00d2
                           0000D3   449 _RS0	=	0x00d3
                           0000D4   450 _RS1	=	0x00d4
                           0000D5   451 _F0	=	0x00d5
                           0000D6   452 _AC	=	0x00d6
                           0000D7   453 _CY	=	0x00d7
                           000098   454 _RI	=	0x0098
                           000099   455 _TI	=	0x0099
                           00009A   456 _RB8	=	0x009a
                           00009B   457 _TB8	=	0x009b
                           00009C   458 _REN	=	0x009c
                           00009D   459 _SM2	=	0x009d
                           00009E   460 _SM1	=	0x009e
                           00009F   461 _SM0	=	0x009f
                           000088   462 _IT0	=	0x0088
                           000089   463 _IE0	=	0x0089
                           00008A   464 _IT1	=	0x008a
                           00008B   465 _IE1	=	0x008b
                           00008C   466 _TR0	=	0x008c
                           00008D   467 _TF0	=	0x008d
                           00008E   468 _TR1	=	0x008e
                           00008F   469 _TF1	=	0x008f
                                    470 ;--------------------------------------------------------
                                    471 ; overlayable register banks
                                    472 ;--------------------------------------------------------
                                    473 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        474 	.ds 8
                                    475 ;--------------------------------------------------------
                                    476 ; internal ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area DSEG    (DATA)
      000000                        479 _main_sloc0_1_0:
      000000                        480 	.ds 2
      000002                        481 _main_sloc1_1_0:
      000002                        482 	.ds 2
      000004                        483 _main_sloc2_1_0:
      000004                        484 	.ds 2
      000006                        485 _main_sloc3_1_0:
      000006                        486 	.ds 2
      000008                        487 _main_sloc4_1_0:
      000008                        488 	.ds 2
      00000A                        489 _main_sloc5_1_0:
      00000A                        490 	.ds 3
                                    491 ;--------------------------------------------------------
                                    492 ; overlayable items in internal ram
                                    493 ;--------------------------------------------------------
                                    494 	.area	OSEG    (OVR,DATA)
      000000                        495 _hex_to_int_sloc0_1_0:
      000000                        496 	.ds 3
      000003                        497 _hex_to_int_sloc1_1_0:
      000003                        498 	.ds 1
      000004                        499 _hex_to_int_sloc2_1_0:
      000004                        500 	.ds 2
                                    501 ;--------------------------------------------------------
                                    502 ; Stack segment in internal ram
                                    503 ;--------------------------------------------------------
                                    504 	.area SSEG
      000000                        505 __start__stack:
      000000                        506 	.ds	1
                                    507 
                                    508 ;--------------------------------------------------------
                                    509 ; indirectly addressable internal ram data
                                    510 ;--------------------------------------------------------
                                    511 	.area ISEG    (DATA)
                                    512 ;--------------------------------------------------------
                                    513 ; absolute internal ram data
                                    514 ;--------------------------------------------------------
                                    515 	.area IABS    (ABS,DATA)
                                    516 	.area IABS    (ABS,DATA)
                                    517 ;--------------------------------------------------------
                                    518 ; bit data
                                    519 ;--------------------------------------------------------
                                    520 	.area BSEG    (BIT)
                                    521 ;--------------------------------------------------------
                                    522 ; paged external ram data
                                    523 ;--------------------------------------------------------
                                    524 	.area PSEG    (PAG,XDATA)
                                    525 ;--------------------------------------------------------
                                    526 ; uninitialized external ram data
                                    527 ;--------------------------------------------------------
                                    528 	.area XSEG    (XDATA)
      000000                        529 _hex_to_int_str_10000_131:
      000000                        530 	.ds 3
      000003                        531 _hex_to_int_result_10000_132:
      000003                        532 	.ds 2
      000005                        533 _hex_to_int_ASCII_20000_133:
      000005                        534 	.ds 2
      000007                        535 _get_user_buffer_size_input_10000_138:
      000007                        536 	.ds 10
      000011                        537 _main_buffer_40003_151:
      000011                        538 	.ds 256
      000111                        539 _main_buffer_40003_156:
      000111                        540 	.ds 256
      000211                        541 _main_gNextPacketPtr_60001_172:
      000211                        542 	.ds 2
      000213                        543 _main_is_tcp_for_target_60004_177:
      000213                        544 	.ds 2
      000215                        545 _main_response_size_70004_181:
      000215                        546 	.ds 2
                                    547 ;--------------------------------------------------------
                                    548 ; absolute external ram data
                                    549 ;--------------------------------------------------------
                                    550 	.area XABS    (ABS,XDATA)
                                    551 ;--------------------------------------------------------
                                    552 ; initialized external ram data
                                    553 ;--------------------------------------------------------
                                    554 	.area XISEG   (XDATA)
      000000                        555 _device_mac::
      000000                        556 	.ds 6
      000006                        557 _target_mac::
      000006                        558 	.ds 6
      00000C                        559 _device_ip::
      00000C                        560 	.ds 4
      000010                        561 _target_ip::
      000010                        562 	.ds 4
                                    563 	.area HOME    (CODE)
                                    564 	.area GSINIT0 (CODE)
                                    565 	.area GSINIT1 (CODE)
                                    566 	.area GSINIT2 (CODE)
                                    567 	.area GSINIT3 (CODE)
                                    568 	.area GSINIT4 (CODE)
                                    569 	.area GSINIT5 (CODE)
                                    570 	.area GSINIT  (CODE)
                                    571 	.area GSFINAL (CODE)
                                    572 	.area CSEG    (CODE)
                                    573 ;--------------------------------------------------------
                                    574 ; interrupt vector
                                    575 ;--------------------------------------------------------
                                    576 	.area HOME    (CODE)
      000000                        577 __interrupt_vect:
      000000 02r00r00         [24]  578 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  579 	ljmp	_external_interrupt0_isr
                                    580 ;--------------------------------------------------------
                                    581 ; global & static initialisations
                                    582 ;--------------------------------------------------------
                                    583 	.area HOME    (CODE)
                                    584 	.area GSINIT  (CODE)
                                    585 	.area GSFINAL (CODE)
                                    586 	.area GSINIT  (CODE)
                                    587 	.globl __sdcc_gsinit_startup
                                    588 	.globl __sdcc_program_startup
                                    589 	.globl __start__stack
                                    590 	.globl __mcs51_genXINIT
                                    591 	.globl __mcs51_genXRAMCLEAR
                                    592 	.globl __mcs51_genRAMCLEAR
                                    593 ;------------------------------------------------------------
                                    594 ;Allocation info for local variables in function 'main'
                                    595 ;------------------------------------------------------------
                                    596 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    597 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    598 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    599 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    600 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    601 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    602 ;c                         Allocated with name '_main_c_20001_143'
                                    603 ;reg_bank                  Allocated with name '_main_reg_bank_40002_146'
                                    604 ;addr                      Allocated with name '_main_addr_40003_147'
                                    605 ;data                      Allocated with name '_main_data_40004_148'
                                    606 ;num_bytes                 Allocated with name '_main_num_bytes_40002_150'
                                    607 ;start_address             Allocated with name '_main_start_address_40003_151'
                                    608 ;buffer                    Allocated with name '_main_buffer_40003_151'
                                    609 ;i                         Allocated with name '_main_i_50003_152'
                                    610 ;num_bytes                 Allocated with name '_main_num_bytes_40002_155'
                                    611 ;start_address             Allocated with name '_main_start_address_40003_156'
                                    612 ;buffer                    Allocated with name '_main_buffer_40003_156'
                                    613 ;reg_bank                  Allocated with name '_main_reg_bank_40002_158'
                                    614 ;addr                      Allocated with name '_main_addr_40003_159'
                                    615 ;data                      Allocated with name '_main_data_40003_159'
                                    616 ;addr                      Allocated with name '_main_addr_40002_161'
                                    617 ;data                      Allocated with name '_main_data_40003_162'
                                    618 ;addr                      Allocated with name '_main_addr_40002_164'
                                    619 ;data                      Allocated with name '_main_data_40002_164'
                                    620 ;addr                      Allocated with name '_main_addr_40002_167'
                                    621 ;bank                      Allocated with name '_main_bank_40003_168'
                                    622 ;data                      Allocated with name '_main_data_40003_168'
                                    623 ;nextPacket                Allocated with name '_main_nextPacket_60001_172'
                                    624 ;byteCount                 Allocated with name '_main_byteCount_60001_172'
                                    625 ;status                    Allocated with name '_main_status_60001_172'
                                    626 ;gNextPacketPtr            Allocated with name '_main_gNextPacketPtr_60001_172'
                                    627 ;len                       Allocated with name '_main_len_60001_172'
                                    628 ;packet_data               Allocated with name '_main_packet_data_60002_175'
                                    629 ;packet_data_actual        Allocated with name '_main_packet_data_actual_60003_176'
                                    630 ;is_tcp_for_target         Allocated with name '_main_is_tcp_for_target_60004_177'
                                    631 ;response_size             Allocated with name '_main_response_size_70004_181'
                                    632 ;response                  Allocated with name '_main_response_70004_181'
                                    633 ;read_econ2                Allocated with name '_main_read_econ2_60005_185'
                                    634 ;i                         Allocated with name '_main_i_50001_188'
                                    635 ;read_econ2                Allocated with name '_main_read_econ2_40002_191'
                                    636 ;------------------------------------------------------------
                                    637 ;	main.c:198: static uint16_t gNextPacketPtr = RX_BUFFER_START;
      000000 90r02r11         [24]  638 	mov	dptr,#_main_gNextPacketPtr_60001_172
      000003 E4               [12]  639 	clr	a
      000004 F0               [24]  640 	movx	@dptr,a
      000005 A3               [24]  641 	inc	dptr
      000006 F0               [24]  642 	movx	@dptr,a
                                    643 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  644 	ljmp	__sdcc_program_startup
                                    645 ;--------------------------------------------------------
                                    646 ; Home
                                    647 ;--------------------------------------------------------
                                    648 	.area HOME    (CODE)
                                    649 	.area HOME    (CODE)
      000006                        650 __sdcc_program_startup:
      000006 02r02r3E         [24]  651 	ljmp	_main
                                    652 ;	return from main will return to caller
                                    653 ;--------------------------------------------------------
                                    654 ; code
                                    655 ;--------------------------------------------------------
                                    656 	.area CSEG    (CODE)
                                    657 ;------------------------------------------------------------
                                    658 ;Allocation info for local variables in function 'hex_to_int'
                                    659 ;------------------------------------------------------------
                                    660 ;str                       Allocated with name '_hex_to_int_str_10000_131'
                                    661 ;i                         Allocated with name '_hex_to_int_i_10000_132'
                                    662 ;result                    Allocated with name '_hex_to_int_result_10000_132'
                                    663 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_133'
                                    664 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    665 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    666 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    667 ;------------------------------------------------------------
                                    668 ;	main.c:26: int hex_to_int(char* str)
                                    669 ;	-----------------------------------------
                                    670 ;	 function hex_to_int
                                    671 ;	-----------------------------------------
      000000                        672 _hex_to_int:
                           000007   673 	ar7 = 0x07
                           000006   674 	ar6 = 0x06
                           000005   675 	ar5 = 0x05
                           000004   676 	ar4 = 0x04
                           000003   677 	ar3 = 0x03
                           000002   678 	ar2 = 0x02
                           000001   679 	ar1 = 0x01
                           000000   680 	ar0 = 0x00
      000000 AF F0            [24]  681 	mov	r7,b
      000002 AE 83            [24]  682 	mov	r6,dph
      000004 E5 82            [12]  683 	mov	a,dpl
      000006 90r00r00         [24]  684 	mov	dptr,#_hex_to_int_str_10000_131
      000009 F0               [24]  685 	movx	@dptr,a
      00000A EE               [12]  686 	mov	a,r6
      00000B A3               [24]  687 	inc	dptr
      00000C F0               [24]  688 	movx	@dptr,a
      00000D EF               [12]  689 	mov	a,r7
      00000E A3               [24]  690 	inc	dptr
      00000F F0               [24]  691 	movx	@dptr,a
                                    692 ;	main.c:29: int i = 0, result = 0;
      000010 90r00r03         [24]  693 	mov	dptr,#_hex_to_int_result_10000_132
      000013 E4               [12]  694 	clr	a
      000014 F0               [24]  695 	movx	@dptr,a
      000015 A3               [24]  696 	inc	dptr
      000016 F0               [24]  697 	movx	@dptr,a
                                    698 ;	main.c:30: while(str[i] != '\0')
      000017 90r00r00         [24]  699 	mov	dptr,#_hex_to_int_str_10000_131
      00001A E0               [24]  700 	movx	a,@dptr
      00001B FD               [12]  701 	mov	r5,a
      00001C A3               [24]  702 	inc	dptr
      00001D E0               [24]  703 	movx	a,@dptr
      00001E FE               [12]  704 	mov	r6,a
      00001F A3               [24]  705 	inc	dptr
      000020 E0               [24]  706 	movx	a,@dptr
      000021 FF               [12]  707 	mov	r7,a
      000022 8D 02            [24]  708 	mov	ar2,r5
      000024 8E 03            [24]  709 	mov	ar3,r6
      000026 8F 04            [24]  710 	mov	ar4,r7
      000028 8D*00            [24]  711 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  712 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  713 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  714 	mov	r0,#0x00
      000030 79 00            [12]  715 	mov	r1,#0x00
      000032                        716 00112$:
      000032 C0 02            [24]  717 	push	ar2
      000034 C0 03            [24]  718 	push	ar3
      000036 C0 04            [24]  719 	push	ar4
      000038 E8               [12]  720 	mov	a,r0
      000039 25*00            [12]  721 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  722 	mov	r2,a
      00003C E9               [12]  723 	mov	a,r1
      00003D 35*01            [12]  724 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  725 	mov	r3,a
      000040 AC*02            [24]  726 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  727 	mov	dpl,r2
      000044 8B 83            [24]  728 	mov	dph,r3
      000046 8C F0            [24]  729 	mov	b,r4
      000048 12r00r00         [24]  730 	lcall	__gptrget
      00004B F5*03            [12]  731 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  732 	pop	ar4
      00004F D0 03            [24]  733 	pop	ar3
      000051 D0 02            [24]  734 	pop	ar2
      000053 E5*03            [12]  735 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  736 	jnz	00166$
      000057 02r01rAE         [24]  737 	ljmp	00114$
      00005A                        738 00166$:
                                    739 ;	main.c:32: int ASCII = (int)str[i];
      00005A C0 02            [24]  740 	push	ar2
      00005C C0 03            [24]  741 	push	ar3
      00005E C0 04            [24]  742 	push	ar4
      000060 85*03*04         [24]  743 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  744 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  745 	mov	dptr,#_hex_to_int_ASCII_20000_133
      000069 E5*04            [12]  746 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  747 	movx	@dptr,a
      00006C E5*05            [12]  748 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  749 	inc	dptr
      00006F F0               [24]  750 	movx	@dptr,a
                                    751 ;	main.c:33: result *= 16;
      000070 90r00r03         [24]  752 	mov	dptr,#_hex_to_int_result_10000_132
      000073 E0               [24]  753 	movx	a,@dptr
      000074 FB               [12]  754 	mov	r3,a
      000075 A3               [24]  755 	inc	dptr
      000076 E0               [24]  756 	movx	a,@dptr
      000077 C4               [12]  757 	swap	a
      000078 54 F0            [12]  758 	anl	a,#0xf0
      00007A CB               [12]  759 	xch	a,r3
      00007B C4               [12]  760 	swap	a
      00007C CB               [12]  761 	xch	a,r3
      00007D 6B               [12]  762 	xrl	a,r3
      00007E CB               [12]  763 	xch	a,r3
      00007F 54 F0            [12]  764 	anl	a,#0xf0
      000081 CB               [12]  765 	xch	a,r3
      000082 6B               [12]  766 	xrl	a,r3
      000083 FC               [12]  767 	mov	r4,a
      000084 90r00r03         [24]  768 	mov	dptr,#_hex_to_int_result_10000_132
      000087 EB               [12]  769 	mov	a,r3
      000088 F0               [24]  770 	movx	@dptr,a
      000089 EC               [12]  771 	mov	a,r4
      00008A A3               [24]  772 	inc	dptr
      00008B F0               [24]  773 	movx	@dptr,a
                                    774 ;	main.c:34: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  775 	clr	c
      00008D E5*04            [12]  776 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  777 	subb	a,#0x30
      000091 E5*05            [12]  778 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  779 	xrl	a,#0x80
      000095 94 80            [12]  780 	subb	a,#0x80
      000097 D0 04            [24]  781 	pop	ar4
      000099 D0 03            [24]  782 	pop	ar3
      00009B D0 02            [24]  783 	pop	ar2
      00009D 40 3F            [24]  784 	jc	00109$
      00009F 74 39            [12]  785 	mov	a,#0x39
      0000A1 95*04            [12]  786 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  787 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  788 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  789 	xrl	b,#0x80
      0000AB 95 F0            [12]  790 	subb	a,b
      0000AD 40 2F            [24]  791 	jc	00109$
                                    792 ;	main.c:36: result += str[i] - 48;
      0000AF C0 02            [24]  793 	push	ar2
      0000B1 C0 03            [24]  794 	push	ar3
      0000B3 C0 04            [24]  795 	push	ar4
      0000B5 E5*04            [12]  796 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  797 	add	a,#0xd0
      0000B9 F5*04            [12]  798 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  799 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  800 	addc	a,#0xff
      0000BF F5*05            [12]  801 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  802 	mov	dptr,#_hex_to_int_result_10000_132
      0000C4 E0               [24]  803 	movx	a,@dptr
      0000C5 FA               [12]  804 	mov	r2,a
      0000C6 A3               [24]  805 	inc	dptr
      0000C7 E0               [24]  806 	movx	a,@dptr
      0000C8 FC               [12]  807 	mov	r4,a
      0000C9 90r00r03         [24]  808 	mov	dptr,#_hex_to_int_result_10000_132
      0000CC E5*04            [12]  809 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  810 	add	a, r2
      0000CF F0               [24]  811 	movx	@dptr,a
      0000D0 E5*05            [12]  812 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  813 	addc	a, r4
      0000D3 A3               [24]  814 	inc	dptr
      0000D4 F0               [24]  815 	movx	@dptr,a
      0000D5 D0 04            [24]  816 	pop	ar4
      0000D7 D0 03            [24]  817 	pop	ar3
      0000D9 D0 02            [24]  818 	pop	ar2
      0000DB 02r01rA6         [24]  819 	ljmp	00110$
      0000DE                        820 00109$:
                                    821 ;	main.c:38: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  822 	mov	dptr,#_hex_to_int_ASCII_20000_133
      0000E1 E0               [24]  823 	movx	a,@dptr
      0000E2 F5*04            [12]  824 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  825 	inc	dptr
      0000E5 E0               [24]  826 	movx	a,@dptr
      0000E6 F5*05            [12]  827 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  828 	clr	c
      0000E9 E5*04            [12]  829 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  830 	subb	a,#0x41
      0000ED E5*05            [12]  831 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  832 	xrl	a,#0x80
      0000F1 94 80            [12]  833 	subb	a,#0x80
      0000F3 40 4E            [24]  834 	jc	00105$
      0000F5 74 46            [12]  835 	mov	a,#0x46
      0000F7 95*04            [12]  836 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  837 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  838 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  839 	xrl	b,#0x80
      000101 95 F0            [12]  840 	subb	a,b
      000103 40 3E            [24]  841 	jc	00105$
                                    842 ;	main.c:40: result += str[i] - 55;
      000105 C0 05            [24]  843 	push	ar5
      000107 C0 06            [24]  844 	push	ar6
      000109 C0 07            [24]  845 	push	ar7
      00010B E8               [12]  846 	mov	a,r0
      00010C 2A               [12]  847 	add	a, r2
      00010D FD               [12]  848 	mov	r5,a
      00010E E9               [12]  849 	mov	a,r1
      00010F 3B               [12]  850 	addc	a, r3
      000110 FE               [12]  851 	mov	r6,a
      000111 8C 07            [24]  852 	mov	ar7,r4
      000113 8D 82            [24]  853 	mov	dpl,r5
      000115 8E 83            [24]  854 	mov	dph,r6
      000117 8F F0            [24]  855 	mov	b,r7
      000119 12r00r00         [24]  856 	lcall	__gptrget
      00011C 7F 00            [12]  857 	mov	r7,#0x00
      00011E 24 C9            [12]  858 	add	a,#0xc9
      000120 F5*04            [12]  859 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  860 	mov	a,r7
      000123 34 FF            [12]  861 	addc	a,#0xff
      000125 F5*05            [12]  862 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  863 	mov	dptr,#_hex_to_int_result_10000_132
      00012A E0               [24]  864 	movx	a,@dptr
      00012B FE               [12]  865 	mov	r6,a
      00012C A3               [24]  866 	inc	dptr
      00012D E0               [24]  867 	movx	a,@dptr
      00012E FF               [12]  868 	mov	r7,a
      00012F 90r00r03         [24]  869 	mov	dptr,#_hex_to_int_result_10000_132
      000132 E5*04            [12]  870 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  871 	add	a, r6
      000135 F0               [24]  872 	movx	@dptr,a
      000136 E5*05            [12]  873 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  874 	addc	a, r7
      000139 A3               [24]  875 	inc	dptr
      00013A F0               [24]  876 	movx	@dptr,a
      00013B D0 07            [24]  877 	pop	ar7
      00013D D0 06            [24]  878 	pop	ar6
      00013F D0 05            [24]  879 	pop	ar5
      000141 80 63            [24]  880 	sjmp	00110$
      000143                        881 00105$:
                                    882 ;	main.c:42: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  883 	mov	dptr,#_hex_to_int_ASCII_20000_133
      000146 E0               [24]  884 	movx	a,@dptr
      000147 F5*04            [12]  885 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  886 	inc	dptr
      00014A E0               [24]  887 	movx	a,@dptr
      00014B F5*05            [12]  888 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  889 	clr	c
      00014E E5*04            [12]  890 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  891 	subb	a,#0x61
      000152 E5*05            [12]  892 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  893 	xrl	a,#0x80
      000156 94 80            [12]  894 	subb	a,#0x80
      000158 40 4C            [24]  895 	jc	00110$
      00015A 74 66            [12]  896 	mov	a,#0x66
      00015C 95*04            [12]  897 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  898 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  899 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  900 	xrl	b,#0x80
      000166 95 F0            [12]  901 	subb	a,b
      000168 40 3C            [24]  902 	jc	00110$
                                    903 ;	main.c:44: result += str[i] - 87;
      00016A C0 02            [24]  904 	push	ar2
      00016C C0 03            [24]  905 	push	ar3
      00016E C0 04            [24]  906 	push	ar4
      000170 E8               [12]  907 	mov	a,r0
      000171 2D               [12]  908 	add	a, r5
      000172 FA               [12]  909 	mov	r2,a
      000173 E9               [12]  910 	mov	a,r1
      000174 3E               [12]  911 	addc	a, r6
      000175 FB               [12]  912 	mov	r3,a
      000176 8F 04            [24]  913 	mov	ar4,r7
      000178 8A 82            [24]  914 	mov	dpl,r2
      00017A 8B 83            [24]  915 	mov	dph,r3
      00017C 8C F0            [24]  916 	mov	b,r4
      00017E 12r00r00         [24]  917 	lcall	__gptrget
      000181 7C 00            [12]  918 	mov	r4,#0x00
      000183 24 A9            [12]  919 	add	a,#0xa9
      000185 F5*04            [12]  920 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  921 	mov	a,r4
      000188 34 FF            [12]  922 	addc	a,#0xff
      00018A F5*05            [12]  923 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  924 	mov	dptr,#_hex_to_int_result_10000_132
      00018F E0               [24]  925 	movx	a,@dptr
      000190 FB               [12]  926 	mov	r3,a
      000191 A3               [24]  927 	inc	dptr
      000192 E0               [24]  928 	movx	a,@dptr
      000193 FC               [12]  929 	mov	r4,a
      000194 90r00r03         [24]  930 	mov	dptr,#_hex_to_int_result_10000_132
      000197 E5*04            [12]  931 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  932 	add	a, r3
      00019A F0               [24]  933 	movx	@dptr,a
      00019B E5*05            [12]  934 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  935 	addc	a, r4
      00019E A3               [24]  936 	inc	dptr
      00019F F0               [24]  937 	movx	@dptr,a
                                    938 ;	main.c:48: return result;
      0001A0 D0 04            [24]  939 	pop	ar4
      0001A2 D0 03            [24]  940 	pop	ar3
      0001A4 D0 02            [24]  941 	pop	ar2
                                    942 ;	main.c:44: result += str[i] - 87;
      0001A6                        943 00110$:
                                    944 ;	main.c:46: i++;
      0001A6 08               [12]  945 	inc	r0
      0001A7 B8 00 01         [24]  946 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  947 	inc	r1
      0001AB                        948 00173$:
      0001AB 02r00r32         [24]  949 	ljmp	00112$
      0001AE                        950 00114$:
                                    951 ;	main.c:48: return result;
      0001AE 90r00r03         [24]  952 	mov	dptr,#_hex_to_int_result_10000_132
      0001B1 E0               [24]  953 	movx	a,@dptr
      0001B2 FE               [12]  954 	mov	r6,a
      0001B3 A3               [24]  955 	inc	dptr
      0001B4 E0               [24]  956 	movx	a,@dptr
                                    957 ;	main.c:50: }
      0001B5 8E 82            [24]  958 	mov	dpl,r6
      0001B7 F5 83            [12]  959 	mov	dph,a
      0001B9 22               [24]  960 	ret
                                    961 ;------------------------------------------------------------
                                    962 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    963 ;------------------------------------------------------------
                                    964 ;i                         Allocated with name '_get_user_buffer_size_i_10000_138'
                                    965 ;output                    Allocated with name '_get_user_buffer_size_output_10000_138'
                                    966 ;input                     Allocated with name '_get_user_buffer_size_input_10000_138'
                                    967 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_138'
                                    968 ;------------------------------------------------------------
                                    969 ;	main.c:53: int get_user_buffer_size(void)
                                    970 ;	-----------------------------------------
                                    971 ;	 function get_user_buffer_size
                                    972 ;	-----------------------------------------
      0001BA                        973 _get_user_buffer_size:
                                    974 ;	main.c:59: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  975 	mov	r6,#0x00
      0001BC 7F 00            [12]  976 	mov	r7,#0x00
      0001BE                        977 00103$:
      0001BE C0 07            [24]  978 	push	ar7
      0001C0 C0 06            [24]  979 	push	ar6
      0001C2 12r00r00         [24]  980 	lcall	_getchar
      0001C5 AC 82            [24]  981 	mov	r4, dpl
      0001C7 D0 06            [24]  982 	pop	ar6
      0001C9 D0 07            [24]  983 	pop	ar7
      0001CB BC 0A 02         [24]  984 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  985 	sjmp	00105$
      0001D0                        986 00133$:
      0001D0 BC 0D 02         [24]  987 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  988 	sjmp	00105$
      0001D5                        989 00134$:
      0001D5 C3               [12]  990 	clr	c
      0001D6 EE               [12]  991 	mov	a,r6
      0001D7 94 09            [12]  992 	subb	a,#0x09
      0001D9 EF               [12]  993 	mov	a,r7
      0001DA 64 80            [12]  994 	xrl	a,#0x80
      0001DC 94 80            [12]  995 	subb	a,#0x80
      0001DE 50 2A            [24]  996 	jnc	00105$
                                    997 ;	main.c:61: putchar(ch);
      0001E0 8C 03            [24]  998 	mov	ar3,r4
      0001E2 7D 00            [12]  999 	mov	r5,#0x00
      0001E4 8B 82            [24] 1000 	mov	dpl, r3
      0001E6 8D 83            [24] 1001 	mov	dph, r5
      0001E8 C0 07            [24] 1002 	push	ar7
      0001EA C0 06            [24] 1003 	push	ar6
      0001EC C0 04            [24] 1004 	push	ar4
      0001EE 12r00r00         [24] 1005 	lcall	_putchar
      0001F1 D0 04            [24] 1006 	pop	ar4
      0001F3 D0 06            [24] 1007 	pop	ar6
      0001F5 D0 07            [24] 1008 	pop	ar7
                                   1009 ;	main.c:62: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12] 1010 	mov	a,r6
      0001F8 24r07            [12] 1011 	add	a, #_get_user_buffer_size_input_10000_138
      0001FA F5 82            [12] 1012 	mov	dpl,a
      0001FC EF               [12] 1013 	mov	a,r7
      0001FD 34s00            [12] 1014 	addc	a, #(_get_user_buffer_size_input_10000_138 >> 8)
      0001FF F5 83            [12] 1015 	mov	dph,a
      000201 EC               [12] 1016 	mov	a,r4
      000202 F0               [24] 1017 	movx	@dptr,a
                                   1018 ;	main.c:63: i++;
      000203 0E               [12] 1019 	inc	r6
      000204 BE 00 B7         [24] 1020 	cjne	r6,#0x00,00103$
      000207 0F               [12] 1021 	inc	r7
      000208 80 B4            [24] 1022 	sjmp	00103$
      00020A                       1023 00105$:
                                   1024 ;	main.c:65: input[i] = '\0';
      00020A EE               [12] 1025 	mov	a,r6
      00020B 24r07            [12] 1026 	add	a, #_get_user_buffer_size_input_10000_138
      00020D F5 82            [12] 1027 	mov	dpl,a
      00020F EF               [12] 1028 	mov	a,r7
      000210 34s00            [12] 1029 	addc	a, #(_get_user_buffer_size_input_10000_138 >> 8)
      000212 F5 83            [12] 1030 	mov	dph,a
      000214 E4               [12] 1031 	clr	a
      000215 F0               [24] 1032 	movx	@dptr,a
                                   1033 ;	main.c:66: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24] 1034 	mov	dptr,#_get_user_buffer_size_input_10000_138
      000219 F5 F0            [12] 1035 	mov	b,a
      00021B 12r00r00         [24] 1036 	lcall	_hex_to_int
      00021E AE 82            [24] 1037 	mov	r6, dpl
      000220 AF 83            [24] 1038 	mov	r7, dph
                                   1039 ;	main.c:67: printf_tiny("\n\r");
      000222 C0 07            [24] 1040 	push	ar7
      000224 C0 06            [24] 1041 	push	ar6
      000226 74r00            [12] 1042 	mov	a,#___str_0
      000228 C0 E0            [24] 1043 	push	acc
      00022A 74s00            [12] 1044 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24] 1045 	push	acc
      00022E 12r00r00         [24] 1046 	lcall	_printf_tiny
      000231 15 81            [12] 1047 	dec	sp
      000233 15 81            [12] 1048 	dec	sp
      000235 D0 06            [24] 1049 	pop	ar6
      000237 D0 07            [24] 1050 	pop	ar7
                                   1051 ;	main.c:69: return output;
      000239 8E 82            [24] 1052 	mov	dpl, r6
      00023B 8F 83            [24] 1053 	mov	dph, r7
                                   1054 ;	main.c:70: }
      00023D 22               [24] 1055 	ret
                                   1056 ;------------------------------------------------------------
                                   1057 ;Allocation info for local variables in function 'main'
                                   1058 ;------------------------------------------------------------
                                   1059 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                   1060 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                   1061 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                   1062 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                   1063 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                   1064 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                   1065 ;c                         Allocated with name '_main_c_20001_143'
                                   1066 ;reg_bank                  Allocated with name '_main_reg_bank_40002_146'
                                   1067 ;addr                      Allocated with name '_main_addr_40003_147'
                                   1068 ;data                      Allocated with name '_main_data_40004_148'
                                   1069 ;num_bytes                 Allocated with name '_main_num_bytes_40002_150'
                                   1070 ;start_address             Allocated with name '_main_start_address_40003_151'
                                   1071 ;buffer                    Allocated with name '_main_buffer_40003_151'
                                   1072 ;i                         Allocated with name '_main_i_50003_152'
                                   1073 ;num_bytes                 Allocated with name '_main_num_bytes_40002_155'
                                   1074 ;start_address             Allocated with name '_main_start_address_40003_156'
                                   1075 ;buffer                    Allocated with name '_main_buffer_40003_156'
                                   1076 ;reg_bank                  Allocated with name '_main_reg_bank_40002_158'
                                   1077 ;addr                      Allocated with name '_main_addr_40003_159'
                                   1078 ;data                      Allocated with name '_main_data_40003_159'
                                   1079 ;addr                      Allocated with name '_main_addr_40002_161'
                                   1080 ;data                      Allocated with name '_main_data_40003_162'
                                   1081 ;addr                      Allocated with name '_main_addr_40002_164'
                                   1082 ;data                      Allocated with name '_main_data_40002_164'
                                   1083 ;addr                      Allocated with name '_main_addr_40002_167'
                                   1084 ;bank                      Allocated with name '_main_bank_40003_168'
                                   1085 ;data                      Allocated with name '_main_data_40003_168'
                                   1086 ;nextPacket                Allocated with name '_main_nextPacket_60001_172'
                                   1087 ;byteCount                 Allocated with name '_main_byteCount_60001_172'
                                   1088 ;status                    Allocated with name '_main_status_60001_172'
                                   1089 ;gNextPacketPtr            Allocated with name '_main_gNextPacketPtr_60001_172'
                                   1090 ;len                       Allocated with name '_main_len_60001_172'
                                   1091 ;packet_data               Allocated with name '_main_packet_data_60002_175'
                                   1092 ;packet_data_actual        Allocated with name '_main_packet_data_actual_60003_176'
                                   1093 ;is_tcp_for_target         Allocated with name '_main_is_tcp_for_target_60004_177'
                                   1094 ;response_size             Allocated with name '_main_response_size_70004_181'
                                   1095 ;response                  Allocated with name '_main_response_70004_181'
                                   1096 ;read_econ2                Allocated with name '_main_read_econ2_60005_185'
                                   1097 ;i                         Allocated with name '_main_i_50001_188'
                                   1098 ;read_econ2                Allocated with name '_main_read_econ2_40002_191'
                                   1099 ;------------------------------------------------------------
                                   1100 ;	main.c:72: void main(void)
                                   1101 ;	-----------------------------------------
                                   1102 ;	 function main
                                   1103 ;	-----------------------------------------
      00023E                       1104 _main:
                                   1105 ;	main.c:75: printf("SPI Operations on 8051\n\r");
      00023E 74r03            [12] 1106 	mov	a,#___str_1
      000240 C0 E0            [24] 1107 	push	acc
      000242 74s00            [12] 1108 	mov	a,#(___str_1 >> 8)
      000244 C0 E0            [24] 1109 	push	acc
      000246 74 80            [12] 1110 	mov	a,#0x80
      000248 C0 E0            [24] 1111 	push	acc
      00024A 12r00r00         [24] 1112 	lcall	_printf
      00024D 15 81            [12] 1113 	dec	sp
      00024F 15 81            [12] 1114 	dec	sp
      000251 15 81            [12] 1115 	dec	sp
                                   1116 ;	main.c:76: configure_SPI();
      000253 12r00r00         [24] 1117 	lcall	_configure_SPI
                                   1118 ;	main.c:78: enc_init(device_mac);
      000256 90r00r00         [24] 1119 	mov	dptr,#_device_mac
      000259 75 F0 00         [24] 1120 	mov	b, #0x00
      00025C 12r00r00         [24] 1121 	lcall	_enc_init
                                   1122 ;	main.c:80: while(1)
      00025F                       1123 00146$:
                                   1124 ;	main.c:82: printf("\n\rChoose an action: \n\r");
      00025F 74r1C            [12] 1125 	mov	a,#___str_2
      000261 C0 E0            [24] 1126 	push	acc
      000263 74s00            [12] 1127 	mov	a,#(___str_2 >> 8)
      000265 C0 E0            [24] 1128 	push	acc
      000267 74 80            [12] 1129 	mov	a,#0x80
      000269 C0 E0            [24] 1130 	push	acc
      00026B 12r00r00         [24] 1131 	lcall	_printf
      00026E 15 81            [12] 1132 	dec	sp
      000270 15 81            [12] 1133 	dec	sp
      000272 15 81            [12] 1134 	dec	sp
                                   1135 ;	main.c:83: printf("1 --> Control Write\n\r");
      000274 74r33            [12] 1136 	mov	a,#___str_3
      000276 C0 E0            [24] 1137 	push	acc
      000278 74s00            [12] 1138 	mov	a,#(___str_3 >> 8)
      00027A C0 E0            [24] 1139 	push	acc
      00027C 74 80            [12] 1140 	mov	a,#0x80
      00027E C0 E0            [24] 1141 	push	acc
      000280 12r00r00         [24] 1142 	lcall	_printf
      000283 15 81            [12] 1143 	dec	sp
      000285 15 81            [12] 1144 	dec	sp
      000287 15 81            [12] 1145 	dec	sp
                                   1146 ;	main.c:84: printf("2 --> Buffer Write\n\r");
      000289 74r49            [12] 1147 	mov	a,#___str_4
      00028B C0 E0            [24] 1148 	push	acc
      00028D 74s00            [12] 1149 	mov	a,#(___str_4 >> 8)
      00028F C0 E0            [24] 1150 	push	acc
      000291 74 80            [12] 1151 	mov	a,#0x80
      000293 C0 E0            [24] 1152 	push	acc
      000295 12r00r00         [24] 1153 	lcall	_printf
      000298 15 81            [12] 1154 	dec	sp
      00029A 15 81            [12] 1155 	dec	sp
      00029C 15 81            [12] 1156 	dec	sp
                                   1157 ;	main.c:85: printf("3 --> Buffer Read\n\r");
      00029E 74r5E            [12] 1158 	mov	a,#___str_5
      0002A0 C0 E0            [24] 1159 	push	acc
      0002A2 74s00            [12] 1160 	mov	a,#(___str_5 >> 8)
      0002A4 C0 E0            [24] 1161 	push	acc
      0002A6 74 80            [12] 1162 	mov	a,#0x80
      0002A8 C0 E0            [24] 1163 	push	acc
      0002AA 12r00r00         [24] 1164 	lcall	_printf
      0002AD 15 81            [12] 1165 	dec	sp
      0002AF 15 81            [12] 1166 	dec	sp
      0002B1 15 81            [12] 1167 	dec	sp
                                   1168 ;	main.c:86: printf("4 --> MAC Register Read\n\r");
      0002B3 74r72            [12] 1169 	mov	a,#___str_6
      0002B5 C0 E0            [24] 1170 	push	acc
      0002B7 74s00            [12] 1171 	mov	a,#(___str_6 >> 8)
      0002B9 C0 E0            [24] 1172 	push	acc
      0002BB 74 80            [12] 1173 	mov	a,#0x80
      0002BD C0 E0            [24] 1174 	push	acc
      0002BF 12r00r00         [24] 1175 	lcall	_printf
      0002C2 15 81            [12] 1176 	dec	sp
      0002C4 15 81            [12] 1177 	dec	sp
      0002C6 15 81            [12] 1178 	dec	sp
                                   1179 ;	main.c:87: printf("5 --> PHY SPI Write\n\r");
      0002C8 74r8C            [12] 1180 	mov	a,#___str_7
      0002CA C0 E0            [24] 1181 	push	acc
      0002CC 74s00            [12] 1182 	mov	a,#(___str_7 >> 8)
      0002CE C0 E0            [24] 1183 	push	acc
      0002D0 74 80            [12] 1184 	mov	a,#0x80
      0002D2 C0 E0            [24] 1185 	push	acc
      0002D4 12r00r00         [24] 1186 	lcall	_printf
      0002D7 15 81            [12] 1187 	dec	sp
      0002D9 15 81            [12] 1188 	dec	sp
      0002DB 15 81            [12] 1189 	dec	sp
                                   1190 ;	main.c:88: printf("6 --> PHY SPI Read\n\r");
      0002DD 74rA2            [12] 1191 	mov	a,#___str_8
      0002DF C0 E0            [24] 1192 	push	acc
      0002E1 74s00            [12] 1193 	mov	a,#(___str_8 >> 8)
      0002E3 C0 E0            [24] 1194 	push	acc
      0002E5 74 80            [12] 1195 	mov	a,#0x80
      0002E7 C0 E0            [24] 1196 	push	acc
      0002E9 12r00r00         [24] 1197 	lcall	_printf
      0002EC 15 81            [12] 1198 	dec	sp
      0002EE 15 81            [12] 1199 	dec	sp
      0002F0 15 81            [12] 1200 	dec	sp
                                   1201 ;	main.c:89: printf("7 --> ENC Reset\n\r");
      0002F2 74rB7            [12] 1202 	mov	a,#___str_9
      0002F4 C0 E0            [24] 1203 	push	acc
      0002F6 74s00            [12] 1204 	mov	a,#(___str_9 >> 8)
      0002F8 C0 E0            [24] 1205 	push	acc
      0002FA 74 80            [12] 1206 	mov	a,#0x80
      0002FC C0 E0            [24] 1207 	push	acc
      0002FE 12r00r00         [24] 1208 	lcall	_printf
      000301 15 81            [12] 1209 	dec	sp
      000303 15 81            [12] 1210 	dec	sp
      000305 15 81            [12] 1211 	dec	sp
                                   1212 ;	main.c:90: printf("8 --> Read ETH Register\n\r");
      000307 74rC9            [12] 1213 	mov	a,#___str_10
      000309 C0 E0            [24] 1214 	push	acc
      00030B 74s00            [12] 1215 	mov	a,#(___str_10 >> 8)
      00030D C0 E0            [24] 1216 	push	acc
      00030F 74 80            [12] 1217 	mov	a,#0x80
      000311 C0 E0            [24] 1218 	push	acc
      000313 12r00r00         [24] 1219 	lcall	_printf
      000316 15 81            [12] 1220 	dec	sp
      000318 15 81            [12] 1221 	dec	sp
      00031A 15 81            [12] 1222 	dec	sp
                                   1223 ;	main.c:91: printf("9 --> Display Menu\n\r");
      00031C 74rE3            [12] 1224 	mov	a,#___str_11
      00031E C0 E0            [24] 1225 	push	acc
      000320 74s00            [12] 1226 	mov	a,#(___str_11 >> 8)
      000322 C0 E0            [24] 1227 	push	acc
      000324 74 80            [12] 1228 	mov	a,#0x80
      000326 C0 E0            [24] 1229 	push	acc
      000328 12r00r00         [24] 1230 	lcall	_printf
      00032B 15 81            [12] 1231 	dec	sp
      00032D 15 81            [12] 1232 	dec	sp
      00032F 15 81            [12] 1233 	dec	sp
                                   1234 ;	main.c:92: printf("A --> Send ARP Request\n\r");
      000331 74rF8            [12] 1235 	mov	a,#___str_12
      000333 C0 E0            [24] 1236 	push	acc
      000335 74s00            [12] 1237 	mov	a,#(___str_12 >> 8)
      000337 C0 E0            [24] 1238 	push	acc
      000339 74 80            [12] 1239 	mov	a,#0x80
      00033B C0 E0            [24] 1240 	push	acc
      00033D 12r00r00         [24] 1241 	lcall	_printf
      000340 15 81            [12] 1242 	dec	sp
      000342 15 81            [12] 1243 	dec	sp
      000344 15 81            [12] 1244 	dec	sp
                                   1245 ;	main.c:93: printf("B --> Init RX buffers\n\r");
      000346 74r11            [12] 1246 	mov	a,#___str_13
      000348 C0 E0            [24] 1247 	push	acc
      00034A 74s01            [12] 1248 	mov	a,#(___str_13 >> 8)
      00034C C0 E0            [24] 1249 	push	acc
      00034E 74 80            [12] 1250 	mov	a,#0x80
      000350 C0 E0            [24] 1251 	push	acc
      000352 12r00r00         [24] 1252 	lcall	_printf
      000355 15 81            [12] 1253 	dec	sp
      000357 15 81            [12] 1254 	dec	sp
      000359 15 81            [12] 1255 	dec	sp
                                   1256 ;	main.c:94: printf("C --> Hard Reset(nRESET pin)\n\r");
      00035B 74r29            [12] 1257 	mov	a,#___str_14
      00035D C0 E0            [24] 1258 	push	acc
      00035F 74s01            [12] 1259 	mov	a,#(___str_14 >> 8)
      000361 C0 E0            [24] 1260 	push	acc
      000363 74 80            [12] 1261 	mov	a,#0x80
      000365 C0 E0            [24] 1262 	push	acc
      000367 12r00r00         [24] 1263 	lcall	_printf
      00036A 15 81            [12] 1264 	dec	sp
      00036C 15 81            [12] 1265 	dec	sp
      00036E 15 81            [12] 1266 	dec	sp
                                   1267 ;	main.c:95: printf("D --> Process TCP\n\r");
      000370 74r48            [12] 1268 	mov	a,#___str_15
      000372 C0 E0            [24] 1269 	push	acc
      000374 74s01            [12] 1270 	mov	a,#(___str_15 >> 8)
      000376 C0 E0            [24] 1271 	push	acc
      000378 74 80            [12] 1272 	mov	a,#0x80
      00037A C0 E0            [24] 1273 	push	acc
      00037C 12r00r00         [24] 1274 	lcall	_printf
      00037F 15 81            [12] 1275 	dec	sp
      000381 15 81            [12] 1276 	dec	sp
      000383 15 81            [12] 1277 	dec	sp
                                   1278 ;	main.c:96: printf("E --> Enable TX interrupt\n\r");
      000385 74r5C            [12] 1279 	mov	a,#___str_16
      000387 C0 E0            [24] 1280 	push	acc
      000389 74s01            [12] 1281 	mov	a,#(___str_16 >> 8)
      00038B C0 E0            [24] 1282 	push	acc
      00038D 74 80            [12] 1283 	mov	a,#0x80
      00038F C0 E0            [24] 1284 	push	acc
      000391 12r00r00         [24] 1285 	lcall	_printf
      000394 15 81            [12] 1286 	dec	sp
      000396 15 81            [12] 1287 	dec	sp
      000398 15 81            [12] 1288 	dec	sp
                                   1289 ;	main.c:97: printf("F --> Disabling TX interrupt\n\r");
      00039A 74r78            [12] 1290 	mov	a,#___str_17
      00039C C0 E0            [24] 1291 	push	acc
      00039E 74s01            [12] 1292 	mov	a,#(___str_17 >> 8)
      0003A0 C0 E0            [24] 1293 	push	acc
      0003A2 74 80            [12] 1294 	mov	a,#0x80
      0003A4 C0 E0            [24] 1295 	push	acc
      0003A6 12r00r00         [24] 1296 	lcall	_printf
      0003A9 15 81            [12] 1297 	dec	sp
      0003AB 15 81            [12] 1298 	dec	sp
      0003AD 15 81            [12] 1299 	dec	sp
                                   1300 ;	main.c:99: char c = getchar();
      0003AF 12r00r00         [24] 1301 	lcall	_getchar
      0003B2 AE 82            [24] 1302 	mov	r6, dpl
                                   1303 ;	main.c:100: putchar(c);
      0003B4 8E 05            [24] 1304 	mov	ar5,r6
      0003B6 7F 00            [12] 1305 	mov	r7,#0x00
      0003B8 8D 82            [24] 1306 	mov	dpl, r5
      0003BA 8F 83            [24] 1307 	mov	dph, r7
      0003BC C0 06            [24] 1308 	push	ar6
      0003BE 12r00r00         [24] 1309 	lcall	_putchar
                                   1310 ;	main.c:101: printf("\n\r");
      0003C1 74r00            [12] 1311 	mov	a,#___str_0
      0003C3 C0 E0            [24] 1312 	push	acc
      0003C5 74s00            [12] 1313 	mov	a,#(___str_0 >> 8)
      0003C7 C0 E0            [24] 1314 	push	acc
      0003C9 74 80            [12] 1315 	mov	a,#0x80
      0003CB C0 E0            [24] 1316 	push	acc
      0003CD 12r00r00         [24] 1317 	lcall	_printf
      0003D0 15 81            [12] 1318 	dec	sp
      0003D2 15 81            [12] 1319 	dec	sp
      0003D4 15 81            [12] 1320 	dec	sp
      0003D6 D0 06            [24] 1321 	pop	ar6
                                   1322 ;	main.c:103: switch(c)
      0003D8 BE 31 02         [24] 1323 	cjne	r6,#0x31,00344$
      0003DB 80 5D            [24] 1324 	sjmp	00101$
      0003DD                       1325 00344$:
      0003DD BE 32 03         [24] 1326 	cjne	r6,#0x32,00345$
      0003E0 02r04rA2         [24] 1327 	ljmp	00102$
      0003E3                       1328 00345$:
      0003E3 BE 33 03         [24] 1329 	cjne	r6,#0x33,00346$
      0003E6 02r05rA0         [24] 1330 	ljmp	00104$
      0003E9                       1331 00346$:
      0003E9 BE 34 03         [24] 1332 	cjne	r6,#0x34,00347$
      0003EC 02r05rFF         [24] 1333 	ljmp	00105$
      0003EF                       1334 00347$:
      0003EF BE 35 03         [24] 1335 	cjne	r6,#0x35,00348$
      0003F2 02r06r61         [24] 1336 	ljmp	00106$
      0003F5                       1337 00348$:
      0003F5 BE 36 03         [24] 1338 	cjne	r6,#0x36,00349$
      0003F8 02r06rCC         [24] 1339 	ljmp	00107$
      0003FB                       1340 00349$:
      0003FB BE 37 03         [24] 1341 	cjne	r6,#0x37,00350$
      0003FE 02r07r07         [24] 1342 	ljmp	00108$
      000401                       1343 00350$:
      000401 BE 38 03         [24] 1344 	cjne	r6,#0x38,00351$
      000404 02r07r22         [24] 1345 	ljmp	00109$
      000407                       1346 00351$:
      000407 BE 39 03         [24] 1347 	cjne	r6,#0x39,00352$
      00040A 02r07r84         [24] 1348 	ljmp	00110$
      00040D                       1349 00352$:
      00040D BE 41 03         [24] 1350 	cjne	r6,#0x41,00353$
      000410 02r08r44         [24] 1351 	ljmp	00111$
      000413                       1352 00353$:
      000413 BE 42 03         [24] 1353 	cjne	r6,#0x42,00354$
      000416 02r02r5F         [24] 1354 	ljmp	00146$
      000419                       1355 00354$:
      000419 BE 43 03         [24] 1356 	cjne	r6,#0x43,00355$
      00041C 02r0Cr1D         [24] 1357 	ljmp	00134$
      00041F                       1358 00355$:
      00041F BE 44 03         [24] 1359 	cjne	r6,#0x44,00356$
      000422 02r0Cr4F         [24] 1360 	ljmp	00136$
      000425                       1361 00356$:
      000425 BE 45 03         [24] 1362 	cjne	r6,#0x45,00357$
      000428 02r0Cr58         [24] 1363 	ljmp	00137$
      00042B                       1364 00357$:
      00042B BE 46 03         [24] 1365 	cjne	r6,#0x46,00358$
      00042E 02r0Cr93         [24] 1366 	ljmp	00138$
      000431                       1367 00358$:
      000431 BE 58 03         [24] 1368 	cjne	r6,#0x58,00359$
      000434 02r0CrB9         [24] 1369 	ljmp	00141$
      000437                       1370 00359$:
      000437 02r0CrBE         [24] 1371 	ljmp	00143$
                                   1372 ;	main.c:105: case '1': {
      00043A                       1373 00101$:
                                   1374 ;	main.c:106: printf("Enter the register bank to select:\n\r");
      00043A 74r97            [12] 1375 	mov	a,#___str_18
      00043C C0 E0            [24] 1376 	push	acc
      00043E 74s01            [12] 1377 	mov	a,#(___str_18 >> 8)
      000440 C0 E0            [24] 1378 	push	acc
      000442 74 80            [12] 1379 	mov	a,#0x80
      000444 C0 E0            [24] 1380 	push	acc
      000446 12r00r00         [24] 1381 	lcall	_printf
      000449 15 81            [12] 1382 	dec	sp
      00044B 15 81            [12] 1383 	dec	sp
      00044D 15 81            [12] 1384 	dec	sp
                                   1385 ;	main.c:107: uint8_t reg_bank = get_user_buffer_size();
      00044F 12r01rBA         [24] 1386 	lcall	_get_user_buffer_size
      000452 AE 82            [24] 1387 	mov	r6, dpl
                                   1388 ;	main.c:108: printf("Enter the address of the Control Register:\n\r");
      000454 C0 06            [24] 1389 	push	ar6
      000456 74rBC            [12] 1390 	mov	a,#___str_19
      000458 C0 E0            [24] 1391 	push	acc
      00045A 74s01            [12] 1392 	mov	a,#(___str_19 >> 8)
      00045C C0 E0            [24] 1393 	push	acc
      00045E 74 80            [12] 1394 	mov	a,#0x80
      000460 C0 E0            [24] 1395 	push	acc
      000462 12r00r00         [24] 1396 	lcall	_printf
      000465 15 81            [12] 1397 	dec	sp
      000467 15 81            [12] 1398 	dec	sp
      000469 15 81            [12] 1399 	dec	sp
                                   1400 ;	main.c:109: uint8_t addr = get_user_buffer_size();
      00046B 12r01rBA         [24] 1401 	lcall	_get_user_buffer_size
      00046E AD 82            [24] 1402 	mov	r5, dpl
                                   1403 ;	main.c:110: printf("Enter the data you want to write:\n\r");
      000470 C0 05            [24] 1404 	push	ar5
      000472 74rE9            [12] 1405 	mov	a,#___str_20
      000474 C0 E0            [24] 1406 	push	acc
      000476 74s01            [12] 1407 	mov	a,#(___str_20 >> 8)
      000478 C0 E0            [24] 1408 	push	acc
      00047A 74 80            [12] 1409 	mov	a,#0x80
      00047C C0 E0            [24] 1410 	push	acc
      00047E 12r00r00         [24] 1411 	lcall	_printf
      000481 15 81            [12] 1412 	dec	sp
      000483 15 81            [12] 1413 	dec	sp
      000485 15 81            [12] 1414 	dec	sp
                                   1415 ;	main.c:111: uint8_t data = get_user_buffer_size();
      000487 12r01rBA         [24] 1416 	lcall	_get_user_buffer_size
      00048A AC 82            [24] 1417 	mov	r4, dpl
      00048C D0 05            [24] 1418 	pop	ar5
      00048E D0 06            [24] 1419 	pop	ar6
                                   1420 ;	main.c:112: spi_control_write(reg_bank, addr, data);
      000490 90r00r00         [24] 1421 	mov	dptr,#_spi_control_write_PARM_2
      000493 ED               [12] 1422 	mov	a,r5
      000494 F0               [24] 1423 	movx	@dptr,a
      000495 90r00r00         [24] 1424 	mov	dptr,#_spi_control_write_PARM_3
      000498 EC               [12] 1425 	mov	a,r4
      000499 F0               [24] 1426 	movx	@dptr,a
      00049A 8E 82            [24] 1427 	mov	dpl, r6
      00049C 12r00r00         [24] 1428 	lcall	_spi_control_write
                                   1429 ;	main.c:113: break;
      00049F 02r02r5F         [24] 1430 	ljmp	00146$
                                   1431 ;	main.c:115: case '2': {
      0004A2                       1432 00102$:
                                   1433 ;	main.c:116: printf("Enter the number of bytes to write:\n\r");
      0004A2 74r0D            [12] 1434 	mov	a,#___str_21
      0004A4 C0 E0            [24] 1435 	push	acc
      0004A6 74s02            [12] 1436 	mov	a,#(___str_21 >> 8)
      0004A8 C0 E0            [24] 1437 	push	acc
      0004AA 74 80            [12] 1438 	mov	a,#0x80
      0004AC C0 E0            [24] 1439 	push	acc
      0004AE 12r00r00         [24] 1440 	lcall	_printf
      0004B1 15 81            [12] 1441 	dec	sp
      0004B3 15 81            [12] 1442 	dec	sp
      0004B5 15 81            [12] 1443 	dec	sp
                                   1444 ;	main.c:117: int num_bytes = get_user_buffer_size();
      0004B7 12r01rBA         [24] 1445 	lcall	_get_user_buffer_size
      0004BA AE 82            [24] 1446 	mov	r6, dpl
      0004BC AF 83            [24] 1447 	mov	r7, dph
                                   1448 ;	main.c:118: printf("Enter the starting address:\n\r");
      0004BE C0 07            [24] 1449 	push	ar7
      0004C0 C0 06            [24] 1450 	push	ar6
      0004C2 74r33            [12] 1451 	mov	a,#___str_22
      0004C4 C0 E0            [24] 1452 	push	acc
      0004C6 74s02            [12] 1453 	mov	a,#(___str_22 >> 8)
      0004C8 C0 E0            [24] 1454 	push	acc
      0004CA 74 80            [12] 1455 	mov	a,#0x80
      0004CC C0 E0            [24] 1456 	push	acc
      0004CE 12r00r00         [24] 1457 	lcall	_printf
      0004D1 15 81            [12] 1458 	dec	sp
      0004D3 15 81            [12] 1459 	dec	sp
      0004D5 15 81            [12] 1460 	dec	sp
                                   1461 ;	main.c:119: uint16_t start_address = get_user_buffer_size();
      0004D7 12r01rBA         [24] 1462 	lcall	_get_user_buffer_size
      0004DA AC 82            [24] 1463 	mov	r4, dpl
      0004DC AD 83            [24] 1464 	mov	r5, dph
      0004DE D0 06            [24] 1465 	pop	ar6
      0004E0 D0 07            [24] 1466 	pop	ar7
                                   1467 ;	main.c:121: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      0004E2 C0 07            [24] 1468 	push	ar7
      0004E4 C0 06            [24] 1469 	push	ar6
      0004E6 C0 05            [24] 1470 	push	ar5
      0004E8 C0 04            [24] 1471 	push	ar4
      0004EA C0 06            [24] 1472 	push	ar6
      0004EC C0 07            [24] 1473 	push	ar7
      0004EE 74r51            [12] 1474 	mov	a,#___str_23
      0004F0 C0 E0            [24] 1475 	push	acc
      0004F2 74s02            [12] 1476 	mov	a,#(___str_23 >> 8)
      0004F4 C0 E0            [24] 1477 	push	acc
      0004F6 74 80            [12] 1478 	mov	a,#0x80
      0004F8 C0 E0            [24] 1479 	push	acc
      0004FA 12r00r00         [24] 1480 	lcall	_printf
      0004FD E5 81            [12] 1481 	mov	a,sp
      0004FF 24 FB            [12] 1482 	add	a,#0xfb
      000501 F5 81            [12] 1483 	mov	sp,a
      000503 D0 04            [24] 1484 	pop	ar4
      000505 D0 05            [24] 1485 	pop	ar5
      000507 D0 06            [24] 1486 	pop	ar6
      000509 D0 07            [24] 1487 	pop	ar7
                                   1488 ;	main.c:122: for (int i = 0; i < num_bytes; i++) {
      00050B 7A 00            [12] 1489 	mov	r2,#0x00
      00050D 7B 00            [12] 1490 	mov	r3,#0x00
      00050F                       1491 00149$:
      00050F C3               [12] 1492 	clr	c
      000510 EA               [12] 1493 	mov	a,r2
      000511 9E               [12] 1494 	subb	a,r6
      000512 EB               [12] 1495 	mov	a,r3
      000513 64 80            [12] 1496 	xrl	a,#0x80
      000515 8F F0            [24] 1497 	mov	b,r7
      000517 63 F0 80         [24] 1498 	xrl	b,#0x80
      00051A 95 F0            [12] 1499 	subb	a,b
      00051C 50 63            [24] 1500 	jnc	00103$
                                   1501 ;	main.c:123: printf("Byte %d: ", i);
      00051E C0 04            [24] 1502 	push	ar4
      000520 C0 05            [24] 1503 	push	ar5
      000522 C0 07            [24] 1504 	push	ar7
      000524 C0 06            [24] 1505 	push	ar6
      000526 C0 05            [24] 1506 	push	ar5
      000528 C0 04            [24] 1507 	push	ar4
      00052A C0 03            [24] 1508 	push	ar3
      00052C C0 02            [24] 1509 	push	ar2
      00052E C0 02            [24] 1510 	push	ar2
      000530 C0 03            [24] 1511 	push	ar3
      000532 74r74            [12] 1512 	mov	a,#___str_24
      000534 C0 E0            [24] 1513 	push	acc
      000536 74s02            [12] 1514 	mov	a,#(___str_24 >> 8)
      000538 C0 E0            [24] 1515 	push	acc
      00053A 74 80            [12] 1516 	mov	a,#0x80
      00053C C0 E0            [24] 1517 	push	acc
      00053E 12r00r00         [24] 1518 	lcall	_printf
      000541 E5 81            [12] 1519 	mov	a,sp
      000543 24 FB            [12] 1520 	add	a,#0xfb
      000545 F5 81            [12] 1521 	mov	sp,a
      000547 D0 02            [24] 1522 	pop	ar2
      000549 D0 03            [24] 1523 	pop	ar3
      00054B D0 04            [24] 1524 	pop	ar4
      00054D D0 05            [24] 1525 	pop	ar5
                                   1526 ;	main.c:124: buffer[i] = get_user_buffer_size();
      00054F EA               [12] 1527 	mov	a,r2
      000550 24r11            [12] 1528 	add	a, #_main_buffer_40003_151
      000552 F8               [12] 1529 	mov	r0,a
      000553 EB               [12] 1530 	mov	a,r3
      000554 34s00            [12] 1531 	addc	a, #(_main_buffer_40003_151 >> 8)
      000556 F9               [12] 1532 	mov	r1,a
      000557 C0 03            [24] 1533 	push	ar3
      000559 C0 02            [24] 1534 	push	ar2
      00055B C0 01            [24] 1535 	push	ar1
      00055D C0 00            [24] 1536 	push	ar0
      00055F 12r01rBA         [24] 1537 	lcall	_get_user_buffer_size
      000562 AC 82            [24] 1538 	mov	r4, dpl
      000564 D0 00            [24] 1539 	pop	ar0
      000566 D0 01            [24] 1540 	pop	ar1
      000568 D0 02            [24] 1541 	pop	ar2
      00056A D0 03            [24] 1542 	pop	ar3
      00056C D0 06            [24] 1543 	pop	ar6
      00056E D0 07            [24] 1544 	pop	ar7
      000570 88 82            [24] 1545 	mov	dpl,r0
      000572 89 83            [24] 1546 	mov	dph,r1
      000574 EC               [12] 1547 	mov	a,r4
      000575 F0               [24] 1548 	movx	@dptr,a
                                   1549 ;	main.c:122: for (int i = 0; i < num_bytes; i++) {
      000576 0A               [12] 1550 	inc	r2
      000577 BA 00 01         [24] 1551 	cjne	r2,#0x00,00361$
      00057A 0B               [12] 1552 	inc	r3
      00057B                       1553 00361$:
      00057B D0 05            [24] 1554 	pop	ar5
      00057D D0 04            [24] 1555 	pop	ar4
      00057F 80 8E            [24] 1556 	sjmp	00149$
      000581                       1557 00103$:
                                   1558 ;	main.c:126: spi_buffer_write(num_bytes, start_address, buffer);
      000581 90r00r00         [24] 1559 	mov	dptr,#_spi_buffer_write_PARM_2
      000584 EC               [12] 1560 	mov	a,r4
      000585 F0               [24] 1561 	movx	@dptr,a
      000586 ED               [12] 1562 	mov	a,r5
      000587 A3               [24] 1563 	inc	dptr
      000588 F0               [24] 1564 	movx	@dptr,a
      000589 90r00r00         [24] 1565 	mov	dptr,#_spi_buffer_write_PARM_3
      00058C 74r11            [12] 1566 	mov	a,#_main_buffer_40003_151
      00058E F0               [24] 1567 	movx	@dptr,a
      00058F 74s00            [12] 1568 	mov	a,#(_main_buffer_40003_151 >> 8)
      000591 A3               [24] 1569 	inc	dptr
      000592 F0               [24] 1570 	movx	@dptr,a
      000593 E4               [12] 1571 	clr	a
      000594 A3               [24] 1572 	inc	dptr
      000595 F0               [24] 1573 	movx	@dptr,a
      000596 8E 82            [24] 1574 	mov	dpl, r6
      000598 8F 83            [24] 1575 	mov	dph, r7
      00059A 12r00r00         [24] 1576 	lcall	_spi_buffer_write
                                   1577 ;	main.c:127: break;
      00059D 02r02r5F         [24] 1578 	ljmp	00146$
                                   1579 ;	main.c:129: case '3': {
      0005A0                       1580 00104$:
                                   1581 ;	main.c:130: printf("Enter the number of bytes to read:\n\r");
      0005A0 74r7E            [12] 1582 	mov	a,#___str_25
      0005A2 C0 E0            [24] 1583 	push	acc
      0005A4 74s02            [12] 1584 	mov	a,#(___str_25 >> 8)
      0005A6 C0 E0            [24] 1585 	push	acc
      0005A8 74 80            [12] 1586 	mov	a,#0x80
      0005AA C0 E0            [24] 1587 	push	acc
      0005AC 12r00r00         [24] 1588 	lcall	_printf
      0005AF 15 81            [12] 1589 	dec	sp
      0005B1 15 81            [12] 1590 	dec	sp
      0005B3 15 81            [12] 1591 	dec	sp
                                   1592 ;	main.c:131: int num_bytes = get_user_buffer_size();
      0005B5 12r01rBA         [24] 1593 	lcall	_get_user_buffer_size
      0005B8 AE 82            [24] 1594 	mov	r6, dpl
      0005BA AF 83            [24] 1595 	mov	r7, dph
                                   1596 ;	main.c:132: printf("Enter the starting address:\n\r");
      0005BC C0 07            [24] 1597 	push	ar7
      0005BE C0 06            [24] 1598 	push	ar6
      0005C0 74r33            [12] 1599 	mov	a,#___str_22
      0005C2 C0 E0            [24] 1600 	push	acc
      0005C4 74s02            [12] 1601 	mov	a,#(___str_22 >> 8)
      0005C6 C0 E0            [24] 1602 	push	acc
      0005C8 74 80            [12] 1603 	mov	a,#0x80
      0005CA C0 E0            [24] 1604 	push	acc
      0005CC 12r00r00         [24] 1605 	lcall	_printf
      0005CF 15 81            [12] 1606 	dec	sp
      0005D1 15 81            [12] 1607 	dec	sp
      0005D3 15 81            [12] 1608 	dec	sp
                                   1609 ;	main.c:133: uint16_t start_address = get_user_buffer_size();
      0005D5 12r01rBA         [24] 1610 	lcall	_get_user_buffer_size
      0005D8 AC 82            [24] 1611 	mov	r4, dpl
      0005DA AD 83            [24] 1612 	mov	r5, dph
      0005DC D0 06            [24] 1613 	pop	ar6
      0005DE D0 07            [24] 1614 	pop	ar7
      0005E0 90r00r00         [24] 1615 	mov	dptr,#_spi_buffer_read_PARM_2
      0005E3 EC               [12] 1616 	mov	a,r4
      0005E4 F0               [24] 1617 	movx	@dptr,a
      0005E5 ED               [12] 1618 	mov	a,r5
      0005E6 A3               [24] 1619 	inc	dptr
      0005E7 F0               [24] 1620 	movx	@dptr,a
                                   1621 ;	main.c:135: spi_buffer_read(num_bytes, start_address, buffer);
      0005E8 90r00r00         [24] 1622 	mov	dptr,#_spi_buffer_read_PARM_3
      0005EB 74r11            [12] 1623 	mov	a,#_main_buffer_40003_156
      0005ED F0               [24] 1624 	movx	@dptr,a
      0005EE 74s01            [12] 1625 	mov	a,#(_main_buffer_40003_156 >> 8)
      0005F0 A3               [24] 1626 	inc	dptr
      0005F1 F0               [24] 1627 	movx	@dptr,a
      0005F2 E4               [12] 1628 	clr	a
      0005F3 A3               [24] 1629 	inc	dptr
      0005F4 F0               [24] 1630 	movx	@dptr,a
      0005F5 8E 82            [24] 1631 	mov	dpl, r6
      0005F7 8F 83            [24] 1632 	mov	dph, r7
      0005F9 12r00r00         [24] 1633 	lcall	_spi_buffer_read
                                   1634 ;	main.c:136: break;
      0005FC 02r02r5F         [24] 1635 	ljmp	00146$
                                   1636 ;	main.c:138: case '4': {
      0005FF                       1637 00105$:
                                   1638 ;	main.c:139: printf("Enter the MAC register bank to select:\n\r");
      0005FF 74rA3            [12] 1639 	mov	a,#___str_26
      000601 C0 E0            [24] 1640 	push	acc
      000603 74s02            [12] 1641 	mov	a,#(___str_26 >> 8)
      000605 C0 E0            [24] 1642 	push	acc
      000607 74 80            [12] 1643 	mov	a,#0x80
      000609 C0 E0            [24] 1644 	push	acc
      00060B 12r00r00         [24] 1645 	lcall	_printf
      00060E 15 81            [12] 1646 	dec	sp
      000610 15 81            [12] 1647 	dec	sp
      000612 15 81            [12] 1648 	dec	sp
                                   1649 ;	main.c:140: uint8_t reg_bank = get_user_buffer_size();
      000614 12r01rBA         [24] 1650 	lcall	_get_user_buffer_size
      000617 AE 82            [24] 1651 	mov	r6, dpl
                                   1652 ;	main.c:141: printf("Enter the address of the MAC Register:\n\r");
      000619 C0 06            [24] 1653 	push	ar6
      00061B 74rCC            [12] 1654 	mov	a,#___str_27
      00061D C0 E0            [24] 1655 	push	acc
      00061F 74s02            [12] 1656 	mov	a,#(___str_27 >> 8)
      000621 C0 E0            [24] 1657 	push	acc
      000623 74 80            [12] 1658 	mov	a,#0x80
      000625 C0 E0            [24] 1659 	push	acc
      000627 12r00r00         [24] 1660 	lcall	_printf
      00062A 15 81            [12] 1661 	dec	sp
      00062C 15 81            [12] 1662 	dec	sp
      00062E 15 81            [12] 1663 	dec	sp
                                   1664 ;	main.c:142: uint8_t addr = get_user_buffer_size();
      000630 12r01rBA         [24] 1665 	lcall	_get_user_buffer_size
      000633 AD 82            [24] 1666 	mov	r5, dpl
      000635 D0 06            [24] 1667 	pop	ar6
                                   1668 ;	main.c:143: uint8_t data = mac_spi_read(addr, reg_bank);
      000637 90r00r00         [24] 1669 	mov	dptr,#_mac_spi_read_PARM_2
      00063A EE               [12] 1670 	mov	a,r6
      00063B F0               [24] 1671 	movx	@dptr,a
      00063C 8D 82            [24] 1672 	mov	dpl, r5
      00063E 12r00r00         [24] 1673 	lcall	_mac_spi_read
      000641 AF 82            [24] 1674 	mov	r7, dpl
                                   1675 ;	main.c:144: printf("MAC Register Data: 0x%02X\n\r", data);
      000643 7E 00            [12] 1676 	mov	r6,#0x00
      000645 C0 07            [24] 1677 	push	ar7
      000647 C0 06            [24] 1678 	push	ar6
      000649 74rF5            [12] 1679 	mov	a,#___str_28
      00064B C0 E0            [24] 1680 	push	acc
      00064D 74s02            [12] 1681 	mov	a,#(___str_28 >> 8)
      00064F C0 E0            [24] 1682 	push	acc
      000651 74 80            [12] 1683 	mov	a,#0x80
      000653 C0 E0            [24] 1684 	push	acc
      000655 12r00r00         [24] 1685 	lcall	_printf
      000658 E5 81            [12] 1686 	mov	a,sp
      00065A 24 FB            [12] 1687 	add	a,#0xfb
      00065C F5 81            [12] 1688 	mov	sp,a
                                   1689 ;	main.c:145: break;
      00065E 02r02r5F         [24] 1690 	ljmp	00146$
                                   1691 ;	main.c:147: case '5': {
      000661                       1692 00106$:
                                   1693 ;	main.c:148: printf("Enter the PHY register address:\n\r");
      000661 74r11            [12] 1694 	mov	a,#___str_29
      000663 C0 E0            [24] 1695 	push	acc
      000665 74s03            [12] 1696 	mov	a,#(___str_29 >> 8)
      000667 C0 E0            [24] 1697 	push	acc
      000669 74 80            [12] 1698 	mov	a,#0x80
      00066B C0 E0            [24] 1699 	push	acc
      00066D 12r00r00         [24] 1700 	lcall	_printf
      000670 15 81            [12] 1701 	dec	sp
      000672 15 81            [12] 1702 	dec	sp
      000674 15 81            [12] 1703 	dec	sp
                                   1704 ;	main.c:149: uint8_t addr = get_user_buffer_size();
      000676 12r01rBA         [24] 1705 	lcall	_get_user_buffer_size
      000679 AE 82            [24] 1706 	mov	r6, dpl
                                   1707 ;	main.c:150: printf("Enter the 16-bit data to write:\n\r");
      00067B C0 06            [24] 1708 	push	ar6
      00067D 74r33            [12] 1709 	mov	a,#___str_30
      00067F C0 E0            [24] 1710 	push	acc
      000681 74s03            [12] 1711 	mov	a,#(___str_30 >> 8)
      000683 C0 E0            [24] 1712 	push	acc
      000685 74 80            [12] 1713 	mov	a,#0x80
      000687 C0 E0            [24] 1714 	push	acc
      000689 12r00r00         [24] 1715 	lcall	_printf
      00068C 15 81            [12] 1716 	dec	sp
      00068E 15 81            [12] 1717 	dec	sp
      000690 15 81            [12] 1718 	dec	sp
                                   1719 ;	main.c:151: uint16_t data = get_user_buffer_size();
      000692 12r01rBA         [24] 1720 	lcall	_get_user_buffer_size
      000695 AD 82            [24] 1721 	mov	r5, dpl
      000697 AF 83            [24] 1722 	mov	r7, dph
      000699 D0 06            [24] 1723 	pop	ar6
                                   1724 ;	main.c:152: phy_spi_write(addr, data);
      00069B 90r00r00         [24] 1725 	mov	dptr,#_phy_spi_write_PARM_2
      00069E ED               [12] 1726 	mov	a,r5
      00069F F0               [24] 1727 	movx	@dptr,a
      0006A0 EF               [12] 1728 	mov	a,r7
      0006A1 A3               [24] 1729 	inc	dptr
      0006A2 F0               [24] 1730 	movx	@dptr,a
      0006A3 8E 82            [24] 1731 	mov	dpl, r6
      0006A5 C0 07            [24] 1732 	push	ar7
      0006A7 C0 05            [24] 1733 	push	ar5
      0006A9 12r00r00         [24] 1734 	lcall	_phy_spi_write
      0006AC D0 05            [24] 1735 	pop	ar5
      0006AE D0 07            [24] 1736 	pop	ar7
                                   1737 ;	main.c:153: printf("PHY Write Data: 0x%04X\n\r", data);
      0006B0 C0 05            [24] 1738 	push	ar5
      0006B2 C0 07            [24] 1739 	push	ar7
      0006B4 74r55            [12] 1740 	mov	a,#___str_31
      0006B6 C0 E0            [24] 1741 	push	acc
      0006B8 74s03            [12] 1742 	mov	a,#(___str_31 >> 8)
      0006BA C0 E0            [24] 1743 	push	acc
      0006BC 74 80            [12] 1744 	mov	a,#0x80
      0006BE C0 E0            [24] 1745 	push	acc
      0006C0 12r00r00         [24] 1746 	lcall	_printf
      0006C3 E5 81            [12] 1747 	mov	a,sp
      0006C5 24 FB            [12] 1748 	add	a,#0xfb
      0006C7 F5 81            [12] 1749 	mov	sp,a
                                   1750 ;	main.c:154: break;
      0006C9 02r02r5F         [24] 1751 	ljmp	00146$
                                   1752 ;	main.c:156: case '6': {
      0006CC                       1753 00107$:
                                   1754 ;	main.c:157: printf("Enter the PHY register address to read:\n\r");
      0006CC 74r6E            [12] 1755 	mov	a,#___str_32
      0006CE C0 E0            [24] 1756 	push	acc
      0006D0 74s03            [12] 1757 	mov	a,#(___str_32 >> 8)
      0006D2 C0 E0            [24] 1758 	push	acc
      0006D4 74 80            [12] 1759 	mov	a,#0x80
      0006D6 C0 E0            [24] 1760 	push	acc
      0006D8 12r00r00         [24] 1761 	lcall	_printf
      0006DB 15 81            [12] 1762 	dec	sp
      0006DD 15 81            [12] 1763 	dec	sp
      0006DF 15 81            [12] 1764 	dec	sp
                                   1765 ;	main.c:158: uint8_t addr = get_user_buffer_size();
      0006E1 12r01rBA         [24] 1766 	lcall	_get_user_buffer_size
                                   1767 ;	main.c:159: uint16_t data = phy_spi_read(addr);
      0006E4 12r00r00         [24] 1768 	lcall	_phy_spi_read
      0006E7 AE 82            [24] 1769 	mov	r6, dpl
      0006E9 AF 83            [24] 1770 	mov	r7, dph
                                   1771 ;	main.c:160: printf("PHY Read Data: 0x%04X\n\r", data);
      0006EB C0 06            [24] 1772 	push	ar6
      0006ED C0 07            [24] 1773 	push	ar7
      0006EF 74r98            [12] 1774 	mov	a,#___str_33
      0006F1 C0 E0            [24] 1775 	push	acc
      0006F3 74s03            [12] 1776 	mov	a,#(___str_33 >> 8)
      0006F5 C0 E0            [24] 1777 	push	acc
      0006F7 74 80            [12] 1778 	mov	a,#0x80
      0006F9 C0 E0            [24] 1779 	push	acc
      0006FB 12r00r00         [24] 1780 	lcall	_printf
      0006FE E5 81            [12] 1781 	mov	a,sp
      000700 24 FB            [12] 1782 	add	a,#0xfb
      000702 F5 81            [12] 1783 	mov	sp,a
                                   1784 ;	main.c:161: break;
      000704 02r02r5F         [24] 1785 	ljmp	00146$
                                   1786 ;	main.c:163: case '7': {
      000707                       1787 00108$:
                                   1788 ;	main.c:164: printf("Resetting ENC28J60...\n\r");
      000707 74rB0            [12] 1789 	mov	a,#___str_34
      000709 C0 E0            [24] 1790 	push	acc
      00070B 74s03            [12] 1791 	mov	a,#(___str_34 >> 8)
      00070D C0 E0            [24] 1792 	push	acc
      00070F 74 80            [12] 1793 	mov	a,#0x80
      000711 C0 E0            [24] 1794 	push	acc
      000713 12r00r00         [24] 1795 	lcall	_printf
      000716 15 81            [12] 1796 	dec	sp
      000718 15 81            [12] 1797 	dec	sp
      00071A 15 81            [12] 1798 	dec	sp
                                   1799 ;	main.c:165: enc_reset();
      00071C 12r00r00         [24] 1800 	lcall	_enc_reset
                                   1801 ;	main.c:166: break;
      00071F 02r02r5F         [24] 1802 	ljmp	00146$
                                   1803 ;	main.c:168: case '8': {
      000722                       1804 00109$:
                                   1805 ;	main.c:169: printf("Enter the ETH register address to read:\n\r");
      000722 74rC8            [12] 1806 	mov	a,#___str_35
      000724 C0 E0            [24] 1807 	push	acc
      000726 74s03            [12] 1808 	mov	a,#(___str_35 >> 8)
      000728 C0 E0            [24] 1809 	push	acc
      00072A 74 80            [12] 1810 	mov	a,#0x80
      00072C C0 E0            [24] 1811 	push	acc
      00072E 12r00r00         [24] 1812 	lcall	_printf
      000731 15 81            [12] 1813 	dec	sp
      000733 15 81            [12] 1814 	dec	sp
      000735 15 81            [12] 1815 	dec	sp
                                   1816 ;	main.c:170: uint8_t addr = get_user_buffer_size();
      000737 12r01rBA         [24] 1817 	lcall	_get_user_buffer_size
      00073A AE 82            [24] 1818 	mov	r6, dpl
                                   1819 ;	main.c:171: printf("Enter the bank (0 or 1):\n\r");
      00073C C0 06            [24] 1820 	push	ar6
      00073E 74rF2            [12] 1821 	mov	a,#___str_36
      000740 C0 E0            [24] 1822 	push	acc
      000742 74s03            [12] 1823 	mov	a,#(___str_36 >> 8)
      000744 C0 E0            [24] 1824 	push	acc
      000746 74 80            [12] 1825 	mov	a,#0x80
      000748 C0 E0            [24] 1826 	push	acc
      00074A 12r00r00         [24] 1827 	lcall	_printf
      00074D 15 81            [12] 1828 	dec	sp
      00074F 15 81            [12] 1829 	dec	sp
      000751 15 81            [12] 1830 	dec	sp
                                   1831 ;	main.c:172: uint8_t bank = get_user_buffer_size();
      000753 12r01rBA         [24] 1832 	lcall	_get_user_buffer_size
      000756 AD 82            [24] 1833 	mov	r5, dpl
      000758 D0 06            [24] 1834 	pop	ar6
      00075A 90r00r00         [24] 1835 	mov	dptr,#_eth_spi_read_PARM_2
      00075D ED               [12] 1836 	mov	a,r5
      00075E F0               [24] 1837 	movx	@dptr,a
                                   1838 ;	main.c:173: uint8_t data = eth_spi_read(addr, bank);
      00075F 8E 82            [24] 1839 	mov	dpl, r6
      000761 12r00r00         [24] 1840 	lcall	_eth_spi_read
      000764 AF 82            [24] 1841 	mov	r7, dpl
                                   1842 ;	main.c:174: printf("ETH Register Data: 0x%02X\n\r", data);
      000766 7E 00            [12] 1843 	mov	r6,#0x00
      000768 C0 07            [24] 1844 	push	ar7
      00076A C0 06            [24] 1845 	push	ar6
      00076C 74r0D            [12] 1846 	mov	a,#___str_37
      00076E C0 E0            [24] 1847 	push	acc
      000770 74s04            [12] 1848 	mov	a,#(___str_37 >> 8)
      000772 C0 E0            [24] 1849 	push	acc
      000774 74 80            [12] 1850 	mov	a,#0x80
      000776 C0 E0            [24] 1851 	push	acc
      000778 12r00r00         [24] 1852 	lcall	_printf
      00077B E5 81            [12] 1853 	mov	a,sp
      00077D 24 FB            [12] 1854 	add	a,#0xfb
      00077F F5 81            [12] 1855 	mov	sp,a
                                   1856 ;	main.c:175: break;
      000781 02r02r5F         [24] 1857 	ljmp	00146$
                                   1858 ;	main.c:177: case '9': {
      000784                       1859 00110$:
                                   1860 ;	main.c:178: printf("\n\rChoose an action: \n\r");
      000784 74r1C            [12] 1861 	mov	a,#___str_2
      000786 C0 E0            [24] 1862 	push	acc
      000788 74s00            [12] 1863 	mov	a,#(___str_2 >> 8)
      00078A C0 E0            [24] 1864 	push	acc
      00078C 74 80            [12] 1865 	mov	a,#0x80
      00078E C0 E0            [24] 1866 	push	acc
      000790 12r00r00         [24] 1867 	lcall	_printf
      000793 15 81            [12] 1868 	dec	sp
      000795 15 81            [12] 1869 	dec	sp
      000797 15 81            [12] 1870 	dec	sp
                                   1871 ;	main.c:179: printf("1 --> Control Write\n\r");
      000799 74r33            [12] 1872 	mov	a,#___str_3
      00079B C0 E0            [24] 1873 	push	acc
      00079D 74s00            [12] 1874 	mov	a,#(___str_3 >> 8)
      00079F C0 E0            [24] 1875 	push	acc
      0007A1 74 80            [12] 1876 	mov	a,#0x80
      0007A3 C0 E0            [24] 1877 	push	acc
      0007A5 12r00r00         [24] 1878 	lcall	_printf
      0007A8 15 81            [12] 1879 	dec	sp
      0007AA 15 81            [12] 1880 	dec	sp
      0007AC 15 81            [12] 1881 	dec	sp
                                   1882 ;	main.c:180: printf("2 --> Buffer Write\n\r");
      0007AE 74r49            [12] 1883 	mov	a,#___str_4
      0007B0 C0 E0            [24] 1884 	push	acc
      0007B2 74s00            [12] 1885 	mov	a,#(___str_4 >> 8)
      0007B4 C0 E0            [24] 1886 	push	acc
      0007B6 74 80            [12] 1887 	mov	a,#0x80
      0007B8 C0 E0            [24] 1888 	push	acc
      0007BA 12r00r00         [24] 1889 	lcall	_printf
      0007BD 15 81            [12] 1890 	dec	sp
      0007BF 15 81            [12] 1891 	dec	sp
      0007C1 15 81            [12] 1892 	dec	sp
                                   1893 ;	main.c:181: printf("3 --> Buffer Read\n\r");
      0007C3 74r5E            [12] 1894 	mov	a,#___str_5
      0007C5 C0 E0            [24] 1895 	push	acc
      0007C7 74s00            [12] 1896 	mov	a,#(___str_5 >> 8)
      0007C9 C0 E0            [24] 1897 	push	acc
      0007CB 74 80            [12] 1898 	mov	a,#0x80
      0007CD C0 E0            [24] 1899 	push	acc
      0007CF 12r00r00         [24] 1900 	lcall	_printf
      0007D2 15 81            [12] 1901 	dec	sp
      0007D4 15 81            [12] 1902 	dec	sp
      0007D6 15 81            [12] 1903 	dec	sp
                                   1904 ;	main.c:182: printf("4 --> MAC Register Read\n\r");
      0007D8 74r72            [12] 1905 	mov	a,#___str_6
      0007DA C0 E0            [24] 1906 	push	acc
      0007DC 74s00            [12] 1907 	mov	a,#(___str_6 >> 8)
      0007DE C0 E0            [24] 1908 	push	acc
      0007E0 74 80            [12] 1909 	mov	a,#0x80
      0007E2 C0 E0            [24] 1910 	push	acc
      0007E4 12r00r00         [24] 1911 	lcall	_printf
      0007E7 15 81            [12] 1912 	dec	sp
      0007E9 15 81            [12] 1913 	dec	sp
      0007EB 15 81            [12] 1914 	dec	sp
                                   1915 ;	main.c:183: printf("5 --> PHY SPI Write\n\r");
      0007ED 74r8C            [12] 1916 	mov	a,#___str_7
      0007EF C0 E0            [24] 1917 	push	acc
      0007F1 74s00            [12] 1918 	mov	a,#(___str_7 >> 8)
      0007F3 C0 E0            [24] 1919 	push	acc
      0007F5 74 80            [12] 1920 	mov	a,#0x80
      0007F7 C0 E0            [24] 1921 	push	acc
      0007F9 12r00r00         [24] 1922 	lcall	_printf
      0007FC 15 81            [12] 1923 	dec	sp
      0007FE 15 81            [12] 1924 	dec	sp
      000800 15 81            [12] 1925 	dec	sp
                                   1926 ;	main.c:184: printf("6 --> PHY SPI Read\n\r");
      000802 74rA2            [12] 1927 	mov	a,#___str_8
      000804 C0 E0            [24] 1928 	push	acc
      000806 74s00            [12] 1929 	mov	a,#(___str_8 >> 8)
      000808 C0 E0            [24] 1930 	push	acc
      00080A 74 80            [12] 1931 	mov	a,#0x80
      00080C C0 E0            [24] 1932 	push	acc
      00080E 12r00r00         [24] 1933 	lcall	_printf
      000811 15 81            [12] 1934 	dec	sp
      000813 15 81            [12] 1935 	dec	sp
      000815 15 81            [12] 1936 	dec	sp
                                   1937 ;	main.c:185: printf("7 --> ENC Reset\n\r");
      000817 74rB7            [12] 1938 	mov	a,#___str_9
      000819 C0 E0            [24] 1939 	push	acc
      00081B 74s00            [12] 1940 	mov	a,#(___str_9 >> 8)
      00081D C0 E0            [24] 1941 	push	acc
      00081F 74 80            [12] 1942 	mov	a,#0x80
      000821 C0 E0            [24] 1943 	push	acc
      000823 12r00r00         [24] 1944 	lcall	_printf
      000826 15 81            [12] 1945 	dec	sp
      000828 15 81            [12] 1946 	dec	sp
      00082A 15 81            [12] 1947 	dec	sp
                                   1948 ;	main.c:186: printf("8 --> Read ETH Register\n\r");
      00082C 74rC9            [12] 1949 	mov	a,#___str_10
      00082E C0 E0            [24] 1950 	push	acc
      000830 74s00            [12] 1951 	mov	a,#(___str_10 >> 8)
      000832 C0 E0            [24] 1952 	push	acc
      000834 74 80            [12] 1953 	mov	a,#0x80
      000836 C0 E0            [24] 1954 	push	acc
      000838 12r00r00         [24] 1955 	lcall	_printf
      00083B 15 81            [12] 1956 	dec	sp
      00083D 15 81            [12] 1957 	dec	sp
      00083F 15 81            [12] 1958 	dec	sp
                                   1959 ;	main.c:187: break;
      000841 02r02r5F         [24] 1960 	ljmp	00146$
                                   1961 ;	main.c:189: case 'A':{
      000844                       1962 00111$:
                                   1963 ;	main.c:190: send_arp_request();
      000844 12r00r00         [24] 1964 	lcall	_send_arp_request
                                   1965 ;	main.c:191: while(1)
      000847                       1966 00131$:
                                   1967 ;	main.c:193: if(ENC_pkt_count() > 0)
      000847 12r00r00         [24] 1968 	lcall	_ENC_pkt_count
      00084A E5 82            [12] 1969 	mov	a, dpl
      00084C 60 F9            [24] 1970 	jz	00131$
                                   1971 ;	main.c:200: if (gNextPacketPtr == 0)
      00084E 90r02r11         [24] 1972 	mov	dptr,#_main_gNextPacketPtr_60001_172
      000851 E0               [24] 1973 	movx	a,@dptr
      000852 FE               [12] 1974 	mov	r6,a
      000853 A3               [24] 1975 	inc	dptr
      000854 E0               [24] 1976 	movx	a,@dptr
      000855 FF               [12] 1977 	mov	r7,a
      000856 90r02r11         [24] 1978 	mov	dptr,#_main_gNextPacketPtr_60001_172
      000859 E0               [24] 1979 	movx	a,@dptr
      00085A F5 F0            [12] 1980 	mov	b,a
      00085C A3               [24] 1981 	inc	dptr
      00085D E0               [24] 1982 	movx	a,@dptr
      00085E 45 F0            [12] 1983 	orl	a,b
      000860 70 08            [24] 1984 	jnz	00113$
                                   1985 ;	main.c:202: update_ERXRDPT(RX_BUFFER_END);
      000862 90 0B FF         [24] 1986 	mov	dptr,#0x0bff
      000865 12r00r00         [24] 1987 	lcall	_update_ERXRDPT
      000868 80 0C            [24] 1988 	sjmp	00114$
      00086A                       1989 00113$:
                                   1990 ;	main.c:206: update_ERXRDPT(gNextPacketPtr - 1);
      00086A 1E               [12] 1991 	dec	r6
      00086B BE FF 01         [24] 1992 	cjne	r6,#0xff,00364$
      00086E 1F               [12] 1993 	dec	r7
      00086F                       1994 00364$:
      00086F 8E 82            [24] 1995 	mov	dpl, r6
      000871 8F 83            [24] 1996 	mov	dph, r7
      000873 12r00r00         [24] 1997 	lcall	_update_ERXRDPT
      000876                       1998 00114$:
                                   1999 ;	main.c:208: uint8_t *packet_data = (uint8_t *)malloc(6);
      000876 90 00 06         [24] 2000 	mov	dptr,#0x0006
      000879 12r00r00         [24] 2001 	lcall	_malloc
      00087C AE 82            [24] 2002 	mov	r6, dpl
      00087E AD 83            [24] 2003 	mov	r5,dph
      000880 7F 00            [12] 2004 	mov	r7,#0x00
                                   2005 ;	main.c:209: spi_buffer_read(6, gNextPacketPtr, packet_data);
      000882 90r02r11         [24] 2006 	mov	dptr,#_main_gNextPacketPtr_60001_172
      000885 E0               [24] 2007 	movx	a,@dptr
      000886 FB               [12] 2008 	mov	r3,a
      000887 A3               [24] 2009 	inc	dptr
      000888 E0               [24] 2010 	movx	a,@dptr
      000889 FC               [12] 2011 	mov	r4,a
      00088A 90r00r00         [24] 2012 	mov	dptr,#_spi_buffer_read_PARM_2
      00088D EB               [12] 2013 	mov	a,r3
      00088E F0               [24] 2014 	movx	@dptr,a
      00088F EC               [12] 2015 	mov	a,r4
      000890 A3               [24] 2016 	inc	dptr
      000891 F0               [24] 2017 	movx	@dptr,a
      000892 90r00r00         [24] 2018 	mov	dptr,#_spi_buffer_read_PARM_3
      000895 EE               [12] 2019 	mov	a,r6
      000896 F0               [24] 2020 	movx	@dptr,a
      000897 ED               [12] 2021 	mov	a,r5
      000898 A3               [24] 2022 	inc	dptr
      000899 F0               [24] 2023 	movx	@dptr,a
      00089A EF               [12] 2024 	mov	a,r7
      00089B A3               [24] 2025 	inc	dptr
      00089C F0               [24] 2026 	movx	@dptr,a
      00089D 90 00 06         [24] 2027 	mov	dptr,#0x0006
      0008A0 C0 07            [24] 2028 	push	ar7
      0008A2 C0 06            [24] 2029 	push	ar6
      0008A4 C0 05            [24] 2030 	push	ar5
      0008A6 12r00r00         [24] 2031 	lcall	_spi_buffer_read
      0008A9 D0 05            [24] 2032 	pop	ar5
      0008AB D0 06            [24] 2033 	pop	ar6
      0008AD D0 07            [24] 2034 	pop	ar7
                                   2035 ;	main.c:213: nextPacket = (uint16_t)(packet_data[1] << 8 | packet_data[0]); // Next Packet (MSB, LSB)
      0008AF 74 01            [12] 2036 	mov	a,#0x01
      0008B1 2E               [12] 2037 	add	a, r6
      0008B2 FA               [12] 2038 	mov	r2,a
      0008B3 E4               [12] 2039 	clr	a
      0008B4 3D               [12] 2040 	addc	a, r5
      0008B5 FB               [12] 2041 	mov	r3,a
      0008B6 8F 04            [24] 2042 	mov	ar4,r7
      0008B8 8A 82            [24] 2043 	mov	dpl,r2
      0008BA 8B 83            [24] 2044 	mov	dph,r3
      0008BC 8C F0            [24] 2045 	mov	b,r4
      0008BE 12r00r00         [24] 2046 	lcall	__gptrget
      0008C1 FC               [12] 2047 	mov	r4,a
      0008C2 7A 00            [12] 2048 	mov	r2,#0x00
      0008C4 8E 82            [24] 2049 	mov	dpl,r6
      0008C6 8D 83            [24] 2050 	mov	dph,r5
      0008C8 8F F0            [24] 2051 	mov	b,r7
      0008CA 12r00r00         [24] 2052 	lcall	__gptrget
      0008CD 7B 00            [12] 2053 	mov	r3,#0x00
      0008CF 42 02            [12] 2054 	orl	ar2,a
      0008D1 EB               [12] 2055 	mov	a,r3
      0008D2 42 04            [12] 2056 	orl	ar4,a
      0008D4 8A*08            [24] 2057 	mov	_main_sloc4_1_0,r2
      0008D6 8C*09            [24] 2058 	mov	(_main_sloc4_1_0 + 1),r4
                                   2059 ;	main.c:214: byteCount = (uint16_t)(packet_data[3] << 8 | packet_data[2]);  // Byte Count (MSB, LSB)
      0008D8 74 03            [12] 2060 	mov	a,#0x03
      0008DA 2E               [12] 2061 	add	a, r6
      0008DB F8               [12] 2062 	mov	r0,a
      0008DC E4               [12] 2063 	clr	a
      0008DD 3D               [12] 2064 	addc	a, r5
      0008DE F9               [12] 2065 	mov	r1,a
      0008DF 8F 03            [24] 2066 	mov	ar3,r7
      0008E1 88 82            [24] 2067 	mov	dpl,r0
      0008E3 89 83            [24] 2068 	mov	dph,r1
      0008E5 8B F0            [24] 2069 	mov	b,r3
      0008E7 12r00r00         [24] 2070 	lcall	__gptrget
      0008EA F8               [12] 2071 	mov	r0,a
      0008EB 7B 00            [12] 2072 	mov	r3,#0x00
      0008ED 88*01            [24] 2073 	mov	(_main_sloc0_1_0 + 1),r0
      0008EF 8B*00            [24] 2074 	mov	_main_sloc0_1_0,r3
      0008F1 74 02            [12] 2075 	mov	a,#0x02
      0008F3 2E               [12] 2076 	add	a, r6
      0008F4 F8               [12] 2077 	mov	r0,a
      0008F5 E4               [12] 2078 	clr	a
      0008F6 3D               [12] 2079 	addc	a, r5
      0008F7 F9               [12] 2080 	mov	r1,a
      0008F8 8F 03            [24] 2081 	mov	ar3,r7
      0008FA 88 82            [24] 2082 	mov	dpl,r0
      0008FC 89 83            [24] 2083 	mov	dph,r1
      0008FE 8B F0            [24] 2084 	mov	b,r3
      000900 12r00r00         [24] 2085 	lcall	__gptrget
      000903 F8               [12] 2086 	mov	r0,a
      000904 7B 00            [12] 2087 	mov	r3,#0x00
      000906 E5*01            [12] 2088 	mov	a,(_main_sloc0_1_0 + 1)
      000908 42 03            [12] 2089 	orl	ar3,a
      00090A 88*00            [24] 2090 	mov	_main_sloc0_1_0,r0
      00090C 8B*01            [24] 2091 	mov	(_main_sloc0_1_0 + 1),r3
                                   2092 ;	main.c:215: status = (uint16_t)(packet_data[5] << 8 | packet_data[4]);     // Status (MSB, LSB)
      00090E 74 05            [12] 2093 	mov	a,#0x05
      000910 2E               [12] 2094 	add	a, r6
      000911 F8               [12] 2095 	mov	r0,a
      000912 E4               [12] 2096 	clr	a
      000913 3D               [12] 2097 	addc	a, r5
      000914 F9               [12] 2098 	mov	r1,a
      000915 8F 03            [24] 2099 	mov	ar3,r7
      000917 88 82            [24] 2100 	mov	dpl,r0
      000919 89 83            [24] 2101 	mov	dph,r1
      00091B 8B F0            [24] 2102 	mov	b,r3
      00091D 12r00r00         [24] 2103 	lcall	__gptrget
      000920 F8               [12] 2104 	mov	r0,a
      000921 7B 00            [12] 2105 	mov	r3,#0x00
      000923 88*03            [24] 2106 	mov	(_main_sloc1_1_0 + 1),r0
      000925 8B*02            [24] 2107 	mov	_main_sloc1_1_0,r3
      000927 74 04            [12] 2108 	mov	a,#0x04
      000929 2E               [12] 2109 	add	a, r6
      00092A F8               [12] 2110 	mov	r0,a
      00092B E4               [12] 2111 	clr	a
      00092C 3D               [12] 2112 	addc	a, r5
      00092D F9               [12] 2113 	mov	r1,a
      00092E 8F 03            [24] 2114 	mov	ar3,r7
      000930 88 82            [24] 2115 	mov	dpl,r0
      000932 89 83            [24] 2116 	mov	dph,r1
      000934 8B F0            [24] 2117 	mov	b,r3
      000936 12r00r00         [24] 2118 	lcall	__gptrget
      000939 F8               [12] 2119 	mov	r0,a
      00093A 7B 00            [12] 2120 	mov	r3,#0x00
      00093C E5*03            [12] 2121 	mov	a,(_main_sloc1_1_0 + 1)
      00093E 42 03            [12] 2122 	orl	ar3,a
      000940 88*02            [24] 2123 	mov	_main_sloc1_1_0,r0
      000942 8B*03            [24] 2124 	mov	(_main_sloc1_1_0 + 1),r3
                                   2125 ;	main.c:218: len = byteCount - 4;
      000944 A9*00            [24] 2126 	mov	r1,_main_sloc0_1_0
      000946 AB*01            [24] 2127 	mov	r3,(_main_sloc0_1_0 + 1)
      000948 E9               [12] 2128 	mov	a,r1
      000949 24 FC            [12] 2129 	add	a,#0xfc
      00094B F9               [12] 2130 	mov	r1,a
      00094C EB               [12] 2131 	mov	a,r3
      00094D 34 FF            [12] 2132 	addc	a,#0xff
      00094F FB               [12] 2133 	mov	r3,a
      000950 89*06            [24] 2134 	mov	_main_sloc3_1_0,r1
      000952 8B*07            [24] 2135 	mov	(_main_sloc3_1_0 + 1),r3
                                   2136 ;	main.c:220: uint8_t *packet_data_actual = (uint8_t *)malloc(len);
      000954 85*06*04         [24] 2137 	mov	_main_sloc2_1_0,_main_sloc3_1_0
      000957 85*07*05         [24] 2138 	mov	(_main_sloc2_1_0 + 1),(_main_sloc3_1_0 + 1)
      00095A 85*04 82         [24] 2139 	mov	dpl, _main_sloc2_1_0
      00095D 85*05 83         [24] 2140 	mov	dph, (_main_sloc2_1_0 + 1)
      000960 C0 07            [24] 2141 	push	ar7
      000962 C0 06            [24] 2142 	push	ar6
      000964 C0 05            [24] 2143 	push	ar5
      000966 12r00r00         [24] 2144 	lcall	_malloc
      000969 A8 82            [24] 2145 	mov	r0, dpl
      00096B AB 83            [24] 2146 	mov	r3, dph
      00096D D0 05            [24] 2147 	pop	ar5
      00096F D0 06            [24] 2148 	pop	ar6
      000971 D0 07            [24] 2149 	pop	ar7
      000973 88*0A            [24] 2150 	mov	_main_sloc5_1_0,r0
      000975 8B*0B            [24] 2151 	mov	(_main_sloc5_1_0 + 1),r3
      000977 75*0C 00         [24] 2152 	mov	(_main_sloc5_1_0 + 2),#0x00
                                   2153 ;	main.c:221: spi_buffer_read(len, gNextPacketPtr + 6, packet_data_actual);
      00097A 90r02r11         [24] 2154 	mov	dptr,#_main_gNextPacketPtr_60001_172
      00097D E0               [24] 2155 	movx	a,@dptr
      00097E FA               [12] 2156 	mov	r2,a
      00097F A3               [24] 2157 	inc	dptr
      000980 E0               [24] 2158 	movx	a,@dptr
      000981 FC               [12] 2159 	mov	r4,a
      000982 74 06            [12] 2160 	mov	a,#0x06
      000984 2A               [12] 2161 	add	a, r2
      000985 FA               [12] 2162 	mov	r2,a
      000986 E4               [12] 2163 	clr	a
      000987 3C               [12] 2164 	addc	a, r4
      000988 FC               [12] 2165 	mov	r4,a
      000989 90r00r00         [24] 2166 	mov	dptr,#_spi_buffer_read_PARM_2
      00098C EA               [12] 2167 	mov	a,r2
      00098D F0               [24] 2168 	movx	@dptr,a
      00098E EC               [12] 2169 	mov	a,r4
      00098F A3               [24] 2170 	inc	dptr
      000990 F0               [24] 2171 	movx	@dptr,a
      000991 90r00r00         [24] 2172 	mov	dptr,#_spi_buffer_read_PARM_3
      000994 E5*0A            [12] 2173 	mov	a,_main_sloc5_1_0
      000996 F0               [24] 2174 	movx	@dptr,a
      000997 E5*0B            [12] 2175 	mov	a,(_main_sloc5_1_0 + 1)
      000999 A3               [24] 2176 	inc	dptr
      00099A F0               [24] 2177 	movx	@dptr,a
      00099B E5*0C            [12] 2178 	mov	a,(_main_sloc5_1_0 + 2)
      00099D A3               [24] 2179 	inc	dptr
      00099E F0               [24] 2180 	movx	@dptr,a
      00099F 85*06 82         [24] 2181 	mov	dpl, _main_sloc3_1_0
      0009A2 85*07 83         [24] 2182 	mov	dph, (_main_sloc3_1_0 + 1)
      0009A5 C0 07            [24] 2183 	push	ar7
      0009A7 C0 06            [24] 2184 	push	ar6
      0009A9 C0 05            [24] 2185 	push	ar5
      0009AB 12r00r00         [24] 2186 	lcall	_spi_buffer_read
                                   2187 ;	main.c:223: int is_tcp_for_target = 0;
      0009AE 90r02r13         [24] 2188 	mov	dptr,#_main_is_tcp_for_target_60004_177
      0009B1 E4               [12] 2189 	clr	a
      0009B2 F0               [24] 2190 	movx	@dptr,a
      0009B3 A3               [24] 2191 	inc	dptr
      0009B4 F0               [24] 2192 	movx	@dptr,a
                                   2193 ;	main.c:226: if (memcmp(packet_data_actual, device_mac, 6) == 0) {
      0009B5 AA*0A            [24] 2194 	mov	r2,_main_sloc5_1_0
      0009B7 AB*0B            [24] 2195 	mov	r3,(_main_sloc5_1_0 + 1)
      0009B9 FC               [12] 2196 	mov	r4,a
      0009BA 90r00r00         [24] 2197 	mov	dptr,#_memcmp_PARM_2
      0009BD 74r00            [12] 2198 	mov	a,#_device_mac
      0009BF F0               [24] 2199 	movx	@dptr,a
      0009C0 74s00            [12] 2200 	mov	a,#(_device_mac >> 8)
      0009C2 A3               [24] 2201 	inc	dptr
      0009C3 F0               [24] 2202 	movx	@dptr,a
      0009C4 E4               [12] 2203 	clr	a
      0009C5 A3               [24] 2204 	inc	dptr
      0009C6 F0               [24] 2205 	movx	@dptr,a
      0009C7 90r00r00         [24] 2206 	mov	dptr,#_memcmp_PARM_3
      0009CA 74 06            [12] 2207 	mov	a,#0x06
      0009CC F0               [24] 2208 	movx	@dptr,a
      0009CD E4               [12] 2209 	clr	a
      0009CE A3               [24] 2210 	inc	dptr
      0009CF F0               [24] 2211 	movx	@dptr,a
      0009D0 8A 82            [24] 2212 	mov	dpl, r2
      0009D2 8B 83            [24] 2213 	mov	dph, r3
      0009D4 8C F0            [24] 2214 	mov	b, r4
      0009D6 12r00r00         [24] 2215 	lcall	_memcmp
      0009D9 E5 82            [12] 2216 	mov	a, dpl
      0009DB 85 83 F0         [24] 2217 	mov	b, dph
      0009DE D0 05            [24] 2218 	pop	ar5
      0009E0 D0 06            [24] 2219 	pop	ar6
      0009E2 D0 07            [24] 2220 	pop	ar7
      0009E4 45 F0            [12] 2221 	orl	a,b
      0009E6 70 70            [24] 2222 	jnz	00121$
                                   2223 ;	main.c:229: if (packet_data_actual[12] == 0x08 && packet_data_actual[13] == 0x00) {
      0009E8 74 0C            [12] 2224 	mov	a,#0x0c
      0009EA 25*0A            [12] 2225 	add	a, _main_sloc5_1_0
      0009EC FA               [12] 2226 	mov	r2,a
      0009ED E4               [12] 2227 	clr	a
      0009EE 35*0B            [12] 2228 	addc	a, (_main_sloc5_1_0 + 1)
      0009F0 FB               [12] 2229 	mov	r3,a
      0009F1 AC*0C            [24] 2230 	mov	r4,(_main_sloc5_1_0 + 2)
      0009F3 8A 82            [24] 2231 	mov	dpl,r2
      0009F5 8B 83            [24] 2232 	mov	dph,r3
      0009F7 8C F0            [24] 2233 	mov	b,r4
      0009F9 12r00r00         [24] 2234 	lcall	__gptrget
      0009FC FA               [12] 2235 	mov	r2,a
      0009FD BA 08 58         [24] 2236 	cjne	r2,#0x08,00121$
      000A00 74 0D            [12] 2237 	mov	a,#0x0d
      000A02 25*0A            [12] 2238 	add	a, _main_sloc5_1_0
      000A04 FA               [12] 2239 	mov	r2,a
      000A05 E4               [12] 2240 	clr	a
      000A06 35*0B            [12] 2241 	addc	a, (_main_sloc5_1_0 + 1)
      000A08 FB               [12] 2242 	mov	r3,a
      000A09 AC*0C            [24] 2243 	mov	r4,(_main_sloc5_1_0 + 2)
      000A0B 8A 82            [24] 2244 	mov	dpl,r2
      000A0D 8B 83            [24] 2245 	mov	dph,r3
      000A0F 8C F0            [24] 2246 	mov	b,r4
      000A11 12r00r00         [24] 2247 	lcall	__gptrget
      000A14 70 42            [24] 2248 	jnz	00121$
                                   2249 ;	main.c:230: printf("Valid ETHER packet.....................\n\r");
      000A16 C0 07            [24] 2250 	push	ar7
      000A18 C0 06            [24] 2251 	push	ar6
      000A1A C0 05            [24] 2252 	push	ar5
      000A1C 74r29            [12] 2253 	mov	a,#___str_38
      000A1E C0 E0            [24] 2254 	push	acc
      000A20 74s04            [12] 2255 	mov	a,#(___str_38 >> 8)
      000A22 C0 E0            [24] 2256 	push	acc
      000A24 74 80            [12] 2257 	mov	a,#0x80
      000A26 C0 E0            [24] 2258 	push	acc
      000A28 12r00r00         [24] 2259 	lcall	_printf
      000A2B 15 81            [12] 2260 	dec	sp
      000A2D 15 81            [12] 2261 	dec	sp
      000A2F 15 81            [12] 2262 	dec	sp
      000A31 D0 05            [24] 2263 	pop	ar5
      000A33 D0 06            [24] 2264 	pop	ar6
      000A35 D0 07            [24] 2265 	pop	ar7
                                   2266 ;	main.c:232: if (packet_data_actual[23] == 0x06) {
      000A37 74 17            [12] 2267 	mov	a,#0x17
      000A39 25*0A            [12] 2268 	add	a, _main_sloc5_1_0
      000A3B FA               [12] 2269 	mov	r2,a
      000A3C E4               [12] 2270 	clr	a
      000A3D 35*0B            [12] 2271 	addc	a, (_main_sloc5_1_0 + 1)
      000A3F FB               [12] 2272 	mov	r3,a
      000A40 AC*0C            [24] 2273 	mov	r4,(_main_sloc5_1_0 + 2)
      000A42 8A 82            [24] 2274 	mov	dpl,r2
      000A44 8B 83            [24] 2275 	mov	dph,r3
      000A46 8C F0            [24] 2276 	mov	b,r4
      000A48 12r00r00         [24] 2277 	lcall	__gptrget
      000A4B FA               [12] 2278 	mov	r2,a
      000A4C BA 06 09         [24] 2279 	cjne	r2,#0x06,00121$
                                   2280 ;	main.c:233: is_tcp_for_target = 1;
      000A4F 90r02r13         [24] 2281 	mov	dptr,#_main_is_tcp_for_target_60004_177
      000A52 74 01            [12] 2282 	mov	a,#0x01
      000A54 F0               [24] 2283 	movx	@dptr,a
      000A55 E4               [12] 2284 	clr	a
      000A56 A3               [24] 2285 	inc	dptr
      000A57 F0               [24] 2286 	movx	@dptr,a
      000A58                       2287 00121$:
                                   2288 ;	main.c:237: if (is_tcp_for_target)
      000A58 90r02r13         [24] 2289 	mov	dptr,#_main_is_tcp_for_target_60004_177
      000A5B E0               [24] 2290 	movx	a,@dptr
      000A5C F5 F0            [12] 2291 	mov	b,a
      000A5E A3               [24] 2292 	inc	dptr
      000A5F E0               [24] 2293 	movx	a,@dptr
      000A60 45 F0            [12] 2294 	orl	a,b
      000A62 70 03            [24] 2295 	jnz	00371$
      000A64 02r0Br54         [24] 2296 	ljmp	00126$
      000A67                       2297 00371$:
                                   2298 ;	main.c:242: uint8_t *response = process_tcp_packet(packet_data_actual, len+4, &response_size);
      000A67 74 04            [12] 2299 	mov	a,#0x04
      000A69 25*04            [12] 2300 	add	a, _main_sloc2_1_0
      000A6B FB               [12] 2301 	mov	r3,a
      000A6C E4               [12] 2302 	clr	a
      000A6D 35*05            [12] 2303 	addc	a, (_main_sloc2_1_0 + 1)
      000A6F FC               [12] 2304 	mov	r4,a
      000A70 90r00r00         [24] 2305 	mov	dptr,#_process_tcp_packet_PARM_2
      000A73 EB               [12] 2306 	mov	a,r3
      000A74 F0               [24] 2307 	movx	@dptr,a
      000A75 EC               [12] 2308 	mov	a,r4
      000A76 A3               [24] 2309 	inc	dptr
      000A77 F0               [24] 2310 	movx	@dptr,a
      000A78 90r00r00         [24] 2311 	mov	dptr,#_process_tcp_packet_PARM_3
      000A7B 74r15            [12] 2312 	mov	a,#_main_response_size_70004_181
      000A7D F0               [24] 2313 	movx	@dptr,a
      000A7E 74s02            [12] 2314 	mov	a,#(_main_response_size_70004_181 >> 8)
      000A80 A3               [24] 2315 	inc	dptr
      000A81 F0               [24] 2316 	movx	@dptr,a
      000A82 E4               [12] 2317 	clr	a
      000A83 A3               [24] 2318 	inc	dptr
      000A84 F0               [24] 2319 	movx	@dptr,a
      000A85 85*0A 82         [24] 2320 	mov	dpl, _main_sloc5_1_0
      000A88 85*0B 83         [24] 2321 	mov	dph, (_main_sloc5_1_0 + 1)
      000A8B 85*0C F0         [24] 2322 	mov	b, (_main_sloc5_1_0 + 2)
      000A8E C0 07            [24] 2323 	push	ar7
      000A90 C0 06            [24] 2324 	push	ar6
      000A92 C0 05            [24] 2325 	push	ar5
      000A94 12r00r00         [24] 2326 	lcall	_process_tcp_packet
      000A97 AA 82            [24] 2327 	mov	r2, dpl
      000A99 AB 83            [24] 2328 	mov	r3, dph
      000A9B AC F0            [24] 2329 	mov	r4, b
      000A9D D0 05            [24] 2330 	pop	ar5
      000A9F D0 06            [24] 2331 	pop	ar6
      000AA1 D0 07            [24] 2332 	pop	ar7
                                   2333 ;	main.c:245: if (response != NULL) {
      000AA3 EA               [12] 2334 	mov	a,r2
      000AA4 4B               [12] 2335 	orl	a,r3
      000AA5 60 69            [24] 2336 	jz	00123$
                                   2337 ;	main.c:246: printf("\nProcessed response data:\n");
      000AA7 C0 07            [24] 2338 	push	ar7
      000AA9 C0 06            [24] 2339 	push	ar6
      000AAB C0 05            [24] 2340 	push	ar5
      000AAD C0 04            [24] 2341 	push	ar4
      000AAF C0 03            [24] 2342 	push	ar3
      000AB1 C0 02            [24] 2343 	push	ar2
      000AB3 74r53            [12] 2344 	mov	a,#___str_39
      000AB5 C0 E0            [24] 2345 	push	acc
      000AB7 74s04            [12] 2346 	mov	a,#(___str_39 >> 8)
      000AB9 C0 E0            [24] 2347 	push	acc
      000ABB 74 80            [12] 2348 	mov	a,#0x80
      000ABD C0 E0            [24] 2349 	push	acc
      000ABF 12r00r00         [24] 2350 	lcall	_printf
      000AC2 15 81            [12] 2351 	dec	sp
      000AC4 15 81            [12] 2352 	dec	sp
      000AC6 15 81            [12] 2353 	dec	sp
      000AC8 D0 02            [24] 2354 	pop	ar2
      000ACA D0 03            [24] 2355 	pop	ar3
      000ACC D0 04            [24] 2356 	pop	ar4
      000ACE D0 05            [24] 2357 	pop	ar5
      000AD0 D0 06            [24] 2358 	pop	ar6
      000AD2 D0 07            [24] 2359 	pop	ar7
                                   2360 ;	main.c:248: transmit_tcp_packet(response, response_size);
      000AD4 90r02r15         [24] 2361 	mov	dptr,#_main_response_size_70004_181
      000AD7 E0               [24] 2362 	movx	a,@dptr
      000AD8 F8               [12] 2363 	mov	r0,a
      000AD9 A3               [24] 2364 	inc	dptr
      000ADA E0               [24] 2365 	movx	a,@dptr
      000ADB F9               [12] 2366 	mov	r1,a
      000ADC 90r00r00         [24] 2367 	mov	dptr,#_transmit_tcp_packet_PARM_2
      000ADF E8               [12] 2368 	mov	a,r0
      000AE0 F0               [24] 2369 	movx	@dptr,a
      000AE1 E9               [12] 2370 	mov	a,r1
      000AE2 A3               [24] 2371 	inc	dptr
      000AE3 F0               [24] 2372 	movx	@dptr,a
      000AE4 8A 82            [24] 2373 	mov	dpl, r2
      000AE6 8B 83            [24] 2374 	mov	dph, r3
      000AE8 8C F0            [24] 2375 	mov	b, r4
      000AEA C0 07            [24] 2376 	push	ar7
      000AEC C0 06            [24] 2377 	push	ar6
      000AEE C0 05            [24] 2378 	push	ar5
      000AF0 C0 04            [24] 2379 	push	ar4
      000AF2 C0 03            [24] 2380 	push	ar3
      000AF4 C0 02            [24] 2381 	push	ar2
      000AF6 12r00r00         [24] 2382 	lcall	_transmit_tcp_packet
      000AF9 D0 02            [24] 2383 	pop	ar2
      000AFB D0 03            [24] 2384 	pop	ar3
      000AFD D0 04            [24] 2385 	pop	ar4
                                   2386 ;	main.c:249: free(response); // Free response memory if allocated dynamically
      000AFF 8A 82            [24] 2387 	mov	dpl, r2
      000B01 8B 83            [24] 2388 	mov	dph, r3
      000B03 8C F0            [24] 2389 	mov	b, r4
      000B05 12r00r00         [24] 2390 	lcall	_free
      000B08 D0 05            [24] 2391 	pop	ar5
      000B0A D0 06            [24] 2392 	pop	ar6
      000B0C D0 07            [24] 2393 	pop	ar7
      000B0E 80 21            [24] 2394 	sjmp	00124$
      000B10                       2395 00123$:
                                   2396 ;	main.c:251: printf("\nNo response generated by TCP packet processing.\n");
      000B10 C0 07            [24] 2397 	push	ar7
      000B12 C0 06            [24] 2398 	push	ar6
      000B14 C0 05            [24] 2399 	push	ar5
      000B16 74r6E            [12] 2400 	mov	a,#___str_40
      000B18 C0 E0            [24] 2401 	push	acc
      000B1A 74s04            [12] 2402 	mov	a,#(___str_40 >> 8)
      000B1C C0 E0            [24] 2403 	push	acc
      000B1E 74 80            [12] 2404 	mov	a,#0x80
      000B20 C0 E0            [24] 2405 	push	acc
      000B22 12r00r00         [24] 2406 	lcall	_printf
      000B25 15 81            [12] 2407 	dec	sp
      000B27 15 81            [12] 2408 	dec	sp
      000B29 15 81            [12] 2409 	dec	sp
      000B2B D0 05            [24] 2410 	pop	ar5
      000B2D D0 06            [24] 2411 	pop	ar6
      000B2F D0 07            [24] 2412 	pop	ar7
      000B31                       2413 00124$:
                                   2414 ;	main.c:254: printf("YESSSS\n");
      000B31 C0 07            [24] 2415 	push	ar7
      000B33 C0 06            [24] 2416 	push	ar6
      000B35 C0 05            [24] 2417 	push	ar5
      000B37 74rA0            [12] 2418 	mov	a,#___str_41
      000B39 C0 E0            [24] 2419 	push	acc
      000B3B 74s04            [12] 2420 	mov	a,#(___str_41 >> 8)
      000B3D C0 E0            [24] 2421 	push	acc
      000B3F 74 80            [12] 2422 	mov	a,#0x80
      000B41 C0 E0            [24] 2423 	push	acc
      000B43 12r00r00         [24] 2424 	lcall	_printf
      000B46 15 81            [12] 2425 	dec	sp
      000B48 15 81            [12] 2426 	dec	sp
      000B4A 15 81            [12] 2427 	dec	sp
      000B4C D0 05            [24] 2428 	pop	ar5
      000B4E D0 06            [24] 2429 	pop	ar6
      000B50 D0 07            [24] 2430 	pop	ar7
      000B52 80 21            [24] 2431 	sjmp	00127$
      000B54                       2432 00126$:
                                   2433 ;	main.c:258: printf("NOOOO\n");
      000B54 C0 07            [24] 2434 	push	ar7
      000B56 C0 06            [24] 2435 	push	ar6
      000B58 C0 05            [24] 2436 	push	ar5
      000B5A 74rA8            [12] 2437 	mov	a,#___str_42
      000B5C C0 E0            [24] 2438 	push	acc
      000B5E 74s04            [12] 2439 	mov	a,#(___str_42 >> 8)
      000B60 C0 E0            [24] 2440 	push	acc
      000B62 74 80            [12] 2441 	mov	a,#0x80
      000B64 C0 E0            [24] 2442 	push	acc
      000B66 12r00r00         [24] 2443 	lcall	_printf
      000B69 15 81            [12] 2444 	dec	sp
      000B6B 15 81            [12] 2445 	dec	sp
      000B6D 15 81            [12] 2446 	dec	sp
      000B6F D0 05            [24] 2447 	pop	ar5
      000B71 D0 06            [24] 2448 	pop	ar6
      000B73 D0 07            [24] 2449 	pop	ar7
      000B75                       2450 00127$:
                                   2451 ;	main.c:262: gNextPacketPtr = nextPacket;
      000B75 90r02r11         [24] 2452 	mov	dptr,#_main_gNextPacketPtr_60001_172
      000B78 E5*08            [12] 2453 	mov	a,_main_sloc4_1_0
      000B7A F0               [24] 2454 	movx	@dptr,a
      000B7B E5*09            [12] 2455 	mov	a,(_main_sloc4_1_0 + 1)
      000B7D A3               [24] 2456 	inc	dptr
      000B7E F0               [24] 2457 	movx	@dptr,a
                                   2458 ;	main.c:267: printf("nextPacket: 0x%04X\n", nextPacket);
      000B7F C0 07            [24] 2459 	push	ar7
      000B81 C0 06            [24] 2460 	push	ar6
      000B83 C0 05            [24] 2461 	push	ar5
      000B85 C0*08            [24] 2462 	push	_main_sloc4_1_0
      000B87 C0*09            [24] 2463 	push	(_main_sloc4_1_0 + 1)
      000B89 74rAF            [12] 2464 	mov	a,#___str_43
      000B8B C0 E0            [24] 2465 	push	acc
      000B8D 74s04            [12] 2466 	mov	a,#(___str_43 >> 8)
      000B8F C0 E0            [24] 2467 	push	acc
      000B91 74 80            [12] 2468 	mov	a,#0x80
      000B93 C0 E0            [24] 2469 	push	acc
      000B95 12r00r00         [24] 2470 	lcall	_printf
      000B98 E5 81            [12] 2471 	mov	a,sp
      000B9A 24 FB            [12] 2472 	add	a,#0xfb
      000B9C F5 81            [12] 2473 	mov	sp,a
                                   2474 ;	main.c:268: printf("byteCount: %d\n", byteCount);
      000B9E C0*00            [24] 2475 	push	_main_sloc0_1_0
      000BA0 C0*01            [24] 2476 	push	(_main_sloc0_1_0 + 1)
      000BA2 74rC3            [12] 2477 	mov	a,#___str_44
      000BA4 C0 E0            [24] 2478 	push	acc
      000BA6 74s04            [12] 2479 	mov	a,#(___str_44 >> 8)
      000BA8 C0 E0            [24] 2480 	push	acc
      000BAA 74 80            [12] 2481 	mov	a,#0x80
      000BAC C0 E0            [24] 2482 	push	acc
      000BAE 12r00r00         [24] 2483 	lcall	_printf
      000BB1 E5 81            [12] 2484 	mov	a,sp
      000BB3 24 FB            [12] 2485 	add	a,#0xfb
      000BB5 F5 81            [12] 2486 	mov	sp,a
                                   2487 ;	main.c:269: printf("status: 0x%02X\n", status);
      000BB7 C0*02            [24] 2488 	push	_main_sloc1_1_0
      000BB9 C0*03            [24] 2489 	push	(_main_sloc1_1_0 + 1)
      000BBB 74rD2            [12] 2490 	mov	a,#___str_45
      000BBD C0 E0            [24] 2491 	push	acc
      000BBF 74s04            [12] 2492 	mov	a,#(___str_45 >> 8)
      000BC1 C0 E0            [24] 2493 	push	acc
      000BC3 74 80            [12] 2494 	mov	a,#0x80
      000BC5 C0 E0            [24] 2495 	push	acc
      000BC7 12r00r00         [24] 2496 	lcall	_printf
      000BCA E5 81            [12] 2497 	mov	a,sp
      000BCC 24 FB            [12] 2498 	add	a,#0xfb
      000BCE F5 81            [12] 2499 	mov	sp,a
      000BD0 D0 05            [24] 2500 	pop	ar5
      000BD2 D0 06            [24] 2501 	pop	ar6
      000BD4 D0 07            [24] 2502 	pop	ar7
                                   2503 ;	main.c:272: uint8_t read_econ2 = mac_spi_read(0x1E, 0); //mac enable for reception
      000BD6 90r00r00         [24] 2504 	mov	dptr,#_mac_spi_read_PARM_2
      000BD9 E4               [12] 2505 	clr	a
      000BDA F0               [24] 2506 	movx	@dptr,a
      000BDB 75 82 1E         [24] 2507 	mov	dpl, #0x1e
      000BDE C0 07            [24] 2508 	push	ar7
      000BE0 C0 06            [24] 2509 	push	ar6
      000BE2 C0 05            [24] 2510 	push	ar5
      000BE4 12r00r00         [24] 2511 	lcall	_mac_spi_read
      000BE7 E5 82            [12] 2512 	mov	a, dpl
      000BE9 D0 05            [24] 2513 	pop	ar5
      000BEB D0 06            [24] 2514 	pop	ar6
      000BED D0 07            [24] 2515 	pop	ar7
                                   2516 ;	main.c:273: spi_control_write(2, 0x1E, (read_econ2 | (1 << 6))); //mac enable for reception
      000BEF 44 40            [12] 2517 	orl	a,#0x40
      000BF1 FC               [12] 2518 	mov	r4,a
      000BF2 90r00r00         [24] 2519 	mov	dptr,#_spi_control_write_PARM_2
      000BF5 74 1E            [12] 2520 	mov	a,#0x1e
      000BF7 F0               [24] 2521 	movx	@dptr,a
      000BF8 90r00r00         [24] 2522 	mov	dptr,#_spi_control_write_PARM_3
      000BFB EC               [12] 2523 	mov	a,r4
      000BFC F0               [24] 2524 	movx	@dptr,a
      000BFD 75 82 02         [24] 2525 	mov	dpl, #0x02
      000C00 C0 07            [24] 2526 	push	ar7
      000C02 C0 06            [24] 2527 	push	ar6
      000C04 C0 05            [24] 2528 	push	ar5
      000C06 12r00r00         [24] 2529 	lcall	_spi_control_write
      000C09 D0 05            [24] 2530 	pop	ar5
      000C0B D0 06            [24] 2531 	pop	ar6
      000C0D D0 07            [24] 2532 	pop	ar7
                                   2533 ;	main.c:274: free(packet_data);
      000C0F 7F 00            [12] 2534 	mov	r7,#0x00
      000C11 8E 82            [24] 2535 	mov	dpl, r6
      000C13 8D 83            [24] 2536 	mov	dph, r5
      000C15 8F F0            [24] 2537 	mov	b, r7
      000C17 12r00r00         [24] 2538 	lcall	_free
      000C1A 02r08r47         [24] 2539 	ljmp	00131$
                                   2540 ;	main.c:285: case 'C':{
      000C1D                       2541 00134$:
                                   2542 ;	main.c:286: printf(" Resetting ENC using RESET pin in Hardware(P1_0)\n\r");
      000C1D 74rE2            [12] 2543 	mov	a,#___str_46
      000C1F C0 E0            [24] 2544 	push	acc
      000C21 74s04            [12] 2545 	mov	a,#(___str_46 >> 8)
      000C23 C0 E0            [24] 2546 	push	acc
      000C25 74 80            [12] 2547 	mov	a,#0x80
      000C27 C0 E0            [24] 2548 	push	acc
      000C29 12r00r00         [24] 2549 	lcall	_printf
      000C2C 15 81            [12] 2550 	dec	sp
      000C2E 15 81            [12] 2551 	dec	sp
      000C30 15 81            [12] 2552 	dec	sp
                                   2553 ;	main.c:287: ENC_RESET = 0;
                                   2554 ;	assignBit
      000C32 C2 90            [12] 2555 	clr	_P1_0
                                   2556 ;	main.c:288: for(int i = 0; i < 6000; i++);
      000C34 7E 00            [12] 2557 	mov	r6,#0x00
      000C36 7F 00            [12] 2558 	mov	r7,#0x00
      000C38                       2559 00152$:
      000C38 C3               [12] 2560 	clr	c
      000C39 EE               [12] 2561 	mov	a,r6
      000C3A 94 70            [12] 2562 	subb	a,#0x70
      000C3C EF               [12] 2563 	mov	a,r7
      000C3D 64 80            [12] 2564 	xrl	a,#0x80
      000C3F 94 97            [12] 2565 	subb	a,#0x97
      000C41 50 07            [24] 2566 	jnc	00135$
      000C43 0E               [12] 2567 	inc	r6
      000C44 BE 00 F1         [24] 2568 	cjne	r6,#0x00,00152$
      000C47 0F               [12] 2569 	inc	r7
      000C48 80 EE            [24] 2570 	sjmp	00152$
      000C4A                       2571 00135$:
                                   2572 ;	main.c:289: ENC_RESET = 1;
                                   2573 ;	assignBit
      000C4A D2 90            [12] 2574 	setb	_P1_0
                                   2575 ;	main.c:290: break;
      000C4C 02r02r5F         [24] 2576 	ljmp	00146$
                                   2577 ;	main.c:292: case 'D':
      000C4F                       2578 00136$:
                                   2579 ;	main.c:296: process_packet_from_buffer(0x0846);
      000C4F 90 08 46         [24] 2580 	mov	dptr,#0x0846
      000C52 12r00r00         [24] 2581 	lcall	_process_packet_from_buffer
                                   2582 ;	main.c:297: break;
      000C55 02r02r5F         [24] 2583 	ljmp	00146$
                                   2584 ;	main.c:299: case 'E':{
      000C58                       2585 00137$:
                                   2586 ;	main.c:300: IT0 = 1;  // Edge-triggered mode for INT0
                                   2587 ;	assignBit
      000C58 D2 88            [12] 2588 	setb	_IT0
                                   2589 ;	main.c:301: EX0 = 1;  // Enable INT0
                                   2590 ;	assignBit
      000C5A D2 A8            [12] 2591 	setb	_EX0
                                   2592 ;	main.c:302: EA = 1;   // Enable global interrupts
                                   2593 ;	assignBit
      000C5C D2 AF            [12] 2594 	setb	_EA
                                   2595 ;	main.c:303: uint8_t read_econ2 = mac_spi_read(0x1E, 0); //mac enable for reception
      000C5E 90r00r00         [24] 2596 	mov	dptr,#_mac_spi_read_PARM_2
      000C61 E4               [12] 2597 	clr	a
      000C62 F0               [24] 2598 	movx	@dptr,a
      000C63 75 82 1E         [24] 2599 	mov	dpl, #0x1e
      000C66 12r00r00         [24] 2600 	lcall	_mac_spi_read
                                   2601 ;	main.c:305: printf("Enabling TXPKTIE\n\r");
      000C69 74r15            [12] 2602 	mov	a,#___str_47
      000C6B C0 E0            [24] 2603 	push	acc
      000C6D 74s05            [12] 2604 	mov	a,#(___str_47 >> 8)
      000C6F C0 E0            [24] 2605 	push	acc
      000C71 74 80            [12] 2606 	mov	a,#0x80
      000C73 C0 E0            [24] 2607 	push	acc
      000C75 12r00r00         [24] 2608 	lcall	_printf
      000C78 15 81            [12] 2609 	dec	sp
      000C7A 15 81            [12] 2610 	dec	sp
      000C7C 15 81            [12] 2611 	dec	sp
                                   2612 ;	main.c:306: spi_control_write(0, 0x1B, 0xC0);
      000C7E 90r00r00         [24] 2613 	mov	dptr,#_spi_control_write_PARM_2
      000C81 74 1B            [12] 2614 	mov	a,#0x1b
      000C83 F0               [24] 2615 	movx	@dptr,a
      000C84 90r00r00         [24] 2616 	mov	dptr,#_spi_control_write_PARM_3
      000C87 74 C0            [12] 2617 	mov	a,#0xc0
      000C89 F0               [24] 2618 	movx	@dptr,a
      000C8A 75 82 00         [24] 2619 	mov	dpl, #0x00
      000C8D 12r00r00         [24] 2620 	lcall	_spi_control_write
                                   2621 ;	main.c:307: break;
      000C90 02r02r5F         [24] 2622 	ljmp	00146$
                                   2623 ;	main.c:309: case 'F':{
      000C93                       2624 00138$:
                                   2625 ;	main.c:310: printf("Disabling TXPKTIE\n\r");
      000C93 74r28            [12] 2626 	mov	a,#___str_48
      000C95 C0 E0            [24] 2627 	push	acc
      000C97 74s05            [12] 2628 	mov	a,#(___str_48 >> 8)
      000C99 C0 E0            [24] 2629 	push	acc
      000C9B 74 80            [12] 2630 	mov	a,#0x80
      000C9D C0 E0            [24] 2631 	push	acc
      000C9F 12r00r00         [24] 2632 	lcall	_printf
      000CA2 15 81            [12] 2633 	dec	sp
      000CA4 15 81            [12] 2634 	dec	sp
      000CA6 15 81            [12] 2635 	dec	sp
                                   2636 ;	main.c:311: spi_control_write(0, 0x1B, 0);
      000CA8 90r00r00         [24] 2637 	mov	dptr,#_spi_control_write_PARM_2
      000CAB 74 1B            [12] 2638 	mov	a,#0x1b
      000CAD F0               [24] 2639 	movx	@dptr,a
      000CAE 90r00r00         [24] 2640 	mov	dptr,#_spi_control_write_PARM_3
      000CB1 E4               [12] 2641 	clr	a
      000CB2 F0               [24] 2642 	movx	@dptr,a
      000CB3 75 82 00         [24] 2643 	mov	dpl, #0x00
      000CB6 12r00r00         [24] 2644 	lcall	_spi_control_write
                                   2645 ;	main.c:314: while(1)
      000CB9                       2646 00141$:
                                   2647 ;	main.c:316: packetLoop();
      000CB9 12r00r00         [24] 2648 	lcall	_packetLoop
                                   2649 ;	main.c:320: default: {
      000CBC 80 FB            [24] 2650 	sjmp	00141$
      000CBE                       2651 00143$:
                                   2652 ;	main.c:321: printf("Invalid option. Please select a valid action.\n\r");
      000CBE 74r3C            [12] 2653 	mov	a,#___str_49
      000CC0 C0 E0            [24] 2654 	push	acc
      000CC2 74s05            [12] 2655 	mov	a,#(___str_49 >> 8)
      000CC4 C0 E0            [24] 2656 	push	acc
      000CC6 74 80            [12] 2657 	mov	a,#0x80
      000CC8 C0 E0            [24] 2658 	push	acc
      000CCA 12r00r00         [24] 2659 	lcall	_printf
      000CCD 15 81            [12] 2660 	dec	sp
      000CCF 15 81            [12] 2661 	dec	sp
      000CD1 15 81            [12] 2662 	dec	sp
                                   2663 ;	main.c:324: }
                                   2664 ;	main.c:326: }
      000CD3 02r02r5F         [24] 2665 	ljmp	00146$
                                   2666 	.area CSEG    (CODE)
                                   2667 	.area CONST   (CODE)
                                   2668 	.area CONST   (CODE)
      000000                       2669 ___str_0:
      000000 0A                    2670 	.db 0x0a
      000001 0D                    2671 	.db 0x0d
      000002 00                    2672 	.db 0x00
                                   2673 	.area CSEG    (CODE)
                                   2674 	.area CONST   (CODE)
      000003                       2675 ___str_1:
      000003 53 50 49 20 4F 70 65  2676 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    2677 	.db 0x0a
      00001A 0D                    2678 	.db 0x0d
      00001B 00                    2679 	.db 0x00
                                   2680 	.area CSEG    (CODE)
                                   2681 	.area CONST   (CODE)
      00001C                       2682 ___str_2:
      00001C 0A                    2683 	.db 0x0a
      00001D 0D                    2684 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  2685 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    2686 	.db 0x0a
      000031 0D                    2687 	.db 0x0d
      000032 00                    2688 	.db 0x00
                                   2689 	.area CSEG    (CODE)
                                   2690 	.area CONST   (CODE)
      000033                       2691 ___str_3:
      000033 31 20 2D 2D 3E 20 43  2692 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    2693 	.db 0x0a
      000047 0D                    2694 	.db 0x0d
      000048 00                    2695 	.db 0x00
                                   2696 	.area CSEG    (CODE)
                                   2697 	.area CONST   (CODE)
      000049                       2698 ___str_4:
      000049 32 20 2D 2D 3E 20 42  2699 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    2700 	.db 0x0a
      00005C 0D                    2701 	.db 0x0d
      00005D 00                    2702 	.db 0x00
                                   2703 	.area CSEG    (CODE)
                                   2704 	.area CONST   (CODE)
      00005E                       2705 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  2706 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    2707 	.db 0x0a
      000070 0D                    2708 	.db 0x0d
      000071 00                    2709 	.db 0x00
                                   2710 	.area CSEG    (CODE)
                                   2711 	.area CONST   (CODE)
      000072                       2712 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  2713 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    2714 	.db 0x0a
      00008A 0D                    2715 	.db 0x0d
      00008B 00                    2716 	.db 0x00
                                   2717 	.area CSEG    (CODE)
                                   2718 	.area CONST   (CODE)
      00008C                       2719 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  2720 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    2721 	.db 0x0a
      0000A0 0D                    2722 	.db 0x0d
      0000A1 00                    2723 	.db 0x00
                                   2724 	.area CSEG    (CODE)
                                   2725 	.area CONST   (CODE)
      0000A2                       2726 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  2727 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    2728 	.db 0x0a
      0000B5 0D                    2729 	.db 0x0d
      0000B6 00                    2730 	.db 0x00
                                   2731 	.area CSEG    (CODE)
                                   2732 	.area CONST   (CODE)
      0000B7                       2733 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  2734 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    2735 	.db 0x0a
      0000C7 0D                    2736 	.db 0x0d
      0000C8 00                    2737 	.db 0x00
                                   2738 	.area CSEG    (CODE)
                                   2739 	.area CONST   (CODE)
      0000C9                       2740 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  2741 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    2742 	.db 0x0a
      0000E1 0D                    2743 	.db 0x0d
      0000E2 00                    2744 	.db 0x00
                                   2745 	.area CSEG    (CODE)
                                   2746 	.area CONST   (CODE)
      0000E3                       2747 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  2748 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    2749 	.db 0x0a
      0000F6 0D                    2750 	.db 0x0d
      0000F7 00                    2751 	.db 0x00
                                   2752 	.area CSEG    (CODE)
                                   2753 	.area CONST   (CODE)
      0000F8                       2754 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  2755 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    2756 	.db 0x0a
      00010F 0D                    2757 	.db 0x0d
      000110 00                    2758 	.db 0x00
                                   2759 	.area CSEG    (CODE)
                                   2760 	.area CONST   (CODE)
      000111                       2761 ___str_13:
      000111 42 20 2D 2D 3E 20 49  2762 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2763 	.db 0x0a
      000127 0D                    2764 	.db 0x0d
      000128 00                    2765 	.db 0x00
                                   2766 	.area CSEG    (CODE)
                                   2767 	.area CONST   (CODE)
      000129                       2768 ___str_14:
      000129 43 20 2D 2D 3E 20 48  2769 	.ascii "C --> Hard Reset(nRESET pin)"
             61 72 64 20 52 65 73
             65 74 28 6E 52 45 53
             45 54 20 70 69 6E 29
      000145 0A                    2770 	.db 0x0a
      000146 0D                    2771 	.db 0x0d
      000147 00                    2772 	.db 0x00
                                   2773 	.area CSEG    (CODE)
                                   2774 	.area CONST   (CODE)
      000148                       2775 ___str_15:
      000148 44 20 2D 2D 3E 20 50  2776 	.ascii "D --> Process TCP"
             72 6F 63 65 73 73 20
             54 43 50
      000159 0A                    2777 	.db 0x0a
      00015A 0D                    2778 	.db 0x0d
      00015B 00                    2779 	.db 0x00
                                   2780 	.area CSEG    (CODE)
                                   2781 	.area CONST   (CODE)
      00015C                       2782 ___str_16:
      00015C 45 20 2D 2D 3E 20 45  2783 	.ascii "E --> Enable TX interrupt"
             6E 61 62 6C 65 20 54
             58 20 69 6E 74 65 72
             72 75 70 74
      000175 0A                    2784 	.db 0x0a
      000176 0D                    2785 	.db 0x0d
      000177 00                    2786 	.db 0x00
                                   2787 	.area CSEG    (CODE)
                                   2788 	.area CONST   (CODE)
      000178                       2789 ___str_17:
      000178 46 20 2D 2D 3E 20 44  2790 	.ascii "F --> Disabling TX interrupt"
             69 73 61 62 6C 69 6E
             67 20 54 58 20 69 6E
             74 65 72 72 75 70 74
      000194 0A                    2791 	.db 0x0a
      000195 0D                    2792 	.db 0x0d
      000196 00                    2793 	.db 0x00
                                   2794 	.area CSEG    (CODE)
                                   2795 	.area CONST   (CODE)
      000197                       2796 ___str_18:
      000197 45 6E 74 65 72 20 74  2797 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      0001B9 0A                    2798 	.db 0x0a
      0001BA 0D                    2799 	.db 0x0d
      0001BB 00                    2800 	.db 0x00
                                   2801 	.area CSEG    (CODE)
                                   2802 	.area CONST   (CODE)
      0001BC                       2803 ___str_19:
      0001BC 45 6E 74 65 72 20 74  2804 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      0001E6 0A                    2805 	.db 0x0a
      0001E7 0D                    2806 	.db 0x0d
      0001E8 00                    2807 	.db 0x00
                                   2808 	.area CSEG    (CODE)
                                   2809 	.area CONST   (CODE)
      0001E9                       2810 ___str_20:
      0001E9 45 6E 74 65 72 20 74  2811 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      00020A 0A                    2812 	.db 0x0a
      00020B 0D                    2813 	.db 0x0d
      00020C 00                    2814 	.db 0x00
                                   2815 	.area CSEG    (CODE)
                                   2816 	.area CONST   (CODE)
      00020D                       2817 ___str_21:
      00020D 45 6E 74 65 72 20 74  2818 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      000230 0A                    2819 	.db 0x0a
      000231 0D                    2820 	.db 0x0d
      000232 00                    2821 	.db 0x00
                                   2822 	.area CSEG    (CODE)
                                   2823 	.area CONST   (CODE)
      000233                       2824 ___str_22:
      000233 45 6E 74 65 72 20 74  2825 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      00024E 0A                    2826 	.db 0x0a
      00024F 0D                    2827 	.db 0x0d
      000250 00                    2828 	.db 0x00
                                   2829 	.area CSEG    (CODE)
                                   2830 	.area CONST   (CODE)
      000251                       2831 ___str_23:
      000251 45 6E 74 65 72 20 25  2832 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000271 0A                    2833 	.db 0x0a
      000272 0D                    2834 	.db 0x0d
      000273 00                    2835 	.db 0x00
                                   2836 	.area CSEG    (CODE)
                                   2837 	.area CONST   (CODE)
      000274                       2838 ___str_24:
      000274 42 79 74 65 20 25 64  2839 	.ascii "Byte %d: "
             3A 20
      00027D 00                    2840 	.db 0x00
                                   2841 	.area CSEG    (CODE)
                                   2842 	.area CONST   (CODE)
      00027E                       2843 ___str_25:
      00027E 45 6E 74 65 72 20 74  2844 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      0002A0 0A                    2845 	.db 0x0a
      0002A1 0D                    2846 	.db 0x0d
      0002A2 00                    2847 	.db 0x00
                                   2848 	.area CSEG    (CODE)
                                   2849 	.area CONST   (CODE)
      0002A3                       2850 ___str_26:
      0002A3 45 6E 74 65 72 20 74  2851 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      0002C9 0A                    2852 	.db 0x0a
      0002CA 0D                    2853 	.db 0x0d
      0002CB 00                    2854 	.db 0x00
                                   2855 	.area CSEG    (CODE)
                                   2856 	.area CONST   (CODE)
      0002CC                       2857 ___str_27:
      0002CC 45 6E 74 65 72 20 74  2858 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002F2 0A                    2859 	.db 0x0a
      0002F3 0D                    2860 	.db 0x0d
      0002F4 00                    2861 	.db 0x00
                                   2862 	.area CSEG    (CODE)
                                   2863 	.area CONST   (CODE)
      0002F5                       2864 ___str_28:
      0002F5 4D 41 43 20 52 65 67  2865 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      00030E 0A                    2866 	.db 0x0a
      00030F 0D                    2867 	.db 0x0d
      000310 00                    2868 	.db 0x00
                                   2869 	.area CSEG    (CODE)
                                   2870 	.area CONST   (CODE)
      000311                       2871 ___str_29:
      000311 45 6E 74 65 72 20 74  2872 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      000330 0A                    2873 	.db 0x0a
      000331 0D                    2874 	.db 0x0d
      000332 00                    2875 	.db 0x00
                                   2876 	.area CSEG    (CODE)
                                   2877 	.area CONST   (CODE)
      000333                       2878 ___str_30:
      000333 45 6E 74 65 72 20 74  2879 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      000352 0A                    2880 	.db 0x0a
      000353 0D                    2881 	.db 0x0d
      000354 00                    2882 	.db 0x00
                                   2883 	.area CSEG    (CODE)
                                   2884 	.area CONST   (CODE)
      000355                       2885 ___str_31:
      000355 50 48 59 20 57 72 69  2886 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      00036B 0A                    2887 	.db 0x0a
      00036C 0D                    2888 	.db 0x0d
      00036D 00                    2889 	.db 0x00
                                   2890 	.area CSEG    (CODE)
                                   2891 	.area CONST   (CODE)
      00036E                       2892 ___str_32:
      00036E 45 6E 74 65 72 20 74  2893 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000395 0A                    2894 	.db 0x0a
      000396 0D                    2895 	.db 0x0d
      000397 00                    2896 	.db 0x00
                                   2897 	.area CSEG    (CODE)
                                   2898 	.area CONST   (CODE)
      000398                       2899 ___str_33:
      000398 50 48 59 20 52 65 61  2900 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      0003AD 0A                    2901 	.db 0x0a
      0003AE 0D                    2902 	.db 0x0d
      0003AF 00                    2903 	.db 0x00
                                   2904 	.area CSEG    (CODE)
                                   2905 	.area CONST   (CODE)
      0003B0                       2906 ___str_34:
      0003B0 52 65 73 65 74 74 69  2907 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      0003C5 0A                    2908 	.db 0x0a
      0003C6 0D                    2909 	.db 0x0d
      0003C7 00                    2910 	.db 0x00
                                   2911 	.area CSEG    (CODE)
                                   2912 	.area CONST   (CODE)
      0003C8                       2913 ___str_35:
      0003C8 45 6E 74 65 72 20 74  2914 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003EF 0A                    2915 	.db 0x0a
      0003F0 0D                    2916 	.db 0x0d
      0003F1 00                    2917 	.db 0x00
                                   2918 	.area CSEG    (CODE)
                                   2919 	.area CONST   (CODE)
      0003F2                       2920 ___str_36:
      0003F2 45 6E 74 65 72 20 74  2921 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      00040A 0A                    2922 	.db 0x0a
      00040B 0D                    2923 	.db 0x0d
      00040C 00                    2924 	.db 0x00
                                   2925 	.area CSEG    (CODE)
                                   2926 	.area CONST   (CODE)
      00040D                       2927 ___str_37:
      00040D 45 54 48 20 52 65 67  2928 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      000426 0A                    2929 	.db 0x0a
      000427 0D                    2930 	.db 0x0d
      000428 00                    2931 	.db 0x00
                                   2932 	.area CSEG    (CODE)
                                   2933 	.area CONST   (CODE)
      000429                       2934 ___str_38:
      000429 56 61 6C 69 64 20 45  2935 	.ascii "Valid ETHER packet....................."
             54 48 45 52 20 70 61
             63 6B 65 74 2E 2E 2E
             2E 2E 2E 2E 2E 2E 2E
             2E 2E 2E 2E 2E 2E 2E
             2E 2E 2E 2E
      000450 0A                    2936 	.db 0x0a
      000451 0D                    2937 	.db 0x0d
      000452 00                    2938 	.db 0x00
                                   2939 	.area CSEG    (CODE)
                                   2940 	.area CONST   (CODE)
      000453                       2941 ___str_39:
      000453 0A                    2942 	.db 0x0a
      000454 50 72 6F 63 65 73 73  2943 	.ascii "Processed response data:"
             65 64 20 72 65 73 70
             6F 6E 73 65 20 64 61
             74 61 3A
      00046C 0A                    2944 	.db 0x0a
      00046D 00                    2945 	.db 0x00
                                   2946 	.area CSEG    (CODE)
                                   2947 	.area CONST   (CODE)
      00046E                       2948 ___str_40:
      00046E 0A                    2949 	.db 0x0a
      00046F 4E 6F 20 72 65 73 70  2950 	.ascii "No response generated by TCP packet processing."
             6F 6E 73 65 20 67 65
             6E 65 72 61 74 65 64
             20 62 79 20 54 43 50
             20 70 61 63 6B 65 74
             20 70 72 6F 63 65 73
             73 69 6E 67 2E
      00049E 0A                    2951 	.db 0x0a
      00049F 00                    2952 	.db 0x00
                                   2953 	.area CSEG    (CODE)
                                   2954 	.area CONST   (CODE)
      0004A0                       2955 ___str_41:
      0004A0 59 45 53 53 53 53     2956 	.ascii "YESSSS"
      0004A6 0A                    2957 	.db 0x0a
      0004A7 00                    2958 	.db 0x00
                                   2959 	.area CSEG    (CODE)
                                   2960 	.area CONST   (CODE)
      0004A8                       2961 ___str_42:
      0004A8 4E 4F 4F 4F 4F        2962 	.ascii "NOOOO"
      0004AD 0A                    2963 	.db 0x0a
      0004AE 00                    2964 	.db 0x00
                                   2965 	.area CSEG    (CODE)
                                   2966 	.area CONST   (CODE)
      0004AF                       2967 ___str_43:
      0004AF 6E 65 78 74 50 61 63  2968 	.ascii "nextPacket: 0x%04X"
             6B 65 74 3A 20 30 78
             25 30 34 58
      0004C1 0A                    2969 	.db 0x0a
      0004C2 00                    2970 	.db 0x00
                                   2971 	.area CSEG    (CODE)
                                   2972 	.area CONST   (CODE)
      0004C3                       2973 ___str_44:
      0004C3 62 79 74 65 43 6F 75  2974 	.ascii "byteCount: %d"
             6E 74 3A 20 25 64
      0004D0 0A                    2975 	.db 0x0a
      0004D1 00                    2976 	.db 0x00
                                   2977 	.area CSEG    (CODE)
                                   2978 	.area CONST   (CODE)
      0004D2                       2979 ___str_45:
      0004D2 73 74 61 74 75 73 3A  2980 	.ascii "status: 0x%02X"
             20 30 78 25 30 32 58
      0004E0 0A                    2981 	.db 0x0a
      0004E1 00                    2982 	.db 0x00
                                   2983 	.area CSEG    (CODE)
                                   2984 	.area CONST   (CODE)
      0004E2                       2985 ___str_46:
      0004E2 20 52 65 73 65 74 74  2986 	.ascii " Resetting ENC using RESET pin in Hardware(P1_0)"
             69 6E 67 20 45 4E 43
             20 75 73 69 6E 67 20
             52 45 53 45 54 20 70
             69 6E 20 69 6E 20 48
             61 72 64 77 61 72 65
             28 50 31 5F 30 29
      000512 0A                    2987 	.db 0x0a
      000513 0D                    2988 	.db 0x0d
      000514 00                    2989 	.db 0x00
                                   2990 	.area CSEG    (CODE)
                                   2991 	.area CONST   (CODE)
      000515                       2992 ___str_47:
      000515 45 6E 61 62 6C 69 6E  2993 	.ascii "Enabling TXPKTIE"
             67 20 54 58 50 4B 54
             49 45
      000525 0A                    2994 	.db 0x0a
      000526 0D                    2995 	.db 0x0d
      000527 00                    2996 	.db 0x00
                                   2997 	.area CSEG    (CODE)
                                   2998 	.area CONST   (CODE)
      000528                       2999 ___str_48:
      000528 44 69 73 61 62 6C 69  3000 	.ascii "Disabling TXPKTIE"
             6E 67 20 54 58 50 4B
             54 49 45
      000539 0A                    3001 	.db 0x0a
      00053A 0D                    3002 	.db 0x0d
      00053B 00                    3003 	.db 0x00
                                   3004 	.area CSEG    (CODE)
                                   3005 	.area CONST   (CODE)
      00053C                       3006 ___str_49:
      00053C 49 6E 76 61 6C 69 64  3007 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      000569 0A                    3008 	.db 0x0a
      00056A 0D                    3009 	.db 0x0d
      00056B 00                    3010 	.db 0x00
                                   3011 	.area CSEG    (CODE)
                                   3012 	.area XINIT   (CODE)
      000000                       3013 __xinit__device_mac:
      000000 02                    3014 	.db #0x02	; 2
      000001 11                    3015 	.db #0x11	; 17
      000002 22                    3016 	.db #0x22	; 34
      000003 33                    3017 	.db #0x33	; 51	'3'
      000004 44                    3018 	.db #0x44	; 68	'D'
      000005 55                    3019 	.db #0x55	; 85	'U'
      000006                       3020 __xinit__target_mac:
      000006 F8                    3021 	.db #0xf8	; 248
      000007 75                    3022 	.db #0x75	; 117	'u'
      000008 A4                    3023 	.db #0xa4	; 164
      000009 8C                    3024 	.db #0x8c	; 140
      00000A 41                    3025 	.db #0x41	; 65	'A'
      00000B 31                    3026 	.db #0x31	; 49	'1'
      00000C                       3027 __xinit__device_ip:
      00000C C0                    3028 	.db #0xc0	; 192
      00000D A8                    3029 	.db #0xa8	; 168
      00000E 01                    3030 	.db #0x01	; 1
      00000F 64                    3031 	.db #0x64	; 100	'd'
      000010                       3032 __xinit__target_ip:
      000010 C0                    3033 	.db #0xc0	; 192
      000011 A8                    3034 	.db #0xa8	; 168
      000012 01                    3035 	.db #0x01	; 1
      000013 01                    3036 	.db #0x01	; 1
                                   3037 	.area CABS    (ABS,CODE)
