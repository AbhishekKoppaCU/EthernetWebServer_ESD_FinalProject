                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _enc_init
                                     15 	.globl _send_arp_request
                                     16 	.globl _spi_control_write
                                     17 	.globl _eth_spi_read
                                     18 	.globl _phy_spi_write
                                     19 	.globl _phy_spi_read
                                     20 	.globl _spi_buffer_write
                                     21 	.globl _spi_buffer_read
                                     22 	.globl _mac_spi_read
                                     23 	.globl _enc_reset
                                     24 	.globl _configure_SPI
                                     25 	.globl _printf_tiny
                                     26 	.globl _putchar
                                     27 	.globl _getchar
                                     28 	.globl _printf
                                     29 	.globl _TF1
                                     30 	.globl _TR1
                                     31 	.globl _TF0
                                     32 	.globl _TR0
                                     33 	.globl _IE1
                                     34 	.globl _IT1
                                     35 	.globl _IE0
                                     36 	.globl _IT0
                                     37 	.globl _SM0
                                     38 	.globl _SM1
                                     39 	.globl _SM2
                                     40 	.globl _REN
                                     41 	.globl _TB8
                                     42 	.globl _RB8
                                     43 	.globl _TI
                                     44 	.globl _RI
                                     45 	.globl _CY
                                     46 	.globl _AC
                                     47 	.globl _F0
                                     48 	.globl _RS1
                                     49 	.globl _RS0
                                     50 	.globl _OV
                                     51 	.globl _F1
                                     52 	.globl _P
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD0
                                     60 	.globl _TXD
                                     61 	.globl _RXD0
                                     62 	.globl _RXD
                                     63 	.globl _P3_7
                                     64 	.globl _P3_6
                                     65 	.globl _P3_5
                                     66 	.globl _P3_4
                                     67 	.globl _P3_3
                                     68 	.globl _P3_2
                                     69 	.globl _P3_1
                                     70 	.globl _P3_0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _P1_7
                                     80 	.globl _P1_6
                                     81 	.globl _P1_5
                                     82 	.globl _P1_4
                                     83 	.globl _P1_3
                                     84 	.globl _P1_2
                                     85 	.globl _P1_1
                                     86 	.globl _P1_0
                                     87 	.globl _P0_7
                                     88 	.globl _P0_6
                                     89 	.globl _P0_5
                                     90 	.globl _P0_4
                                     91 	.globl _P0_3
                                     92 	.globl _P0_2
                                     93 	.globl _P0_1
                                     94 	.globl _P0_0
                                     95 	.globl _PS
                                     96 	.globl _PT1
                                     97 	.globl _PX1
                                     98 	.globl _PT0
                                     99 	.globl _PX0
                                    100 	.globl _EA
                                    101 	.globl _ES
                                    102 	.globl _ET1
                                    103 	.globl _EX1
                                    104 	.globl _ET0
                                    105 	.globl _EX0
                                    106 	.globl _BREG_F7
                                    107 	.globl _BREG_F6
                                    108 	.globl _BREG_F5
                                    109 	.globl _BREG_F4
                                    110 	.globl _BREG_F3
                                    111 	.globl _BREG_F2
                                    112 	.globl _BREG_F1
                                    113 	.globl _BREG_F0
                                    114 	.globl _P5_7
                                    115 	.globl _P5_6
                                    116 	.globl _P5_5
                                    117 	.globl _P5_4
                                    118 	.globl _P5_3
                                    119 	.globl _P5_2
                                    120 	.globl _P5_1
                                    121 	.globl _P5_0
                                    122 	.globl _P4_7
                                    123 	.globl _P4_6
                                    124 	.globl _P4_5
                                    125 	.globl _P4_4
                                    126 	.globl _P4_3
                                    127 	.globl _P4_2
                                    128 	.globl _P4_1
                                    129 	.globl _P4_0
                                    130 	.globl _PX0L
                                    131 	.globl _PT0L
                                    132 	.globl _PX1L
                                    133 	.globl _PT1L
                                    134 	.globl _PSL
                                    135 	.globl _PT2L
                                    136 	.globl _PPCL
                                    137 	.globl _EC
                                    138 	.globl _CCF0
                                    139 	.globl _CCF1
                                    140 	.globl _CCF2
                                    141 	.globl _CCF3
                                    142 	.globl _CCF4
                                    143 	.globl _CR
                                    144 	.globl _CF
                                    145 	.globl _TF2
                                    146 	.globl _EXF2
                                    147 	.globl _RCLK
                                    148 	.globl _TCLK
                                    149 	.globl _EXEN2
                                    150 	.globl _TR2
                                    151 	.globl _C_T2
                                    152 	.globl _CP_RL2
                                    153 	.globl _T2CON_7
                                    154 	.globl _T2CON_6
                                    155 	.globl _T2CON_5
                                    156 	.globl _T2CON_4
                                    157 	.globl _T2CON_3
                                    158 	.globl _T2CON_2
                                    159 	.globl _T2CON_1
                                    160 	.globl _T2CON_0
                                    161 	.globl _PT2
                                    162 	.globl _ET2
                                    163 	.globl _TMOD
                                    164 	.globl _TL1
                                    165 	.globl _TL0
                                    166 	.globl _TH1
                                    167 	.globl _TH0
                                    168 	.globl _TCON
                                    169 	.globl _SP
                                    170 	.globl _SCON
                                    171 	.globl _SBUF0
                                    172 	.globl _SBUF
                                    173 	.globl _PSW
                                    174 	.globl _PCON
                                    175 	.globl _P3
                                    176 	.globl _P2
                                    177 	.globl _P1
                                    178 	.globl _P0
                                    179 	.globl _IP
                                    180 	.globl _IE
                                    181 	.globl _DP0L
                                    182 	.globl _DPL
                                    183 	.globl _DP0H
                                    184 	.globl _DPH
                                    185 	.globl _B
                                    186 	.globl _ACC
                                    187 	.globl _EECON
                                    188 	.globl _KBF
                                    189 	.globl _KBE
                                    190 	.globl _KBLS
                                    191 	.globl _BRL
                                    192 	.globl _BDRCON
                                    193 	.globl _T2MOD
                                    194 	.globl _SPDAT
                                    195 	.globl _SPSTA
                                    196 	.globl _SPCON
                                    197 	.globl _SADEN
                                    198 	.globl _SADDR
                                    199 	.globl _WDTPRG
                                    200 	.globl _WDTRST
                                    201 	.globl _P5
                                    202 	.globl _P4
                                    203 	.globl _IPH1
                                    204 	.globl _IPL1
                                    205 	.globl _IPH0
                                    206 	.globl _IPL0
                                    207 	.globl _IEN1
                                    208 	.globl _IEN0
                                    209 	.globl _CMOD
                                    210 	.globl _CL
                                    211 	.globl _CH
                                    212 	.globl _CCON
                                    213 	.globl _CCAPM4
                                    214 	.globl _CCAPM3
                                    215 	.globl _CCAPM2
                                    216 	.globl _CCAPM1
                                    217 	.globl _CCAPM0
                                    218 	.globl _CCAP4L
                                    219 	.globl _CCAP3L
                                    220 	.globl _CCAP2L
                                    221 	.globl _CCAP1L
                                    222 	.globl _CCAP0L
                                    223 	.globl _CCAP4H
                                    224 	.globl _CCAP3H
                                    225 	.globl _CCAP2H
                                    226 	.globl _CCAP1H
                                    227 	.globl _CCAP0H
                                    228 	.globl _CKCON1
                                    229 	.globl _CKCON0
                                    230 	.globl _CKRL
                                    231 	.globl _AUXR1
                                    232 	.globl _AUXR
                                    233 	.globl _TH2
                                    234 	.globl _TL2
                                    235 	.globl _RCAP2H
                                    236 	.globl _RCAP2L
                                    237 	.globl _T2CON
                                    238 	.globl _target_ip
                                    239 	.globl _device_ip
                                    240 	.globl _target_mac
                                    241 	.globl _device_mac
                                    242 ;--------------------------------------------------------
                                    243 ; special function registers
                                    244 ;--------------------------------------------------------
                                    245 	.area RSEG    (ABS,DATA)
      000000                        246 	.org 0x0000
                           0000C8   247 _T2CON	=	0x00c8
                           0000CA   248 _RCAP2L	=	0x00ca
                           0000CB   249 _RCAP2H	=	0x00cb
                           0000CC   250 _TL2	=	0x00cc
                           0000CD   251 _TH2	=	0x00cd
                           00008E   252 _AUXR	=	0x008e
                           0000A2   253 _AUXR1	=	0x00a2
                           000097   254 _CKRL	=	0x0097
                           00008F   255 _CKCON0	=	0x008f
                           0000AF   256 _CKCON1	=	0x00af
                           0000FA   257 _CCAP0H	=	0x00fa
                           0000FB   258 _CCAP1H	=	0x00fb
                           0000FC   259 _CCAP2H	=	0x00fc
                           0000FD   260 _CCAP3H	=	0x00fd
                           0000FE   261 _CCAP4H	=	0x00fe
                           0000EA   262 _CCAP0L	=	0x00ea
                           0000EB   263 _CCAP1L	=	0x00eb
                           0000EC   264 _CCAP2L	=	0x00ec
                           0000ED   265 _CCAP3L	=	0x00ed
                           0000EE   266 _CCAP4L	=	0x00ee
                           0000DA   267 _CCAPM0	=	0x00da
                           0000DB   268 _CCAPM1	=	0x00db
                           0000DC   269 _CCAPM2	=	0x00dc
                           0000DD   270 _CCAPM3	=	0x00dd
                           0000DE   271 _CCAPM4	=	0x00de
                           0000D8   272 _CCON	=	0x00d8
                           0000F9   273 _CH	=	0x00f9
                           0000E9   274 _CL	=	0x00e9
                           0000D9   275 _CMOD	=	0x00d9
                           0000A8   276 _IEN0	=	0x00a8
                           0000B1   277 _IEN1	=	0x00b1
                           0000B8   278 _IPL0	=	0x00b8
                           0000B7   279 _IPH0	=	0x00b7
                           0000B2   280 _IPL1	=	0x00b2
                           0000B3   281 _IPH1	=	0x00b3
                           0000C0   282 _P4	=	0x00c0
                           0000E8   283 _P5	=	0x00e8
                           0000A6   284 _WDTRST	=	0x00a6
                           0000A7   285 _WDTPRG	=	0x00a7
                           0000A9   286 _SADDR	=	0x00a9
                           0000B9   287 _SADEN	=	0x00b9
                           0000C3   288 _SPCON	=	0x00c3
                           0000C4   289 _SPSTA	=	0x00c4
                           0000C5   290 _SPDAT	=	0x00c5
                           0000C9   291 _T2MOD	=	0x00c9
                           00009B   292 _BDRCON	=	0x009b
                           00009A   293 _BRL	=	0x009a
                           00009C   294 _KBLS	=	0x009c
                           00009D   295 _KBE	=	0x009d
                           00009E   296 _KBF	=	0x009e
                           0000D2   297 _EECON	=	0x00d2
                           0000E0   298 _ACC	=	0x00e0
                           0000F0   299 _B	=	0x00f0
                           000083   300 _DPH	=	0x0083
                           000083   301 _DP0H	=	0x0083
                           000082   302 _DPL	=	0x0082
                           000082   303 _DP0L	=	0x0082
                           0000A8   304 _IE	=	0x00a8
                           0000B8   305 _IP	=	0x00b8
                           000080   306 _P0	=	0x0080
                           000090   307 _P1	=	0x0090
                           0000A0   308 _P2	=	0x00a0
                           0000B0   309 _P3	=	0x00b0
                           000087   310 _PCON	=	0x0087
                           0000D0   311 _PSW	=	0x00d0
                           000099   312 _SBUF	=	0x0099
                           000099   313 _SBUF0	=	0x0099
                           000098   314 _SCON	=	0x0098
                           000081   315 _SP	=	0x0081
                           000088   316 _TCON	=	0x0088
                           00008C   317 _TH0	=	0x008c
                           00008D   318 _TH1	=	0x008d
                           00008A   319 _TL0	=	0x008a
                           00008B   320 _TL1	=	0x008b
                           000089   321 _TMOD	=	0x0089
                                    322 ;--------------------------------------------------------
                                    323 ; special function bits
                                    324 ;--------------------------------------------------------
                                    325 	.area RSEG    (ABS,DATA)
      000000                        326 	.org 0x0000
                           0000AD   327 _ET2	=	0x00ad
                           0000BD   328 _PT2	=	0x00bd
                           0000C8   329 _T2CON_0	=	0x00c8
                           0000C9   330 _T2CON_1	=	0x00c9
                           0000CA   331 _T2CON_2	=	0x00ca
                           0000CB   332 _T2CON_3	=	0x00cb
                           0000CC   333 _T2CON_4	=	0x00cc
                           0000CD   334 _T2CON_5	=	0x00cd
                           0000CE   335 _T2CON_6	=	0x00ce
                           0000CF   336 _T2CON_7	=	0x00cf
                           0000C8   337 _CP_RL2	=	0x00c8
                           0000C9   338 _C_T2	=	0x00c9
                           0000CA   339 _TR2	=	0x00ca
                           0000CB   340 _EXEN2	=	0x00cb
                           0000CC   341 _TCLK	=	0x00cc
                           0000CD   342 _RCLK	=	0x00cd
                           0000CE   343 _EXF2	=	0x00ce
                           0000CF   344 _TF2	=	0x00cf
                           0000DF   345 _CF	=	0x00df
                           0000DE   346 _CR	=	0x00de
                           0000DC   347 _CCF4	=	0x00dc
                           0000DB   348 _CCF3	=	0x00db
                           0000DA   349 _CCF2	=	0x00da
                           0000D9   350 _CCF1	=	0x00d9
                           0000D8   351 _CCF0	=	0x00d8
                           0000AE   352 _EC	=	0x00ae
                           0000BE   353 _PPCL	=	0x00be
                           0000BD   354 _PT2L	=	0x00bd
                           0000BC   355 _PSL	=	0x00bc
                           0000BB   356 _PT1L	=	0x00bb
                           0000BA   357 _PX1L	=	0x00ba
                           0000B9   358 _PT0L	=	0x00b9
                           0000B8   359 _PX0L	=	0x00b8
                           0000C0   360 _P4_0	=	0x00c0
                           0000C1   361 _P4_1	=	0x00c1
                           0000C2   362 _P4_2	=	0x00c2
                           0000C3   363 _P4_3	=	0x00c3
                           0000C4   364 _P4_4	=	0x00c4
                           0000C5   365 _P4_5	=	0x00c5
                           0000C6   366 _P4_6	=	0x00c6
                           0000C7   367 _P4_7	=	0x00c7
                           0000E8   368 _P5_0	=	0x00e8
                           0000E9   369 _P5_1	=	0x00e9
                           0000EA   370 _P5_2	=	0x00ea
                           0000EB   371 _P5_3	=	0x00eb
                           0000EC   372 _P5_4	=	0x00ec
                           0000ED   373 _P5_5	=	0x00ed
                           0000EE   374 _P5_6	=	0x00ee
                           0000EF   375 _P5_7	=	0x00ef
                           0000F0   376 _BREG_F0	=	0x00f0
                           0000F1   377 _BREG_F1	=	0x00f1
                           0000F2   378 _BREG_F2	=	0x00f2
                           0000F3   379 _BREG_F3	=	0x00f3
                           0000F4   380 _BREG_F4	=	0x00f4
                           0000F5   381 _BREG_F5	=	0x00f5
                           0000F6   382 _BREG_F6	=	0x00f6
                           0000F7   383 _BREG_F7	=	0x00f7
                           0000A8   384 _EX0	=	0x00a8
                           0000A9   385 _ET0	=	0x00a9
                           0000AA   386 _EX1	=	0x00aa
                           0000AB   387 _ET1	=	0x00ab
                           0000AC   388 _ES	=	0x00ac
                           0000AF   389 _EA	=	0x00af
                           0000B8   390 _PX0	=	0x00b8
                           0000B9   391 _PT0	=	0x00b9
                           0000BA   392 _PX1	=	0x00ba
                           0000BB   393 _PT1	=	0x00bb
                           0000BC   394 _PS	=	0x00bc
                           000080   395 _P0_0	=	0x0080
                           000081   396 _P0_1	=	0x0081
                           000082   397 _P0_2	=	0x0082
                           000083   398 _P0_3	=	0x0083
                           000084   399 _P0_4	=	0x0084
                           000085   400 _P0_5	=	0x0085
                           000086   401 _P0_6	=	0x0086
                           000087   402 _P0_7	=	0x0087
                           000090   403 _P1_0	=	0x0090
                           000091   404 _P1_1	=	0x0091
                           000092   405 _P1_2	=	0x0092
                           000093   406 _P1_3	=	0x0093
                           000094   407 _P1_4	=	0x0094
                           000095   408 _P1_5	=	0x0095
                           000096   409 _P1_6	=	0x0096
                           000097   410 _P1_7	=	0x0097
                           0000A0   411 _P2_0	=	0x00a0
                           0000A1   412 _P2_1	=	0x00a1
                           0000A2   413 _P2_2	=	0x00a2
                           0000A3   414 _P2_3	=	0x00a3
                           0000A4   415 _P2_4	=	0x00a4
                           0000A5   416 _P2_5	=	0x00a5
                           0000A6   417 _P2_6	=	0x00a6
                           0000A7   418 _P2_7	=	0x00a7
                           0000B0   419 _P3_0	=	0x00b0
                           0000B1   420 _P3_1	=	0x00b1
                           0000B2   421 _P3_2	=	0x00b2
                           0000B3   422 _P3_3	=	0x00b3
                           0000B4   423 _P3_4	=	0x00b4
                           0000B5   424 _P3_5	=	0x00b5
                           0000B6   425 _P3_6	=	0x00b6
                           0000B7   426 _P3_7	=	0x00b7
                           0000B0   427 _RXD	=	0x00b0
                           0000B0   428 _RXD0	=	0x00b0
                           0000B1   429 _TXD	=	0x00b1
                           0000B1   430 _TXD0	=	0x00b1
                           0000B2   431 _INT0	=	0x00b2
                           0000B3   432 _INT1	=	0x00b3
                           0000B4   433 _T0	=	0x00b4
                           0000B5   434 _T1	=	0x00b5
                           0000B6   435 _WR	=	0x00b6
                           0000B7   436 _RD	=	0x00b7
                           0000D0   437 _P	=	0x00d0
                           0000D1   438 _F1	=	0x00d1
                           0000D2   439 _OV	=	0x00d2
                           0000D3   440 _RS0	=	0x00d3
                           0000D4   441 _RS1	=	0x00d4
                           0000D5   442 _F0	=	0x00d5
                           0000D6   443 _AC	=	0x00d6
                           0000D7   444 _CY	=	0x00d7
                           000098   445 _RI	=	0x0098
                           000099   446 _TI	=	0x0099
                           00009A   447 _RB8	=	0x009a
                           00009B   448 _TB8	=	0x009b
                           00009C   449 _REN	=	0x009c
                           00009D   450 _SM2	=	0x009d
                           00009E   451 _SM1	=	0x009e
                           00009F   452 _SM0	=	0x009f
                           000088   453 _IT0	=	0x0088
                           000089   454 _IE0	=	0x0089
                           00008A   455 _IT1	=	0x008a
                           00008B   456 _IE1	=	0x008b
                           00008C   457 _TR0	=	0x008c
                           00008D   458 _TF0	=	0x008d
                           00008E   459 _TR1	=	0x008e
                           00008F   460 _TF1	=	0x008f
                                    461 ;--------------------------------------------------------
                                    462 ; overlayable register banks
                                    463 ;--------------------------------------------------------
                                    464 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        465 	.ds 8
                                    466 ;--------------------------------------------------------
                                    467 ; internal ram data
                                    468 ;--------------------------------------------------------
                                    469 	.area DSEG    (DATA)
                                    470 ;--------------------------------------------------------
                                    471 ; overlayable items in internal ram
                                    472 ;--------------------------------------------------------
                                    473 	.area	OSEG    (OVR,DATA)
      000000                        474 _hex_to_int_sloc0_1_0:
      000000                        475 	.ds 3
      000003                        476 _hex_to_int_sloc1_1_0:
      000003                        477 	.ds 1
      000004                        478 _hex_to_int_sloc2_1_0:
      000004                        479 	.ds 2
                                    480 ;--------------------------------------------------------
                                    481 ; Stack segment in internal ram
                                    482 ;--------------------------------------------------------
                                    483 	.area SSEG
      000000                        484 __start__stack:
      000000                        485 	.ds	1
                                    486 
                                    487 ;--------------------------------------------------------
                                    488 ; indirectly addressable internal ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area ISEG    (DATA)
                                    491 ;--------------------------------------------------------
                                    492 ; absolute internal ram data
                                    493 ;--------------------------------------------------------
                                    494 	.area IABS    (ABS,DATA)
                                    495 	.area IABS    (ABS,DATA)
                                    496 ;--------------------------------------------------------
                                    497 ; bit data
                                    498 ;--------------------------------------------------------
                                    499 	.area BSEG    (BIT)
                                    500 ;--------------------------------------------------------
                                    501 ; paged external ram data
                                    502 ;--------------------------------------------------------
                                    503 	.area PSEG    (PAG,XDATA)
                                    504 ;--------------------------------------------------------
                                    505 ; uninitialized external ram data
                                    506 ;--------------------------------------------------------
                                    507 	.area XSEG    (XDATA)
      000000                        508 _hex_to_int_str_10000_78:
      000000                        509 	.ds 3
      000003                        510 _hex_to_int_result_10000_79:
      000003                        511 	.ds 2
      000005                        512 _hex_to_int_ASCII_20000_80:
      000005                        513 	.ds 2
      000007                        514 _get_user_buffer_size_input_10000_85:
      000007                        515 	.ds 10
      000011                        516 _main_buffer_40003_98:
      000011                        517 	.ds 256
      000111                        518 _main_buffer_40003_103:
      000111                        519 	.ds 256
                                    520 ;--------------------------------------------------------
                                    521 ; absolute external ram data
                                    522 ;--------------------------------------------------------
                                    523 	.area XABS    (ABS,XDATA)
                                    524 ;--------------------------------------------------------
                                    525 ; initialized external ram data
                                    526 ;--------------------------------------------------------
                                    527 	.area XISEG   (XDATA)
      000000                        528 _device_mac::
      000000                        529 	.ds 6
      000006                        530 _target_mac::
      000006                        531 	.ds 6
      00000C                        532 _device_ip::
      00000C                        533 	.ds 4
      000010                        534 _target_ip::
      000010                        535 	.ds 4
                                    536 	.area HOME    (CODE)
                                    537 	.area GSINIT0 (CODE)
                                    538 	.area GSINIT1 (CODE)
                                    539 	.area GSINIT2 (CODE)
                                    540 	.area GSINIT3 (CODE)
                                    541 	.area GSINIT4 (CODE)
                                    542 	.area GSINIT5 (CODE)
                                    543 	.area GSINIT  (CODE)
                                    544 	.area GSFINAL (CODE)
                                    545 	.area CSEG    (CODE)
                                    546 ;--------------------------------------------------------
                                    547 ; interrupt vector
                                    548 ;--------------------------------------------------------
                                    549 	.area HOME    (CODE)
      000000                        550 __interrupt_vect:
      000000 02r00r00         [24]  551 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  552 	ljmp	_external_interrupt0_isr
                                    553 ;--------------------------------------------------------
                                    554 ; global & static initialisations
                                    555 ;--------------------------------------------------------
                                    556 	.area HOME    (CODE)
                                    557 	.area GSINIT  (CODE)
                                    558 	.area GSFINAL (CODE)
                                    559 	.area GSINIT  (CODE)
                                    560 	.globl __sdcc_gsinit_startup
                                    561 	.globl __sdcc_program_startup
                                    562 	.globl __start__stack
                                    563 	.globl __mcs51_genXINIT
                                    564 	.globl __mcs51_genXRAMCLEAR
                                    565 	.globl __mcs51_genRAMCLEAR
                                    566 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  567 	ljmp	__sdcc_program_startup
                                    568 ;--------------------------------------------------------
                                    569 ; Home
                                    570 ;--------------------------------------------------------
                                    571 	.area HOME    (CODE)
                                    572 	.area HOME    (CODE)
      000006                        573 __sdcc_program_startup:
      000006 02r02r3E         [24]  574 	ljmp	_main
                                    575 ;	return from main will return to caller
                                    576 ;--------------------------------------------------------
                                    577 ; code
                                    578 ;--------------------------------------------------------
                                    579 	.area CSEG    (CODE)
                                    580 ;------------------------------------------------------------
                                    581 ;Allocation info for local variables in function 'hex_to_int'
                                    582 ;------------------------------------------------------------
                                    583 ;str                       Allocated with name '_hex_to_int_str_10000_78'
                                    584 ;i                         Allocated with name '_hex_to_int_i_10000_79'
                                    585 ;result                    Allocated with name '_hex_to_int_result_10000_79'
                                    586 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_80'
                                    587 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    588 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    589 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    590 ;------------------------------------------------------------
                                    591 ;	main.c:22: int hex_to_int(char* str)
                                    592 ;	-----------------------------------------
                                    593 ;	 function hex_to_int
                                    594 ;	-----------------------------------------
      000000                        595 _hex_to_int:
                           000007   596 	ar7 = 0x07
                           000006   597 	ar6 = 0x06
                           000005   598 	ar5 = 0x05
                           000004   599 	ar4 = 0x04
                           000003   600 	ar3 = 0x03
                           000002   601 	ar2 = 0x02
                           000001   602 	ar1 = 0x01
                           000000   603 	ar0 = 0x00
      000000 AF F0            [24]  604 	mov	r7,b
      000002 AE 83            [24]  605 	mov	r6,dph
      000004 E5 82            [12]  606 	mov	a,dpl
      000006 90r00r00         [24]  607 	mov	dptr,#_hex_to_int_str_10000_78
      000009 F0               [24]  608 	movx	@dptr,a
      00000A EE               [12]  609 	mov	a,r6
      00000B A3               [24]  610 	inc	dptr
      00000C F0               [24]  611 	movx	@dptr,a
      00000D EF               [12]  612 	mov	a,r7
      00000E A3               [24]  613 	inc	dptr
      00000F F0               [24]  614 	movx	@dptr,a
                                    615 ;	main.c:25: int i = 0, result = 0;
      000010 90r00r03         [24]  616 	mov	dptr,#_hex_to_int_result_10000_79
      000013 E4               [12]  617 	clr	a
      000014 F0               [24]  618 	movx	@dptr,a
      000015 A3               [24]  619 	inc	dptr
      000016 F0               [24]  620 	movx	@dptr,a
                                    621 ;	main.c:26: while(str[i] != '\0')
      000017 90r00r00         [24]  622 	mov	dptr,#_hex_to_int_str_10000_78
      00001A E0               [24]  623 	movx	a,@dptr
      00001B FD               [12]  624 	mov	r5,a
      00001C A3               [24]  625 	inc	dptr
      00001D E0               [24]  626 	movx	a,@dptr
      00001E FE               [12]  627 	mov	r6,a
      00001F A3               [24]  628 	inc	dptr
      000020 E0               [24]  629 	movx	a,@dptr
      000021 FF               [12]  630 	mov	r7,a
      000022 8D 02            [24]  631 	mov	ar2,r5
      000024 8E 03            [24]  632 	mov	ar3,r6
      000026 8F 04            [24]  633 	mov	ar4,r7
      000028 8D*00            [24]  634 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  635 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  636 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  637 	mov	r0,#0x00
      000030 79 00            [12]  638 	mov	r1,#0x00
      000032                        639 00112$:
      000032 C0 02            [24]  640 	push	ar2
      000034 C0 03            [24]  641 	push	ar3
      000036 C0 04            [24]  642 	push	ar4
      000038 E8               [12]  643 	mov	a,r0
      000039 25*00            [12]  644 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  645 	mov	r2,a
      00003C E9               [12]  646 	mov	a,r1
      00003D 35*01            [12]  647 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  648 	mov	r3,a
      000040 AC*02            [24]  649 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  650 	mov	dpl,r2
      000044 8B 83            [24]  651 	mov	dph,r3
      000046 8C F0            [24]  652 	mov	b,r4
      000048 12r00r00         [24]  653 	lcall	__gptrget
      00004B F5*03            [12]  654 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  655 	pop	ar4
      00004F D0 03            [24]  656 	pop	ar3
      000051 D0 02            [24]  657 	pop	ar2
      000053 E5*03            [12]  658 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  659 	jnz	00166$
      000057 02r01rAE         [24]  660 	ljmp	00114$
      00005A                        661 00166$:
                                    662 ;	main.c:28: int ASCII = (int)str[i];
      00005A C0 02            [24]  663 	push	ar2
      00005C C0 03            [24]  664 	push	ar3
      00005E C0 04            [24]  665 	push	ar4
      000060 85*03*04         [24]  666 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  667 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  668 	mov	dptr,#_hex_to_int_ASCII_20000_80
      000069 E5*04            [12]  669 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  670 	movx	@dptr,a
      00006C E5*05            [12]  671 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  672 	inc	dptr
      00006F F0               [24]  673 	movx	@dptr,a
                                    674 ;	main.c:29: result *= 16;
      000070 90r00r03         [24]  675 	mov	dptr,#_hex_to_int_result_10000_79
      000073 E0               [24]  676 	movx	a,@dptr
      000074 FB               [12]  677 	mov	r3,a
      000075 A3               [24]  678 	inc	dptr
      000076 E0               [24]  679 	movx	a,@dptr
      000077 C4               [12]  680 	swap	a
      000078 54 F0            [12]  681 	anl	a,#0xf0
      00007A CB               [12]  682 	xch	a,r3
      00007B C4               [12]  683 	swap	a
      00007C CB               [12]  684 	xch	a,r3
      00007D 6B               [12]  685 	xrl	a,r3
      00007E CB               [12]  686 	xch	a,r3
      00007F 54 F0            [12]  687 	anl	a,#0xf0
      000081 CB               [12]  688 	xch	a,r3
      000082 6B               [12]  689 	xrl	a,r3
      000083 FC               [12]  690 	mov	r4,a
      000084 90r00r03         [24]  691 	mov	dptr,#_hex_to_int_result_10000_79
      000087 EB               [12]  692 	mov	a,r3
      000088 F0               [24]  693 	movx	@dptr,a
      000089 EC               [12]  694 	mov	a,r4
      00008A A3               [24]  695 	inc	dptr
      00008B F0               [24]  696 	movx	@dptr,a
                                    697 ;	main.c:30: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  698 	clr	c
      00008D E5*04            [12]  699 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  700 	subb	a,#0x30
      000091 E5*05            [12]  701 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  702 	xrl	a,#0x80
      000095 94 80            [12]  703 	subb	a,#0x80
      000097 D0 04            [24]  704 	pop	ar4
      000099 D0 03            [24]  705 	pop	ar3
      00009B D0 02            [24]  706 	pop	ar2
      00009D 40 3F            [24]  707 	jc	00109$
      00009F 74 39            [12]  708 	mov	a,#0x39
      0000A1 95*04            [12]  709 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  710 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  711 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  712 	xrl	b,#0x80
      0000AB 95 F0            [12]  713 	subb	a,b
      0000AD 40 2F            [24]  714 	jc	00109$
                                    715 ;	main.c:32: result += str[i] - 48;
      0000AF C0 02            [24]  716 	push	ar2
      0000B1 C0 03            [24]  717 	push	ar3
      0000B3 C0 04            [24]  718 	push	ar4
      0000B5 E5*04            [12]  719 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  720 	add	a,#0xd0
      0000B9 F5*04            [12]  721 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  722 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  723 	addc	a,#0xff
      0000BF F5*05            [12]  724 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  725 	mov	dptr,#_hex_to_int_result_10000_79
      0000C4 E0               [24]  726 	movx	a,@dptr
      0000C5 FA               [12]  727 	mov	r2,a
      0000C6 A3               [24]  728 	inc	dptr
      0000C7 E0               [24]  729 	movx	a,@dptr
      0000C8 FC               [12]  730 	mov	r4,a
      0000C9 90r00r03         [24]  731 	mov	dptr,#_hex_to_int_result_10000_79
      0000CC E5*04            [12]  732 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  733 	add	a, r2
      0000CF F0               [24]  734 	movx	@dptr,a
      0000D0 E5*05            [12]  735 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  736 	addc	a, r4
      0000D3 A3               [24]  737 	inc	dptr
      0000D4 F0               [24]  738 	movx	@dptr,a
      0000D5 D0 04            [24]  739 	pop	ar4
      0000D7 D0 03            [24]  740 	pop	ar3
      0000D9 D0 02            [24]  741 	pop	ar2
      0000DB 02r01rA6         [24]  742 	ljmp	00110$
      0000DE                        743 00109$:
                                    744 ;	main.c:34: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  745 	mov	dptr,#_hex_to_int_ASCII_20000_80
      0000E1 E0               [24]  746 	movx	a,@dptr
      0000E2 F5*04            [12]  747 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  748 	inc	dptr
      0000E5 E0               [24]  749 	movx	a,@dptr
      0000E6 F5*05            [12]  750 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  751 	clr	c
      0000E9 E5*04            [12]  752 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  753 	subb	a,#0x41
      0000ED E5*05            [12]  754 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  755 	xrl	a,#0x80
      0000F1 94 80            [12]  756 	subb	a,#0x80
      0000F3 40 4E            [24]  757 	jc	00105$
      0000F5 74 46            [12]  758 	mov	a,#0x46
      0000F7 95*04            [12]  759 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  760 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  761 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  762 	xrl	b,#0x80
      000101 95 F0            [12]  763 	subb	a,b
      000103 40 3E            [24]  764 	jc	00105$
                                    765 ;	main.c:36: result += str[i] - 55;
      000105 C0 05            [24]  766 	push	ar5
      000107 C0 06            [24]  767 	push	ar6
      000109 C0 07            [24]  768 	push	ar7
      00010B E8               [12]  769 	mov	a,r0
      00010C 2A               [12]  770 	add	a, r2
      00010D FD               [12]  771 	mov	r5,a
      00010E E9               [12]  772 	mov	a,r1
      00010F 3B               [12]  773 	addc	a, r3
      000110 FE               [12]  774 	mov	r6,a
      000111 8C 07            [24]  775 	mov	ar7,r4
      000113 8D 82            [24]  776 	mov	dpl,r5
      000115 8E 83            [24]  777 	mov	dph,r6
      000117 8F F0            [24]  778 	mov	b,r7
      000119 12r00r00         [24]  779 	lcall	__gptrget
      00011C 7F 00            [12]  780 	mov	r7,#0x00
      00011E 24 C9            [12]  781 	add	a,#0xc9
      000120 F5*04            [12]  782 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  783 	mov	a,r7
      000123 34 FF            [12]  784 	addc	a,#0xff
      000125 F5*05            [12]  785 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  786 	mov	dptr,#_hex_to_int_result_10000_79
      00012A E0               [24]  787 	movx	a,@dptr
      00012B FE               [12]  788 	mov	r6,a
      00012C A3               [24]  789 	inc	dptr
      00012D E0               [24]  790 	movx	a,@dptr
      00012E FF               [12]  791 	mov	r7,a
      00012F 90r00r03         [24]  792 	mov	dptr,#_hex_to_int_result_10000_79
      000132 E5*04            [12]  793 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  794 	add	a, r6
      000135 F0               [24]  795 	movx	@dptr,a
      000136 E5*05            [12]  796 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  797 	addc	a, r7
      000139 A3               [24]  798 	inc	dptr
      00013A F0               [24]  799 	movx	@dptr,a
      00013B D0 07            [24]  800 	pop	ar7
      00013D D0 06            [24]  801 	pop	ar6
      00013F D0 05            [24]  802 	pop	ar5
      000141 80 63            [24]  803 	sjmp	00110$
      000143                        804 00105$:
                                    805 ;	main.c:38: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  806 	mov	dptr,#_hex_to_int_ASCII_20000_80
      000146 E0               [24]  807 	movx	a,@dptr
      000147 F5*04            [12]  808 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  809 	inc	dptr
      00014A E0               [24]  810 	movx	a,@dptr
      00014B F5*05            [12]  811 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  812 	clr	c
      00014E E5*04            [12]  813 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  814 	subb	a,#0x61
      000152 E5*05            [12]  815 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  816 	xrl	a,#0x80
      000156 94 80            [12]  817 	subb	a,#0x80
      000158 40 4C            [24]  818 	jc	00110$
      00015A 74 66            [12]  819 	mov	a,#0x66
      00015C 95*04            [12]  820 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  821 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  822 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  823 	xrl	b,#0x80
      000166 95 F0            [12]  824 	subb	a,b
      000168 40 3C            [24]  825 	jc	00110$
                                    826 ;	main.c:40: result += str[i] - 87;
      00016A C0 02            [24]  827 	push	ar2
      00016C C0 03            [24]  828 	push	ar3
      00016E C0 04            [24]  829 	push	ar4
      000170 E8               [12]  830 	mov	a,r0
      000171 2D               [12]  831 	add	a, r5
      000172 FA               [12]  832 	mov	r2,a
      000173 E9               [12]  833 	mov	a,r1
      000174 3E               [12]  834 	addc	a, r6
      000175 FB               [12]  835 	mov	r3,a
      000176 8F 04            [24]  836 	mov	ar4,r7
      000178 8A 82            [24]  837 	mov	dpl,r2
      00017A 8B 83            [24]  838 	mov	dph,r3
      00017C 8C F0            [24]  839 	mov	b,r4
      00017E 12r00r00         [24]  840 	lcall	__gptrget
      000181 7C 00            [12]  841 	mov	r4,#0x00
      000183 24 A9            [12]  842 	add	a,#0xa9
      000185 F5*04            [12]  843 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  844 	mov	a,r4
      000188 34 FF            [12]  845 	addc	a,#0xff
      00018A F5*05            [12]  846 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  847 	mov	dptr,#_hex_to_int_result_10000_79
      00018F E0               [24]  848 	movx	a,@dptr
      000190 FB               [12]  849 	mov	r3,a
      000191 A3               [24]  850 	inc	dptr
      000192 E0               [24]  851 	movx	a,@dptr
      000193 FC               [12]  852 	mov	r4,a
      000194 90r00r03         [24]  853 	mov	dptr,#_hex_to_int_result_10000_79
      000197 E5*04            [12]  854 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  855 	add	a, r3
      00019A F0               [24]  856 	movx	@dptr,a
      00019B E5*05            [12]  857 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  858 	addc	a, r4
      00019E A3               [24]  859 	inc	dptr
      00019F F0               [24]  860 	movx	@dptr,a
                                    861 ;	main.c:44: return result;
      0001A0 D0 04            [24]  862 	pop	ar4
      0001A2 D0 03            [24]  863 	pop	ar3
      0001A4 D0 02            [24]  864 	pop	ar2
                                    865 ;	main.c:40: result += str[i] - 87;
      0001A6                        866 00110$:
                                    867 ;	main.c:42: i++;
      0001A6 08               [12]  868 	inc	r0
      0001A7 B8 00 01         [24]  869 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  870 	inc	r1
      0001AB                        871 00173$:
      0001AB 02r00r32         [24]  872 	ljmp	00112$
      0001AE                        873 00114$:
                                    874 ;	main.c:44: return result;
      0001AE 90r00r03         [24]  875 	mov	dptr,#_hex_to_int_result_10000_79
      0001B1 E0               [24]  876 	movx	a,@dptr
      0001B2 FE               [12]  877 	mov	r6,a
      0001B3 A3               [24]  878 	inc	dptr
      0001B4 E0               [24]  879 	movx	a,@dptr
                                    880 ;	main.c:46: }
      0001B5 8E 82            [24]  881 	mov	dpl,r6
      0001B7 F5 83            [12]  882 	mov	dph,a
      0001B9 22               [24]  883 	ret
                                    884 ;------------------------------------------------------------
                                    885 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    886 ;------------------------------------------------------------
                                    887 ;i                         Allocated with name '_get_user_buffer_size_i_10000_85'
                                    888 ;output                    Allocated with name '_get_user_buffer_size_output_10000_85'
                                    889 ;input                     Allocated with name '_get_user_buffer_size_input_10000_85'
                                    890 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_85'
                                    891 ;------------------------------------------------------------
                                    892 ;	main.c:49: int get_user_buffer_size(void)
                                    893 ;	-----------------------------------------
                                    894 ;	 function get_user_buffer_size
                                    895 ;	-----------------------------------------
      0001BA                        896 _get_user_buffer_size:
                                    897 ;	main.c:55: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  898 	mov	r6,#0x00
      0001BC 7F 00            [12]  899 	mov	r7,#0x00
      0001BE                        900 00103$:
      0001BE C0 07            [24]  901 	push	ar7
      0001C0 C0 06            [24]  902 	push	ar6
      0001C2 12r00r00         [24]  903 	lcall	_getchar
      0001C5 AC 82            [24]  904 	mov	r4, dpl
      0001C7 D0 06            [24]  905 	pop	ar6
      0001C9 D0 07            [24]  906 	pop	ar7
      0001CB BC 0A 02         [24]  907 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  908 	sjmp	00105$
      0001D0                        909 00133$:
      0001D0 BC 0D 02         [24]  910 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24]  911 	sjmp	00105$
      0001D5                        912 00134$:
      0001D5 C3               [12]  913 	clr	c
      0001D6 EE               [12]  914 	mov	a,r6
      0001D7 94 09            [12]  915 	subb	a,#0x09
      0001D9 EF               [12]  916 	mov	a,r7
      0001DA 64 80            [12]  917 	xrl	a,#0x80
      0001DC 94 80            [12]  918 	subb	a,#0x80
      0001DE 50 2A            [24]  919 	jnc	00105$
                                    920 ;	main.c:57: putchar(ch);
      0001E0 8C 03            [24]  921 	mov	ar3,r4
      0001E2 7D 00            [12]  922 	mov	r5,#0x00
      0001E4 8B 82            [24]  923 	mov	dpl, r3
      0001E6 8D 83            [24]  924 	mov	dph, r5
      0001E8 C0 07            [24]  925 	push	ar7
      0001EA C0 06            [24]  926 	push	ar6
      0001EC C0 04            [24]  927 	push	ar4
      0001EE 12r00r00         [24]  928 	lcall	_putchar
      0001F1 D0 04            [24]  929 	pop	ar4
      0001F3 D0 06            [24]  930 	pop	ar6
      0001F5 D0 07            [24]  931 	pop	ar7
                                    932 ;	main.c:58: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12]  933 	mov	a,r6
      0001F8 24r07            [12]  934 	add	a, #_get_user_buffer_size_input_10000_85
      0001FA F5 82            [12]  935 	mov	dpl,a
      0001FC EF               [12]  936 	mov	a,r7
      0001FD 34s00            [12]  937 	addc	a, #(_get_user_buffer_size_input_10000_85 >> 8)
      0001FF F5 83            [12]  938 	mov	dph,a
      000201 EC               [12]  939 	mov	a,r4
      000202 F0               [24]  940 	movx	@dptr,a
                                    941 ;	main.c:59: i++;
      000203 0E               [12]  942 	inc	r6
      000204 BE 00 B7         [24]  943 	cjne	r6,#0x00,00103$
      000207 0F               [12]  944 	inc	r7
      000208 80 B4            [24]  945 	sjmp	00103$
      00020A                        946 00105$:
                                    947 ;	main.c:61: input[i] = '\0';
      00020A EE               [12]  948 	mov	a,r6
      00020B 24r07            [12]  949 	add	a, #_get_user_buffer_size_input_10000_85
      00020D F5 82            [12]  950 	mov	dpl,a
      00020F EF               [12]  951 	mov	a,r7
      000210 34s00            [12]  952 	addc	a, #(_get_user_buffer_size_input_10000_85 >> 8)
      000212 F5 83            [12]  953 	mov	dph,a
      000214 E4               [12]  954 	clr	a
      000215 F0               [24]  955 	movx	@dptr,a
                                    956 ;	main.c:62: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24]  957 	mov	dptr,#_get_user_buffer_size_input_10000_85
      000219 F5 F0            [12]  958 	mov	b,a
      00021B 12r00r00         [24]  959 	lcall	_hex_to_int
      00021E AE 82            [24]  960 	mov	r6, dpl
      000220 AF 83            [24]  961 	mov	r7, dph
                                    962 ;	main.c:63: printf_tiny("\n\r");
      000222 C0 07            [24]  963 	push	ar7
      000224 C0 06            [24]  964 	push	ar6
      000226 74r00            [12]  965 	mov	a,#___str_0
      000228 C0 E0            [24]  966 	push	acc
      00022A 74s00            [12]  967 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24]  968 	push	acc
      00022E 12r00r00         [24]  969 	lcall	_printf_tiny
      000231 15 81            [12]  970 	dec	sp
      000233 15 81            [12]  971 	dec	sp
      000235 D0 06            [24]  972 	pop	ar6
      000237 D0 07            [24]  973 	pop	ar7
                                    974 ;	main.c:65: return output;
      000239 8E 82            [24]  975 	mov	dpl, r6
      00023B 8F 83            [24]  976 	mov	dph, r7
                                    977 ;	main.c:66: }
      00023D 22               [24]  978 	ret
                                    979 ;------------------------------------------------------------
                                    980 ;Allocation info for local variables in function 'main'
                                    981 ;------------------------------------------------------------
                                    982 ;c                         Allocated with name '_main_c_20001_90'
                                    983 ;reg_bank                  Allocated with name '_main_reg_bank_40002_93'
                                    984 ;addr                      Allocated with name '_main_addr_40003_94'
                                    985 ;data                      Allocated with name '_main_data_40004_95'
                                    986 ;num_bytes                 Allocated with name '_main_num_bytes_40002_97'
                                    987 ;start_address             Allocated with name '_main_start_address_40003_98'
                                    988 ;buffer                    Allocated with name '_main_buffer_40003_98'
                                    989 ;i                         Allocated with name '_main_i_50003_99'
                                    990 ;num_bytes                 Allocated with name '_main_num_bytes_40002_102'
                                    991 ;start_address             Allocated with name '_main_start_address_40003_103'
                                    992 ;buffer                    Allocated with name '_main_buffer_40003_103'
                                    993 ;reg_bank                  Allocated with name '_main_reg_bank_40002_105'
                                    994 ;addr                      Allocated with name '_main_addr_40003_106'
                                    995 ;data                      Allocated with name '_main_data_40003_106'
                                    996 ;addr                      Allocated with name '_main_addr_40002_108'
                                    997 ;data                      Allocated with name '_main_data_40003_109'
                                    998 ;addr                      Allocated with name '_main_addr_40002_111'
                                    999 ;data                      Allocated with name '_main_data_40002_111'
                                   1000 ;addr                      Allocated with name '_main_addr_40002_114'
                                   1001 ;bank                      Allocated with name '_main_bank_40003_115'
                                   1002 ;data                      Allocated with name '_main_data_40003_115'
                                   1003 ;i                         Allocated with name '_main_i_50001_120'
                                   1004 ;------------------------------------------------------------
                                   1005 ;	main.c:68: void main(void)
                                   1006 ;	-----------------------------------------
                                   1007 ;	 function main
                                   1008 ;	-----------------------------------------
      00023E                       1009 _main:
                                   1010 ;	main.c:71: printf("SPI Operations on 8051\n\r");
      00023E 74r03            [12] 1011 	mov	a,#___str_1
      000240 C0 E0            [24] 1012 	push	acc
      000242 74s00            [12] 1013 	mov	a,#(___str_1 >> 8)
      000244 C0 E0            [24] 1014 	push	acc
      000246 74 80            [12] 1015 	mov	a,#0x80
      000248 C0 E0            [24] 1016 	push	acc
      00024A 12r00r00         [24] 1017 	lcall	_printf
      00024D 15 81            [12] 1018 	dec	sp
      00024F 15 81            [12] 1019 	dec	sp
      000251 15 81            [12] 1020 	dec	sp
                                   1021 ;	main.c:72: configure_SPI();
      000253 12r00r00         [24] 1022 	lcall	_configure_SPI
                                   1023 ;	main.c:74: enc_init(device_mac);
      000256 90r00r00         [24] 1024 	mov	dptr,#_device_mac
      000259 75 F0 00         [24] 1025 	mov	b, #0x00
      00025C 12r00r00         [24] 1026 	lcall	_enc_init
                                   1027 ;	main.c:76: while(1)
      00025F                       1028 00118$:
                                   1029 ;	main.c:78: printf("\n\rChoose an action: \n\r");
      00025F 74r1C            [12] 1030 	mov	a,#___str_2
      000261 C0 E0            [24] 1031 	push	acc
      000263 74s00            [12] 1032 	mov	a,#(___str_2 >> 8)
      000265 C0 E0            [24] 1033 	push	acc
      000267 74 80            [12] 1034 	mov	a,#0x80
      000269 C0 E0            [24] 1035 	push	acc
      00026B 12r00r00         [24] 1036 	lcall	_printf
      00026E 15 81            [12] 1037 	dec	sp
      000270 15 81            [12] 1038 	dec	sp
      000272 15 81            [12] 1039 	dec	sp
                                   1040 ;	main.c:79: printf("1 --> Control Write\n\r");
      000274 74r33            [12] 1041 	mov	a,#___str_3
      000276 C0 E0            [24] 1042 	push	acc
      000278 74s00            [12] 1043 	mov	a,#(___str_3 >> 8)
      00027A C0 E0            [24] 1044 	push	acc
      00027C 74 80            [12] 1045 	mov	a,#0x80
      00027E C0 E0            [24] 1046 	push	acc
      000280 12r00r00         [24] 1047 	lcall	_printf
      000283 15 81            [12] 1048 	dec	sp
      000285 15 81            [12] 1049 	dec	sp
      000287 15 81            [12] 1050 	dec	sp
                                   1051 ;	main.c:80: printf("2 --> Buffer Write\n\r");
      000289 74r49            [12] 1052 	mov	a,#___str_4
      00028B C0 E0            [24] 1053 	push	acc
      00028D 74s00            [12] 1054 	mov	a,#(___str_4 >> 8)
      00028F C0 E0            [24] 1055 	push	acc
      000291 74 80            [12] 1056 	mov	a,#0x80
      000293 C0 E0            [24] 1057 	push	acc
      000295 12r00r00         [24] 1058 	lcall	_printf
      000298 15 81            [12] 1059 	dec	sp
      00029A 15 81            [12] 1060 	dec	sp
      00029C 15 81            [12] 1061 	dec	sp
                                   1062 ;	main.c:81: printf("3 --> Buffer Read\n\r");
      00029E 74r5E            [12] 1063 	mov	a,#___str_5
      0002A0 C0 E0            [24] 1064 	push	acc
      0002A2 74s00            [12] 1065 	mov	a,#(___str_5 >> 8)
      0002A4 C0 E0            [24] 1066 	push	acc
      0002A6 74 80            [12] 1067 	mov	a,#0x80
      0002A8 C0 E0            [24] 1068 	push	acc
      0002AA 12r00r00         [24] 1069 	lcall	_printf
      0002AD 15 81            [12] 1070 	dec	sp
      0002AF 15 81            [12] 1071 	dec	sp
      0002B1 15 81            [12] 1072 	dec	sp
                                   1073 ;	main.c:82: printf("4 --> MAC Register Read\n\r");
      0002B3 74r72            [12] 1074 	mov	a,#___str_6
      0002B5 C0 E0            [24] 1075 	push	acc
      0002B7 74s00            [12] 1076 	mov	a,#(___str_6 >> 8)
      0002B9 C0 E0            [24] 1077 	push	acc
      0002BB 74 80            [12] 1078 	mov	a,#0x80
      0002BD C0 E0            [24] 1079 	push	acc
      0002BF 12r00r00         [24] 1080 	lcall	_printf
      0002C2 15 81            [12] 1081 	dec	sp
      0002C4 15 81            [12] 1082 	dec	sp
      0002C6 15 81            [12] 1083 	dec	sp
                                   1084 ;	main.c:83: printf("5 --> PHY SPI Write\n\r");
      0002C8 74r8C            [12] 1085 	mov	a,#___str_7
      0002CA C0 E0            [24] 1086 	push	acc
      0002CC 74s00            [12] 1087 	mov	a,#(___str_7 >> 8)
      0002CE C0 E0            [24] 1088 	push	acc
      0002D0 74 80            [12] 1089 	mov	a,#0x80
      0002D2 C0 E0            [24] 1090 	push	acc
      0002D4 12r00r00         [24] 1091 	lcall	_printf
      0002D7 15 81            [12] 1092 	dec	sp
      0002D9 15 81            [12] 1093 	dec	sp
      0002DB 15 81            [12] 1094 	dec	sp
                                   1095 ;	main.c:84: printf("6 --> PHY SPI Read\n\r");
      0002DD 74rA2            [12] 1096 	mov	a,#___str_8
      0002DF C0 E0            [24] 1097 	push	acc
      0002E1 74s00            [12] 1098 	mov	a,#(___str_8 >> 8)
      0002E3 C0 E0            [24] 1099 	push	acc
      0002E5 74 80            [12] 1100 	mov	a,#0x80
      0002E7 C0 E0            [24] 1101 	push	acc
      0002E9 12r00r00         [24] 1102 	lcall	_printf
      0002EC 15 81            [12] 1103 	dec	sp
      0002EE 15 81            [12] 1104 	dec	sp
      0002F0 15 81            [12] 1105 	dec	sp
                                   1106 ;	main.c:85: printf("7 --> ENC Reset\n\r");
      0002F2 74rB7            [12] 1107 	mov	a,#___str_9
      0002F4 C0 E0            [24] 1108 	push	acc
      0002F6 74s00            [12] 1109 	mov	a,#(___str_9 >> 8)
      0002F8 C0 E0            [24] 1110 	push	acc
      0002FA 74 80            [12] 1111 	mov	a,#0x80
      0002FC C0 E0            [24] 1112 	push	acc
      0002FE 12r00r00         [24] 1113 	lcall	_printf
      000301 15 81            [12] 1114 	dec	sp
      000303 15 81            [12] 1115 	dec	sp
      000305 15 81            [12] 1116 	dec	sp
                                   1117 ;	main.c:86: printf("8 --> Read ETH Register\n\r");
      000307 74rC9            [12] 1118 	mov	a,#___str_10
      000309 C0 E0            [24] 1119 	push	acc
      00030B 74s00            [12] 1120 	mov	a,#(___str_10 >> 8)
      00030D C0 E0            [24] 1121 	push	acc
      00030F 74 80            [12] 1122 	mov	a,#0x80
      000311 C0 E0            [24] 1123 	push	acc
      000313 12r00r00         [24] 1124 	lcall	_printf
      000316 15 81            [12] 1125 	dec	sp
      000318 15 81            [12] 1126 	dec	sp
      00031A 15 81            [12] 1127 	dec	sp
                                   1128 ;	main.c:87: printf("9 --> Display Menu\n\r");
      00031C 74rE3            [12] 1129 	mov	a,#___str_11
      00031E C0 E0            [24] 1130 	push	acc
      000320 74s00            [12] 1131 	mov	a,#(___str_11 >> 8)
      000322 C0 E0            [24] 1132 	push	acc
      000324 74 80            [12] 1133 	mov	a,#0x80
      000326 C0 E0            [24] 1134 	push	acc
      000328 12r00r00         [24] 1135 	lcall	_printf
      00032B 15 81            [12] 1136 	dec	sp
      00032D 15 81            [12] 1137 	dec	sp
      00032F 15 81            [12] 1138 	dec	sp
                                   1139 ;	main.c:88: printf("A --> Send ARP Request\n\r");
      000331 74rF8            [12] 1140 	mov	a,#___str_12
      000333 C0 E0            [24] 1141 	push	acc
      000335 74s00            [12] 1142 	mov	a,#(___str_12 >> 8)
      000337 C0 E0            [24] 1143 	push	acc
      000339 74 80            [12] 1144 	mov	a,#0x80
      00033B C0 E0            [24] 1145 	push	acc
      00033D 12r00r00         [24] 1146 	lcall	_printf
      000340 15 81            [12] 1147 	dec	sp
      000342 15 81            [12] 1148 	dec	sp
      000344 15 81            [12] 1149 	dec	sp
                                   1150 ;	main.c:89: printf("B --> Init RX buffers\n\r");
      000346 74r11            [12] 1151 	mov	a,#___str_13
      000348 C0 E0            [24] 1152 	push	acc
      00034A 74s01            [12] 1153 	mov	a,#(___str_13 >> 8)
      00034C C0 E0            [24] 1154 	push	acc
      00034E 74 80            [12] 1155 	mov	a,#0x80
      000350 C0 E0            [24] 1156 	push	acc
      000352 12r00r00         [24] 1157 	lcall	_printf
      000355 15 81            [12] 1158 	dec	sp
      000357 15 81            [12] 1159 	dec	sp
      000359 15 81            [12] 1160 	dec	sp
                                   1161 ;	main.c:90: printf("C --> Hard Reset(nRESET pin)\n\r");
      00035B 74r29            [12] 1162 	mov	a,#___str_14
      00035D C0 E0            [24] 1163 	push	acc
      00035F 74s01            [12] 1164 	mov	a,#(___str_14 >> 8)
      000361 C0 E0            [24] 1165 	push	acc
      000363 74 80            [12] 1166 	mov	a,#0x80
      000365 C0 E0            [24] 1167 	push	acc
      000367 12r00r00         [24] 1168 	lcall	_printf
      00036A 15 81            [12] 1169 	dec	sp
      00036C 15 81            [12] 1170 	dec	sp
      00036E 15 81            [12] 1171 	dec	sp
                                   1172 ;	main.c:92: char c = getchar();
      000370 12r00r00         [24] 1173 	lcall	_getchar
      000373 AE 82            [24] 1174 	mov	r6, dpl
                                   1175 ;	main.c:93: putchar(c);
      000375 8E 05            [24] 1176 	mov	ar5,r6
      000377 7F 00            [12] 1177 	mov	r7,#0x00
      000379 8D 82            [24] 1178 	mov	dpl, r5
      00037B 8F 83            [24] 1179 	mov	dph, r7
      00037D C0 06            [24] 1180 	push	ar6
      00037F 12r00r00         [24] 1181 	lcall	_putchar
                                   1182 ;	main.c:94: printf("\n\r");
      000382 74r00            [12] 1183 	mov	a,#___str_0
      000384 C0 E0            [24] 1184 	push	acc
      000386 74s00            [12] 1185 	mov	a,#(___str_0 >> 8)
      000388 C0 E0            [24] 1186 	push	acc
      00038A 74 80            [12] 1187 	mov	a,#0x80
      00038C C0 E0            [24] 1188 	push	acc
      00038E 12r00r00         [24] 1189 	lcall	_printf
      000391 15 81            [12] 1190 	dec	sp
      000393 15 81            [12] 1191 	dec	sp
      000395 15 81            [12] 1192 	dec	sp
      000397 D0 06            [24] 1193 	pop	ar6
                                   1194 ;	main.c:96: switch(c)
      000399 BE 31 00         [24] 1195 	cjne	r6,#0x31,00172$
      00039C                       1196 00172$:
      00039C 50 03            [24] 1197 	jnc	00173$
      00039E 02r08r22         [24] 1198 	ljmp	00115$
      0003A1                       1199 00173$:
      0003A1 EE               [12] 1200 	mov	a,r6
      0003A2 24 BC            [12] 1201 	add	a,#0xff - 0x43
      0003A4 50 03            [24] 1202 	jnc	00174$
      0003A6 02r08r22         [24] 1203 	ljmp	00115$
      0003A9                       1204 00174$:
      0003A9 EE               [12] 1205 	mov	a,r6
      0003AA 24 CF            [12] 1206 	add	a,#0xcf
      0003AC FE               [12] 1207 	mov	r6,a
      0003AD 24 0A            [12] 1208 	add	a,#(00175$-3-.)
      0003AF 83               [24] 1209 	movc	a,@a+pc
      0003B0 F5 82            [12] 1210 	mov	dpl,a
      0003B2 EE               [12] 1211 	mov	a,r6
      0003B3 24 17            [12] 1212 	add	a,#(00176$-3-.)
      0003B5 83               [24] 1213 	movc	a,@a+pc
      0003B6 F5 83            [12] 1214 	mov	dph,a
      0003B8 E4               [12] 1215 	clr	a
      0003B9 73               [24] 1216 	jmp	@a+dptr
      0003BA                       1217 00175$:
      0003BArE0                    1218 	.db	00101$
      0003BBr48                    1219 	.db	00102$
      0003BCr46                    1220 	.db	00104$
      0003BDrA5                    1221 	.db	00105$
      0003BEr07                    1222 	.db	00106$
      0003BFr72                    1223 	.db	00107$
      0003C0rAD                    1224 	.db	00108$
      0003C1rC8                    1225 	.db	00109$
      0003C2r2A                    1226 	.db	00110$
      0003C3r22                    1227 	.db	00115$
      0003C4r22                    1228 	.db	00115$
      0003C5r22                    1229 	.db	00115$
      0003C6r22                    1230 	.db	00115$
      0003C7r22                    1231 	.db	00115$
      0003C8r22                    1232 	.db	00115$
      0003C9r22                    1233 	.db	00115$
      0003CArEA                    1234 	.db	00111$
      0003CBr5F                    1235 	.db	00118$
      0003CCrF0                    1236 	.db	00113$
      0003CD                       1237 00176$:
      0003CDs03                    1238 	.db	00101$>>8
      0003CEs04                    1239 	.db	00102$>>8
      0003CFs05                    1240 	.db	00104$>>8
      0003D0s05                    1241 	.db	00105$>>8
      0003D1s06                    1242 	.db	00106$>>8
      0003D2s06                    1243 	.db	00107$>>8
      0003D3s06                    1244 	.db	00108$>>8
      0003D4s06                    1245 	.db	00109$>>8
      0003D5s07                    1246 	.db	00110$>>8
      0003D6s08                    1247 	.db	00115$>>8
      0003D7s08                    1248 	.db	00115$>>8
      0003D8s08                    1249 	.db	00115$>>8
      0003D9s08                    1250 	.db	00115$>>8
      0003DAs08                    1251 	.db	00115$>>8
      0003DBs08                    1252 	.db	00115$>>8
      0003DCs08                    1253 	.db	00115$>>8
      0003DDs07                    1254 	.db	00111$>>8
      0003DEs02                    1255 	.db	00118$>>8
      0003DFs07                    1256 	.db	00113$>>8
                                   1257 ;	main.c:98: case '1': {
      0003E0                       1258 00101$:
                                   1259 ;	main.c:99: printf("Enter the register bank to select:\n\r");
      0003E0 74r48            [12] 1260 	mov	a,#___str_15
      0003E2 C0 E0            [24] 1261 	push	acc
      0003E4 74s01            [12] 1262 	mov	a,#(___str_15 >> 8)
      0003E6 C0 E0            [24] 1263 	push	acc
      0003E8 74 80            [12] 1264 	mov	a,#0x80
      0003EA C0 E0            [24] 1265 	push	acc
      0003EC 12r00r00         [24] 1266 	lcall	_printf
      0003EF 15 81            [12] 1267 	dec	sp
      0003F1 15 81            [12] 1268 	dec	sp
      0003F3 15 81            [12] 1269 	dec	sp
                                   1270 ;	main.c:100: uint8_t reg_bank = get_user_buffer_size();
      0003F5 12r01rBA         [24] 1271 	lcall	_get_user_buffer_size
      0003F8 AE 82            [24] 1272 	mov	r6, dpl
                                   1273 ;	main.c:101: printf("Enter the address of the Control Register:\n\r");
      0003FA C0 06            [24] 1274 	push	ar6
      0003FC 74r6D            [12] 1275 	mov	a,#___str_16
      0003FE C0 E0            [24] 1276 	push	acc
      000400 74s01            [12] 1277 	mov	a,#(___str_16 >> 8)
      000402 C0 E0            [24] 1278 	push	acc
      000404 74 80            [12] 1279 	mov	a,#0x80
      000406 C0 E0            [24] 1280 	push	acc
      000408 12r00r00         [24] 1281 	lcall	_printf
      00040B 15 81            [12] 1282 	dec	sp
      00040D 15 81            [12] 1283 	dec	sp
      00040F 15 81            [12] 1284 	dec	sp
                                   1285 ;	main.c:102: uint8_t addr = get_user_buffer_size();
      000411 12r01rBA         [24] 1286 	lcall	_get_user_buffer_size
      000414 AD 82            [24] 1287 	mov	r5, dpl
                                   1288 ;	main.c:103: printf("Enter the data you want to write:\n\r");
      000416 C0 05            [24] 1289 	push	ar5
      000418 74r9A            [12] 1290 	mov	a,#___str_17
      00041A C0 E0            [24] 1291 	push	acc
      00041C 74s01            [12] 1292 	mov	a,#(___str_17 >> 8)
      00041E C0 E0            [24] 1293 	push	acc
      000420 74 80            [12] 1294 	mov	a,#0x80
      000422 C0 E0            [24] 1295 	push	acc
      000424 12r00r00         [24] 1296 	lcall	_printf
      000427 15 81            [12] 1297 	dec	sp
      000429 15 81            [12] 1298 	dec	sp
      00042B 15 81            [12] 1299 	dec	sp
                                   1300 ;	main.c:104: uint8_t data = get_user_buffer_size();
      00042D 12r01rBA         [24] 1301 	lcall	_get_user_buffer_size
      000430 AC 82            [24] 1302 	mov	r4, dpl
      000432 D0 05            [24] 1303 	pop	ar5
      000434 D0 06            [24] 1304 	pop	ar6
                                   1305 ;	main.c:105: spi_control_write(reg_bank, addr, data);
      000436 90r00r00         [24] 1306 	mov	dptr,#_spi_control_write_PARM_2
      000439 ED               [12] 1307 	mov	a,r5
      00043A F0               [24] 1308 	movx	@dptr,a
      00043B 90r00r00         [24] 1309 	mov	dptr,#_spi_control_write_PARM_3
      00043E EC               [12] 1310 	mov	a,r4
      00043F F0               [24] 1311 	movx	@dptr,a
      000440 8E 82            [24] 1312 	mov	dpl, r6
      000442 12r00r00         [24] 1313 	lcall	_spi_control_write
                                   1314 ;	main.c:106: break;
      000445 02r02r5F         [24] 1315 	ljmp	00118$
                                   1316 ;	main.c:108: case '2': {
      000448                       1317 00102$:
                                   1318 ;	main.c:109: printf("Enter the number of bytes to write:\n\r");
      000448 74rBE            [12] 1319 	mov	a,#___str_18
      00044A C0 E0            [24] 1320 	push	acc
      00044C 74s01            [12] 1321 	mov	a,#(___str_18 >> 8)
      00044E C0 E0            [24] 1322 	push	acc
      000450 74 80            [12] 1323 	mov	a,#0x80
      000452 C0 E0            [24] 1324 	push	acc
      000454 12r00r00         [24] 1325 	lcall	_printf
      000457 15 81            [12] 1326 	dec	sp
      000459 15 81            [12] 1327 	dec	sp
      00045B 15 81            [12] 1328 	dec	sp
                                   1329 ;	main.c:110: int num_bytes = get_user_buffer_size();
      00045D 12r01rBA         [24] 1330 	lcall	_get_user_buffer_size
      000460 AE 82            [24] 1331 	mov	r6, dpl
      000462 AF 83            [24] 1332 	mov	r7, dph
                                   1333 ;	main.c:111: printf("Enter the starting address:\n\r");
      000464 C0 07            [24] 1334 	push	ar7
      000466 C0 06            [24] 1335 	push	ar6
      000468 74rE4            [12] 1336 	mov	a,#___str_19
      00046A C0 E0            [24] 1337 	push	acc
      00046C 74s01            [12] 1338 	mov	a,#(___str_19 >> 8)
      00046E C0 E0            [24] 1339 	push	acc
      000470 74 80            [12] 1340 	mov	a,#0x80
      000472 C0 E0            [24] 1341 	push	acc
      000474 12r00r00         [24] 1342 	lcall	_printf
      000477 15 81            [12] 1343 	dec	sp
      000479 15 81            [12] 1344 	dec	sp
      00047B 15 81            [12] 1345 	dec	sp
                                   1346 ;	main.c:112: uint16_t start_address = get_user_buffer_size();
      00047D 12r01rBA         [24] 1347 	lcall	_get_user_buffer_size
      000480 AC 82            [24] 1348 	mov	r4, dpl
      000482 AD 83            [24] 1349 	mov	r5, dph
      000484 D0 06            [24] 1350 	pop	ar6
      000486 D0 07            [24] 1351 	pop	ar7
                                   1352 ;	main.c:114: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      000488 C0 07            [24] 1353 	push	ar7
      00048A C0 06            [24] 1354 	push	ar6
      00048C C0 05            [24] 1355 	push	ar5
      00048E C0 04            [24] 1356 	push	ar4
      000490 C0 06            [24] 1357 	push	ar6
      000492 C0 07            [24] 1358 	push	ar7
      000494 74r02            [12] 1359 	mov	a,#___str_20
      000496 C0 E0            [24] 1360 	push	acc
      000498 74s02            [12] 1361 	mov	a,#(___str_20 >> 8)
      00049A C0 E0            [24] 1362 	push	acc
      00049C 74 80            [12] 1363 	mov	a,#0x80
      00049E C0 E0            [24] 1364 	push	acc
      0004A0 12r00r00         [24] 1365 	lcall	_printf
      0004A3 E5 81            [12] 1366 	mov	a,sp
      0004A5 24 FB            [12] 1367 	add	a,#0xfb
      0004A7 F5 81            [12] 1368 	mov	sp,a
      0004A9 D0 04            [24] 1369 	pop	ar4
      0004AB D0 05            [24] 1370 	pop	ar5
      0004AD D0 06            [24] 1371 	pop	ar6
      0004AF D0 07            [24] 1372 	pop	ar7
                                   1373 ;	main.c:115: for (int i = 0; i < num_bytes; i++) {
      0004B1 7A 00            [12] 1374 	mov	r2,#0x00
      0004B3 7B 00            [12] 1375 	mov	r3,#0x00
      0004B5                       1376 00121$:
      0004B5 C3               [12] 1377 	clr	c
      0004B6 EA               [12] 1378 	mov	a,r2
      0004B7 9E               [12] 1379 	subb	a,r6
      0004B8 EB               [12] 1380 	mov	a,r3
      0004B9 64 80            [12] 1381 	xrl	a,#0x80
      0004BB 8F F0            [24] 1382 	mov	b,r7
      0004BD 63 F0 80         [24] 1383 	xrl	b,#0x80
      0004C0 95 F0            [12] 1384 	subb	a,b
      0004C2 50 63            [24] 1385 	jnc	00103$
                                   1386 ;	main.c:116: printf("Byte %d: ", i);
      0004C4 C0 04            [24] 1387 	push	ar4
      0004C6 C0 05            [24] 1388 	push	ar5
      0004C8 C0 07            [24] 1389 	push	ar7
      0004CA C0 06            [24] 1390 	push	ar6
      0004CC C0 05            [24] 1391 	push	ar5
      0004CE C0 04            [24] 1392 	push	ar4
      0004D0 C0 03            [24] 1393 	push	ar3
      0004D2 C0 02            [24] 1394 	push	ar2
      0004D4 C0 02            [24] 1395 	push	ar2
      0004D6 C0 03            [24] 1396 	push	ar3
      0004D8 74r25            [12] 1397 	mov	a,#___str_21
      0004DA C0 E0            [24] 1398 	push	acc
      0004DC 74s02            [12] 1399 	mov	a,#(___str_21 >> 8)
      0004DE C0 E0            [24] 1400 	push	acc
      0004E0 74 80            [12] 1401 	mov	a,#0x80
      0004E2 C0 E0            [24] 1402 	push	acc
      0004E4 12r00r00         [24] 1403 	lcall	_printf
      0004E7 E5 81            [12] 1404 	mov	a,sp
      0004E9 24 FB            [12] 1405 	add	a,#0xfb
      0004EB F5 81            [12] 1406 	mov	sp,a
      0004ED D0 02            [24] 1407 	pop	ar2
      0004EF D0 03            [24] 1408 	pop	ar3
      0004F1 D0 04            [24] 1409 	pop	ar4
      0004F3 D0 05            [24] 1410 	pop	ar5
                                   1411 ;	main.c:117: buffer[i] = get_user_buffer_size();
      0004F5 EA               [12] 1412 	mov	a,r2
      0004F6 24r11            [12] 1413 	add	a, #_main_buffer_40003_98
      0004F8 F8               [12] 1414 	mov	r0,a
      0004F9 EB               [12] 1415 	mov	a,r3
      0004FA 34s00            [12] 1416 	addc	a, #(_main_buffer_40003_98 >> 8)
      0004FC F9               [12] 1417 	mov	r1,a
      0004FD C0 03            [24] 1418 	push	ar3
      0004FF C0 02            [24] 1419 	push	ar2
      000501 C0 01            [24] 1420 	push	ar1
      000503 C0 00            [24] 1421 	push	ar0
      000505 12r01rBA         [24] 1422 	lcall	_get_user_buffer_size
      000508 AC 82            [24] 1423 	mov	r4, dpl
      00050A D0 00            [24] 1424 	pop	ar0
      00050C D0 01            [24] 1425 	pop	ar1
      00050E D0 02            [24] 1426 	pop	ar2
      000510 D0 03            [24] 1427 	pop	ar3
      000512 D0 06            [24] 1428 	pop	ar6
      000514 D0 07            [24] 1429 	pop	ar7
      000516 88 82            [24] 1430 	mov	dpl,r0
      000518 89 83            [24] 1431 	mov	dph,r1
      00051A EC               [12] 1432 	mov	a,r4
      00051B F0               [24] 1433 	movx	@dptr,a
                                   1434 ;	main.c:115: for (int i = 0; i < num_bytes; i++) {
      00051C 0A               [12] 1435 	inc	r2
      00051D BA 00 01         [24] 1436 	cjne	r2,#0x00,00178$
      000520 0B               [12] 1437 	inc	r3
      000521                       1438 00178$:
      000521 D0 05            [24] 1439 	pop	ar5
      000523 D0 04            [24] 1440 	pop	ar4
      000525 80 8E            [24] 1441 	sjmp	00121$
      000527                       1442 00103$:
                                   1443 ;	main.c:119: spi_buffer_write(num_bytes, start_address, buffer);
      000527 90r00r00         [24] 1444 	mov	dptr,#_spi_buffer_write_PARM_2
      00052A EC               [12] 1445 	mov	a,r4
      00052B F0               [24] 1446 	movx	@dptr,a
      00052C ED               [12] 1447 	mov	a,r5
      00052D A3               [24] 1448 	inc	dptr
      00052E F0               [24] 1449 	movx	@dptr,a
      00052F 90r00r00         [24] 1450 	mov	dptr,#_spi_buffer_write_PARM_3
      000532 74r11            [12] 1451 	mov	a,#_main_buffer_40003_98
      000534 F0               [24] 1452 	movx	@dptr,a
      000535 74s00            [12] 1453 	mov	a,#(_main_buffer_40003_98 >> 8)
      000537 A3               [24] 1454 	inc	dptr
      000538 F0               [24] 1455 	movx	@dptr,a
      000539 E4               [12] 1456 	clr	a
      00053A A3               [24] 1457 	inc	dptr
      00053B F0               [24] 1458 	movx	@dptr,a
      00053C 8E 82            [24] 1459 	mov	dpl, r6
      00053E 8F 83            [24] 1460 	mov	dph, r7
      000540 12r00r00         [24] 1461 	lcall	_spi_buffer_write
                                   1462 ;	main.c:120: break;
      000543 02r02r5F         [24] 1463 	ljmp	00118$
                                   1464 ;	main.c:122: case '3': {
      000546                       1465 00104$:
                                   1466 ;	main.c:123: printf("Enter the number of bytes to read:\n\r");
      000546 74r2F            [12] 1467 	mov	a,#___str_22
      000548 C0 E0            [24] 1468 	push	acc
      00054A 74s02            [12] 1469 	mov	a,#(___str_22 >> 8)
      00054C C0 E0            [24] 1470 	push	acc
      00054E 74 80            [12] 1471 	mov	a,#0x80
      000550 C0 E0            [24] 1472 	push	acc
      000552 12r00r00         [24] 1473 	lcall	_printf
      000555 15 81            [12] 1474 	dec	sp
      000557 15 81            [12] 1475 	dec	sp
      000559 15 81            [12] 1476 	dec	sp
                                   1477 ;	main.c:124: int num_bytes = get_user_buffer_size();
      00055B 12r01rBA         [24] 1478 	lcall	_get_user_buffer_size
      00055E AE 82            [24] 1479 	mov	r6, dpl
      000560 AF 83            [24] 1480 	mov	r7, dph
                                   1481 ;	main.c:125: printf("Enter the starting address:\n\r");
      000562 C0 07            [24] 1482 	push	ar7
      000564 C0 06            [24] 1483 	push	ar6
      000566 74rE4            [12] 1484 	mov	a,#___str_19
      000568 C0 E0            [24] 1485 	push	acc
      00056A 74s01            [12] 1486 	mov	a,#(___str_19 >> 8)
      00056C C0 E0            [24] 1487 	push	acc
      00056E 74 80            [12] 1488 	mov	a,#0x80
      000570 C0 E0            [24] 1489 	push	acc
      000572 12r00r00         [24] 1490 	lcall	_printf
      000575 15 81            [12] 1491 	dec	sp
      000577 15 81            [12] 1492 	dec	sp
      000579 15 81            [12] 1493 	dec	sp
                                   1494 ;	main.c:126: uint16_t start_address = get_user_buffer_size();
      00057B 12r01rBA         [24] 1495 	lcall	_get_user_buffer_size
      00057E AC 82            [24] 1496 	mov	r4, dpl
      000580 AD 83            [24] 1497 	mov	r5, dph
      000582 D0 06            [24] 1498 	pop	ar6
      000584 D0 07            [24] 1499 	pop	ar7
                                   1500 ;	main.c:128: spi_buffer_read(num_bytes, start_address, buffer);
      000586 90r00r00         [24] 1501 	mov	dptr,#_spi_buffer_read_PARM_2
      000589 EC               [12] 1502 	mov	a,r4
      00058A F0               [24] 1503 	movx	@dptr,a
      00058B ED               [12] 1504 	mov	a,r5
      00058C A3               [24] 1505 	inc	dptr
      00058D F0               [24] 1506 	movx	@dptr,a
      00058E 90r00r00         [24] 1507 	mov	dptr,#_spi_buffer_read_PARM_3
      000591 74r11            [12] 1508 	mov	a,#_main_buffer_40003_103
      000593 F0               [24] 1509 	movx	@dptr,a
      000594 74s01            [12] 1510 	mov	a,#(_main_buffer_40003_103 >> 8)
      000596 A3               [24] 1511 	inc	dptr
      000597 F0               [24] 1512 	movx	@dptr,a
      000598 E4               [12] 1513 	clr	a
      000599 A3               [24] 1514 	inc	dptr
      00059A F0               [24] 1515 	movx	@dptr,a
      00059B 8E 82            [24] 1516 	mov	dpl, r6
      00059D 8F 83            [24] 1517 	mov	dph, r7
      00059F 12r00r00         [24] 1518 	lcall	_spi_buffer_read
                                   1519 ;	main.c:156: break;
      0005A2 02r02r5F         [24] 1520 	ljmp	00118$
                                   1521 ;	main.c:158: case '4': {
      0005A5                       1522 00105$:
                                   1523 ;	main.c:159: printf("Enter the MAC register bank to select:\n\r");
      0005A5 74r54            [12] 1524 	mov	a,#___str_23
      0005A7 C0 E0            [24] 1525 	push	acc
      0005A9 74s02            [12] 1526 	mov	a,#(___str_23 >> 8)
      0005AB C0 E0            [24] 1527 	push	acc
      0005AD 74 80            [12] 1528 	mov	a,#0x80
      0005AF C0 E0            [24] 1529 	push	acc
      0005B1 12r00r00         [24] 1530 	lcall	_printf
      0005B4 15 81            [12] 1531 	dec	sp
      0005B6 15 81            [12] 1532 	dec	sp
      0005B8 15 81            [12] 1533 	dec	sp
                                   1534 ;	main.c:160: uint8_t reg_bank = get_user_buffer_size();
      0005BA 12r01rBA         [24] 1535 	lcall	_get_user_buffer_size
      0005BD AE 82            [24] 1536 	mov	r6, dpl
                                   1537 ;	main.c:161: printf("Enter the address of the MAC Register:\n\r");
      0005BF C0 06            [24] 1538 	push	ar6
      0005C1 74r7D            [12] 1539 	mov	a,#___str_24
      0005C3 C0 E0            [24] 1540 	push	acc
      0005C5 74s02            [12] 1541 	mov	a,#(___str_24 >> 8)
      0005C7 C0 E0            [24] 1542 	push	acc
      0005C9 74 80            [12] 1543 	mov	a,#0x80
      0005CB C0 E0            [24] 1544 	push	acc
      0005CD 12r00r00         [24] 1545 	lcall	_printf
      0005D0 15 81            [12] 1546 	dec	sp
      0005D2 15 81            [12] 1547 	dec	sp
      0005D4 15 81            [12] 1548 	dec	sp
                                   1549 ;	main.c:162: uint8_t addr = get_user_buffer_size();
      0005D6 12r01rBA         [24] 1550 	lcall	_get_user_buffer_size
      0005D9 AD 82            [24] 1551 	mov	r5, dpl
      0005DB D0 06            [24] 1552 	pop	ar6
                                   1553 ;	main.c:163: uint8_t data = mac_spi_read(addr, reg_bank);
      0005DD 90r00r00         [24] 1554 	mov	dptr,#_mac_spi_read_PARM_2
      0005E0 EE               [12] 1555 	mov	a,r6
      0005E1 F0               [24] 1556 	movx	@dptr,a
      0005E2 8D 82            [24] 1557 	mov	dpl, r5
      0005E4 12r00r00         [24] 1558 	lcall	_mac_spi_read
      0005E7 AF 82            [24] 1559 	mov	r7, dpl
                                   1560 ;	main.c:164: printf("MAC Register Data: 0x%02X\n\r", data);
      0005E9 7E 00            [12] 1561 	mov	r6,#0x00
      0005EB C0 07            [24] 1562 	push	ar7
      0005ED C0 06            [24] 1563 	push	ar6
      0005EF 74rA6            [12] 1564 	mov	a,#___str_25
      0005F1 C0 E0            [24] 1565 	push	acc
      0005F3 74s02            [12] 1566 	mov	a,#(___str_25 >> 8)
      0005F5 C0 E0            [24] 1567 	push	acc
      0005F7 74 80            [12] 1568 	mov	a,#0x80
      0005F9 C0 E0            [24] 1569 	push	acc
      0005FB 12r00r00         [24] 1570 	lcall	_printf
      0005FE E5 81            [12] 1571 	mov	a,sp
      000600 24 FB            [12] 1572 	add	a,#0xfb
      000602 F5 81            [12] 1573 	mov	sp,a
                                   1574 ;	main.c:165: break;
      000604 02r02r5F         [24] 1575 	ljmp	00118$
                                   1576 ;	main.c:167: case '5': {
      000607                       1577 00106$:
                                   1578 ;	main.c:168: printf("Enter the PHY register address:\n\r");
      000607 74rC2            [12] 1579 	mov	a,#___str_26
      000609 C0 E0            [24] 1580 	push	acc
      00060B 74s02            [12] 1581 	mov	a,#(___str_26 >> 8)
      00060D C0 E0            [24] 1582 	push	acc
      00060F 74 80            [12] 1583 	mov	a,#0x80
      000611 C0 E0            [24] 1584 	push	acc
      000613 12r00r00         [24] 1585 	lcall	_printf
      000616 15 81            [12] 1586 	dec	sp
      000618 15 81            [12] 1587 	dec	sp
      00061A 15 81            [12] 1588 	dec	sp
                                   1589 ;	main.c:169: uint8_t addr = get_user_buffer_size();
      00061C 12r01rBA         [24] 1590 	lcall	_get_user_buffer_size
      00061F AE 82            [24] 1591 	mov	r6, dpl
                                   1592 ;	main.c:170: printf("Enter the 16-bit data to write:\n\r");
      000621 C0 06            [24] 1593 	push	ar6
      000623 74rE4            [12] 1594 	mov	a,#___str_27
      000625 C0 E0            [24] 1595 	push	acc
      000627 74s02            [12] 1596 	mov	a,#(___str_27 >> 8)
      000629 C0 E0            [24] 1597 	push	acc
      00062B 74 80            [12] 1598 	mov	a,#0x80
      00062D C0 E0            [24] 1599 	push	acc
      00062F 12r00r00         [24] 1600 	lcall	_printf
      000632 15 81            [12] 1601 	dec	sp
      000634 15 81            [12] 1602 	dec	sp
      000636 15 81            [12] 1603 	dec	sp
                                   1604 ;	main.c:171: uint16_t data = get_user_buffer_size();
      000638 12r01rBA         [24] 1605 	lcall	_get_user_buffer_size
      00063B AD 82            [24] 1606 	mov	r5, dpl
      00063D AF 83            [24] 1607 	mov	r7, dph
      00063F D0 06            [24] 1608 	pop	ar6
                                   1609 ;	main.c:172: phy_spi_write(addr, data);
      000641 90r00r00         [24] 1610 	mov	dptr,#_phy_spi_write_PARM_2
      000644 ED               [12] 1611 	mov	a,r5
      000645 F0               [24] 1612 	movx	@dptr,a
      000646 EF               [12] 1613 	mov	a,r7
      000647 A3               [24] 1614 	inc	dptr
      000648 F0               [24] 1615 	movx	@dptr,a
      000649 8E 82            [24] 1616 	mov	dpl, r6
      00064B C0 07            [24] 1617 	push	ar7
      00064D C0 05            [24] 1618 	push	ar5
      00064F 12r00r00         [24] 1619 	lcall	_phy_spi_write
      000652 D0 05            [24] 1620 	pop	ar5
      000654 D0 07            [24] 1621 	pop	ar7
                                   1622 ;	main.c:173: printf("PHY Write Data: 0x%04X\n\r", data);
      000656 C0 05            [24] 1623 	push	ar5
      000658 C0 07            [24] 1624 	push	ar7
      00065A 74r06            [12] 1625 	mov	a,#___str_28
      00065C C0 E0            [24] 1626 	push	acc
      00065E 74s03            [12] 1627 	mov	a,#(___str_28 >> 8)
      000660 C0 E0            [24] 1628 	push	acc
      000662 74 80            [12] 1629 	mov	a,#0x80
      000664 C0 E0            [24] 1630 	push	acc
      000666 12r00r00         [24] 1631 	lcall	_printf
      000669 E5 81            [12] 1632 	mov	a,sp
      00066B 24 FB            [12] 1633 	add	a,#0xfb
      00066D F5 81            [12] 1634 	mov	sp,a
                                   1635 ;	main.c:174: break;
      00066F 02r02r5F         [24] 1636 	ljmp	00118$
                                   1637 ;	main.c:176: case '6': {
      000672                       1638 00107$:
                                   1639 ;	main.c:177: printf("Enter the PHY register address to read:\n\r");
      000672 74r1F            [12] 1640 	mov	a,#___str_29
      000674 C0 E0            [24] 1641 	push	acc
      000676 74s03            [12] 1642 	mov	a,#(___str_29 >> 8)
      000678 C0 E0            [24] 1643 	push	acc
      00067A 74 80            [12] 1644 	mov	a,#0x80
      00067C C0 E0            [24] 1645 	push	acc
      00067E 12r00r00         [24] 1646 	lcall	_printf
      000681 15 81            [12] 1647 	dec	sp
      000683 15 81            [12] 1648 	dec	sp
      000685 15 81            [12] 1649 	dec	sp
                                   1650 ;	main.c:178: uint8_t addr = get_user_buffer_size();
      000687 12r01rBA         [24] 1651 	lcall	_get_user_buffer_size
                                   1652 ;	main.c:179: uint16_t data = phy_spi_read(addr);
      00068A 12r00r00         [24] 1653 	lcall	_phy_spi_read
      00068D AE 82            [24] 1654 	mov	r6, dpl
      00068F AF 83            [24] 1655 	mov	r7, dph
                                   1656 ;	main.c:180: printf("PHY Read Data: 0x%04X\n\r", data);
      000691 C0 06            [24] 1657 	push	ar6
      000693 C0 07            [24] 1658 	push	ar7
      000695 74r49            [12] 1659 	mov	a,#___str_30
      000697 C0 E0            [24] 1660 	push	acc
      000699 74s03            [12] 1661 	mov	a,#(___str_30 >> 8)
      00069B C0 E0            [24] 1662 	push	acc
      00069D 74 80            [12] 1663 	mov	a,#0x80
      00069F C0 E0            [24] 1664 	push	acc
      0006A1 12r00r00         [24] 1665 	lcall	_printf
      0006A4 E5 81            [12] 1666 	mov	a,sp
      0006A6 24 FB            [12] 1667 	add	a,#0xfb
      0006A8 F5 81            [12] 1668 	mov	sp,a
                                   1669 ;	main.c:181: break;
      0006AA 02r02r5F         [24] 1670 	ljmp	00118$
                                   1671 ;	main.c:183: case '7': {
      0006AD                       1672 00108$:
                                   1673 ;	main.c:184: printf("Resetting ENC28J60...\n\r");
      0006AD 74r61            [12] 1674 	mov	a,#___str_31
      0006AF C0 E0            [24] 1675 	push	acc
      0006B1 74s03            [12] 1676 	mov	a,#(___str_31 >> 8)
      0006B3 C0 E0            [24] 1677 	push	acc
      0006B5 74 80            [12] 1678 	mov	a,#0x80
      0006B7 C0 E0            [24] 1679 	push	acc
      0006B9 12r00r00         [24] 1680 	lcall	_printf
      0006BC 15 81            [12] 1681 	dec	sp
      0006BE 15 81            [12] 1682 	dec	sp
      0006C0 15 81            [12] 1683 	dec	sp
                                   1684 ;	main.c:185: enc_reset();
      0006C2 12r00r00         [24] 1685 	lcall	_enc_reset
                                   1686 ;	main.c:186: break;
      0006C5 02r02r5F         [24] 1687 	ljmp	00118$
                                   1688 ;	main.c:188: case '8': {
      0006C8                       1689 00109$:
                                   1690 ;	main.c:189: printf("Enter the ETH register address to read:\n\r");
      0006C8 74r79            [12] 1691 	mov	a,#___str_32
      0006CA C0 E0            [24] 1692 	push	acc
      0006CC 74s03            [12] 1693 	mov	a,#(___str_32 >> 8)
      0006CE C0 E0            [24] 1694 	push	acc
      0006D0 74 80            [12] 1695 	mov	a,#0x80
      0006D2 C0 E0            [24] 1696 	push	acc
      0006D4 12r00r00         [24] 1697 	lcall	_printf
      0006D7 15 81            [12] 1698 	dec	sp
      0006D9 15 81            [12] 1699 	dec	sp
      0006DB 15 81            [12] 1700 	dec	sp
                                   1701 ;	main.c:190: uint8_t addr = get_user_buffer_size();
      0006DD 12r01rBA         [24] 1702 	lcall	_get_user_buffer_size
      0006E0 AE 82            [24] 1703 	mov	r6, dpl
                                   1704 ;	main.c:191: printf("Enter the bank (0 or 1):\n\r");
      0006E2 C0 06            [24] 1705 	push	ar6
      0006E4 74rA3            [12] 1706 	mov	a,#___str_33
      0006E6 C0 E0            [24] 1707 	push	acc
      0006E8 74s03            [12] 1708 	mov	a,#(___str_33 >> 8)
      0006EA C0 E0            [24] 1709 	push	acc
      0006EC 74 80            [12] 1710 	mov	a,#0x80
      0006EE C0 E0            [24] 1711 	push	acc
      0006F0 12r00r00         [24] 1712 	lcall	_printf
      0006F3 15 81            [12] 1713 	dec	sp
      0006F5 15 81            [12] 1714 	dec	sp
      0006F7 15 81            [12] 1715 	dec	sp
                                   1716 ;	main.c:192: uint8_t bank = get_user_buffer_size();
      0006F9 12r01rBA         [24] 1717 	lcall	_get_user_buffer_size
      0006FC AD 82            [24] 1718 	mov	r5, dpl
      0006FE D0 06            [24] 1719 	pop	ar6
      000700 90r00r00         [24] 1720 	mov	dptr,#_eth_spi_read_PARM_2
      000703 ED               [12] 1721 	mov	a,r5
      000704 F0               [24] 1722 	movx	@dptr,a
                                   1723 ;	main.c:193: uint8_t data = eth_spi_read(addr, bank);
      000705 8E 82            [24] 1724 	mov	dpl, r6
      000707 12r00r00         [24] 1725 	lcall	_eth_spi_read
      00070A AF 82            [24] 1726 	mov	r7, dpl
                                   1727 ;	main.c:194: printf("ETH Register Data: 0x%02X\n\r", data);
      00070C 7E 00            [12] 1728 	mov	r6,#0x00
      00070E C0 07            [24] 1729 	push	ar7
      000710 C0 06            [24] 1730 	push	ar6
      000712 74rBE            [12] 1731 	mov	a,#___str_34
      000714 C0 E0            [24] 1732 	push	acc
      000716 74s03            [12] 1733 	mov	a,#(___str_34 >> 8)
      000718 C0 E0            [24] 1734 	push	acc
      00071A 74 80            [12] 1735 	mov	a,#0x80
      00071C C0 E0            [24] 1736 	push	acc
      00071E 12r00r00         [24] 1737 	lcall	_printf
      000721 E5 81            [12] 1738 	mov	a,sp
      000723 24 FB            [12] 1739 	add	a,#0xfb
      000725 F5 81            [12] 1740 	mov	sp,a
                                   1741 ;	main.c:195: break;
      000727 02r02r5F         [24] 1742 	ljmp	00118$
                                   1743 ;	main.c:197: case '9': {
      00072A                       1744 00110$:
                                   1745 ;	main.c:198: printf("\n\rChoose an action: \n\r");
      00072A 74r1C            [12] 1746 	mov	a,#___str_2
      00072C C0 E0            [24] 1747 	push	acc
      00072E 74s00            [12] 1748 	mov	a,#(___str_2 >> 8)
      000730 C0 E0            [24] 1749 	push	acc
      000732 74 80            [12] 1750 	mov	a,#0x80
      000734 C0 E0            [24] 1751 	push	acc
      000736 12r00r00         [24] 1752 	lcall	_printf
      000739 15 81            [12] 1753 	dec	sp
      00073B 15 81            [12] 1754 	dec	sp
      00073D 15 81            [12] 1755 	dec	sp
                                   1756 ;	main.c:199: printf("1 --> Control Write\n\r");
      00073F 74r33            [12] 1757 	mov	a,#___str_3
      000741 C0 E0            [24] 1758 	push	acc
      000743 74s00            [12] 1759 	mov	a,#(___str_3 >> 8)
      000745 C0 E0            [24] 1760 	push	acc
      000747 74 80            [12] 1761 	mov	a,#0x80
      000749 C0 E0            [24] 1762 	push	acc
      00074B 12r00r00         [24] 1763 	lcall	_printf
      00074E 15 81            [12] 1764 	dec	sp
      000750 15 81            [12] 1765 	dec	sp
      000752 15 81            [12] 1766 	dec	sp
                                   1767 ;	main.c:200: printf("2 --> Buffer Write\n\r");
      000754 74r49            [12] 1768 	mov	a,#___str_4
      000756 C0 E0            [24] 1769 	push	acc
      000758 74s00            [12] 1770 	mov	a,#(___str_4 >> 8)
      00075A C0 E0            [24] 1771 	push	acc
      00075C 74 80            [12] 1772 	mov	a,#0x80
      00075E C0 E0            [24] 1773 	push	acc
      000760 12r00r00         [24] 1774 	lcall	_printf
      000763 15 81            [12] 1775 	dec	sp
      000765 15 81            [12] 1776 	dec	sp
      000767 15 81            [12] 1777 	dec	sp
                                   1778 ;	main.c:201: printf("3 --> Buffer Read\n\r");
      000769 74r5E            [12] 1779 	mov	a,#___str_5
      00076B C0 E0            [24] 1780 	push	acc
      00076D 74s00            [12] 1781 	mov	a,#(___str_5 >> 8)
      00076F C0 E0            [24] 1782 	push	acc
      000771 74 80            [12] 1783 	mov	a,#0x80
      000773 C0 E0            [24] 1784 	push	acc
      000775 12r00r00         [24] 1785 	lcall	_printf
      000778 15 81            [12] 1786 	dec	sp
      00077A 15 81            [12] 1787 	dec	sp
      00077C 15 81            [12] 1788 	dec	sp
                                   1789 ;	main.c:202: printf("4 --> MAC Register Read\n\r");
      00077E 74r72            [12] 1790 	mov	a,#___str_6
      000780 C0 E0            [24] 1791 	push	acc
      000782 74s00            [12] 1792 	mov	a,#(___str_6 >> 8)
      000784 C0 E0            [24] 1793 	push	acc
      000786 74 80            [12] 1794 	mov	a,#0x80
      000788 C0 E0            [24] 1795 	push	acc
      00078A 12r00r00         [24] 1796 	lcall	_printf
      00078D 15 81            [12] 1797 	dec	sp
      00078F 15 81            [12] 1798 	dec	sp
      000791 15 81            [12] 1799 	dec	sp
                                   1800 ;	main.c:203: printf("5 --> PHY SPI Write\n\r");
      000793 74r8C            [12] 1801 	mov	a,#___str_7
      000795 C0 E0            [24] 1802 	push	acc
      000797 74s00            [12] 1803 	mov	a,#(___str_7 >> 8)
      000799 C0 E0            [24] 1804 	push	acc
      00079B 74 80            [12] 1805 	mov	a,#0x80
      00079D C0 E0            [24] 1806 	push	acc
      00079F 12r00r00         [24] 1807 	lcall	_printf
      0007A2 15 81            [12] 1808 	dec	sp
      0007A4 15 81            [12] 1809 	dec	sp
      0007A6 15 81            [12] 1810 	dec	sp
                                   1811 ;	main.c:204: printf("6 --> PHY SPI Read\n\r");
      0007A8 74rA2            [12] 1812 	mov	a,#___str_8
      0007AA C0 E0            [24] 1813 	push	acc
      0007AC 74s00            [12] 1814 	mov	a,#(___str_8 >> 8)
      0007AE C0 E0            [24] 1815 	push	acc
      0007B0 74 80            [12] 1816 	mov	a,#0x80
      0007B2 C0 E0            [24] 1817 	push	acc
      0007B4 12r00r00         [24] 1818 	lcall	_printf
      0007B7 15 81            [12] 1819 	dec	sp
      0007B9 15 81            [12] 1820 	dec	sp
      0007BB 15 81            [12] 1821 	dec	sp
                                   1822 ;	main.c:205: printf("7 --> ENC Reset\n\r");
      0007BD 74rB7            [12] 1823 	mov	a,#___str_9
      0007BF C0 E0            [24] 1824 	push	acc
      0007C1 74s00            [12] 1825 	mov	a,#(___str_9 >> 8)
      0007C3 C0 E0            [24] 1826 	push	acc
      0007C5 74 80            [12] 1827 	mov	a,#0x80
      0007C7 C0 E0            [24] 1828 	push	acc
      0007C9 12r00r00         [24] 1829 	lcall	_printf
      0007CC 15 81            [12] 1830 	dec	sp
      0007CE 15 81            [12] 1831 	dec	sp
      0007D0 15 81            [12] 1832 	dec	sp
                                   1833 ;	main.c:206: printf("8 --> Read ETH Register\n\r");
      0007D2 74rC9            [12] 1834 	mov	a,#___str_10
      0007D4 C0 E0            [24] 1835 	push	acc
      0007D6 74s00            [12] 1836 	mov	a,#(___str_10 >> 8)
      0007D8 C0 E0            [24] 1837 	push	acc
      0007DA 74 80            [12] 1838 	mov	a,#0x80
      0007DC C0 E0            [24] 1839 	push	acc
      0007DE 12r00r00         [24] 1840 	lcall	_printf
      0007E1 15 81            [12] 1841 	dec	sp
      0007E3 15 81            [12] 1842 	dec	sp
      0007E5 15 81            [12] 1843 	dec	sp
                                   1844 ;	main.c:207: break;
      0007E7 02r02r5F         [24] 1845 	ljmp	00118$
                                   1846 ;	main.c:209: case 'A':{
      0007EA                       1847 00111$:
                                   1848 ;	main.c:212: send_arp_request();
      0007EA 12r00r00         [24] 1849 	lcall	_send_arp_request
                                   1850 ;	main.c:213: break;
      0007ED 02r02r5F         [24] 1851 	ljmp	00118$
                                   1852 ;	main.c:219: case 'C':{
      0007F0                       1853 00113$:
                                   1854 ;	main.c:220: printf(" Resetting ENC using RESET pin in Hardware(P1_0)\n\r");
      0007F0 74rDA            [12] 1855 	mov	a,#___str_35
      0007F2 C0 E0            [24] 1856 	push	acc
      0007F4 74s03            [12] 1857 	mov	a,#(___str_35 >> 8)
      0007F6 C0 E0            [24] 1858 	push	acc
      0007F8 74 80            [12] 1859 	mov	a,#0x80
      0007FA C0 E0            [24] 1860 	push	acc
      0007FC 12r00r00         [24] 1861 	lcall	_printf
      0007FF 15 81            [12] 1862 	dec	sp
      000801 15 81            [12] 1863 	dec	sp
      000803 15 81            [12] 1864 	dec	sp
                                   1865 ;	main.c:221: ENC_RESET = 0;
                                   1866 ;	assignBit
      000805 C2 90            [12] 1867 	clr	_P1_0
                                   1868 ;	main.c:222: for(int i = 0; i < 6000; i++);
      000807 7E 00            [12] 1869 	mov	r6,#0x00
      000809 7F 00            [12] 1870 	mov	r7,#0x00
      00080B                       1871 00124$:
      00080B C3               [12] 1872 	clr	c
      00080C EE               [12] 1873 	mov	a,r6
      00080D 94 70            [12] 1874 	subb	a,#0x70
      00080F EF               [12] 1875 	mov	a,r7
      000810 64 80            [12] 1876 	xrl	a,#0x80
      000812 94 97            [12] 1877 	subb	a,#0x97
      000814 50 07            [24] 1878 	jnc	00114$
      000816 0E               [12] 1879 	inc	r6
      000817 BE 00 F1         [24] 1880 	cjne	r6,#0x00,00124$
      00081A 0F               [12] 1881 	inc	r7
      00081B 80 EE            [24] 1882 	sjmp	00124$
      00081D                       1883 00114$:
                                   1884 ;	main.c:223: ENC_RESET = 1;
                                   1885 ;	assignBit
      00081D D2 90            [12] 1886 	setb	_P1_0
                                   1887 ;	main.c:224: break;
      00081F 02r02r5F         [24] 1888 	ljmp	00118$
                                   1889 ;	main.c:226: default: {
      000822                       1890 00115$:
                                   1891 ;	main.c:227: printf("Invalid option. Please select a valid action.\n\r");
      000822 74r0D            [12] 1892 	mov	a,#___str_36
      000824 C0 E0            [24] 1893 	push	acc
      000826 74s04            [12] 1894 	mov	a,#(___str_36 >> 8)
      000828 C0 E0            [24] 1895 	push	acc
      00082A 74 80            [12] 1896 	mov	a,#0x80
      00082C C0 E0            [24] 1897 	push	acc
      00082E 12r00r00         [24] 1898 	lcall	_printf
      000831 15 81            [12] 1899 	dec	sp
      000833 15 81            [12] 1900 	dec	sp
      000835 15 81            [12] 1901 	dec	sp
                                   1902 ;	main.c:230: }
                                   1903 ;	main.c:232: }
      000837 02r02r5F         [24] 1904 	ljmp	00118$
                                   1905 	.area CSEG    (CODE)
                                   1906 	.area CONST   (CODE)
                                   1907 	.area CONST   (CODE)
      000000                       1908 ___str_0:
      000000 0A                    1909 	.db 0x0a
      000001 0D                    1910 	.db 0x0d
      000002 00                    1911 	.db 0x00
                                   1912 	.area CSEG    (CODE)
                                   1913 	.area CONST   (CODE)
      000003                       1914 ___str_1:
      000003 53 50 49 20 4F 70 65  1915 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    1916 	.db 0x0a
      00001A 0D                    1917 	.db 0x0d
      00001B 00                    1918 	.db 0x00
                                   1919 	.area CSEG    (CODE)
                                   1920 	.area CONST   (CODE)
      00001C                       1921 ___str_2:
      00001C 0A                    1922 	.db 0x0a
      00001D 0D                    1923 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  1924 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    1925 	.db 0x0a
      000031 0D                    1926 	.db 0x0d
      000032 00                    1927 	.db 0x00
                                   1928 	.area CSEG    (CODE)
                                   1929 	.area CONST   (CODE)
      000033                       1930 ___str_3:
      000033 31 20 2D 2D 3E 20 43  1931 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    1932 	.db 0x0a
      000047 0D                    1933 	.db 0x0d
      000048 00                    1934 	.db 0x00
                                   1935 	.area CSEG    (CODE)
                                   1936 	.area CONST   (CODE)
      000049                       1937 ___str_4:
      000049 32 20 2D 2D 3E 20 42  1938 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    1939 	.db 0x0a
      00005C 0D                    1940 	.db 0x0d
      00005D 00                    1941 	.db 0x00
                                   1942 	.area CSEG    (CODE)
                                   1943 	.area CONST   (CODE)
      00005E                       1944 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  1945 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    1946 	.db 0x0a
      000070 0D                    1947 	.db 0x0d
      000071 00                    1948 	.db 0x00
                                   1949 	.area CSEG    (CODE)
                                   1950 	.area CONST   (CODE)
      000072                       1951 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  1952 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    1953 	.db 0x0a
      00008A 0D                    1954 	.db 0x0d
      00008B 00                    1955 	.db 0x00
                                   1956 	.area CSEG    (CODE)
                                   1957 	.area CONST   (CODE)
      00008C                       1958 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  1959 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    1960 	.db 0x0a
      0000A0 0D                    1961 	.db 0x0d
      0000A1 00                    1962 	.db 0x00
                                   1963 	.area CSEG    (CODE)
                                   1964 	.area CONST   (CODE)
      0000A2                       1965 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  1966 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    1967 	.db 0x0a
      0000B5 0D                    1968 	.db 0x0d
      0000B6 00                    1969 	.db 0x00
                                   1970 	.area CSEG    (CODE)
                                   1971 	.area CONST   (CODE)
      0000B7                       1972 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  1973 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    1974 	.db 0x0a
      0000C7 0D                    1975 	.db 0x0d
      0000C8 00                    1976 	.db 0x00
                                   1977 	.area CSEG    (CODE)
                                   1978 	.area CONST   (CODE)
      0000C9                       1979 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  1980 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    1981 	.db 0x0a
      0000E1 0D                    1982 	.db 0x0d
      0000E2 00                    1983 	.db 0x00
                                   1984 	.area CSEG    (CODE)
                                   1985 	.area CONST   (CODE)
      0000E3                       1986 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  1987 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    1988 	.db 0x0a
      0000F6 0D                    1989 	.db 0x0d
      0000F7 00                    1990 	.db 0x00
                                   1991 	.area CSEG    (CODE)
                                   1992 	.area CONST   (CODE)
      0000F8                       1993 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  1994 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    1995 	.db 0x0a
      00010F 0D                    1996 	.db 0x0d
      000110 00                    1997 	.db 0x00
                                   1998 	.area CSEG    (CODE)
                                   1999 	.area CONST   (CODE)
      000111                       2000 ___str_13:
      000111 42 20 2D 2D 3E 20 49  2001 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2002 	.db 0x0a
      000127 0D                    2003 	.db 0x0d
      000128 00                    2004 	.db 0x00
                                   2005 	.area CSEG    (CODE)
                                   2006 	.area CONST   (CODE)
      000129                       2007 ___str_14:
      000129 43 20 2D 2D 3E 20 48  2008 	.ascii "C --> Hard Reset(nRESET pin)"
             61 72 64 20 52 65 73
             65 74 28 6E 52 45 53
             45 54 20 70 69 6E 29
      000145 0A                    2009 	.db 0x0a
      000146 0D                    2010 	.db 0x0d
      000147 00                    2011 	.db 0x00
                                   2012 	.area CSEG    (CODE)
                                   2013 	.area CONST   (CODE)
      000148                       2014 ___str_15:
      000148 45 6E 74 65 72 20 74  2015 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      00016A 0A                    2016 	.db 0x0a
      00016B 0D                    2017 	.db 0x0d
      00016C 00                    2018 	.db 0x00
                                   2019 	.area CSEG    (CODE)
                                   2020 	.area CONST   (CODE)
      00016D                       2021 ___str_16:
      00016D 45 6E 74 65 72 20 74  2022 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      000197 0A                    2023 	.db 0x0a
      000198 0D                    2024 	.db 0x0d
      000199 00                    2025 	.db 0x00
                                   2026 	.area CSEG    (CODE)
                                   2027 	.area CONST   (CODE)
      00019A                       2028 ___str_17:
      00019A 45 6E 74 65 72 20 74  2029 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      0001BB 0A                    2030 	.db 0x0a
      0001BC 0D                    2031 	.db 0x0d
      0001BD 00                    2032 	.db 0x00
                                   2033 	.area CSEG    (CODE)
                                   2034 	.area CONST   (CODE)
      0001BE                       2035 ___str_18:
      0001BE 45 6E 74 65 72 20 74  2036 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      0001E1 0A                    2037 	.db 0x0a
      0001E2 0D                    2038 	.db 0x0d
      0001E3 00                    2039 	.db 0x00
                                   2040 	.area CSEG    (CODE)
                                   2041 	.area CONST   (CODE)
      0001E4                       2042 ___str_19:
      0001E4 45 6E 74 65 72 20 74  2043 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      0001FF 0A                    2044 	.db 0x0a
      000200 0D                    2045 	.db 0x0d
      000201 00                    2046 	.db 0x00
                                   2047 	.area CSEG    (CODE)
                                   2048 	.area CONST   (CODE)
      000202                       2049 ___str_20:
      000202 45 6E 74 65 72 20 25  2050 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000222 0A                    2051 	.db 0x0a
      000223 0D                    2052 	.db 0x0d
      000224 00                    2053 	.db 0x00
                                   2054 	.area CSEG    (CODE)
                                   2055 	.area CONST   (CODE)
      000225                       2056 ___str_21:
      000225 42 79 74 65 20 25 64  2057 	.ascii "Byte %d: "
             3A 20
      00022E 00                    2058 	.db 0x00
                                   2059 	.area CSEG    (CODE)
                                   2060 	.area CONST   (CODE)
      00022F                       2061 ___str_22:
      00022F 45 6E 74 65 72 20 74  2062 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      000251 0A                    2063 	.db 0x0a
      000252 0D                    2064 	.db 0x0d
      000253 00                    2065 	.db 0x00
                                   2066 	.area CSEG    (CODE)
                                   2067 	.area CONST   (CODE)
      000254                       2068 ___str_23:
      000254 45 6E 74 65 72 20 74  2069 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      00027A 0A                    2070 	.db 0x0a
      00027B 0D                    2071 	.db 0x0d
      00027C 00                    2072 	.db 0x00
                                   2073 	.area CSEG    (CODE)
                                   2074 	.area CONST   (CODE)
      00027D                       2075 ___str_24:
      00027D 45 6E 74 65 72 20 74  2076 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002A3 0A                    2077 	.db 0x0a
      0002A4 0D                    2078 	.db 0x0d
      0002A5 00                    2079 	.db 0x00
                                   2080 	.area CSEG    (CODE)
                                   2081 	.area CONST   (CODE)
      0002A6                       2082 ___str_25:
      0002A6 4D 41 43 20 52 65 67  2083 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0002BF 0A                    2084 	.db 0x0a
      0002C0 0D                    2085 	.db 0x0d
      0002C1 00                    2086 	.db 0x00
                                   2087 	.area CSEG    (CODE)
                                   2088 	.area CONST   (CODE)
      0002C2                       2089 ___str_26:
      0002C2 45 6E 74 65 72 20 74  2090 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      0002E1 0A                    2091 	.db 0x0a
      0002E2 0D                    2092 	.db 0x0d
      0002E3 00                    2093 	.db 0x00
                                   2094 	.area CSEG    (CODE)
                                   2095 	.area CONST   (CODE)
      0002E4                       2096 ___str_27:
      0002E4 45 6E 74 65 72 20 74  2097 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      000303 0A                    2098 	.db 0x0a
      000304 0D                    2099 	.db 0x0d
      000305 00                    2100 	.db 0x00
                                   2101 	.area CSEG    (CODE)
                                   2102 	.area CONST   (CODE)
      000306                       2103 ___str_28:
      000306 50 48 59 20 57 72 69  2104 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      00031C 0A                    2105 	.db 0x0a
      00031D 0D                    2106 	.db 0x0d
      00031E 00                    2107 	.db 0x00
                                   2108 	.area CSEG    (CODE)
                                   2109 	.area CONST   (CODE)
      00031F                       2110 ___str_29:
      00031F 45 6E 74 65 72 20 74  2111 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000346 0A                    2112 	.db 0x0a
      000347 0D                    2113 	.db 0x0d
      000348 00                    2114 	.db 0x00
                                   2115 	.area CSEG    (CODE)
                                   2116 	.area CONST   (CODE)
      000349                       2117 ___str_30:
      000349 50 48 59 20 52 65 61  2118 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      00035E 0A                    2119 	.db 0x0a
      00035F 0D                    2120 	.db 0x0d
      000360 00                    2121 	.db 0x00
                                   2122 	.area CSEG    (CODE)
                                   2123 	.area CONST   (CODE)
      000361                       2124 ___str_31:
      000361 52 65 73 65 74 74 69  2125 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      000376 0A                    2126 	.db 0x0a
      000377 0D                    2127 	.db 0x0d
      000378 00                    2128 	.db 0x00
                                   2129 	.area CSEG    (CODE)
                                   2130 	.area CONST   (CODE)
      000379                       2131 ___str_32:
      000379 45 6E 74 65 72 20 74  2132 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003A0 0A                    2133 	.db 0x0a
      0003A1 0D                    2134 	.db 0x0d
      0003A2 00                    2135 	.db 0x00
                                   2136 	.area CSEG    (CODE)
                                   2137 	.area CONST   (CODE)
      0003A3                       2138 ___str_33:
      0003A3 45 6E 74 65 72 20 74  2139 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      0003BB 0A                    2140 	.db 0x0a
      0003BC 0D                    2141 	.db 0x0d
      0003BD 00                    2142 	.db 0x00
                                   2143 	.area CSEG    (CODE)
                                   2144 	.area CONST   (CODE)
      0003BE                       2145 ___str_34:
      0003BE 45 54 48 20 52 65 67  2146 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      0003D7 0A                    2147 	.db 0x0a
      0003D8 0D                    2148 	.db 0x0d
      0003D9 00                    2149 	.db 0x00
                                   2150 	.area CSEG    (CODE)
                                   2151 	.area CONST   (CODE)
      0003DA                       2152 ___str_35:
      0003DA 20 52 65 73 65 74 74  2153 	.ascii " Resetting ENC using RESET pin in Hardware(P1_0)"
             69 6E 67 20 45 4E 43
             20 75 73 69 6E 67 20
             52 45 53 45 54 20 70
             69 6E 20 69 6E 20 48
             61 72 64 77 61 72 65
             28 50 31 5F 30 29
      00040A 0A                    2154 	.db 0x0a
      00040B 0D                    2155 	.db 0x0d
      00040C 00                    2156 	.db 0x00
                                   2157 	.area CSEG    (CODE)
                                   2158 	.area CONST   (CODE)
      00040D                       2159 ___str_36:
      00040D 49 6E 76 61 6C 69 64  2160 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      00043A 0A                    2161 	.db 0x0a
      00043B 0D                    2162 	.db 0x0d
      00043C 00                    2163 	.db 0x00
                                   2164 	.area CSEG    (CODE)
                                   2165 	.area XINIT   (CODE)
      000000                       2166 __xinit__device_mac:
      000000 02                    2167 	.db #0x02	; 2
      000001 11                    2168 	.db #0x11	; 17
      000002 22                    2169 	.db #0x22	; 34
      000003 33                    2170 	.db #0x33	; 51	'3'
      000004 44                    2171 	.db #0x44	; 68	'D'
      000005 55                    2172 	.db #0x55	; 85	'U'
      000006                       2173 __xinit__target_mac:
      000006 F8                    2174 	.db #0xf8	; 248
      000007 75                    2175 	.db #0x75	; 117	'u'
      000008 A4                    2176 	.db #0xa4	; 164
      000009 8C                    2177 	.db #0x8c	; 140
      00000A 41                    2178 	.db #0x41	; 65	'A'
      00000B 31                    2179 	.db #0x31	; 49	'1'
      00000C                       2180 __xinit__device_ip:
      00000C C0                    2181 	.db #0xc0	; 192
      00000D A8                    2182 	.db #0xa8	; 168
      00000E 01                    2183 	.db #0x01	; 1
      00000F 64                    2184 	.db #0x64	; 100	'd'
      000010                       2185 __xinit__target_ip:
      000010 C0                    2186 	.db #0xc0	; 192
      000011 A8                    2187 	.db #0xa8	; 168
      000012 01                    2188 	.db #0x01	; 1
      000013 01                    2189 	.db #0x01	; 1
                                   2190 	.area CABS    (ABS,CODE)
