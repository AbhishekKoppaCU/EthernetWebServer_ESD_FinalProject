                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _get_user_buffer_size
                                     13 	.globl _hex_to_int
                                     14 	.globl _update_ERXRDPT
                                     15 	.globl _ENC_pkt_count
                                     16 	.globl _enc_init
                                     17 	.globl _send_arp_request
                                     18 	.globl _spi_control_write
                                     19 	.globl _eth_spi_read
                                     20 	.globl _phy_spi_write
                                     21 	.globl _phy_spi_read
                                     22 	.globl _spi_buffer_write
                                     23 	.globl _spi_buffer_read
                                     24 	.globl _mac_spi_read
                                     25 	.globl _enc_reset
                                     26 	.globl _configure_SPI
                                     27 	.globl _process_packet_from_buffer
                                     28 	.globl _transmit_tcp_packet
                                     29 	.globl _print_hexdump
                                     30 	.globl _process_tcp_packet
                                     31 	.globl _memcmp
                                     32 	.globl _free
                                     33 	.globl _malloc
                                     34 	.globl _printf_tiny
                                     35 	.globl _putchar
                                     36 	.globl _getchar
                                     37 	.globl _printf
                                     38 	.globl _TF1
                                     39 	.globl _TR1
                                     40 	.globl _TF0
                                     41 	.globl _TR0
                                     42 	.globl _IE1
                                     43 	.globl _IT1
                                     44 	.globl _IE0
                                     45 	.globl _IT0
                                     46 	.globl _SM0
                                     47 	.globl _SM1
                                     48 	.globl _SM2
                                     49 	.globl _REN
                                     50 	.globl _TB8
                                     51 	.globl _RB8
                                     52 	.globl _TI
                                     53 	.globl _RI
                                     54 	.globl _CY
                                     55 	.globl _AC
                                     56 	.globl _F0
                                     57 	.globl _RS1
                                     58 	.globl _RS0
                                     59 	.globl _OV
                                     60 	.globl _F1
                                     61 	.globl _P
                                     62 	.globl _RD
                                     63 	.globl _WR
                                     64 	.globl _T1
                                     65 	.globl _T0
                                     66 	.globl _INT1
                                     67 	.globl _INT0
                                     68 	.globl _TXD0
                                     69 	.globl _TXD
                                     70 	.globl _RXD0
                                     71 	.globl _RXD
                                     72 	.globl _P3_7
                                     73 	.globl _P3_6
                                     74 	.globl _P3_5
                                     75 	.globl _P3_4
                                     76 	.globl _P3_3
                                     77 	.globl _P3_2
                                     78 	.globl _P3_1
                                     79 	.globl _P3_0
                                     80 	.globl _P2_7
                                     81 	.globl _P2_6
                                     82 	.globl _P2_5
                                     83 	.globl _P2_4
                                     84 	.globl _P2_3
                                     85 	.globl _P2_2
                                     86 	.globl _P2_1
                                     87 	.globl _P2_0
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _P0_7
                                     97 	.globl _P0_6
                                     98 	.globl _P0_5
                                     99 	.globl _P0_4
                                    100 	.globl _P0_3
                                    101 	.globl _P0_2
                                    102 	.globl _P0_1
                                    103 	.globl _P0_0
                                    104 	.globl _PS
                                    105 	.globl _PT1
                                    106 	.globl _PX1
                                    107 	.globl _PT0
                                    108 	.globl _PX0
                                    109 	.globl _EA
                                    110 	.globl _ES
                                    111 	.globl _ET1
                                    112 	.globl _EX1
                                    113 	.globl _ET0
                                    114 	.globl _EX0
                                    115 	.globl _BREG_F7
                                    116 	.globl _BREG_F6
                                    117 	.globl _BREG_F5
                                    118 	.globl _BREG_F4
                                    119 	.globl _BREG_F3
                                    120 	.globl _BREG_F2
                                    121 	.globl _BREG_F1
                                    122 	.globl _BREG_F0
                                    123 	.globl _P5_7
                                    124 	.globl _P5_6
                                    125 	.globl _P5_5
                                    126 	.globl _P5_4
                                    127 	.globl _P5_3
                                    128 	.globl _P5_2
                                    129 	.globl _P5_1
                                    130 	.globl _P5_0
                                    131 	.globl _P4_7
                                    132 	.globl _P4_6
                                    133 	.globl _P4_5
                                    134 	.globl _P4_4
                                    135 	.globl _P4_3
                                    136 	.globl _P4_2
                                    137 	.globl _P4_1
                                    138 	.globl _P4_0
                                    139 	.globl _PX0L
                                    140 	.globl _PT0L
                                    141 	.globl _PX1L
                                    142 	.globl _PT1L
                                    143 	.globl _PSL
                                    144 	.globl _PT2L
                                    145 	.globl _PPCL
                                    146 	.globl _EC
                                    147 	.globl _CCF0
                                    148 	.globl _CCF1
                                    149 	.globl _CCF2
                                    150 	.globl _CCF3
                                    151 	.globl _CCF4
                                    152 	.globl _CR
                                    153 	.globl _CF
                                    154 	.globl _TF2
                                    155 	.globl _EXF2
                                    156 	.globl _RCLK
                                    157 	.globl _TCLK
                                    158 	.globl _EXEN2
                                    159 	.globl _TR2
                                    160 	.globl _C_T2
                                    161 	.globl _CP_RL2
                                    162 	.globl _T2CON_7
                                    163 	.globl _T2CON_6
                                    164 	.globl _T2CON_5
                                    165 	.globl _T2CON_4
                                    166 	.globl _T2CON_3
                                    167 	.globl _T2CON_2
                                    168 	.globl _T2CON_1
                                    169 	.globl _T2CON_0
                                    170 	.globl _PT2
                                    171 	.globl _ET2
                                    172 	.globl _TMOD
                                    173 	.globl _TL1
                                    174 	.globl _TL0
                                    175 	.globl _TH1
                                    176 	.globl _TH0
                                    177 	.globl _TCON
                                    178 	.globl _SP
                                    179 	.globl _SCON
                                    180 	.globl _SBUF0
                                    181 	.globl _SBUF
                                    182 	.globl _PSW
                                    183 	.globl _PCON
                                    184 	.globl _P3
                                    185 	.globl _P2
                                    186 	.globl _P1
                                    187 	.globl _P0
                                    188 	.globl _IP
                                    189 	.globl _IE
                                    190 	.globl _DP0L
                                    191 	.globl _DPL
                                    192 	.globl _DP0H
                                    193 	.globl _DPH
                                    194 	.globl _B
                                    195 	.globl _ACC
                                    196 	.globl _EECON
                                    197 	.globl _KBF
                                    198 	.globl _KBE
                                    199 	.globl _KBLS
                                    200 	.globl _BRL
                                    201 	.globl _BDRCON
                                    202 	.globl _T2MOD
                                    203 	.globl _SPDAT
                                    204 	.globl _SPSTA
                                    205 	.globl _SPCON
                                    206 	.globl _SADEN
                                    207 	.globl _SADDR
                                    208 	.globl _WDTPRG
                                    209 	.globl _WDTRST
                                    210 	.globl _P5
                                    211 	.globl _P4
                                    212 	.globl _IPH1
                                    213 	.globl _IPL1
                                    214 	.globl _IPH0
                                    215 	.globl _IPL0
                                    216 	.globl _IEN1
                                    217 	.globl _IEN0
                                    218 	.globl _CMOD
                                    219 	.globl _CL
                                    220 	.globl _CH
                                    221 	.globl _CCON
                                    222 	.globl _CCAPM4
                                    223 	.globl _CCAPM3
                                    224 	.globl _CCAPM2
                                    225 	.globl _CCAPM1
                                    226 	.globl _CCAPM0
                                    227 	.globl _CCAP4L
                                    228 	.globl _CCAP3L
                                    229 	.globl _CCAP2L
                                    230 	.globl _CCAP1L
                                    231 	.globl _CCAP0L
                                    232 	.globl _CCAP4H
                                    233 	.globl _CCAP3H
                                    234 	.globl _CCAP2H
                                    235 	.globl _CCAP1H
                                    236 	.globl _CCAP0H
                                    237 	.globl _CKCON1
                                    238 	.globl _CKCON0
                                    239 	.globl _CKRL
                                    240 	.globl _AUXR1
                                    241 	.globl _AUXR
                                    242 	.globl _TH2
                                    243 	.globl _TL2
                                    244 	.globl _RCAP2H
                                    245 	.globl _RCAP2L
                                    246 	.globl _T2CON
                                    247 	.globl _target_ip
                                    248 	.globl _device_ip
                                    249 	.globl _target_mac
                                    250 	.globl _device_mac
                                    251 ;--------------------------------------------------------
                                    252 ; special function registers
                                    253 ;--------------------------------------------------------
                                    254 	.area RSEG    (ABS,DATA)
      000000                        255 	.org 0x0000
                           0000C8   256 _T2CON	=	0x00c8
                           0000CA   257 _RCAP2L	=	0x00ca
                           0000CB   258 _RCAP2H	=	0x00cb
                           0000CC   259 _TL2	=	0x00cc
                           0000CD   260 _TH2	=	0x00cd
                           00008E   261 _AUXR	=	0x008e
                           0000A2   262 _AUXR1	=	0x00a2
                           000097   263 _CKRL	=	0x0097
                           00008F   264 _CKCON0	=	0x008f
                           0000AF   265 _CKCON1	=	0x00af
                           0000FA   266 _CCAP0H	=	0x00fa
                           0000FB   267 _CCAP1H	=	0x00fb
                           0000FC   268 _CCAP2H	=	0x00fc
                           0000FD   269 _CCAP3H	=	0x00fd
                           0000FE   270 _CCAP4H	=	0x00fe
                           0000EA   271 _CCAP0L	=	0x00ea
                           0000EB   272 _CCAP1L	=	0x00eb
                           0000EC   273 _CCAP2L	=	0x00ec
                           0000ED   274 _CCAP3L	=	0x00ed
                           0000EE   275 _CCAP4L	=	0x00ee
                           0000DA   276 _CCAPM0	=	0x00da
                           0000DB   277 _CCAPM1	=	0x00db
                           0000DC   278 _CCAPM2	=	0x00dc
                           0000DD   279 _CCAPM3	=	0x00dd
                           0000DE   280 _CCAPM4	=	0x00de
                           0000D8   281 _CCON	=	0x00d8
                           0000F9   282 _CH	=	0x00f9
                           0000E9   283 _CL	=	0x00e9
                           0000D9   284 _CMOD	=	0x00d9
                           0000A8   285 _IEN0	=	0x00a8
                           0000B1   286 _IEN1	=	0x00b1
                           0000B8   287 _IPL0	=	0x00b8
                           0000B7   288 _IPH0	=	0x00b7
                           0000B2   289 _IPL1	=	0x00b2
                           0000B3   290 _IPH1	=	0x00b3
                           0000C0   291 _P4	=	0x00c0
                           0000E8   292 _P5	=	0x00e8
                           0000A6   293 _WDTRST	=	0x00a6
                           0000A7   294 _WDTPRG	=	0x00a7
                           0000A9   295 _SADDR	=	0x00a9
                           0000B9   296 _SADEN	=	0x00b9
                           0000C3   297 _SPCON	=	0x00c3
                           0000C4   298 _SPSTA	=	0x00c4
                           0000C5   299 _SPDAT	=	0x00c5
                           0000C9   300 _T2MOD	=	0x00c9
                           00009B   301 _BDRCON	=	0x009b
                           00009A   302 _BRL	=	0x009a
                           00009C   303 _KBLS	=	0x009c
                           00009D   304 _KBE	=	0x009d
                           00009E   305 _KBF	=	0x009e
                           0000D2   306 _EECON	=	0x00d2
                           0000E0   307 _ACC	=	0x00e0
                           0000F0   308 _B	=	0x00f0
                           000083   309 _DPH	=	0x0083
                           000083   310 _DP0H	=	0x0083
                           000082   311 _DPL	=	0x0082
                           000082   312 _DP0L	=	0x0082
                           0000A8   313 _IE	=	0x00a8
                           0000B8   314 _IP	=	0x00b8
                           000080   315 _P0	=	0x0080
                           000090   316 _P1	=	0x0090
                           0000A0   317 _P2	=	0x00a0
                           0000B0   318 _P3	=	0x00b0
                           000087   319 _PCON	=	0x0087
                           0000D0   320 _PSW	=	0x00d0
                           000099   321 _SBUF	=	0x0099
                           000099   322 _SBUF0	=	0x0099
                           000098   323 _SCON	=	0x0098
                           000081   324 _SP	=	0x0081
                           000088   325 _TCON	=	0x0088
                           00008C   326 _TH0	=	0x008c
                           00008D   327 _TH1	=	0x008d
                           00008A   328 _TL0	=	0x008a
                           00008B   329 _TL1	=	0x008b
                           000089   330 _TMOD	=	0x0089
                                    331 ;--------------------------------------------------------
                                    332 ; special function bits
                                    333 ;--------------------------------------------------------
                                    334 	.area RSEG    (ABS,DATA)
      000000                        335 	.org 0x0000
                           0000AD   336 _ET2	=	0x00ad
                           0000BD   337 _PT2	=	0x00bd
                           0000C8   338 _T2CON_0	=	0x00c8
                           0000C9   339 _T2CON_1	=	0x00c9
                           0000CA   340 _T2CON_2	=	0x00ca
                           0000CB   341 _T2CON_3	=	0x00cb
                           0000CC   342 _T2CON_4	=	0x00cc
                           0000CD   343 _T2CON_5	=	0x00cd
                           0000CE   344 _T2CON_6	=	0x00ce
                           0000CF   345 _T2CON_7	=	0x00cf
                           0000C8   346 _CP_RL2	=	0x00c8
                           0000C9   347 _C_T2	=	0x00c9
                           0000CA   348 _TR2	=	0x00ca
                           0000CB   349 _EXEN2	=	0x00cb
                           0000CC   350 _TCLK	=	0x00cc
                           0000CD   351 _RCLK	=	0x00cd
                           0000CE   352 _EXF2	=	0x00ce
                           0000CF   353 _TF2	=	0x00cf
                           0000DF   354 _CF	=	0x00df
                           0000DE   355 _CR	=	0x00de
                           0000DC   356 _CCF4	=	0x00dc
                           0000DB   357 _CCF3	=	0x00db
                           0000DA   358 _CCF2	=	0x00da
                           0000D9   359 _CCF1	=	0x00d9
                           0000D8   360 _CCF0	=	0x00d8
                           0000AE   361 _EC	=	0x00ae
                           0000BE   362 _PPCL	=	0x00be
                           0000BD   363 _PT2L	=	0x00bd
                           0000BC   364 _PSL	=	0x00bc
                           0000BB   365 _PT1L	=	0x00bb
                           0000BA   366 _PX1L	=	0x00ba
                           0000B9   367 _PT0L	=	0x00b9
                           0000B8   368 _PX0L	=	0x00b8
                           0000C0   369 _P4_0	=	0x00c0
                           0000C1   370 _P4_1	=	0x00c1
                           0000C2   371 _P4_2	=	0x00c2
                           0000C3   372 _P4_3	=	0x00c3
                           0000C4   373 _P4_4	=	0x00c4
                           0000C5   374 _P4_5	=	0x00c5
                           0000C6   375 _P4_6	=	0x00c6
                           0000C7   376 _P4_7	=	0x00c7
                           0000E8   377 _P5_0	=	0x00e8
                           0000E9   378 _P5_1	=	0x00e9
                           0000EA   379 _P5_2	=	0x00ea
                           0000EB   380 _P5_3	=	0x00eb
                           0000EC   381 _P5_4	=	0x00ec
                           0000ED   382 _P5_5	=	0x00ed
                           0000EE   383 _P5_6	=	0x00ee
                           0000EF   384 _P5_7	=	0x00ef
                           0000F0   385 _BREG_F0	=	0x00f0
                           0000F1   386 _BREG_F1	=	0x00f1
                           0000F2   387 _BREG_F2	=	0x00f2
                           0000F3   388 _BREG_F3	=	0x00f3
                           0000F4   389 _BREG_F4	=	0x00f4
                           0000F5   390 _BREG_F5	=	0x00f5
                           0000F6   391 _BREG_F6	=	0x00f6
                           0000F7   392 _BREG_F7	=	0x00f7
                           0000A8   393 _EX0	=	0x00a8
                           0000A9   394 _ET0	=	0x00a9
                           0000AA   395 _EX1	=	0x00aa
                           0000AB   396 _ET1	=	0x00ab
                           0000AC   397 _ES	=	0x00ac
                           0000AF   398 _EA	=	0x00af
                           0000B8   399 _PX0	=	0x00b8
                           0000B9   400 _PT0	=	0x00b9
                           0000BA   401 _PX1	=	0x00ba
                           0000BB   402 _PT1	=	0x00bb
                           0000BC   403 _PS	=	0x00bc
                           000080   404 _P0_0	=	0x0080
                           000081   405 _P0_1	=	0x0081
                           000082   406 _P0_2	=	0x0082
                           000083   407 _P0_3	=	0x0083
                           000084   408 _P0_4	=	0x0084
                           000085   409 _P0_5	=	0x0085
                           000086   410 _P0_6	=	0x0086
                           000087   411 _P0_7	=	0x0087
                           000090   412 _P1_0	=	0x0090
                           000091   413 _P1_1	=	0x0091
                           000092   414 _P1_2	=	0x0092
                           000093   415 _P1_3	=	0x0093
                           000094   416 _P1_4	=	0x0094
                           000095   417 _P1_5	=	0x0095
                           000096   418 _P1_6	=	0x0096
                           000097   419 _P1_7	=	0x0097
                           0000A0   420 _P2_0	=	0x00a0
                           0000A1   421 _P2_1	=	0x00a1
                           0000A2   422 _P2_2	=	0x00a2
                           0000A3   423 _P2_3	=	0x00a3
                           0000A4   424 _P2_4	=	0x00a4
                           0000A5   425 _P2_5	=	0x00a5
                           0000A6   426 _P2_6	=	0x00a6
                           0000A7   427 _P2_7	=	0x00a7
                           0000B0   428 _P3_0	=	0x00b0
                           0000B1   429 _P3_1	=	0x00b1
                           0000B2   430 _P3_2	=	0x00b2
                           0000B3   431 _P3_3	=	0x00b3
                           0000B4   432 _P3_4	=	0x00b4
                           0000B5   433 _P3_5	=	0x00b5
                           0000B6   434 _P3_6	=	0x00b6
                           0000B7   435 _P3_7	=	0x00b7
                           0000B0   436 _RXD	=	0x00b0
                           0000B0   437 _RXD0	=	0x00b0
                           0000B1   438 _TXD	=	0x00b1
                           0000B1   439 _TXD0	=	0x00b1
                           0000B2   440 _INT0	=	0x00b2
                           0000B3   441 _INT1	=	0x00b3
                           0000B4   442 _T0	=	0x00b4
                           0000B5   443 _T1	=	0x00b5
                           0000B6   444 _WR	=	0x00b6
                           0000B7   445 _RD	=	0x00b7
                           0000D0   446 _P	=	0x00d0
                           0000D1   447 _F1	=	0x00d1
                           0000D2   448 _OV	=	0x00d2
                           0000D3   449 _RS0	=	0x00d3
                           0000D4   450 _RS1	=	0x00d4
                           0000D5   451 _F0	=	0x00d5
                           0000D6   452 _AC	=	0x00d6
                           0000D7   453 _CY	=	0x00d7
                           000098   454 _RI	=	0x0098
                           000099   455 _TI	=	0x0099
                           00009A   456 _RB8	=	0x009a
                           00009B   457 _TB8	=	0x009b
                           00009C   458 _REN	=	0x009c
                           00009D   459 _SM2	=	0x009d
                           00009E   460 _SM1	=	0x009e
                           00009F   461 _SM0	=	0x009f
                           000088   462 _IT0	=	0x0088
                           000089   463 _IE0	=	0x0089
                           00008A   464 _IT1	=	0x008a
                           00008B   465 _IE1	=	0x008b
                           00008C   466 _TR0	=	0x008c
                           00008D   467 _TF0	=	0x008d
                           00008E   468 _TR1	=	0x008e
                           00008F   469 _TF1	=	0x008f
                                    470 ;--------------------------------------------------------
                                    471 ; overlayable register banks
                                    472 ;--------------------------------------------------------
                                    473 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        474 	.ds 8
                                    475 ;--------------------------------------------------------
                                    476 ; internal ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area DSEG    (DATA)
      000000                        479 _main_sloc0_1_0:
      000000                        480 	.ds 2
      000002                        481 _main_sloc1_1_0:
      000002                        482 	.ds 2
      000004                        483 _main_sloc2_1_0:
      000004                        484 	.ds 2
      000006                        485 _main_sloc3_1_0:
      000006                        486 	.ds 2
      000008                        487 _main_sloc4_1_0:
      000008                        488 	.ds 2
      00000A                        489 _main_sloc5_1_0:
      00000A                        490 	.ds 3
                                    491 ;--------------------------------------------------------
                                    492 ; overlayable items in internal ram
                                    493 ;--------------------------------------------------------
                                    494 	.area	OSEG    (OVR,DATA)
      000000                        495 _hex_to_int_sloc0_1_0:
      000000                        496 	.ds 3
      000003                        497 _hex_to_int_sloc1_1_0:
      000003                        498 	.ds 1
      000004                        499 _hex_to_int_sloc2_1_0:
      000004                        500 	.ds 2
                                    501 ;--------------------------------------------------------
                                    502 ; Stack segment in internal ram
                                    503 ;--------------------------------------------------------
                                    504 	.area SSEG
      000000                        505 __start__stack:
      000000                        506 	.ds	1
                                    507 
                                    508 ;--------------------------------------------------------
                                    509 ; indirectly addressable internal ram data
                                    510 ;--------------------------------------------------------
                                    511 	.area ISEG    (DATA)
                                    512 ;--------------------------------------------------------
                                    513 ; absolute internal ram data
                                    514 ;--------------------------------------------------------
                                    515 	.area IABS    (ABS,DATA)
                                    516 	.area IABS    (ABS,DATA)
                                    517 ;--------------------------------------------------------
                                    518 ; bit data
                                    519 ;--------------------------------------------------------
                                    520 	.area BSEG    (BIT)
                                    521 ;--------------------------------------------------------
                                    522 ; paged external ram data
                                    523 ;--------------------------------------------------------
                                    524 	.area PSEG    (PAG,XDATA)
                                    525 ;--------------------------------------------------------
                                    526 ; uninitialized external ram data
                                    527 ;--------------------------------------------------------
                                    528 	.area XSEG    (XDATA)
      000000                        529 _hex_to_int_str_10000_127:
      000000                        530 	.ds 3
      000003                        531 _hex_to_int_result_10000_128:
      000003                        532 	.ds 2
      000005                        533 _hex_to_int_ASCII_20000_129:
      000005                        534 	.ds 2
      000007                        535 _get_user_buffer_size_input_10000_134:
      000007                        536 	.ds 10
      000011                        537 _main_device_mac_10000_137:
      000011                        538 	.ds 6
      000017                        539 _main_target_mac_10000_137:
      000017                        540 	.ds 6
      00001D                        541 _main_device_ip_10000_137:
      00001D                        542 	.ds 4
      000021                        543 _main_target_ip_10000_137:
      000021                        544 	.ds 4
      000025                        545 _main_buffer_40003_147:
      000025                        546 	.ds 256
      000125                        547 _main_buffer_40003_152:
      000125                        548 	.ds 256
      000225                        549 _main_gNextPacketPtr_60001_168:
      000225                        550 	.ds 2
      000227                        551 _main_is_tcp_for_target_60004_173:
      000227                        552 	.ds 2
      000229                        553 _main_response_size_70004_177:
      000229                        554 	.ds 2
                                    555 ;--------------------------------------------------------
                                    556 ; absolute external ram data
                                    557 ;--------------------------------------------------------
                                    558 	.area XABS    (ABS,XDATA)
                                    559 ;--------------------------------------------------------
                                    560 ; initialized external ram data
                                    561 ;--------------------------------------------------------
                                    562 	.area XISEG   (XDATA)
      000000                        563 _device_mac::
      000000                        564 	.ds 6
      000006                        565 _target_mac::
      000006                        566 	.ds 6
      00000C                        567 _device_ip::
      00000C                        568 	.ds 4
      000010                        569 _target_ip::
      000010                        570 	.ds 4
                                    571 	.area HOME    (CODE)
                                    572 	.area GSINIT0 (CODE)
                                    573 	.area GSINIT1 (CODE)
                                    574 	.area GSINIT2 (CODE)
                                    575 	.area GSINIT3 (CODE)
                                    576 	.area GSINIT4 (CODE)
                                    577 	.area GSINIT5 (CODE)
                                    578 	.area GSINIT  (CODE)
                                    579 	.area GSFINAL (CODE)
                                    580 	.area CSEG    (CODE)
                                    581 ;--------------------------------------------------------
                                    582 ; interrupt vector
                                    583 ;--------------------------------------------------------
                                    584 	.area HOME    (CODE)
      000000                        585 __interrupt_vect:
      000000 02r00r00         [24]  586 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  587 	ljmp	_external_interrupt0_isr
                                    588 ;--------------------------------------------------------
                                    589 ; global & static initialisations
                                    590 ;--------------------------------------------------------
                                    591 	.area HOME    (CODE)
                                    592 	.area GSINIT  (CODE)
                                    593 	.area GSFINAL (CODE)
                                    594 	.area GSINIT  (CODE)
                                    595 	.globl __sdcc_gsinit_startup
                                    596 	.globl __sdcc_program_startup
                                    597 	.globl __start__stack
                                    598 	.globl __mcs51_genXINIT
                                    599 	.globl __mcs51_genXRAMCLEAR
                                    600 	.globl __mcs51_genRAMCLEAR
                                    601 ;------------------------------------------------------------
                                    602 ;Allocation info for local variables in function 'main'
                                    603 ;------------------------------------------------------------
                                    604 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    605 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    606 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    607 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    608 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    609 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    610 ;device_mac                Allocated with name '_main_device_mac_10000_137'
                                    611 ;target_mac                Allocated with name '_main_target_mac_10000_137'
                                    612 ;device_ip                 Allocated with name '_main_device_ip_10000_137'
                                    613 ;target_ip                 Allocated with name '_main_target_ip_10000_137'
                                    614 ;c                         Allocated with name '_main_c_20001_139'
                                    615 ;reg_bank                  Allocated with name '_main_reg_bank_40002_142'
                                    616 ;addr                      Allocated with name '_main_addr_40003_143'
                                    617 ;data                      Allocated with name '_main_data_40004_144'
                                    618 ;num_bytes                 Allocated with name '_main_num_bytes_40002_146'
                                    619 ;start_address             Allocated with name '_main_start_address_40003_147'
                                    620 ;buffer                    Allocated with name '_main_buffer_40003_147'
                                    621 ;i                         Allocated with name '_main_i_50003_148'
                                    622 ;num_bytes                 Allocated with name '_main_num_bytes_40002_151'
                                    623 ;start_address             Allocated with name '_main_start_address_40003_152'
                                    624 ;buffer                    Allocated with name '_main_buffer_40003_152'
                                    625 ;reg_bank                  Allocated with name '_main_reg_bank_40002_154'
                                    626 ;addr                      Allocated with name '_main_addr_40003_155'
                                    627 ;data                      Allocated with name '_main_data_40003_155'
                                    628 ;addr                      Allocated with name '_main_addr_40002_157'
                                    629 ;data                      Allocated with name '_main_data_40003_158'
                                    630 ;addr                      Allocated with name '_main_addr_40002_160'
                                    631 ;data                      Allocated with name '_main_data_40002_160'
                                    632 ;addr                      Allocated with name '_main_addr_40002_163'
                                    633 ;bank                      Allocated with name '_main_bank_40003_164'
                                    634 ;data                      Allocated with name '_main_data_40003_164'
                                    635 ;nextPacket                Allocated with name '_main_nextPacket_60001_168'
                                    636 ;byteCount                 Allocated with name '_main_byteCount_60001_168'
                                    637 ;status                    Allocated with name '_main_status_60001_168'
                                    638 ;gNextPacketPtr            Allocated with name '_main_gNextPacketPtr_60001_168'
                                    639 ;len                       Allocated with name '_main_len_60001_168'
                                    640 ;packet_data               Allocated with name '_main_packet_data_60002_171'
                                    641 ;packet_data_actual        Allocated with name '_main_packet_data_actual_60003_172'
                                    642 ;is_tcp_for_target         Allocated with name '_main_is_tcp_for_target_60004_173'
                                    643 ;response_size             Allocated with name '_main_response_size_70004_177'
                                    644 ;response                  Allocated with name '_main_response_70004_177'
                                    645 ;read_econ2                Allocated with name '_main_read_econ2_60005_181'
                                    646 ;i                         Allocated with name '_main_i_50001_184'
                                    647 ;read_econ2                Allocated with name '_main_read_econ2_40002_187'
                                    648 ;------------------------------------------------------------
                                    649 ;	main.c:199: static uint16_t gNextPacketPtr = RX_BUFFER_START;
      000000 90r02r25         [24]  650 	mov	dptr,#_main_gNextPacketPtr_60001_168
      000003 E4               [12]  651 	clr	a
      000004 F0               [24]  652 	movx	@dptr,a
      000005 A3               [24]  653 	inc	dptr
      000006 F0               [24]  654 	movx	@dptr,a
                                    655 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  656 	ljmp	__sdcc_program_startup
                                    657 ;--------------------------------------------------------
                                    658 ; Home
                                    659 ;--------------------------------------------------------
                                    660 	.area HOME    (CODE)
                                    661 	.area HOME    (CODE)
      000006                        662 __sdcc_program_startup:
      000006 02r02r3E         [24]  663 	ljmp	_main
                                    664 ;	return from main will return to caller
                                    665 ;--------------------------------------------------------
                                    666 ; code
                                    667 ;--------------------------------------------------------
                                    668 	.area CSEG    (CODE)
                                    669 ;------------------------------------------------------------
                                    670 ;Allocation info for local variables in function 'hex_to_int'
                                    671 ;------------------------------------------------------------
                                    672 ;str                       Allocated with name '_hex_to_int_str_10000_127'
                                    673 ;i                         Allocated with name '_hex_to_int_i_10000_128'
                                    674 ;result                    Allocated with name '_hex_to_int_result_10000_128'
                                    675 ;ASCII                     Allocated with name '_hex_to_int_ASCII_20000_129'
                                    676 ;sloc0                     Allocated with name '_hex_to_int_sloc0_1_0'
                                    677 ;sloc1                     Allocated with name '_hex_to_int_sloc1_1_0'
                                    678 ;sloc2                     Allocated with name '_hex_to_int_sloc2_1_0'
                                    679 ;------------------------------------------------------------
                                    680 ;	main.c:23: int hex_to_int(char* str)
                                    681 ;	-----------------------------------------
                                    682 ;	 function hex_to_int
                                    683 ;	-----------------------------------------
      000000                        684 _hex_to_int:
                           000007   685 	ar7 = 0x07
                           000006   686 	ar6 = 0x06
                           000005   687 	ar5 = 0x05
                           000004   688 	ar4 = 0x04
                           000003   689 	ar3 = 0x03
                           000002   690 	ar2 = 0x02
                           000001   691 	ar1 = 0x01
                           000000   692 	ar0 = 0x00
      000000 AF F0            [24]  693 	mov	r7,b
      000002 AE 83            [24]  694 	mov	r6,dph
      000004 E5 82            [12]  695 	mov	a,dpl
      000006 90r00r00         [24]  696 	mov	dptr,#_hex_to_int_str_10000_127
      000009 F0               [24]  697 	movx	@dptr,a
      00000A EE               [12]  698 	mov	a,r6
      00000B A3               [24]  699 	inc	dptr
      00000C F0               [24]  700 	movx	@dptr,a
      00000D EF               [12]  701 	mov	a,r7
      00000E A3               [24]  702 	inc	dptr
      00000F F0               [24]  703 	movx	@dptr,a
                                    704 ;	main.c:26: int i = 0, result = 0;
      000010 90r00r03         [24]  705 	mov	dptr,#_hex_to_int_result_10000_128
      000013 E4               [12]  706 	clr	a
      000014 F0               [24]  707 	movx	@dptr,a
      000015 A3               [24]  708 	inc	dptr
      000016 F0               [24]  709 	movx	@dptr,a
                                    710 ;	main.c:27: while(str[i] != '\0')
      000017 90r00r00         [24]  711 	mov	dptr,#_hex_to_int_str_10000_127
      00001A E0               [24]  712 	movx	a,@dptr
      00001B FD               [12]  713 	mov	r5,a
      00001C A3               [24]  714 	inc	dptr
      00001D E0               [24]  715 	movx	a,@dptr
      00001E FE               [12]  716 	mov	r6,a
      00001F A3               [24]  717 	inc	dptr
      000020 E0               [24]  718 	movx	a,@dptr
      000021 FF               [12]  719 	mov	r7,a
      000022 8D 02            [24]  720 	mov	ar2,r5
      000024 8E 03            [24]  721 	mov	ar3,r6
      000026 8F 04            [24]  722 	mov	ar4,r7
      000028 8D*00            [24]  723 	mov	_hex_to_int_sloc0_1_0,r5
      00002A 8E*01            [24]  724 	mov	(_hex_to_int_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  725 	mov	(_hex_to_int_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  726 	mov	r0,#0x00
      000030 79 00            [12]  727 	mov	r1,#0x00
      000032                        728 00112$:
      000032 C0 02            [24]  729 	push	ar2
      000034 C0 03            [24]  730 	push	ar3
      000036 C0 04            [24]  731 	push	ar4
      000038 E8               [12]  732 	mov	a,r0
      000039 25*00            [12]  733 	add	a, _hex_to_int_sloc0_1_0
      00003B FA               [12]  734 	mov	r2,a
      00003C E9               [12]  735 	mov	a,r1
      00003D 35*01            [12]  736 	addc	a, (_hex_to_int_sloc0_1_0 + 1)
      00003F FB               [12]  737 	mov	r3,a
      000040 AC*02            [24]  738 	mov	r4,(_hex_to_int_sloc0_1_0 + 2)
      000042 8A 82            [24]  739 	mov	dpl,r2
      000044 8B 83            [24]  740 	mov	dph,r3
      000046 8C F0            [24]  741 	mov	b,r4
      000048 12r00r00         [24]  742 	lcall	__gptrget
      00004B F5*03            [12]  743 	mov	_hex_to_int_sloc1_1_0,a
      00004D D0 04            [24]  744 	pop	ar4
      00004F D0 03            [24]  745 	pop	ar3
      000051 D0 02            [24]  746 	pop	ar2
      000053 E5*03            [12]  747 	mov	a,_hex_to_int_sloc1_1_0
      000055 70 03            [24]  748 	jnz	00166$
      000057 02r01rAE         [24]  749 	ljmp	00114$
      00005A                        750 00166$:
                                    751 ;	main.c:29: int ASCII = (int)str[i];
      00005A C0 02            [24]  752 	push	ar2
      00005C C0 03            [24]  753 	push	ar3
      00005E C0 04            [24]  754 	push	ar4
      000060 85*03*04         [24]  755 	mov	_hex_to_int_sloc2_1_0,_hex_to_int_sloc1_1_0
      000063 75*05 00         [24]  756 	mov	(_hex_to_int_sloc2_1_0 + 1),#0x00
      000066 90r00r05         [24]  757 	mov	dptr,#_hex_to_int_ASCII_20000_129
      000069 E5*04            [12]  758 	mov	a,_hex_to_int_sloc2_1_0
      00006B F0               [24]  759 	movx	@dptr,a
      00006C E5*05            [12]  760 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00006E A3               [24]  761 	inc	dptr
      00006F F0               [24]  762 	movx	@dptr,a
                                    763 ;	main.c:30: result *= 16;
      000070 90r00r03         [24]  764 	mov	dptr,#_hex_to_int_result_10000_128
      000073 E0               [24]  765 	movx	a,@dptr
      000074 FB               [12]  766 	mov	r3,a
      000075 A3               [24]  767 	inc	dptr
      000076 E0               [24]  768 	movx	a,@dptr
      000077 C4               [12]  769 	swap	a
      000078 54 F0            [12]  770 	anl	a,#0xf0
      00007A CB               [12]  771 	xch	a,r3
      00007B C4               [12]  772 	swap	a
      00007C CB               [12]  773 	xch	a,r3
      00007D 6B               [12]  774 	xrl	a,r3
      00007E CB               [12]  775 	xch	a,r3
      00007F 54 F0            [12]  776 	anl	a,#0xf0
      000081 CB               [12]  777 	xch	a,r3
      000082 6B               [12]  778 	xrl	a,r3
      000083 FC               [12]  779 	mov	r4,a
      000084 90r00r03         [24]  780 	mov	dptr,#_hex_to_int_result_10000_128
      000087 EB               [12]  781 	mov	a,r3
      000088 F0               [24]  782 	movx	@dptr,a
      000089 EC               [12]  783 	mov	a,r4
      00008A A3               [24]  784 	inc	dptr
      00008B F0               [24]  785 	movx	@dptr,a
                                    786 ;	main.c:31: if(ASCII >= '0' && ASCII <= '9')
      00008C C3               [12]  787 	clr	c
      00008D E5*04            [12]  788 	mov	a,_hex_to_int_sloc2_1_0
      00008F 94 30            [12]  789 	subb	a,#0x30
      000091 E5*05            [12]  790 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000093 64 80            [12]  791 	xrl	a,#0x80
      000095 94 80            [12]  792 	subb	a,#0x80
      000097 D0 04            [24]  793 	pop	ar4
      000099 D0 03            [24]  794 	pop	ar3
      00009B D0 02            [24]  795 	pop	ar2
      00009D 40 3F            [24]  796 	jc	00109$
      00009F 74 39            [12]  797 	mov	a,#0x39
      0000A1 95*04            [12]  798 	subb	a,_hex_to_int_sloc2_1_0
      0000A3 74 80            [12]  799 	mov	a,#(0x00 ^ 0x80)
      0000A5 85*05 F0         [24]  800 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000A8 63 F0 80         [24]  801 	xrl	b,#0x80
      0000AB 95 F0            [12]  802 	subb	a,b
      0000AD 40 2F            [24]  803 	jc	00109$
                                    804 ;	main.c:33: result += str[i] - 48;
      0000AF C0 02            [24]  805 	push	ar2
      0000B1 C0 03            [24]  806 	push	ar3
      0000B3 C0 04            [24]  807 	push	ar4
      0000B5 E5*04            [12]  808 	mov	a,_hex_to_int_sloc2_1_0
      0000B7 24 D0            [12]  809 	add	a,#0xd0
      0000B9 F5*04            [12]  810 	mov	_hex_to_int_sloc2_1_0,a
      0000BB E5*05            [12]  811 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000BD 34 FF            [12]  812 	addc	a,#0xff
      0000BF F5*05            [12]  813 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000C1 90r00r03         [24]  814 	mov	dptr,#_hex_to_int_result_10000_128
      0000C4 E0               [24]  815 	movx	a,@dptr
      0000C5 FA               [12]  816 	mov	r2,a
      0000C6 A3               [24]  817 	inc	dptr
      0000C7 E0               [24]  818 	movx	a,@dptr
      0000C8 FC               [12]  819 	mov	r4,a
      0000C9 90r00r03         [24]  820 	mov	dptr,#_hex_to_int_result_10000_128
      0000CC E5*04            [12]  821 	mov	a,_hex_to_int_sloc2_1_0
      0000CE 2A               [12]  822 	add	a, r2
      0000CF F0               [24]  823 	movx	@dptr,a
      0000D0 E5*05            [12]  824 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000D2 3C               [12]  825 	addc	a, r4
      0000D3 A3               [24]  826 	inc	dptr
      0000D4 F0               [24]  827 	movx	@dptr,a
      0000D5 D0 04            [24]  828 	pop	ar4
      0000D7 D0 03            [24]  829 	pop	ar3
      0000D9 D0 02            [24]  830 	pop	ar2
      0000DB 02r01rA6         [24]  831 	ljmp	00110$
      0000DE                        832 00109$:
                                    833 ;	main.c:35: else if(ASCII >= 'A' && ASCII <= 'F')
      0000DE 90r00r05         [24]  834 	mov	dptr,#_hex_to_int_ASCII_20000_129
      0000E1 E0               [24]  835 	movx	a,@dptr
      0000E2 F5*04            [12]  836 	mov	_hex_to_int_sloc2_1_0,a
      0000E4 A3               [24]  837 	inc	dptr
      0000E5 E0               [24]  838 	movx	a,@dptr
      0000E6 F5*05            [12]  839 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      0000E8 C3               [12]  840 	clr	c
      0000E9 E5*04            [12]  841 	mov	a,_hex_to_int_sloc2_1_0
      0000EB 94 41            [12]  842 	subb	a,#0x41
      0000ED E5*05            [12]  843 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      0000EF 64 80            [12]  844 	xrl	a,#0x80
      0000F1 94 80            [12]  845 	subb	a,#0x80
      0000F3 40 4E            [24]  846 	jc	00105$
      0000F5 74 46            [12]  847 	mov	a,#0x46
      0000F7 95*04            [12]  848 	subb	a,_hex_to_int_sloc2_1_0
      0000F9 74 80            [12]  849 	mov	a,#(0x00 ^ 0x80)
      0000FB 85*05 F0         [24]  850 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      0000FE 63 F0 80         [24]  851 	xrl	b,#0x80
      000101 95 F0            [12]  852 	subb	a,b
      000103 40 3E            [24]  853 	jc	00105$
                                    854 ;	main.c:37: result += str[i] - 55;
      000105 C0 05            [24]  855 	push	ar5
      000107 C0 06            [24]  856 	push	ar6
      000109 C0 07            [24]  857 	push	ar7
      00010B E8               [12]  858 	mov	a,r0
      00010C 2A               [12]  859 	add	a, r2
      00010D FD               [12]  860 	mov	r5,a
      00010E E9               [12]  861 	mov	a,r1
      00010F 3B               [12]  862 	addc	a, r3
      000110 FE               [12]  863 	mov	r6,a
      000111 8C 07            [24]  864 	mov	ar7,r4
      000113 8D 82            [24]  865 	mov	dpl,r5
      000115 8E 83            [24]  866 	mov	dph,r6
      000117 8F F0            [24]  867 	mov	b,r7
      000119 12r00r00         [24]  868 	lcall	__gptrget
      00011C 7F 00            [12]  869 	mov	r7,#0x00
      00011E 24 C9            [12]  870 	add	a,#0xc9
      000120 F5*04            [12]  871 	mov	_hex_to_int_sloc2_1_0,a
      000122 EF               [12]  872 	mov	a,r7
      000123 34 FF            [12]  873 	addc	a,#0xff
      000125 F5*05            [12]  874 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      000127 90r00r03         [24]  875 	mov	dptr,#_hex_to_int_result_10000_128
      00012A E0               [24]  876 	movx	a,@dptr
      00012B FE               [12]  877 	mov	r6,a
      00012C A3               [24]  878 	inc	dptr
      00012D E0               [24]  879 	movx	a,@dptr
      00012E FF               [12]  880 	mov	r7,a
      00012F 90r00r03         [24]  881 	mov	dptr,#_hex_to_int_result_10000_128
      000132 E5*04            [12]  882 	mov	a,_hex_to_int_sloc2_1_0
      000134 2E               [12]  883 	add	a, r6
      000135 F0               [24]  884 	movx	@dptr,a
      000136 E5*05            [12]  885 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000138 3F               [12]  886 	addc	a, r7
      000139 A3               [24]  887 	inc	dptr
      00013A F0               [24]  888 	movx	@dptr,a
      00013B D0 07            [24]  889 	pop	ar7
      00013D D0 06            [24]  890 	pop	ar6
      00013F D0 05            [24]  891 	pop	ar5
      000141 80 63            [24]  892 	sjmp	00110$
      000143                        893 00105$:
                                    894 ;	main.c:39: else if(ASCII >= 'a' && ASCII <= 'f')
      000143 90r00r05         [24]  895 	mov	dptr,#_hex_to_int_ASCII_20000_129
      000146 E0               [24]  896 	movx	a,@dptr
      000147 F5*04            [12]  897 	mov	_hex_to_int_sloc2_1_0,a
      000149 A3               [24]  898 	inc	dptr
      00014A E0               [24]  899 	movx	a,@dptr
      00014B F5*05            [12]  900 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00014D C3               [12]  901 	clr	c
      00014E E5*04            [12]  902 	mov	a,_hex_to_int_sloc2_1_0
      000150 94 61            [12]  903 	subb	a,#0x61
      000152 E5*05            [12]  904 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      000154 64 80            [12]  905 	xrl	a,#0x80
      000156 94 80            [12]  906 	subb	a,#0x80
      000158 40 4C            [24]  907 	jc	00110$
      00015A 74 66            [12]  908 	mov	a,#0x66
      00015C 95*04            [12]  909 	subb	a,_hex_to_int_sloc2_1_0
      00015E 74 80            [12]  910 	mov	a,#(0x00 ^ 0x80)
      000160 85*05 F0         [24]  911 	mov	b,(_hex_to_int_sloc2_1_0 + 1)
      000163 63 F0 80         [24]  912 	xrl	b,#0x80
      000166 95 F0            [12]  913 	subb	a,b
      000168 40 3C            [24]  914 	jc	00110$
                                    915 ;	main.c:41: result += str[i] - 87;
      00016A C0 02            [24]  916 	push	ar2
      00016C C0 03            [24]  917 	push	ar3
      00016E C0 04            [24]  918 	push	ar4
      000170 E8               [12]  919 	mov	a,r0
      000171 2D               [12]  920 	add	a, r5
      000172 FA               [12]  921 	mov	r2,a
      000173 E9               [12]  922 	mov	a,r1
      000174 3E               [12]  923 	addc	a, r6
      000175 FB               [12]  924 	mov	r3,a
      000176 8F 04            [24]  925 	mov	ar4,r7
      000178 8A 82            [24]  926 	mov	dpl,r2
      00017A 8B 83            [24]  927 	mov	dph,r3
      00017C 8C F0            [24]  928 	mov	b,r4
      00017E 12r00r00         [24]  929 	lcall	__gptrget
      000181 7C 00            [12]  930 	mov	r4,#0x00
      000183 24 A9            [12]  931 	add	a,#0xa9
      000185 F5*04            [12]  932 	mov	_hex_to_int_sloc2_1_0,a
      000187 EC               [12]  933 	mov	a,r4
      000188 34 FF            [12]  934 	addc	a,#0xff
      00018A F5*05            [12]  935 	mov	(_hex_to_int_sloc2_1_0 + 1),a
      00018C 90r00r03         [24]  936 	mov	dptr,#_hex_to_int_result_10000_128
      00018F E0               [24]  937 	movx	a,@dptr
      000190 FB               [12]  938 	mov	r3,a
      000191 A3               [24]  939 	inc	dptr
      000192 E0               [24]  940 	movx	a,@dptr
      000193 FC               [12]  941 	mov	r4,a
      000194 90r00r03         [24]  942 	mov	dptr,#_hex_to_int_result_10000_128
      000197 E5*04            [12]  943 	mov	a,_hex_to_int_sloc2_1_0
      000199 2B               [12]  944 	add	a, r3
      00019A F0               [24]  945 	movx	@dptr,a
      00019B E5*05            [12]  946 	mov	a,(_hex_to_int_sloc2_1_0 + 1)
      00019D 3C               [12]  947 	addc	a, r4
      00019E A3               [24]  948 	inc	dptr
      00019F F0               [24]  949 	movx	@dptr,a
                                    950 ;	main.c:45: return result;
      0001A0 D0 04            [24]  951 	pop	ar4
      0001A2 D0 03            [24]  952 	pop	ar3
      0001A4 D0 02            [24]  953 	pop	ar2
                                    954 ;	main.c:41: result += str[i] - 87;
      0001A6                        955 00110$:
                                    956 ;	main.c:43: i++;
      0001A6 08               [12]  957 	inc	r0
      0001A7 B8 00 01         [24]  958 	cjne	r0,#0x00,00173$
      0001AA 09               [12]  959 	inc	r1
      0001AB                        960 00173$:
      0001AB 02r00r32         [24]  961 	ljmp	00112$
      0001AE                        962 00114$:
                                    963 ;	main.c:45: return result;
      0001AE 90r00r03         [24]  964 	mov	dptr,#_hex_to_int_result_10000_128
      0001B1 E0               [24]  965 	movx	a,@dptr
      0001B2 FE               [12]  966 	mov	r6,a
      0001B3 A3               [24]  967 	inc	dptr
      0001B4 E0               [24]  968 	movx	a,@dptr
                                    969 ;	main.c:47: }
      0001B5 8E 82            [24]  970 	mov	dpl,r6
      0001B7 F5 83            [12]  971 	mov	dph,a
      0001B9 22               [24]  972 	ret
                                    973 ;------------------------------------------------------------
                                    974 ;Allocation info for local variables in function 'get_user_buffer_size'
                                    975 ;------------------------------------------------------------
                                    976 ;i                         Allocated with name '_get_user_buffer_size_i_10000_134'
                                    977 ;output                    Allocated with name '_get_user_buffer_size_output_10000_134'
                                    978 ;input                     Allocated with name '_get_user_buffer_size_input_10000_134'
                                    979 ;ch                        Allocated with name '_get_user_buffer_size_ch_10000_134'
                                    980 ;------------------------------------------------------------
                                    981 ;	main.c:50: int get_user_buffer_size(void)
                                    982 ;	-----------------------------------------
                                    983 ;	 function get_user_buffer_size
                                    984 ;	-----------------------------------------
      0001BA                        985 _get_user_buffer_size:
                                    986 ;	main.c:56: while((ch = getchar()) != '\n' && ch != '\r' && i < sizeof(input) - 1)              //Keep taking the input from the user until user presses enter
      0001BA 7E 00            [12]  987 	mov	r6,#0x00
      0001BC 7F 00            [12]  988 	mov	r7,#0x00
      0001BE                        989 00103$:
      0001BE C0 07            [24]  990 	push	ar7
      0001C0 C0 06            [24]  991 	push	ar6
      0001C2 12r00r00         [24]  992 	lcall	_getchar
      0001C5 AC 82            [24]  993 	mov	r4, dpl
      0001C7 D0 06            [24]  994 	pop	ar6
      0001C9 D0 07            [24]  995 	pop	ar7
      0001CB BC 0A 02         [24]  996 	cjne	r4,#0x0a,00133$
      0001CE 80 3A            [24]  997 	sjmp	00105$
      0001D0                        998 00133$:
      0001D0 BC 0D 02         [24]  999 	cjne	r4,#0x0d,00134$
      0001D3 80 35            [24] 1000 	sjmp	00105$
      0001D5                       1001 00134$:
      0001D5 C3               [12] 1002 	clr	c
      0001D6 EE               [12] 1003 	mov	a,r6
      0001D7 94 09            [12] 1004 	subb	a,#0x09
      0001D9 EF               [12] 1005 	mov	a,r7
      0001DA 64 80            [12] 1006 	xrl	a,#0x80
      0001DC 94 80            [12] 1007 	subb	a,#0x80
      0001DE 50 2A            [24] 1008 	jnc	00105$
                                   1009 ;	main.c:58: putchar(ch);
      0001E0 8C 03            [24] 1010 	mov	ar3,r4
      0001E2 7D 00            [12] 1011 	mov	r5,#0x00
      0001E4 8B 82            [24] 1012 	mov	dpl, r3
      0001E6 8D 83            [24] 1013 	mov	dph, r5
      0001E8 C0 07            [24] 1014 	push	ar7
      0001EA C0 06            [24] 1015 	push	ar6
      0001EC C0 04            [24] 1016 	push	ar4
      0001EE 12r00r00         [24] 1017 	lcall	_putchar
      0001F1 D0 04            [24] 1018 	pop	ar4
      0001F3 D0 06            [24] 1019 	pop	ar6
      0001F5 D0 07            [24] 1020 	pop	ar7
                                   1021 ;	main.c:59: input[i] = ch;      //Append the input array with the received character
      0001F7 EE               [12] 1022 	mov	a,r6
      0001F8 24r07            [12] 1023 	add	a, #_get_user_buffer_size_input_10000_134
      0001FA F5 82            [12] 1024 	mov	dpl,a
      0001FC EF               [12] 1025 	mov	a,r7
      0001FD 34s00            [12] 1026 	addc	a, #(_get_user_buffer_size_input_10000_134 >> 8)
      0001FF F5 83            [12] 1027 	mov	dph,a
      000201 EC               [12] 1028 	mov	a,r4
      000202 F0               [24] 1029 	movx	@dptr,a
                                   1030 ;	main.c:60: i++;
      000203 0E               [12] 1031 	inc	r6
      000204 BE 00 B7         [24] 1032 	cjne	r6,#0x00,00103$
      000207 0F               [12] 1033 	inc	r7
      000208 80 B4            [24] 1034 	sjmp	00103$
      00020A                       1035 00105$:
                                   1036 ;	main.c:62: input[i] = '\0';
      00020A EE               [12] 1037 	mov	a,r6
      00020B 24r07            [12] 1038 	add	a, #_get_user_buffer_size_input_10000_134
      00020D F5 82            [12] 1039 	mov	dpl,a
      00020F EF               [12] 1040 	mov	a,r7
      000210 34s00            [12] 1041 	addc	a, #(_get_user_buffer_size_input_10000_134 >> 8)
      000212 F5 83            [12] 1042 	mov	dph,a
      000214 E4               [12] 1043 	clr	a
      000215 F0               [24] 1044 	movx	@dptr,a
                                   1045 ;	main.c:63: output = hex_to_int(input); //Convert the char hex data to int
      000216 90r00r07         [24] 1046 	mov	dptr,#_get_user_buffer_size_input_10000_134
      000219 F5 F0            [12] 1047 	mov	b,a
      00021B 12r00r00         [24] 1048 	lcall	_hex_to_int
      00021E AE 82            [24] 1049 	mov	r6, dpl
      000220 AF 83            [24] 1050 	mov	r7, dph
                                   1051 ;	main.c:64: printf_tiny("\n\r");
      000222 C0 07            [24] 1052 	push	ar7
      000224 C0 06            [24] 1053 	push	ar6
      000226 74r00            [12] 1054 	mov	a,#___str_0
      000228 C0 E0            [24] 1055 	push	acc
      00022A 74s00            [12] 1056 	mov	a,#(___str_0 >> 8)
      00022C C0 E0            [24] 1057 	push	acc
      00022E 12r00r00         [24] 1058 	lcall	_printf_tiny
      000231 15 81            [12] 1059 	dec	sp
      000233 15 81            [12] 1060 	dec	sp
      000235 D0 06            [24] 1061 	pop	ar6
      000237 D0 07            [24] 1062 	pop	ar7
                                   1063 ;	main.c:66: return output;
      000239 8E 82            [24] 1064 	mov	dpl, r6
      00023B 8F 83            [24] 1065 	mov	dph, r7
                                   1066 ;	main.c:67: }
      00023D 22               [24] 1067 	ret
                                   1068 ;------------------------------------------------------------
                                   1069 ;Allocation info for local variables in function 'main'
                                   1070 ;------------------------------------------------------------
                                   1071 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                   1072 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                   1073 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                   1074 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                   1075 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                   1076 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                   1077 ;device_mac                Allocated with name '_main_device_mac_10000_137'
                                   1078 ;target_mac                Allocated with name '_main_target_mac_10000_137'
                                   1079 ;device_ip                 Allocated with name '_main_device_ip_10000_137'
                                   1080 ;target_ip                 Allocated with name '_main_target_ip_10000_137'
                                   1081 ;c                         Allocated with name '_main_c_20001_139'
                                   1082 ;reg_bank                  Allocated with name '_main_reg_bank_40002_142'
                                   1083 ;addr                      Allocated with name '_main_addr_40003_143'
                                   1084 ;data                      Allocated with name '_main_data_40004_144'
                                   1085 ;num_bytes                 Allocated with name '_main_num_bytes_40002_146'
                                   1086 ;start_address             Allocated with name '_main_start_address_40003_147'
                                   1087 ;buffer                    Allocated with name '_main_buffer_40003_147'
                                   1088 ;i                         Allocated with name '_main_i_50003_148'
                                   1089 ;num_bytes                 Allocated with name '_main_num_bytes_40002_151'
                                   1090 ;start_address             Allocated with name '_main_start_address_40003_152'
                                   1091 ;buffer                    Allocated with name '_main_buffer_40003_152'
                                   1092 ;reg_bank                  Allocated with name '_main_reg_bank_40002_154'
                                   1093 ;addr                      Allocated with name '_main_addr_40003_155'
                                   1094 ;data                      Allocated with name '_main_data_40003_155'
                                   1095 ;addr                      Allocated with name '_main_addr_40002_157'
                                   1096 ;data                      Allocated with name '_main_data_40003_158'
                                   1097 ;addr                      Allocated with name '_main_addr_40002_160'
                                   1098 ;data                      Allocated with name '_main_data_40002_160'
                                   1099 ;addr                      Allocated with name '_main_addr_40002_163'
                                   1100 ;bank                      Allocated with name '_main_bank_40003_164'
                                   1101 ;data                      Allocated with name '_main_data_40003_164'
                                   1102 ;nextPacket                Allocated with name '_main_nextPacket_60001_168'
                                   1103 ;byteCount                 Allocated with name '_main_byteCount_60001_168'
                                   1104 ;status                    Allocated with name '_main_status_60001_168'
                                   1105 ;gNextPacketPtr            Allocated with name '_main_gNextPacketPtr_60001_168'
                                   1106 ;len                       Allocated with name '_main_len_60001_168'
                                   1107 ;packet_data               Allocated with name '_main_packet_data_60002_171'
                                   1108 ;packet_data_actual        Allocated with name '_main_packet_data_actual_60003_172'
                                   1109 ;is_tcp_for_target         Allocated with name '_main_is_tcp_for_target_60004_173'
                                   1110 ;response_size             Allocated with name '_main_response_size_70004_177'
                                   1111 ;response                  Allocated with name '_main_response_70004_177'
                                   1112 ;read_econ2                Allocated with name '_main_read_econ2_60005_181'
                                   1113 ;i                         Allocated with name '_main_i_50001_184'
                                   1114 ;read_econ2                Allocated with name '_main_read_econ2_40002_187'
                                   1115 ;------------------------------------------------------------
                                   1116 ;	main.c:69: void main(void)
                                   1117 ;	-----------------------------------------
                                   1118 ;	 function main
                                   1119 ;	-----------------------------------------
      00023E                       1120 _main:
                                   1121 ;	main.c:71: uint8_t device_mac[6] = { 0x02, 0x11, 0x22, 0x33, 0x44, 0x55 }; // Default MAC
      00023E 90r00r11         [24] 1122 	mov	dptr,#_main_device_mac_10000_137
      000241 74 02            [12] 1123 	mov	a,#0x02
      000243 F0               [24] 1124 	movx	@dptr,a
      000244 90r00r12         [24] 1125 	mov	dptr,#(_main_device_mac_10000_137 + 0x0001)
      000247 74 11            [12] 1126 	mov	a,#0x11
      000249 F0               [24] 1127 	movx	@dptr,a
      00024A 90r00r13         [24] 1128 	mov	dptr,#(_main_device_mac_10000_137 + 0x0002)
      00024D 23               [12] 1129 	rl	a
      00024E F0               [24] 1130 	movx	@dptr,a
      00024F 90r00r14         [24] 1131 	mov	dptr,#(_main_device_mac_10000_137 + 0x0003)
      000252 74 33            [12] 1132 	mov	a,#0x33
      000254 F0               [24] 1133 	movx	@dptr,a
      000255 90r00r15         [24] 1134 	mov	dptr,#(_main_device_mac_10000_137 + 0x0004)
      000258 74 44            [12] 1135 	mov	a,#0x44
      00025A F0               [24] 1136 	movx	@dptr,a
      00025B 90r00r16         [24] 1137 	mov	dptr,#(_main_device_mac_10000_137 + 0x0005)
      00025E 74 55            [12] 1138 	mov	a,#0x55
      000260 F0               [24] 1139 	movx	@dptr,a
                                   1140 ;	main.c:72: uint8_t target_mac[6] = { 0xF8, 0x75, 0xA4, 0x8C, 0x41, 0x31 }; // Default MAC
      000261 90r00r17         [24] 1141 	mov	dptr,#_main_target_mac_10000_137
      000264 74 F8            [12] 1142 	mov	a,#0xf8
      000266 F0               [24] 1143 	movx	@dptr,a
      000267 90r00r18         [24] 1144 	mov	dptr,#(_main_target_mac_10000_137 + 0x0001)
      00026A 74 75            [12] 1145 	mov	a,#0x75
      00026C F0               [24] 1146 	movx	@dptr,a
      00026D 90r00r19         [24] 1147 	mov	dptr,#(_main_target_mac_10000_137 + 0x0002)
      000270 74 A4            [12] 1148 	mov	a,#0xa4
      000272 F0               [24] 1149 	movx	@dptr,a
      000273 90r00r1A         [24] 1150 	mov	dptr,#(_main_target_mac_10000_137 + 0x0003)
      000276 74 8C            [12] 1151 	mov	a,#0x8c
      000278 F0               [24] 1152 	movx	@dptr,a
      000279 90r00r1B         [24] 1153 	mov	dptr,#(_main_target_mac_10000_137 + 0x0004)
      00027C 74 41            [12] 1154 	mov	a,#0x41
      00027E F0               [24] 1155 	movx	@dptr,a
      00027F 90r00r1C         [24] 1156 	mov	dptr,#(_main_target_mac_10000_137 + 0x0005)
      000282 74 31            [12] 1157 	mov	a,#0x31
      000284 F0               [24] 1158 	movx	@dptr,a
                                   1159 ;	main.c:73: uint8_t device_ip[4] = { 192, 168, 1, 100 }; // Default IP Address
      000285 90r00r1D         [24] 1160 	mov	dptr,#_main_device_ip_10000_137
      000288 74 C0            [12] 1161 	mov	a,#0xc0
      00028A F0               [24] 1162 	movx	@dptr,a
      00028B 90r00r1E         [24] 1163 	mov	dptr,#(_main_device_ip_10000_137 + 0x0001)
      00028E 74 A8            [12] 1164 	mov	a,#0xa8
      000290 F0               [24] 1165 	movx	@dptr,a
      000291 90r00r1F         [24] 1166 	mov	dptr,#(_main_device_ip_10000_137 + 0x0002)
      000294 74 01            [12] 1167 	mov	a,#0x01
      000296 F0               [24] 1168 	movx	@dptr,a
      000297 90r00r20         [24] 1169 	mov	dptr,#(_main_device_ip_10000_137 + 0x0003)
      00029A 74 64            [12] 1170 	mov	a,#0x64
      00029C F0               [24] 1171 	movx	@dptr,a
                                   1172 ;	main.c:74: uint8_t target_ip[4] = { 192, 168, 1, 1 };
      00029D 90r00r21         [24] 1173 	mov	dptr,#_main_target_ip_10000_137
      0002A0 74 C0            [12] 1174 	mov	a,#0xc0
      0002A2 F0               [24] 1175 	movx	@dptr,a
      0002A3 90r00r22         [24] 1176 	mov	dptr,#(_main_target_ip_10000_137 + 0x0001)
      0002A6 74 A8            [12] 1177 	mov	a,#0xa8
      0002A8 F0               [24] 1178 	movx	@dptr,a
      0002A9 90r00r23         [24] 1179 	mov	dptr,#(_main_target_ip_10000_137 + 0x0002)
      0002AC 74 01            [12] 1180 	mov	a,#0x01
      0002AE F0               [24] 1181 	movx	@dptr,a
      0002AF 90r00r24         [24] 1182 	mov	dptr,#(_main_target_ip_10000_137 + 0x0003)
      0002B2 F0               [24] 1183 	movx	@dptr,a
                                   1184 ;	main.c:76: printf("SPI Operations on 8051\n\r");
      0002B3 74r03            [12] 1185 	mov	a,#___str_1
      0002B5 C0 E0            [24] 1186 	push	acc
      0002B7 74s00            [12] 1187 	mov	a,#(___str_1 >> 8)
      0002B9 C0 E0            [24] 1188 	push	acc
      0002BB 74 80            [12] 1189 	mov	a,#0x80
      0002BD C0 E0            [24] 1190 	push	acc
      0002BF 12r00r00         [24] 1191 	lcall	_printf
      0002C2 15 81            [12] 1192 	dec	sp
      0002C4 15 81            [12] 1193 	dec	sp
      0002C6 15 81            [12] 1194 	dec	sp
                                   1195 ;	main.c:77: configure_SPI();
      0002C8 12r00r00         [24] 1196 	lcall	_configure_SPI
                                   1197 ;	main.c:79: enc_init(device_mac);
      0002CB 90r00r11         [24] 1198 	mov	dptr,#_main_device_mac_10000_137
      0002CE 75 F0 00         [24] 1199 	mov	b, #0x00
      0002D1 12r00r00         [24] 1200 	lcall	_enc_init
                                   1201 ;	main.c:81: while(1)
      0002D4                       1202 00142$:
                                   1203 ;	main.c:83: printf("\n\rChoose an action: \n\r");
      0002D4 74r1C            [12] 1204 	mov	a,#___str_2
      0002D6 C0 E0            [24] 1205 	push	acc
      0002D8 74s00            [12] 1206 	mov	a,#(___str_2 >> 8)
      0002DA C0 E0            [24] 1207 	push	acc
      0002DC 74 80            [12] 1208 	mov	a,#0x80
      0002DE C0 E0            [24] 1209 	push	acc
      0002E0 12r00r00         [24] 1210 	lcall	_printf
      0002E3 15 81            [12] 1211 	dec	sp
      0002E5 15 81            [12] 1212 	dec	sp
      0002E7 15 81            [12] 1213 	dec	sp
                                   1214 ;	main.c:84: printf("1 --> Control Write\n\r");
      0002E9 74r33            [12] 1215 	mov	a,#___str_3
      0002EB C0 E0            [24] 1216 	push	acc
      0002ED 74s00            [12] 1217 	mov	a,#(___str_3 >> 8)
      0002EF C0 E0            [24] 1218 	push	acc
      0002F1 74 80            [12] 1219 	mov	a,#0x80
      0002F3 C0 E0            [24] 1220 	push	acc
      0002F5 12r00r00         [24] 1221 	lcall	_printf
      0002F8 15 81            [12] 1222 	dec	sp
      0002FA 15 81            [12] 1223 	dec	sp
      0002FC 15 81            [12] 1224 	dec	sp
                                   1225 ;	main.c:85: printf("2 --> Buffer Write\n\r");
      0002FE 74r49            [12] 1226 	mov	a,#___str_4
      000300 C0 E0            [24] 1227 	push	acc
      000302 74s00            [12] 1228 	mov	a,#(___str_4 >> 8)
      000304 C0 E0            [24] 1229 	push	acc
      000306 74 80            [12] 1230 	mov	a,#0x80
      000308 C0 E0            [24] 1231 	push	acc
      00030A 12r00r00         [24] 1232 	lcall	_printf
      00030D 15 81            [12] 1233 	dec	sp
      00030F 15 81            [12] 1234 	dec	sp
      000311 15 81            [12] 1235 	dec	sp
                                   1236 ;	main.c:86: printf("3 --> Buffer Read\n\r");
      000313 74r5E            [12] 1237 	mov	a,#___str_5
      000315 C0 E0            [24] 1238 	push	acc
      000317 74s00            [12] 1239 	mov	a,#(___str_5 >> 8)
      000319 C0 E0            [24] 1240 	push	acc
      00031B 74 80            [12] 1241 	mov	a,#0x80
      00031D C0 E0            [24] 1242 	push	acc
      00031F 12r00r00         [24] 1243 	lcall	_printf
      000322 15 81            [12] 1244 	dec	sp
      000324 15 81            [12] 1245 	dec	sp
      000326 15 81            [12] 1246 	dec	sp
                                   1247 ;	main.c:87: printf("4 --> MAC Register Read\n\r");
      000328 74r72            [12] 1248 	mov	a,#___str_6
      00032A C0 E0            [24] 1249 	push	acc
      00032C 74s00            [12] 1250 	mov	a,#(___str_6 >> 8)
      00032E C0 E0            [24] 1251 	push	acc
      000330 74 80            [12] 1252 	mov	a,#0x80
      000332 C0 E0            [24] 1253 	push	acc
      000334 12r00r00         [24] 1254 	lcall	_printf
      000337 15 81            [12] 1255 	dec	sp
      000339 15 81            [12] 1256 	dec	sp
      00033B 15 81            [12] 1257 	dec	sp
                                   1258 ;	main.c:88: printf("5 --> PHY SPI Write\n\r");
      00033D 74r8C            [12] 1259 	mov	a,#___str_7
      00033F C0 E0            [24] 1260 	push	acc
      000341 74s00            [12] 1261 	mov	a,#(___str_7 >> 8)
      000343 C0 E0            [24] 1262 	push	acc
      000345 74 80            [12] 1263 	mov	a,#0x80
      000347 C0 E0            [24] 1264 	push	acc
      000349 12r00r00         [24] 1265 	lcall	_printf
      00034C 15 81            [12] 1266 	dec	sp
      00034E 15 81            [12] 1267 	dec	sp
      000350 15 81            [12] 1268 	dec	sp
                                   1269 ;	main.c:89: printf("6 --> PHY SPI Read\n\r");
      000352 74rA2            [12] 1270 	mov	a,#___str_8
      000354 C0 E0            [24] 1271 	push	acc
      000356 74s00            [12] 1272 	mov	a,#(___str_8 >> 8)
      000358 C0 E0            [24] 1273 	push	acc
      00035A 74 80            [12] 1274 	mov	a,#0x80
      00035C C0 E0            [24] 1275 	push	acc
      00035E 12r00r00         [24] 1276 	lcall	_printf
      000361 15 81            [12] 1277 	dec	sp
      000363 15 81            [12] 1278 	dec	sp
      000365 15 81            [12] 1279 	dec	sp
                                   1280 ;	main.c:90: printf("7 --> ENC Reset\n\r");
      000367 74rB7            [12] 1281 	mov	a,#___str_9
      000369 C0 E0            [24] 1282 	push	acc
      00036B 74s00            [12] 1283 	mov	a,#(___str_9 >> 8)
      00036D C0 E0            [24] 1284 	push	acc
      00036F 74 80            [12] 1285 	mov	a,#0x80
      000371 C0 E0            [24] 1286 	push	acc
      000373 12r00r00         [24] 1287 	lcall	_printf
      000376 15 81            [12] 1288 	dec	sp
      000378 15 81            [12] 1289 	dec	sp
      00037A 15 81            [12] 1290 	dec	sp
                                   1291 ;	main.c:91: printf("8 --> Read ETH Register\n\r");
      00037C 74rC9            [12] 1292 	mov	a,#___str_10
      00037E C0 E0            [24] 1293 	push	acc
      000380 74s00            [12] 1294 	mov	a,#(___str_10 >> 8)
      000382 C0 E0            [24] 1295 	push	acc
      000384 74 80            [12] 1296 	mov	a,#0x80
      000386 C0 E0            [24] 1297 	push	acc
      000388 12r00r00         [24] 1298 	lcall	_printf
      00038B 15 81            [12] 1299 	dec	sp
      00038D 15 81            [12] 1300 	dec	sp
      00038F 15 81            [12] 1301 	dec	sp
                                   1302 ;	main.c:92: printf("9 --> Display Menu\n\r");
      000391 74rE3            [12] 1303 	mov	a,#___str_11
      000393 C0 E0            [24] 1304 	push	acc
      000395 74s00            [12] 1305 	mov	a,#(___str_11 >> 8)
      000397 C0 E0            [24] 1306 	push	acc
      000399 74 80            [12] 1307 	mov	a,#0x80
      00039B C0 E0            [24] 1308 	push	acc
      00039D 12r00r00         [24] 1309 	lcall	_printf
      0003A0 15 81            [12] 1310 	dec	sp
      0003A2 15 81            [12] 1311 	dec	sp
      0003A4 15 81            [12] 1312 	dec	sp
                                   1313 ;	main.c:93: printf("A --> Send ARP Request\n\r");
      0003A6 74rF8            [12] 1314 	mov	a,#___str_12
      0003A8 C0 E0            [24] 1315 	push	acc
      0003AA 74s00            [12] 1316 	mov	a,#(___str_12 >> 8)
      0003AC C0 E0            [24] 1317 	push	acc
      0003AE 74 80            [12] 1318 	mov	a,#0x80
      0003B0 C0 E0            [24] 1319 	push	acc
      0003B2 12r00r00         [24] 1320 	lcall	_printf
      0003B5 15 81            [12] 1321 	dec	sp
      0003B7 15 81            [12] 1322 	dec	sp
      0003B9 15 81            [12] 1323 	dec	sp
                                   1324 ;	main.c:94: printf("B --> Init RX buffers\n\r");
      0003BB 74r11            [12] 1325 	mov	a,#___str_13
      0003BD C0 E0            [24] 1326 	push	acc
      0003BF 74s01            [12] 1327 	mov	a,#(___str_13 >> 8)
      0003C1 C0 E0            [24] 1328 	push	acc
      0003C3 74 80            [12] 1329 	mov	a,#0x80
      0003C5 C0 E0            [24] 1330 	push	acc
      0003C7 12r00r00         [24] 1331 	lcall	_printf
      0003CA 15 81            [12] 1332 	dec	sp
      0003CC 15 81            [12] 1333 	dec	sp
      0003CE 15 81            [12] 1334 	dec	sp
                                   1335 ;	main.c:95: printf("C --> Hard Reset(nRESET pin)\n\r");
      0003D0 74r29            [12] 1336 	mov	a,#___str_14
      0003D2 C0 E0            [24] 1337 	push	acc
      0003D4 74s01            [12] 1338 	mov	a,#(___str_14 >> 8)
      0003D6 C0 E0            [24] 1339 	push	acc
      0003D8 74 80            [12] 1340 	mov	a,#0x80
      0003DA C0 E0            [24] 1341 	push	acc
      0003DC 12r00r00         [24] 1342 	lcall	_printf
      0003DF 15 81            [12] 1343 	dec	sp
      0003E1 15 81            [12] 1344 	dec	sp
      0003E3 15 81            [12] 1345 	dec	sp
                                   1346 ;	main.c:96: printf("D --> Process TCP\n\r");
      0003E5 74r48            [12] 1347 	mov	a,#___str_15
      0003E7 C0 E0            [24] 1348 	push	acc
      0003E9 74s01            [12] 1349 	mov	a,#(___str_15 >> 8)
      0003EB C0 E0            [24] 1350 	push	acc
      0003ED 74 80            [12] 1351 	mov	a,#0x80
      0003EF C0 E0            [24] 1352 	push	acc
      0003F1 12r00r00         [24] 1353 	lcall	_printf
      0003F4 15 81            [12] 1354 	dec	sp
      0003F6 15 81            [12] 1355 	dec	sp
      0003F8 15 81            [12] 1356 	dec	sp
                                   1357 ;	main.c:97: printf("E --> Enable TX interrupt\n\r");
      0003FA 74r5C            [12] 1358 	mov	a,#___str_16
      0003FC C0 E0            [24] 1359 	push	acc
      0003FE 74s01            [12] 1360 	mov	a,#(___str_16 >> 8)
      000400 C0 E0            [24] 1361 	push	acc
      000402 74 80            [12] 1362 	mov	a,#0x80
      000404 C0 E0            [24] 1363 	push	acc
      000406 12r00r00         [24] 1364 	lcall	_printf
      000409 15 81            [12] 1365 	dec	sp
      00040B 15 81            [12] 1366 	dec	sp
      00040D 15 81            [12] 1367 	dec	sp
                                   1368 ;	main.c:98: printf("F --> Disabling TX interrupt\n\r");
      00040F 74r78            [12] 1369 	mov	a,#___str_17
      000411 C0 E0            [24] 1370 	push	acc
      000413 74s01            [12] 1371 	mov	a,#(___str_17 >> 8)
      000415 C0 E0            [24] 1372 	push	acc
      000417 74 80            [12] 1373 	mov	a,#0x80
      000419 C0 E0            [24] 1374 	push	acc
      00041B 12r00r00         [24] 1375 	lcall	_printf
      00041E 15 81            [12] 1376 	dec	sp
      000420 15 81            [12] 1377 	dec	sp
      000422 15 81            [12] 1378 	dec	sp
                                   1379 ;	main.c:100: char c = getchar();
      000424 12r00r00         [24] 1380 	lcall	_getchar
      000427 AE 82            [24] 1381 	mov	r6, dpl
                                   1382 ;	main.c:101: putchar(c);
      000429 8E 05            [24] 1383 	mov	ar5,r6
      00042B 7F 00            [12] 1384 	mov	r7,#0x00
      00042D 8D 82            [24] 1385 	mov	dpl, r5
      00042F 8F 83            [24] 1386 	mov	dph, r7
      000431 C0 06            [24] 1387 	push	ar6
      000433 12r00r00         [24] 1388 	lcall	_putchar
                                   1389 ;	main.c:102: printf("\n\r");
      000436 74r00            [12] 1390 	mov	a,#___str_0
      000438 C0 E0            [24] 1391 	push	acc
      00043A 74s00            [12] 1392 	mov	a,#(___str_0 >> 8)
      00043C C0 E0            [24] 1393 	push	acc
      00043E 74 80            [12] 1394 	mov	a,#0x80
      000440 C0 E0            [24] 1395 	push	acc
      000442 12r00r00         [24] 1396 	lcall	_printf
      000445 15 81            [12] 1397 	dec	sp
      000447 15 81            [12] 1398 	dec	sp
      000449 15 81            [12] 1399 	dec	sp
      00044B D0 06            [24] 1400 	pop	ar6
                                   1401 ;	main.c:104: switch(c)
      00044D BE 31 00         [24] 1402 	cjne	r6,#0x31,00250$
      000450                       1403 00250$:
      000450 50 03            [24] 1404 	jnc	00251$
      000452 02r0Dr78         [24] 1405 	ljmp	00139$
      000455                       1406 00251$:
      000455 EE               [12] 1407 	mov	a,r6
      000456 24 B9            [12] 1408 	add	a,#0xff - 0x46
      000458 50 03            [24] 1409 	jnc	00252$
      00045A 02r0Dr78         [24] 1410 	ljmp	00139$
      00045D                       1411 00252$:
      00045D EE               [12] 1412 	mov	a,r6
      00045E 24 CF            [12] 1413 	add	a,#0xcf
      000460 FE               [12] 1414 	mov	r6,a
      000461 24 0A            [12] 1415 	add	a,#(00253$-3-.)
      000463 83               [24] 1416 	movc	a,@a+pc
      000464 F5 82            [12] 1417 	mov	dpl,a
      000466 EE               [12] 1418 	mov	a,r6
      000467 24 1A            [12] 1419 	add	a,#(00254$-3-.)
      000469 83               [24] 1420 	movc	a,@a+pc
      00046A F5 83            [12] 1421 	mov	dph,a
      00046C E4               [12] 1422 	clr	a
      00046D 73               [24] 1423 	jmp	@a+dptr
      00046E                       1424 00253$:
      00046Er9A                    1425 	.db	00101$
      00046Fr02                    1426 	.db	00102$
      000470r00                    1427 	.db	00104$
      000471r5F                    1428 	.db	00105$
      000472rC1                    1429 	.db	00106$
      000473r2C                    1430 	.db	00107$
      000474r67                    1431 	.db	00108$
      000475r82                    1432 	.db	00109$
      000476rE4                    1433 	.db	00110$
      000477r78                    1434 	.db	00139$
      000478r78                    1435 	.db	00139$
      000479r78                    1436 	.db	00139$
      00047Ar78                    1437 	.db	00139$
      00047Br78                    1438 	.db	00139$
      00047Cr78                    1439 	.db	00139$
      00047Dr78                    1440 	.db	00139$
      00047ErA4                    1441 	.db	00111$
      00047FrD4                    1442 	.db	00142$
      000480rDC                    1443 	.db	00134$
      000481r0E                    1444 	.db	00136$
      000482r17                    1445 	.db	00137$
      000483r52                    1446 	.db	00138$
      000484                       1447 00254$:
      000484s04                    1448 	.db	00101$>>8
      000485s05                    1449 	.db	00102$>>8
      000486s06                    1450 	.db	00104$>>8
      000487s06                    1451 	.db	00105$>>8
      000488s06                    1452 	.db	00106$>>8
      000489s07                    1453 	.db	00107$>>8
      00048As07                    1454 	.db	00108$>>8
      00048Bs07                    1455 	.db	00109$>>8
      00048Cs07                    1456 	.db	00110$>>8
      00048Ds0D                    1457 	.db	00139$>>8
      00048Es0D                    1458 	.db	00139$>>8
      00048Fs0D                    1459 	.db	00139$>>8
      000490s0D                    1460 	.db	00139$>>8
      000491s0D                    1461 	.db	00139$>>8
      000492s0D                    1462 	.db	00139$>>8
      000493s0D                    1463 	.db	00139$>>8
      000494s08                    1464 	.db	00111$>>8
      000495s02                    1465 	.db	00142$>>8
      000496s0C                    1466 	.db	00134$>>8
      000497s0D                    1467 	.db	00136$>>8
      000498s0D                    1468 	.db	00137$>>8
      000499s0D                    1469 	.db	00138$>>8
                                   1470 ;	main.c:106: case '1': {
      00049A                       1471 00101$:
                                   1472 ;	main.c:107: printf("Enter the register bank to select:\n\r");
      00049A 74r97            [12] 1473 	mov	a,#___str_18
      00049C C0 E0            [24] 1474 	push	acc
      00049E 74s01            [12] 1475 	mov	a,#(___str_18 >> 8)
      0004A0 C0 E0            [24] 1476 	push	acc
      0004A2 74 80            [12] 1477 	mov	a,#0x80
      0004A4 C0 E0            [24] 1478 	push	acc
      0004A6 12r00r00         [24] 1479 	lcall	_printf
      0004A9 15 81            [12] 1480 	dec	sp
      0004AB 15 81            [12] 1481 	dec	sp
      0004AD 15 81            [12] 1482 	dec	sp
                                   1483 ;	main.c:108: uint8_t reg_bank = get_user_buffer_size();
      0004AF 12r01rBA         [24] 1484 	lcall	_get_user_buffer_size
      0004B2 AE 82            [24] 1485 	mov	r6, dpl
                                   1486 ;	main.c:109: printf("Enter the address of the Control Register:\n\r");
      0004B4 C0 06            [24] 1487 	push	ar6
      0004B6 74rBC            [12] 1488 	mov	a,#___str_19
      0004B8 C0 E0            [24] 1489 	push	acc
      0004BA 74s01            [12] 1490 	mov	a,#(___str_19 >> 8)
      0004BC C0 E0            [24] 1491 	push	acc
      0004BE 74 80            [12] 1492 	mov	a,#0x80
      0004C0 C0 E0            [24] 1493 	push	acc
      0004C2 12r00r00         [24] 1494 	lcall	_printf
      0004C5 15 81            [12] 1495 	dec	sp
      0004C7 15 81            [12] 1496 	dec	sp
      0004C9 15 81            [12] 1497 	dec	sp
                                   1498 ;	main.c:110: uint8_t addr = get_user_buffer_size();
      0004CB 12r01rBA         [24] 1499 	lcall	_get_user_buffer_size
      0004CE AD 82            [24] 1500 	mov	r5, dpl
                                   1501 ;	main.c:111: printf("Enter the data you want to write:\n\r");
      0004D0 C0 05            [24] 1502 	push	ar5
      0004D2 74rE9            [12] 1503 	mov	a,#___str_20
      0004D4 C0 E0            [24] 1504 	push	acc
      0004D6 74s01            [12] 1505 	mov	a,#(___str_20 >> 8)
      0004D8 C0 E0            [24] 1506 	push	acc
      0004DA 74 80            [12] 1507 	mov	a,#0x80
      0004DC C0 E0            [24] 1508 	push	acc
      0004DE 12r00r00         [24] 1509 	lcall	_printf
      0004E1 15 81            [12] 1510 	dec	sp
      0004E3 15 81            [12] 1511 	dec	sp
      0004E5 15 81            [12] 1512 	dec	sp
                                   1513 ;	main.c:112: uint8_t data = get_user_buffer_size();
      0004E7 12r01rBA         [24] 1514 	lcall	_get_user_buffer_size
      0004EA AC 82            [24] 1515 	mov	r4, dpl
      0004EC D0 05            [24] 1516 	pop	ar5
      0004EE D0 06            [24] 1517 	pop	ar6
                                   1518 ;	main.c:113: spi_control_write(reg_bank, addr, data);
      0004F0 90r00r00         [24] 1519 	mov	dptr,#_spi_control_write_PARM_2
      0004F3 ED               [12] 1520 	mov	a,r5
      0004F4 F0               [24] 1521 	movx	@dptr,a
      0004F5 90r00r00         [24] 1522 	mov	dptr,#_spi_control_write_PARM_3
      0004F8 EC               [12] 1523 	mov	a,r4
      0004F9 F0               [24] 1524 	movx	@dptr,a
      0004FA 8E 82            [24] 1525 	mov	dpl, r6
      0004FC 12r00r00         [24] 1526 	lcall	_spi_control_write
                                   1527 ;	main.c:114: break;
      0004FF 02r02rD4         [24] 1528 	ljmp	00142$
                                   1529 ;	main.c:116: case '2': {
      000502                       1530 00102$:
                                   1531 ;	main.c:117: printf("Enter the number of bytes to write:\n\r");
      000502 74r0D            [12] 1532 	mov	a,#___str_21
      000504 C0 E0            [24] 1533 	push	acc
      000506 74s02            [12] 1534 	mov	a,#(___str_21 >> 8)
      000508 C0 E0            [24] 1535 	push	acc
      00050A 74 80            [12] 1536 	mov	a,#0x80
      00050C C0 E0            [24] 1537 	push	acc
      00050E 12r00r00         [24] 1538 	lcall	_printf
      000511 15 81            [12] 1539 	dec	sp
      000513 15 81            [12] 1540 	dec	sp
      000515 15 81            [12] 1541 	dec	sp
                                   1542 ;	main.c:118: int num_bytes = get_user_buffer_size();
      000517 12r01rBA         [24] 1543 	lcall	_get_user_buffer_size
      00051A AE 82            [24] 1544 	mov	r6, dpl
      00051C AF 83            [24] 1545 	mov	r7, dph
                                   1546 ;	main.c:119: printf("Enter the starting address:\n\r");
      00051E C0 07            [24] 1547 	push	ar7
      000520 C0 06            [24] 1548 	push	ar6
      000522 74r33            [12] 1549 	mov	a,#___str_22
      000524 C0 E0            [24] 1550 	push	acc
      000526 74s02            [12] 1551 	mov	a,#(___str_22 >> 8)
      000528 C0 E0            [24] 1552 	push	acc
      00052A 74 80            [12] 1553 	mov	a,#0x80
      00052C C0 E0            [24] 1554 	push	acc
      00052E 12r00r00         [24] 1555 	lcall	_printf
      000531 15 81            [12] 1556 	dec	sp
      000533 15 81            [12] 1557 	dec	sp
      000535 15 81            [12] 1558 	dec	sp
                                   1559 ;	main.c:120: uint16_t start_address = get_user_buffer_size();
      000537 12r01rBA         [24] 1560 	lcall	_get_user_buffer_size
      00053A AC 82            [24] 1561 	mov	r4, dpl
      00053C AD 83            [24] 1562 	mov	r5, dph
      00053E D0 06            [24] 1563 	pop	ar6
      000540 D0 07            [24] 1564 	pop	ar7
                                   1565 ;	main.c:122: printf("Enter %d bytes of data (in hex):\n\r", num_bytes);
      000542 C0 07            [24] 1566 	push	ar7
      000544 C0 06            [24] 1567 	push	ar6
      000546 C0 05            [24] 1568 	push	ar5
      000548 C0 04            [24] 1569 	push	ar4
      00054A C0 06            [24] 1570 	push	ar6
      00054C C0 07            [24] 1571 	push	ar7
      00054E 74r51            [12] 1572 	mov	a,#___str_23
      000550 C0 E0            [24] 1573 	push	acc
      000552 74s02            [12] 1574 	mov	a,#(___str_23 >> 8)
      000554 C0 E0            [24] 1575 	push	acc
      000556 74 80            [12] 1576 	mov	a,#0x80
      000558 C0 E0            [24] 1577 	push	acc
      00055A 12r00r00         [24] 1578 	lcall	_printf
      00055D E5 81            [12] 1579 	mov	a,sp
      00055F 24 FB            [12] 1580 	add	a,#0xfb
      000561 F5 81            [12] 1581 	mov	sp,a
      000563 D0 04            [24] 1582 	pop	ar4
      000565 D0 05            [24] 1583 	pop	ar5
      000567 D0 06            [24] 1584 	pop	ar6
      000569 D0 07            [24] 1585 	pop	ar7
                                   1586 ;	main.c:123: for (int i = 0; i < num_bytes; i++) {
      00056B 7A 00            [12] 1587 	mov	r2,#0x00
      00056D 7B 00            [12] 1588 	mov	r3,#0x00
      00056F                       1589 00145$:
      00056F C3               [12] 1590 	clr	c
      000570 EA               [12] 1591 	mov	a,r2
      000571 9E               [12] 1592 	subb	a,r6
      000572 EB               [12] 1593 	mov	a,r3
      000573 64 80            [12] 1594 	xrl	a,#0x80
      000575 8F F0            [24] 1595 	mov	b,r7
      000577 63 F0 80         [24] 1596 	xrl	b,#0x80
      00057A 95 F0            [12] 1597 	subb	a,b
      00057C 50 63            [24] 1598 	jnc	00103$
                                   1599 ;	main.c:124: printf("Byte %d: ", i);
      00057E C0 04            [24] 1600 	push	ar4
      000580 C0 05            [24] 1601 	push	ar5
      000582 C0 07            [24] 1602 	push	ar7
      000584 C0 06            [24] 1603 	push	ar6
      000586 C0 05            [24] 1604 	push	ar5
      000588 C0 04            [24] 1605 	push	ar4
      00058A C0 03            [24] 1606 	push	ar3
      00058C C0 02            [24] 1607 	push	ar2
      00058E C0 02            [24] 1608 	push	ar2
      000590 C0 03            [24] 1609 	push	ar3
      000592 74r74            [12] 1610 	mov	a,#___str_24
      000594 C0 E0            [24] 1611 	push	acc
      000596 74s02            [12] 1612 	mov	a,#(___str_24 >> 8)
      000598 C0 E0            [24] 1613 	push	acc
      00059A 74 80            [12] 1614 	mov	a,#0x80
      00059C C0 E0            [24] 1615 	push	acc
      00059E 12r00r00         [24] 1616 	lcall	_printf
      0005A1 E5 81            [12] 1617 	mov	a,sp
      0005A3 24 FB            [12] 1618 	add	a,#0xfb
      0005A5 F5 81            [12] 1619 	mov	sp,a
      0005A7 D0 02            [24] 1620 	pop	ar2
      0005A9 D0 03            [24] 1621 	pop	ar3
      0005AB D0 04            [24] 1622 	pop	ar4
      0005AD D0 05            [24] 1623 	pop	ar5
                                   1624 ;	main.c:125: buffer[i] = get_user_buffer_size();
      0005AF EA               [12] 1625 	mov	a,r2
      0005B0 24r25            [12] 1626 	add	a, #_main_buffer_40003_147
      0005B2 F8               [12] 1627 	mov	r0,a
      0005B3 EB               [12] 1628 	mov	a,r3
      0005B4 34s00            [12] 1629 	addc	a, #(_main_buffer_40003_147 >> 8)
      0005B6 F9               [12] 1630 	mov	r1,a
      0005B7 C0 03            [24] 1631 	push	ar3
      0005B9 C0 02            [24] 1632 	push	ar2
      0005BB C0 01            [24] 1633 	push	ar1
      0005BD C0 00            [24] 1634 	push	ar0
      0005BF 12r01rBA         [24] 1635 	lcall	_get_user_buffer_size
      0005C2 AC 82            [24] 1636 	mov	r4, dpl
      0005C4 D0 00            [24] 1637 	pop	ar0
      0005C6 D0 01            [24] 1638 	pop	ar1
      0005C8 D0 02            [24] 1639 	pop	ar2
      0005CA D0 03            [24] 1640 	pop	ar3
      0005CC D0 06            [24] 1641 	pop	ar6
      0005CE D0 07            [24] 1642 	pop	ar7
      0005D0 88 82            [24] 1643 	mov	dpl,r0
      0005D2 89 83            [24] 1644 	mov	dph,r1
      0005D4 EC               [12] 1645 	mov	a,r4
      0005D5 F0               [24] 1646 	movx	@dptr,a
                                   1647 ;	main.c:123: for (int i = 0; i < num_bytes; i++) {
      0005D6 0A               [12] 1648 	inc	r2
      0005D7 BA 00 01         [24] 1649 	cjne	r2,#0x00,00256$
      0005DA 0B               [12] 1650 	inc	r3
      0005DB                       1651 00256$:
      0005DB D0 05            [24] 1652 	pop	ar5
      0005DD D0 04            [24] 1653 	pop	ar4
      0005DF 80 8E            [24] 1654 	sjmp	00145$
      0005E1                       1655 00103$:
                                   1656 ;	main.c:127: spi_buffer_write(num_bytes, start_address, buffer);
      0005E1 90r00r00         [24] 1657 	mov	dptr,#_spi_buffer_write_PARM_2
      0005E4 EC               [12] 1658 	mov	a,r4
      0005E5 F0               [24] 1659 	movx	@dptr,a
      0005E6 ED               [12] 1660 	mov	a,r5
      0005E7 A3               [24] 1661 	inc	dptr
      0005E8 F0               [24] 1662 	movx	@dptr,a
      0005E9 90r00r00         [24] 1663 	mov	dptr,#_spi_buffer_write_PARM_3
      0005EC 74r25            [12] 1664 	mov	a,#_main_buffer_40003_147
      0005EE F0               [24] 1665 	movx	@dptr,a
      0005EF 74s00            [12] 1666 	mov	a,#(_main_buffer_40003_147 >> 8)
      0005F1 A3               [24] 1667 	inc	dptr
      0005F2 F0               [24] 1668 	movx	@dptr,a
      0005F3 E4               [12] 1669 	clr	a
      0005F4 A3               [24] 1670 	inc	dptr
      0005F5 F0               [24] 1671 	movx	@dptr,a
      0005F6 8E 82            [24] 1672 	mov	dpl, r6
      0005F8 8F 83            [24] 1673 	mov	dph, r7
      0005FA 12r00r00         [24] 1674 	lcall	_spi_buffer_write
                                   1675 ;	main.c:128: break;
      0005FD 02r02rD4         [24] 1676 	ljmp	00142$
                                   1677 ;	main.c:130: case '3': {
      000600                       1678 00104$:
                                   1679 ;	main.c:131: printf("Enter the number of bytes to read:\n\r");
      000600 74r7E            [12] 1680 	mov	a,#___str_25
      000602 C0 E0            [24] 1681 	push	acc
      000604 74s02            [12] 1682 	mov	a,#(___str_25 >> 8)
      000606 C0 E0            [24] 1683 	push	acc
      000608 74 80            [12] 1684 	mov	a,#0x80
      00060A C0 E0            [24] 1685 	push	acc
      00060C 12r00r00         [24] 1686 	lcall	_printf
      00060F 15 81            [12] 1687 	dec	sp
      000611 15 81            [12] 1688 	dec	sp
      000613 15 81            [12] 1689 	dec	sp
                                   1690 ;	main.c:132: int num_bytes = get_user_buffer_size();
      000615 12r01rBA         [24] 1691 	lcall	_get_user_buffer_size
      000618 AE 82            [24] 1692 	mov	r6, dpl
      00061A AF 83            [24] 1693 	mov	r7, dph
                                   1694 ;	main.c:133: printf("Enter the starting address:\n\r");
      00061C C0 07            [24] 1695 	push	ar7
      00061E C0 06            [24] 1696 	push	ar6
      000620 74r33            [12] 1697 	mov	a,#___str_22
      000622 C0 E0            [24] 1698 	push	acc
      000624 74s02            [12] 1699 	mov	a,#(___str_22 >> 8)
      000626 C0 E0            [24] 1700 	push	acc
      000628 74 80            [12] 1701 	mov	a,#0x80
      00062A C0 E0            [24] 1702 	push	acc
      00062C 12r00r00         [24] 1703 	lcall	_printf
      00062F 15 81            [12] 1704 	dec	sp
      000631 15 81            [12] 1705 	dec	sp
      000633 15 81            [12] 1706 	dec	sp
                                   1707 ;	main.c:134: uint16_t start_address = get_user_buffer_size();
      000635 12r01rBA         [24] 1708 	lcall	_get_user_buffer_size
      000638 AC 82            [24] 1709 	mov	r4, dpl
      00063A AD 83            [24] 1710 	mov	r5, dph
      00063C D0 06            [24] 1711 	pop	ar6
      00063E D0 07            [24] 1712 	pop	ar7
      000640 90r00r00         [24] 1713 	mov	dptr,#_spi_buffer_read_PARM_2
      000643 EC               [12] 1714 	mov	a,r4
      000644 F0               [24] 1715 	movx	@dptr,a
      000645 ED               [12] 1716 	mov	a,r5
      000646 A3               [24] 1717 	inc	dptr
      000647 F0               [24] 1718 	movx	@dptr,a
                                   1719 ;	main.c:136: spi_buffer_read(num_bytes, start_address, buffer);
      000648 90r00r00         [24] 1720 	mov	dptr,#_spi_buffer_read_PARM_3
      00064B 74r25            [12] 1721 	mov	a,#_main_buffer_40003_152
      00064D F0               [24] 1722 	movx	@dptr,a
      00064E 74s01            [12] 1723 	mov	a,#(_main_buffer_40003_152 >> 8)
      000650 A3               [24] 1724 	inc	dptr
      000651 F0               [24] 1725 	movx	@dptr,a
      000652 E4               [12] 1726 	clr	a
      000653 A3               [24] 1727 	inc	dptr
      000654 F0               [24] 1728 	movx	@dptr,a
      000655 8E 82            [24] 1729 	mov	dpl, r6
      000657 8F 83            [24] 1730 	mov	dph, r7
      000659 12r00r00         [24] 1731 	lcall	_spi_buffer_read
                                   1732 ;	main.c:137: break;
      00065C 02r02rD4         [24] 1733 	ljmp	00142$
                                   1734 ;	main.c:139: case '4': {
      00065F                       1735 00105$:
                                   1736 ;	main.c:140: printf("Enter the MAC register bank to select:\n\r");
      00065F 74rA3            [12] 1737 	mov	a,#___str_26
      000661 C0 E0            [24] 1738 	push	acc
      000663 74s02            [12] 1739 	mov	a,#(___str_26 >> 8)
      000665 C0 E0            [24] 1740 	push	acc
      000667 74 80            [12] 1741 	mov	a,#0x80
      000669 C0 E0            [24] 1742 	push	acc
      00066B 12r00r00         [24] 1743 	lcall	_printf
      00066E 15 81            [12] 1744 	dec	sp
      000670 15 81            [12] 1745 	dec	sp
      000672 15 81            [12] 1746 	dec	sp
                                   1747 ;	main.c:141: uint8_t reg_bank = get_user_buffer_size();
      000674 12r01rBA         [24] 1748 	lcall	_get_user_buffer_size
      000677 AE 82            [24] 1749 	mov	r6, dpl
                                   1750 ;	main.c:142: printf("Enter the address of the MAC Register:\n\r");
      000679 C0 06            [24] 1751 	push	ar6
      00067B 74rCC            [12] 1752 	mov	a,#___str_27
      00067D C0 E0            [24] 1753 	push	acc
      00067F 74s02            [12] 1754 	mov	a,#(___str_27 >> 8)
      000681 C0 E0            [24] 1755 	push	acc
      000683 74 80            [12] 1756 	mov	a,#0x80
      000685 C0 E0            [24] 1757 	push	acc
      000687 12r00r00         [24] 1758 	lcall	_printf
      00068A 15 81            [12] 1759 	dec	sp
      00068C 15 81            [12] 1760 	dec	sp
      00068E 15 81            [12] 1761 	dec	sp
                                   1762 ;	main.c:143: uint8_t addr = get_user_buffer_size();
      000690 12r01rBA         [24] 1763 	lcall	_get_user_buffer_size
      000693 AD 82            [24] 1764 	mov	r5, dpl
      000695 D0 06            [24] 1765 	pop	ar6
                                   1766 ;	main.c:144: uint8_t data = mac_spi_read(addr, reg_bank);
      000697 90r00r00         [24] 1767 	mov	dptr,#_mac_spi_read_PARM_2
      00069A EE               [12] 1768 	mov	a,r6
      00069B F0               [24] 1769 	movx	@dptr,a
      00069C 8D 82            [24] 1770 	mov	dpl, r5
      00069E 12r00r00         [24] 1771 	lcall	_mac_spi_read
      0006A1 AF 82            [24] 1772 	mov	r7, dpl
                                   1773 ;	main.c:145: printf("MAC Register Data: 0x%02X\n\r", data);
      0006A3 7E 00            [12] 1774 	mov	r6,#0x00
      0006A5 C0 07            [24] 1775 	push	ar7
      0006A7 C0 06            [24] 1776 	push	ar6
      0006A9 74rF5            [12] 1777 	mov	a,#___str_28
      0006AB C0 E0            [24] 1778 	push	acc
      0006AD 74s02            [12] 1779 	mov	a,#(___str_28 >> 8)
      0006AF C0 E0            [24] 1780 	push	acc
      0006B1 74 80            [12] 1781 	mov	a,#0x80
      0006B3 C0 E0            [24] 1782 	push	acc
      0006B5 12r00r00         [24] 1783 	lcall	_printf
      0006B8 E5 81            [12] 1784 	mov	a,sp
      0006BA 24 FB            [12] 1785 	add	a,#0xfb
      0006BC F5 81            [12] 1786 	mov	sp,a
                                   1787 ;	main.c:146: break;
      0006BE 02r02rD4         [24] 1788 	ljmp	00142$
                                   1789 ;	main.c:148: case '5': {
      0006C1                       1790 00106$:
                                   1791 ;	main.c:149: printf("Enter the PHY register address:\n\r");
      0006C1 74r11            [12] 1792 	mov	a,#___str_29
      0006C3 C0 E0            [24] 1793 	push	acc
      0006C5 74s03            [12] 1794 	mov	a,#(___str_29 >> 8)
      0006C7 C0 E0            [24] 1795 	push	acc
      0006C9 74 80            [12] 1796 	mov	a,#0x80
      0006CB C0 E0            [24] 1797 	push	acc
      0006CD 12r00r00         [24] 1798 	lcall	_printf
      0006D0 15 81            [12] 1799 	dec	sp
      0006D2 15 81            [12] 1800 	dec	sp
      0006D4 15 81            [12] 1801 	dec	sp
                                   1802 ;	main.c:150: uint8_t addr = get_user_buffer_size();
      0006D6 12r01rBA         [24] 1803 	lcall	_get_user_buffer_size
      0006D9 AE 82            [24] 1804 	mov	r6, dpl
                                   1805 ;	main.c:151: printf("Enter the 16-bit data to write:\n\r");
      0006DB C0 06            [24] 1806 	push	ar6
      0006DD 74r33            [12] 1807 	mov	a,#___str_30
      0006DF C0 E0            [24] 1808 	push	acc
      0006E1 74s03            [12] 1809 	mov	a,#(___str_30 >> 8)
      0006E3 C0 E0            [24] 1810 	push	acc
      0006E5 74 80            [12] 1811 	mov	a,#0x80
      0006E7 C0 E0            [24] 1812 	push	acc
      0006E9 12r00r00         [24] 1813 	lcall	_printf
      0006EC 15 81            [12] 1814 	dec	sp
      0006EE 15 81            [12] 1815 	dec	sp
      0006F0 15 81            [12] 1816 	dec	sp
                                   1817 ;	main.c:152: uint16_t data = get_user_buffer_size();
      0006F2 12r01rBA         [24] 1818 	lcall	_get_user_buffer_size
      0006F5 AD 82            [24] 1819 	mov	r5, dpl
      0006F7 AF 83            [24] 1820 	mov	r7, dph
      0006F9 D0 06            [24] 1821 	pop	ar6
                                   1822 ;	main.c:153: phy_spi_write(addr, data);
      0006FB 90r00r00         [24] 1823 	mov	dptr,#_phy_spi_write_PARM_2
      0006FE ED               [12] 1824 	mov	a,r5
      0006FF F0               [24] 1825 	movx	@dptr,a
      000700 EF               [12] 1826 	mov	a,r7
      000701 A3               [24] 1827 	inc	dptr
      000702 F0               [24] 1828 	movx	@dptr,a
      000703 8E 82            [24] 1829 	mov	dpl, r6
      000705 C0 07            [24] 1830 	push	ar7
      000707 C0 05            [24] 1831 	push	ar5
      000709 12r00r00         [24] 1832 	lcall	_phy_spi_write
      00070C D0 05            [24] 1833 	pop	ar5
      00070E D0 07            [24] 1834 	pop	ar7
                                   1835 ;	main.c:154: printf("PHY Write Data: 0x%04X\n\r", data);
      000710 C0 05            [24] 1836 	push	ar5
      000712 C0 07            [24] 1837 	push	ar7
      000714 74r55            [12] 1838 	mov	a,#___str_31
      000716 C0 E0            [24] 1839 	push	acc
      000718 74s03            [12] 1840 	mov	a,#(___str_31 >> 8)
      00071A C0 E0            [24] 1841 	push	acc
      00071C 74 80            [12] 1842 	mov	a,#0x80
      00071E C0 E0            [24] 1843 	push	acc
      000720 12r00r00         [24] 1844 	lcall	_printf
      000723 E5 81            [12] 1845 	mov	a,sp
      000725 24 FB            [12] 1846 	add	a,#0xfb
      000727 F5 81            [12] 1847 	mov	sp,a
                                   1848 ;	main.c:155: break;
      000729 02r02rD4         [24] 1849 	ljmp	00142$
                                   1850 ;	main.c:157: case '6': {
      00072C                       1851 00107$:
                                   1852 ;	main.c:158: printf("Enter the PHY register address to read:\n\r");
      00072C 74r6E            [12] 1853 	mov	a,#___str_32
      00072E C0 E0            [24] 1854 	push	acc
      000730 74s03            [12] 1855 	mov	a,#(___str_32 >> 8)
      000732 C0 E0            [24] 1856 	push	acc
      000734 74 80            [12] 1857 	mov	a,#0x80
      000736 C0 E0            [24] 1858 	push	acc
      000738 12r00r00         [24] 1859 	lcall	_printf
      00073B 15 81            [12] 1860 	dec	sp
      00073D 15 81            [12] 1861 	dec	sp
      00073F 15 81            [12] 1862 	dec	sp
                                   1863 ;	main.c:159: uint8_t addr = get_user_buffer_size();
      000741 12r01rBA         [24] 1864 	lcall	_get_user_buffer_size
                                   1865 ;	main.c:160: uint16_t data = phy_spi_read(addr);
      000744 12r00r00         [24] 1866 	lcall	_phy_spi_read
      000747 AE 82            [24] 1867 	mov	r6, dpl
      000749 AF 83            [24] 1868 	mov	r7, dph
                                   1869 ;	main.c:161: printf("PHY Read Data: 0x%04X\n\r", data);
      00074B C0 06            [24] 1870 	push	ar6
      00074D C0 07            [24] 1871 	push	ar7
      00074F 74r98            [12] 1872 	mov	a,#___str_33
      000751 C0 E0            [24] 1873 	push	acc
      000753 74s03            [12] 1874 	mov	a,#(___str_33 >> 8)
      000755 C0 E0            [24] 1875 	push	acc
      000757 74 80            [12] 1876 	mov	a,#0x80
      000759 C0 E0            [24] 1877 	push	acc
      00075B 12r00r00         [24] 1878 	lcall	_printf
      00075E E5 81            [12] 1879 	mov	a,sp
      000760 24 FB            [12] 1880 	add	a,#0xfb
      000762 F5 81            [12] 1881 	mov	sp,a
                                   1882 ;	main.c:162: break;
      000764 02r02rD4         [24] 1883 	ljmp	00142$
                                   1884 ;	main.c:164: case '7': {
      000767                       1885 00108$:
                                   1886 ;	main.c:165: printf("Resetting ENC28J60...\n\r");
      000767 74rB0            [12] 1887 	mov	a,#___str_34
      000769 C0 E0            [24] 1888 	push	acc
      00076B 74s03            [12] 1889 	mov	a,#(___str_34 >> 8)
      00076D C0 E0            [24] 1890 	push	acc
      00076F 74 80            [12] 1891 	mov	a,#0x80
      000771 C0 E0            [24] 1892 	push	acc
      000773 12r00r00         [24] 1893 	lcall	_printf
      000776 15 81            [12] 1894 	dec	sp
      000778 15 81            [12] 1895 	dec	sp
      00077A 15 81            [12] 1896 	dec	sp
                                   1897 ;	main.c:166: enc_reset();
      00077C 12r00r00         [24] 1898 	lcall	_enc_reset
                                   1899 ;	main.c:167: break;
      00077F 02r02rD4         [24] 1900 	ljmp	00142$
                                   1901 ;	main.c:169: case '8': {
      000782                       1902 00109$:
                                   1903 ;	main.c:170: printf("Enter the ETH register address to read:\n\r");
      000782 74rC8            [12] 1904 	mov	a,#___str_35
      000784 C0 E0            [24] 1905 	push	acc
      000786 74s03            [12] 1906 	mov	a,#(___str_35 >> 8)
      000788 C0 E0            [24] 1907 	push	acc
      00078A 74 80            [12] 1908 	mov	a,#0x80
      00078C C0 E0            [24] 1909 	push	acc
      00078E 12r00r00         [24] 1910 	lcall	_printf
      000791 15 81            [12] 1911 	dec	sp
      000793 15 81            [12] 1912 	dec	sp
      000795 15 81            [12] 1913 	dec	sp
                                   1914 ;	main.c:171: uint8_t addr = get_user_buffer_size();
      000797 12r01rBA         [24] 1915 	lcall	_get_user_buffer_size
      00079A AE 82            [24] 1916 	mov	r6, dpl
                                   1917 ;	main.c:172: printf("Enter the bank (0 or 1):\n\r");
      00079C C0 06            [24] 1918 	push	ar6
      00079E 74rF2            [12] 1919 	mov	a,#___str_36
      0007A0 C0 E0            [24] 1920 	push	acc
      0007A2 74s03            [12] 1921 	mov	a,#(___str_36 >> 8)
      0007A4 C0 E0            [24] 1922 	push	acc
      0007A6 74 80            [12] 1923 	mov	a,#0x80
      0007A8 C0 E0            [24] 1924 	push	acc
      0007AA 12r00r00         [24] 1925 	lcall	_printf
      0007AD 15 81            [12] 1926 	dec	sp
      0007AF 15 81            [12] 1927 	dec	sp
      0007B1 15 81            [12] 1928 	dec	sp
                                   1929 ;	main.c:173: uint8_t bank = get_user_buffer_size();
      0007B3 12r01rBA         [24] 1930 	lcall	_get_user_buffer_size
      0007B6 AD 82            [24] 1931 	mov	r5, dpl
      0007B8 D0 06            [24] 1932 	pop	ar6
      0007BA 90r00r00         [24] 1933 	mov	dptr,#_eth_spi_read_PARM_2
      0007BD ED               [12] 1934 	mov	a,r5
      0007BE F0               [24] 1935 	movx	@dptr,a
                                   1936 ;	main.c:174: uint8_t data = eth_spi_read(addr, bank);
      0007BF 8E 82            [24] 1937 	mov	dpl, r6
      0007C1 12r00r00         [24] 1938 	lcall	_eth_spi_read
      0007C4 AF 82            [24] 1939 	mov	r7, dpl
                                   1940 ;	main.c:175: printf("ETH Register Data: 0x%02X\n\r", data);
      0007C6 7E 00            [12] 1941 	mov	r6,#0x00
      0007C8 C0 07            [24] 1942 	push	ar7
      0007CA C0 06            [24] 1943 	push	ar6
      0007CC 74r0D            [12] 1944 	mov	a,#___str_37
      0007CE C0 E0            [24] 1945 	push	acc
      0007D0 74s04            [12] 1946 	mov	a,#(___str_37 >> 8)
      0007D2 C0 E0            [24] 1947 	push	acc
      0007D4 74 80            [12] 1948 	mov	a,#0x80
      0007D6 C0 E0            [24] 1949 	push	acc
      0007D8 12r00r00         [24] 1950 	lcall	_printf
      0007DB E5 81            [12] 1951 	mov	a,sp
      0007DD 24 FB            [12] 1952 	add	a,#0xfb
      0007DF F5 81            [12] 1953 	mov	sp,a
                                   1954 ;	main.c:176: break;
      0007E1 02r02rD4         [24] 1955 	ljmp	00142$
                                   1956 ;	main.c:178: case '9': {
      0007E4                       1957 00110$:
                                   1958 ;	main.c:179: printf("\n\rChoose an action: \n\r");
      0007E4 74r1C            [12] 1959 	mov	a,#___str_2
      0007E6 C0 E0            [24] 1960 	push	acc
      0007E8 74s00            [12] 1961 	mov	a,#(___str_2 >> 8)
      0007EA C0 E0            [24] 1962 	push	acc
      0007EC 74 80            [12] 1963 	mov	a,#0x80
      0007EE C0 E0            [24] 1964 	push	acc
      0007F0 12r00r00         [24] 1965 	lcall	_printf
      0007F3 15 81            [12] 1966 	dec	sp
      0007F5 15 81            [12] 1967 	dec	sp
      0007F7 15 81            [12] 1968 	dec	sp
                                   1969 ;	main.c:180: printf("1 --> Control Write\n\r");
      0007F9 74r33            [12] 1970 	mov	a,#___str_3
      0007FB C0 E0            [24] 1971 	push	acc
      0007FD 74s00            [12] 1972 	mov	a,#(___str_3 >> 8)
      0007FF C0 E0            [24] 1973 	push	acc
      000801 74 80            [12] 1974 	mov	a,#0x80
      000803 C0 E0            [24] 1975 	push	acc
      000805 12r00r00         [24] 1976 	lcall	_printf
      000808 15 81            [12] 1977 	dec	sp
      00080A 15 81            [12] 1978 	dec	sp
      00080C 15 81            [12] 1979 	dec	sp
                                   1980 ;	main.c:181: printf("2 --> Buffer Write\n\r");
      00080E 74r49            [12] 1981 	mov	a,#___str_4
      000810 C0 E0            [24] 1982 	push	acc
      000812 74s00            [12] 1983 	mov	a,#(___str_4 >> 8)
      000814 C0 E0            [24] 1984 	push	acc
      000816 74 80            [12] 1985 	mov	a,#0x80
      000818 C0 E0            [24] 1986 	push	acc
      00081A 12r00r00         [24] 1987 	lcall	_printf
      00081D 15 81            [12] 1988 	dec	sp
      00081F 15 81            [12] 1989 	dec	sp
      000821 15 81            [12] 1990 	dec	sp
                                   1991 ;	main.c:182: printf("3 --> Buffer Read\n\r");
      000823 74r5E            [12] 1992 	mov	a,#___str_5
      000825 C0 E0            [24] 1993 	push	acc
      000827 74s00            [12] 1994 	mov	a,#(___str_5 >> 8)
      000829 C0 E0            [24] 1995 	push	acc
      00082B 74 80            [12] 1996 	mov	a,#0x80
      00082D C0 E0            [24] 1997 	push	acc
      00082F 12r00r00         [24] 1998 	lcall	_printf
      000832 15 81            [12] 1999 	dec	sp
      000834 15 81            [12] 2000 	dec	sp
      000836 15 81            [12] 2001 	dec	sp
                                   2002 ;	main.c:183: printf("4 --> MAC Register Read\n\r");
      000838 74r72            [12] 2003 	mov	a,#___str_6
      00083A C0 E0            [24] 2004 	push	acc
      00083C 74s00            [12] 2005 	mov	a,#(___str_6 >> 8)
      00083E C0 E0            [24] 2006 	push	acc
      000840 74 80            [12] 2007 	mov	a,#0x80
      000842 C0 E0            [24] 2008 	push	acc
      000844 12r00r00         [24] 2009 	lcall	_printf
      000847 15 81            [12] 2010 	dec	sp
      000849 15 81            [12] 2011 	dec	sp
      00084B 15 81            [12] 2012 	dec	sp
                                   2013 ;	main.c:184: printf("5 --> PHY SPI Write\n\r");
      00084D 74r8C            [12] 2014 	mov	a,#___str_7
      00084F C0 E0            [24] 2015 	push	acc
      000851 74s00            [12] 2016 	mov	a,#(___str_7 >> 8)
      000853 C0 E0            [24] 2017 	push	acc
      000855 74 80            [12] 2018 	mov	a,#0x80
      000857 C0 E0            [24] 2019 	push	acc
      000859 12r00r00         [24] 2020 	lcall	_printf
      00085C 15 81            [12] 2021 	dec	sp
      00085E 15 81            [12] 2022 	dec	sp
      000860 15 81            [12] 2023 	dec	sp
                                   2024 ;	main.c:185: printf("6 --> PHY SPI Read\n\r");
      000862 74rA2            [12] 2025 	mov	a,#___str_8
      000864 C0 E0            [24] 2026 	push	acc
      000866 74s00            [12] 2027 	mov	a,#(___str_8 >> 8)
      000868 C0 E0            [24] 2028 	push	acc
      00086A 74 80            [12] 2029 	mov	a,#0x80
      00086C C0 E0            [24] 2030 	push	acc
      00086E 12r00r00         [24] 2031 	lcall	_printf
      000871 15 81            [12] 2032 	dec	sp
      000873 15 81            [12] 2033 	dec	sp
      000875 15 81            [12] 2034 	dec	sp
                                   2035 ;	main.c:186: printf("7 --> ENC Reset\n\r");
      000877 74rB7            [12] 2036 	mov	a,#___str_9
      000879 C0 E0            [24] 2037 	push	acc
      00087B 74s00            [12] 2038 	mov	a,#(___str_9 >> 8)
      00087D C0 E0            [24] 2039 	push	acc
      00087F 74 80            [12] 2040 	mov	a,#0x80
      000881 C0 E0            [24] 2041 	push	acc
      000883 12r00r00         [24] 2042 	lcall	_printf
      000886 15 81            [12] 2043 	dec	sp
      000888 15 81            [12] 2044 	dec	sp
      00088A 15 81            [12] 2045 	dec	sp
                                   2046 ;	main.c:187: printf("8 --> Read ETH Register\n\r");
      00088C 74rC9            [12] 2047 	mov	a,#___str_10
      00088E C0 E0            [24] 2048 	push	acc
      000890 74s00            [12] 2049 	mov	a,#(___str_10 >> 8)
      000892 C0 E0            [24] 2050 	push	acc
      000894 74 80            [12] 2051 	mov	a,#0x80
      000896 C0 E0            [24] 2052 	push	acc
      000898 12r00r00         [24] 2053 	lcall	_printf
      00089B 15 81            [12] 2054 	dec	sp
      00089D 15 81            [12] 2055 	dec	sp
      00089F 15 81            [12] 2056 	dec	sp
                                   2057 ;	main.c:188: break;
      0008A1 02r02rD4         [24] 2058 	ljmp	00142$
                                   2059 ;	main.c:190: case 'A':{
      0008A4                       2060 00111$:
                                   2061 ;	main.c:191: send_arp_request();
      0008A4 12r00r00         [24] 2062 	lcall	_send_arp_request
                                   2063 ;	main.c:192: while(1)
      0008A7                       2064 00131$:
                                   2065 ;	main.c:194: if(ENC_pkt_count() > 0)
      0008A7 12r00r00         [24] 2066 	lcall	_ENC_pkt_count
      0008AA E5 82            [12] 2067 	mov	a, dpl
      0008AC 60 F9            [24] 2068 	jz	00131$
                                   2069 ;	main.c:201: if (gNextPacketPtr == 0)
      0008AE 90r02r25         [24] 2070 	mov	dptr,#_main_gNextPacketPtr_60001_168
      0008B1 E0               [24] 2071 	movx	a,@dptr
      0008B2 FE               [12] 2072 	mov	r6,a
      0008B3 A3               [24] 2073 	inc	dptr
      0008B4 E0               [24] 2074 	movx	a,@dptr
      0008B5 FF               [12] 2075 	mov	r7,a
      0008B6 90r02r25         [24] 2076 	mov	dptr,#_main_gNextPacketPtr_60001_168
      0008B9 E0               [24] 2077 	movx	a,@dptr
      0008BA F5 F0            [12] 2078 	mov	b,a
      0008BC A3               [24] 2079 	inc	dptr
      0008BD E0               [24] 2080 	movx	a,@dptr
      0008BE 45 F0            [12] 2081 	orl	a,b
      0008C0 70 08            [24] 2082 	jnz	00113$
                                   2083 ;	main.c:203: update_ERXRDPT(RX_BUFFER_END);
      0008C2 90 0B FF         [24] 2084 	mov	dptr,#0x0bff
      0008C5 12r00r00         [24] 2085 	lcall	_update_ERXRDPT
      0008C8 80 0C            [24] 2086 	sjmp	00114$
      0008CA                       2087 00113$:
                                   2088 ;	main.c:207: update_ERXRDPT(gNextPacketPtr - 1);
      0008CA 1E               [12] 2089 	dec	r6
      0008CB BE FF 01         [24] 2090 	cjne	r6,#0xff,00259$
      0008CE 1F               [12] 2091 	dec	r7
      0008CF                       2092 00259$:
      0008CF 8E 82            [24] 2093 	mov	dpl, r6
      0008D1 8F 83            [24] 2094 	mov	dph, r7
      0008D3 12r00r00         [24] 2095 	lcall	_update_ERXRDPT
      0008D6                       2096 00114$:
                                   2097 ;	main.c:209: uint8_t *packet_data = (uint8_t *)malloc(6);
      0008D6 90 00 06         [24] 2098 	mov	dptr,#0x0006
      0008D9 12r00r00         [24] 2099 	lcall	_malloc
      0008DC AE 82            [24] 2100 	mov	r6, dpl
      0008DE AD 83            [24] 2101 	mov	r5,dph
      0008E0 7F 00            [12] 2102 	mov	r7,#0x00
                                   2103 ;	main.c:210: spi_buffer_read(6, gNextPacketPtr, packet_data);
      0008E2 90r02r25         [24] 2104 	mov	dptr,#_main_gNextPacketPtr_60001_168
      0008E5 E0               [24] 2105 	movx	a,@dptr
      0008E6 FB               [12] 2106 	mov	r3,a
      0008E7 A3               [24] 2107 	inc	dptr
      0008E8 E0               [24] 2108 	movx	a,@dptr
      0008E9 FC               [12] 2109 	mov	r4,a
      0008EA 90r00r00         [24] 2110 	mov	dptr,#_spi_buffer_read_PARM_2
      0008ED EB               [12] 2111 	mov	a,r3
      0008EE F0               [24] 2112 	movx	@dptr,a
      0008EF EC               [12] 2113 	mov	a,r4
      0008F0 A3               [24] 2114 	inc	dptr
      0008F1 F0               [24] 2115 	movx	@dptr,a
      0008F2 90r00r00         [24] 2116 	mov	dptr,#_spi_buffer_read_PARM_3
      0008F5 EE               [12] 2117 	mov	a,r6
      0008F6 F0               [24] 2118 	movx	@dptr,a
      0008F7 ED               [12] 2119 	mov	a,r5
      0008F8 A3               [24] 2120 	inc	dptr
      0008F9 F0               [24] 2121 	movx	@dptr,a
      0008FA EF               [12] 2122 	mov	a,r7
      0008FB A3               [24] 2123 	inc	dptr
      0008FC F0               [24] 2124 	movx	@dptr,a
      0008FD 90 00 06         [24] 2125 	mov	dptr,#0x0006
      000900 C0 07            [24] 2126 	push	ar7
      000902 C0 06            [24] 2127 	push	ar6
      000904 C0 05            [24] 2128 	push	ar5
      000906 12r00r00         [24] 2129 	lcall	_spi_buffer_read
      000909 D0 05            [24] 2130 	pop	ar5
      00090B D0 06            [24] 2131 	pop	ar6
      00090D D0 07            [24] 2132 	pop	ar7
                                   2133 ;	main.c:214: nextPacket = (uint16_t)(packet_data[1] << 8 | packet_data[0]); // Next Packet (MSB, LSB)
      00090F 74 01            [12] 2134 	mov	a,#0x01
      000911 2E               [12] 2135 	add	a, r6
      000912 FA               [12] 2136 	mov	r2,a
      000913 E4               [12] 2137 	clr	a
      000914 3D               [12] 2138 	addc	a, r5
      000915 FB               [12] 2139 	mov	r3,a
      000916 8F 04            [24] 2140 	mov	ar4,r7
      000918 8A 82            [24] 2141 	mov	dpl,r2
      00091A 8B 83            [24] 2142 	mov	dph,r3
      00091C 8C F0            [24] 2143 	mov	b,r4
      00091E 12r00r00         [24] 2144 	lcall	__gptrget
      000921 FC               [12] 2145 	mov	r4,a
      000922 7A 00            [12] 2146 	mov	r2,#0x00
      000924 8E 82            [24] 2147 	mov	dpl,r6
      000926 8D 83            [24] 2148 	mov	dph,r5
      000928 8F F0            [24] 2149 	mov	b,r7
      00092A 12r00r00         [24] 2150 	lcall	__gptrget
      00092D 7B 00            [12] 2151 	mov	r3,#0x00
      00092F 42 02            [12] 2152 	orl	ar2,a
      000931 EB               [12] 2153 	mov	a,r3
      000932 42 04            [12] 2154 	orl	ar4,a
      000934 8A*08            [24] 2155 	mov	_main_sloc4_1_0,r2
      000936 8C*09            [24] 2156 	mov	(_main_sloc4_1_0 + 1),r4
                                   2157 ;	main.c:215: byteCount = (uint16_t)(packet_data[3] << 8 | packet_data[2]);  // Byte Count (MSB, LSB)
      000938 74 03            [12] 2158 	mov	a,#0x03
      00093A 2E               [12] 2159 	add	a, r6
      00093B F8               [12] 2160 	mov	r0,a
      00093C E4               [12] 2161 	clr	a
      00093D 3D               [12] 2162 	addc	a, r5
      00093E F9               [12] 2163 	mov	r1,a
      00093F 8F 03            [24] 2164 	mov	ar3,r7
      000941 88 82            [24] 2165 	mov	dpl,r0
      000943 89 83            [24] 2166 	mov	dph,r1
      000945 8B F0            [24] 2167 	mov	b,r3
      000947 12r00r00         [24] 2168 	lcall	__gptrget
      00094A F8               [12] 2169 	mov	r0,a
      00094B 7B 00            [12] 2170 	mov	r3,#0x00
      00094D 88*01            [24] 2171 	mov	(_main_sloc0_1_0 + 1),r0
      00094F 8B*00            [24] 2172 	mov	_main_sloc0_1_0,r3
      000951 74 02            [12] 2173 	mov	a,#0x02
      000953 2E               [12] 2174 	add	a, r6
      000954 F8               [12] 2175 	mov	r0,a
      000955 E4               [12] 2176 	clr	a
      000956 3D               [12] 2177 	addc	a, r5
      000957 F9               [12] 2178 	mov	r1,a
      000958 8F 03            [24] 2179 	mov	ar3,r7
      00095A 88 82            [24] 2180 	mov	dpl,r0
      00095C 89 83            [24] 2181 	mov	dph,r1
      00095E 8B F0            [24] 2182 	mov	b,r3
      000960 12r00r00         [24] 2183 	lcall	__gptrget
      000963 F8               [12] 2184 	mov	r0,a
      000964 7B 00            [12] 2185 	mov	r3,#0x00
      000966 E5*01            [12] 2186 	mov	a,(_main_sloc0_1_0 + 1)
      000968 42 03            [12] 2187 	orl	ar3,a
      00096A 88*00            [24] 2188 	mov	_main_sloc0_1_0,r0
      00096C 8B*01            [24] 2189 	mov	(_main_sloc0_1_0 + 1),r3
                                   2190 ;	main.c:216: status = (uint16_t)(packet_data[5] << 8 | packet_data[4]);     // Status (MSB, LSB)
      00096E 74 05            [12] 2191 	mov	a,#0x05
      000970 2E               [12] 2192 	add	a, r6
      000971 F8               [12] 2193 	mov	r0,a
      000972 E4               [12] 2194 	clr	a
      000973 3D               [12] 2195 	addc	a, r5
      000974 F9               [12] 2196 	mov	r1,a
      000975 8F 03            [24] 2197 	mov	ar3,r7
      000977 88 82            [24] 2198 	mov	dpl,r0
      000979 89 83            [24] 2199 	mov	dph,r1
      00097B 8B F0            [24] 2200 	mov	b,r3
      00097D 12r00r00         [24] 2201 	lcall	__gptrget
      000980 F8               [12] 2202 	mov	r0,a
      000981 7B 00            [12] 2203 	mov	r3,#0x00
      000983 88*03            [24] 2204 	mov	(_main_sloc1_1_0 + 1),r0
      000985 8B*02            [24] 2205 	mov	_main_sloc1_1_0,r3
      000987 74 04            [12] 2206 	mov	a,#0x04
      000989 2E               [12] 2207 	add	a, r6
      00098A F8               [12] 2208 	mov	r0,a
      00098B E4               [12] 2209 	clr	a
      00098C 3D               [12] 2210 	addc	a, r5
      00098D F9               [12] 2211 	mov	r1,a
      00098E 8F 03            [24] 2212 	mov	ar3,r7
      000990 88 82            [24] 2213 	mov	dpl,r0
      000992 89 83            [24] 2214 	mov	dph,r1
      000994 8B F0            [24] 2215 	mov	b,r3
      000996 12r00r00         [24] 2216 	lcall	__gptrget
      000999 F8               [12] 2217 	mov	r0,a
      00099A 7B 00            [12] 2218 	mov	r3,#0x00
      00099C E5*03            [12] 2219 	mov	a,(_main_sloc1_1_0 + 1)
      00099E 42 03            [12] 2220 	orl	ar3,a
      0009A0 88*02            [24] 2221 	mov	_main_sloc1_1_0,r0
      0009A2 8B*03            [24] 2222 	mov	(_main_sloc1_1_0 + 1),r3
                                   2223 ;	main.c:219: len = byteCount - 4;
      0009A4 A9*00            [24] 2224 	mov	r1,_main_sloc0_1_0
      0009A6 AB*01            [24] 2225 	mov	r3,(_main_sloc0_1_0 + 1)
      0009A8 E9               [12] 2226 	mov	a,r1
      0009A9 24 FC            [12] 2227 	add	a,#0xfc
      0009AB F9               [12] 2228 	mov	r1,a
      0009AC EB               [12] 2229 	mov	a,r3
      0009AD 34 FF            [12] 2230 	addc	a,#0xff
      0009AF FB               [12] 2231 	mov	r3,a
      0009B0 89*06            [24] 2232 	mov	_main_sloc3_1_0,r1
      0009B2 8B*07            [24] 2233 	mov	(_main_sloc3_1_0 + 1),r3
                                   2234 ;	main.c:221: uint8_t *packet_data_actual = (uint8_t *)malloc(len);
      0009B4 85*06*04         [24] 2235 	mov	_main_sloc2_1_0,_main_sloc3_1_0
      0009B7 85*07*05         [24] 2236 	mov	(_main_sloc2_1_0 + 1),(_main_sloc3_1_0 + 1)
      0009BA 85*04 82         [24] 2237 	mov	dpl, _main_sloc2_1_0
      0009BD 85*05 83         [24] 2238 	mov	dph, (_main_sloc2_1_0 + 1)
      0009C0 C0 07            [24] 2239 	push	ar7
      0009C2 C0 06            [24] 2240 	push	ar6
      0009C4 C0 05            [24] 2241 	push	ar5
      0009C6 12r00r00         [24] 2242 	lcall	_malloc
      0009C9 A8 82            [24] 2243 	mov	r0, dpl
      0009CB AB 83            [24] 2244 	mov	r3, dph
      0009CD D0 05            [24] 2245 	pop	ar5
      0009CF D0 06            [24] 2246 	pop	ar6
      0009D1 D0 07            [24] 2247 	pop	ar7
      0009D3 88*0A            [24] 2248 	mov	_main_sloc5_1_0,r0
      0009D5 8B*0B            [24] 2249 	mov	(_main_sloc5_1_0 + 1),r3
      0009D7 75*0C 00         [24] 2250 	mov	(_main_sloc5_1_0 + 2),#0x00
                                   2251 ;	main.c:222: spi_buffer_read(len, gNextPacketPtr + 6, packet_data_actual);
      0009DA 90r02r25         [24] 2252 	mov	dptr,#_main_gNextPacketPtr_60001_168
      0009DD E0               [24] 2253 	movx	a,@dptr
      0009DE FA               [12] 2254 	mov	r2,a
      0009DF A3               [24] 2255 	inc	dptr
      0009E0 E0               [24] 2256 	movx	a,@dptr
      0009E1 FC               [12] 2257 	mov	r4,a
      0009E2 74 06            [12] 2258 	mov	a,#0x06
      0009E4 2A               [12] 2259 	add	a, r2
      0009E5 FA               [12] 2260 	mov	r2,a
      0009E6 E4               [12] 2261 	clr	a
      0009E7 3C               [12] 2262 	addc	a, r4
      0009E8 FC               [12] 2263 	mov	r4,a
      0009E9 90r00r00         [24] 2264 	mov	dptr,#_spi_buffer_read_PARM_2
      0009EC EA               [12] 2265 	mov	a,r2
      0009ED F0               [24] 2266 	movx	@dptr,a
      0009EE EC               [12] 2267 	mov	a,r4
      0009EF A3               [24] 2268 	inc	dptr
      0009F0 F0               [24] 2269 	movx	@dptr,a
      0009F1 90r00r00         [24] 2270 	mov	dptr,#_spi_buffer_read_PARM_3
      0009F4 E5*0A            [12] 2271 	mov	a,_main_sloc5_1_0
      0009F6 F0               [24] 2272 	movx	@dptr,a
      0009F7 E5*0B            [12] 2273 	mov	a,(_main_sloc5_1_0 + 1)
      0009F9 A3               [24] 2274 	inc	dptr
      0009FA F0               [24] 2275 	movx	@dptr,a
      0009FB E5*0C            [12] 2276 	mov	a,(_main_sloc5_1_0 + 2)
      0009FD A3               [24] 2277 	inc	dptr
      0009FE F0               [24] 2278 	movx	@dptr,a
      0009FF 85*06 82         [24] 2279 	mov	dpl, _main_sloc3_1_0
      000A02 85*07 83         [24] 2280 	mov	dph, (_main_sloc3_1_0 + 1)
      000A05 C0 07            [24] 2281 	push	ar7
      000A07 C0 06            [24] 2282 	push	ar6
      000A09 C0 05            [24] 2283 	push	ar5
      000A0B 12r00r00         [24] 2284 	lcall	_spi_buffer_read
                                   2285 ;	main.c:224: int is_tcp_for_target = 0;
      000A0E 90r02r27         [24] 2286 	mov	dptr,#_main_is_tcp_for_target_60004_173
      000A11 E4               [12] 2287 	clr	a
      000A12 F0               [24] 2288 	movx	@dptr,a
      000A13 A3               [24] 2289 	inc	dptr
      000A14 F0               [24] 2290 	movx	@dptr,a
                                   2291 ;	main.c:227: if (memcmp(packet_data_actual, device_mac, 6) == 0) {
      000A15 AA*0A            [24] 2292 	mov	r2,_main_sloc5_1_0
      000A17 AB*0B            [24] 2293 	mov	r3,(_main_sloc5_1_0 + 1)
      000A19 FC               [12] 2294 	mov	r4,a
      000A1A 90r00r00         [24] 2295 	mov	dptr,#_memcmp_PARM_2
      000A1D 74r11            [12] 2296 	mov	a,#_main_device_mac_10000_137
      000A1F F0               [24] 2297 	movx	@dptr,a
      000A20 74s00            [12] 2298 	mov	a,#(_main_device_mac_10000_137 >> 8)
      000A22 A3               [24] 2299 	inc	dptr
      000A23 F0               [24] 2300 	movx	@dptr,a
      000A24 E4               [12] 2301 	clr	a
      000A25 A3               [24] 2302 	inc	dptr
      000A26 F0               [24] 2303 	movx	@dptr,a
      000A27 90r00r00         [24] 2304 	mov	dptr,#_memcmp_PARM_3
      000A2A 74 06            [12] 2305 	mov	a,#0x06
      000A2C F0               [24] 2306 	movx	@dptr,a
      000A2D E4               [12] 2307 	clr	a
      000A2E A3               [24] 2308 	inc	dptr
      000A2F F0               [24] 2309 	movx	@dptr,a
      000A30 8A 82            [24] 2310 	mov	dpl, r2
      000A32 8B 83            [24] 2311 	mov	dph, r3
      000A34 8C F0            [24] 2312 	mov	b, r4
      000A36 12r00r00         [24] 2313 	lcall	_memcmp
      000A39 E5 82            [12] 2314 	mov	a, dpl
      000A3B 85 83 F0         [24] 2315 	mov	b, dph
      000A3E D0 05            [24] 2316 	pop	ar5
      000A40 D0 06            [24] 2317 	pop	ar6
      000A42 D0 07            [24] 2318 	pop	ar7
      000A44 45 F0            [12] 2319 	orl	a,b
      000A46 60 03            [24] 2320 	jz	00260$
      000A48 02r0ArDC         [24] 2321 	ljmp	00121$
      000A4B                       2322 00260$:
                                   2323 ;	main.c:228: printf("MAC matched\n................\r");
      000A4B C0 07            [24] 2324 	push	ar7
      000A4D C0 06            [24] 2325 	push	ar6
      000A4F C0 05            [24] 2326 	push	ar5
      000A51 74r29            [12] 2327 	mov	a,#___str_38
      000A53 C0 E0            [24] 2328 	push	acc
      000A55 74s04            [12] 2329 	mov	a,#(___str_38 >> 8)
      000A57 C0 E0            [24] 2330 	push	acc
      000A59 74 80            [12] 2331 	mov	a,#0x80
      000A5B C0 E0            [24] 2332 	push	acc
      000A5D 12r00r00         [24] 2333 	lcall	_printf
      000A60 15 81            [12] 2334 	dec	sp
      000A62 15 81            [12] 2335 	dec	sp
      000A64 15 81            [12] 2336 	dec	sp
      000A66 D0 05            [24] 2337 	pop	ar5
      000A68 D0 06            [24] 2338 	pop	ar6
      000A6A D0 07            [24] 2339 	pop	ar7
                                   2340 ;	main.c:230: if (packet_data_actual[12] == 0x08 && packet_data_actual[13] == 0x00) {
      000A6C 74 0C            [12] 2341 	mov	a,#0x0c
      000A6E 25*0A            [12] 2342 	add	a, _main_sloc5_1_0
      000A70 FA               [12] 2343 	mov	r2,a
      000A71 E4               [12] 2344 	clr	a
      000A72 35*0B            [12] 2345 	addc	a, (_main_sloc5_1_0 + 1)
      000A74 FB               [12] 2346 	mov	r3,a
      000A75 AC*0C            [24] 2347 	mov	r4,(_main_sloc5_1_0 + 2)
      000A77 8A 82            [24] 2348 	mov	dpl,r2
      000A79 8B 83            [24] 2349 	mov	dph,r3
      000A7B 8C F0            [24] 2350 	mov	b,r4
      000A7D 12r00r00         [24] 2351 	lcall	__gptrget
      000A80 FA               [12] 2352 	mov	r2,a
      000A81 BA 08 58         [24] 2353 	cjne	r2,#0x08,00121$
      000A84 74 0D            [12] 2354 	mov	a,#0x0d
      000A86 25*0A            [12] 2355 	add	a, _main_sloc5_1_0
      000A88 FA               [12] 2356 	mov	r2,a
      000A89 E4               [12] 2357 	clr	a
      000A8A 35*0B            [12] 2358 	addc	a, (_main_sloc5_1_0 + 1)
      000A8C FB               [12] 2359 	mov	r3,a
      000A8D AC*0C            [24] 2360 	mov	r4,(_main_sloc5_1_0 + 2)
      000A8F 8A 82            [24] 2361 	mov	dpl,r2
      000A91 8B 83            [24] 2362 	mov	dph,r3
      000A93 8C F0            [24] 2363 	mov	b,r4
      000A95 12r00r00         [24] 2364 	lcall	__gptrget
      000A98 70 42            [24] 2365 	jnz	00121$
                                   2366 ;	main.c:231: printf("Valid ETHER packet.....................\n\r");
      000A9A C0 07            [24] 2367 	push	ar7
      000A9C C0 06            [24] 2368 	push	ar6
      000A9E C0 05            [24] 2369 	push	ar5
      000AA0 74r47            [12] 2370 	mov	a,#___str_39
      000AA2 C0 E0            [24] 2371 	push	acc
      000AA4 74s04            [12] 2372 	mov	a,#(___str_39 >> 8)
      000AA6 C0 E0            [24] 2373 	push	acc
      000AA8 74 80            [12] 2374 	mov	a,#0x80
      000AAA C0 E0            [24] 2375 	push	acc
      000AAC 12r00r00         [24] 2376 	lcall	_printf
      000AAF 15 81            [12] 2377 	dec	sp
      000AB1 15 81            [12] 2378 	dec	sp
      000AB3 15 81            [12] 2379 	dec	sp
      000AB5 D0 05            [24] 2380 	pop	ar5
      000AB7 D0 06            [24] 2381 	pop	ar6
      000AB9 D0 07            [24] 2382 	pop	ar7
                                   2383 ;	main.c:233: if (packet_data_actual[23] == 0x06) {
      000ABB 74 17            [12] 2384 	mov	a,#0x17
      000ABD 25*0A            [12] 2385 	add	a, _main_sloc5_1_0
      000ABF FA               [12] 2386 	mov	r2,a
      000AC0 E4               [12] 2387 	clr	a
      000AC1 35*0B            [12] 2388 	addc	a, (_main_sloc5_1_0 + 1)
      000AC3 FB               [12] 2389 	mov	r3,a
      000AC4 AC*0C            [24] 2390 	mov	r4,(_main_sloc5_1_0 + 2)
      000AC6 8A 82            [24] 2391 	mov	dpl,r2
      000AC8 8B 83            [24] 2392 	mov	dph,r3
      000ACA 8C F0            [24] 2393 	mov	b,r4
      000ACC 12r00r00         [24] 2394 	lcall	__gptrget
      000ACF FA               [12] 2395 	mov	r2,a
      000AD0 BA 06 09         [24] 2396 	cjne	r2,#0x06,00121$
                                   2397 ;	main.c:234: is_tcp_for_target = 1;
      000AD3 90r02r27         [24] 2398 	mov	dptr,#_main_is_tcp_for_target_60004_173
      000AD6 74 01            [12] 2399 	mov	a,#0x01
      000AD8 F0               [24] 2400 	movx	@dptr,a
      000AD9 E4               [12] 2401 	clr	a
      000ADA A3               [24] 2402 	inc	dptr
      000ADB F0               [24] 2403 	movx	@dptr,a
      000ADC                       2404 00121$:
                                   2405 ;	main.c:238: if (is_tcp_for_target)
      000ADC 90r02r27         [24] 2406 	mov	dptr,#_main_is_tcp_for_target_60004_173
      000ADF E0               [24] 2407 	movx	a,@dptr
      000AE0 F5 F0            [12] 2408 	mov	b,a
      000AE2 A3               [24] 2409 	inc	dptr
      000AE3 E0               [24] 2410 	movx	a,@dptr
      000AE4 45 F0            [12] 2411 	orl	a,b
      000AE6 70 03            [24] 2412 	jnz	00266$
      000AE8 02r0Cr13         [24] 2413 	ljmp	00126$
      000AEB                       2414 00266$:
                                   2415 ;	main.c:243: uint8_t *response = process_tcp_packet(packet_data_actual, len+4+4, &response_size);
      000AEB 74 08            [12] 2416 	mov	a,#0x08
      000AED 25*04            [12] 2417 	add	a, _main_sloc2_1_0
      000AEF FB               [12] 2418 	mov	r3,a
      000AF0 E4               [12] 2419 	clr	a
      000AF1 35*05            [12] 2420 	addc	a, (_main_sloc2_1_0 + 1)
      000AF3 FC               [12] 2421 	mov	r4,a
      000AF4 90r00r00         [24] 2422 	mov	dptr,#_process_tcp_packet_PARM_2
      000AF7 EB               [12] 2423 	mov	a,r3
      000AF8 F0               [24] 2424 	movx	@dptr,a
      000AF9 EC               [12] 2425 	mov	a,r4
      000AFA A3               [24] 2426 	inc	dptr
      000AFB F0               [24] 2427 	movx	@dptr,a
      000AFC 90r00r00         [24] 2428 	mov	dptr,#_process_tcp_packet_PARM_3
      000AFF 74r29            [12] 2429 	mov	a,#_main_response_size_70004_177
      000B01 F0               [24] 2430 	movx	@dptr,a
      000B02 74s02            [12] 2431 	mov	a,#(_main_response_size_70004_177 >> 8)
      000B04 A3               [24] 2432 	inc	dptr
      000B05 F0               [24] 2433 	movx	@dptr,a
      000B06 E4               [12] 2434 	clr	a
      000B07 A3               [24] 2435 	inc	dptr
      000B08 F0               [24] 2436 	movx	@dptr,a
      000B09 85*0A 82         [24] 2437 	mov	dpl, _main_sloc5_1_0
      000B0C 85*0B 83         [24] 2438 	mov	dph, (_main_sloc5_1_0 + 1)
      000B0F 85*0C F0         [24] 2439 	mov	b, (_main_sloc5_1_0 + 2)
      000B12 C0 07            [24] 2440 	push	ar7
      000B14 C0 06            [24] 2441 	push	ar6
      000B16 C0 05            [24] 2442 	push	ar5
      000B18 12r00r00         [24] 2443 	lcall	_process_tcp_packet
      000B1B AA 82            [24] 2444 	mov	r2, dpl
      000B1D AB 83            [24] 2445 	mov	r3, dph
      000B1F AC F0            [24] 2446 	mov	r4, b
      000B21 D0 05            [24] 2447 	pop	ar5
      000B23 D0 06            [24] 2448 	pop	ar6
      000B25 D0 07            [24] 2449 	pop	ar7
                                   2450 ;	main.c:246: if (response != NULL) {
      000B27 EA               [12] 2451 	mov	a,r2
      000B28 4B               [12] 2452 	orl	a,r3
      000B29 70 03            [24] 2453 	jnz	00267$
      000B2B 02r0BrCF         [24] 2454 	ljmp	00123$
      000B2E                       2455 00267$:
                                   2456 ;	main.c:247: printf("\nProcessed response data:\n");
      000B2E C0 07            [24] 2457 	push	ar7
      000B30 C0 06            [24] 2458 	push	ar6
      000B32 C0 05            [24] 2459 	push	ar5
      000B34 C0 04            [24] 2460 	push	ar4
      000B36 C0 03            [24] 2461 	push	ar3
      000B38 C0 02            [24] 2462 	push	ar2
      000B3A 74r71            [12] 2463 	mov	a,#___str_40
      000B3C C0 E0            [24] 2464 	push	acc
      000B3E 74s04            [12] 2465 	mov	a,#(___str_40 >> 8)
      000B40 C0 E0            [24] 2466 	push	acc
      000B42 74 80            [12] 2467 	mov	a,#0x80
      000B44 C0 E0            [24] 2468 	push	acc
      000B46 12r00r00         [24] 2469 	lcall	_printf
      000B49 15 81            [12] 2470 	dec	sp
      000B4B 15 81            [12] 2471 	dec	sp
      000B4D 15 81            [12] 2472 	dec	sp
      000B4F D0 02            [24] 2473 	pop	ar2
      000B51 D0 03            [24] 2474 	pop	ar3
      000B53 D0 04            [24] 2475 	pop	ar4
      000B55 D0 05            [24] 2476 	pop	ar5
      000B57 D0 06            [24] 2477 	pop	ar6
      000B59 D0 07            [24] 2478 	pop	ar7
                                   2479 ;	main.c:248: print_hexdump(response, response_size);
      000B5B 90r02r29         [24] 2480 	mov	dptr,#_main_response_size_70004_177
      000B5E E0               [24] 2481 	movx	a,@dptr
      000B5F F8               [12] 2482 	mov	r0,a
      000B60 A3               [24] 2483 	inc	dptr
      000B61 E0               [24] 2484 	movx	a,@dptr
      000B62 F9               [12] 2485 	mov	r1,a
      000B63 90r00r00         [24] 2486 	mov	dptr,#_print_hexdump_PARM_2
      000B66 E8               [12] 2487 	mov	a,r0
      000B67 F0               [24] 2488 	movx	@dptr,a
      000B68 E9               [12] 2489 	mov	a,r1
      000B69 A3               [24] 2490 	inc	dptr
      000B6A F0               [24] 2491 	movx	@dptr,a
      000B6B 8A 82            [24] 2492 	mov	dpl, r2
      000B6D 8B 83            [24] 2493 	mov	dph, r3
      000B6F 8C F0            [24] 2494 	mov	b, r4
      000B71 C0 07            [24] 2495 	push	ar7
      000B73 C0 06            [24] 2496 	push	ar6
      000B75 C0 05            [24] 2497 	push	ar5
      000B77 C0 04            [24] 2498 	push	ar4
      000B79 C0 03            [24] 2499 	push	ar3
      000B7B C0 02            [24] 2500 	push	ar2
      000B7D 12r00r00         [24] 2501 	lcall	_print_hexdump
      000B80 D0 02            [24] 2502 	pop	ar2
      000B82 D0 03            [24] 2503 	pop	ar3
      000B84 D0 04            [24] 2504 	pop	ar4
      000B86 D0 05            [24] 2505 	pop	ar5
      000B88 D0 06            [24] 2506 	pop	ar6
      000B8A D0 07            [24] 2507 	pop	ar7
                                   2508 ;	main.c:249: transmit_tcp_packet(response, response_size+4);
      000B8C 90r02r29         [24] 2509 	mov	dptr,#_main_response_size_70004_177
      000B8F E0               [24] 2510 	movx	a,@dptr
      000B90 F8               [12] 2511 	mov	r0,a
      000B91 A3               [24] 2512 	inc	dptr
      000B92 E0               [24] 2513 	movx	a,@dptr
      000B93 F9               [12] 2514 	mov	r1,a
      000B94 74 04            [12] 2515 	mov	a,#0x04
      000B96 28               [12] 2516 	add	a, r0
      000B97 F8               [12] 2517 	mov	r0,a
      000B98 E4               [12] 2518 	clr	a
      000B99 39               [12] 2519 	addc	a, r1
      000B9A F9               [12] 2520 	mov	r1,a
      000B9B 90r00r00         [24] 2521 	mov	dptr,#_transmit_tcp_packet_PARM_2
      000B9E E8               [12] 2522 	mov	a,r0
      000B9F F0               [24] 2523 	movx	@dptr,a
      000BA0 E9               [12] 2524 	mov	a,r1
      000BA1 A3               [24] 2525 	inc	dptr
      000BA2 F0               [24] 2526 	movx	@dptr,a
      000BA3 8A 82            [24] 2527 	mov	dpl, r2
      000BA5 8B 83            [24] 2528 	mov	dph, r3
      000BA7 8C F0            [24] 2529 	mov	b, r4
      000BA9 C0 07            [24] 2530 	push	ar7
      000BAB C0 06            [24] 2531 	push	ar6
      000BAD C0 05            [24] 2532 	push	ar5
      000BAF C0 04            [24] 2533 	push	ar4
      000BB1 C0 03            [24] 2534 	push	ar3
      000BB3 C0 02            [24] 2535 	push	ar2
      000BB5 12r00r00         [24] 2536 	lcall	_transmit_tcp_packet
      000BB8 D0 02            [24] 2537 	pop	ar2
      000BBA D0 03            [24] 2538 	pop	ar3
      000BBC D0 04            [24] 2539 	pop	ar4
                                   2540 ;	main.c:250: free(response); // Free response memory if allocated dynamically
      000BBE 8A 82            [24] 2541 	mov	dpl, r2
      000BC0 8B 83            [24] 2542 	mov	dph, r3
      000BC2 8C F0            [24] 2543 	mov	b, r4
      000BC4 12r00r00         [24] 2544 	lcall	_free
      000BC7 D0 05            [24] 2545 	pop	ar5
      000BC9 D0 06            [24] 2546 	pop	ar6
      000BCB D0 07            [24] 2547 	pop	ar7
      000BCD 80 21            [24] 2548 	sjmp	00124$
      000BCF                       2549 00123$:
                                   2550 ;	main.c:252: printf("\nNo response generated by TCP packet processing.\n");
      000BCF C0 07            [24] 2551 	push	ar7
      000BD1 C0 06            [24] 2552 	push	ar6
      000BD3 C0 05            [24] 2553 	push	ar5
      000BD5 74r8C            [12] 2554 	mov	a,#___str_41
      000BD7 C0 E0            [24] 2555 	push	acc
      000BD9 74s04            [12] 2556 	mov	a,#(___str_41 >> 8)
      000BDB C0 E0            [24] 2557 	push	acc
      000BDD 74 80            [12] 2558 	mov	a,#0x80
      000BDF C0 E0            [24] 2559 	push	acc
      000BE1 12r00r00         [24] 2560 	lcall	_printf
      000BE4 15 81            [12] 2561 	dec	sp
      000BE6 15 81            [12] 2562 	dec	sp
      000BE8 15 81            [12] 2563 	dec	sp
      000BEA D0 05            [24] 2564 	pop	ar5
      000BEC D0 06            [24] 2565 	pop	ar6
      000BEE D0 07            [24] 2566 	pop	ar7
      000BF0                       2567 00124$:
                                   2568 ;	main.c:255: printf("YESSSS\n");
      000BF0 C0 07            [24] 2569 	push	ar7
      000BF2 C0 06            [24] 2570 	push	ar6
      000BF4 C0 05            [24] 2571 	push	ar5
      000BF6 74rBE            [12] 2572 	mov	a,#___str_42
      000BF8 C0 E0            [24] 2573 	push	acc
      000BFA 74s04            [12] 2574 	mov	a,#(___str_42 >> 8)
      000BFC C0 E0            [24] 2575 	push	acc
      000BFE 74 80            [12] 2576 	mov	a,#0x80
      000C00 C0 E0            [24] 2577 	push	acc
      000C02 12r00r00         [24] 2578 	lcall	_printf
      000C05 15 81            [12] 2579 	dec	sp
      000C07 15 81            [12] 2580 	dec	sp
      000C09 15 81            [12] 2581 	dec	sp
      000C0B D0 05            [24] 2582 	pop	ar5
      000C0D D0 06            [24] 2583 	pop	ar6
      000C0F D0 07            [24] 2584 	pop	ar7
      000C11 80 21            [24] 2585 	sjmp	00127$
      000C13                       2586 00126$:
                                   2587 ;	main.c:259: printf("NOOOO\n");
      000C13 C0 07            [24] 2588 	push	ar7
      000C15 C0 06            [24] 2589 	push	ar6
      000C17 C0 05            [24] 2590 	push	ar5
      000C19 74rC6            [12] 2591 	mov	a,#___str_43
      000C1B C0 E0            [24] 2592 	push	acc
      000C1D 74s04            [12] 2593 	mov	a,#(___str_43 >> 8)
      000C1F C0 E0            [24] 2594 	push	acc
      000C21 74 80            [12] 2595 	mov	a,#0x80
      000C23 C0 E0            [24] 2596 	push	acc
      000C25 12r00r00         [24] 2597 	lcall	_printf
      000C28 15 81            [12] 2598 	dec	sp
      000C2A 15 81            [12] 2599 	dec	sp
      000C2C 15 81            [12] 2600 	dec	sp
      000C2E D0 05            [24] 2601 	pop	ar5
      000C30 D0 06            [24] 2602 	pop	ar6
      000C32 D0 07            [24] 2603 	pop	ar7
      000C34                       2604 00127$:
                                   2605 ;	main.c:263: gNextPacketPtr = nextPacket;
      000C34 90r02r25         [24] 2606 	mov	dptr,#_main_gNextPacketPtr_60001_168
      000C37 E5*08            [12] 2607 	mov	a,_main_sloc4_1_0
      000C39 F0               [24] 2608 	movx	@dptr,a
      000C3A E5*09            [12] 2609 	mov	a,(_main_sloc4_1_0 + 1)
      000C3C A3               [24] 2610 	inc	dptr
      000C3D F0               [24] 2611 	movx	@dptr,a
                                   2612 ;	main.c:268: printf("nextPacket: 0x%04X\n", nextPacket);
      000C3E C0 07            [24] 2613 	push	ar7
      000C40 C0 06            [24] 2614 	push	ar6
      000C42 C0 05            [24] 2615 	push	ar5
      000C44 C0*08            [24] 2616 	push	_main_sloc4_1_0
      000C46 C0*09            [24] 2617 	push	(_main_sloc4_1_0 + 1)
      000C48 74rCD            [12] 2618 	mov	a,#___str_44
      000C4A C0 E0            [24] 2619 	push	acc
      000C4C 74s04            [12] 2620 	mov	a,#(___str_44 >> 8)
      000C4E C0 E0            [24] 2621 	push	acc
      000C50 74 80            [12] 2622 	mov	a,#0x80
      000C52 C0 E0            [24] 2623 	push	acc
      000C54 12r00r00         [24] 2624 	lcall	_printf
      000C57 E5 81            [12] 2625 	mov	a,sp
      000C59 24 FB            [12] 2626 	add	a,#0xfb
      000C5B F5 81            [12] 2627 	mov	sp,a
                                   2628 ;	main.c:269: printf("byteCount: %d\n", byteCount);
      000C5D C0*00            [24] 2629 	push	_main_sloc0_1_0
      000C5F C0*01            [24] 2630 	push	(_main_sloc0_1_0 + 1)
      000C61 74rE1            [12] 2631 	mov	a,#___str_45
      000C63 C0 E0            [24] 2632 	push	acc
      000C65 74s04            [12] 2633 	mov	a,#(___str_45 >> 8)
      000C67 C0 E0            [24] 2634 	push	acc
      000C69 74 80            [12] 2635 	mov	a,#0x80
      000C6B C0 E0            [24] 2636 	push	acc
      000C6D 12r00r00         [24] 2637 	lcall	_printf
      000C70 E5 81            [12] 2638 	mov	a,sp
      000C72 24 FB            [12] 2639 	add	a,#0xfb
      000C74 F5 81            [12] 2640 	mov	sp,a
                                   2641 ;	main.c:270: printf("status: 0x%02X\n", status);
      000C76 C0*02            [24] 2642 	push	_main_sloc1_1_0
      000C78 C0*03            [24] 2643 	push	(_main_sloc1_1_0 + 1)
      000C7A 74rF0            [12] 2644 	mov	a,#___str_46
      000C7C C0 E0            [24] 2645 	push	acc
      000C7E 74s04            [12] 2646 	mov	a,#(___str_46 >> 8)
      000C80 C0 E0            [24] 2647 	push	acc
      000C82 74 80            [12] 2648 	mov	a,#0x80
      000C84 C0 E0            [24] 2649 	push	acc
      000C86 12r00r00         [24] 2650 	lcall	_printf
      000C89 E5 81            [12] 2651 	mov	a,sp
      000C8B 24 FB            [12] 2652 	add	a,#0xfb
      000C8D F5 81            [12] 2653 	mov	sp,a
      000C8F D0 05            [24] 2654 	pop	ar5
      000C91 D0 06            [24] 2655 	pop	ar6
      000C93 D0 07            [24] 2656 	pop	ar7
                                   2657 ;	main.c:273: uint8_t read_econ2 = mac_spi_read(0x1E, 0); //mac enable for reception
      000C95 90r00r00         [24] 2658 	mov	dptr,#_mac_spi_read_PARM_2
      000C98 E4               [12] 2659 	clr	a
      000C99 F0               [24] 2660 	movx	@dptr,a
      000C9A 75 82 1E         [24] 2661 	mov	dpl, #0x1e
      000C9D C0 07            [24] 2662 	push	ar7
      000C9F C0 06            [24] 2663 	push	ar6
      000CA1 C0 05            [24] 2664 	push	ar5
      000CA3 12r00r00         [24] 2665 	lcall	_mac_spi_read
      000CA6 E5 82            [12] 2666 	mov	a, dpl
      000CA8 D0 05            [24] 2667 	pop	ar5
      000CAA D0 06            [24] 2668 	pop	ar6
      000CAC D0 07            [24] 2669 	pop	ar7
                                   2670 ;	main.c:274: spi_control_write(2, 0x1E, (read_econ2 | (1 << 6))); //mac enable for reception
      000CAE 44 40            [12] 2671 	orl	a,#0x40
      000CB0 FC               [12] 2672 	mov	r4,a
      000CB1 90r00r00         [24] 2673 	mov	dptr,#_spi_control_write_PARM_2
      000CB4 74 1E            [12] 2674 	mov	a,#0x1e
      000CB6 F0               [24] 2675 	movx	@dptr,a
      000CB7 90r00r00         [24] 2676 	mov	dptr,#_spi_control_write_PARM_3
      000CBA EC               [12] 2677 	mov	a,r4
      000CBB F0               [24] 2678 	movx	@dptr,a
      000CBC 75 82 02         [24] 2679 	mov	dpl, #0x02
      000CBF C0 07            [24] 2680 	push	ar7
      000CC1 C0 06            [24] 2681 	push	ar6
      000CC3 C0 05            [24] 2682 	push	ar5
      000CC5 12r00r00         [24] 2683 	lcall	_spi_control_write
      000CC8 D0 05            [24] 2684 	pop	ar5
      000CCA D0 06            [24] 2685 	pop	ar6
      000CCC D0 07            [24] 2686 	pop	ar7
                                   2687 ;	main.c:275: free(packet_data);
      000CCE 7F 00            [12] 2688 	mov	r7,#0x00
      000CD0 8E 82            [24] 2689 	mov	dpl, r6
      000CD2 8D 83            [24] 2690 	mov	dph, r5
      000CD4 8F F0            [24] 2691 	mov	b, r7
      000CD6 12r00r00         [24] 2692 	lcall	_free
      000CD9 02r08rA7         [24] 2693 	ljmp	00131$
                                   2694 ;	main.c:286: case 'C':{
      000CDC                       2695 00134$:
                                   2696 ;	main.c:287: printf(" Resetting ENC using RESET pin in Hardware(P1_0)\n\r");
      000CDC 74r00            [12] 2697 	mov	a,#___str_47
      000CDE C0 E0            [24] 2698 	push	acc
      000CE0 74s05            [12] 2699 	mov	a,#(___str_47 >> 8)
      000CE2 C0 E0            [24] 2700 	push	acc
      000CE4 74 80            [12] 2701 	mov	a,#0x80
      000CE6 C0 E0            [24] 2702 	push	acc
      000CE8 12r00r00         [24] 2703 	lcall	_printf
      000CEB 15 81            [12] 2704 	dec	sp
      000CED 15 81            [12] 2705 	dec	sp
      000CEF 15 81            [12] 2706 	dec	sp
                                   2707 ;	main.c:288: ENC_RESET = 0;
                                   2708 ;	assignBit
      000CF1 C2 90            [12] 2709 	clr	_P1_0
                                   2710 ;	main.c:289: for(int i = 0; i < 6000; i++);
      000CF3 7E 00            [12] 2711 	mov	r6,#0x00
      000CF5 7F 00            [12] 2712 	mov	r7,#0x00
      000CF7                       2713 00148$:
      000CF7 C3               [12] 2714 	clr	c
      000CF8 EE               [12] 2715 	mov	a,r6
      000CF9 94 70            [12] 2716 	subb	a,#0x70
      000CFB EF               [12] 2717 	mov	a,r7
      000CFC 64 80            [12] 2718 	xrl	a,#0x80
      000CFE 94 97            [12] 2719 	subb	a,#0x97
      000D00 50 07            [24] 2720 	jnc	00135$
      000D02 0E               [12] 2721 	inc	r6
      000D03 BE 00 F1         [24] 2722 	cjne	r6,#0x00,00148$
      000D06 0F               [12] 2723 	inc	r7
      000D07 80 EE            [24] 2724 	sjmp	00148$
      000D09                       2725 00135$:
                                   2726 ;	main.c:290: ENC_RESET = 1;
                                   2727 ;	assignBit
      000D09 D2 90            [12] 2728 	setb	_P1_0
                                   2729 ;	main.c:291: break;
      000D0B 02r02rD4         [24] 2730 	ljmp	00142$
                                   2731 ;	main.c:293: case 'D':
      000D0E                       2732 00136$:
                                   2733 ;	main.c:297: process_packet_from_buffer(0x0846);
      000D0E 90 08 46         [24] 2734 	mov	dptr,#0x0846
      000D11 12r00r00         [24] 2735 	lcall	_process_packet_from_buffer
                                   2736 ;	main.c:298: break;
      000D14 02r02rD4         [24] 2737 	ljmp	00142$
                                   2738 ;	main.c:300: case 'E':{
      000D17                       2739 00137$:
                                   2740 ;	main.c:301: IT0 = 1;  // Edge-triggered mode for INT0
                                   2741 ;	assignBit
      000D17 D2 88            [12] 2742 	setb	_IT0
                                   2743 ;	main.c:302: EX0 = 1;  // Enable INT0
                                   2744 ;	assignBit
      000D19 D2 A8            [12] 2745 	setb	_EX0
                                   2746 ;	main.c:303: EA = 1;   // Enable global interrupts
                                   2747 ;	assignBit
      000D1B D2 AF            [12] 2748 	setb	_EA
                                   2749 ;	main.c:304: uint8_t read_econ2 = mac_spi_read(0x1E, 0); //mac enable for reception
      000D1D 90r00r00         [24] 2750 	mov	dptr,#_mac_spi_read_PARM_2
      000D20 E4               [12] 2751 	clr	a
      000D21 F0               [24] 2752 	movx	@dptr,a
      000D22 75 82 1E         [24] 2753 	mov	dpl, #0x1e
      000D25 12r00r00         [24] 2754 	lcall	_mac_spi_read
                                   2755 ;	main.c:306: printf("Enabling TXPKTIE\n\r");
      000D28 74r33            [12] 2756 	mov	a,#___str_48
      000D2A C0 E0            [24] 2757 	push	acc
      000D2C 74s05            [12] 2758 	mov	a,#(___str_48 >> 8)
      000D2E C0 E0            [24] 2759 	push	acc
      000D30 74 80            [12] 2760 	mov	a,#0x80
      000D32 C0 E0            [24] 2761 	push	acc
      000D34 12r00r00         [24] 2762 	lcall	_printf
      000D37 15 81            [12] 2763 	dec	sp
      000D39 15 81            [12] 2764 	dec	sp
      000D3B 15 81            [12] 2765 	dec	sp
                                   2766 ;	main.c:307: spi_control_write(0, 0x1B, 0xC0);
      000D3D 90r00r00         [24] 2767 	mov	dptr,#_spi_control_write_PARM_2
      000D40 74 1B            [12] 2768 	mov	a,#0x1b
      000D42 F0               [24] 2769 	movx	@dptr,a
      000D43 90r00r00         [24] 2770 	mov	dptr,#_spi_control_write_PARM_3
      000D46 74 C0            [12] 2771 	mov	a,#0xc0
      000D48 F0               [24] 2772 	movx	@dptr,a
      000D49 75 82 00         [24] 2773 	mov	dpl, #0x00
      000D4C 12r00r00         [24] 2774 	lcall	_spi_control_write
                                   2775 ;	main.c:308: break;
      000D4F 02r02rD4         [24] 2776 	ljmp	00142$
                                   2777 ;	main.c:310: case 'F':{
      000D52                       2778 00138$:
                                   2779 ;	main.c:311: printf("Disabling TXPKTIE\n\r");
      000D52 74r46            [12] 2780 	mov	a,#___str_49
      000D54 C0 E0            [24] 2781 	push	acc
      000D56 74s05            [12] 2782 	mov	a,#(___str_49 >> 8)
      000D58 C0 E0            [24] 2783 	push	acc
      000D5A 74 80            [12] 2784 	mov	a,#0x80
      000D5C C0 E0            [24] 2785 	push	acc
      000D5E 12r00r00         [24] 2786 	lcall	_printf
      000D61 15 81            [12] 2787 	dec	sp
      000D63 15 81            [12] 2788 	dec	sp
      000D65 15 81            [12] 2789 	dec	sp
                                   2790 ;	main.c:312: spi_control_write(0, 0x1B, 0);
      000D67 90r00r00         [24] 2791 	mov	dptr,#_spi_control_write_PARM_2
      000D6A 74 1B            [12] 2792 	mov	a,#0x1b
      000D6C F0               [24] 2793 	movx	@dptr,a
      000D6D 90r00r00         [24] 2794 	mov	dptr,#_spi_control_write_PARM_3
      000D70 E4               [12] 2795 	clr	a
      000D71 F0               [24] 2796 	movx	@dptr,a
      000D72 75 82 00         [24] 2797 	mov	dpl, #0x00
      000D75 12r00r00         [24] 2798 	lcall	_spi_control_write
                                   2799 ;	main.c:314: default: {
      000D78                       2800 00139$:
                                   2801 ;	main.c:315: printf("Invalid option. Please select a valid action.\n\r");
      000D78 74r5A            [12] 2802 	mov	a,#___str_50
      000D7A C0 E0            [24] 2803 	push	acc
      000D7C 74s05            [12] 2804 	mov	a,#(___str_50 >> 8)
      000D7E C0 E0            [24] 2805 	push	acc
      000D80 74 80            [12] 2806 	mov	a,#0x80
      000D82 C0 E0            [24] 2807 	push	acc
      000D84 12r00r00         [24] 2808 	lcall	_printf
      000D87 15 81            [12] 2809 	dec	sp
      000D89 15 81            [12] 2810 	dec	sp
      000D8B 15 81            [12] 2811 	dec	sp
                                   2812 ;	main.c:318: }
                                   2813 ;	main.c:320: }
      000D8D 02r02rD4         [24] 2814 	ljmp	00142$
                                   2815 	.area CSEG    (CODE)
                                   2816 	.area CONST   (CODE)
                                   2817 	.area CONST   (CODE)
      000000                       2818 ___str_0:
      000000 0A                    2819 	.db 0x0a
      000001 0D                    2820 	.db 0x0d
      000002 00                    2821 	.db 0x00
                                   2822 	.area CSEG    (CODE)
                                   2823 	.area CONST   (CODE)
      000003                       2824 ___str_1:
      000003 53 50 49 20 4F 70 65  2825 	.ascii "SPI Operations on 8051"
             72 61 74 69 6F 6E 73
             20 6F 6E 20 38 30 35
             31
      000019 0A                    2826 	.db 0x0a
      00001A 0D                    2827 	.db 0x0d
      00001B 00                    2828 	.db 0x00
                                   2829 	.area CSEG    (CODE)
                                   2830 	.area CONST   (CODE)
      00001C                       2831 ___str_2:
      00001C 0A                    2832 	.db 0x0a
      00001D 0D                    2833 	.db 0x0d
      00001E 43 68 6F 6F 73 65 20  2834 	.ascii "Choose an action: "
             61 6E 20 61 63 74 69
             6F 6E 3A 20
      000030 0A                    2835 	.db 0x0a
      000031 0D                    2836 	.db 0x0d
      000032 00                    2837 	.db 0x00
                                   2838 	.area CSEG    (CODE)
                                   2839 	.area CONST   (CODE)
      000033                       2840 ___str_3:
      000033 31 20 2D 2D 3E 20 43  2841 	.ascii "1 --> Control Write"
             6F 6E 74 72 6F 6C 20
             57 72 69 74 65
      000046 0A                    2842 	.db 0x0a
      000047 0D                    2843 	.db 0x0d
      000048 00                    2844 	.db 0x00
                                   2845 	.area CSEG    (CODE)
                                   2846 	.area CONST   (CODE)
      000049                       2847 ___str_4:
      000049 32 20 2D 2D 3E 20 42  2848 	.ascii "2 --> Buffer Write"
             75 66 66 65 72 20 57
             72 69 74 65
      00005B 0A                    2849 	.db 0x0a
      00005C 0D                    2850 	.db 0x0d
      00005D 00                    2851 	.db 0x00
                                   2852 	.area CSEG    (CODE)
                                   2853 	.area CONST   (CODE)
      00005E                       2854 ___str_5:
      00005E 33 20 2D 2D 3E 20 42  2855 	.ascii "3 --> Buffer Read"
             75 66 66 65 72 20 52
             65 61 64
      00006F 0A                    2856 	.db 0x0a
      000070 0D                    2857 	.db 0x0d
      000071 00                    2858 	.db 0x00
                                   2859 	.area CSEG    (CODE)
                                   2860 	.area CONST   (CODE)
      000072                       2861 ___str_6:
      000072 34 20 2D 2D 3E 20 4D  2862 	.ascii "4 --> MAC Register Read"
             41 43 20 52 65 67 69
             73 74 65 72 20 52 65
             61 64
      000089 0A                    2863 	.db 0x0a
      00008A 0D                    2864 	.db 0x0d
      00008B 00                    2865 	.db 0x00
                                   2866 	.area CSEG    (CODE)
                                   2867 	.area CONST   (CODE)
      00008C                       2868 ___str_7:
      00008C 35 20 2D 2D 3E 20 50  2869 	.ascii "5 --> PHY SPI Write"
             48 59 20 53 50 49 20
             57 72 69 74 65
      00009F 0A                    2870 	.db 0x0a
      0000A0 0D                    2871 	.db 0x0d
      0000A1 00                    2872 	.db 0x00
                                   2873 	.area CSEG    (CODE)
                                   2874 	.area CONST   (CODE)
      0000A2                       2875 ___str_8:
      0000A2 36 20 2D 2D 3E 20 50  2876 	.ascii "6 --> PHY SPI Read"
             48 59 20 53 50 49 20
             52 65 61 64
      0000B4 0A                    2877 	.db 0x0a
      0000B5 0D                    2878 	.db 0x0d
      0000B6 00                    2879 	.db 0x00
                                   2880 	.area CSEG    (CODE)
                                   2881 	.area CONST   (CODE)
      0000B7                       2882 ___str_9:
      0000B7 37 20 2D 2D 3E 20 45  2883 	.ascii "7 --> ENC Reset"
             4E 43 20 52 65 73 65
             74
      0000C6 0A                    2884 	.db 0x0a
      0000C7 0D                    2885 	.db 0x0d
      0000C8 00                    2886 	.db 0x00
                                   2887 	.area CSEG    (CODE)
                                   2888 	.area CONST   (CODE)
      0000C9                       2889 ___str_10:
      0000C9 38 20 2D 2D 3E 20 52  2890 	.ascii "8 --> Read ETH Register"
             65 61 64 20 45 54 48
             20 52 65 67 69 73 74
             65 72
      0000E0 0A                    2891 	.db 0x0a
      0000E1 0D                    2892 	.db 0x0d
      0000E2 00                    2893 	.db 0x00
                                   2894 	.area CSEG    (CODE)
                                   2895 	.area CONST   (CODE)
      0000E3                       2896 ___str_11:
      0000E3 39 20 2D 2D 3E 20 44  2897 	.ascii "9 --> Display Menu"
             69 73 70 6C 61 79 20
             4D 65 6E 75
      0000F5 0A                    2898 	.db 0x0a
      0000F6 0D                    2899 	.db 0x0d
      0000F7 00                    2900 	.db 0x00
                                   2901 	.area CSEG    (CODE)
                                   2902 	.area CONST   (CODE)
      0000F8                       2903 ___str_12:
      0000F8 41 20 2D 2D 3E 20 53  2904 	.ascii "A --> Send ARP Request"
             65 6E 64 20 41 52 50
             20 52 65 71 75 65 73
             74
      00010E 0A                    2905 	.db 0x0a
      00010F 0D                    2906 	.db 0x0d
      000110 00                    2907 	.db 0x00
                                   2908 	.area CSEG    (CODE)
                                   2909 	.area CONST   (CODE)
      000111                       2910 ___str_13:
      000111 42 20 2D 2D 3E 20 49  2911 	.ascii "B --> Init RX buffers"
             6E 69 74 20 52 58 20
             62 75 66 66 65 72 73
      000126 0A                    2912 	.db 0x0a
      000127 0D                    2913 	.db 0x0d
      000128 00                    2914 	.db 0x00
                                   2915 	.area CSEG    (CODE)
                                   2916 	.area CONST   (CODE)
      000129                       2917 ___str_14:
      000129 43 20 2D 2D 3E 20 48  2918 	.ascii "C --> Hard Reset(nRESET pin)"
             61 72 64 20 52 65 73
             65 74 28 6E 52 45 53
             45 54 20 70 69 6E 29
      000145 0A                    2919 	.db 0x0a
      000146 0D                    2920 	.db 0x0d
      000147 00                    2921 	.db 0x00
                                   2922 	.area CSEG    (CODE)
                                   2923 	.area CONST   (CODE)
      000148                       2924 ___str_15:
      000148 44 20 2D 2D 3E 20 50  2925 	.ascii "D --> Process TCP"
             72 6F 63 65 73 73 20
             54 43 50
      000159 0A                    2926 	.db 0x0a
      00015A 0D                    2927 	.db 0x0d
      00015B 00                    2928 	.db 0x00
                                   2929 	.area CSEG    (CODE)
                                   2930 	.area CONST   (CODE)
      00015C                       2931 ___str_16:
      00015C 45 20 2D 2D 3E 20 45  2932 	.ascii "E --> Enable TX interrupt"
             6E 61 62 6C 65 20 54
             58 20 69 6E 74 65 72
             72 75 70 74
      000175 0A                    2933 	.db 0x0a
      000176 0D                    2934 	.db 0x0d
      000177 00                    2935 	.db 0x00
                                   2936 	.area CSEG    (CODE)
                                   2937 	.area CONST   (CODE)
      000178                       2938 ___str_17:
      000178 46 20 2D 2D 3E 20 44  2939 	.ascii "F --> Disabling TX interrupt"
             69 73 61 62 6C 69 6E
             67 20 54 58 20 69 6E
             74 65 72 72 75 70 74
      000194 0A                    2940 	.db 0x0a
      000195 0D                    2941 	.db 0x0d
      000196 00                    2942 	.db 0x00
                                   2943 	.area CSEG    (CODE)
                                   2944 	.area CONST   (CODE)
      000197                       2945 ___str_18:
      000197 45 6E 74 65 72 20 74  2946 	.ascii "Enter the register bank to select:"
             68 65 20 72 65 67 69
             73 74 65 72 20 62 61
             6E 6B 20 74 6F 20 73
             65 6C 65 63 74 3A
      0001B9 0A                    2947 	.db 0x0a
      0001BA 0D                    2948 	.db 0x0d
      0001BB 00                    2949 	.db 0x00
                                   2950 	.area CSEG    (CODE)
                                   2951 	.area CONST   (CODE)
      0001BC                       2952 ___str_19:
      0001BC 45 6E 74 65 72 20 74  2953 	.ascii "Enter the address of the Control Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 43 6F 6E
             74 72 6F 6C 20 52 65
             67 69 73 74 65 72 3A
      0001E6 0A                    2954 	.db 0x0a
      0001E7 0D                    2955 	.db 0x0d
      0001E8 00                    2956 	.db 0x00
                                   2957 	.area CSEG    (CODE)
                                   2958 	.area CONST   (CODE)
      0001E9                       2959 ___str_20:
      0001E9 45 6E 74 65 72 20 74  2960 	.ascii "Enter the data you want to write:"
             68 65 20 64 61 74 61
             20 79 6F 75 20 77 61
             6E 74 20 74 6F 20 77
             72 69 74 65 3A
      00020A 0A                    2961 	.db 0x0a
      00020B 0D                    2962 	.db 0x0d
      00020C 00                    2963 	.db 0x00
                                   2964 	.area CSEG    (CODE)
                                   2965 	.area CONST   (CODE)
      00020D                       2966 ___str_21:
      00020D 45 6E 74 65 72 20 74  2967 	.ascii "Enter the number of bytes to write:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 77 72 69 74 65 3A
      000230 0A                    2968 	.db 0x0a
      000231 0D                    2969 	.db 0x0d
      000232 00                    2970 	.db 0x00
                                   2971 	.area CSEG    (CODE)
                                   2972 	.area CONST   (CODE)
      000233                       2973 ___str_22:
      000233 45 6E 74 65 72 20 74  2974 	.ascii "Enter the starting address:"
             68 65 20 73 74 61 72
             74 69 6E 67 20 61 64
             64 72 65 73 73 3A
      00024E 0A                    2975 	.db 0x0a
      00024F 0D                    2976 	.db 0x0d
      000250 00                    2977 	.db 0x00
                                   2978 	.area CSEG    (CODE)
                                   2979 	.area CONST   (CODE)
      000251                       2980 ___str_23:
      000251 45 6E 74 65 72 20 25  2981 	.ascii "Enter %d bytes of data (in hex):"
             64 20 62 79 74 65 73
             20 6F 66 20 64 61 74
             61 20 28 69 6E 20 68
             65 78 29 3A
      000271 0A                    2982 	.db 0x0a
      000272 0D                    2983 	.db 0x0d
      000273 00                    2984 	.db 0x00
                                   2985 	.area CSEG    (CODE)
                                   2986 	.area CONST   (CODE)
      000274                       2987 ___str_24:
      000274 42 79 74 65 20 25 64  2988 	.ascii "Byte %d: "
             3A 20
      00027D 00                    2989 	.db 0x00
                                   2990 	.area CSEG    (CODE)
                                   2991 	.area CONST   (CODE)
      00027E                       2992 ___str_25:
      00027E 45 6E 74 65 72 20 74  2993 	.ascii "Enter the number of bytes to read:"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             79 74 65 73 20 74 6F
             20 72 65 61 64 3A
      0002A0 0A                    2994 	.db 0x0a
      0002A1 0D                    2995 	.db 0x0d
      0002A2 00                    2996 	.db 0x00
                                   2997 	.area CSEG    (CODE)
                                   2998 	.area CONST   (CODE)
      0002A3                       2999 ___str_26:
      0002A3 45 6E 74 65 72 20 74  3000 	.ascii "Enter the MAC register bank to select:"
             68 65 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 62 61 6E 6B 20
             74 6F 20 73 65 6C 65
             63 74 3A
      0002C9 0A                    3001 	.db 0x0a
      0002CA 0D                    3002 	.db 0x0d
      0002CB 00                    3003 	.db 0x00
                                   3004 	.area CSEG    (CODE)
                                   3005 	.area CONST   (CODE)
      0002CC                       3006 ___str_27:
      0002CC 45 6E 74 65 72 20 74  3007 	.ascii "Enter the address of the MAC Register:"
             68 65 20 61 64 64 72
             65 73 73 20 6F 66 20
             74 68 65 20 4D 41 43
             20 52 65 67 69 73 74
             65 72 3A
      0002F2 0A                    3008 	.db 0x0a
      0002F3 0D                    3009 	.db 0x0d
      0002F4 00                    3010 	.db 0x00
                                   3011 	.area CSEG    (CODE)
                                   3012 	.area CONST   (CODE)
      0002F5                       3013 ___str_28:
      0002F5 4D 41 43 20 52 65 67  3014 	.ascii "MAC Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      00030E 0A                    3015 	.db 0x0a
      00030F 0D                    3016 	.db 0x0d
      000310 00                    3017 	.db 0x00
                                   3018 	.area CSEG    (CODE)
                                   3019 	.area CONST   (CODE)
      000311                       3020 ___str_29:
      000311 45 6E 74 65 72 20 74  3021 	.ascii "Enter the PHY register address:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 3A
      000330 0A                    3022 	.db 0x0a
      000331 0D                    3023 	.db 0x0d
      000332 00                    3024 	.db 0x00
                                   3025 	.area CSEG    (CODE)
                                   3026 	.area CONST   (CODE)
      000333                       3027 ___str_30:
      000333 45 6E 74 65 72 20 74  3028 	.ascii "Enter the 16-bit data to write:"
             68 65 20 31 36 2D 62
             69 74 20 64 61 74 61
             20 74 6F 20 77 72 69
             74 65 3A
      000352 0A                    3029 	.db 0x0a
      000353 0D                    3030 	.db 0x0d
      000354 00                    3031 	.db 0x00
                                   3032 	.area CSEG    (CODE)
                                   3033 	.area CONST   (CODE)
      000355                       3034 ___str_31:
      000355 50 48 59 20 57 72 69  3035 	.ascii "PHY Write Data: 0x%04X"
             74 65 20 44 61 74 61
             3A 20 30 78 25 30 34
             58
      00036B 0A                    3036 	.db 0x0a
      00036C 0D                    3037 	.db 0x0d
      00036D 00                    3038 	.db 0x00
                                   3039 	.area CSEG    (CODE)
                                   3040 	.area CONST   (CODE)
      00036E                       3041 ___str_32:
      00036E 45 6E 74 65 72 20 74  3042 	.ascii "Enter the PHY register address to read:"
             68 65 20 50 48 59 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      000395 0A                    3043 	.db 0x0a
      000396 0D                    3044 	.db 0x0d
      000397 00                    3045 	.db 0x00
                                   3046 	.area CSEG    (CODE)
                                   3047 	.area CONST   (CODE)
      000398                       3048 ___str_33:
      000398 50 48 59 20 52 65 61  3049 	.ascii "PHY Read Data: 0x%04X"
             64 20 44 61 74 61 3A
             20 30 78 25 30 34 58
      0003AD 0A                    3050 	.db 0x0a
      0003AE 0D                    3051 	.db 0x0d
      0003AF 00                    3052 	.db 0x00
                                   3053 	.area CSEG    (CODE)
                                   3054 	.area CONST   (CODE)
      0003B0                       3055 ___str_34:
      0003B0 52 65 73 65 74 74 69  3056 	.ascii "Resetting ENC28J60..."
             6E 67 20 45 4E 43 32
             38 4A 36 30 2E 2E 2E
      0003C5 0A                    3057 	.db 0x0a
      0003C6 0D                    3058 	.db 0x0d
      0003C7 00                    3059 	.db 0x00
                                   3060 	.area CSEG    (CODE)
                                   3061 	.area CONST   (CODE)
      0003C8                       3062 ___str_35:
      0003C8 45 6E 74 65 72 20 74  3063 	.ascii "Enter the ETH register address to read:"
             68 65 20 45 54 48 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 74 6F 20 72
             65 61 64 3A
      0003EF 0A                    3064 	.db 0x0a
      0003F0 0D                    3065 	.db 0x0d
      0003F1 00                    3066 	.db 0x00
                                   3067 	.area CSEG    (CODE)
                                   3068 	.area CONST   (CODE)
      0003F2                       3069 ___str_36:
      0003F2 45 6E 74 65 72 20 74  3070 	.ascii "Enter the bank (0 or 1):"
             68 65 20 62 61 6E 6B
             20 28 30 20 6F 72 20
             31 29 3A
      00040A 0A                    3071 	.db 0x0a
      00040B 0D                    3072 	.db 0x0d
      00040C 00                    3073 	.db 0x00
                                   3074 	.area CSEG    (CODE)
                                   3075 	.area CONST   (CODE)
      00040D                       3076 ___str_37:
      00040D 45 54 48 20 52 65 67  3077 	.ascii "ETH Register Data: 0x%02X"
             69 73 74 65 72 20 44
             61 74 61 3A 20 30 78
             25 30 32 58
      000426 0A                    3078 	.db 0x0a
      000427 0D                    3079 	.db 0x0d
      000428 00                    3080 	.db 0x00
                                   3081 	.area CSEG    (CODE)
                                   3082 	.area CONST   (CODE)
      000429                       3083 ___str_38:
      000429 4D 41 43 20 6D 61 74  3084 	.ascii "MAC matched"
             63 68 65 64
      000434 0A                    3085 	.db 0x0a
      000435 2E 2E 2E 2E 2E 2E 2E  3086 	.ascii "................"
             2E 2E 2E 2E 2E 2E 2E
             2E 2E
      000445 0D                    3087 	.db 0x0d
      000446 00                    3088 	.db 0x00
                                   3089 	.area CSEG    (CODE)
                                   3090 	.area CONST   (CODE)
      000447                       3091 ___str_39:
      000447 56 61 6C 69 64 20 45  3092 	.ascii "Valid ETHER packet....................."
             54 48 45 52 20 70 61
             63 6B 65 74 2E 2E 2E
             2E 2E 2E 2E 2E 2E 2E
             2E 2E 2E 2E 2E 2E 2E
             2E 2E 2E 2E
      00046E 0A                    3093 	.db 0x0a
      00046F 0D                    3094 	.db 0x0d
      000470 00                    3095 	.db 0x00
                                   3096 	.area CSEG    (CODE)
                                   3097 	.area CONST   (CODE)
      000471                       3098 ___str_40:
      000471 0A                    3099 	.db 0x0a
      000472 50 72 6F 63 65 73 73  3100 	.ascii "Processed response data:"
             65 64 20 72 65 73 70
             6F 6E 73 65 20 64 61
             74 61 3A
      00048A 0A                    3101 	.db 0x0a
      00048B 00                    3102 	.db 0x00
                                   3103 	.area CSEG    (CODE)
                                   3104 	.area CONST   (CODE)
      00048C                       3105 ___str_41:
      00048C 0A                    3106 	.db 0x0a
      00048D 4E 6F 20 72 65 73 70  3107 	.ascii "No response generated by TCP packet processing."
             6F 6E 73 65 20 67 65
             6E 65 72 61 74 65 64
             20 62 79 20 54 43 50
             20 70 61 63 6B 65 74
             20 70 72 6F 63 65 73
             73 69 6E 67 2E
      0004BC 0A                    3108 	.db 0x0a
      0004BD 00                    3109 	.db 0x00
                                   3110 	.area CSEG    (CODE)
                                   3111 	.area CONST   (CODE)
      0004BE                       3112 ___str_42:
      0004BE 59 45 53 53 53 53     3113 	.ascii "YESSSS"
      0004C4 0A                    3114 	.db 0x0a
      0004C5 00                    3115 	.db 0x00
                                   3116 	.area CSEG    (CODE)
                                   3117 	.area CONST   (CODE)
      0004C6                       3118 ___str_43:
      0004C6 4E 4F 4F 4F 4F        3119 	.ascii "NOOOO"
      0004CB 0A                    3120 	.db 0x0a
      0004CC 00                    3121 	.db 0x00
                                   3122 	.area CSEG    (CODE)
                                   3123 	.area CONST   (CODE)
      0004CD                       3124 ___str_44:
      0004CD 6E 65 78 74 50 61 63  3125 	.ascii "nextPacket: 0x%04X"
             6B 65 74 3A 20 30 78
             25 30 34 58
      0004DF 0A                    3126 	.db 0x0a
      0004E0 00                    3127 	.db 0x00
                                   3128 	.area CSEG    (CODE)
                                   3129 	.area CONST   (CODE)
      0004E1                       3130 ___str_45:
      0004E1 62 79 74 65 43 6F 75  3131 	.ascii "byteCount: %d"
             6E 74 3A 20 25 64
      0004EE 0A                    3132 	.db 0x0a
      0004EF 00                    3133 	.db 0x00
                                   3134 	.area CSEG    (CODE)
                                   3135 	.area CONST   (CODE)
      0004F0                       3136 ___str_46:
      0004F0 73 74 61 74 75 73 3A  3137 	.ascii "status: 0x%02X"
             20 30 78 25 30 32 58
      0004FE 0A                    3138 	.db 0x0a
      0004FF 00                    3139 	.db 0x00
                                   3140 	.area CSEG    (CODE)
                                   3141 	.area CONST   (CODE)
      000500                       3142 ___str_47:
      000500 20 52 65 73 65 74 74  3143 	.ascii " Resetting ENC using RESET pin in Hardware(P1_0)"
             69 6E 67 20 45 4E 43
             20 75 73 69 6E 67 20
             52 45 53 45 54 20 70
             69 6E 20 69 6E 20 48
             61 72 64 77 61 72 65
             28 50 31 5F 30 29
      000530 0A                    3144 	.db 0x0a
      000531 0D                    3145 	.db 0x0d
      000532 00                    3146 	.db 0x00
                                   3147 	.area CSEG    (CODE)
                                   3148 	.area CONST   (CODE)
      000533                       3149 ___str_48:
      000533 45 6E 61 62 6C 69 6E  3150 	.ascii "Enabling TXPKTIE"
             67 20 54 58 50 4B 54
             49 45
      000543 0A                    3151 	.db 0x0a
      000544 0D                    3152 	.db 0x0d
      000545 00                    3153 	.db 0x00
                                   3154 	.area CSEG    (CODE)
                                   3155 	.area CONST   (CODE)
      000546                       3156 ___str_49:
      000546 44 69 73 61 62 6C 69  3157 	.ascii "Disabling TXPKTIE"
             6E 67 20 54 58 50 4B
             54 49 45
      000557 0A                    3158 	.db 0x0a
      000558 0D                    3159 	.db 0x0d
      000559 00                    3160 	.db 0x00
                                   3161 	.area CSEG    (CODE)
                                   3162 	.area CONST   (CODE)
      00055A                       3163 ___str_50:
      00055A 49 6E 76 61 6C 69 64  3164 	.ascii "Invalid option. Please select a valid action."
             20 6F 70 74 69 6F 6E
             2E 20 50 6C 65 61 73
             65 20 73 65 6C 65 63
             74 20 61 20 76 61 6C
             69 64 20 61 63 74 69
             6F 6E 2E
      000587 0A                    3165 	.db 0x0a
      000588 0D                    3166 	.db 0x0d
      000589 00                    3167 	.db 0x00
                                   3168 	.area CSEG    (CODE)
                                   3169 	.area XINIT   (CODE)
      000000                       3170 __xinit__device_mac:
      000000 02                    3171 	.db #0x02	; 2
      000001 11                    3172 	.db #0x11	; 17
      000002 22                    3173 	.db #0x22	; 34
      000003 33                    3174 	.db #0x33	; 51	'3'
      000004 44                    3175 	.db #0x44	; 68	'D'
      000005 55                    3176 	.db #0x55	; 85	'U'
      000006                       3177 __xinit__target_mac:
      000006 F8                    3178 	.db #0xf8	; 248
      000007 75                    3179 	.db #0x75	; 117	'u'
      000008 A4                    3180 	.db #0xa4	; 164
      000009 8C                    3181 	.db #0x8c	; 140
      00000A 41                    3182 	.db #0x41	; 65	'A'
      00000B 31                    3183 	.db #0x31	; 49	'1'
      00000C                       3184 __xinit__device_ip:
      00000C C0                    3185 	.db #0xc0	; 192
      00000D A8                    3186 	.db #0xa8	; 168
      00000E 01                    3187 	.db #0x01	; 1
      00000F 64                    3188 	.db #0x64	; 100	'd'
      000010                       3189 __xinit__target_ip:
      000010 C0                    3190 	.db #0xc0	; 192
      000011 A8                    3191 	.db #0xa8	; 168
      000012 01                    3192 	.db #0x01	; 1
      000013 01                    3193 	.db #0x01	; 1
                                   3194 	.area CABS    (ABS,CODE)
