                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module Eth
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _external_interrupt0_isr
                                     12 	.globl _enc28j60_transmission_successful
                                     13 	.globl _wait_for_transmission_complete
                                     14 	.globl _enc28j60_set_transmit_pointers
                                     15 	.globl _enc28j60_start_transmission
                                     16 	.globl _delay_ms
                                     17 	.globl _spi_control_write
                                     18 	.globl _phy_spi_write
                                     19 	.globl _spi_buffer_write
                                     20 	.globl _mac_spi_read
                                     21 	.globl _enc_reset
                                     22 	.globl _printf
                                     23 	.globl _TF1
                                     24 	.globl _TR1
                                     25 	.globl _TF0
                                     26 	.globl _TR0
                                     27 	.globl _IE1
                                     28 	.globl _IT1
                                     29 	.globl _IE0
                                     30 	.globl _IT0
                                     31 	.globl _SM0
                                     32 	.globl _SM1
                                     33 	.globl _SM2
                                     34 	.globl _REN
                                     35 	.globl _TB8
                                     36 	.globl _RB8
                                     37 	.globl _TI
                                     38 	.globl _RI
                                     39 	.globl _CY
                                     40 	.globl _AC
                                     41 	.globl _F0
                                     42 	.globl _RS1
                                     43 	.globl _RS0
                                     44 	.globl _OV
                                     45 	.globl _F1
                                     46 	.globl _P
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD0
                                     54 	.globl _TXD
                                     55 	.globl _RXD0
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _P1_7
                                     74 	.globl _P1_6
                                     75 	.globl _P1_5
                                     76 	.globl _P1_4
                                     77 	.globl _P1_3
                                     78 	.globl _P1_2
                                     79 	.globl _P1_1
                                     80 	.globl _P1_0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _PS
                                     90 	.globl _PT1
                                     91 	.globl _PX1
                                     92 	.globl _PT0
                                     93 	.globl _PX0
                                     94 	.globl _EA
                                     95 	.globl _ES
                                     96 	.globl _ET1
                                     97 	.globl _EX1
                                     98 	.globl _ET0
                                     99 	.globl _EX0
                                    100 	.globl _BREG_F7
                                    101 	.globl _BREG_F6
                                    102 	.globl _BREG_F5
                                    103 	.globl _BREG_F4
                                    104 	.globl _BREG_F3
                                    105 	.globl _BREG_F2
                                    106 	.globl _BREG_F1
                                    107 	.globl _BREG_F0
                                    108 	.globl _P5_7
                                    109 	.globl _P5_6
                                    110 	.globl _P5_5
                                    111 	.globl _P5_4
                                    112 	.globl _P5_3
                                    113 	.globl _P5_2
                                    114 	.globl _P5_1
                                    115 	.globl _P5_0
                                    116 	.globl _P4_7
                                    117 	.globl _P4_6
                                    118 	.globl _P4_5
                                    119 	.globl _P4_4
                                    120 	.globl _P4_3
                                    121 	.globl _P4_2
                                    122 	.globl _P4_1
                                    123 	.globl _P4_0
                                    124 	.globl _PX0L
                                    125 	.globl _PT0L
                                    126 	.globl _PX1L
                                    127 	.globl _PT1L
                                    128 	.globl _PSL
                                    129 	.globl _PT2L
                                    130 	.globl _PPCL
                                    131 	.globl _EC
                                    132 	.globl _CCF0
                                    133 	.globl _CCF1
                                    134 	.globl _CCF2
                                    135 	.globl _CCF3
                                    136 	.globl _CCF4
                                    137 	.globl _CR
                                    138 	.globl _CF
                                    139 	.globl _TF2
                                    140 	.globl _EXF2
                                    141 	.globl _RCLK
                                    142 	.globl _TCLK
                                    143 	.globl _EXEN2
                                    144 	.globl _TR2
                                    145 	.globl _C_T2
                                    146 	.globl _CP_RL2
                                    147 	.globl _T2CON_7
                                    148 	.globl _T2CON_6
                                    149 	.globl _T2CON_5
                                    150 	.globl _T2CON_4
                                    151 	.globl _T2CON_3
                                    152 	.globl _T2CON_2
                                    153 	.globl _T2CON_1
                                    154 	.globl _T2CON_0
                                    155 	.globl _PT2
                                    156 	.globl _ET2
                                    157 	.globl _TMOD
                                    158 	.globl _TL1
                                    159 	.globl _TL0
                                    160 	.globl _TH1
                                    161 	.globl _TH0
                                    162 	.globl _TCON
                                    163 	.globl _SP
                                    164 	.globl _SCON
                                    165 	.globl _SBUF0
                                    166 	.globl _SBUF
                                    167 	.globl _PSW
                                    168 	.globl _PCON
                                    169 	.globl _P3
                                    170 	.globl _P2
                                    171 	.globl _P1
                                    172 	.globl _P0
                                    173 	.globl _IP
                                    174 	.globl _IE
                                    175 	.globl _DP0L
                                    176 	.globl _DPL
                                    177 	.globl _DP0H
                                    178 	.globl _DPH
                                    179 	.globl _B
                                    180 	.globl _ACC
                                    181 	.globl _EECON
                                    182 	.globl _KBF
                                    183 	.globl _KBE
                                    184 	.globl _KBLS
                                    185 	.globl _BRL
                                    186 	.globl _BDRCON
                                    187 	.globl _T2MOD
                                    188 	.globl _SPDAT
                                    189 	.globl _SPSTA
                                    190 	.globl _SPCON
                                    191 	.globl _SADEN
                                    192 	.globl _SADDR
                                    193 	.globl _WDTPRG
                                    194 	.globl _WDTRST
                                    195 	.globl _P5
                                    196 	.globl _P4
                                    197 	.globl _IPH1
                                    198 	.globl _IPL1
                                    199 	.globl _IPH0
                                    200 	.globl _IPL0
                                    201 	.globl _IEN1
                                    202 	.globl _IEN0
                                    203 	.globl _CMOD
                                    204 	.globl _CL
                                    205 	.globl _CH
                                    206 	.globl _CCON
                                    207 	.globl _CCAPM4
                                    208 	.globl _CCAPM3
                                    209 	.globl _CCAPM2
                                    210 	.globl _CCAPM1
                                    211 	.globl _CCAPM0
                                    212 	.globl _CCAP4L
                                    213 	.globl _CCAP3L
                                    214 	.globl _CCAP2L
                                    215 	.globl _CCAP1L
                                    216 	.globl _CCAP0L
                                    217 	.globl _CCAP4H
                                    218 	.globl _CCAP3H
                                    219 	.globl _CCAP2H
                                    220 	.globl _CCAP1H
                                    221 	.globl _CCAP0H
                                    222 	.globl _CKCON1
                                    223 	.globl _CKCON0
                                    224 	.globl _CKRL
                                    225 	.globl _AUXR1
                                    226 	.globl _AUXR
                                    227 	.globl _TH2
                                    228 	.globl _TL2
                                    229 	.globl _RCAP2H
                                    230 	.globl _RCAP2L
                                    231 	.globl _T2CON
                                    232 	.globl _enc_buffer_init_PARM_2
                                    233 	.globl _enc28j60_set_transmit_pointers_PARM_2
                                    234 	.globl _send_arp_request
                                    235 	.globl _enc_buffer_init
                                    236 	.globl _enc_init
                                    237 ;--------------------------------------------------------
                                    238 ; special function registers
                                    239 ;--------------------------------------------------------
                                    240 	.area RSEG    (ABS,DATA)
      000000                        241 	.org 0x0000
                           0000C8   242 _T2CON	=	0x00c8
                           0000CA   243 _RCAP2L	=	0x00ca
                           0000CB   244 _RCAP2H	=	0x00cb
                           0000CC   245 _TL2	=	0x00cc
                           0000CD   246 _TH2	=	0x00cd
                           00008E   247 _AUXR	=	0x008e
                           0000A2   248 _AUXR1	=	0x00a2
                           000097   249 _CKRL	=	0x0097
                           00008F   250 _CKCON0	=	0x008f
                           0000AF   251 _CKCON1	=	0x00af
                           0000FA   252 _CCAP0H	=	0x00fa
                           0000FB   253 _CCAP1H	=	0x00fb
                           0000FC   254 _CCAP2H	=	0x00fc
                           0000FD   255 _CCAP3H	=	0x00fd
                           0000FE   256 _CCAP4H	=	0x00fe
                           0000EA   257 _CCAP0L	=	0x00ea
                           0000EB   258 _CCAP1L	=	0x00eb
                           0000EC   259 _CCAP2L	=	0x00ec
                           0000ED   260 _CCAP3L	=	0x00ed
                           0000EE   261 _CCAP4L	=	0x00ee
                           0000DA   262 _CCAPM0	=	0x00da
                           0000DB   263 _CCAPM1	=	0x00db
                           0000DC   264 _CCAPM2	=	0x00dc
                           0000DD   265 _CCAPM3	=	0x00dd
                           0000DE   266 _CCAPM4	=	0x00de
                           0000D8   267 _CCON	=	0x00d8
                           0000F9   268 _CH	=	0x00f9
                           0000E9   269 _CL	=	0x00e9
                           0000D9   270 _CMOD	=	0x00d9
                           0000A8   271 _IEN0	=	0x00a8
                           0000B1   272 _IEN1	=	0x00b1
                           0000B8   273 _IPL0	=	0x00b8
                           0000B7   274 _IPH0	=	0x00b7
                           0000B2   275 _IPL1	=	0x00b2
                           0000B3   276 _IPH1	=	0x00b3
                           0000C0   277 _P4	=	0x00c0
                           0000E8   278 _P5	=	0x00e8
                           0000A6   279 _WDTRST	=	0x00a6
                           0000A7   280 _WDTPRG	=	0x00a7
                           0000A9   281 _SADDR	=	0x00a9
                           0000B9   282 _SADEN	=	0x00b9
                           0000C3   283 _SPCON	=	0x00c3
                           0000C4   284 _SPSTA	=	0x00c4
                           0000C5   285 _SPDAT	=	0x00c5
                           0000C9   286 _T2MOD	=	0x00c9
                           00009B   287 _BDRCON	=	0x009b
                           00009A   288 _BRL	=	0x009a
                           00009C   289 _KBLS	=	0x009c
                           00009D   290 _KBE	=	0x009d
                           00009E   291 _KBF	=	0x009e
                           0000D2   292 _EECON	=	0x00d2
                           0000E0   293 _ACC	=	0x00e0
                           0000F0   294 _B	=	0x00f0
                           000083   295 _DPH	=	0x0083
                           000083   296 _DP0H	=	0x0083
                           000082   297 _DPL	=	0x0082
                           000082   298 _DP0L	=	0x0082
                           0000A8   299 _IE	=	0x00a8
                           0000B8   300 _IP	=	0x00b8
                           000080   301 _P0	=	0x0080
                           000090   302 _P1	=	0x0090
                           0000A0   303 _P2	=	0x00a0
                           0000B0   304 _P3	=	0x00b0
                           000087   305 _PCON	=	0x0087
                           0000D0   306 _PSW	=	0x00d0
                           000099   307 _SBUF	=	0x0099
                           000099   308 _SBUF0	=	0x0099
                           000098   309 _SCON	=	0x0098
                           000081   310 _SP	=	0x0081
                           000088   311 _TCON	=	0x0088
                           00008C   312 _TH0	=	0x008c
                           00008D   313 _TH1	=	0x008d
                           00008A   314 _TL0	=	0x008a
                           00008B   315 _TL1	=	0x008b
                           000089   316 _TMOD	=	0x0089
                                    317 ;--------------------------------------------------------
                                    318 ; special function bits
                                    319 ;--------------------------------------------------------
                                    320 	.area RSEG    (ABS,DATA)
      000000                        321 	.org 0x0000
                           0000AD   322 _ET2	=	0x00ad
                           0000BD   323 _PT2	=	0x00bd
                           0000C8   324 _T2CON_0	=	0x00c8
                           0000C9   325 _T2CON_1	=	0x00c9
                           0000CA   326 _T2CON_2	=	0x00ca
                           0000CB   327 _T2CON_3	=	0x00cb
                           0000CC   328 _T2CON_4	=	0x00cc
                           0000CD   329 _T2CON_5	=	0x00cd
                           0000CE   330 _T2CON_6	=	0x00ce
                           0000CF   331 _T2CON_7	=	0x00cf
                           0000C8   332 _CP_RL2	=	0x00c8
                           0000C9   333 _C_T2	=	0x00c9
                           0000CA   334 _TR2	=	0x00ca
                           0000CB   335 _EXEN2	=	0x00cb
                           0000CC   336 _TCLK	=	0x00cc
                           0000CD   337 _RCLK	=	0x00cd
                           0000CE   338 _EXF2	=	0x00ce
                           0000CF   339 _TF2	=	0x00cf
                           0000DF   340 _CF	=	0x00df
                           0000DE   341 _CR	=	0x00de
                           0000DC   342 _CCF4	=	0x00dc
                           0000DB   343 _CCF3	=	0x00db
                           0000DA   344 _CCF2	=	0x00da
                           0000D9   345 _CCF1	=	0x00d9
                           0000D8   346 _CCF0	=	0x00d8
                           0000AE   347 _EC	=	0x00ae
                           0000BE   348 _PPCL	=	0x00be
                           0000BD   349 _PT2L	=	0x00bd
                           0000BC   350 _PSL	=	0x00bc
                           0000BB   351 _PT1L	=	0x00bb
                           0000BA   352 _PX1L	=	0x00ba
                           0000B9   353 _PT0L	=	0x00b9
                           0000B8   354 _PX0L	=	0x00b8
                           0000C0   355 _P4_0	=	0x00c0
                           0000C1   356 _P4_1	=	0x00c1
                           0000C2   357 _P4_2	=	0x00c2
                           0000C3   358 _P4_3	=	0x00c3
                           0000C4   359 _P4_4	=	0x00c4
                           0000C5   360 _P4_5	=	0x00c5
                           0000C6   361 _P4_6	=	0x00c6
                           0000C7   362 _P4_7	=	0x00c7
                           0000E8   363 _P5_0	=	0x00e8
                           0000E9   364 _P5_1	=	0x00e9
                           0000EA   365 _P5_2	=	0x00ea
                           0000EB   366 _P5_3	=	0x00eb
                           0000EC   367 _P5_4	=	0x00ec
                           0000ED   368 _P5_5	=	0x00ed
                           0000EE   369 _P5_6	=	0x00ee
                           0000EF   370 _P5_7	=	0x00ef
                           0000F0   371 _BREG_F0	=	0x00f0
                           0000F1   372 _BREG_F1	=	0x00f1
                           0000F2   373 _BREG_F2	=	0x00f2
                           0000F3   374 _BREG_F3	=	0x00f3
                           0000F4   375 _BREG_F4	=	0x00f4
                           0000F5   376 _BREG_F5	=	0x00f5
                           0000F6   377 _BREG_F6	=	0x00f6
                           0000F7   378 _BREG_F7	=	0x00f7
                           0000A8   379 _EX0	=	0x00a8
                           0000A9   380 _ET0	=	0x00a9
                           0000AA   381 _EX1	=	0x00aa
                           0000AB   382 _ET1	=	0x00ab
                           0000AC   383 _ES	=	0x00ac
                           0000AF   384 _EA	=	0x00af
                           0000B8   385 _PX0	=	0x00b8
                           0000B9   386 _PT0	=	0x00b9
                           0000BA   387 _PX1	=	0x00ba
                           0000BB   388 _PT1	=	0x00bb
                           0000BC   389 _PS	=	0x00bc
                           000080   390 _P0_0	=	0x0080
                           000081   391 _P0_1	=	0x0081
                           000082   392 _P0_2	=	0x0082
                           000083   393 _P0_3	=	0x0083
                           000084   394 _P0_4	=	0x0084
                           000085   395 _P0_5	=	0x0085
                           000086   396 _P0_6	=	0x0086
                           000087   397 _P0_7	=	0x0087
                           000090   398 _P1_0	=	0x0090
                           000091   399 _P1_1	=	0x0091
                           000092   400 _P1_2	=	0x0092
                           000093   401 _P1_3	=	0x0093
                           000094   402 _P1_4	=	0x0094
                           000095   403 _P1_5	=	0x0095
                           000096   404 _P1_6	=	0x0096
                           000097   405 _P1_7	=	0x0097
                           0000A0   406 _P2_0	=	0x00a0
                           0000A1   407 _P2_1	=	0x00a1
                           0000A2   408 _P2_2	=	0x00a2
                           0000A3   409 _P2_3	=	0x00a3
                           0000A4   410 _P2_4	=	0x00a4
                           0000A5   411 _P2_5	=	0x00a5
                           0000A6   412 _P2_6	=	0x00a6
                           0000A7   413 _P2_7	=	0x00a7
                           0000B0   414 _P3_0	=	0x00b0
                           0000B1   415 _P3_1	=	0x00b1
                           0000B2   416 _P3_2	=	0x00b2
                           0000B3   417 _P3_3	=	0x00b3
                           0000B4   418 _P3_4	=	0x00b4
                           0000B5   419 _P3_5	=	0x00b5
                           0000B6   420 _P3_6	=	0x00b6
                           0000B7   421 _P3_7	=	0x00b7
                           0000B0   422 _RXD	=	0x00b0
                           0000B0   423 _RXD0	=	0x00b0
                           0000B1   424 _TXD	=	0x00b1
                           0000B1   425 _TXD0	=	0x00b1
                           0000B2   426 _INT0	=	0x00b2
                           0000B3   427 _INT1	=	0x00b3
                           0000B4   428 _T0	=	0x00b4
                           0000B5   429 _T1	=	0x00b5
                           0000B6   430 _WR	=	0x00b6
                           0000B7   431 _RD	=	0x00b7
                           0000D0   432 _P	=	0x00d0
                           0000D1   433 _F1	=	0x00d1
                           0000D2   434 _OV	=	0x00d2
                           0000D3   435 _RS0	=	0x00d3
                           0000D4   436 _RS1	=	0x00d4
                           0000D5   437 _F0	=	0x00d5
                           0000D6   438 _AC	=	0x00d6
                           0000D7   439 _CY	=	0x00d7
                           000098   440 _RI	=	0x0098
                           000099   441 _TI	=	0x0099
                           00009A   442 _RB8	=	0x009a
                           00009B   443 _TB8	=	0x009b
                           00009C   444 _REN	=	0x009c
                           00009D   445 _SM2	=	0x009d
                           00009E   446 _SM1	=	0x009e
                           00009F   447 _SM0	=	0x009f
                           000088   448 _IT0	=	0x0088
                           000089   449 _IE0	=	0x0089
                           00008A   450 _IT1	=	0x008a
                           00008B   451 _IE1	=	0x008b
                           00008C   452 _TR0	=	0x008c
                           00008D   453 _TF0	=	0x008d
                           00008E   454 _TR1	=	0x008e
                           00008F   455 _TF1	=	0x008f
                                    456 ;--------------------------------------------------------
                                    457 ; overlayable register banks
                                    458 ;--------------------------------------------------------
                                    459 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        460 	.ds 8
                                    461 ;--------------------------------------------------------
                                    462 ; overlayable bit register bank
                                    463 ;--------------------------------------------------------
                                    464 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        465 bits:
      000000                        466 	.ds 1
                           008000   467 	b0 = bits[0]
                           008100   468 	b1 = bits[1]
                           008200   469 	b2 = bits[2]
                           008300   470 	b3 = bits[3]
                           008400   471 	b4 = bits[4]
                           008500   472 	b5 = bits[5]
                           008600   473 	b6 = bits[6]
                           008700   474 	b7 = bits[7]
                                    475 ;--------------------------------------------------------
                                    476 ; internal ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area DSEG    (DATA)
      000000                        479 _enc_init_sloc0_1_0:
      000000                        480 	.ds 3
      000003                        481 _enc_init_sloc1_1_0:
      000003                        482 	.ds 3
      000006                        483 _enc_init_sloc2_1_0:
      000006                        484 	.ds 3
      000009                        485 _enc_init_sloc3_1_0:
      000009                        486 	.ds 3
                                    487 ;--------------------------------------------------------
                                    488 ; overlayable items in internal ram
                                    489 ;--------------------------------------------------------
                                    490 ;--------------------------------------------------------
                                    491 ; indirectly addressable internal ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area ISEG    (DATA)
                                    494 ;--------------------------------------------------------
                                    495 ; absolute internal ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area IABS    (ABS,DATA)
                                    498 	.area IABS    (ABS,DATA)
                                    499 ;--------------------------------------------------------
                                    500 ; bit data
                                    501 ;--------------------------------------------------------
                                    502 	.area BSEG    (BIT)
      000000                        503 _enc28j60_transmission_successful_sloc0_1_0:
      000000                        504 	.ds 1
                                    505 ;--------------------------------------------------------
                                    506 ; paged external ram data
                                    507 ;--------------------------------------------------------
                                    508 	.area PSEG    (PAG,XDATA)
                                    509 ;--------------------------------------------------------
                                    510 ; uninitialized external ram data
                                    511 ;--------------------------------------------------------
                                    512 	.area XSEG    (XDATA)
      000000                        513 _delay_ms_ms_10000_73:
      000000                        514 	.ds 2
      000002                        515 _delay_ms_i_20000_75:
      000002                        516 	.ds 4
      000006                        517 _enc28j60_set_transmit_pointers_PARM_2:
      000006                        518 	.ds 2
      000008                        519 _enc28j60_set_transmit_pointers_start_address_10000_79:
      000008                        520 	.ds 2
      00000A                        521 _wait_for_transmission_complete_timeout_ms_10000_81:
      00000A                        522 	.ds 2
      00000C                        523 _send_arp_request_source_mac_10000_87:
      00000C                        524 	.ds 6
      000012                        525 _send_arp_request_dest_mac_10000_87:
      000012                        526 	.ds 6
      000018                        527 _send_arp_request_source_ip_10000_87:
      000018                        528 	.ds 4
      00001C                        529 _send_arp_request_target_ip_10000_87:
      00001C                        530 	.ds 4
      000020                        531 _send_arp_request_arp_packet_10000_87:
      000020                        532 	.ds 43
      00004B                        533 _enc_buffer_init_PARM_2:
      00004B                        534 	.ds 2
      00004D                        535 _enc_buffer_init_start_address_10000_107:
      00004D                        536 	.ds 2
      00004F                        537 _enc_init_mac_10000_110:
      00004F                        538 	.ds 3
                                    539 ;--------------------------------------------------------
                                    540 ; absolute external ram data
                                    541 ;--------------------------------------------------------
                                    542 	.area XABS    (ABS,XDATA)
                                    543 ;--------------------------------------------------------
                                    544 ; initialized external ram data
                                    545 ;--------------------------------------------------------
                                    546 	.area XISEG   (XDATA)
                                    547 	.area HOME    (CODE)
                                    548 	.area GSINIT0 (CODE)
                                    549 	.area GSINIT1 (CODE)
                                    550 	.area GSINIT2 (CODE)
                                    551 	.area GSINIT3 (CODE)
                                    552 	.area GSINIT4 (CODE)
                                    553 	.area GSINIT5 (CODE)
                                    554 	.area GSINIT  (CODE)
                                    555 	.area GSFINAL (CODE)
                                    556 	.area CSEG    (CODE)
                                    557 ;--------------------------------------------------------
                                    558 ; global & static initialisations
                                    559 ;--------------------------------------------------------
                                    560 	.area HOME    (CODE)
                                    561 	.area GSINIT  (CODE)
                                    562 	.area GSFINAL (CODE)
                                    563 	.area GSINIT  (CODE)
                                    564 ;--------------------------------------------------------
                                    565 ; Home
                                    566 ;--------------------------------------------------------
                                    567 	.area HOME    (CODE)
                                    568 	.area HOME    (CODE)
                                    569 ;--------------------------------------------------------
                                    570 ; code
                                    571 ;--------------------------------------------------------
                                    572 	.area CSEG    (CODE)
                                    573 ;------------------------------------------------------------
                                    574 ;Allocation info for local variables in function 'delay_ms'
                                    575 ;------------------------------------------------------------
                                    576 ;ms                        Allocated with name '_delay_ms_ms_10000_73'
                                    577 ;i                         Allocated with name '_delay_ms_i_20000_75'
                                    578 ;------------------------------------------------------------
                                    579 ;	Eth.c:48: void delay_ms(uint16_t ms)
                                    580 ;	-----------------------------------------
                                    581 ;	 function delay_ms
                                    582 ;	-----------------------------------------
      000000                        583 _delay_ms:
                           000007   584 	ar7 = 0x07
                           000006   585 	ar6 = 0x06
                           000005   586 	ar5 = 0x05
                           000004   587 	ar4 = 0x04
                           000003   588 	ar3 = 0x03
                           000002   589 	ar2 = 0x02
                           000001   590 	ar1 = 0x01
                           000000   591 	ar0 = 0x00
      000000 AF 83            [24]  592 	mov	r7,dph
      000002 E5 82            [12]  593 	mov	a,dpl
      000004 90r00r00         [24]  594 	mov	dptr,#_delay_ms_ms_10000_73
      000007 F0               [24]  595 	movx	@dptr,a
      000008 EF               [12]  596 	mov	a,r7
      000009 A3               [24]  597 	inc	dptr
      00000A F0               [24]  598 	movx	@dptr,a
                                    599 ;	Eth.c:50: for (volatile uint32_t i = 0; i < ms * 1000; i++)
      00000B 90r00r02         [24]  600 	mov	dptr,#_delay_ms_i_20000_75
      00000E E4               [12]  601 	clr	a
      00000F F0               [24]  602 	movx	@dptr,a
      000010 A3               [24]  603 	inc	dptr
      000011 F0               [24]  604 	movx	@dptr,a
      000012 A3               [24]  605 	inc	dptr
      000013 F0               [24]  606 	movx	@dptr,a
      000014 A3               [24]  607 	inc	dptr
      000015 F0               [24]  608 	movx	@dptr,a
      000016 90r00r00         [24]  609 	mov	dptr,#_delay_ms_ms_10000_73
      000019 E0               [24]  610 	movx	a,@dptr
      00001A FE               [12]  611 	mov	r6,a
      00001B A3               [24]  612 	inc	dptr
      00001C E0               [24]  613 	movx	a,@dptr
      00001D FF               [12]  614 	mov	r7,a
      00001E                        615 00103$:
      00001E 90r00r00         [24]  616 	mov	dptr,#__mulint_PARM_2
      000021 EE               [12]  617 	mov	a,r6
      000022 F0               [24]  618 	movx	@dptr,a
      000023 EF               [12]  619 	mov	a,r7
      000024 A3               [24]  620 	inc	dptr
      000025 F0               [24]  621 	movx	@dptr,a
      000026 90 03 E8         [24]  622 	mov	dptr,#0x03e8
      000029 C0 07            [24]  623 	push	ar7
      00002B C0 06            [24]  624 	push	ar6
      00002D 12r00r00         [24]  625 	lcall	__mulint
      000030 AC 82            [24]  626 	mov	r4, dpl
      000032 AD 83            [24]  627 	mov	r5, dph
      000034 D0 06            [24]  628 	pop	ar6
      000036 D0 07            [24]  629 	pop	ar7
      000038 90r00r02         [24]  630 	mov	dptr,#_delay_ms_i_20000_75
      00003B E0               [24]  631 	movx	a,@dptr
      00003C F8               [12]  632 	mov	r0,a
      00003D A3               [24]  633 	inc	dptr
      00003E E0               [24]  634 	movx	a,@dptr
      00003F F9               [12]  635 	mov	r1,a
      000040 A3               [24]  636 	inc	dptr
      000041 E0               [24]  637 	movx	a,@dptr
      000042 FA               [12]  638 	mov	r2,a
      000043 A3               [24]  639 	inc	dptr
      000044 E0               [24]  640 	movx	a,@dptr
      000045 FB               [12]  641 	mov	r3,a
      000046 C0 06            [24]  642 	push	ar6
      000048 C0 07            [24]  643 	push	ar7
      00004A 7E 00            [12]  644 	mov	r6,#0x00
      00004C 7F 00            [12]  645 	mov	r7,#0x00
      00004E C3               [12]  646 	clr	c
      00004F E8               [12]  647 	mov	a,r0
      000050 9C               [12]  648 	subb	a,r4
      000051 E9               [12]  649 	mov	a,r1
      000052 9D               [12]  650 	subb	a,r5
      000053 EA               [12]  651 	mov	a,r2
      000054 9E               [12]  652 	subb	a,r6
      000055 EB               [12]  653 	mov	a,r3
      000056 9F               [12]  654 	subb	a,r7
      000057 D0 07            [24]  655 	pop	ar7
      000059 D0 06            [24]  656 	pop	ar6
      00005B 50 23            [24]  657 	jnc	00105$
      00005D 90r00r02         [24]  658 	mov	dptr,#_delay_ms_i_20000_75
      000060 E0               [24]  659 	movx	a,@dptr
      000061 FA               [12]  660 	mov	r2,a
      000062 A3               [24]  661 	inc	dptr
      000063 E0               [24]  662 	movx	a,@dptr
      000064 FB               [12]  663 	mov	r3,a
      000065 A3               [24]  664 	inc	dptr
      000066 E0               [24]  665 	movx	a,@dptr
      000067 FC               [12]  666 	mov	r4,a
      000068 A3               [24]  667 	inc	dptr
      000069 E0               [24]  668 	movx	a,@dptr
      00006A FD               [12]  669 	mov	r5,a
      00006B 90r00r02         [24]  670 	mov	dptr,#_delay_ms_i_20000_75
      00006E 74 01            [12]  671 	mov	a,#0x01
      000070 2A               [12]  672 	add	a, r2
      000071 F0               [24]  673 	movx	@dptr,a
      000072 E4               [12]  674 	clr	a
      000073 3B               [12]  675 	addc	a, r3
      000074 A3               [24]  676 	inc	dptr
      000075 F0               [24]  677 	movx	@dptr,a
      000076 E4               [12]  678 	clr	a
      000077 3C               [12]  679 	addc	a, r4
      000078 A3               [24]  680 	inc	dptr
      000079 F0               [24]  681 	movx	@dptr,a
      00007A E4               [12]  682 	clr	a
      00007B 3D               [12]  683 	addc	a, r5
      00007C A3               [24]  684 	inc	dptr
      00007D F0               [24]  685 	movx	@dptr,a
      00007E 80 9E            [24]  686 	sjmp	00103$
      000080                        687 00105$:
                                    688 ;	Eth.c:54: }
      000080 22               [24]  689 	ret
                                    690 ;------------------------------------------------------------
                                    691 ;Allocation info for local variables in function 'enc28j60_start_transmission'
                                    692 ;------------------------------------------------------------
                                    693 ;econ1                     Allocated with name '_enc28j60_start_transmission_econ1_10000_78'
                                    694 ;------------------------------------------------------------
                                    695 ;	Eth.c:56: void enc28j60_start_transmission(void)
                                    696 ;	-----------------------------------------
                                    697 ;	 function enc28j60_start_transmission
                                    698 ;	-----------------------------------------
      000081                        699 _enc28j60_start_transmission:
                                    700 ;	Eth.c:58: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      000081 90r00r00         [24]  701 	mov	dptr,#_mac_spi_read_PARM_2
      000084 E4               [12]  702 	clr	a
      000085 F0               [24]  703 	movx	@dptr,a
      000086 75 82 1F         [24]  704 	mov	dpl, #0x1f
      000089 12r00r00         [24]  705 	lcall	_mac_spi_read
      00008C E5 82            [12]  706 	mov	a, dpl
                                    707 ;	Eth.c:59: econ1 |= 0x08; // Set TXRTS (bit 3)
      00008E 44 08            [12]  708 	orl	a,#0x08
      000090 FF               [12]  709 	mov	r7,a
                                    710 ;	Eth.c:60: spi_control_write(0, 0x1F, econ1); // Write back to ECON1
      000091 90r00r00         [24]  711 	mov	dptr,#_spi_control_write_PARM_2
      000094 74 1F            [12]  712 	mov	a,#0x1f
      000096 F0               [24]  713 	movx	@dptr,a
      000097 90r00r00         [24]  714 	mov	dptr,#_spi_control_write_PARM_3
      00009A EF               [12]  715 	mov	a,r7
      00009B F0               [24]  716 	movx	@dptr,a
      00009C 75 82 00         [24]  717 	mov	dpl, #0x00
                                    718 ;	Eth.c:61: }
      00009F 02r00r00         [24]  719 	ljmp	_spi_control_write
                                    720 ;------------------------------------------------------------
                                    721 ;Allocation info for local variables in function 'enc28j60_set_transmit_pointers'
                                    722 ;------------------------------------------------------------
                                    723 ;end_address               Allocated with name '_enc28j60_set_transmit_pointers_PARM_2'
                                    724 ;start_address             Allocated with name '_enc28j60_set_transmit_pointers_start_address_10000_79'
                                    725 ;------------------------------------------------------------
                                    726 ;	Eth.c:64: void enc28j60_set_transmit_pointers(uint16_t start_address, uint16_t end_address)
                                    727 ;	-----------------------------------------
                                    728 ;	 function enc28j60_set_transmit_pointers
                                    729 ;	-----------------------------------------
      0000A2                        730 _enc28j60_set_transmit_pointers:
      0000A2 AF 83            [24]  731 	mov	r7,dph
      0000A4 E5 82            [12]  732 	mov	a,dpl
      0000A6 90r00r08         [24]  733 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_79
      0000A9 F0               [24]  734 	movx	@dptr,a
      0000AA EF               [12]  735 	mov	a,r7
      0000AB A3               [24]  736 	inc	dptr
      0000AC F0               [24]  737 	movx	@dptr,a
                                    738 ;	Eth.c:67: spi_control_write(0, 0x04, (uint8_t)(start_address & 0xFF)); // Low byte
      0000AD 90r00r08         [24]  739 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_79
      0000B0 E0               [24]  740 	movx	a,@dptr
      0000B1 FE               [12]  741 	mov	r6,a
      0000B2 A3               [24]  742 	inc	dptr
      0000B3 E0               [24]  743 	movx	a,@dptr
      0000B4 FF               [12]  744 	mov	r7,a
      0000B5 8E 05            [24]  745 	mov	ar5,r6
      0000B7 90r00r00         [24]  746 	mov	dptr,#_spi_control_write_PARM_2
      0000BA 74 04            [12]  747 	mov	a,#0x04
      0000BC F0               [24]  748 	movx	@dptr,a
      0000BD 90r00r00         [24]  749 	mov	dptr,#_spi_control_write_PARM_3
      0000C0 ED               [12]  750 	mov	a,r5
      0000C1 F0               [24]  751 	movx	@dptr,a
      0000C2 75 82 00         [24]  752 	mov	dpl, #0x00
      0000C5 C0 07            [24]  753 	push	ar7
      0000C7 C0 06            [24]  754 	push	ar6
      0000C9 12r00r00         [24]  755 	lcall	_spi_control_write
      0000CC D0 06            [24]  756 	pop	ar6
      0000CE D0 07            [24]  757 	pop	ar7
                                    758 ;	Eth.c:68: spi_control_write(0, 0x05, (uint8_t)((start_address >> 8) & 0xFF)); // High byte
      0000D0 8F 06            [24]  759 	mov	ar6,r7
      0000D2 90r00r00         [24]  760 	mov	dptr,#_spi_control_write_PARM_2
      0000D5 74 05            [12]  761 	mov	a,#0x05
      0000D7 F0               [24]  762 	movx	@dptr,a
      0000D8 90r00r00         [24]  763 	mov	dptr,#_spi_control_write_PARM_3
      0000DB EE               [12]  764 	mov	a,r6
      0000DC F0               [24]  765 	movx	@dptr,a
      0000DD 75 82 00         [24]  766 	mov	dpl, #0x00
      0000E0 12r00r00         [24]  767 	lcall	_spi_control_write
                                    768 ;	Eth.c:71: spi_control_write(0, 0x06, (uint8_t)(end_address & 0xFF)); // Low byte
      0000E3 90r00r06         [24]  769 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      0000E6 E0               [24]  770 	movx	a,@dptr
      0000E7 FE               [12]  771 	mov	r6,a
      0000E8 A3               [24]  772 	inc	dptr
      0000E9 E0               [24]  773 	movx	a,@dptr
      0000EA FF               [12]  774 	mov	r7,a
      0000EB 8E 05            [24]  775 	mov	ar5,r6
      0000ED 90r00r00         [24]  776 	mov	dptr,#_spi_control_write_PARM_2
      0000F0 74 06            [12]  777 	mov	a,#0x06
      0000F2 F0               [24]  778 	movx	@dptr,a
      0000F3 90r00r00         [24]  779 	mov	dptr,#_spi_control_write_PARM_3
      0000F6 ED               [12]  780 	mov	a,r5
      0000F7 F0               [24]  781 	movx	@dptr,a
      0000F8 75 82 00         [24]  782 	mov	dpl, #0x00
      0000FB C0 07            [24]  783 	push	ar7
      0000FD C0 06            [24]  784 	push	ar6
      0000FF 12r00r00         [24]  785 	lcall	_spi_control_write
      000102 D0 06            [24]  786 	pop	ar6
      000104 D0 07            [24]  787 	pop	ar7
                                    788 ;	Eth.c:72: spi_control_write(0, 0x07, (uint8_t)((end_address >> 8) & 0xFF)); // High byte
      000106 8F 06            [24]  789 	mov	ar6,r7
      000108 90r00r00         [24]  790 	mov	dptr,#_spi_control_write_PARM_2
      00010B 74 07            [12]  791 	mov	a,#0x07
      00010D F0               [24]  792 	movx	@dptr,a
      00010E 90r00r00         [24]  793 	mov	dptr,#_spi_control_write_PARM_3
      000111 EE               [12]  794 	mov	a,r6
      000112 F0               [24]  795 	movx	@dptr,a
      000113 75 82 00         [24]  796 	mov	dpl, #0x00
                                    797 ;	Eth.c:73: }
      000116 02r00r00         [24]  798 	ljmp	_spi_control_write
                                    799 ;------------------------------------------------------------
                                    800 ;Allocation info for local variables in function 'wait_for_transmission_complete'
                                    801 ;------------------------------------------------------------
                                    802 ;timeout_ms                Allocated with name '_wait_for_transmission_complete_timeout_ms_10000_81'
                                    803 ;elapsed                   Allocated with name '_wait_for_transmission_complete_elapsed_10000_82'
                                    804 ;econ1                     Allocated with name '_wait_for_transmission_complete_econ1_20000_83'
                                    805 ;------------------------------------------------------------
                                    806 ;	Eth.c:75: bool wait_for_transmission_complete(uint16_t timeout_ms)
                                    807 ;	-----------------------------------------
                                    808 ;	 function wait_for_transmission_complete
                                    809 ;	-----------------------------------------
      000119                        810 _wait_for_transmission_complete:
      000119 AF 83            [24]  811 	mov	r7,dph
      00011B E5 82            [12]  812 	mov	a,dpl
      00011D 90r00r0A         [24]  813 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_81
      000120 F0               [24]  814 	movx	@dptr,a
      000121 EF               [12]  815 	mov	a,r7
      000122 A3               [24]  816 	inc	dptr
      000123 F0               [24]  817 	movx	@dptr,a
                                    818 ;	Eth.c:79: while (elapsed < timeout_ms) {
      000124 90r00r0A         [24]  819 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_81
      000127 E0               [24]  820 	movx	a,@dptr
      000128 FE               [12]  821 	mov	r6,a
      000129 A3               [24]  822 	inc	dptr
      00012A E0               [24]  823 	movx	a,@dptr
      00012B FF               [12]  824 	mov	r7,a
      00012C 7C 00            [12]  825 	mov	r4,#0x00
      00012E 7D 00            [12]  826 	mov	r5,#0x00
      000130                        827 00103$:
      000130 C3               [12]  828 	clr	c
      000131 EC               [12]  829 	mov	a,r4
      000132 9E               [12]  830 	subb	a,r6
      000133 ED               [12]  831 	mov	a,r5
      000134 9F               [12]  832 	subb	a,r7
      000135 50 41            [24]  833 	jnc	00105$
                                    834 ;	Eth.c:80: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      000137 90r00r00         [24]  835 	mov	dptr,#_mac_spi_read_PARM_2
      00013A E4               [12]  836 	clr	a
      00013B F0               [24]  837 	movx	@dptr,a
      00013C 75 82 1F         [24]  838 	mov	dpl, #0x1f
      00013F C0 07            [24]  839 	push	ar7
      000141 C0 06            [24]  840 	push	ar6
      000143 C0 05            [24]  841 	push	ar5
      000145 C0 04            [24]  842 	push	ar4
      000147 12r00r00         [24]  843 	lcall	_mac_spi_read
      00014A E5 82            [12]  844 	mov	a, dpl
      00014C D0 04            [24]  845 	pop	ar4
      00014E D0 05            [24]  846 	pop	ar5
      000150 D0 06            [24]  847 	pop	ar6
      000152 D0 07            [24]  848 	pop	ar7
                                    849 ;	Eth.c:81: if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
      000154 20 E3 04         [24]  850 	jb	acc.3,00102$
                                    851 ;	Eth.c:82: return true;  // Transmission completed
      000157 75 82 01         [24]  852 	mov	dpl, #0x01
      00015A 22               [24]  853 	ret
      00015B                        854 00102$:
                                    855 ;	Eth.c:85: delay_ms(1);  // Wait 1 ms
      00015B 90 00 01         [24]  856 	mov	dptr,#0x0001
      00015E C0 07            [24]  857 	push	ar7
      000160 C0 06            [24]  858 	push	ar6
      000162 C0 05            [24]  859 	push	ar5
      000164 C0 04            [24]  860 	push	ar4
      000166 12r00r00         [24]  861 	lcall	_delay_ms
      000169 D0 04            [24]  862 	pop	ar4
      00016B D0 05            [24]  863 	pop	ar5
      00016D D0 06            [24]  864 	pop	ar6
      00016F D0 07            [24]  865 	pop	ar7
                                    866 ;	Eth.c:86: elapsed++;
      000171 0C               [12]  867 	inc	r4
      000172 BC 00 BB         [24]  868 	cjne	r4,#0x00,00103$
      000175 0D               [12]  869 	inc	r5
      000176 80 B8            [24]  870 	sjmp	00103$
      000178                        871 00105$:
                                    872 ;	Eth.c:89: return false;  // Timed out
      000178 75 82 00         [24]  873 	mov	dpl, #0x00
                                    874 ;	Eth.c:90: }
      00017B 22               [24]  875 	ret
                                    876 ;------------------------------------------------------------
                                    877 ;Allocation info for local variables in function 'enc28j60_transmission_successful'
                                    878 ;------------------------------------------------------------
                                    879 ;estat                     Allocated with name '_enc28j60_transmission_successful_estat_10000_85'
                                    880 ;------------------------------------------------------------
                                    881 ;	Eth.c:92: bool enc28j60_transmission_successful()
                                    882 ;	-----------------------------------------
                                    883 ;	 function enc28j60_transmission_successful
                                    884 ;	-----------------------------------------
      00017C                        885 _enc28j60_transmission_successful:
                                    886 ;	Eth.c:94: uint8_t estat = mac_spi_read(0x1D, 0); // Read ESTAT
      00017C 90r00r00         [24]  887 	mov	dptr,#_mac_spi_read_PARM_2
      00017F E4               [12]  888 	clr	a
      000180 F0               [24]  889 	movx	@dptr,a
      000181 75 82 1D         [24]  890 	mov	dpl, #0x1d
      000184 12r00r00         [24]  891 	lcall	_mac_spi_read
                                    892 ;	Eth.c:95: return !(estat & 0x02); // Check if TXABRT (bit 1) is not set
      000187 E5 82            [12]  893 	mov	a,dpl
      000189 03               [12]  894 	rr	a
      00018A 54 01            [12]  895 	anl	a,#0x01
      00018C B4 01 00         [24]  896 	cjne	a,#0x01,00103$
      00018F                        897 00103$:
      00018F 92*00            [24]  898 	mov  _enc28j60_transmission_successful_sloc0_1_0,c
      000191 E4               [12]  899 	clr	a
      000192 33               [12]  900 	rlc	a
      000193 F5 82            [12]  901 	mov	dpl, a
                                    902 ;	Eth.c:96: }
      000195 22               [24]  903 	ret
                                    904 ;------------------------------------------------------------
                                    905 ;Allocation info for local variables in function 'send_arp_request'
                                    906 ;------------------------------------------------------------
                                    907 ;source_mac                Allocated with name '_send_arp_request_source_mac_10000_87'
                                    908 ;dest_mac                  Allocated with name '_send_arp_request_dest_mac_10000_87'
                                    909 ;source_ip                 Allocated with name '_send_arp_request_source_ip_10000_87'
                                    910 ;target_ip                 Allocated with name '_send_arp_request_target_ip_10000_87'
                                    911 ;arp_packet                Allocated with name '_send_arp_request_arp_packet_10000_87'
                                    912 ;i                         Allocated with name '_send_arp_request_i_20000_88'
                                    913 ;i                         Allocated with name '_send_arp_request_i_20000_90'
                                    914 ;i                         Allocated with name '_send_arp_request_i_20000_92'
                                    915 ;i                         Allocated with name '_send_arp_request_i_20000_94'
                                    916 ;i                         Allocated with name '_send_arp_request_i_20000_96'
                                    917 ;frame_size                Allocated with name '_send_arp_request_frame_size_10001_98'
                                    918 ;start_address             Allocated with name '_send_arp_request_start_address_10001_98'
                                    919 ;end_address               Allocated with name '_send_arp_request_end_address_10002_100'
                                    920 ;------------------------------------------------------------
                                    921 ;	Eth.c:98: void send_arp_request(void)
                                    922 ;	-----------------------------------------
                                    923 ;	 function send_arp_request
                                    924 ;	-----------------------------------------
      000196                        925 _send_arp_request:
                                    926 ;	Eth.c:102: uint8_t source_mac[6] = {0x02, 0x11, 0x22, 0x33, 0x44, 0x55};  // ENC28J60 MAC address
      000196 90r00r0C         [24]  927 	mov	dptr,#_send_arp_request_source_mac_10000_87
      000199 74 02            [12]  928 	mov	a,#0x02
      00019B F0               [24]  929 	movx	@dptr,a
      00019C 90r00r0D         [24]  930 	mov	dptr,#(_send_arp_request_source_mac_10000_87 + 0x0001)
      00019F 74 11            [12]  931 	mov	a,#0x11
      0001A1 F0               [24]  932 	movx	@dptr,a
      0001A2 90r00r0E         [24]  933 	mov	dptr,#(_send_arp_request_source_mac_10000_87 + 0x0002)
      0001A5 23               [12]  934 	rl	a
      0001A6 F0               [24]  935 	movx	@dptr,a
      0001A7 90r00r0F         [24]  936 	mov	dptr,#(_send_arp_request_source_mac_10000_87 + 0x0003)
      0001AA 74 33            [12]  937 	mov	a,#0x33
      0001AC F0               [24]  938 	movx	@dptr,a
      0001AD 90r00r10         [24]  939 	mov	dptr,#(_send_arp_request_source_mac_10000_87 + 0x0004)
      0001B0 74 44            [12]  940 	mov	a,#0x44
      0001B2 F0               [24]  941 	movx	@dptr,a
      0001B3 90r00r11         [24]  942 	mov	dptr,#(_send_arp_request_source_mac_10000_87 + 0x0005)
      0001B6 74 55            [12]  943 	mov	a,#0x55
      0001B8 F0               [24]  944 	movx	@dptr,a
                                    945 ;	Eth.c:103: uint8_t dest_mac[6] = {0xF8, 0x75, 0xA4, 0x8C, 0x41, 0x31};  // Target PC MAC address
      0001B9 90r00r12         [24]  946 	mov	dptr,#_send_arp_request_dest_mac_10000_87
      0001BC 74 F8            [12]  947 	mov	a,#0xf8
      0001BE F0               [24]  948 	movx	@dptr,a
      0001BF 90r00r13         [24]  949 	mov	dptr,#(_send_arp_request_dest_mac_10000_87 + 0x0001)
      0001C2 74 75            [12]  950 	mov	a,#0x75
      0001C4 F0               [24]  951 	movx	@dptr,a
      0001C5 90r00r14         [24]  952 	mov	dptr,#(_send_arp_request_dest_mac_10000_87 + 0x0002)
      0001C8 74 A4            [12]  953 	mov	a,#0xa4
      0001CA F0               [24]  954 	movx	@dptr,a
      0001CB 90r00r15         [24]  955 	mov	dptr,#(_send_arp_request_dest_mac_10000_87 + 0x0003)
      0001CE 74 8C            [12]  956 	mov	a,#0x8c
      0001D0 F0               [24]  957 	movx	@dptr,a
      0001D1 90r00r16         [24]  958 	mov	dptr,#(_send_arp_request_dest_mac_10000_87 + 0x0004)
      0001D4 74 41            [12]  959 	mov	a,#0x41
      0001D6 F0               [24]  960 	movx	@dptr,a
      0001D7 90r00r17         [24]  961 	mov	dptr,#(_send_arp_request_dest_mac_10000_87 + 0x0005)
      0001DA 74 31            [12]  962 	mov	a,#0x31
      0001DC F0               [24]  963 	movx	@dptr,a
                                    964 ;	Eth.c:104: uint8_t source_ip[4] = {192, 168, 1, 100};  // ENC28J60 IP address (Example)
      0001DD 90r00r18         [24]  965 	mov	dptr,#_send_arp_request_source_ip_10000_87
      0001E0 74 C0            [12]  966 	mov	a,#0xc0
      0001E2 F0               [24]  967 	movx	@dptr,a
      0001E3 90r00r19         [24]  968 	mov	dptr,#(_send_arp_request_source_ip_10000_87 + 0x0001)
      0001E6 74 A8            [12]  969 	mov	a,#0xa8
      0001E8 F0               [24]  970 	movx	@dptr,a
      0001E9 90r00r1A         [24]  971 	mov	dptr,#(_send_arp_request_source_ip_10000_87 + 0x0002)
      0001EC 74 01            [12]  972 	mov	a,#0x01
      0001EE F0               [24]  973 	movx	@dptr,a
      0001EF 90r00r1B         [24]  974 	mov	dptr,#(_send_arp_request_source_ip_10000_87 + 0x0003)
      0001F2 74 64            [12]  975 	mov	a,#0x64
      0001F4 F0               [24]  976 	movx	@dptr,a
                                    977 ;	Eth.c:105: uint8_t target_ip[4] = {192, 168, 1, 1};  // Target PC IP address
      0001F5 90r00r1C         [24]  978 	mov	dptr,#_send_arp_request_target_ip_10000_87
      0001F8 74 C0            [12]  979 	mov	a,#0xc0
      0001FA F0               [24]  980 	movx	@dptr,a
      0001FB 90r00r1D         [24]  981 	mov	dptr,#(_send_arp_request_target_ip_10000_87 + 0x0001)
      0001FE 74 A8            [12]  982 	mov	a,#0xa8
      000200 F0               [24]  983 	movx	@dptr,a
      000201 90r00r1E         [24]  984 	mov	dptr,#(_send_arp_request_target_ip_10000_87 + 0x0002)
      000204 74 01            [12]  985 	mov	a,#0x01
      000206 F0               [24]  986 	movx	@dptr,a
      000207 90r00r1F         [24]  987 	mov	dptr,#(_send_arp_request_target_ip_10000_87 + 0x0003)
      00020A F0               [24]  988 	movx	@dptr,a
                                    989 ;	Eth.c:109: arp_packet[0] = 0x0E;
      00020B 90r00r20         [24]  990 	mov	dptr,#_send_arp_request_arp_packet_10000_87
      00020E 74 0E            [12]  991 	mov	a,#0x0e
      000210 F0               [24]  992 	movx	@dptr,a
                                    993 ;	Eth.c:117: for (int i = 0; i < 6; i++)
      000211 7E 00            [12]  994 	mov	r6,#0x00
      000213 7F 00            [12]  995 	mov	r7,#0x00
      000215                        996 00115$:
      000215 C3               [12]  997 	clr	c
      000216 EE               [12]  998 	mov	a,r6
      000217 94 06            [12]  999 	subb	a,#0x06
      000219 EF               [12] 1000 	mov	a,r7
      00021A 64 80            [12] 1001 	xrl	a,#0x80
      00021C 94 80            [12] 1002 	subb	a,#0x80
      00021E 50 48            [24] 1003 	jnc	00101$
                                   1004 ;	Eth.c:119: arp_packet[i + 1] = dest_mac[i];  // Destination MAC address
      000220 8E 05            [24] 1005 	mov	ar5,r6
      000222 ED               [12] 1006 	mov	a,r5
      000223 04               [12] 1007 	inc	a
      000224 FC               [12] 1008 	mov	r4,a
      000225 33               [12] 1009 	rlc	a
      000226 95 E0            [12] 1010 	subb	a,acc
      000228 FB               [12] 1011 	mov	r3,a
      000229 EC               [12] 1012 	mov	a,r4
      00022A 24r20            [12] 1013 	add	a, #_send_arp_request_arp_packet_10000_87
      00022C FC               [12] 1014 	mov	r4,a
      00022D EB               [12] 1015 	mov	a,r3
      00022E 34s00            [12] 1016 	addc	a, #(_send_arp_request_arp_packet_10000_87 >> 8)
      000230 FB               [12] 1017 	mov	r3,a
      000231 EE               [12] 1018 	mov	a,r6
      000232 24r12            [12] 1019 	add	a, #_send_arp_request_dest_mac_10000_87
      000234 F5 82            [12] 1020 	mov	dpl,a
      000236 EF               [12] 1021 	mov	a,r7
      000237 34s00            [12] 1022 	addc	a, #(_send_arp_request_dest_mac_10000_87 >> 8)
      000239 F5 83            [12] 1023 	mov	dph,a
      00023B E0               [24] 1024 	movx	a,@dptr
      00023C 8C 82            [24] 1025 	mov	dpl,r4
      00023E 8B 83            [24] 1026 	mov	dph,r3
      000240 F0               [24] 1027 	movx	@dptr,a
                                   1028 ;	Eth.c:120: arp_packet[i + 7] = source_mac[i];  // Source MAC address
      000241 74 07            [12] 1029 	mov	a,#0x07
      000243 2D               [12] 1030 	add	a, r5
      000244 FD               [12] 1031 	mov	r5,a
      000245 33               [12] 1032 	rlc	a
      000246 95 E0            [12] 1033 	subb	a,acc
      000248 FC               [12] 1034 	mov	r4,a
      000249 ED               [12] 1035 	mov	a,r5
      00024A 24r20            [12] 1036 	add	a, #_send_arp_request_arp_packet_10000_87
      00024C FD               [12] 1037 	mov	r5,a
      00024D EC               [12] 1038 	mov	a,r4
      00024E 34s00            [12] 1039 	addc	a, #(_send_arp_request_arp_packet_10000_87 >> 8)
      000250 FC               [12] 1040 	mov	r4,a
      000251 EE               [12] 1041 	mov	a,r6
      000252 24r0C            [12] 1042 	add	a, #_send_arp_request_source_mac_10000_87
      000254 F5 82            [12] 1043 	mov	dpl,a
      000256 EF               [12] 1044 	mov	a,r7
      000257 34s00            [12] 1045 	addc	a, #(_send_arp_request_source_mac_10000_87 >> 8)
      000259 F5 83            [12] 1046 	mov	dph,a
      00025B E0               [24] 1047 	movx	a,@dptr
      00025C 8D 82            [24] 1048 	mov	dpl,r5
      00025E 8C 83            [24] 1049 	mov	dph,r4
      000260 F0               [24] 1050 	movx	@dptr,a
                                   1051 ;	Eth.c:117: for (int i = 0; i < 6; i++)
      000261 0E               [12] 1052 	inc	r6
      000262 BE 00 B0         [24] 1053 	cjne	r6,#0x00,00115$
      000265 0F               [12] 1054 	inc	r7
      000266 80 AD            [24] 1055 	sjmp	00115$
      000268                       1056 00101$:
                                   1057 ;	Eth.c:124: arp_packet[13] = (ETH_TYPE_ARP >> 8) & 0xFF;
      000268 90r00r2D         [24] 1058 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x000d)
      00026B 74 08            [12] 1059 	mov	a,#0x08
      00026D F0               [24] 1060 	movx	@dptr,a
                                   1061 ;	Eth.c:125: arp_packet[14] = ETH_TYPE_ARP & 0xFF;
      00026E 90r00r2E         [24] 1062 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x000e)
      000271 74 06            [12] 1063 	mov	a,#0x06
      000273 F0               [24] 1064 	movx	@dptr,a
                                   1065 ;	Eth.c:129: arp_packet[15] = 0x00;
      000274 90r00r2F         [24] 1066 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x000f)
      000277 E4               [12] 1067 	clr	a
      000278 F0               [24] 1068 	movx	@dptr,a
                                   1069 ;	Eth.c:130: arp_packet[16] = 0x01;
      000279 90r00r30         [24] 1070 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x0010)
      00027C 04               [12] 1071 	inc	a
      00027D F0               [24] 1072 	movx	@dptr,a
                                   1073 ;	Eth.c:133: arp_packet[17] = 0x08;
      00027E 90r00r31         [24] 1074 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x0011)
      000281 74 08            [12] 1075 	mov	a,#0x08
      000283 F0               [24] 1076 	movx	@dptr,a
                                   1077 ;	Eth.c:134: arp_packet[18] = 0x00;
      000284 90r00r32         [24] 1078 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x0012)
      000287 E4               [12] 1079 	clr	a
      000288 F0               [24] 1080 	movx	@dptr,a
                                   1081 ;	Eth.c:137: arp_packet[19] = 0x06;
      000289 90r00r33         [24] 1082 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x0013)
      00028C 74 06            [12] 1083 	mov	a,#0x06
      00028E F0               [24] 1084 	movx	@dptr,a
                                   1085 ;	Eth.c:140: arp_packet[20] = 0x04;
      00028F 90r00r34         [24] 1086 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x0014)
      000292 74 04            [12] 1087 	mov	a,#0x04
      000294 F0               [24] 1088 	movx	@dptr,a
                                   1089 ;	Eth.c:143: arp_packet[21] = 0x00;
      000295 90r00r35         [24] 1090 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x0015)
      000298 E4               [12] 1091 	clr	a
      000299 F0               [24] 1092 	movx	@dptr,a
                                   1093 ;	Eth.c:144: arp_packet[22] = 0x01;
      00029A 90r00r36         [24] 1094 	mov	dptr,#(_send_arp_request_arp_packet_10000_87 + 0x0016)
      00029D 04               [12] 1095 	inc	a
      00029E F0               [24] 1096 	movx	@dptr,a
                                   1097 ;	Eth.c:147: for (int i = 0; i < 6; i++) {
      00029F 7E 00            [12] 1098 	mov	r6,#0x00
      0002A1 7F 00            [12] 1099 	mov	r7,#0x00
      0002A3                       1100 00118$:
      0002A3 C3               [12] 1101 	clr	c
      0002A4 EE               [12] 1102 	mov	a,r6
      0002A5 94 06            [12] 1103 	subb	a,#0x06
      0002A7 EF               [12] 1104 	mov	a,r7
      0002A8 64 80            [12] 1105 	xrl	a,#0x80
      0002AA 94 80            [12] 1106 	subb	a,#0x80
      0002AC 50 29            [24] 1107 	jnc	00102$
                                   1108 ;	Eth.c:148: arp_packet[23 + i] = source_mac[i];
      0002AE 8E 05            [24] 1109 	mov	ar5,r6
      0002B0 74 17            [12] 1110 	mov	a,#0x17
      0002B2 2D               [12] 1111 	add	a, r5
      0002B3 FD               [12] 1112 	mov	r5,a
      0002B4 33               [12] 1113 	rlc	a
      0002B5 95 E0            [12] 1114 	subb	a,acc
      0002B7 FC               [12] 1115 	mov	r4,a
      0002B8 ED               [12] 1116 	mov	a,r5
      0002B9 24r20            [12] 1117 	add	a, #_send_arp_request_arp_packet_10000_87
      0002BB FD               [12] 1118 	mov	r5,a
      0002BC EC               [12] 1119 	mov	a,r4
      0002BD 34s00            [12] 1120 	addc	a, #(_send_arp_request_arp_packet_10000_87 >> 8)
      0002BF FC               [12] 1121 	mov	r4,a
      0002C0 EE               [12] 1122 	mov	a,r6
      0002C1 24r0C            [12] 1123 	add	a, #_send_arp_request_source_mac_10000_87
      0002C3 F5 82            [12] 1124 	mov	dpl,a
      0002C5 EF               [12] 1125 	mov	a,r7
      0002C6 34s00            [12] 1126 	addc	a, #(_send_arp_request_source_mac_10000_87 >> 8)
      0002C8 F5 83            [12] 1127 	mov	dph,a
      0002CA E0               [24] 1128 	movx	a,@dptr
      0002CB 8D 82            [24] 1129 	mov	dpl,r5
      0002CD 8C 83            [24] 1130 	mov	dph,r4
      0002CF F0               [24] 1131 	movx	@dptr,a
                                   1132 ;	Eth.c:147: for (int i = 0; i < 6; i++) {
      0002D0 0E               [12] 1133 	inc	r6
      0002D1 BE 00 CF         [24] 1134 	cjne	r6,#0x00,00118$
      0002D4 0F               [12] 1135 	inc	r7
      0002D5 80 CC            [24] 1136 	sjmp	00118$
      0002D7                       1137 00102$:
                                   1138 ;	Eth.c:152: for (int i = 0; i < 4; i++) {
      0002D7 7E 00            [12] 1139 	mov	r6,#0x00
      0002D9 7F 00            [12] 1140 	mov	r7,#0x00
      0002DB                       1141 00121$:
      0002DB C3               [12] 1142 	clr	c
      0002DC EE               [12] 1143 	mov	a,r6
      0002DD 94 04            [12] 1144 	subb	a,#0x04
      0002DF EF               [12] 1145 	mov	a,r7
      0002E0 64 80            [12] 1146 	xrl	a,#0x80
      0002E2 94 80            [12] 1147 	subb	a,#0x80
      0002E4 50 29            [24] 1148 	jnc	00103$
                                   1149 ;	Eth.c:153: arp_packet[29 + i] = source_ip[i];
      0002E6 8E 05            [24] 1150 	mov	ar5,r6
      0002E8 74 1D            [12] 1151 	mov	a,#0x1d
      0002EA 2D               [12] 1152 	add	a, r5
      0002EB FD               [12] 1153 	mov	r5,a
      0002EC 33               [12] 1154 	rlc	a
      0002ED 95 E0            [12] 1155 	subb	a,acc
      0002EF FC               [12] 1156 	mov	r4,a
      0002F0 ED               [12] 1157 	mov	a,r5
      0002F1 24r20            [12] 1158 	add	a, #_send_arp_request_arp_packet_10000_87
      0002F3 FD               [12] 1159 	mov	r5,a
      0002F4 EC               [12] 1160 	mov	a,r4
      0002F5 34s00            [12] 1161 	addc	a, #(_send_arp_request_arp_packet_10000_87 >> 8)
      0002F7 FC               [12] 1162 	mov	r4,a
      0002F8 EE               [12] 1163 	mov	a,r6
      0002F9 24r18            [12] 1164 	add	a, #_send_arp_request_source_ip_10000_87
      0002FB F5 82            [12] 1165 	mov	dpl,a
      0002FD EF               [12] 1166 	mov	a,r7
      0002FE 34s00            [12] 1167 	addc	a, #(_send_arp_request_source_ip_10000_87 >> 8)
      000300 F5 83            [12] 1168 	mov	dph,a
      000302 E0               [24] 1169 	movx	a,@dptr
      000303 8D 82            [24] 1170 	mov	dpl,r5
      000305 8C 83            [24] 1171 	mov	dph,r4
      000307 F0               [24] 1172 	movx	@dptr,a
                                   1173 ;	Eth.c:152: for (int i = 0; i < 4; i++) {
      000308 0E               [12] 1174 	inc	r6
      000309 BE 00 CF         [24] 1175 	cjne	r6,#0x00,00121$
      00030C 0F               [12] 1176 	inc	r7
      00030D 80 CC            [24] 1177 	sjmp	00121$
      00030F                       1178 00103$:
                                   1179 ;	Eth.c:157: for (int i = 0; i < 6; i++) {
      00030F 7F 00            [12] 1180 	mov	r7,#0x00
      000311                       1181 00124$:
      000311 BF 06 00         [24] 1182 	cjne	r7,#0x06,00215$
      000314                       1183 00215$:
      000314 50 19            [24] 1184 	jnc	00104$
                                   1185 ;	Eth.c:158: arp_packet[33 + i] = 0x00;
      000316 8F 06            [24] 1186 	mov	ar6,r7
      000318 74 21            [12] 1187 	mov	a,#0x21
      00031A 2E               [12] 1188 	add	a, r6
      00031B FE               [12] 1189 	mov	r6,a
      00031C 33               [12] 1190 	rlc	a
      00031D 95 E0            [12] 1191 	subb	a,acc
      00031F FD               [12] 1192 	mov	r5,a
      000320 EE               [12] 1193 	mov	a,r6
      000321 24r20            [12] 1194 	add	a, #_send_arp_request_arp_packet_10000_87
      000323 F5 82            [12] 1195 	mov	dpl,a
      000325 ED               [12] 1196 	mov	a,r5
      000326 34s00            [12] 1197 	addc	a, #(_send_arp_request_arp_packet_10000_87 >> 8)
      000328 F5 83            [12] 1198 	mov	dph,a
      00032A E4               [12] 1199 	clr	a
      00032B F0               [24] 1200 	movx	@dptr,a
                                   1201 ;	Eth.c:157: for (int i = 0; i < 6; i++) {
      00032C 0F               [12] 1202 	inc	r7
      00032D 80 E2            [24] 1203 	sjmp	00124$
      00032F                       1204 00104$:
                                   1205 ;	Eth.c:162: for (int i = 0; i < 4; i++) {
      00032F 7E 00            [12] 1206 	mov	r6,#0x00
      000331 7F 00            [12] 1207 	mov	r7,#0x00
      000333                       1208 00127$:
      000333 C3               [12] 1209 	clr	c
      000334 EE               [12] 1210 	mov	a,r6
      000335 94 04            [12] 1211 	subb	a,#0x04
      000337 EF               [12] 1212 	mov	a,r7
      000338 64 80            [12] 1213 	xrl	a,#0x80
      00033A 94 80            [12] 1214 	subb	a,#0x80
      00033C 50 29            [24] 1215 	jnc	00105$
                                   1216 ;	Eth.c:163: arp_packet[39 + i] = target_ip[i];
      00033E 8E 05            [24] 1217 	mov	ar5,r6
      000340 74 27            [12] 1218 	mov	a,#0x27
      000342 2D               [12] 1219 	add	a, r5
      000343 FD               [12] 1220 	mov	r5,a
      000344 33               [12] 1221 	rlc	a
      000345 95 E0            [12] 1222 	subb	a,acc
      000347 FC               [12] 1223 	mov	r4,a
      000348 ED               [12] 1224 	mov	a,r5
      000349 24r20            [12] 1225 	add	a, #_send_arp_request_arp_packet_10000_87
      00034B FD               [12] 1226 	mov	r5,a
      00034C EC               [12] 1227 	mov	a,r4
      00034D 34s00            [12] 1228 	addc	a, #(_send_arp_request_arp_packet_10000_87 >> 8)
      00034F FC               [12] 1229 	mov	r4,a
      000350 EE               [12] 1230 	mov	a,r6
      000351 24r1C            [12] 1231 	add	a, #_send_arp_request_target_ip_10000_87
      000353 F5 82            [12] 1232 	mov	dpl,a
      000355 EF               [12] 1233 	mov	a,r7
      000356 34s00            [12] 1234 	addc	a, #(_send_arp_request_target_ip_10000_87 >> 8)
      000358 F5 83            [12] 1235 	mov	dph,a
      00035A E0               [24] 1236 	movx	a,@dptr
      00035B 8D 82            [24] 1237 	mov	dpl,r5
      00035D 8C 83            [24] 1238 	mov	dph,r4
      00035F F0               [24] 1239 	movx	@dptr,a
                                   1240 ;	Eth.c:162: for (int i = 0; i < 4; i++) {
      000360 0E               [12] 1241 	inc	r6
      000361 BE 00 CF         [24] 1242 	cjne	r6,#0x00,00127$
      000364 0F               [12] 1243 	inc	r7
      000365 80 CC            [24] 1244 	sjmp	00127$
      000367                       1245 00105$:
                                   1246 ;	Eth.c:176: spi_buffer_write(frame_size, start_address, arp_packet);
      000367 90r00r00         [24] 1247 	mov	dptr,#_spi_buffer_write_PARM_2
      00036A E4               [12] 1248 	clr	a
      00036B F0               [24] 1249 	movx	@dptr,a
      00036C A3               [24] 1250 	inc	dptr
      00036D F0               [24] 1251 	movx	@dptr,a
      00036E 90r00r00         [24] 1252 	mov	dptr,#_spi_buffer_write_PARM_3
      000371 74r20            [12] 1253 	mov	a,#_send_arp_request_arp_packet_10000_87
      000373 F0               [24] 1254 	movx	@dptr,a
      000374 74s00            [12] 1255 	mov	a,#(_send_arp_request_arp_packet_10000_87 >> 8)
      000376 A3               [24] 1256 	inc	dptr
      000377 F0               [24] 1257 	movx	@dptr,a
      000378 E4               [12] 1258 	clr	a
      000379 A3               [24] 1259 	inc	dptr
      00037A F0               [24] 1260 	movx	@dptr,a
      00037B 90 00 2C         [24] 1261 	mov	dptr,#0x002c
      00037E 12r00r00         [24] 1262 	lcall	_spi_buffer_write
                                   1263 ;	Eth.c:179: enc28j60_set_transmit_pointers(start_address, end_address);
      000381 90r00r06         [24] 1264 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      000384 74 2B            [12] 1265 	mov	a,#0x2b
      000386 F0               [24] 1266 	movx	@dptr,a
      000387 E4               [12] 1267 	clr	a
      000388 A3               [24] 1268 	inc	dptr
      000389 F0               [24] 1269 	movx	@dptr,a
      00038A 90 00 00         [24] 1270 	mov	dptr,#0x0000
      00038D 12r00rA2         [24] 1271 	lcall	_enc28j60_set_transmit_pointers
                                   1272 ;	Eth.c:183: enc28j60_start_transmission();
      000390 12r00r81         [24] 1273 	lcall	_enc28j60_start_transmission
                                   1274 ;	Eth.c:186: if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
      000393 90 01 F4         [24] 1275 	mov	dptr,#0x01f4
      000396 12r01r19         [24] 1276 	lcall	_wait_for_transmission_complete
      000399 E5 82            [12] 1277 	mov	a, dpl
      00039B 60 33            [24] 1278 	jz	00112$
                                   1279 ;	Eth.c:188: if (enc28j60_transmission_successful()) {
      00039D 12r01r7C         [24] 1280 	lcall	_enc28j60_transmission_successful
      0003A0 E5 82            [12] 1281 	mov	a, dpl
      0003A2 60 16            [24] 1282 	jz	00109$
                                   1283 ;	Eth.c:189: printf("ARP request sent successfully.\n\r");
      0003A4 74r3B            [12] 1284 	mov	a,#___str_1
      0003A6 C0 E0            [24] 1285 	push	acc
      0003A8 74s00            [12] 1286 	mov	a,#(___str_1 >> 8)
      0003AA C0 E0            [24] 1287 	push	acc
      0003AC 74 80            [12] 1288 	mov	a,#0x80
      0003AE C0 E0            [24] 1289 	push	acc
      0003B0 12r00r00         [24] 1290 	lcall	_printf
      0003B3 15 81            [12] 1291 	dec	sp
      0003B5 15 81            [12] 1292 	dec	sp
      0003B7 15 81            [12] 1293 	dec	sp
      0003B9 22               [24] 1294 	ret
      0003BA                       1295 00109$:
                                   1296 ;	Eth.c:191: printf("ARP transmission failed. Check error flags.\n\r");
      0003BA 74r5C            [12] 1297 	mov	a,#___str_2
      0003BC C0 E0            [24] 1298 	push	acc
      0003BE 74s00            [12] 1299 	mov	a,#(___str_2 >> 8)
      0003C0 C0 E0            [24] 1300 	push	acc
      0003C2 74 80            [12] 1301 	mov	a,#0x80
      0003C4 C0 E0            [24] 1302 	push	acc
      0003C6 12r00r00         [24] 1303 	lcall	_printf
      0003C9 15 81            [12] 1304 	dec	sp
      0003CB 15 81            [12] 1305 	dec	sp
      0003CD 15 81            [12] 1306 	dec	sp
      0003CF 22               [24] 1307 	ret
      0003D0                       1308 00112$:
                                   1309 ;	Eth.c:194: printf("Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
      0003D0 74r8A            [12] 1310 	mov	a,#___str_3
      0003D2 C0 E0            [24] 1311 	push	acc
      0003D4 74s00            [12] 1312 	mov	a,#(___str_3 >> 8)
      0003D6 C0 E0            [24] 1313 	push	acc
      0003D8 74 80            [12] 1314 	mov	a,#0x80
      0003DA C0 E0            [24] 1315 	push	acc
      0003DC 12r00r00         [24] 1316 	lcall	_printf
      0003DF 15 81            [12] 1317 	dec	sp
      0003E1 15 81            [12] 1318 	dec	sp
      0003E3 15 81            [12] 1319 	dec	sp
                                   1320 ;	Eth.c:196: }
      0003E5 22               [24] 1321 	ret
                                   1322 ;------------------------------------------------------------
                                   1323 ;Allocation info for local variables in function 'external_interrupt0_isr'
                                   1324 ;------------------------------------------------------------
                                   1325 ;eir                       Allocated with name '_external_interrupt0_isr_eir_10000_106'
                                   1326 ;------------------------------------------------------------
                                   1327 ;	Eth.c:198: void external_interrupt0_isr(void) __interrupt (0)
                                   1328 ;	-----------------------------------------
                                   1329 ;	 function external_interrupt0_isr
                                   1330 ;	-----------------------------------------
      0003E6                       1331 _external_interrupt0_isr:
      0003E6 C0*00            [24] 1332 	push	bits
      0003E8 C0 E0            [24] 1333 	push	acc
      0003EA C0 F0            [24] 1334 	push	b
      0003EC C0 82            [24] 1335 	push	dpl
      0003EE C0 83            [24] 1336 	push	dph
      0003F0 C0 07            [24] 1337 	push	(0+7)
      0003F2 C0 06            [24] 1338 	push	(0+6)
      0003F4 C0 05            [24] 1339 	push	(0+5)
      0003F6 C0 04            [24] 1340 	push	(0+4)
      0003F8 C0 03            [24] 1341 	push	(0+3)
      0003FA C0 02            [24] 1342 	push	(0+2)
      0003FC C0 01            [24] 1343 	push	(0+1)
      0003FE C0 00            [24] 1344 	push	(0+0)
      000400 C0 D0            [24] 1345 	push	psw
      000402 75 D0 00         [24] 1346 	mov	psw,#0x00
                                   1347 ;	Eth.c:200: uint8_t eir = mac_spi_read(0x1C, 0); // Read EIR register (address 0x1C, bank 0)
      000405 90r00r00         [24] 1348 	mov	dptr,#_mac_spi_read_PARM_2
      000408 E4               [12] 1349 	clr	a
      000409 F0               [24] 1350 	movx	@dptr,a
      00040A 75 82 1C         [24] 1351 	mov	dpl, #0x1c
      00040D 12r00r00         [24] 1352 	lcall	_mac_spi_read
                                   1353 ;	Eth.c:201: printf("Interrrrrrrruuuuuuuuuppppppppttttttt\n\r");
      000410 74rCD            [12] 1354 	mov	a,#___str_4
      000412 C0 E0            [24] 1355 	push	acc
      000414 74s00            [12] 1356 	mov	a,#(___str_4 >> 8)
      000416 C0 E0            [24] 1357 	push	acc
      000418 74 80            [12] 1358 	mov	a,#0x80
      00041A C0 E0            [24] 1359 	push	acc
      00041C 12r00r00         [24] 1360 	lcall	_printf
      00041F 15 81            [12] 1361 	dec	sp
      000421 15 81            [12] 1362 	dec	sp
      000423 15 81            [12] 1363 	dec	sp
                                   1364 ;	Eth.c:205: }
      000425 D0 D0            [24] 1365 	pop	psw
      000427 D0 00            [24] 1366 	pop	(0+0)
      000429 D0 01            [24] 1367 	pop	(0+1)
      00042B D0 02            [24] 1368 	pop	(0+2)
      00042D D0 03            [24] 1369 	pop	(0+3)
      00042F D0 04            [24] 1370 	pop	(0+4)
      000431 D0 05            [24] 1371 	pop	(0+5)
      000433 D0 06            [24] 1372 	pop	(0+6)
      000435 D0 07            [24] 1373 	pop	(0+7)
      000437 D0 83            [24] 1374 	pop	dph
      000439 D0 82            [24] 1375 	pop	dpl
      00043B D0 F0            [24] 1376 	pop	b
      00043D D0 E0            [24] 1377 	pop	acc
      00043F D0*00            [24] 1378 	pop	bits
      000441 32               [24] 1379 	reti
                                   1380 ;------------------------------------------------------------
                                   1381 ;Allocation info for local variables in function 'enc_buffer_init'
                                   1382 ;------------------------------------------------------------
                                   1383 ;end_address               Allocated with name '_enc_buffer_init_PARM_2'
                                   1384 ;start_address             Allocated with name '_enc_buffer_init_start_address_10000_107'
                                   1385 ;------------------------------------------------------------
                                   1386 ;	Eth.c:208: void enc_buffer_init(uint16_t start_address, uint16_t end_address) {
                                   1387 ;	-----------------------------------------
                                   1388 ;	 function enc_buffer_init
                                   1389 ;	-----------------------------------------
      000442                       1390 _enc_buffer_init:
      000442 AF 83            [24] 1391 	mov	r7,dph
      000444 E5 82            [12] 1392 	mov	a,dpl
      000446 90r00r4D         [24] 1393 	mov	dptr,#_enc_buffer_init_start_address_10000_107
      000449 F0               [24] 1394 	movx	@dptr,a
      00044A EF               [12] 1395 	mov	a,r7
      00044B A3               [24] 1396 	inc	dptr
      00044C F0               [24] 1397 	movx	@dptr,a
                                   1398 ;	Eth.c:210: if (start_address > 0x1FFF || end_address > 0x1FFF) {
      00044D 90r00r4D         [24] 1399 	mov	dptr,#_enc_buffer_init_start_address_10000_107
      000450 E0               [24] 1400 	movx	a,@dptr
      000451 FE               [12] 1401 	mov	r6,a
      000452 A3               [24] 1402 	inc	dptr
      000453 E0               [24] 1403 	movx	a,@dptr
      000454 FF               [12] 1404 	mov	r7,a
      000455 C3               [12] 1405 	clr	c
      000456 74 FF            [12] 1406 	mov	a,#0xff
      000458 9E               [12] 1407 	subb	a,r6
      000459 74 1F            [12] 1408 	mov	a,#0x1f
      00045B 9F               [12] 1409 	subb	a,r7
      00045C 40 15            [24] 1410 	jc	00101$
      00045E 90r00r4B         [24] 1411 	mov	dptr,#_enc_buffer_init_PARM_2
      000461 E0               [24] 1412 	movx	a,@dptr
      000462 FC               [12] 1413 	mov	r4,a
      000463 A3               [24] 1414 	inc	dptr
      000464 E0               [24] 1415 	movx	a,@dptr
      000465 FD               [12] 1416 	mov	r5,a
      000466 8C 02            [24] 1417 	mov	ar2,r4
      000468 8D 03            [24] 1418 	mov	ar3,r5
      00046A C3               [12] 1419 	clr	c
      00046B 74 FF            [12] 1420 	mov	a,#0xff
      00046D 9A               [12] 1421 	subb	a,r2
      00046E 74 1F            [12] 1422 	mov	a,#0x1f
      000470 9B               [12] 1423 	subb	a,r3
      000471 50 2A            [24] 1424 	jnc	00102$
      000473                       1425 00101$:
                                   1426 ;	Eth.c:211: printf("\nInvalid Buffer Range: Start 0x%04X, End 0x%04X\n",
      000473 90r00r4B         [24] 1427 	mov	dptr,#_enc_buffer_init_PARM_2
      000476 E0               [24] 1428 	movx	a,@dptr
      000477 C0 E0            [24] 1429 	push	acc
      000479 A3               [24] 1430 	inc	dptr
      00047A E0               [24] 1431 	movx	a,@dptr
      00047B C0 E0            [24] 1432 	push	acc
      00047D 90r00r4D         [24] 1433 	mov	dptr,#_enc_buffer_init_start_address_10000_107
      000480 E0               [24] 1434 	movx	a,@dptr
      000481 C0 E0            [24] 1435 	push	acc
      000483 A3               [24] 1436 	inc	dptr
      000484 E0               [24] 1437 	movx	a,@dptr
      000485 C0 E0            [24] 1438 	push	acc
      000487 74rF4            [12] 1439 	mov	a,#___str_5
      000489 C0 E0            [24] 1440 	push	acc
      00048B 74s00            [12] 1441 	mov	a,#(___str_5 >> 8)
      00048D C0 E0            [24] 1442 	push	acc
      00048F 74 80            [12] 1443 	mov	a,#0x80
      000491 C0 E0            [24] 1444 	push	acc
      000493 12r00r00         [24] 1445 	lcall	_printf
      000496 E5 81            [12] 1446 	mov	a,sp
      000498 24 F9            [12] 1447 	add	a,#0xf9
      00049A F5 81            [12] 1448 	mov	sp,a
                                   1449 ;	Eth.c:213: return;
      00049C 22               [24] 1450 	ret
      00049D                       1451 00102$:
                                   1452 ;	Eth.c:216: start_address &= ~1;  // Align to even address
      00049D 53 06 FE         [24] 1453 	anl	ar6,#0xfe
      0004A0 90r00r4D         [24] 1454 	mov	dptr,#_enc_buffer_init_start_address_10000_107
      0004A3 EE               [12] 1455 	mov	a,r6
      0004A4 F0               [24] 1456 	movx	@dptr,a
      0004A5 EF               [12] 1457 	mov	a,r7
      0004A6 A3               [24] 1458 	inc	dptr
      0004A7 F0               [24] 1459 	movx	@dptr,a
                                   1460 ;	Eth.c:218: spi_control_write(0, 0x00, (uint8_t) (start_address & 0xFF)); // ERDPTL
      0004A8 90r00r4D         [24] 1461 	mov	dptr,#_enc_buffer_init_start_address_10000_107
      0004AB E0               [24] 1462 	movx	a,@dptr
      0004AC FE               [12] 1463 	mov	r6,a
      0004AD A3               [24] 1464 	inc	dptr
      0004AE E0               [24] 1465 	movx	a,@dptr
      0004AF FF               [12] 1466 	mov	r7,a
      0004B0 8E 03            [24] 1467 	mov	ar3,r6
      0004B2 90r00r00         [24] 1468 	mov	dptr,#_spi_control_write_PARM_2
      0004B5 E4               [12] 1469 	clr	a
      0004B6 F0               [24] 1470 	movx	@dptr,a
      0004B7 90r00r00         [24] 1471 	mov	dptr,#_spi_control_write_PARM_3
      0004BA EB               [12] 1472 	mov	a,r3
      0004BB F0               [24] 1473 	movx	@dptr,a
      0004BC 75 82 00         [24] 1474 	mov	dpl, #0x00
      0004BF C0 07            [24] 1475 	push	ar7
      0004C1 C0 06            [24] 1476 	push	ar6
      0004C3 C0 05            [24] 1477 	push	ar5
      0004C5 C0 04            [24] 1478 	push	ar4
      0004C7 C0 03            [24] 1479 	push	ar3
      0004C9 12r00r00         [24] 1480 	lcall	_spi_control_write
      0004CC D0 03            [24] 1481 	pop	ar3
      0004CE D0 04            [24] 1482 	pop	ar4
      0004D0 D0 05            [24] 1483 	pop	ar5
      0004D2 D0 06            [24] 1484 	pop	ar6
      0004D4 D0 07            [24] 1485 	pop	ar7
                                   1486 ;	Eth.c:219: spi_control_write(0, 0x01, (uint8_t) (start_address >> 8)); // ERDPTH
      0004D6 8F 02            [24] 1487 	mov	ar2,r7
      0004D8 90r00r00         [24] 1488 	mov	dptr,#_spi_control_write_PARM_2
      0004DB 74 01            [12] 1489 	mov	a,#0x01
      0004DD F0               [24] 1490 	movx	@dptr,a
      0004DE 90r00r00         [24] 1491 	mov	dptr,#_spi_control_write_PARM_3
      0004E1 EA               [12] 1492 	mov	a,r2
      0004E2 F0               [24] 1493 	movx	@dptr,a
      0004E3 75 82 00         [24] 1494 	mov	dpl, #0x00
      0004E6 C0 07            [24] 1495 	push	ar7
      0004E8 C0 06            [24] 1496 	push	ar6
      0004EA C0 05            [24] 1497 	push	ar5
      0004EC C0 04            [24] 1498 	push	ar4
      0004EE C0 03            [24] 1499 	push	ar3
      0004F0 C0 02            [24] 1500 	push	ar2
      0004F2 12r00r00         [24] 1501 	lcall	_spi_control_write
      0004F5 D0 02            [24] 1502 	pop	ar2
      0004F7 D0 03            [24] 1503 	pop	ar3
      0004F9 D0 04            [24] 1504 	pop	ar4
      0004FB D0 05            [24] 1505 	pop	ar5
      0004FD D0 06            [24] 1506 	pop	ar6
      0004FF D0 07            [24] 1507 	pop	ar7
                                   1508 ;	Eth.c:220: spi_control_write(0, 0x08, (uint8_t) (start_address & 0xFF)); // ERXSTL
      000501 90r00r00         [24] 1509 	mov	dptr,#_spi_control_write_PARM_2
      000504 74 08            [12] 1510 	mov	a,#0x08
      000506 F0               [24] 1511 	movx	@dptr,a
      000507 90r00r00         [24] 1512 	mov	dptr,#_spi_control_write_PARM_3
      00050A EB               [12] 1513 	mov	a,r3
      00050B F0               [24] 1514 	movx	@dptr,a
      00050C 75 82 00         [24] 1515 	mov	dpl, #0x00
      00050F C0 07            [24] 1516 	push	ar7
      000511 C0 06            [24] 1517 	push	ar6
      000513 C0 05            [24] 1518 	push	ar5
      000515 C0 04            [24] 1519 	push	ar4
      000517 C0 03            [24] 1520 	push	ar3
      000519 C0 02            [24] 1521 	push	ar2
      00051B 12r00r00         [24] 1522 	lcall	_spi_control_write
      00051E D0 02            [24] 1523 	pop	ar2
      000520 D0 03            [24] 1524 	pop	ar3
      000522 D0 04            [24] 1525 	pop	ar4
      000524 D0 05            [24] 1526 	pop	ar5
      000526 D0 06            [24] 1527 	pop	ar6
      000528 D0 07            [24] 1528 	pop	ar7
                                   1529 ;	Eth.c:221: spi_control_write(0, 0x09, (uint8_t) (start_address >> 8)); // ERXSTH
      00052A 90r00r00         [24] 1530 	mov	dptr,#_spi_control_write_PARM_2
      00052D 74 09            [12] 1531 	mov	a,#0x09
      00052F F0               [24] 1532 	movx	@dptr,a
      000530 90r00r00         [24] 1533 	mov	dptr,#_spi_control_write_PARM_3
      000533 EA               [12] 1534 	mov	a,r2
      000534 F0               [24] 1535 	movx	@dptr,a
      000535 75 82 00         [24] 1536 	mov	dpl, #0x00
      000538 C0 07            [24] 1537 	push	ar7
      00053A C0 06            [24] 1538 	push	ar6
      00053C C0 05            [24] 1539 	push	ar5
      00053E C0 04            [24] 1540 	push	ar4
      000540 C0 03            [24] 1541 	push	ar3
      000542 C0 02            [24] 1542 	push	ar2
      000544 12r00r00         [24] 1543 	lcall	_spi_control_write
      000547 D0 02            [24] 1544 	pop	ar2
      000549 D0 03            [24] 1545 	pop	ar3
      00054B D0 04            [24] 1546 	pop	ar4
      00054D D0 05            [24] 1547 	pop	ar5
      00054F D0 06            [24] 1548 	pop	ar6
      000551 D0 07            [24] 1549 	pop	ar7
                                   1550 ;	Eth.c:222: spi_control_write(0, 0x0A, (uint8_t) (end_address & 0xFF)); // ERXNDL
      000553 8C 01            [24] 1551 	mov	ar1,r4
      000555 90r00r00         [24] 1552 	mov	dptr,#_spi_control_write_PARM_2
      000558 74 0A            [12] 1553 	mov	a,#0x0a
      00055A F0               [24] 1554 	movx	@dptr,a
      00055B 90r00r00         [24] 1555 	mov	dptr,#_spi_control_write_PARM_3
      00055E E9               [12] 1556 	mov	a,r1
      00055F F0               [24] 1557 	movx	@dptr,a
      000560 75 82 00         [24] 1558 	mov	dpl, #0x00
      000563 C0 07            [24] 1559 	push	ar7
      000565 C0 06            [24] 1560 	push	ar6
      000567 C0 05            [24] 1561 	push	ar5
      000569 C0 04            [24] 1562 	push	ar4
      00056B C0 03            [24] 1563 	push	ar3
      00056D C0 02            [24] 1564 	push	ar2
      00056F 12r00r00         [24] 1565 	lcall	_spi_control_write
      000572 D0 02            [24] 1566 	pop	ar2
      000574 D0 03            [24] 1567 	pop	ar3
      000576 D0 04            [24] 1568 	pop	ar4
      000578 D0 05            [24] 1569 	pop	ar5
      00057A D0 06            [24] 1570 	pop	ar6
      00057C D0 07            [24] 1571 	pop	ar7
                                   1572 ;	Eth.c:223: spi_control_write(0, 0x0B, (uint8_t) (end_address >> 8)); // ERXNDH
      00057E 8D 01            [24] 1573 	mov	ar1,r5
      000580 90r00r00         [24] 1574 	mov	dptr,#_spi_control_write_PARM_2
      000583 74 0B            [12] 1575 	mov	a,#0x0b
      000585 F0               [24] 1576 	movx	@dptr,a
      000586 90r00r00         [24] 1577 	mov	dptr,#_spi_control_write_PARM_3
      000589 E9               [12] 1578 	mov	a,r1
      00058A F0               [24] 1579 	movx	@dptr,a
      00058B 75 82 00         [24] 1580 	mov	dpl, #0x00
      00058E C0 07            [24] 1581 	push	ar7
      000590 C0 06            [24] 1582 	push	ar6
      000592 C0 05            [24] 1583 	push	ar5
      000594 C0 04            [24] 1584 	push	ar4
      000596 C0 03            [24] 1585 	push	ar3
      000598 C0 02            [24] 1586 	push	ar2
      00059A 12r00r00         [24] 1587 	lcall	_spi_control_write
      00059D D0 02            [24] 1588 	pop	ar2
      00059F D0 03            [24] 1589 	pop	ar3
      0005A1 D0 04            [24] 1590 	pop	ar4
      0005A3 D0 05            [24] 1591 	pop	ar5
      0005A5 D0 06            [24] 1592 	pop	ar6
      0005A7 D0 07            [24] 1593 	pop	ar7
                                   1594 ;	Eth.c:224: spi_control_write(0, 0x0C, (uint8_t) (start_address & 0xFF)); // ERXRDPTL
      0005A9 90r00r00         [24] 1595 	mov	dptr,#_spi_control_write_PARM_2
      0005AC 74 0C            [12] 1596 	mov	a,#0x0c
      0005AE F0               [24] 1597 	movx	@dptr,a
      0005AF 90r00r00         [24] 1598 	mov	dptr,#_spi_control_write_PARM_3
      0005B2 EB               [12] 1599 	mov	a,r3
      0005B3 F0               [24] 1600 	movx	@dptr,a
      0005B4 75 82 00         [24] 1601 	mov	dpl, #0x00
      0005B7 C0 07            [24] 1602 	push	ar7
      0005B9 C0 06            [24] 1603 	push	ar6
      0005BB C0 05            [24] 1604 	push	ar5
      0005BD C0 04            [24] 1605 	push	ar4
      0005BF C0 02            [24] 1606 	push	ar2
      0005C1 12r00r00         [24] 1607 	lcall	_spi_control_write
      0005C4 D0 02            [24] 1608 	pop	ar2
      0005C6 D0 04            [24] 1609 	pop	ar4
      0005C8 D0 05            [24] 1610 	pop	ar5
      0005CA D0 06            [24] 1611 	pop	ar6
      0005CC D0 07            [24] 1612 	pop	ar7
                                   1613 ;	Eth.c:225: spi_control_write(0, 0x0D, (uint8_t) (start_address >> 8)); // ERXRDPTH
      0005CE 90r00r00         [24] 1614 	mov	dptr,#_spi_control_write_PARM_2
      0005D1 74 0D            [12] 1615 	mov	a,#0x0d
      0005D3 F0               [24] 1616 	movx	@dptr,a
      0005D4 90r00r00         [24] 1617 	mov	dptr,#_spi_control_write_PARM_3
      0005D7 EA               [12] 1618 	mov	a,r2
      0005D8 F0               [24] 1619 	movx	@dptr,a
      0005D9 75 82 00         [24] 1620 	mov	dpl, #0x00
      0005DC C0 07            [24] 1621 	push	ar7
      0005DE C0 06            [24] 1622 	push	ar6
      0005E0 C0 05            [24] 1623 	push	ar5
      0005E2 C0 04            [24] 1624 	push	ar4
      0005E4 12r00r00         [24] 1625 	lcall	_spi_control_write
      0005E7 D0 04            [24] 1626 	pop	ar4
      0005E9 D0 05            [24] 1627 	pop	ar5
      0005EB D0 06            [24] 1628 	pop	ar6
      0005ED D0 07            [24] 1629 	pop	ar7
                                   1630 ;	Eth.c:226: printf("\nBuffer Initialized: Start 0x%04X, End 0x%04X\n", start_address,
      0005EF C0 04            [24] 1631 	push	ar4
      0005F1 C0 05            [24] 1632 	push	ar5
      0005F3 C0 06            [24] 1633 	push	ar6
      0005F5 C0 07            [24] 1634 	push	ar7
      0005F7 74r25            [12] 1635 	mov	a,#___str_6
      0005F9 C0 E0            [24] 1636 	push	acc
      0005FB 74s01            [12] 1637 	mov	a,#(___str_6 >> 8)
      0005FD C0 E0            [24] 1638 	push	acc
      0005FF 74 80            [12] 1639 	mov	a,#0x80
      000601 C0 E0            [24] 1640 	push	acc
      000603 12r00r00         [24] 1641 	lcall	_printf
      000606 E5 81            [12] 1642 	mov	a,sp
      000608 24 F9            [12] 1643 	add	a,#0xf9
      00060A F5 81            [12] 1644 	mov	sp,a
                                   1645 ;	Eth.c:228: }
      00060C 22               [24] 1646 	ret
                                   1647 ;------------------------------------------------------------
                                   1648 ;Allocation info for local variables in function 'enc_init'
                                   1649 ;------------------------------------------------------------
                                   1650 ;sloc0                     Allocated with name '_enc_init_sloc0_1_0'
                                   1651 ;sloc1                     Allocated with name '_enc_init_sloc1_1_0'
                                   1652 ;sloc2                     Allocated with name '_enc_init_sloc2_1_0'
                                   1653 ;sloc3                     Allocated with name '_enc_init_sloc3_1_0'
                                   1654 ;mac                       Allocated with name '_enc_init_mac_10000_110'
                                   1655 ;rx_start                  Allocated with name '_enc_init_rx_start_10001_112'
                                   1656 ;rx_end                    Allocated with name '_enc_init_rx_end_10001_112'
                                   1657 ;read_macon3               Allocated with name '_enc_init_read_macon3_10002_113'
                                   1658 ;read_macon1               Allocated with name '_enc_init_read_macon1_10003_114'
                                   1659 ;------------------------------------------------------------
                                   1660 ;	Eth.c:230: void enc_init(const uint8_t *mac)
                                   1661 ;	-----------------------------------------
                                   1662 ;	 function enc_init
                                   1663 ;	-----------------------------------------
      00060D                       1664 _enc_init:
      00060D AF F0            [24] 1665 	mov	r7,b
      00060F AE 83            [24] 1666 	mov	r6,dph
      000611 E5 82            [12] 1667 	mov	a,dpl
      000613 90r00r4F         [24] 1668 	mov	dptr,#_enc_init_mac_10000_110
      000616 F0               [24] 1669 	movx	@dptr,a
      000617 EE               [12] 1670 	mov	a,r6
      000618 A3               [24] 1671 	inc	dptr
      000619 F0               [24] 1672 	movx	@dptr,a
      00061A EF               [12] 1673 	mov	a,r7
      00061B A3               [24] 1674 	inc	dptr
      00061C F0               [24] 1675 	movx	@dptr,a
                                   1676 ;	Eth.c:233: enc_reset();
      00061D 12r00r00         [24] 1677 	lcall	_enc_reset
                                   1678 ;	Eth.c:236: while (!(mac_spi_read(0x1D, 0) & 0x01))
      000620                       1679 00101$:
      000620 90r00r00         [24] 1680 	mov	dptr,#_mac_spi_read_PARM_2
      000623 E4               [12] 1681 	clr	a
      000624 F0               [24] 1682 	movx	@dptr,a
      000625 75 82 1D         [24] 1683 	mov	dpl, #0x1d
      000628 12r00r00         [24] 1684 	lcall	_mac_spi_read
      00062B E5 82            [12] 1685 	mov	a, dpl
      00062D 30 E0 F0         [24] 1686 	jnb	acc.0,00101$
                                   1687 ;	Eth.c:244: enc_buffer_init(rx_start, rx_end);
      000630 90r00r4B         [24] 1688 	mov	dptr,#_enc_buffer_init_PARM_2
      000633 74 FF            [12] 1689 	mov	a,#0xff
      000635 F0               [24] 1690 	movx	@dptr,a
      000636 74 1F            [12] 1691 	mov	a,#0x1f
      000638 A3               [24] 1692 	inc	dptr
      000639 F0               [24] 1693 	movx	@dptr,a
      00063A 90 08 00         [24] 1694 	mov	dptr,#0x0800
      00063D 12r04r42         [24] 1695 	lcall	_enc_buffer_init
                                   1696 ;	Eth.c:255: spi_control_write(2, 0x02, 0x70); // MACON3: Padding, CRC, and frame length checking enabled37
      000640 90r00r00         [24] 1697 	mov	dptr,#_spi_control_write_PARM_2
      000643 74 02            [12] 1698 	mov	a,#0x02
      000645 F0               [24] 1699 	movx	@dptr,a
      000646 90r00r00         [24] 1700 	mov	dptr,#_spi_control_write_PARM_3
      000649 74 70            [12] 1701 	mov	a,#0x70
      00064B F0               [24] 1702 	movx	@dptr,a
      00064C 75 82 02         [24] 1703 	mov	dpl, #0x02
      00064F 12r00r00         [24] 1704 	lcall	_spi_control_write
                                   1705 ;	Eth.c:256: spi_control_write(2, 0x03, 0x40); // MACON4: IEEE compliance00
      000652 90r00r00         [24] 1706 	mov	dptr,#_spi_control_write_PARM_2
      000655 74 03            [12] 1707 	mov	a,#0x03
      000657 F0               [24] 1708 	movx	@dptr,a
      000658 90r00r00         [24] 1709 	mov	dptr,#_spi_control_write_PARM_3
      00065B 74 40            [12] 1710 	mov	a,#0x40
      00065D F0               [24] 1711 	movx	@dptr,a
      00065E 75 82 02         [24] 1712 	mov	dpl, #0x02
      000661 12r00r00         [24] 1713 	lcall	_spi_control_write
                                   1714 ;	Eth.c:259: spi_control_write(2, 0x0A, 0xEE); // MAMXFLL
      000664 90r00r00         [24] 1715 	mov	dptr,#_spi_control_write_PARM_2
      000667 74 0A            [12] 1716 	mov	a,#0x0a
      000669 F0               [24] 1717 	movx	@dptr,a
      00066A 90r00r00         [24] 1718 	mov	dptr,#_spi_control_write_PARM_3
      00066D 74 EE            [12] 1719 	mov	a,#0xee
      00066F F0               [24] 1720 	movx	@dptr,a
      000670 75 82 02         [24] 1721 	mov	dpl, #0x02
      000673 12r00r00         [24] 1722 	lcall	_spi_control_write
                                   1723 ;	Eth.c:260: spi_control_write(2, 0x0B, 0x05); // MAMXFLH
      000676 90r00r00         [24] 1724 	mov	dptr,#_spi_control_write_PARM_2
      000679 74 0B            [12] 1725 	mov	a,#0x0b
      00067B F0               [24] 1726 	movx	@dptr,a
      00067C 90r00r00         [24] 1727 	mov	dptr,#_spi_control_write_PARM_3
      00067F 74 05            [12] 1728 	mov	a,#0x05
      000681 F0               [24] 1729 	movx	@dptr,a
      000682 75 82 02         [24] 1730 	mov	dpl, #0x02
      000685 12r00r00         [24] 1731 	lcall	_spi_control_write
                                   1732 ;	Eth.c:263: spi_control_write(2, 0x04, 0x12); // MABBIPG: Back-to-back gap (Full Duplex)
      000688 90r00r00         [24] 1733 	mov	dptr,#_spi_control_write_PARM_2
      00068B 74 04            [12] 1734 	mov	a,#0x04
      00068D F0               [24] 1735 	movx	@dptr,a
      00068E 90r00r00         [24] 1736 	mov	dptr,#_spi_control_write_PARM_3
      000691 74 12            [12] 1737 	mov	a,#0x12
      000693 F0               [24] 1738 	movx	@dptr,a
      000694 75 82 02         [24] 1739 	mov	dpl, #0x02
      000697 12r00r00         [24] 1740 	lcall	_spi_control_write
                                   1741 ;	Eth.c:264: spi_control_write(2, 0x06, 0x12); // MAIPGL: Non-back-to-back gap
      00069A 90r00r00         [24] 1742 	mov	dptr,#_spi_control_write_PARM_2
      00069D 74 06            [12] 1743 	mov	a,#0x06
      00069F F0               [24] 1744 	movx	@dptr,a
      0006A0 90r00r00         [24] 1745 	mov	dptr,#_spi_control_write_PARM_3
      0006A3 74 12            [12] 1746 	mov	a,#0x12
      0006A5 F0               [24] 1747 	movx	@dptr,a
      0006A6 75 82 02         [24] 1748 	mov	dpl, #0x02
      0006A9 12r00r00         [24] 1749 	lcall	_spi_control_write
                                   1750 ;	Eth.c:265: spi_control_write(2, 0x07, 0x0C); // MAIPGH: Non-back-to-back gap (Half Duplex)
      0006AC 90r00r00         [24] 1751 	mov	dptr,#_spi_control_write_PARM_2
      0006AF 74 07            [12] 1752 	mov	a,#0x07
      0006B1 F0               [24] 1753 	movx	@dptr,a
      0006B2 90r00r00         [24] 1754 	mov	dptr,#_spi_control_write_PARM_3
      0006B5 74 0C            [12] 1755 	mov	a,#0x0c
      0006B7 F0               [24] 1756 	movx	@dptr,a
      0006B8 75 82 02         [24] 1757 	mov	dpl, #0x02
      0006BB 12r00r00         [24] 1758 	lcall	_spi_control_write
                                   1759 ;	Eth.c:268: spi_control_write(3, 0x01, mac[5]); // MAADR6
      0006BE 90r00r4F         [24] 1760 	mov	dptr,#_enc_init_mac_10000_110
      0006C1 E0               [24] 1761 	movx	a,@dptr
      0006C2 FD               [12] 1762 	mov	r5,a
      0006C3 A3               [24] 1763 	inc	dptr
      0006C4 E0               [24] 1764 	movx	a,@dptr
      0006C5 FE               [12] 1765 	mov	r6,a
      0006C6 A3               [24] 1766 	inc	dptr
      0006C7 E0               [24] 1767 	movx	a,@dptr
      0006C8 FF               [12] 1768 	mov	r7,a
      0006C9 74 05            [12] 1769 	mov	a,#0x05
      0006CB 2D               [12] 1770 	add	a, r5
      0006CC F5*00            [12] 1771 	mov	_enc_init_sloc0_1_0,a
      0006CE E4               [12] 1772 	clr	a
      0006CF 3E               [12] 1773 	addc	a, r6
      0006D0 F5*01            [12] 1774 	mov	(_enc_init_sloc0_1_0 + 1),a
      0006D2 8F*02            [24] 1775 	mov	(_enc_init_sloc0_1_0 + 2),r7
      0006D4 85*00 82         [24] 1776 	mov	dpl,_enc_init_sloc0_1_0
      0006D7 85*01 83         [24] 1777 	mov	dph,(_enc_init_sloc0_1_0 + 1)
      0006DA 85*02 F0         [24] 1778 	mov	b,(_enc_init_sloc0_1_0 + 2)
      0006DD 12r00r00         [24] 1779 	lcall	__gptrget
      0006E0 F9               [12] 1780 	mov	r1,a
      0006E1 90r00r00         [24] 1781 	mov	dptr,#_spi_control_write_PARM_2
      0006E4 74 01            [12] 1782 	mov	a,#0x01
      0006E6 F0               [24] 1783 	movx	@dptr,a
      0006E7 90r00r00         [24] 1784 	mov	dptr,#_spi_control_write_PARM_3
      0006EA E9               [12] 1785 	mov	a,r1
      0006EB F0               [24] 1786 	movx	@dptr,a
      0006EC 75 82 03         [24] 1787 	mov	dpl, #0x03
      0006EF C0 07            [24] 1788 	push	ar7
      0006F1 C0 06            [24] 1789 	push	ar6
      0006F3 C0 05            [24] 1790 	push	ar5
      0006F5 12r00r00         [24] 1791 	lcall	_spi_control_write
      0006F8 D0 05            [24] 1792 	pop	ar5
      0006FA D0 06            [24] 1793 	pop	ar6
      0006FC D0 07            [24] 1794 	pop	ar7
                                   1795 ;	Eth.c:269: spi_control_write(3, 0x00, mac[4]); // MAADR5
      0006FE 74 04            [12] 1796 	mov	a,#0x04
      000700 2D               [12] 1797 	add	a, r5
      000701 F5*03            [12] 1798 	mov	_enc_init_sloc1_1_0,a
      000703 E4               [12] 1799 	clr	a
      000704 3E               [12] 1800 	addc	a, r6
      000705 F5*04            [12] 1801 	mov	(_enc_init_sloc1_1_0 + 1),a
      000707 8F*05            [24] 1802 	mov	(_enc_init_sloc1_1_0 + 2),r7
      000709 85*03 82         [24] 1803 	mov	dpl,_enc_init_sloc1_1_0
      00070C 85*04 83         [24] 1804 	mov	dph,(_enc_init_sloc1_1_0 + 1)
      00070F 85*05 F0         [24] 1805 	mov	b,(_enc_init_sloc1_1_0 + 2)
      000712 12r00r00         [24] 1806 	lcall	__gptrget
      000715 FB               [12] 1807 	mov	r3,a
      000716 90r00r00         [24] 1808 	mov	dptr,#_spi_control_write_PARM_2
      000719 E4               [12] 1809 	clr	a
      00071A F0               [24] 1810 	movx	@dptr,a
      00071B 90r00r00         [24] 1811 	mov	dptr,#_spi_control_write_PARM_3
      00071E EB               [12] 1812 	mov	a,r3
      00071F F0               [24] 1813 	movx	@dptr,a
      000720 75 82 03         [24] 1814 	mov	dpl, #0x03
      000723 C0 07            [24] 1815 	push	ar7
      000725 C0 06            [24] 1816 	push	ar6
      000727 C0 05            [24] 1817 	push	ar5
      000729 12r00r00         [24] 1818 	lcall	_spi_control_write
      00072C D0 05            [24] 1819 	pop	ar5
      00072E D0 06            [24] 1820 	pop	ar6
      000730 D0 07            [24] 1821 	pop	ar7
                                   1822 ;	Eth.c:270: spi_control_write(3, 0x03, mac[3]); // MAADR4
      000732 74 03            [12] 1823 	mov	a,#0x03
      000734 2D               [12] 1824 	add	a, r5
      000735 F5*06            [12] 1825 	mov	_enc_init_sloc2_1_0,a
      000737 E4               [12] 1826 	clr	a
      000738 3E               [12] 1827 	addc	a, r6
      000739 F5*07            [12] 1828 	mov	(_enc_init_sloc2_1_0 + 1),a
      00073B 8F*08            [24] 1829 	mov	(_enc_init_sloc2_1_0 + 2),r7
      00073D 85*06 82         [24] 1830 	mov	dpl,_enc_init_sloc2_1_0
      000740 85*07 83         [24] 1831 	mov	dph,(_enc_init_sloc2_1_0 + 1)
      000743 85*08 F0         [24] 1832 	mov	b,(_enc_init_sloc2_1_0 + 2)
      000746 12r00r00         [24] 1833 	lcall	__gptrget
      000749 F9               [12] 1834 	mov	r1,a
      00074A 90r00r00         [24] 1835 	mov	dptr,#_spi_control_write_PARM_2
      00074D 74 03            [12] 1836 	mov	a,#0x03
      00074F F0               [24] 1837 	movx	@dptr,a
      000750 90r00r00         [24] 1838 	mov	dptr,#_spi_control_write_PARM_3
      000753 E9               [12] 1839 	mov	a,r1
      000754 F0               [24] 1840 	movx	@dptr,a
      000755 75 82 03         [24] 1841 	mov	dpl, #0x03
      000758 C0 07            [24] 1842 	push	ar7
      00075A C0 06            [24] 1843 	push	ar6
      00075C C0 05            [24] 1844 	push	ar5
      00075E 12r00r00         [24] 1845 	lcall	_spi_control_write
      000761 D0 05            [24] 1846 	pop	ar5
      000763 D0 06            [24] 1847 	pop	ar6
      000765 D0 07            [24] 1848 	pop	ar7
                                   1849 ;	Eth.c:271: spi_control_write(3, 0x02, mac[2]); // MAADR3
      000767 74 02            [12] 1850 	mov	a,#0x02
      000769 2D               [12] 1851 	add	a, r5
      00076A F5*09            [12] 1852 	mov	_enc_init_sloc3_1_0,a
      00076C E4               [12] 1853 	clr	a
      00076D 3E               [12] 1854 	addc	a, r6
      00076E F5*0A            [12] 1855 	mov	(_enc_init_sloc3_1_0 + 1),a
      000770 8F*0B            [24] 1856 	mov	(_enc_init_sloc3_1_0 + 2),r7
      000772 85*09 82         [24] 1857 	mov	dpl,_enc_init_sloc3_1_0
      000775 85*0A 83         [24] 1858 	mov	dph,(_enc_init_sloc3_1_0 + 1)
      000778 85*0B F0         [24] 1859 	mov	b,(_enc_init_sloc3_1_0 + 2)
      00077B 12r00r00         [24] 1860 	lcall	__gptrget
      00077E FB               [12] 1861 	mov	r3,a
      00077F 90r00r00         [24] 1862 	mov	dptr,#_spi_control_write_PARM_2
      000782 74 02            [12] 1863 	mov	a,#0x02
      000784 F0               [24] 1864 	movx	@dptr,a
      000785 90r00r00         [24] 1865 	mov	dptr,#_spi_control_write_PARM_3
      000788 EB               [12] 1866 	mov	a,r3
      000789 F0               [24] 1867 	movx	@dptr,a
      00078A 75 82 03         [24] 1868 	mov	dpl, #0x03
      00078D C0 07            [24] 1869 	push	ar7
      00078F C0 06            [24] 1870 	push	ar6
      000791 C0 05            [24] 1871 	push	ar5
      000793 12r00r00         [24] 1872 	lcall	_spi_control_write
      000796 D0 05            [24] 1873 	pop	ar5
      000798 D0 06            [24] 1874 	pop	ar6
      00079A D0 07            [24] 1875 	pop	ar7
                                   1876 ;	Eth.c:272: spi_control_write(3, 0x05, mac[1]); // MAADR2
      00079C 74 01            [12] 1877 	mov	a,#0x01
      00079E 2D               [12] 1878 	add	a, r5
      00079F FA               [12] 1879 	mov	r2,a
      0007A0 E4               [12] 1880 	clr	a
      0007A1 3E               [12] 1881 	addc	a, r6
      0007A2 FB               [12] 1882 	mov	r3,a
      0007A3 8F 04            [24] 1883 	mov	ar4,r7
      0007A5 8A 82            [24] 1884 	mov	dpl,r2
      0007A7 8B 83            [24] 1885 	mov	dph,r3
      0007A9 8C F0            [24] 1886 	mov	b,r4
      0007AB 12r00r00         [24] 1887 	lcall	__gptrget
      0007AE F9               [12] 1888 	mov	r1,a
      0007AF 90r00r00         [24] 1889 	mov	dptr,#_spi_control_write_PARM_2
      0007B2 74 05            [12] 1890 	mov	a,#0x05
      0007B4 F0               [24] 1891 	movx	@dptr,a
      0007B5 90r00r00         [24] 1892 	mov	dptr,#_spi_control_write_PARM_3
      0007B8 E9               [12] 1893 	mov	a,r1
      0007B9 F0               [24] 1894 	movx	@dptr,a
      0007BA 75 82 03         [24] 1895 	mov	dpl, #0x03
      0007BD C0 07            [24] 1896 	push	ar7
      0007BF C0 06            [24] 1897 	push	ar6
      0007C1 C0 05            [24] 1898 	push	ar5
      0007C3 C0 04            [24] 1899 	push	ar4
      0007C5 C0 03            [24] 1900 	push	ar3
      0007C7 C0 02            [24] 1901 	push	ar2
      0007C9 12r00r00         [24] 1902 	lcall	_spi_control_write
      0007CC D0 02            [24] 1903 	pop	ar2
      0007CE D0 03            [24] 1904 	pop	ar3
      0007D0 D0 04            [24] 1905 	pop	ar4
      0007D2 D0 05            [24] 1906 	pop	ar5
      0007D4 D0 06            [24] 1907 	pop	ar6
      0007D6 D0 07            [24] 1908 	pop	ar7
                                   1909 ;	Eth.c:273: spi_control_write(3, 0x04, mac[0]); // MAADR1
      0007D8 8D 82            [24] 1910 	mov	dpl,r5
      0007DA 8E 83            [24] 1911 	mov	dph,r6
      0007DC 8F F0            [24] 1912 	mov	b,r7
      0007DE 12r00r00         [24] 1913 	lcall	__gptrget
      0007E1 F9               [12] 1914 	mov	r1,a
      0007E2 90r00r00         [24] 1915 	mov	dptr,#_spi_control_write_PARM_2
      0007E5 74 04            [12] 1916 	mov	a,#0x04
      0007E7 F0               [24] 1917 	movx	@dptr,a
      0007E8 90r00r00         [24] 1918 	mov	dptr,#_spi_control_write_PARM_3
      0007EB E9               [12] 1919 	mov	a,r1
      0007EC F0               [24] 1920 	movx	@dptr,a
      0007ED 75 82 03         [24] 1921 	mov	dpl, #0x03
      0007F0 C0 07            [24] 1922 	push	ar7
      0007F2 C0 06            [24] 1923 	push	ar6
      0007F4 C0 05            [24] 1924 	push	ar5
      0007F6 C0 04            [24] 1925 	push	ar4
      0007F8 C0 03            [24] 1926 	push	ar3
      0007FA C0 02            [24] 1927 	push	ar2
      0007FC 12r00r00         [24] 1928 	lcall	_spi_control_write
      0007FF D0 02            [24] 1929 	pop	ar2
      000801 D0 03            [24] 1930 	pop	ar3
      000803 D0 04            [24] 1931 	pop	ar4
      000805 D0 05            [24] 1932 	pop	ar5
      000807 D0 06            [24] 1933 	pop	ar6
      000809 D0 07            [24] 1934 	pop	ar7
                                   1935 ;	Eth.c:275: spi_control_write(1, 0x18, 0x80); //unicast filter funcationality register
      00080B 90r00r00         [24] 1936 	mov	dptr,#_spi_control_write_PARM_2
      00080E 74 18            [12] 1937 	mov	a,#0x18
      000810 F0               [24] 1938 	movx	@dptr,a
      000811 90r00r00         [24] 1939 	mov	dptr,#_spi_control_write_PARM_3
      000814 74 80            [12] 1940 	mov	a,#0x80
      000816 F0               [24] 1941 	movx	@dptr,a
      000817 75 82 01         [24] 1942 	mov	dpl, #0x01
      00081A C0 07            [24] 1943 	push	ar7
      00081C C0 06            [24] 1944 	push	ar6
      00081E C0 05            [24] 1945 	push	ar5
      000820 C0 04            [24] 1946 	push	ar4
      000822 C0 03            [24] 1947 	push	ar3
      000824 C0 02            [24] 1948 	push	ar2
      000826 12r00r00         [24] 1949 	lcall	_spi_control_write
      000829 D0 02            [24] 1950 	pop	ar2
      00082B D0 03            [24] 1951 	pop	ar3
      00082D D0 04            [24] 1952 	pop	ar4
      00082F D0 05            [24] 1953 	pop	ar5
      000831 D0 06            [24] 1954 	pop	ar6
      000833 D0 07            [24] 1955 	pop	ar7
                                   1956 ;	Eth.c:276: uint8_t read_macon3 = mac_spi_read(0x03, 2);
      000835 90r00r00         [24] 1957 	mov	dptr,#_mac_spi_read_PARM_2
      000838 74 02            [12] 1958 	mov	a,#0x02
      00083A F0               [24] 1959 	movx	@dptr,a
      00083B 75 82 03         [24] 1960 	mov	dpl, #0x03
      00083E C0 07            [24] 1961 	push	ar7
      000840 C0 06            [24] 1962 	push	ar6
      000842 C0 05            [24] 1963 	push	ar5
      000844 C0 04            [24] 1964 	push	ar4
      000846 C0 03            [24] 1965 	push	ar3
      000848 C0 02            [24] 1966 	push	ar2
      00084A 12r00r00         [24] 1967 	lcall	_mac_spi_read
      00084D E5 82            [12] 1968 	mov	a, dpl
      00084F D0 02            [24] 1969 	pop	ar2
      000851 D0 03            [24] 1970 	pop	ar3
      000853 D0 04            [24] 1971 	pop	ar4
      000855 D0 05            [24] 1972 	pop	ar5
      000857 D0 06            [24] 1973 	pop	ar6
      000859 D0 07            [24] 1974 	pop	ar7
                                   1975 ;	Eth.c:277: spi_control_write(2, 0x03, (read_macon3 | (1 << 0)));
      00085B 44 01            [12] 1976 	orl	a,#0x01
      00085D F9               [12] 1977 	mov	r1,a
      00085E 90r00r00         [24] 1978 	mov	dptr,#_spi_control_write_PARM_2
      000861 74 03            [12] 1979 	mov	a,#0x03
      000863 F0               [24] 1980 	movx	@dptr,a
      000864 90r00r00         [24] 1981 	mov	dptr,#_spi_control_write_PARM_3
      000867 E9               [12] 1982 	mov	a,r1
      000868 F0               [24] 1983 	movx	@dptr,a
      000869 75 82 02         [24] 1984 	mov	dpl, #0x02
      00086C C0 07            [24] 1985 	push	ar7
      00086E C0 06            [24] 1986 	push	ar6
      000870 C0 05            [24] 1987 	push	ar5
      000872 C0 04            [24] 1988 	push	ar4
      000874 C0 03            [24] 1989 	push	ar3
      000876 C0 02            [24] 1990 	push	ar2
      000878 12r00r00         [24] 1991 	lcall	_spi_control_write
      00087B D0 02            [24] 1992 	pop	ar2
      00087D D0 03            [24] 1993 	pop	ar3
      00087F D0 04            [24] 1994 	pop	ar4
      000881 D0 05            [24] 1995 	pop	ar5
      000883 D0 06            [24] 1996 	pop	ar6
      000885 D0 07            [24] 1997 	pop	ar7
                                   1998 ;	Eth.c:278: uint8_t read_macon1 = mac_spi_read(0x00, 2); //mac enable for reception
      000887 90r00r00         [24] 1999 	mov	dptr,#_mac_spi_read_PARM_2
      00088A 74 02            [12] 2000 	mov	a,#0x02
      00088C F0               [24] 2001 	movx	@dptr,a
      00088D 75 82 00         [24] 2002 	mov	dpl, #0x00
      000890 C0 07            [24] 2003 	push	ar7
      000892 C0 06            [24] 2004 	push	ar6
      000894 C0 05            [24] 2005 	push	ar5
      000896 C0 04            [24] 2006 	push	ar4
      000898 C0 03            [24] 2007 	push	ar3
      00089A C0 02            [24] 2008 	push	ar2
      00089C 12r00r00         [24] 2009 	lcall	_mac_spi_read
      00089F E5 82            [12] 2010 	mov	a, dpl
      0008A1 D0 02            [24] 2011 	pop	ar2
      0008A3 D0 03            [24] 2012 	pop	ar3
      0008A5 D0 04            [24] 2013 	pop	ar4
      0008A7 D0 05            [24] 2014 	pop	ar5
      0008A9 D0 06            [24] 2015 	pop	ar6
      0008AB D0 07            [24] 2016 	pop	ar7
                                   2017 ;	Eth.c:279: spi_control_write(2, 0x00, (read_macon1 | (1 << 0))); //mac enable for reception
      0008AD 44 01            [12] 2018 	orl	a,#0x01
      0008AF F9               [12] 2019 	mov	r1,a
      0008B0 90r00r00         [24] 2020 	mov	dptr,#_spi_control_write_PARM_2
      0008B3 E4               [12] 2021 	clr	a
      0008B4 F0               [24] 2022 	movx	@dptr,a
      0008B5 90r00r00         [24] 2023 	mov	dptr,#_spi_control_write_PARM_3
      0008B8 E9               [12] 2024 	mov	a,r1
      0008B9 F0               [24] 2025 	movx	@dptr,a
      0008BA 75 82 02         [24] 2026 	mov	dpl, #0x02
      0008BD C0 07            [24] 2027 	push	ar7
      0008BF C0 06            [24] 2028 	push	ar6
      0008C1 C0 05            [24] 2029 	push	ar5
      0008C3 C0 04            [24] 2030 	push	ar4
      0008C5 C0 03            [24] 2031 	push	ar3
      0008C7 C0 02            [24] 2032 	push	ar2
      0008C9 12r00r00         [24] 2033 	lcall	_spi_control_write
      0008CC D0 02            [24] 2034 	pop	ar2
      0008CE D0 03            [24] 2035 	pop	ar3
      0008D0 D0 04            [24] 2036 	pop	ar4
      0008D2 D0 05            [24] 2037 	pop	ar5
      0008D4 D0 06            [24] 2038 	pop	ar6
      0008D6 D0 07            [24] 2039 	pop	ar7
                                   2040 ;	Eth.c:280: phy_spi_write(0x00, 0x0100);
      0008D8 90r00r00         [24] 2041 	mov	dptr,#_phy_spi_write_PARM_2
      0008DB E4               [12] 2042 	clr	a
      0008DC F0               [24] 2043 	movx	@dptr,a
      0008DD 04               [12] 2044 	inc	a
      0008DE A3               [24] 2045 	inc	dptr
      0008DF F0               [24] 2046 	movx	@dptr,a
      0008E0 75 82 00         [24] 2047 	mov	dpl, #0x00
      0008E3 C0 07            [24] 2048 	push	ar7
      0008E5 C0 06            [24] 2049 	push	ar6
      0008E7 C0 05            [24] 2050 	push	ar5
      0008E9 C0 04            [24] 2051 	push	ar4
      0008EB C0 03            [24] 2052 	push	ar3
      0008ED C0 02            [24] 2053 	push	ar2
      0008EF 12r00r00         [24] 2054 	lcall	_phy_spi_write
      0008F2 D0 02            [24] 2055 	pop	ar2
      0008F4 D0 03            [24] 2056 	pop	ar3
      0008F6 D0 04            [24] 2057 	pop	ar4
      0008F8 D0 05            [24] 2058 	pop	ar5
      0008FA D0 06            [24] 2059 	pop	ar6
      0008FC D0 07            [24] 2060 	pop	ar7
                                   2061 ;	Eth.c:283: phy_spi_write(0x14, 0x3422); // PHLCON: LEDA=Link/Activity, LEDB=RX/TX Activity
      0008FE 90r00r00         [24] 2062 	mov	dptr,#_phy_spi_write_PARM_2
      000901 74 22            [12] 2063 	mov	a,#0x22
      000903 F0               [24] 2064 	movx	@dptr,a
      000904 74 34            [12] 2065 	mov	a,#0x34
      000906 A3               [24] 2066 	inc	dptr
      000907 F0               [24] 2067 	movx	@dptr,a
      000908 75 82 14         [24] 2068 	mov	dpl, #0x14
      00090B C0 07            [24] 2069 	push	ar7
      00090D C0 06            [24] 2070 	push	ar6
      00090F C0 05            [24] 2071 	push	ar5
      000911 C0 04            [24] 2072 	push	ar4
      000913 C0 03            [24] 2073 	push	ar3
      000915 C0 02            [24] 2074 	push	ar2
      000917 12r00r00         [24] 2075 	lcall	_phy_spi_write
      00091A D0 02            [24] 2076 	pop	ar2
      00091C D0 03            [24] 2077 	pop	ar3
      00091E D0 04            [24] 2078 	pop	ar4
      000920 D0 05            [24] 2079 	pop	ar5
      000922 D0 06            [24] 2080 	pop	ar6
      000924 D0 07            [24] 2081 	pop	ar7
                                   2082 ;	Eth.c:284: spi_control_write(0, 0X1F, 0X04); // reception enable bit
      000926 90r00r00         [24] 2083 	mov	dptr,#_spi_control_write_PARM_2
      000929 74 1F            [12] 2084 	mov	a,#0x1f
      00092B F0               [24] 2085 	movx	@dptr,a
      00092C 90r00r00         [24] 2086 	mov	dptr,#_spi_control_write_PARM_3
      00092F 74 04            [12] 2087 	mov	a,#0x04
      000931 F0               [24] 2088 	movx	@dptr,a
      000932 75 82 00         [24] 2089 	mov	dpl, #0x00
      000935 C0 07            [24] 2090 	push	ar7
      000937 C0 06            [24] 2091 	push	ar6
      000939 C0 05            [24] 2092 	push	ar5
      00093B C0 04            [24] 2093 	push	ar4
      00093D C0 03            [24] 2094 	push	ar3
      00093F C0 02            [24] 2095 	push	ar2
      000941 12r00r00         [24] 2096 	lcall	_spi_control_write
                                   2097 ;	Eth.c:285: printf("\nENC28J60 Initialization Complete.\n");
      000944 74r54            [12] 2098 	mov	a,#___str_7
      000946 C0 E0            [24] 2099 	push	acc
      000948 74s01            [12] 2100 	mov	a,#(___str_7 >> 8)
      00094A C0 E0            [24] 2101 	push	acc
      00094C 74 80            [12] 2102 	mov	a,#0x80
      00094E C0 E0            [24] 2103 	push	acc
      000950 12r00r00         [24] 2104 	lcall	_printf
      000953 15 81            [12] 2105 	dec	sp
      000955 15 81            [12] 2106 	dec	sp
      000957 15 81            [12] 2107 	dec	sp
      000959 D0 02            [24] 2108 	pop	ar2
      00095B D0 03            [24] 2109 	pop	ar3
      00095D D0 04            [24] 2110 	pop	ar4
      00095F D0 05            [24] 2111 	pop	ar5
      000961 D0 06            [24] 2112 	pop	ar6
      000963 D0 07            [24] 2113 	pop	ar7
                                   2114 ;	Eth.c:287: mac[2], mac[3], mac[4], mac[5]);
      000965 85*00 82         [24] 2115 	mov	dpl,_enc_init_sloc0_1_0
      000968 85*01 83         [24] 2116 	mov	dph,(_enc_init_sloc0_1_0 + 1)
      00096B 85*02 F0         [24] 2117 	mov	b,(_enc_init_sloc0_1_0 + 2)
      00096E 12r00r00         [24] 2118 	lcall	__gptrget
      000971 F9               [12] 2119 	mov	r1,a
      000972 89*00            [24] 2120 	mov	_enc_init_sloc0_1_0,r1
      000974 75*01 00         [24] 2121 	mov	(_enc_init_sloc0_1_0 + 1),#0x00
      000977 85*03 82         [24] 2122 	mov	dpl,_enc_init_sloc1_1_0
      00097A 85*04 83         [24] 2123 	mov	dph,(_enc_init_sloc1_1_0 + 1)
      00097D 85*05 F0         [24] 2124 	mov	b,(_enc_init_sloc1_1_0 + 2)
      000980 12r00r00         [24] 2125 	lcall	__gptrget
      000983 F9               [12] 2126 	mov	r1,a
      000984 89*03            [24] 2127 	mov	_enc_init_sloc1_1_0,r1
      000986 75*04 00         [24] 2128 	mov	(_enc_init_sloc1_1_0 + 1),#0x00
      000989 85*06 82         [24] 2129 	mov	dpl,_enc_init_sloc2_1_0
      00098C 85*07 83         [24] 2130 	mov	dph,(_enc_init_sloc2_1_0 + 1)
      00098F 85*08 F0         [24] 2131 	mov	b,(_enc_init_sloc2_1_0 + 2)
      000992 12r00r00         [24] 2132 	lcall	__gptrget
      000995 F9               [12] 2133 	mov	r1,a
      000996 89*06            [24] 2134 	mov	_enc_init_sloc2_1_0,r1
      000998 75*07 00         [24] 2135 	mov	(_enc_init_sloc2_1_0 + 1),#0x00
      00099B 85*09 82         [24] 2136 	mov	dpl,_enc_init_sloc3_1_0
      00099E 85*0A 83         [24] 2137 	mov	dph,(_enc_init_sloc3_1_0 + 1)
      0009A1 85*0B F0         [24] 2138 	mov	b,(_enc_init_sloc3_1_0 + 2)
      0009A4 12r00r00         [24] 2139 	lcall	__gptrget
      0009A7 F8               [12] 2140 	mov	r0,a
      0009A8 79 00            [12] 2141 	mov	r1,#0x00
                                   2142 ;	Eth.c:286: printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
      0009AA 8A 82            [24] 2143 	mov	dpl,r2
      0009AC 8B 83            [24] 2144 	mov	dph,r3
      0009AE 8C F0            [24] 2145 	mov	b,r4
      0009B0 12r00r00         [24] 2146 	lcall	__gptrget
      0009B3 FA               [12] 2147 	mov	r2,a
      0009B4 7C 00            [12] 2148 	mov	r4,#0x00
      0009B6 8D 82            [24] 2149 	mov	dpl,r5
      0009B8 8E 83            [24] 2150 	mov	dph,r6
      0009BA 8F F0            [24] 2151 	mov	b,r7
      0009BC 12r00r00         [24] 2152 	lcall	__gptrget
      0009BF FD               [12] 2153 	mov	r5,a
      0009C0 7F 00            [12] 2154 	mov	r7,#0x00
      0009C2 C0*00            [24] 2155 	push	_enc_init_sloc0_1_0
      0009C4 C0*01            [24] 2156 	push	(_enc_init_sloc0_1_0 + 1)
      0009C6 C0*03            [24] 2157 	push	_enc_init_sloc1_1_0
      0009C8 C0*04            [24] 2158 	push	(_enc_init_sloc1_1_0 + 1)
      0009CA C0*06            [24] 2159 	push	_enc_init_sloc2_1_0
      0009CC C0*07            [24] 2160 	push	(_enc_init_sloc2_1_0 + 1)
      0009CE C0 00            [24] 2161 	push	ar0
      0009D0 C0 01            [24] 2162 	push	ar1
      0009D2 C0 02            [24] 2163 	push	ar2
      0009D4 C0 04            [24] 2164 	push	ar4
      0009D6 C0 05            [24] 2165 	push	ar5
      0009D8 C0 07            [24] 2166 	push	ar7
      0009DA 74r78            [12] 2167 	mov	a,#___str_8
      0009DC C0 E0            [24] 2168 	push	acc
      0009DE 74s01            [12] 2169 	mov	a,#(___str_8 >> 8)
      0009E0 C0 E0            [24] 2170 	push	acc
      0009E2 74 80            [12] 2171 	mov	a,#0x80
      0009E4 C0 E0            [24] 2172 	push	acc
      0009E6 12r00r00         [24] 2173 	lcall	_printf
      0009E9 E5 81            [12] 2174 	mov	a,sp
      0009EB 24 F1            [12] 2175 	add	a,#0xf1
      0009ED F5 81            [12] 2176 	mov	sp,a
                                   2177 ;	Eth.c:288: }
      0009EF 22               [24] 2178 	ret
                                   2179 	.area CSEG    (CODE)
                                   2180 	.area CONST   (CODE)
                                   2181 	.area CONST   (CODE)
      000000                       2182 ___str_0:
      000000 0A                    2183 	.db 0x0a
      000001 49 6E 76 61 6C 69 64  2184 	.ascii "Invalid Buffer Size. Buffer exceeds valid address range."
             20 42 75 66 66 65 72
             20 53 69 7A 65 2E 20
             42 75 66 66 65 72 20
             65 78 63 65 65 64 73
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 72 61 6E 67 65 2E
      000039 0A                    2185 	.db 0x0a
      00003A 00                    2186 	.db 0x00
                                   2187 	.area CSEG    (CODE)
                                   2188 	.area CONST   (CODE)
      00003B                       2189 ___str_1:
      00003B 41 52 50 20 72 65 71  2190 	.ascii "ARP request sent successfully."
             75 65 73 74 20 73 65
             6E 74 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79 2E
      000059 0A                    2191 	.db 0x0a
      00005A 0D                    2192 	.db 0x0d
      00005B 00                    2193 	.db 0x00
                                   2194 	.area CSEG    (CODE)
                                   2195 	.area CONST   (CODE)
      00005C                       2196 ___str_2:
      00005C 41 52 50 20 74 72 61  2197 	.ascii "ARP transmission failed. Check error flags."
             6E 73 6D 69 73 73 69
             6F 6E 20 66 61 69 6C
             65 64 2E 20 43 68 65
             63 6B 20 65 72 72 6F
             72 20 66 6C 61 67 73
             2E
      000087 0A                    2198 	.db 0x0a
      000088 0D                    2199 	.db 0x0d
      000089 00                    2200 	.db 0x00
                                   2201 	.area CSEG    (CODE)
                                   2202 	.area CONST   (CODE)
      00008A                       2203 ___str_3:
      00008A 54 72 61 6E 73 6D 69  2204 	.ascii "Transmission timeout. ENC28J60 may not be functioning correc"
             73 73 69 6F 6E 20 74
             69 6D 65 6F 75 74 2E
             20 45 4E 43 32 38 4A
             36 30 20 6D 61 79 20
             6E 6F 74 20 62 65 20
             66 75 6E 63 74 69 6F
             6E 69 6E 67 20 63 6F
             72 72 65 63
      0000C6 74 6C 79 2E           2205 	.ascii "tly."
      0000CA 0A                    2206 	.db 0x0a
      0000CB 0D                    2207 	.db 0x0d
      0000CC 00                    2208 	.db 0x00
                                   2209 	.area CSEG    (CODE)
                                   2210 	.area CONST   (CODE)
      0000CD                       2211 ___str_4:
      0000CD 49 6E 74 65 72 72 72  2212 	.ascii "Interrrrrrrruuuuuuuuuppppppppttttttt"
             72 72 72 72 72 75 75
             75 75 75 75 75 75 75
             70 70 70 70 70 70 70
             70 74 74 74 74 74 74
             74
      0000F1 0A                    2213 	.db 0x0a
      0000F2 0D                    2214 	.db 0x0d
      0000F3 00                    2215 	.db 0x00
                                   2216 	.area CSEG    (CODE)
                                   2217 	.area CONST   (CODE)
      0000F4                       2218 ___str_5:
      0000F4 0A                    2219 	.db 0x0a
      0000F5 49 6E 76 61 6C 69 64  2220 	.ascii "Invalid Buffer Range: Start 0x%04X, End 0x%04X"
             20 42 75 66 66 65 72
             20 52 61 6E 67 65 3A
             20 53 74 61 72 74 20
             30 78 25 30 34 58 2C
             20 45 6E 64 20 30 78
             25 30 34 58
      000123 0A                    2221 	.db 0x0a
      000124 00                    2222 	.db 0x00
                                   2223 	.area CSEG    (CODE)
                                   2224 	.area CONST   (CODE)
      000125                       2225 ___str_6:
      000125 0A                    2226 	.db 0x0a
      000126 42 75 66 66 65 72 20  2227 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      000152 0A                    2228 	.db 0x0a
      000153 00                    2229 	.db 0x00
                                   2230 	.area CSEG    (CODE)
                                   2231 	.area CONST   (CODE)
      000154                       2232 ___str_7:
      000154 0A                    2233 	.db 0x0a
      000155 45 4E 43 32 38 4A 36  2234 	.ascii "ENC28J60 Initialization Complete."
             30 20 49 6E 69 74 69
             61 6C 69 7A 61 74 69
             6F 6E 20 43 6F 6D 70
             6C 65 74 65 2E
      000176 0A                    2235 	.db 0x0a
      000177 00                    2236 	.db 0x00
                                   2237 	.area CSEG    (CODE)
                                   2238 	.area CONST   (CODE)
      000178                       2239 ___str_8:
      000178 4D 41 43 20 41 64 64  2240 	.ascii "MAC Address: %02X:%02X:%02X:%02X:%02X:%02X"
             72 65 73 73 3A 20 25
             30 32 58 3A 25 30 32
             58 3A 25 30 32 58 3A
             25 30 32 58 3A 25 30
             32 58 3A 25 30 32 58
      0001A2 0A                    2241 	.db 0x0a
      0001A3 00                    2242 	.db 0x00
                                   2243 	.area CSEG    (CODE)
                                   2244 	.area XINIT   (CODE)
                                   2245 	.area CABS    (ABS,CODE)
