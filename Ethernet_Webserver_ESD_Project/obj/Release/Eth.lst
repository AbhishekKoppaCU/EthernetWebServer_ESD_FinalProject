                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module Eth
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _external_interrupt0_isr
                                     12 	.globl _enc28j60_transmission_successful
                                     13 	.globl _wait_for_transmission_complete
                                     14 	.globl _enc28j60_set_transmit_pointers
                                     15 	.globl _enc28j60_start_transmission
                                     16 	.globl _delay_ms
                                     17 	.globl _spi_control_write
                                     18 	.globl _phy_spi_write
                                     19 	.globl _spi_buffer_write
                                     20 	.globl _mac_spi_read
                                     21 	.globl _enc_reset
                                     22 	.globl _printf
                                     23 	.globl _TF1
                                     24 	.globl _TR1
                                     25 	.globl _TF0
                                     26 	.globl _TR0
                                     27 	.globl _IE1
                                     28 	.globl _IT1
                                     29 	.globl _IE0
                                     30 	.globl _IT0
                                     31 	.globl _SM0
                                     32 	.globl _SM1
                                     33 	.globl _SM2
                                     34 	.globl _REN
                                     35 	.globl _TB8
                                     36 	.globl _RB8
                                     37 	.globl _TI
                                     38 	.globl _RI
                                     39 	.globl _CY
                                     40 	.globl _AC
                                     41 	.globl _F0
                                     42 	.globl _RS1
                                     43 	.globl _RS0
                                     44 	.globl _OV
                                     45 	.globl _F1
                                     46 	.globl _P
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD0
                                     54 	.globl _TXD
                                     55 	.globl _RXD0
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _P1_7
                                     74 	.globl _P1_6
                                     75 	.globl _P1_5
                                     76 	.globl _P1_4
                                     77 	.globl _P1_3
                                     78 	.globl _P1_2
                                     79 	.globl _P1_1
                                     80 	.globl _P1_0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _PS
                                     90 	.globl _PT1
                                     91 	.globl _PX1
                                     92 	.globl _PT0
                                     93 	.globl _PX0
                                     94 	.globl _EA
                                     95 	.globl _ES
                                     96 	.globl _ET1
                                     97 	.globl _EX1
                                     98 	.globl _ET0
                                     99 	.globl _EX0
                                    100 	.globl _BREG_F7
                                    101 	.globl _BREG_F6
                                    102 	.globl _BREG_F5
                                    103 	.globl _BREG_F4
                                    104 	.globl _BREG_F3
                                    105 	.globl _BREG_F2
                                    106 	.globl _BREG_F1
                                    107 	.globl _BREG_F0
                                    108 	.globl _P5_7
                                    109 	.globl _P5_6
                                    110 	.globl _P5_5
                                    111 	.globl _P5_4
                                    112 	.globl _P5_3
                                    113 	.globl _P5_2
                                    114 	.globl _P5_1
                                    115 	.globl _P5_0
                                    116 	.globl _P4_7
                                    117 	.globl _P4_6
                                    118 	.globl _P4_5
                                    119 	.globl _P4_4
                                    120 	.globl _P4_3
                                    121 	.globl _P4_2
                                    122 	.globl _P4_1
                                    123 	.globl _P4_0
                                    124 	.globl _PX0L
                                    125 	.globl _PT0L
                                    126 	.globl _PX1L
                                    127 	.globl _PT1L
                                    128 	.globl _PSL
                                    129 	.globl _PT2L
                                    130 	.globl _PPCL
                                    131 	.globl _EC
                                    132 	.globl _CCF0
                                    133 	.globl _CCF1
                                    134 	.globl _CCF2
                                    135 	.globl _CCF3
                                    136 	.globl _CCF4
                                    137 	.globl _CR
                                    138 	.globl _CF
                                    139 	.globl _TF2
                                    140 	.globl _EXF2
                                    141 	.globl _RCLK
                                    142 	.globl _TCLK
                                    143 	.globl _EXEN2
                                    144 	.globl _TR2
                                    145 	.globl _C_T2
                                    146 	.globl _CP_RL2
                                    147 	.globl _T2CON_7
                                    148 	.globl _T2CON_6
                                    149 	.globl _T2CON_5
                                    150 	.globl _T2CON_4
                                    151 	.globl _T2CON_3
                                    152 	.globl _T2CON_2
                                    153 	.globl _T2CON_1
                                    154 	.globl _T2CON_0
                                    155 	.globl _PT2
                                    156 	.globl _ET2
                                    157 	.globl _TMOD
                                    158 	.globl _TL1
                                    159 	.globl _TL0
                                    160 	.globl _TH1
                                    161 	.globl _TH0
                                    162 	.globl _TCON
                                    163 	.globl _SP
                                    164 	.globl _SCON
                                    165 	.globl _SBUF0
                                    166 	.globl _SBUF
                                    167 	.globl _PSW
                                    168 	.globl _PCON
                                    169 	.globl _P3
                                    170 	.globl _P2
                                    171 	.globl _P1
                                    172 	.globl _P0
                                    173 	.globl _IP
                                    174 	.globl _IE
                                    175 	.globl _DP0L
                                    176 	.globl _DPL
                                    177 	.globl _DP0H
                                    178 	.globl _DPH
                                    179 	.globl _B
                                    180 	.globl _ACC
                                    181 	.globl _EECON
                                    182 	.globl _KBF
                                    183 	.globl _KBE
                                    184 	.globl _KBLS
                                    185 	.globl _BRL
                                    186 	.globl _BDRCON
                                    187 	.globl _T2MOD
                                    188 	.globl _SPDAT
                                    189 	.globl _SPSTA
                                    190 	.globl _SPCON
                                    191 	.globl _SADEN
                                    192 	.globl _SADDR
                                    193 	.globl _WDTPRG
                                    194 	.globl _WDTRST
                                    195 	.globl _P5
                                    196 	.globl _P4
                                    197 	.globl _IPH1
                                    198 	.globl _IPL1
                                    199 	.globl _IPH0
                                    200 	.globl _IPL0
                                    201 	.globl _IEN1
                                    202 	.globl _IEN0
                                    203 	.globl _CMOD
                                    204 	.globl _CL
                                    205 	.globl _CH
                                    206 	.globl _CCON
                                    207 	.globl _CCAPM4
                                    208 	.globl _CCAPM3
                                    209 	.globl _CCAPM2
                                    210 	.globl _CCAPM1
                                    211 	.globl _CCAPM0
                                    212 	.globl _CCAP4L
                                    213 	.globl _CCAP3L
                                    214 	.globl _CCAP2L
                                    215 	.globl _CCAP1L
                                    216 	.globl _CCAP0L
                                    217 	.globl _CCAP4H
                                    218 	.globl _CCAP3H
                                    219 	.globl _CCAP2H
                                    220 	.globl _CCAP1H
                                    221 	.globl _CCAP0H
                                    222 	.globl _CKCON1
                                    223 	.globl _CKCON0
                                    224 	.globl _CKRL
                                    225 	.globl _AUXR1
                                    226 	.globl _AUXR
                                    227 	.globl _TH2
                                    228 	.globl _TL2
                                    229 	.globl _RCAP2H
                                    230 	.globl _RCAP2L
                                    231 	.globl _T2CON
                                    232 	.globl _enc_buffer_init_PARM_2
                                    233 	.globl _enc28j60_set_transmit_pointers_PARM_2
                                    234 	.globl _RX_disable
                                    235 	.globl _RX_enable
                                    236 	.globl _send_arp_request
                                    237 	.globl _enc_buffer_init
                                    238 	.globl _enc_init
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           0000C8   244 _T2CON	=	0x00c8
                           0000CA   245 _RCAP2L	=	0x00ca
                           0000CB   246 _RCAP2H	=	0x00cb
                           0000CC   247 _TL2	=	0x00cc
                           0000CD   248 _TH2	=	0x00cd
                           00008E   249 _AUXR	=	0x008e
                           0000A2   250 _AUXR1	=	0x00a2
                           000097   251 _CKRL	=	0x0097
                           00008F   252 _CKCON0	=	0x008f
                           0000AF   253 _CKCON1	=	0x00af
                           0000FA   254 _CCAP0H	=	0x00fa
                           0000FB   255 _CCAP1H	=	0x00fb
                           0000FC   256 _CCAP2H	=	0x00fc
                           0000FD   257 _CCAP3H	=	0x00fd
                           0000FE   258 _CCAP4H	=	0x00fe
                           0000EA   259 _CCAP0L	=	0x00ea
                           0000EB   260 _CCAP1L	=	0x00eb
                           0000EC   261 _CCAP2L	=	0x00ec
                           0000ED   262 _CCAP3L	=	0x00ed
                           0000EE   263 _CCAP4L	=	0x00ee
                           0000DA   264 _CCAPM0	=	0x00da
                           0000DB   265 _CCAPM1	=	0x00db
                           0000DC   266 _CCAPM2	=	0x00dc
                           0000DD   267 _CCAPM3	=	0x00dd
                           0000DE   268 _CCAPM4	=	0x00de
                           0000D8   269 _CCON	=	0x00d8
                           0000F9   270 _CH	=	0x00f9
                           0000E9   271 _CL	=	0x00e9
                           0000D9   272 _CMOD	=	0x00d9
                           0000A8   273 _IEN0	=	0x00a8
                           0000B1   274 _IEN1	=	0x00b1
                           0000B8   275 _IPL0	=	0x00b8
                           0000B7   276 _IPH0	=	0x00b7
                           0000B2   277 _IPL1	=	0x00b2
                           0000B3   278 _IPH1	=	0x00b3
                           0000C0   279 _P4	=	0x00c0
                           0000E8   280 _P5	=	0x00e8
                           0000A6   281 _WDTRST	=	0x00a6
                           0000A7   282 _WDTPRG	=	0x00a7
                           0000A9   283 _SADDR	=	0x00a9
                           0000B9   284 _SADEN	=	0x00b9
                           0000C3   285 _SPCON	=	0x00c3
                           0000C4   286 _SPSTA	=	0x00c4
                           0000C5   287 _SPDAT	=	0x00c5
                           0000C9   288 _T2MOD	=	0x00c9
                           00009B   289 _BDRCON	=	0x009b
                           00009A   290 _BRL	=	0x009a
                           00009C   291 _KBLS	=	0x009c
                           00009D   292 _KBE	=	0x009d
                           00009E   293 _KBF	=	0x009e
                           0000D2   294 _EECON	=	0x00d2
                           0000E0   295 _ACC	=	0x00e0
                           0000F0   296 _B	=	0x00f0
                           000083   297 _DPH	=	0x0083
                           000083   298 _DP0H	=	0x0083
                           000082   299 _DPL	=	0x0082
                           000082   300 _DP0L	=	0x0082
                           0000A8   301 _IE	=	0x00a8
                           0000B8   302 _IP	=	0x00b8
                           000080   303 _P0	=	0x0080
                           000090   304 _P1	=	0x0090
                           0000A0   305 _P2	=	0x00a0
                           0000B0   306 _P3	=	0x00b0
                           000087   307 _PCON	=	0x0087
                           0000D0   308 _PSW	=	0x00d0
                           000099   309 _SBUF	=	0x0099
                           000099   310 _SBUF0	=	0x0099
                           000098   311 _SCON	=	0x0098
                           000081   312 _SP	=	0x0081
                           000088   313 _TCON	=	0x0088
                           00008C   314 _TH0	=	0x008c
                           00008D   315 _TH1	=	0x008d
                           00008A   316 _TL0	=	0x008a
                           00008B   317 _TL1	=	0x008b
                           000089   318 _TMOD	=	0x0089
                                    319 ;--------------------------------------------------------
                                    320 ; special function bits
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           0000AD   324 _ET2	=	0x00ad
                           0000BD   325 _PT2	=	0x00bd
                           0000C8   326 _T2CON_0	=	0x00c8
                           0000C9   327 _T2CON_1	=	0x00c9
                           0000CA   328 _T2CON_2	=	0x00ca
                           0000CB   329 _T2CON_3	=	0x00cb
                           0000CC   330 _T2CON_4	=	0x00cc
                           0000CD   331 _T2CON_5	=	0x00cd
                           0000CE   332 _T2CON_6	=	0x00ce
                           0000CF   333 _T2CON_7	=	0x00cf
                           0000C8   334 _CP_RL2	=	0x00c8
                           0000C9   335 _C_T2	=	0x00c9
                           0000CA   336 _TR2	=	0x00ca
                           0000CB   337 _EXEN2	=	0x00cb
                           0000CC   338 _TCLK	=	0x00cc
                           0000CD   339 _RCLK	=	0x00cd
                           0000CE   340 _EXF2	=	0x00ce
                           0000CF   341 _TF2	=	0x00cf
                           0000DF   342 _CF	=	0x00df
                           0000DE   343 _CR	=	0x00de
                           0000DC   344 _CCF4	=	0x00dc
                           0000DB   345 _CCF3	=	0x00db
                           0000DA   346 _CCF2	=	0x00da
                           0000D9   347 _CCF1	=	0x00d9
                           0000D8   348 _CCF0	=	0x00d8
                           0000AE   349 _EC	=	0x00ae
                           0000BE   350 _PPCL	=	0x00be
                           0000BD   351 _PT2L	=	0x00bd
                           0000BC   352 _PSL	=	0x00bc
                           0000BB   353 _PT1L	=	0x00bb
                           0000BA   354 _PX1L	=	0x00ba
                           0000B9   355 _PT0L	=	0x00b9
                           0000B8   356 _PX0L	=	0x00b8
                           0000C0   357 _P4_0	=	0x00c0
                           0000C1   358 _P4_1	=	0x00c1
                           0000C2   359 _P4_2	=	0x00c2
                           0000C3   360 _P4_3	=	0x00c3
                           0000C4   361 _P4_4	=	0x00c4
                           0000C5   362 _P4_5	=	0x00c5
                           0000C6   363 _P4_6	=	0x00c6
                           0000C7   364 _P4_7	=	0x00c7
                           0000E8   365 _P5_0	=	0x00e8
                           0000E9   366 _P5_1	=	0x00e9
                           0000EA   367 _P5_2	=	0x00ea
                           0000EB   368 _P5_3	=	0x00eb
                           0000EC   369 _P5_4	=	0x00ec
                           0000ED   370 _P5_5	=	0x00ed
                           0000EE   371 _P5_6	=	0x00ee
                           0000EF   372 _P5_7	=	0x00ef
                           0000F0   373 _BREG_F0	=	0x00f0
                           0000F1   374 _BREG_F1	=	0x00f1
                           0000F2   375 _BREG_F2	=	0x00f2
                           0000F3   376 _BREG_F3	=	0x00f3
                           0000F4   377 _BREG_F4	=	0x00f4
                           0000F5   378 _BREG_F5	=	0x00f5
                           0000F6   379 _BREG_F6	=	0x00f6
                           0000F7   380 _BREG_F7	=	0x00f7
                           0000A8   381 _EX0	=	0x00a8
                           0000A9   382 _ET0	=	0x00a9
                           0000AA   383 _EX1	=	0x00aa
                           0000AB   384 _ET1	=	0x00ab
                           0000AC   385 _ES	=	0x00ac
                           0000AF   386 _EA	=	0x00af
                           0000B8   387 _PX0	=	0x00b8
                           0000B9   388 _PT0	=	0x00b9
                           0000BA   389 _PX1	=	0x00ba
                           0000BB   390 _PT1	=	0x00bb
                           0000BC   391 _PS	=	0x00bc
                           000080   392 _P0_0	=	0x0080
                           000081   393 _P0_1	=	0x0081
                           000082   394 _P0_2	=	0x0082
                           000083   395 _P0_3	=	0x0083
                           000084   396 _P0_4	=	0x0084
                           000085   397 _P0_5	=	0x0085
                           000086   398 _P0_6	=	0x0086
                           000087   399 _P0_7	=	0x0087
                           000090   400 _P1_0	=	0x0090
                           000091   401 _P1_1	=	0x0091
                           000092   402 _P1_2	=	0x0092
                           000093   403 _P1_3	=	0x0093
                           000094   404 _P1_4	=	0x0094
                           000095   405 _P1_5	=	0x0095
                           000096   406 _P1_6	=	0x0096
                           000097   407 _P1_7	=	0x0097
                           0000A0   408 _P2_0	=	0x00a0
                           0000A1   409 _P2_1	=	0x00a1
                           0000A2   410 _P2_2	=	0x00a2
                           0000A3   411 _P2_3	=	0x00a3
                           0000A4   412 _P2_4	=	0x00a4
                           0000A5   413 _P2_5	=	0x00a5
                           0000A6   414 _P2_6	=	0x00a6
                           0000A7   415 _P2_7	=	0x00a7
                           0000B0   416 _P3_0	=	0x00b0
                           0000B1   417 _P3_1	=	0x00b1
                           0000B2   418 _P3_2	=	0x00b2
                           0000B3   419 _P3_3	=	0x00b3
                           0000B4   420 _P3_4	=	0x00b4
                           0000B5   421 _P3_5	=	0x00b5
                           0000B6   422 _P3_6	=	0x00b6
                           0000B7   423 _P3_7	=	0x00b7
                           0000B0   424 _RXD	=	0x00b0
                           0000B0   425 _RXD0	=	0x00b0
                           0000B1   426 _TXD	=	0x00b1
                           0000B1   427 _TXD0	=	0x00b1
                           0000B2   428 _INT0	=	0x00b2
                           0000B3   429 _INT1	=	0x00b3
                           0000B4   430 _T0	=	0x00b4
                           0000B5   431 _T1	=	0x00b5
                           0000B6   432 _WR	=	0x00b6
                           0000B7   433 _RD	=	0x00b7
                           0000D0   434 _P	=	0x00d0
                           0000D1   435 _F1	=	0x00d1
                           0000D2   436 _OV	=	0x00d2
                           0000D3   437 _RS0	=	0x00d3
                           0000D4   438 _RS1	=	0x00d4
                           0000D5   439 _F0	=	0x00d5
                           0000D6   440 _AC	=	0x00d6
                           0000D7   441 _CY	=	0x00d7
                           000098   442 _RI	=	0x0098
                           000099   443 _TI	=	0x0099
                           00009A   444 _RB8	=	0x009a
                           00009B   445 _TB8	=	0x009b
                           00009C   446 _REN	=	0x009c
                           00009D   447 _SM2	=	0x009d
                           00009E   448 _SM1	=	0x009e
                           00009F   449 _SM0	=	0x009f
                           000088   450 _IT0	=	0x0088
                           000089   451 _IE0	=	0x0089
                           00008A   452 _IT1	=	0x008a
                           00008B   453 _IE1	=	0x008b
                           00008C   454 _TR0	=	0x008c
                           00008D   455 _TF0	=	0x008d
                           00008E   456 _TR1	=	0x008e
                           00008F   457 _TF1	=	0x008f
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable register banks
                                    460 ;--------------------------------------------------------
                                    461 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        462 	.ds 8
                                    463 ;--------------------------------------------------------
                                    464 ; overlayable bit register bank
                                    465 ;--------------------------------------------------------
                                    466 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        467 bits:
      000000                        468 	.ds 1
                           008000   469 	b0 = bits[0]
                           008100   470 	b1 = bits[1]
                           008200   471 	b2 = bits[2]
                           008300   472 	b3 = bits[3]
                           008400   473 	b4 = bits[4]
                           008500   474 	b5 = bits[5]
                           008600   475 	b6 = bits[6]
                           008700   476 	b7 = bits[7]
                                    477 ;--------------------------------------------------------
                                    478 ; internal ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area DSEG    (DATA)
      000000                        481 _enc_init_sloc0_1_0:
      000000                        482 	.ds 3
      000003                        483 _enc_init_sloc1_1_0:
      000003                        484 	.ds 3
      000006                        485 _enc_init_sloc2_1_0:
      000006                        486 	.ds 3
      000009                        487 _enc_init_sloc3_1_0:
      000009                        488 	.ds 3
                                    489 ;--------------------------------------------------------
                                    490 ; overlayable items in internal ram
                                    491 ;--------------------------------------------------------
                                    492 ;--------------------------------------------------------
                                    493 ; indirectly addressable internal ram data
                                    494 ;--------------------------------------------------------
                                    495 	.area ISEG    (DATA)
                                    496 ;--------------------------------------------------------
                                    497 ; absolute internal ram data
                                    498 ;--------------------------------------------------------
                                    499 	.area IABS    (ABS,DATA)
                                    500 	.area IABS    (ABS,DATA)
                                    501 ;--------------------------------------------------------
                                    502 ; bit data
                                    503 ;--------------------------------------------------------
                                    504 	.area BSEG    (BIT)
      000000                        505 _enc28j60_transmission_successful_sloc0_1_0:
      000000                        506 	.ds 1
                                    507 ;--------------------------------------------------------
                                    508 ; paged external ram data
                                    509 ;--------------------------------------------------------
                                    510 	.area PSEG    (PAG,XDATA)
                                    511 ;--------------------------------------------------------
                                    512 ; uninitialized external ram data
                                    513 ;--------------------------------------------------------
                                    514 	.area XSEG    (XDATA)
      000000                        515 _delay_ms_ms_10000_73:
      000000                        516 	.ds 2
      000002                        517 _delay_ms_i_20000_75:
      000002                        518 	.ds 4
      000006                        519 _enc28j60_set_transmit_pointers_PARM_2:
      000006                        520 	.ds 2
      000008                        521 _enc28j60_set_transmit_pointers_start_address_10000_79:
      000008                        522 	.ds 2
      00000A                        523 _wait_for_transmission_complete_timeout_ms_10000_81:
      00000A                        524 	.ds 2
      00000C                        525 _send_arp_request_source_mac_10000_91:
      00000C                        526 	.ds 6
      000012                        527 _send_arp_request_dest_mac_10000_91:
      000012                        528 	.ds 6
      000018                        529 _send_arp_request_source_ip_10000_91:
      000018                        530 	.ds 4
      00001C                        531 _send_arp_request_target_ip_10000_91:
      00001C                        532 	.ds 4
      000020                        533 _send_arp_request_arp_packet_10000_91:
      000020                        534 	.ds 43
      00004B                        535 _enc_buffer_init_PARM_2:
      00004B                        536 	.ds 2
      00004D                        537 _enc_buffer_init_start_address_10000_111:
      00004D                        538 	.ds 2
      00004F                        539 _enc_init_mac_10000_114:
      00004F                        540 	.ds 3
                                    541 ;--------------------------------------------------------
                                    542 ; absolute external ram data
                                    543 ;--------------------------------------------------------
                                    544 	.area XABS    (ABS,XDATA)
                                    545 ;--------------------------------------------------------
                                    546 ; initialized external ram data
                                    547 ;--------------------------------------------------------
                                    548 	.area XISEG   (XDATA)
                                    549 	.area HOME    (CODE)
                                    550 	.area GSINIT0 (CODE)
                                    551 	.area GSINIT1 (CODE)
                                    552 	.area GSINIT2 (CODE)
                                    553 	.area GSINIT3 (CODE)
                                    554 	.area GSINIT4 (CODE)
                                    555 	.area GSINIT5 (CODE)
                                    556 	.area GSINIT  (CODE)
                                    557 	.area GSFINAL (CODE)
                                    558 	.area CSEG    (CODE)
                                    559 ;--------------------------------------------------------
                                    560 ; global & static initialisations
                                    561 ;--------------------------------------------------------
                                    562 	.area HOME    (CODE)
                                    563 	.area GSINIT  (CODE)
                                    564 	.area GSFINAL (CODE)
                                    565 	.area GSINIT  (CODE)
                                    566 ;--------------------------------------------------------
                                    567 ; Home
                                    568 ;--------------------------------------------------------
                                    569 	.area HOME    (CODE)
                                    570 	.area HOME    (CODE)
                                    571 ;--------------------------------------------------------
                                    572 ; code
                                    573 ;--------------------------------------------------------
                                    574 	.area CSEG    (CODE)
                                    575 ;------------------------------------------------------------
                                    576 ;Allocation info for local variables in function 'delay_ms'
                                    577 ;------------------------------------------------------------
                                    578 ;ms                        Allocated with name '_delay_ms_ms_10000_73'
                                    579 ;i                         Allocated with name '_delay_ms_i_20000_75'
                                    580 ;------------------------------------------------------------
                                    581 ;	Eth.c:48: void delay_ms(uint16_t ms)
                                    582 ;	-----------------------------------------
                                    583 ;	 function delay_ms
                                    584 ;	-----------------------------------------
      000000                        585 _delay_ms:
                           000007   586 	ar7 = 0x07
                           000006   587 	ar6 = 0x06
                           000005   588 	ar5 = 0x05
                           000004   589 	ar4 = 0x04
                           000003   590 	ar3 = 0x03
                           000002   591 	ar2 = 0x02
                           000001   592 	ar1 = 0x01
                           000000   593 	ar0 = 0x00
      000000 AF 83            [24]  594 	mov	r7,dph
      000002 E5 82            [12]  595 	mov	a,dpl
      000004 90r00r00         [24]  596 	mov	dptr,#_delay_ms_ms_10000_73
      000007 F0               [24]  597 	movx	@dptr,a
      000008 EF               [12]  598 	mov	a,r7
      000009 A3               [24]  599 	inc	dptr
      00000A F0               [24]  600 	movx	@dptr,a
                                    601 ;	Eth.c:50: for (volatile uint32_t i = 0; i < ms * 1000; i++)
      00000B 90r00r02         [24]  602 	mov	dptr,#_delay_ms_i_20000_75
      00000E E4               [12]  603 	clr	a
      00000F F0               [24]  604 	movx	@dptr,a
      000010 A3               [24]  605 	inc	dptr
      000011 F0               [24]  606 	movx	@dptr,a
      000012 A3               [24]  607 	inc	dptr
      000013 F0               [24]  608 	movx	@dptr,a
      000014 A3               [24]  609 	inc	dptr
      000015 F0               [24]  610 	movx	@dptr,a
      000016 90r00r00         [24]  611 	mov	dptr,#_delay_ms_ms_10000_73
      000019 E0               [24]  612 	movx	a,@dptr
      00001A FE               [12]  613 	mov	r6,a
      00001B A3               [24]  614 	inc	dptr
      00001C E0               [24]  615 	movx	a,@dptr
      00001D FF               [12]  616 	mov	r7,a
      00001E                        617 00103$:
      00001E 90r00r00         [24]  618 	mov	dptr,#__mulint_PARM_2
      000021 EE               [12]  619 	mov	a,r6
      000022 F0               [24]  620 	movx	@dptr,a
      000023 EF               [12]  621 	mov	a,r7
      000024 A3               [24]  622 	inc	dptr
      000025 F0               [24]  623 	movx	@dptr,a
      000026 90 03 E8         [24]  624 	mov	dptr,#0x03e8
      000029 C0 07            [24]  625 	push	ar7
      00002B C0 06            [24]  626 	push	ar6
      00002D 12r00r00         [24]  627 	lcall	__mulint
      000030 AC 82            [24]  628 	mov	r4, dpl
      000032 AD 83            [24]  629 	mov	r5, dph
      000034 D0 06            [24]  630 	pop	ar6
      000036 D0 07            [24]  631 	pop	ar7
      000038 90r00r02         [24]  632 	mov	dptr,#_delay_ms_i_20000_75
      00003B E0               [24]  633 	movx	a,@dptr
      00003C F8               [12]  634 	mov	r0,a
      00003D A3               [24]  635 	inc	dptr
      00003E E0               [24]  636 	movx	a,@dptr
      00003F F9               [12]  637 	mov	r1,a
      000040 A3               [24]  638 	inc	dptr
      000041 E0               [24]  639 	movx	a,@dptr
      000042 FA               [12]  640 	mov	r2,a
      000043 A3               [24]  641 	inc	dptr
      000044 E0               [24]  642 	movx	a,@dptr
      000045 FB               [12]  643 	mov	r3,a
      000046 C0 06            [24]  644 	push	ar6
      000048 C0 07            [24]  645 	push	ar7
      00004A 7E 00            [12]  646 	mov	r6,#0x00
      00004C 7F 00            [12]  647 	mov	r7,#0x00
      00004E C3               [12]  648 	clr	c
      00004F E8               [12]  649 	mov	a,r0
      000050 9C               [12]  650 	subb	a,r4
      000051 E9               [12]  651 	mov	a,r1
      000052 9D               [12]  652 	subb	a,r5
      000053 EA               [12]  653 	mov	a,r2
      000054 9E               [12]  654 	subb	a,r6
      000055 EB               [12]  655 	mov	a,r3
      000056 9F               [12]  656 	subb	a,r7
      000057 D0 07            [24]  657 	pop	ar7
      000059 D0 06            [24]  658 	pop	ar6
      00005B 50 23            [24]  659 	jnc	00105$
      00005D 90r00r02         [24]  660 	mov	dptr,#_delay_ms_i_20000_75
      000060 E0               [24]  661 	movx	a,@dptr
      000061 FA               [12]  662 	mov	r2,a
      000062 A3               [24]  663 	inc	dptr
      000063 E0               [24]  664 	movx	a,@dptr
      000064 FB               [12]  665 	mov	r3,a
      000065 A3               [24]  666 	inc	dptr
      000066 E0               [24]  667 	movx	a,@dptr
      000067 FC               [12]  668 	mov	r4,a
      000068 A3               [24]  669 	inc	dptr
      000069 E0               [24]  670 	movx	a,@dptr
      00006A FD               [12]  671 	mov	r5,a
      00006B 90r00r02         [24]  672 	mov	dptr,#_delay_ms_i_20000_75
      00006E 74 01            [12]  673 	mov	a,#0x01
      000070 2A               [12]  674 	add	a, r2
      000071 F0               [24]  675 	movx	@dptr,a
      000072 E4               [12]  676 	clr	a
      000073 3B               [12]  677 	addc	a, r3
      000074 A3               [24]  678 	inc	dptr
      000075 F0               [24]  679 	movx	@dptr,a
      000076 E4               [12]  680 	clr	a
      000077 3C               [12]  681 	addc	a, r4
      000078 A3               [24]  682 	inc	dptr
      000079 F0               [24]  683 	movx	@dptr,a
      00007A E4               [12]  684 	clr	a
      00007B 3D               [12]  685 	addc	a, r5
      00007C A3               [24]  686 	inc	dptr
      00007D F0               [24]  687 	movx	@dptr,a
      00007E 80 9E            [24]  688 	sjmp	00103$
      000080                        689 00105$:
                                    690 ;	Eth.c:54: }
      000080 22               [24]  691 	ret
                                    692 ;------------------------------------------------------------
                                    693 ;Allocation info for local variables in function 'enc28j60_start_transmission'
                                    694 ;------------------------------------------------------------
                                    695 ;econ1                     Allocated with name '_enc28j60_start_transmission_econ1_10000_78'
                                    696 ;------------------------------------------------------------
                                    697 ;	Eth.c:56: void enc28j60_start_transmission(void)
                                    698 ;	-----------------------------------------
                                    699 ;	 function enc28j60_start_transmission
                                    700 ;	-----------------------------------------
      000081                        701 _enc28j60_start_transmission:
                                    702 ;	Eth.c:58: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      000081 90r00r00         [24]  703 	mov	dptr,#_mac_spi_read_PARM_2
      000084 E4               [12]  704 	clr	a
      000085 F0               [24]  705 	movx	@dptr,a
      000086 75 82 1F         [24]  706 	mov	dpl, #0x1f
      000089 12r00r00         [24]  707 	lcall	_mac_spi_read
      00008C E5 82            [12]  708 	mov	a, dpl
                                    709 ;	Eth.c:59: econ1 |= 0x08; // Set TXRTS (bit 3)
      00008E 44 08            [12]  710 	orl	a,#0x08
      000090 FF               [12]  711 	mov	r7,a
                                    712 ;	Eth.c:60: spi_control_write(0, 0x1F, econ1); // Write back to ECON1
      000091 90r00r00         [24]  713 	mov	dptr,#_spi_control_write_PARM_2
      000094 74 1F            [12]  714 	mov	a,#0x1f
      000096 F0               [24]  715 	movx	@dptr,a
      000097 90r00r00         [24]  716 	mov	dptr,#_spi_control_write_PARM_3
      00009A EF               [12]  717 	mov	a,r7
      00009B F0               [24]  718 	movx	@dptr,a
      00009C 75 82 00         [24]  719 	mov	dpl, #0x00
                                    720 ;	Eth.c:61: }
      00009F 02r00r00         [24]  721 	ljmp	_spi_control_write
                                    722 ;------------------------------------------------------------
                                    723 ;Allocation info for local variables in function 'enc28j60_set_transmit_pointers'
                                    724 ;------------------------------------------------------------
                                    725 ;end_address               Allocated with name '_enc28j60_set_transmit_pointers_PARM_2'
                                    726 ;start_address             Allocated with name '_enc28j60_set_transmit_pointers_start_address_10000_79'
                                    727 ;------------------------------------------------------------
                                    728 ;	Eth.c:64: void enc28j60_set_transmit_pointers(uint16_t start_address, uint16_t end_address)
                                    729 ;	-----------------------------------------
                                    730 ;	 function enc28j60_set_transmit_pointers
                                    731 ;	-----------------------------------------
      0000A2                        732 _enc28j60_set_transmit_pointers:
      0000A2 AF 83            [24]  733 	mov	r7,dph
      0000A4 E5 82            [12]  734 	mov	a,dpl
      0000A6 90r00r08         [24]  735 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_79
      0000A9 F0               [24]  736 	movx	@dptr,a
      0000AA EF               [12]  737 	mov	a,r7
      0000AB A3               [24]  738 	inc	dptr
      0000AC F0               [24]  739 	movx	@dptr,a
                                    740 ;	Eth.c:67: spi_control_write(0, 0x04, (uint8_t)(start_address & 0xFF)); // Low byte
      0000AD 90r00r08         [24]  741 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_79
      0000B0 E0               [24]  742 	movx	a,@dptr
      0000B1 FE               [12]  743 	mov	r6,a
      0000B2 A3               [24]  744 	inc	dptr
      0000B3 E0               [24]  745 	movx	a,@dptr
      0000B4 FF               [12]  746 	mov	r7,a
      0000B5 8E 05            [24]  747 	mov	ar5,r6
      0000B7 90r00r00         [24]  748 	mov	dptr,#_spi_control_write_PARM_2
      0000BA 74 04            [12]  749 	mov	a,#0x04
      0000BC F0               [24]  750 	movx	@dptr,a
      0000BD 90r00r00         [24]  751 	mov	dptr,#_spi_control_write_PARM_3
      0000C0 ED               [12]  752 	mov	a,r5
      0000C1 F0               [24]  753 	movx	@dptr,a
      0000C2 75 82 00         [24]  754 	mov	dpl, #0x00
      0000C5 C0 07            [24]  755 	push	ar7
      0000C7 C0 06            [24]  756 	push	ar6
      0000C9 12r00r00         [24]  757 	lcall	_spi_control_write
      0000CC D0 06            [24]  758 	pop	ar6
      0000CE D0 07            [24]  759 	pop	ar7
                                    760 ;	Eth.c:68: spi_control_write(0, 0x05, (uint8_t)((start_address >> 8) & 0xFF)); // High byte
      0000D0 8F 06            [24]  761 	mov	ar6,r7
      0000D2 90r00r00         [24]  762 	mov	dptr,#_spi_control_write_PARM_2
      0000D5 74 05            [12]  763 	mov	a,#0x05
      0000D7 F0               [24]  764 	movx	@dptr,a
      0000D8 90r00r00         [24]  765 	mov	dptr,#_spi_control_write_PARM_3
      0000DB EE               [12]  766 	mov	a,r6
      0000DC F0               [24]  767 	movx	@dptr,a
      0000DD 75 82 00         [24]  768 	mov	dpl, #0x00
      0000E0 12r00r00         [24]  769 	lcall	_spi_control_write
                                    770 ;	Eth.c:71: spi_control_write(0, 0x06, (uint8_t)(end_address & 0xFF)); // Low byte
      0000E3 90r00r06         [24]  771 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      0000E6 E0               [24]  772 	movx	a,@dptr
      0000E7 FE               [12]  773 	mov	r6,a
      0000E8 A3               [24]  774 	inc	dptr
      0000E9 E0               [24]  775 	movx	a,@dptr
      0000EA FF               [12]  776 	mov	r7,a
      0000EB 8E 05            [24]  777 	mov	ar5,r6
      0000ED 90r00r00         [24]  778 	mov	dptr,#_spi_control_write_PARM_2
      0000F0 74 06            [12]  779 	mov	a,#0x06
      0000F2 F0               [24]  780 	movx	@dptr,a
      0000F3 90r00r00         [24]  781 	mov	dptr,#_spi_control_write_PARM_3
      0000F6 ED               [12]  782 	mov	a,r5
      0000F7 F0               [24]  783 	movx	@dptr,a
      0000F8 75 82 00         [24]  784 	mov	dpl, #0x00
      0000FB C0 07            [24]  785 	push	ar7
      0000FD C0 06            [24]  786 	push	ar6
      0000FF 12r00r00         [24]  787 	lcall	_spi_control_write
      000102 D0 06            [24]  788 	pop	ar6
      000104 D0 07            [24]  789 	pop	ar7
                                    790 ;	Eth.c:72: spi_control_write(0, 0x07, (uint8_t)((end_address >> 8) & 0xFF)); // High byte
      000106 8F 06            [24]  791 	mov	ar6,r7
      000108 90r00r00         [24]  792 	mov	dptr,#_spi_control_write_PARM_2
      00010B 74 07            [12]  793 	mov	a,#0x07
      00010D F0               [24]  794 	movx	@dptr,a
      00010E 90r00r00         [24]  795 	mov	dptr,#_spi_control_write_PARM_3
      000111 EE               [12]  796 	mov	a,r6
      000112 F0               [24]  797 	movx	@dptr,a
      000113 75 82 00         [24]  798 	mov	dpl, #0x00
                                    799 ;	Eth.c:73: }
      000116 02r00r00         [24]  800 	ljmp	_spi_control_write
                                    801 ;------------------------------------------------------------
                                    802 ;Allocation info for local variables in function 'wait_for_transmission_complete'
                                    803 ;------------------------------------------------------------
                                    804 ;timeout_ms                Allocated with name '_wait_for_transmission_complete_timeout_ms_10000_81'
                                    805 ;elapsed                   Allocated with name '_wait_for_transmission_complete_elapsed_10000_82'
                                    806 ;econ1                     Allocated with name '_wait_for_transmission_complete_econ1_20000_83'
                                    807 ;------------------------------------------------------------
                                    808 ;	Eth.c:75: bool wait_for_transmission_complete(uint16_t timeout_ms)
                                    809 ;	-----------------------------------------
                                    810 ;	 function wait_for_transmission_complete
                                    811 ;	-----------------------------------------
      000119                        812 _wait_for_transmission_complete:
      000119 AF 83            [24]  813 	mov	r7,dph
      00011B E5 82            [12]  814 	mov	a,dpl
      00011D 90r00r0A         [24]  815 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_81
      000120 F0               [24]  816 	movx	@dptr,a
      000121 EF               [12]  817 	mov	a,r7
      000122 A3               [24]  818 	inc	dptr
      000123 F0               [24]  819 	movx	@dptr,a
                                    820 ;	Eth.c:79: while (elapsed < timeout_ms) {
      000124 90r00r0A         [24]  821 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_81
      000127 E0               [24]  822 	movx	a,@dptr
      000128 FE               [12]  823 	mov	r6,a
      000129 A3               [24]  824 	inc	dptr
      00012A E0               [24]  825 	movx	a,@dptr
      00012B FF               [12]  826 	mov	r7,a
      00012C 7C 00            [12]  827 	mov	r4,#0x00
      00012E 7D 00            [12]  828 	mov	r5,#0x00
      000130                        829 00103$:
      000130 C3               [12]  830 	clr	c
      000131 EC               [12]  831 	mov	a,r4
      000132 9E               [12]  832 	subb	a,r6
      000133 ED               [12]  833 	mov	a,r5
      000134 9F               [12]  834 	subb	a,r7
      000135 50 41            [24]  835 	jnc	00105$
                                    836 ;	Eth.c:80: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      000137 90r00r00         [24]  837 	mov	dptr,#_mac_spi_read_PARM_2
      00013A E4               [12]  838 	clr	a
      00013B F0               [24]  839 	movx	@dptr,a
      00013C 75 82 1F         [24]  840 	mov	dpl, #0x1f
      00013F C0 07            [24]  841 	push	ar7
      000141 C0 06            [24]  842 	push	ar6
      000143 C0 05            [24]  843 	push	ar5
      000145 C0 04            [24]  844 	push	ar4
      000147 12r00r00         [24]  845 	lcall	_mac_spi_read
      00014A E5 82            [12]  846 	mov	a, dpl
      00014C D0 04            [24]  847 	pop	ar4
      00014E D0 05            [24]  848 	pop	ar5
      000150 D0 06            [24]  849 	pop	ar6
      000152 D0 07            [24]  850 	pop	ar7
                                    851 ;	Eth.c:81: if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
      000154 20 E3 04         [24]  852 	jb	acc.3,00102$
                                    853 ;	Eth.c:82: return true;  // Transmission completed
      000157 75 82 01         [24]  854 	mov	dpl, #0x01
      00015A 22               [24]  855 	ret
      00015B                        856 00102$:
                                    857 ;	Eth.c:85: delay_ms(1);  // Wait 1 ms
      00015B 90 00 01         [24]  858 	mov	dptr,#0x0001
      00015E C0 07            [24]  859 	push	ar7
      000160 C0 06            [24]  860 	push	ar6
      000162 C0 05            [24]  861 	push	ar5
      000164 C0 04            [24]  862 	push	ar4
      000166 12r00r00         [24]  863 	lcall	_delay_ms
      000169 D0 04            [24]  864 	pop	ar4
      00016B D0 05            [24]  865 	pop	ar5
      00016D D0 06            [24]  866 	pop	ar6
      00016F D0 07            [24]  867 	pop	ar7
                                    868 ;	Eth.c:86: elapsed++;
      000171 0C               [12]  869 	inc	r4
      000172 BC 00 BB         [24]  870 	cjne	r4,#0x00,00103$
      000175 0D               [12]  871 	inc	r5
      000176 80 B8            [24]  872 	sjmp	00103$
      000178                        873 00105$:
                                    874 ;	Eth.c:89: return false;  // Timed out
      000178 75 82 00         [24]  875 	mov	dpl, #0x00
                                    876 ;	Eth.c:90: }
      00017B 22               [24]  877 	ret
                                    878 ;------------------------------------------------------------
                                    879 ;Allocation info for local variables in function 'enc28j60_transmission_successful'
                                    880 ;------------------------------------------------------------
                                    881 ;estat                     Allocated with name '_enc28j60_transmission_successful_estat_10000_85'
                                    882 ;------------------------------------------------------------
                                    883 ;	Eth.c:92: bool enc28j60_transmission_successful()
                                    884 ;	-----------------------------------------
                                    885 ;	 function enc28j60_transmission_successful
                                    886 ;	-----------------------------------------
      00017C                        887 _enc28j60_transmission_successful:
                                    888 ;	Eth.c:94: uint8_t estat = mac_spi_read(0x1D, 0); // Read ESTAT
      00017C 90r00r00         [24]  889 	mov	dptr,#_mac_spi_read_PARM_2
      00017F E4               [12]  890 	clr	a
      000180 F0               [24]  891 	movx	@dptr,a
      000181 75 82 1D         [24]  892 	mov	dpl, #0x1d
      000184 12r00r00         [24]  893 	lcall	_mac_spi_read
                                    894 ;	Eth.c:95: return !(estat & 0x02); // Check if TXABRT (bit 1) is not set
      000187 E5 82            [12]  895 	mov	a,dpl
      000189 03               [12]  896 	rr	a
      00018A 54 01            [12]  897 	anl	a,#0x01
      00018C B4 01 00         [24]  898 	cjne	a,#0x01,00103$
      00018F                        899 00103$:
      00018F 92*00            [24]  900 	mov  _enc28j60_transmission_successful_sloc0_1_0,c
      000191 E4               [12]  901 	clr	a
      000192 33               [12]  902 	rlc	a
      000193 F5 82            [12]  903 	mov	dpl, a
                                    904 ;	Eth.c:96: }
      000195 22               [24]  905 	ret
                                    906 ;------------------------------------------------------------
                                    907 ;Allocation info for local variables in function 'RX_disable'
                                    908 ;------------------------------------------------------------
                                    909 ;econ1_value               Allocated with name '_RX_disable_econ1_value_10000_87'
                                    910 ;------------------------------------------------------------
                                    911 ;	Eth.c:97: void RX_disable(void)
                                    912 ;	-----------------------------------------
                                    913 ;	 function RX_disable
                                    914 ;	-----------------------------------------
      000196                        915 _RX_disable:
                                    916 ;	Eth.c:99: uint8_t econ1_value = mac_spi_read(0x1F, 0); // Read ECON1
      000196 90r00r00         [24]  917 	mov	dptr,#_mac_spi_read_PARM_2
      000199 E4               [12]  918 	clr	a
      00019A F0               [24]  919 	movx	@dptr,a
      00019B 75 82 1F         [24]  920 	mov	dpl, #0x1f
      00019E 12r00r00         [24]  921 	lcall	_mac_spi_read
      0001A1 E5 82            [12]  922 	mov	a, dpl
                                    923 ;	Eth.c:102: econ1_value &= ~(0x04);
      0001A3 54 FB            [12]  924 	anl	a,#0xfb
      0001A5 FF               [12]  925 	mov	r7,a
                                    926 ;	Eth.c:105: spi_control_write(0, 0x1F, econ1_value); // Write back to ECON1
      0001A6 90r00r00         [24]  927 	mov	dptr,#_spi_control_write_PARM_2
      0001A9 74 1F            [12]  928 	mov	a,#0x1f
      0001AB F0               [24]  929 	movx	@dptr,a
      0001AC 90r00r00         [24]  930 	mov	dptr,#_spi_control_write_PARM_3
      0001AF EF               [12]  931 	mov	a,r7
      0001B0 F0               [24]  932 	movx	@dptr,a
      0001B1 75 82 00         [24]  933 	mov	dpl, #0x00
                                    934 ;	Eth.c:106: }
      0001B4 02r00r00         [24]  935 	ljmp	_spi_control_write
                                    936 ;------------------------------------------------------------
                                    937 ;Allocation info for local variables in function 'RX_enable'
                                    938 ;------------------------------------------------------------
                                    939 ;econ1_value               Allocated with name '_RX_enable_econ1_value_10000_89'
                                    940 ;------------------------------------------------------------
                                    941 ;	Eth.c:108: void RX_enable(void)
                                    942 ;	-----------------------------------------
                                    943 ;	 function RX_enable
                                    944 ;	-----------------------------------------
      0001B7                        945 _RX_enable:
                                    946 ;	Eth.c:110: uint8_t econ1_value = mac_spi_read(0x1F, 0); // Read ECON1
      0001B7 90r00r00         [24]  947 	mov	dptr,#_mac_spi_read_PARM_2
      0001BA E4               [12]  948 	clr	a
      0001BB F0               [24]  949 	movx	@dptr,a
      0001BC 75 82 1F         [24]  950 	mov	dpl, #0x1f
      0001BF 12r00r00         [24]  951 	lcall	_mac_spi_read
      0001C2 E5 82            [12]  952 	mov	a, dpl
                                    953 ;	Eth.c:113: econ1_value |= 0x04;
      0001C4 44 04            [12]  954 	orl	a,#0x04
      0001C6 FF               [12]  955 	mov	r7,a
                                    956 ;	Eth.c:116: spi_control_write(0, 0x1F, econ1_value); // Write back to ECON1
      0001C7 90r00r00         [24]  957 	mov	dptr,#_spi_control_write_PARM_2
      0001CA 74 1F            [12]  958 	mov	a,#0x1f
      0001CC F0               [24]  959 	movx	@dptr,a
      0001CD 90r00r00         [24]  960 	mov	dptr,#_spi_control_write_PARM_3
      0001D0 EF               [12]  961 	mov	a,r7
      0001D1 F0               [24]  962 	movx	@dptr,a
      0001D2 75 82 00         [24]  963 	mov	dpl, #0x00
                                    964 ;	Eth.c:117: }
      0001D5 02r00r00         [24]  965 	ljmp	_spi_control_write
                                    966 ;------------------------------------------------------------
                                    967 ;Allocation info for local variables in function 'send_arp_request'
                                    968 ;------------------------------------------------------------
                                    969 ;source_mac                Allocated with name '_send_arp_request_source_mac_10000_91'
                                    970 ;dest_mac                  Allocated with name '_send_arp_request_dest_mac_10000_91'
                                    971 ;source_ip                 Allocated with name '_send_arp_request_source_ip_10000_91'
                                    972 ;target_ip                 Allocated with name '_send_arp_request_target_ip_10000_91'
                                    973 ;arp_packet                Allocated with name '_send_arp_request_arp_packet_10000_91'
                                    974 ;i                         Allocated with name '_send_arp_request_i_20000_92'
                                    975 ;i                         Allocated with name '_send_arp_request_i_20000_94'
                                    976 ;i                         Allocated with name '_send_arp_request_i_20000_96'
                                    977 ;i                         Allocated with name '_send_arp_request_i_20000_98'
                                    978 ;i                         Allocated with name '_send_arp_request_i_20000_100'
                                    979 ;frame_size                Allocated with name '_send_arp_request_frame_size_10001_102'
                                    980 ;start_address             Allocated with name '_send_arp_request_start_address_10001_102'
                                    981 ;end_address               Allocated with name '_send_arp_request_end_address_10002_104'
                                    982 ;------------------------------------------------------------
                                    983 ;	Eth.c:119: void send_arp_request(void)
                                    984 ;	-----------------------------------------
                                    985 ;	 function send_arp_request
                                    986 ;	-----------------------------------------
      0001D8                        987 _send_arp_request:
                                    988 ;	Eth.c:123: uint8_t source_mac[6] = {0x02, 0x11, 0x22, 0x33, 0x44, 0x55};  // ENC28J60 MAC address
      0001D8 90r00r0C         [24]  989 	mov	dptr,#_send_arp_request_source_mac_10000_91
      0001DB 74 02            [12]  990 	mov	a,#0x02
      0001DD F0               [24]  991 	movx	@dptr,a
      0001DE 90r00r0D         [24]  992 	mov	dptr,#(_send_arp_request_source_mac_10000_91 + 0x0001)
      0001E1 74 11            [12]  993 	mov	a,#0x11
      0001E3 F0               [24]  994 	movx	@dptr,a
      0001E4 90r00r0E         [24]  995 	mov	dptr,#(_send_arp_request_source_mac_10000_91 + 0x0002)
      0001E7 23               [12]  996 	rl	a
      0001E8 F0               [24]  997 	movx	@dptr,a
      0001E9 90r00r0F         [24]  998 	mov	dptr,#(_send_arp_request_source_mac_10000_91 + 0x0003)
      0001EC 74 33            [12]  999 	mov	a,#0x33
      0001EE F0               [24] 1000 	movx	@dptr,a
      0001EF 90r00r10         [24] 1001 	mov	dptr,#(_send_arp_request_source_mac_10000_91 + 0x0004)
      0001F2 74 44            [12] 1002 	mov	a,#0x44
      0001F4 F0               [24] 1003 	movx	@dptr,a
      0001F5 90r00r11         [24] 1004 	mov	dptr,#(_send_arp_request_source_mac_10000_91 + 0x0005)
      0001F8 74 55            [12] 1005 	mov	a,#0x55
      0001FA F0               [24] 1006 	movx	@dptr,a
                                   1007 ;	Eth.c:124: uint8_t dest_mac[6] = {0xF8, 0x75, 0xA4, 0x8C, 0x41, 0x31};  // Target PC MAC address
      0001FB 90r00r12         [24] 1008 	mov	dptr,#_send_arp_request_dest_mac_10000_91
      0001FE 74 F8            [12] 1009 	mov	a,#0xf8
      000200 F0               [24] 1010 	movx	@dptr,a
      000201 90r00r13         [24] 1011 	mov	dptr,#(_send_arp_request_dest_mac_10000_91 + 0x0001)
      000204 74 75            [12] 1012 	mov	a,#0x75
      000206 F0               [24] 1013 	movx	@dptr,a
      000207 90r00r14         [24] 1014 	mov	dptr,#(_send_arp_request_dest_mac_10000_91 + 0x0002)
      00020A 74 A4            [12] 1015 	mov	a,#0xa4
      00020C F0               [24] 1016 	movx	@dptr,a
      00020D 90r00r15         [24] 1017 	mov	dptr,#(_send_arp_request_dest_mac_10000_91 + 0x0003)
      000210 74 8C            [12] 1018 	mov	a,#0x8c
      000212 F0               [24] 1019 	movx	@dptr,a
      000213 90r00r16         [24] 1020 	mov	dptr,#(_send_arp_request_dest_mac_10000_91 + 0x0004)
      000216 74 41            [12] 1021 	mov	a,#0x41
      000218 F0               [24] 1022 	movx	@dptr,a
      000219 90r00r17         [24] 1023 	mov	dptr,#(_send_arp_request_dest_mac_10000_91 + 0x0005)
      00021C 74 31            [12] 1024 	mov	a,#0x31
      00021E F0               [24] 1025 	movx	@dptr,a
                                   1026 ;	Eth.c:125: uint8_t source_ip[4] = {192, 168, 1, 100};  // ENC28J60 IP address (Example)
      00021F 90r00r18         [24] 1027 	mov	dptr,#_send_arp_request_source_ip_10000_91
      000222 74 C0            [12] 1028 	mov	a,#0xc0
      000224 F0               [24] 1029 	movx	@dptr,a
      000225 90r00r19         [24] 1030 	mov	dptr,#(_send_arp_request_source_ip_10000_91 + 0x0001)
      000228 74 A8            [12] 1031 	mov	a,#0xa8
      00022A F0               [24] 1032 	movx	@dptr,a
      00022B 90r00r1A         [24] 1033 	mov	dptr,#(_send_arp_request_source_ip_10000_91 + 0x0002)
      00022E 74 01            [12] 1034 	mov	a,#0x01
      000230 F0               [24] 1035 	movx	@dptr,a
      000231 90r00r1B         [24] 1036 	mov	dptr,#(_send_arp_request_source_ip_10000_91 + 0x0003)
      000234 74 64            [12] 1037 	mov	a,#0x64
      000236 F0               [24] 1038 	movx	@dptr,a
                                   1039 ;	Eth.c:126: uint8_t target_ip[4] = {192, 168, 1, 1};  // Target PC IP address
      000237 90r00r1C         [24] 1040 	mov	dptr,#_send_arp_request_target_ip_10000_91
      00023A 74 C0            [12] 1041 	mov	a,#0xc0
      00023C F0               [24] 1042 	movx	@dptr,a
      00023D 90r00r1D         [24] 1043 	mov	dptr,#(_send_arp_request_target_ip_10000_91 + 0x0001)
      000240 74 A8            [12] 1044 	mov	a,#0xa8
      000242 F0               [24] 1045 	movx	@dptr,a
      000243 90r00r1E         [24] 1046 	mov	dptr,#(_send_arp_request_target_ip_10000_91 + 0x0002)
      000246 74 01            [12] 1047 	mov	a,#0x01
      000248 F0               [24] 1048 	movx	@dptr,a
      000249 90r00r1F         [24] 1049 	mov	dptr,#(_send_arp_request_target_ip_10000_91 + 0x0003)
      00024C F0               [24] 1050 	movx	@dptr,a
                                   1051 ;	Eth.c:130: arp_packet[0] = 0x0E;
      00024D 90r00r20         [24] 1052 	mov	dptr,#_send_arp_request_arp_packet_10000_91
      000250 74 0E            [12] 1053 	mov	a,#0x0e
      000252 F0               [24] 1054 	movx	@dptr,a
                                   1055 ;	Eth.c:138: for (int i = 0; i < 6; i++)
      000253 7E 00            [12] 1056 	mov	r6,#0x00
      000255 7F 00            [12] 1057 	mov	r7,#0x00
      000257                       1058 00115$:
      000257 C3               [12] 1059 	clr	c
      000258 EE               [12] 1060 	mov	a,r6
      000259 94 06            [12] 1061 	subb	a,#0x06
      00025B EF               [12] 1062 	mov	a,r7
      00025C 64 80            [12] 1063 	xrl	a,#0x80
      00025E 94 80            [12] 1064 	subb	a,#0x80
      000260 50 48            [24] 1065 	jnc	00101$
                                   1066 ;	Eth.c:140: arp_packet[i + 1] = dest_mac[i];  // Destination MAC address
      000262 8E 05            [24] 1067 	mov	ar5,r6
      000264 ED               [12] 1068 	mov	a,r5
      000265 04               [12] 1069 	inc	a
      000266 FC               [12] 1070 	mov	r4,a
      000267 33               [12] 1071 	rlc	a
      000268 95 E0            [12] 1072 	subb	a,acc
      00026A FB               [12] 1073 	mov	r3,a
      00026B EC               [12] 1074 	mov	a,r4
      00026C 24r20            [12] 1075 	add	a, #_send_arp_request_arp_packet_10000_91
      00026E FC               [12] 1076 	mov	r4,a
      00026F EB               [12] 1077 	mov	a,r3
      000270 34s00            [12] 1078 	addc	a, #(_send_arp_request_arp_packet_10000_91 >> 8)
      000272 FB               [12] 1079 	mov	r3,a
      000273 EE               [12] 1080 	mov	a,r6
      000274 24r12            [12] 1081 	add	a, #_send_arp_request_dest_mac_10000_91
      000276 F5 82            [12] 1082 	mov	dpl,a
      000278 EF               [12] 1083 	mov	a,r7
      000279 34s00            [12] 1084 	addc	a, #(_send_arp_request_dest_mac_10000_91 >> 8)
      00027B F5 83            [12] 1085 	mov	dph,a
      00027D E0               [24] 1086 	movx	a,@dptr
      00027E 8C 82            [24] 1087 	mov	dpl,r4
      000280 8B 83            [24] 1088 	mov	dph,r3
      000282 F0               [24] 1089 	movx	@dptr,a
                                   1090 ;	Eth.c:141: arp_packet[i + 7] = source_mac[i];  // Source MAC address
      000283 74 07            [12] 1091 	mov	a,#0x07
      000285 2D               [12] 1092 	add	a, r5
      000286 FD               [12] 1093 	mov	r5,a
      000287 33               [12] 1094 	rlc	a
      000288 95 E0            [12] 1095 	subb	a,acc
      00028A FC               [12] 1096 	mov	r4,a
      00028B ED               [12] 1097 	mov	a,r5
      00028C 24r20            [12] 1098 	add	a, #_send_arp_request_arp_packet_10000_91
      00028E FD               [12] 1099 	mov	r5,a
      00028F EC               [12] 1100 	mov	a,r4
      000290 34s00            [12] 1101 	addc	a, #(_send_arp_request_arp_packet_10000_91 >> 8)
      000292 FC               [12] 1102 	mov	r4,a
      000293 EE               [12] 1103 	mov	a,r6
      000294 24r0C            [12] 1104 	add	a, #_send_arp_request_source_mac_10000_91
      000296 F5 82            [12] 1105 	mov	dpl,a
      000298 EF               [12] 1106 	mov	a,r7
      000299 34s00            [12] 1107 	addc	a, #(_send_arp_request_source_mac_10000_91 >> 8)
      00029B F5 83            [12] 1108 	mov	dph,a
      00029D E0               [24] 1109 	movx	a,@dptr
      00029E 8D 82            [24] 1110 	mov	dpl,r5
      0002A0 8C 83            [24] 1111 	mov	dph,r4
      0002A2 F0               [24] 1112 	movx	@dptr,a
                                   1113 ;	Eth.c:138: for (int i = 0; i < 6; i++)
      0002A3 0E               [12] 1114 	inc	r6
      0002A4 BE 00 B0         [24] 1115 	cjne	r6,#0x00,00115$
      0002A7 0F               [12] 1116 	inc	r7
      0002A8 80 AD            [24] 1117 	sjmp	00115$
      0002AA                       1118 00101$:
                                   1119 ;	Eth.c:145: arp_packet[13] = (ETH_TYPE_ARP >> 8) & 0xFF;
      0002AA 90r00r2D         [24] 1120 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x000d)
      0002AD 74 08            [12] 1121 	mov	a,#0x08
      0002AF F0               [24] 1122 	movx	@dptr,a
                                   1123 ;	Eth.c:146: arp_packet[14] = ETH_TYPE_ARP & 0xFF;
      0002B0 90r00r2E         [24] 1124 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x000e)
      0002B3 74 06            [12] 1125 	mov	a,#0x06
      0002B5 F0               [24] 1126 	movx	@dptr,a
                                   1127 ;	Eth.c:150: arp_packet[15] = 0x00;
      0002B6 90r00r2F         [24] 1128 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x000f)
      0002B9 E4               [12] 1129 	clr	a
      0002BA F0               [24] 1130 	movx	@dptr,a
                                   1131 ;	Eth.c:151: arp_packet[16] = 0x01;
      0002BB 90r00r30         [24] 1132 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x0010)
      0002BE 04               [12] 1133 	inc	a
      0002BF F0               [24] 1134 	movx	@dptr,a
                                   1135 ;	Eth.c:154: arp_packet[17] = 0x08;
      0002C0 90r00r31         [24] 1136 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x0011)
      0002C3 74 08            [12] 1137 	mov	a,#0x08
      0002C5 F0               [24] 1138 	movx	@dptr,a
                                   1139 ;	Eth.c:155: arp_packet[18] = 0x00;
      0002C6 90r00r32         [24] 1140 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x0012)
      0002C9 E4               [12] 1141 	clr	a
      0002CA F0               [24] 1142 	movx	@dptr,a
                                   1143 ;	Eth.c:158: arp_packet[19] = 0x06;
      0002CB 90r00r33         [24] 1144 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x0013)
      0002CE 74 06            [12] 1145 	mov	a,#0x06
      0002D0 F0               [24] 1146 	movx	@dptr,a
                                   1147 ;	Eth.c:161: arp_packet[20] = 0x04;
      0002D1 90r00r34         [24] 1148 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x0014)
      0002D4 74 04            [12] 1149 	mov	a,#0x04
      0002D6 F0               [24] 1150 	movx	@dptr,a
                                   1151 ;	Eth.c:164: arp_packet[21] = 0x00;
      0002D7 90r00r35         [24] 1152 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x0015)
      0002DA E4               [12] 1153 	clr	a
      0002DB F0               [24] 1154 	movx	@dptr,a
                                   1155 ;	Eth.c:165: arp_packet[22] = 0x01;
      0002DC 90r00r36         [24] 1156 	mov	dptr,#(_send_arp_request_arp_packet_10000_91 + 0x0016)
      0002DF 04               [12] 1157 	inc	a
      0002E0 F0               [24] 1158 	movx	@dptr,a
                                   1159 ;	Eth.c:168: for (int i = 0; i < 6; i++) {
      0002E1 7E 00            [12] 1160 	mov	r6,#0x00
      0002E3 7F 00            [12] 1161 	mov	r7,#0x00
      0002E5                       1162 00118$:
      0002E5 C3               [12] 1163 	clr	c
      0002E6 EE               [12] 1164 	mov	a,r6
      0002E7 94 06            [12] 1165 	subb	a,#0x06
      0002E9 EF               [12] 1166 	mov	a,r7
      0002EA 64 80            [12] 1167 	xrl	a,#0x80
      0002EC 94 80            [12] 1168 	subb	a,#0x80
      0002EE 50 29            [24] 1169 	jnc	00102$
                                   1170 ;	Eth.c:169: arp_packet[23 + i] = source_mac[i];
      0002F0 8E 05            [24] 1171 	mov	ar5,r6
      0002F2 74 17            [12] 1172 	mov	a,#0x17
      0002F4 2D               [12] 1173 	add	a, r5
      0002F5 FD               [12] 1174 	mov	r5,a
      0002F6 33               [12] 1175 	rlc	a
      0002F7 95 E0            [12] 1176 	subb	a,acc
      0002F9 FC               [12] 1177 	mov	r4,a
      0002FA ED               [12] 1178 	mov	a,r5
      0002FB 24r20            [12] 1179 	add	a, #_send_arp_request_arp_packet_10000_91
      0002FD FD               [12] 1180 	mov	r5,a
      0002FE EC               [12] 1181 	mov	a,r4
      0002FF 34s00            [12] 1182 	addc	a, #(_send_arp_request_arp_packet_10000_91 >> 8)
      000301 FC               [12] 1183 	mov	r4,a
      000302 EE               [12] 1184 	mov	a,r6
      000303 24r0C            [12] 1185 	add	a, #_send_arp_request_source_mac_10000_91
      000305 F5 82            [12] 1186 	mov	dpl,a
      000307 EF               [12] 1187 	mov	a,r7
      000308 34s00            [12] 1188 	addc	a, #(_send_arp_request_source_mac_10000_91 >> 8)
      00030A F5 83            [12] 1189 	mov	dph,a
      00030C E0               [24] 1190 	movx	a,@dptr
      00030D 8D 82            [24] 1191 	mov	dpl,r5
      00030F 8C 83            [24] 1192 	mov	dph,r4
      000311 F0               [24] 1193 	movx	@dptr,a
                                   1194 ;	Eth.c:168: for (int i = 0; i < 6; i++) {
      000312 0E               [12] 1195 	inc	r6
      000313 BE 00 CF         [24] 1196 	cjne	r6,#0x00,00118$
      000316 0F               [12] 1197 	inc	r7
      000317 80 CC            [24] 1198 	sjmp	00118$
      000319                       1199 00102$:
                                   1200 ;	Eth.c:173: for (int i = 0; i < 4; i++) {
      000319 7E 00            [12] 1201 	mov	r6,#0x00
      00031B 7F 00            [12] 1202 	mov	r7,#0x00
      00031D                       1203 00121$:
      00031D C3               [12] 1204 	clr	c
      00031E EE               [12] 1205 	mov	a,r6
      00031F 94 04            [12] 1206 	subb	a,#0x04
      000321 EF               [12] 1207 	mov	a,r7
      000322 64 80            [12] 1208 	xrl	a,#0x80
      000324 94 80            [12] 1209 	subb	a,#0x80
      000326 50 29            [24] 1210 	jnc	00103$
                                   1211 ;	Eth.c:174: arp_packet[29 + i] = source_ip[i];
      000328 8E 05            [24] 1212 	mov	ar5,r6
      00032A 74 1D            [12] 1213 	mov	a,#0x1d
      00032C 2D               [12] 1214 	add	a, r5
      00032D FD               [12] 1215 	mov	r5,a
      00032E 33               [12] 1216 	rlc	a
      00032F 95 E0            [12] 1217 	subb	a,acc
      000331 FC               [12] 1218 	mov	r4,a
      000332 ED               [12] 1219 	mov	a,r5
      000333 24r20            [12] 1220 	add	a, #_send_arp_request_arp_packet_10000_91
      000335 FD               [12] 1221 	mov	r5,a
      000336 EC               [12] 1222 	mov	a,r4
      000337 34s00            [12] 1223 	addc	a, #(_send_arp_request_arp_packet_10000_91 >> 8)
      000339 FC               [12] 1224 	mov	r4,a
      00033A EE               [12] 1225 	mov	a,r6
      00033B 24r18            [12] 1226 	add	a, #_send_arp_request_source_ip_10000_91
      00033D F5 82            [12] 1227 	mov	dpl,a
      00033F EF               [12] 1228 	mov	a,r7
      000340 34s00            [12] 1229 	addc	a, #(_send_arp_request_source_ip_10000_91 >> 8)
      000342 F5 83            [12] 1230 	mov	dph,a
      000344 E0               [24] 1231 	movx	a,@dptr
      000345 8D 82            [24] 1232 	mov	dpl,r5
      000347 8C 83            [24] 1233 	mov	dph,r4
      000349 F0               [24] 1234 	movx	@dptr,a
                                   1235 ;	Eth.c:173: for (int i = 0; i < 4; i++) {
      00034A 0E               [12] 1236 	inc	r6
      00034B BE 00 CF         [24] 1237 	cjne	r6,#0x00,00121$
      00034E 0F               [12] 1238 	inc	r7
      00034F 80 CC            [24] 1239 	sjmp	00121$
      000351                       1240 00103$:
                                   1241 ;	Eth.c:178: for (int i = 0; i < 6; i++) {
      000351 7F 00            [12] 1242 	mov	r7,#0x00
      000353                       1243 00124$:
      000353 BF 06 00         [24] 1244 	cjne	r7,#0x06,00215$
      000356                       1245 00215$:
      000356 50 19            [24] 1246 	jnc	00104$
                                   1247 ;	Eth.c:179: arp_packet[33 + i] = 0x00;
      000358 8F 06            [24] 1248 	mov	ar6,r7
      00035A 74 21            [12] 1249 	mov	a,#0x21
      00035C 2E               [12] 1250 	add	a, r6
      00035D FE               [12] 1251 	mov	r6,a
      00035E 33               [12] 1252 	rlc	a
      00035F 95 E0            [12] 1253 	subb	a,acc
      000361 FD               [12] 1254 	mov	r5,a
      000362 EE               [12] 1255 	mov	a,r6
      000363 24r20            [12] 1256 	add	a, #_send_arp_request_arp_packet_10000_91
      000365 F5 82            [12] 1257 	mov	dpl,a
      000367 ED               [12] 1258 	mov	a,r5
      000368 34s00            [12] 1259 	addc	a, #(_send_arp_request_arp_packet_10000_91 >> 8)
      00036A F5 83            [12] 1260 	mov	dph,a
      00036C E4               [12] 1261 	clr	a
      00036D F0               [24] 1262 	movx	@dptr,a
                                   1263 ;	Eth.c:178: for (int i = 0; i < 6; i++) {
      00036E 0F               [12] 1264 	inc	r7
      00036F 80 E2            [24] 1265 	sjmp	00124$
      000371                       1266 00104$:
                                   1267 ;	Eth.c:183: for (int i = 0; i < 4; i++) {
      000371 7E 00            [12] 1268 	mov	r6,#0x00
      000373 7F 00            [12] 1269 	mov	r7,#0x00
      000375                       1270 00127$:
      000375 C3               [12] 1271 	clr	c
      000376 EE               [12] 1272 	mov	a,r6
      000377 94 04            [12] 1273 	subb	a,#0x04
      000379 EF               [12] 1274 	mov	a,r7
      00037A 64 80            [12] 1275 	xrl	a,#0x80
      00037C 94 80            [12] 1276 	subb	a,#0x80
      00037E 50 29            [24] 1277 	jnc	00105$
                                   1278 ;	Eth.c:184: arp_packet[39 + i] = target_ip[i];
      000380 8E 05            [24] 1279 	mov	ar5,r6
      000382 74 27            [12] 1280 	mov	a,#0x27
      000384 2D               [12] 1281 	add	a, r5
      000385 FD               [12] 1282 	mov	r5,a
      000386 33               [12] 1283 	rlc	a
      000387 95 E0            [12] 1284 	subb	a,acc
      000389 FC               [12] 1285 	mov	r4,a
      00038A ED               [12] 1286 	mov	a,r5
      00038B 24r20            [12] 1287 	add	a, #_send_arp_request_arp_packet_10000_91
      00038D FD               [12] 1288 	mov	r5,a
      00038E EC               [12] 1289 	mov	a,r4
      00038F 34s00            [12] 1290 	addc	a, #(_send_arp_request_arp_packet_10000_91 >> 8)
      000391 FC               [12] 1291 	mov	r4,a
      000392 EE               [12] 1292 	mov	a,r6
      000393 24r1C            [12] 1293 	add	a, #_send_arp_request_target_ip_10000_91
      000395 F5 82            [12] 1294 	mov	dpl,a
      000397 EF               [12] 1295 	mov	a,r7
      000398 34s00            [12] 1296 	addc	a, #(_send_arp_request_target_ip_10000_91 >> 8)
      00039A F5 83            [12] 1297 	mov	dph,a
      00039C E0               [24] 1298 	movx	a,@dptr
      00039D 8D 82            [24] 1299 	mov	dpl,r5
      00039F 8C 83            [24] 1300 	mov	dph,r4
      0003A1 F0               [24] 1301 	movx	@dptr,a
                                   1302 ;	Eth.c:183: for (int i = 0; i < 4; i++) {
      0003A2 0E               [12] 1303 	inc	r6
      0003A3 BE 00 CF         [24] 1304 	cjne	r6,#0x00,00127$
      0003A6 0F               [12] 1305 	inc	r7
      0003A7 80 CC            [24] 1306 	sjmp	00127$
      0003A9                       1307 00105$:
                                   1308 ;	Eth.c:197: spi_buffer_write(frame_size, start_address, arp_packet);
      0003A9 90r00r00         [24] 1309 	mov	dptr,#_spi_buffer_write_PARM_2
      0003AC E4               [12] 1310 	clr	a
      0003AD F0               [24] 1311 	movx	@dptr,a
      0003AE A3               [24] 1312 	inc	dptr
      0003AF F0               [24] 1313 	movx	@dptr,a
      0003B0 90r00r00         [24] 1314 	mov	dptr,#_spi_buffer_write_PARM_3
      0003B3 74r20            [12] 1315 	mov	a,#_send_arp_request_arp_packet_10000_91
      0003B5 F0               [24] 1316 	movx	@dptr,a
      0003B6 74s00            [12] 1317 	mov	a,#(_send_arp_request_arp_packet_10000_91 >> 8)
      0003B8 A3               [24] 1318 	inc	dptr
      0003B9 F0               [24] 1319 	movx	@dptr,a
      0003BA E4               [12] 1320 	clr	a
      0003BB A3               [24] 1321 	inc	dptr
      0003BC F0               [24] 1322 	movx	@dptr,a
      0003BD 90 00 2C         [24] 1323 	mov	dptr,#0x002c
      0003C0 12r00r00         [24] 1324 	lcall	_spi_buffer_write
                                   1325 ;	Eth.c:200: enc28j60_set_transmit_pointers(start_address, end_address);
      0003C3 90r00r06         [24] 1326 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      0003C6 74 2B            [12] 1327 	mov	a,#0x2b
      0003C8 F0               [24] 1328 	movx	@dptr,a
      0003C9 E4               [12] 1329 	clr	a
      0003CA A3               [24] 1330 	inc	dptr
      0003CB F0               [24] 1331 	movx	@dptr,a
      0003CC 90 00 00         [24] 1332 	mov	dptr,#0x0000
      0003CF 12r00rA2         [24] 1333 	lcall	_enc28j60_set_transmit_pointers
                                   1334 ;	Eth.c:203: RX_enable();
      0003D2 12r01rB7         [24] 1335 	lcall	_RX_enable
                                   1336 ;	Eth.c:204: enc28j60_start_transmission();
      0003D5 12r00r81         [24] 1337 	lcall	_enc28j60_start_transmission
                                   1338 ;	Eth.c:207: if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
      0003D8 90 01 F4         [24] 1339 	mov	dptr,#0x01f4
      0003DB 12r01r19         [24] 1340 	lcall	_wait_for_transmission_complete
      0003DE E5 82            [12] 1341 	mov	a, dpl
      0003E0 60 33            [24] 1342 	jz	00112$
                                   1343 ;	Eth.c:209: if (enc28j60_transmission_successful()) {
      0003E2 12r01r7C         [24] 1344 	lcall	_enc28j60_transmission_successful
      0003E5 E5 82            [12] 1345 	mov	a, dpl
      0003E7 60 16            [24] 1346 	jz	00109$
                                   1347 ;	Eth.c:210: printf("ARP request sent successfully.\n\r");
      0003E9 74r3B            [12] 1348 	mov	a,#___str_1
      0003EB C0 E0            [24] 1349 	push	acc
      0003ED 74s00            [12] 1350 	mov	a,#(___str_1 >> 8)
      0003EF C0 E0            [24] 1351 	push	acc
      0003F1 74 80            [12] 1352 	mov	a,#0x80
      0003F3 C0 E0            [24] 1353 	push	acc
      0003F5 12r00r00         [24] 1354 	lcall	_printf
      0003F8 15 81            [12] 1355 	dec	sp
      0003FA 15 81            [12] 1356 	dec	sp
      0003FC 15 81            [12] 1357 	dec	sp
      0003FE 22               [24] 1358 	ret
      0003FF                       1359 00109$:
                                   1360 ;	Eth.c:212: printf("ARP transmission failed. Check error flags.\n\r");
      0003FF 74r5C            [12] 1361 	mov	a,#___str_2
      000401 C0 E0            [24] 1362 	push	acc
      000403 74s00            [12] 1363 	mov	a,#(___str_2 >> 8)
      000405 C0 E0            [24] 1364 	push	acc
      000407 74 80            [12] 1365 	mov	a,#0x80
      000409 C0 E0            [24] 1366 	push	acc
      00040B 12r00r00         [24] 1367 	lcall	_printf
      00040E 15 81            [12] 1368 	dec	sp
      000410 15 81            [12] 1369 	dec	sp
      000412 15 81            [12] 1370 	dec	sp
      000414 22               [24] 1371 	ret
      000415                       1372 00112$:
                                   1373 ;	Eth.c:215: printf("Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
      000415 74r8A            [12] 1374 	mov	a,#___str_3
      000417 C0 E0            [24] 1375 	push	acc
      000419 74s00            [12] 1376 	mov	a,#(___str_3 >> 8)
      00041B C0 E0            [24] 1377 	push	acc
      00041D 74 80            [12] 1378 	mov	a,#0x80
      00041F C0 E0            [24] 1379 	push	acc
      000421 12r00r00         [24] 1380 	lcall	_printf
      000424 15 81            [12] 1381 	dec	sp
      000426 15 81            [12] 1382 	dec	sp
      000428 15 81            [12] 1383 	dec	sp
                                   1384 ;	Eth.c:217: }
      00042A 22               [24] 1385 	ret
                                   1386 ;------------------------------------------------------------
                                   1387 ;Allocation info for local variables in function 'external_interrupt0_isr'
                                   1388 ;------------------------------------------------------------
                                   1389 ;eir                       Allocated with name '_external_interrupt0_isr_eir_10000_110'
                                   1390 ;------------------------------------------------------------
                                   1391 ;	Eth.c:219: void external_interrupt0_isr(void) __interrupt (0)
                                   1392 ;	-----------------------------------------
                                   1393 ;	 function external_interrupt0_isr
                                   1394 ;	-----------------------------------------
      00042B                       1395 _external_interrupt0_isr:
      00042B C0*00            [24] 1396 	push	bits
      00042D C0 E0            [24] 1397 	push	acc
      00042F C0 F0            [24] 1398 	push	b
      000431 C0 82            [24] 1399 	push	dpl
      000433 C0 83            [24] 1400 	push	dph
      000435 C0 07            [24] 1401 	push	(0+7)
      000437 C0 06            [24] 1402 	push	(0+6)
      000439 C0 05            [24] 1403 	push	(0+5)
      00043B C0 04            [24] 1404 	push	(0+4)
      00043D C0 03            [24] 1405 	push	(0+3)
      00043F C0 02            [24] 1406 	push	(0+2)
      000441 C0 01            [24] 1407 	push	(0+1)
      000443 C0 00            [24] 1408 	push	(0+0)
      000445 C0 D0            [24] 1409 	push	psw
      000447 75 D0 00         [24] 1410 	mov	psw,#0x00
                                   1411 ;	Eth.c:221: uint8_t eir = mac_spi_read(0x1C, 0); // Read EIR register (address 0x1C, bank 0)
      00044A 90r00r00         [24] 1412 	mov	dptr,#_mac_spi_read_PARM_2
      00044D E4               [12] 1413 	clr	a
      00044E F0               [24] 1414 	movx	@dptr,a
      00044F 75 82 1C         [24] 1415 	mov	dpl, #0x1c
      000452 12r00r00         [24] 1416 	lcall	_mac_spi_read
                                   1417 ;	Eth.c:222: printf("Interrrrrrrruuuuuuuuuppppppppttttttt\n\r");
      000455 74rCD            [12] 1418 	mov	a,#___str_4
      000457 C0 E0            [24] 1419 	push	acc
      000459 74s00            [12] 1420 	mov	a,#(___str_4 >> 8)
      00045B C0 E0            [24] 1421 	push	acc
      00045D 74 80            [12] 1422 	mov	a,#0x80
      00045F C0 E0            [24] 1423 	push	acc
      000461 12r00r00         [24] 1424 	lcall	_printf
      000464 15 81            [12] 1425 	dec	sp
      000466 15 81            [12] 1426 	dec	sp
      000468 15 81            [12] 1427 	dec	sp
                                   1428 ;	Eth.c:226: }
      00046A D0 D0            [24] 1429 	pop	psw
      00046C D0 00            [24] 1430 	pop	(0+0)
      00046E D0 01            [24] 1431 	pop	(0+1)
      000470 D0 02            [24] 1432 	pop	(0+2)
      000472 D0 03            [24] 1433 	pop	(0+3)
      000474 D0 04            [24] 1434 	pop	(0+4)
      000476 D0 05            [24] 1435 	pop	(0+5)
      000478 D0 06            [24] 1436 	pop	(0+6)
      00047A D0 07            [24] 1437 	pop	(0+7)
      00047C D0 83            [24] 1438 	pop	dph
      00047E D0 82            [24] 1439 	pop	dpl
      000480 D0 F0            [24] 1440 	pop	b
      000482 D0 E0            [24] 1441 	pop	acc
      000484 D0*00            [24] 1442 	pop	bits
      000486 32               [24] 1443 	reti
                                   1444 ;------------------------------------------------------------
                                   1445 ;Allocation info for local variables in function 'enc_buffer_init'
                                   1446 ;------------------------------------------------------------
                                   1447 ;end_address               Allocated with name '_enc_buffer_init_PARM_2'
                                   1448 ;start_address             Allocated with name '_enc_buffer_init_start_address_10000_111'
                                   1449 ;------------------------------------------------------------
                                   1450 ;	Eth.c:229: void enc_buffer_init(uint16_t start_address, uint16_t end_address) {
                                   1451 ;	-----------------------------------------
                                   1452 ;	 function enc_buffer_init
                                   1453 ;	-----------------------------------------
      000487                       1454 _enc_buffer_init:
      000487 AF 83            [24] 1455 	mov	r7,dph
      000489 E5 82            [12] 1456 	mov	a,dpl
      00048B 90r00r4D         [24] 1457 	mov	dptr,#_enc_buffer_init_start_address_10000_111
      00048E F0               [24] 1458 	movx	@dptr,a
      00048F EF               [12] 1459 	mov	a,r7
      000490 A3               [24] 1460 	inc	dptr
      000491 F0               [24] 1461 	movx	@dptr,a
                                   1462 ;	Eth.c:231: if (start_address > 0x1FFF || end_address > 0x1FFF) {
      000492 90r00r4D         [24] 1463 	mov	dptr,#_enc_buffer_init_start_address_10000_111
      000495 E0               [24] 1464 	movx	a,@dptr
      000496 FE               [12] 1465 	mov	r6,a
      000497 A3               [24] 1466 	inc	dptr
      000498 E0               [24] 1467 	movx	a,@dptr
      000499 FF               [12] 1468 	mov	r7,a
      00049A C3               [12] 1469 	clr	c
      00049B 74 FF            [12] 1470 	mov	a,#0xff
      00049D 9E               [12] 1471 	subb	a,r6
      00049E 74 1F            [12] 1472 	mov	a,#0x1f
      0004A0 9F               [12] 1473 	subb	a,r7
      0004A1 40 15            [24] 1474 	jc	00101$
      0004A3 90r00r4B         [24] 1475 	mov	dptr,#_enc_buffer_init_PARM_2
      0004A6 E0               [24] 1476 	movx	a,@dptr
      0004A7 FC               [12] 1477 	mov	r4,a
      0004A8 A3               [24] 1478 	inc	dptr
      0004A9 E0               [24] 1479 	movx	a,@dptr
      0004AA FD               [12] 1480 	mov	r5,a
      0004AB 8C 02            [24] 1481 	mov	ar2,r4
      0004AD 8D 03            [24] 1482 	mov	ar3,r5
      0004AF C3               [12] 1483 	clr	c
      0004B0 74 FF            [12] 1484 	mov	a,#0xff
      0004B2 9A               [12] 1485 	subb	a,r2
      0004B3 74 1F            [12] 1486 	mov	a,#0x1f
      0004B5 9B               [12] 1487 	subb	a,r3
      0004B6 50 2A            [24] 1488 	jnc	00102$
      0004B8                       1489 00101$:
                                   1490 ;	Eth.c:232: printf("\nInvalid Buffer Range: Start 0x%04X, End 0x%04X\n",
      0004B8 90r00r4B         [24] 1491 	mov	dptr,#_enc_buffer_init_PARM_2
      0004BB E0               [24] 1492 	movx	a,@dptr
      0004BC C0 E0            [24] 1493 	push	acc
      0004BE A3               [24] 1494 	inc	dptr
      0004BF E0               [24] 1495 	movx	a,@dptr
      0004C0 C0 E0            [24] 1496 	push	acc
      0004C2 90r00r4D         [24] 1497 	mov	dptr,#_enc_buffer_init_start_address_10000_111
      0004C5 E0               [24] 1498 	movx	a,@dptr
      0004C6 C0 E0            [24] 1499 	push	acc
      0004C8 A3               [24] 1500 	inc	dptr
      0004C9 E0               [24] 1501 	movx	a,@dptr
      0004CA C0 E0            [24] 1502 	push	acc
      0004CC 74rF4            [12] 1503 	mov	a,#___str_5
      0004CE C0 E0            [24] 1504 	push	acc
      0004D0 74s00            [12] 1505 	mov	a,#(___str_5 >> 8)
      0004D2 C0 E0            [24] 1506 	push	acc
      0004D4 74 80            [12] 1507 	mov	a,#0x80
      0004D6 C0 E0            [24] 1508 	push	acc
      0004D8 12r00r00         [24] 1509 	lcall	_printf
      0004DB E5 81            [12] 1510 	mov	a,sp
      0004DD 24 F9            [12] 1511 	add	a,#0xf9
      0004DF F5 81            [12] 1512 	mov	sp,a
                                   1513 ;	Eth.c:234: return;
      0004E1 22               [24] 1514 	ret
      0004E2                       1515 00102$:
                                   1516 ;	Eth.c:237: start_address &= ~1;  // Align to even address
      0004E2 53 06 FE         [24] 1517 	anl	ar6,#0xfe
      0004E5 90r00r4D         [24] 1518 	mov	dptr,#_enc_buffer_init_start_address_10000_111
      0004E8 EE               [12] 1519 	mov	a,r6
      0004E9 F0               [24] 1520 	movx	@dptr,a
      0004EA EF               [12] 1521 	mov	a,r7
      0004EB A3               [24] 1522 	inc	dptr
      0004EC F0               [24] 1523 	movx	@dptr,a
                                   1524 ;	Eth.c:239: spi_control_write(0, 0x00, (uint8_t) (start_address & 0xFF)); // ERDPTL
      0004ED 90r00r4D         [24] 1525 	mov	dptr,#_enc_buffer_init_start_address_10000_111
      0004F0 E0               [24] 1526 	movx	a,@dptr
      0004F1 FE               [12] 1527 	mov	r6,a
      0004F2 A3               [24] 1528 	inc	dptr
      0004F3 E0               [24] 1529 	movx	a,@dptr
      0004F4 FF               [12] 1530 	mov	r7,a
      0004F5 8E 03            [24] 1531 	mov	ar3,r6
      0004F7 90r00r00         [24] 1532 	mov	dptr,#_spi_control_write_PARM_2
      0004FA E4               [12] 1533 	clr	a
      0004FB F0               [24] 1534 	movx	@dptr,a
      0004FC 90r00r00         [24] 1535 	mov	dptr,#_spi_control_write_PARM_3
      0004FF EB               [12] 1536 	mov	a,r3
      000500 F0               [24] 1537 	movx	@dptr,a
      000501 75 82 00         [24] 1538 	mov	dpl, #0x00
      000504 C0 07            [24] 1539 	push	ar7
      000506 C0 06            [24] 1540 	push	ar6
      000508 C0 05            [24] 1541 	push	ar5
      00050A C0 04            [24] 1542 	push	ar4
      00050C C0 03            [24] 1543 	push	ar3
      00050E 12r00r00         [24] 1544 	lcall	_spi_control_write
      000511 D0 03            [24] 1545 	pop	ar3
      000513 D0 04            [24] 1546 	pop	ar4
      000515 D0 05            [24] 1547 	pop	ar5
      000517 D0 06            [24] 1548 	pop	ar6
      000519 D0 07            [24] 1549 	pop	ar7
                                   1550 ;	Eth.c:240: spi_control_write(0, 0x01, (uint8_t) (start_address >> 8)); // ERDPTH
      00051B 8F 02            [24] 1551 	mov	ar2,r7
      00051D 90r00r00         [24] 1552 	mov	dptr,#_spi_control_write_PARM_2
      000520 74 01            [12] 1553 	mov	a,#0x01
      000522 F0               [24] 1554 	movx	@dptr,a
      000523 90r00r00         [24] 1555 	mov	dptr,#_spi_control_write_PARM_3
      000526 EA               [12] 1556 	mov	a,r2
      000527 F0               [24] 1557 	movx	@dptr,a
      000528 75 82 00         [24] 1558 	mov	dpl, #0x00
      00052B C0 07            [24] 1559 	push	ar7
      00052D C0 06            [24] 1560 	push	ar6
      00052F C0 05            [24] 1561 	push	ar5
      000531 C0 04            [24] 1562 	push	ar4
      000533 C0 03            [24] 1563 	push	ar3
      000535 C0 02            [24] 1564 	push	ar2
      000537 12r00r00         [24] 1565 	lcall	_spi_control_write
      00053A D0 02            [24] 1566 	pop	ar2
      00053C D0 03            [24] 1567 	pop	ar3
      00053E D0 04            [24] 1568 	pop	ar4
      000540 D0 05            [24] 1569 	pop	ar5
      000542 D0 06            [24] 1570 	pop	ar6
      000544 D0 07            [24] 1571 	pop	ar7
                                   1572 ;	Eth.c:241: spi_control_write(0, 0x08, (uint8_t) (start_address & 0xFF)); // ERXSTL
      000546 90r00r00         [24] 1573 	mov	dptr,#_spi_control_write_PARM_2
      000549 74 08            [12] 1574 	mov	a,#0x08
      00054B F0               [24] 1575 	movx	@dptr,a
      00054C 90r00r00         [24] 1576 	mov	dptr,#_spi_control_write_PARM_3
      00054F EB               [12] 1577 	mov	a,r3
      000550 F0               [24] 1578 	movx	@dptr,a
      000551 75 82 00         [24] 1579 	mov	dpl, #0x00
      000554 C0 07            [24] 1580 	push	ar7
      000556 C0 06            [24] 1581 	push	ar6
      000558 C0 05            [24] 1582 	push	ar5
      00055A C0 04            [24] 1583 	push	ar4
      00055C C0 03            [24] 1584 	push	ar3
      00055E C0 02            [24] 1585 	push	ar2
      000560 12r00r00         [24] 1586 	lcall	_spi_control_write
      000563 D0 02            [24] 1587 	pop	ar2
      000565 D0 03            [24] 1588 	pop	ar3
      000567 D0 04            [24] 1589 	pop	ar4
      000569 D0 05            [24] 1590 	pop	ar5
      00056B D0 06            [24] 1591 	pop	ar6
      00056D D0 07            [24] 1592 	pop	ar7
                                   1593 ;	Eth.c:242: spi_control_write(0, 0x09, (uint8_t) (start_address >> 8)); // ERXSTH
      00056F 90r00r00         [24] 1594 	mov	dptr,#_spi_control_write_PARM_2
      000572 74 09            [12] 1595 	mov	a,#0x09
      000574 F0               [24] 1596 	movx	@dptr,a
      000575 90r00r00         [24] 1597 	mov	dptr,#_spi_control_write_PARM_3
      000578 EA               [12] 1598 	mov	a,r2
      000579 F0               [24] 1599 	movx	@dptr,a
      00057A 75 82 00         [24] 1600 	mov	dpl, #0x00
      00057D C0 07            [24] 1601 	push	ar7
      00057F C0 06            [24] 1602 	push	ar6
      000581 C0 05            [24] 1603 	push	ar5
      000583 C0 04            [24] 1604 	push	ar4
      000585 C0 03            [24] 1605 	push	ar3
      000587 C0 02            [24] 1606 	push	ar2
      000589 12r00r00         [24] 1607 	lcall	_spi_control_write
      00058C D0 02            [24] 1608 	pop	ar2
      00058E D0 03            [24] 1609 	pop	ar3
      000590 D0 04            [24] 1610 	pop	ar4
      000592 D0 05            [24] 1611 	pop	ar5
      000594 D0 06            [24] 1612 	pop	ar6
      000596 D0 07            [24] 1613 	pop	ar7
                                   1614 ;	Eth.c:243: spi_control_write(0, 0x0A, (uint8_t) (end_address & 0xFF)); // ERXNDL
      000598 8C 01            [24] 1615 	mov	ar1,r4
      00059A 90r00r00         [24] 1616 	mov	dptr,#_spi_control_write_PARM_2
      00059D 74 0A            [12] 1617 	mov	a,#0x0a
      00059F F0               [24] 1618 	movx	@dptr,a
      0005A0 90r00r00         [24] 1619 	mov	dptr,#_spi_control_write_PARM_3
      0005A3 E9               [12] 1620 	mov	a,r1
      0005A4 F0               [24] 1621 	movx	@dptr,a
      0005A5 75 82 00         [24] 1622 	mov	dpl, #0x00
      0005A8 C0 07            [24] 1623 	push	ar7
      0005AA C0 06            [24] 1624 	push	ar6
      0005AC C0 05            [24] 1625 	push	ar5
      0005AE C0 04            [24] 1626 	push	ar4
      0005B0 C0 03            [24] 1627 	push	ar3
      0005B2 C0 02            [24] 1628 	push	ar2
      0005B4 12r00r00         [24] 1629 	lcall	_spi_control_write
      0005B7 D0 02            [24] 1630 	pop	ar2
      0005B9 D0 03            [24] 1631 	pop	ar3
      0005BB D0 04            [24] 1632 	pop	ar4
      0005BD D0 05            [24] 1633 	pop	ar5
      0005BF D0 06            [24] 1634 	pop	ar6
      0005C1 D0 07            [24] 1635 	pop	ar7
                                   1636 ;	Eth.c:244: spi_control_write(0, 0x0B, (uint8_t) (end_address >> 8)); // ERXNDH
      0005C3 8D 01            [24] 1637 	mov	ar1,r5
      0005C5 90r00r00         [24] 1638 	mov	dptr,#_spi_control_write_PARM_2
      0005C8 74 0B            [12] 1639 	mov	a,#0x0b
      0005CA F0               [24] 1640 	movx	@dptr,a
      0005CB 90r00r00         [24] 1641 	mov	dptr,#_spi_control_write_PARM_3
      0005CE E9               [12] 1642 	mov	a,r1
      0005CF F0               [24] 1643 	movx	@dptr,a
      0005D0 75 82 00         [24] 1644 	mov	dpl, #0x00
      0005D3 C0 07            [24] 1645 	push	ar7
      0005D5 C0 06            [24] 1646 	push	ar6
      0005D7 C0 05            [24] 1647 	push	ar5
      0005D9 C0 04            [24] 1648 	push	ar4
      0005DB C0 03            [24] 1649 	push	ar3
      0005DD C0 02            [24] 1650 	push	ar2
      0005DF 12r00r00         [24] 1651 	lcall	_spi_control_write
      0005E2 D0 02            [24] 1652 	pop	ar2
      0005E4 D0 03            [24] 1653 	pop	ar3
      0005E6 D0 04            [24] 1654 	pop	ar4
      0005E8 D0 05            [24] 1655 	pop	ar5
      0005EA D0 06            [24] 1656 	pop	ar6
      0005EC D0 07            [24] 1657 	pop	ar7
                                   1658 ;	Eth.c:245: spi_control_write(0, 0x0C, (uint8_t) (start_address & 0xFF)); // ERXRDPTL
      0005EE 90r00r00         [24] 1659 	mov	dptr,#_spi_control_write_PARM_2
      0005F1 74 0C            [12] 1660 	mov	a,#0x0c
      0005F3 F0               [24] 1661 	movx	@dptr,a
      0005F4 90r00r00         [24] 1662 	mov	dptr,#_spi_control_write_PARM_3
      0005F7 EB               [12] 1663 	mov	a,r3
      0005F8 F0               [24] 1664 	movx	@dptr,a
      0005F9 75 82 00         [24] 1665 	mov	dpl, #0x00
      0005FC C0 07            [24] 1666 	push	ar7
      0005FE C0 06            [24] 1667 	push	ar6
      000600 C0 05            [24] 1668 	push	ar5
      000602 C0 04            [24] 1669 	push	ar4
      000604 C0 02            [24] 1670 	push	ar2
      000606 12r00r00         [24] 1671 	lcall	_spi_control_write
      000609 D0 02            [24] 1672 	pop	ar2
      00060B D0 04            [24] 1673 	pop	ar4
      00060D D0 05            [24] 1674 	pop	ar5
      00060F D0 06            [24] 1675 	pop	ar6
      000611 D0 07            [24] 1676 	pop	ar7
                                   1677 ;	Eth.c:246: spi_control_write(0, 0x0D, (uint8_t) (start_address >> 8)); // ERXRDPTH
      000613 90r00r00         [24] 1678 	mov	dptr,#_spi_control_write_PARM_2
      000616 74 0D            [12] 1679 	mov	a,#0x0d
      000618 F0               [24] 1680 	movx	@dptr,a
      000619 90r00r00         [24] 1681 	mov	dptr,#_spi_control_write_PARM_3
      00061C EA               [12] 1682 	mov	a,r2
      00061D F0               [24] 1683 	movx	@dptr,a
      00061E 75 82 00         [24] 1684 	mov	dpl, #0x00
      000621 C0 07            [24] 1685 	push	ar7
      000623 C0 06            [24] 1686 	push	ar6
      000625 C0 05            [24] 1687 	push	ar5
      000627 C0 04            [24] 1688 	push	ar4
      000629 12r00r00         [24] 1689 	lcall	_spi_control_write
      00062C D0 04            [24] 1690 	pop	ar4
      00062E D0 05            [24] 1691 	pop	ar5
      000630 D0 06            [24] 1692 	pop	ar6
      000632 D0 07            [24] 1693 	pop	ar7
                                   1694 ;	Eth.c:247: printf("\nBuffer Initialized: Start 0x%04X, End 0x%04X\n", start_address,
      000634 C0 04            [24] 1695 	push	ar4
      000636 C0 05            [24] 1696 	push	ar5
      000638 C0 06            [24] 1697 	push	ar6
      00063A C0 07            [24] 1698 	push	ar7
      00063C 74r25            [12] 1699 	mov	a,#___str_6
      00063E C0 E0            [24] 1700 	push	acc
      000640 74s01            [12] 1701 	mov	a,#(___str_6 >> 8)
      000642 C0 E0            [24] 1702 	push	acc
      000644 74 80            [12] 1703 	mov	a,#0x80
      000646 C0 E0            [24] 1704 	push	acc
      000648 12r00r00         [24] 1705 	lcall	_printf
      00064B E5 81            [12] 1706 	mov	a,sp
      00064D 24 F9            [12] 1707 	add	a,#0xf9
      00064F F5 81            [12] 1708 	mov	sp,a
                                   1709 ;	Eth.c:249: }
      000651 22               [24] 1710 	ret
                                   1711 ;------------------------------------------------------------
                                   1712 ;Allocation info for local variables in function 'enc_init'
                                   1713 ;------------------------------------------------------------
                                   1714 ;sloc0                     Allocated with name '_enc_init_sloc0_1_0'
                                   1715 ;sloc1                     Allocated with name '_enc_init_sloc1_1_0'
                                   1716 ;sloc2                     Allocated with name '_enc_init_sloc2_1_0'
                                   1717 ;sloc3                     Allocated with name '_enc_init_sloc3_1_0'
                                   1718 ;mac                       Allocated with name '_enc_init_mac_10000_114'
                                   1719 ;rx_start                  Allocated with name '_enc_init_rx_start_10001_116'
                                   1720 ;rx_end                    Allocated with name '_enc_init_rx_end_10001_116'
                                   1721 ;read_macon3               Allocated with name '_enc_init_read_macon3_10002_117'
                                   1722 ;read_macon1               Allocated with name '_enc_init_read_macon1_10003_118'
                                   1723 ;------------------------------------------------------------
                                   1724 ;	Eth.c:251: void enc_init(const uint8_t *mac)
                                   1725 ;	-----------------------------------------
                                   1726 ;	 function enc_init
                                   1727 ;	-----------------------------------------
      000652                       1728 _enc_init:
      000652 AF F0            [24] 1729 	mov	r7,b
      000654 AE 83            [24] 1730 	mov	r6,dph
      000656 E5 82            [12] 1731 	mov	a,dpl
      000658 90r00r4F         [24] 1732 	mov	dptr,#_enc_init_mac_10000_114
      00065B F0               [24] 1733 	movx	@dptr,a
      00065C EE               [12] 1734 	mov	a,r6
      00065D A3               [24] 1735 	inc	dptr
      00065E F0               [24] 1736 	movx	@dptr,a
      00065F EF               [12] 1737 	mov	a,r7
      000660 A3               [24] 1738 	inc	dptr
      000661 F0               [24] 1739 	movx	@dptr,a
                                   1740 ;	Eth.c:254: enc_reset();
      000662 12r00r00         [24] 1741 	lcall	_enc_reset
                                   1742 ;	Eth.c:257: while (!(mac_spi_read(0x1D, 0) & 0x01))
      000665                       1743 00101$:
      000665 90r00r00         [24] 1744 	mov	dptr,#_mac_spi_read_PARM_2
      000668 E4               [12] 1745 	clr	a
      000669 F0               [24] 1746 	movx	@dptr,a
      00066A 75 82 1D         [24] 1747 	mov	dpl, #0x1d
      00066D 12r00r00         [24] 1748 	lcall	_mac_spi_read
      000670 E5 82            [12] 1749 	mov	a, dpl
      000672 30 E0 F0         [24] 1750 	jnb	acc.0,00101$
                                   1751 ;	Eth.c:265: enc_buffer_init(rx_start, rx_end);
      000675 90r00r4B         [24] 1752 	mov	dptr,#_enc_buffer_init_PARM_2
      000678 74 FF            [12] 1753 	mov	a,#0xff
      00067A F0               [24] 1754 	movx	@dptr,a
      00067B 74 1F            [12] 1755 	mov	a,#0x1f
      00067D A3               [24] 1756 	inc	dptr
      00067E F0               [24] 1757 	movx	@dptr,a
      00067F 90 08 00         [24] 1758 	mov	dptr,#0x0800
      000682 12r04r87         [24] 1759 	lcall	_enc_buffer_init
                                   1760 ;	Eth.c:276: spi_control_write(2, 0x02, 0x70); // MACON3: Padding, CRC, and frame length checking enabled37
      000685 90r00r00         [24] 1761 	mov	dptr,#_spi_control_write_PARM_2
      000688 74 02            [12] 1762 	mov	a,#0x02
      00068A F0               [24] 1763 	movx	@dptr,a
      00068B 90r00r00         [24] 1764 	mov	dptr,#_spi_control_write_PARM_3
      00068E 74 70            [12] 1765 	mov	a,#0x70
      000690 F0               [24] 1766 	movx	@dptr,a
      000691 75 82 02         [24] 1767 	mov	dpl, #0x02
      000694 12r00r00         [24] 1768 	lcall	_spi_control_write
                                   1769 ;	Eth.c:277: spi_control_write(2, 0x03, 0x40); // MACON4: IEEE compliance00
      000697 90r00r00         [24] 1770 	mov	dptr,#_spi_control_write_PARM_2
      00069A 74 03            [12] 1771 	mov	a,#0x03
      00069C F0               [24] 1772 	movx	@dptr,a
      00069D 90r00r00         [24] 1773 	mov	dptr,#_spi_control_write_PARM_3
      0006A0 74 40            [12] 1774 	mov	a,#0x40
      0006A2 F0               [24] 1775 	movx	@dptr,a
      0006A3 75 82 02         [24] 1776 	mov	dpl, #0x02
      0006A6 12r00r00         [24] 1777 	lcall	_spi_control_write
                                   1778 ;	Eth.c:280: spi_control_write(2, 0x0A, 0xEE); // MAMXFLL
      0006A9 90r00r00         [24] 1779 	mov	dptr,#_spi_control_write_PARM_2
      0006AC 74 0A            [12] 1780 	mov	a,#0x0a
      0006AE F0               [24] 1781 	movx	@dptr,a
      0006AF 90r00r00         [24] 1782 	mov	dptr,#_spi_control_write_PARM_3
      0006B2 74 EE            [12] 1783 	mov	a,#0xee
      0006B4 F0               [24] 1784 	movx	@dptr,a
      0006B5 75 82 02         [24] 1785 	mov	dpl, #0x02
      0006B8 12r00r00         [24] 1786 	lcall	_spi_control_write
                                   1787 ;	Eth.c:281: spi_control_write(2, 0x0B, 0x05); // MAMXFLH
      0006BB 90r00r00         [24] 1788 	mov	dptr,#_spi_control_write_PARM_2
      0006BE 74 0B            [12] 1789 	mov	a,#0x0b
      0006C0 F0               [24] 1790 	movx	@dptr,a
      0006C1 90r00r00         [24] 1791 	mov	dptr,#_spi_control_write_PARM_3
      0006C4 74 05            [12] 1792 	mov	a,#0x05
      0006C6 F0               [24] 1793 	movx	@dptr,a
      0006C7 75 82 02         [24] 1794 	mov	dpl, #0x02
      0006CA 12r00r00         [24] 1795 	lcall	_spi_control_write
                                   1796 ;	Eth.c:284: spi_control_write(2, 0x04, 0x12); // MABBIPG: Back-to-back gap (Full Duplex)
      0006CD 90r00r00         [24] 1797 	mov	dptr,#_spi_control_write_PARM_2
      0006D0 74 04            [12] 1798 	mov	a,#0x04
      0006D2 F0               [24] 1799 	movx	@dptr,a
      0006D3 90r00r00         [24] 1800 	mov	dptr,#_spi_control_write_PARM_3
      0006D6 74 12            [12] 1801 	mov	a,#0x12
      0006D8 F0               [24] 1802 	movx	@dptr,a
      0006D9 75 82 02         [24] 1803 	mov	dpl, #0x02
      0006DC 12r00r00         [24] 1804 	lcall	_spi_control_write
                                   1805 ;	Eth.c:285: spi_control_write(2, 0x06, 0x12); // MAIPGL: Non-back-to-back gap
      0006DF 90r00r00         [24] 1806 	mov	dptr,#_spi_control_write_PARM_2
      0006E2 74 06            [12] 1807 	mov	a,#0x06
      0006E4 F0               [24] 1808 	movx	@dptr,a
      0006E5 90r00r00         [24] 1809 	mov	dptr,#_spi_control_write_PARM_3
      0006E8 74 12            [12] 1810 	mov	a,#0x12
      0006EA F0               [24] 1811 	movx	@dptr,a
      0006EB 75 82 02         [24] 1812 	mov	dpl, #0x02
      0006EE 12r00r00         [24] 1813 	lcall	_spi_control_write
                                   1814 ;	Eth.c:286: spi_control_write(2, 0x07, 0x0C); // MAIPGH: Non-back-to-back gap (Half Duplex)
      0006F1 90r00r00         [24] 1815 	mov	dptr,#_spi_control_write_PARM_2
      0006F4 74 07            [12] 1816 	mov	a,#0x07
      0006F6 F0               [24] 1817 	movx	@dptr,a
      0006F7 90r00r00         [24] 1818 	mov	dptr,#_spi_control_write_PARM_3
      0006FA 74 0C            [12] 1819 	mov	a,#0x0c
      0006FC F0               [24] 1820 	movx	@dptr,a
      0006FD 75 82 02         [24] 1821 	mov	dpl, #0x02
      000700 12r00r00         [24] 1822 	lcall	_spi_control_write
                                   1823 ;	Eth.c:289: spi_control_write(3, 0x01, mac[5]); // MAADR6
      000703 90r00r4F         [24] 1824 	mov	dptr,#_enc_init_mac_10000_114
      000706 E0               [24] 1825 	movx	a,@dptr
      000707 FD               [12] 1826 	mov	r5,a
      000708 A3               [24] 1827 	inc	dptr
      000709 E0               [24] 1828 	movx	a,@dptr
      00070A FE               [12] 1829 	mov	r6,a
      00070B A3               [24] 1830 	inc	dptr
      00070C E0               [24] 1831 	movx	a,@dptr
      00070D FF               [12] 1832 	mov	r7,a
      00070E 74 05            [12] 1833 	mov	a,#0x05
      000710 2D               [12] 1834 	add	a, r5
      000711 F5*00            [12] 1835 	mov	_enc_init_sloc0_1_0,a
      000713 E4               [12] 1836 	clr	a
      000714 3E               [12] 1837 	addc	a, r6
      000715 F5*01            [12] 1838 	mov	(_enc_init_sloc0_1_0 + 1),a
      000717 8F*02            [24] 1839 	mov	(_enc_init_sloc0_1_0 + 2),r7
      000719 85*00 82         [24] 1840 	mov	dpl,_enc_init_sloc0_1_0
      00071C 85*01 83         [24] 1841 	mov	dph,(_enc_init_sloc0_1_0 + 1)
      00071F 85*02 F0         [24] 1842 	mov	b,(_enc_init_sloc0_1_0 + 2)
      000722 12r00r00         [24] 1843 	lcall	__gptrget
      000725 F9               [12] 1844 	mov	r1,a
      000726 90r00r00         [24] 1845 	mov	dptr,#_spi_control_write_PARM_2
      000729 74 01            [12] 1846 	mov	a,#0x01
      00072B F0               [24] 1847 	movx	@dptr,a
      00072C 90r00r00         [24] 1848 	mov	dptr,#_spi_control_write_PARM_3
      00072F E9               [12] 1849 	mov	a,r1
      000730 F0               [24] 1850 	movx	@dptr,a
      000731 75 82 03         [24] 1851 	mov	dpl, #0x03
      000734 C0 07            [24] 1852 	push	ar7
      000736 C0 06            [24] 1853 	push	ar6
      000738 C0 05            [24] 1854 	push	ar5
      00073A 12r00r00         [24] 1855 	lcall	_spi_control_write
      00073D D0 05            [24] 1856 	pop	ar5
      00073F D0 06            [24] 1857 	pop	ar6
      000741 D0 07            [24] 1858 	pop	ar7
                                   1859 ;	Eth.c:290: spi_control_write(3, 0x00, mac[4]); // MAADR5
      000743 74 04            [12] 1860 	mov	a,#0x04
      000745 2D               [12] 1861 	add	a, r5
      000746 F5*03            [12] 1862 	mov	_enc_init_sloc1_1_0,a
      000748 E4               [12] 1863 	clr	a
      000749 3E               [12] 1864 	addc	a, r6
      00074A F5*04            [12] 1865 	mov	(_enc_init_sloc1_1_0 + 1),a
      00074C 8F*05            [24] 1866 	mov	(_enc_init_sloc1_1_0 + 2),r7
      00074E 85*03 82         [24] 1867 	mov	dpl,_enc_init_sloc1_1_0
      000751 85*04 83         [24] 1868 	mov	dph,(_enc_init_sloc1_1_0 + 1)
      000754 85*05 F0         [24] 1869 	mov	b,(_enc_init_sloc1_1_0 + 2)
      000757 12r00r00         [24] 1870 	lcall	__gptrget
      00075A FB               [12] 1871 	mov	r3,a
      00075B 90r00r00         [24] 1872 	mov	dptr,#_spi_control_write_PARM_2
      00075E E4               [12] 1873 	clr	a
      00075F F0               [24] 1874 	movx	@dptr,a
      000760 90r00r00         [24] 1875 	mov	dptr,#_spi_control_write_PARM_3
      000763 EB               [12] 1876 	mov	a,r3
      000764 F0               [24] 1877 	movx	@dptr,a
      000765 75 82 03         [24] 1878 	mov	dpl, #0x03
      000768 C0 07            [24] 1879 	push	ar7
      00076A C0 06            [24] 1880 	push	ar6
      00076C C0 05            [24] 1881 	push	ar5
      00076E 12r00r00         [24] 1882 	lcall	_spi_control_write
      000771 D0 05            [24] 1883 	pop	ar5
      000773 D0 06            [24] 1884 	pop	ar6
      000775 D0 07            [24] 1885 	pop	ar7
                                   1886 ;	Eth.c:291: spi_control_write(3, 0x03, mac[3]); // MAADR4
      000777 74 03            [12] 1887 	mov	a,#0x03
      000779 2D               [12] 1888 	add	a, r5
      00077A F5*06            [12] 1889 	mov	_enc_init_sloc2_1_0,a
      00077C E4               [12] 1890 	clr	a
      00077D 3E               [12] 1891 	addc	a, r6
      00077E F5*07            [12] 1892 	mov	(_enc_init_sloc2_1_0 + 1),a
      000780 8F*08            [24] 1893 	mov	(_enc_init_sloc2_1_0 + 2),r7
      000782 85*06 82         [24] 1894 	mov	dpl,_enc_init_sloc2_1_0
      000785 85*07 83         [24] 1895 	mov	dph,(_enc_init_sloc2_1_0 + 1)
      000788 85*08 F0         [24] 1896 	mov	b,(_enc_init_sloc2_1_0 + 2)
      00078B 12r00r00         [24] 1897 	lcall	__gptrget
      00078E F9               [12] 1898 	mov	r1,a
      00078F 90r00r00         [24] 1899 	mov	dptr,#_spi_control_write_PARM_2
      000792 74 03            [12] 1900 	mov	a,#0x03
      000794 F0               [24] 1901 	movx	@dptr,a
      000795 90r00r00         [24] 1902 	mov	dptr,#_spi_control_write_PARM_3
      000798 E9               [12] 1903 	mov	a,r1
      000799 F0               [24] 1904 	movx	@dptr,a
      00079A 75 82 03         [24] 1905 	mov	dpl, #0x03
      00079D C0 07            [24] 1906 	push	ar7
      00079F C0 06            [24] 1907 	push	ar6
      0007A1 C0 05            [24] 1908 	push	ar5
      0007A3 12r00r00         [24] 1909 	lcall	_spi_control_write
      0007A6 D0 05            [24] 1910 	pop	ar5
      0007A8 D0 06            [24] 1911 	pop	ar6
      0007AA D0 07            [24] 1912 	pop	ar7
                                   1913 ;	Eth.c:292: spi_control_write(3, 0x02, mac[2]); // MAADR3
      0007AC 74 02            [12] 1914 	mov	a,#0x02
      0007AE 2D               [12] 1915 	add	a, r5
      0007AF F5*09            [12] 1916 	mov	_enc_init_sloc3_1_0,a
      0007B1 E4               [12] 1917 	clr	a
      0007B2 3E               [12] 1918 	addc	a, r6
      0007B3 F5*0A            [12] 1919 	mov	(_enc_init_sloc3_1_0 + 1),a
      0007B5 8F*0B            [24] 1920 	mov	(_enc_init_sloc3_1_0 + 2),r7
      0007B7 85*09 82         [24] 1921 	mov	dpl,_enc_init_sloc3_1_0
      0007BA 85*0A 83         [24] 1922 	mov	dph,(_enc_init_sloc3_1_0 + 1)
      0007BD 85*0B F0         [24] 1923 	mov	b,(_enc_init_sloc3_1_0 + 2)
      0007C0 12r00r00         [24] 1924 	lcall	__gptrget
      0007C3 FB               [12] 1925 	mov	r3,a
      0007C4 90r00r00         [24] 1926 	mov	dptr,#_spi_control_write_PARM_2
      0007C7 74 02            [12] 1927 	mov	a,#0x02
      0007C9 F0               [24] 1928 	movx	@dptr,a
      0007CA 90r00r00         [24] 1929 	mov	dptr,#_spi_control_write_PARM_3
      0007CD EB               [12] 1930 	mov	a,r3
      0007CE F0               [24] 1931 	movx	@dptr,a
      0007CF 75 82 03         [24] 1932 	mov	dpl, #0x03
      0007D2 C0 07            [24] 1933 	push	ar7
      0007D4 C0 06            [24] 1934 	push	ar6
      0007D6 C0 05            [24] 1935 	push	ar5
      0007D8 12r00r00         [24] 1936 	lcall	_spi_control_write
      0007DB D0 05            [24] 1937 	pop	ar5
      0007DD D0 06            [24] 1938 	pop	ar6
      0007DF D0 07            [24] 1939 	pop	ar7
                                   1940 ;	Eth.c:293: spi_control_write(3, 0x05, mac[1]); // MAADR2
      0007E1 74 01            [12] 1941 	mov	a,#0x01
      0007E3 2D               [12] 1942 	add	a, r5
      0007E4 FA               [12] 1943 	mov	r2,a
      0007E5 E4               [12] 1944 	clr	a
      0007E6 3E               [12] 1945 	addc	a, r6
      0007E7 FB               [12] 1946 	mov	r3,a
      0007E8 8F 04            [24] 1947 	mov	ar4,r7
      0007EA 8A 82            [24] 1948 	mov	dpl,r2
      0007EC 8B 83            [24] 1949 	mov	dph,r3
      0007EE 8C F0            [24] 1950 	mov	b,r4
      0007F0 12r00r00         [24] 1951 	lcall	__gptrget
      0007F3 F9               [12] 1952 	mov	r1,a
      0007F4 90r00r00         [24] 1953 	mov	dptr,#_spi_control_write_PARM_2
      0007F7 74 05            [12] 1954 	mov	a,#0x05
      0007F9 F0               [24] 1955 	movx	@dptr,a
      0007FA 90r00r00         [24] 1956 	mov	dptr,#_spi_control_write_PARM_3
      0007FD E9               [12] 1957 	mov	a,r1
      0007FE F0               [24] 1958 	movx	@dptr,a
      0007FF 75 82 03         [24] 1959 	mov	dpl, #0x03
      000802 C0 07            [24] 1960 	push	ar7
      000804 C0 06            [24] 1961 	push	ar6
      000806 C0 05            [24] 1962 	push	ar5
      000808 C0 04            [24] 1963 	push	ar4
      00080A C0 03            [24] 1964 	push	ar3
      00080C C0 02            [24] 1965 	push	ar2
      00080E 12r00r00         [24] 1966 	lcall	_spi_control_write
      000811 D0 02            [24] 1967 	pop	ar2
      000813 D0 03            [24] 1968 	pop	ar3
      000815 D0 04            [24] 1969 	pop	ar4
      000817 D0 05            [24] 1970 	pop	ar5
      000819 D0 06            [24] 1971 	pop	ar6
      00081B D0 07            [24] 1972 	pop	ar7
                                   1973 ;	Eth.c:294: spi_control_write(3, 0x04, mac[0]); // MAADR1
      00081D 8D 82            [24] 1974 	mov	dpl,r5
      00081F 8E 83            [24] 1975 	mov	dph,r6
      000821 8F F0            [24] 1976 	mov	b,r7
      000823 12r00r00         [24] 1977 	lcall	__gptrget
      000826 F9               [12] 1978 	mov	r1,a
      000827 90r00r00         [24] 1979 	mov	dptr,#_spi_control_write_PARM_2
      00082A 74 04            [12] 1980 	mov	a,#0x04
      00082C F0               [24] 1981 	movx	@dptr,a
      00082D 90r00r00         [24] 1982 	mov	dptr,#_spi_control_write_PARM_3
      000830 E9               [12] 1983 	mov	a,r1
      000831 F0               [24] 1984 	movx	@dptr,a
      000832 75 82 03         [24] 1985 	mov	dpl, #0x03
      000835 C0 07            [24] 1986 	push	ar7
      000837 C0 06            [24] 1987 	push	ar6
      000839 C0 05            [24] 1988 	push	ar5
      00083B C0 04            [24] 1989 	push	ar4
      00083D C0 03            [24] 1990 	push	ar3
      00083F C0 02            [24] 1991 	push	ar2
      000841 12r00r00         [24] 1992 	lcall	_spi_control_write
      000844 D0 02            [24] 1993 	pop	ar2
      000846 D0 03            [24] 1994 	pop	ar3
      000848 D0 04            [24] 1995 	pop	ar4
      00084A D0 05            [24] 1996 	pop	ar5
      00084C D0 06            [24] 1997 	pop	ar6
      00084E D0 07            [24] 1998 	pop	ar7
                                   1999 ;	Eth.c:296: spi_control_write(1, 0x18, 0x80); //unicast filter funcationality register
      000850 90r00r00         [24] 2000 	mov	dptr,#_spi_control_write_PARM_2
      000853 74 18            [12] 2001 	mov	a,#0x18
      000855 F0               [24] 2002 	movx	@dptr,a
      000856 90r00r00         [24] 2003 	mov	dptr,#_spi_control_write_PARM_3
      000859 74 80            [12] 2004 	mov	a,#0x80
      00085B F0               [24] 2005 	movx	@dptr,a
      00085C 75 82 01         [24] 2006 	mov	dpl, #0x01
      00085F C0 07            [24] 2007 	push	ar7
      000861 C0 06            [24] 2008 	push	ar6
      000863 C0 05            [24] 2009 	push	ar5
      000865 C0 04            [24] 2010 	push	ar4
      000867 C0 03            [24] 2011 	push	ar3
      000869 C0 02            [24] 2012 	push	ar2
      00086B 12r00r00         [24] 2013 	lcall	_spi_control_write
      00086E D0 02            [24] 2014 	pop	ar2
      000870 D0 03            [24] 2015 	pop	ar3
      000872 D0 04            [24] 2016 	pop	ar4
      000874 D0 05            [24] 2017 	pop	ar5
      000876 D0 06            [24] 2018 	pop	ar6
      000878 D0 07            [24] 2019 	pop	ar7
                                   2020 ;	Eth.c:297: uint8_t read_macon3 = mac_spi_read(0x03, 2);
      00087A 90r00r00         [24] 2021 	mov	dptr,#_mac_spi_read_PARM_2
      00087D 74 02            [12] 2022 	mov	a,#0x02
      00087F F0               [24] 2023 	movx	@dptr,a
      000880 75 82 03         [24] 2024 	mov	dpl, #0x03
      000883 C0 07            [24] 2025 	push	ar7
      000885 C0 06            [24] 2026 	push	ar6
      000887 C0 05            [24] 2027 	push	ar5
      000889 C0 04            [24] 2028 	push	ar4
      00088B C0 03            [24] 2029 	push	ar3
      00088D C0 02            [24] 2030 	push	ar2
      00088F 12r00r00         [24] 2031 	lcall	_mac_spi_read
      000892 E5 82            [12] 2032 	mov	a, dpl
      000894 D0 02            [24] 2033 	pop	ar2
      000896 D0 03            [24] 2034 	pop	ar3
      000898 D0 04            [24] 2035 	pop	ar4
      00089A D0 05            [24] 2036 	pop	ar5
      00089C D0 06            [24] 2037 	pop	ar6
      00089E D0 07            [24] 2038 	pop	ar7
                                   2039 ;	Eth.c:298: spi_control_write(2, 0x03, (read_macon3 | (1 << 0)));
      0008A0 44 01            [12] 2040 	orl	a,#0x01
      0008A2 F9               [12] 2041 	mov	r1,a
      0008A3 90r00r00         [24] 2042 	mov	dptr,#_spi_control_write_PARM_2
      0008A6 74 03            [12] 2043 	mov	a,#0x03
      0008A8 F0               [24] 2044 	movx	@dptr,a
      0008A9 90r00r00         [24] 2045 	mov	dptr,#_spi_control_write_PARM_3
      0008AC E9               [12] 2046 	mov	a,r1
      0008AD F0               [24] 2047 	movx	@dptr,a
      0008AE 75 82 02         [24] 2048 	mov	dpl, #0x02
      0008B1 C0 07            [24] 2049 	push	ar7
      0008B3 C0 06            [24] 2050 	push	ar6
      0008B5 C0 05            [24] 2051 	push	ar5
      0008B7 C0 04            [24] 2052 	push	ar4
      0008B9 C0 03            [24] 2053 	push	ar3
      0008BB C0 02            [24] 2054 	push	ar2
      0008BD 12r00r00         [24] 2055 	lcall	_spi_control_write
      0008C0 D0 02            [24] 2056 	pop	ar2
      0008C2 D0 03            [24] 2057 	pop	ar3
      0008C4 D0 04            [24] 2058 	pop	ar4
      0008C6 D0 05            [24] 2059 	pop	ar5
      0008C8 D0 06            [24] 2060 	pop	ar6
      0008CA D0 07            [24] 2061 	pop	ar7
                                   2062 ;	Eth.c:299: uint8_t read_macon1 = mac_spi_read(0x00, 2); //mac enable for reception
      0008CC 90r00r00         [24] 2063 	mov	dptr,#_mac_spi_read_PARM_2
      0008CF 74 02            [12] 2064 	mov	a,#0x02
      0008D1 F0               [24] 2065 	movx	@dptr,a
      0008D2 75 82 00         [24] 2066 	mov	dpl, #0x00
      0008D5 C0 07            [24] 2067 	push	ar7
      0008D7 C0 06            [24] 2068 	push	ar6
      0008D9 C0 05            [24] 2069 	push	ar5
      0008DB C0 04            [24] 2070 	push	ar4
      0008DD C0 03            [24] 2071 	push	ar3
      0008DF C0 02            [24] 2072 	push	ar2
      0008E1 12r00r00         [24] 2073 	lcall	_mac_spi_read
      0008E4 E5 82            [12] 2074 	mov	a, dpl
      0008E6 D0 02            [24] 2075 	pop	ar2
      0008E8 D0 03            [24] 2076 	pop	ar3
      0008EA D0 04            [24] 2077 	pop	ar4
      0008EC D0 05            [24] 2078 	pop	ar5
      0008EE D0 06            [24] 2079 	pop	ar6
      0008F0 D0 07            [24] 2080 	pop	ar7
                                   2081 ;	Eth.c:300: spi_control_write(2, 0x00, (read_macon1 | (1 << 0))); //mac enable for reception
      0008F2 44 01            [12] 2082 	orl	a,#0x01
      0008F4 F9               [12] 2083 	mov	r1,a
      0008F5 90r00r00         [24] 2084 	mov	dptr,#_spi_control_write_PARM_2
      0008F8 E4               [12] 2085 	clr	a
      0008F9 F0               [24] 2086 	movx	@dptr,a
      0008FA 90r00r00         [24] 2087 	mov	dptr,#_spi_control_write_PARM_3
      0008FD E9               [12] 2088 	mov	a,r1
      0008FE F0               [24] 2089 	movx	@dptr,a
      0008FF 75 82 02         [24] 2090 	mov	dpl, #0x02
      000902 C0 07            [24] 2091 	push	ar7
      000904 C0 06            [24] 2092 	push	ar6
      000906 C0 05            [24] 2093 	push	ar5
      000908 C0 04            [24] 2094 	push	ar4
      00090A C0 03            [24] 2095 	push	ar3
      00090C C0 02            [24] 2096 	push	ar2
      00090E 12r00r00         [24] 2097 	lcall	_spi_control_write
      000911 D0 02            [24] 2098 	pop	ar2
      000913 D0 03            [24] 2099 	pop	ar3
      000915 D0 04            [24] 2100 	pop	ar4
      000917 D0 05            [24] 2101 	pop	ar5
      000919 D0 06            [24] 2102 	pop	ar6
      00091B D0 07            [24] 2103 	pop	ar7
                                   2104 ;	Eth.c:301: phy_spi_write(0x00, 0x0100);
      00091D 90r00r00         [24] 2105 	mov	dptr,#_phy_spi_write_PARM_2
      000920 E4               [12] 2106 	clr	a
      000921 F0               [24] 2107 	movx	@dptr,a
      000922 04               [12] 2108 	inc	a
      000923 A3               [24] 2109 	inc	dptr
      000924 F0               [24] 2110 	movx	@dptr,a
      000925 75 82 00         [24] 2111 	mov	dpl, #0x00
      000928 C0 07            [24] 2112 	push	ar7
      00092A C0 06            [24] 2113 	push	ar6
      00092C C0 05            [24] 2114 	push	ar5
      00092E C0 04            [24] 2115 	push	ar4
      000930 C0 03            [24] 2116 	push	ar3
      000932 C0 02            [24] 2117 	push	ar2
      000934 12r00r00         [24] 2118 	lcall	_phy_spi_write
      000937 D0 02            [24] 2119 	pop	ar2
      000939 D0 03            [24] 2120 	pop	ar3
      00093B D0 04            [24] 2121 	pop	ar4
      00093D D0 05            [24] 2122 	pop	ar5
      00093F D0 06            [24] 2123 	pop	ar6
      000941 D0 07            [24] 2124 	pop	ar7
                                   2125 ;	Eth.c:304: phy_spi_write(0x14, 0x3422); // PHLCON: LEDA=Link/Activity, LEDB=RX/TX Activity
      000943 90r00r00         [24] 2126 	mov	dptr,#_phy_spi_write_PARM_2
      000946 74 22            [12] 2127 	mov	a,#0x22
      000948 F0               [24] 2128 	movx	@dptr,a
      000949 74 34            [12] 2129 	mov	a,#0x34
      00094B A3               [24] 2130 	inc	dptr
      00094C F0               [24] 2131 	movx	@dptr,a
      00094D 75 82 14         [24] 2132 	mov	dpl, #0x14
      000950 C0 07            [24] 2133 	push	ar7
      000952 C0 06            [24] 2134 	push	ar6
      000954 C0 05            [24] 2135 	push	ar5
      000956 C0 04            [24] 2136 	push	ar4
      000958 C0 03            [24] 2137 	push	ar3
      00095A C0 02            [24] 2138 	push	ar2
      00095C 12r00r00         [24] 2139 	lcall	_phy_spi_write
      00095F D0 02            [24] 2140 	pop	ar2
      000961 D0 03            [24] 2141 	pop	ar3
      000963 D0 04            [24] 2142 	pop	ar4
      000965 D0 05            [24] 2143 	pop	ar5
      000967 D0 06            [24] 2144 	pop	ar6
      000969 D0 07            [24] 2145 	pop	ar7
                                   2146 ;	Eth.c:305: spi_control_write(0, 0X1F, 0X04); // reception enable bit
      00096B 90r00r00         [24] 2147 	mov	dptr,#_spi_control_write_PARM_2
      00096E 74 1F            [12] 2148 	mov	a,#0x1f
      000970 F0               [24] 2149 	movx	@dptr,a
      000971 90r00r00         [24] 2150 	mov	dptr,#_spi_control_write_PARM_3
      000974 74 04            [12] 2151 	mov	a,#0x04
      000976 F0               [24] 2152 	movx	@dptr,a
      000977 75 82 00         [24] 2153 	mov	dpl, #0x00
      00097A C0 07            [24] 2154 	push	ar7
      00097C C0 06            [24] 2155 	push	ar6
      00097E C0 05            [24] 2156 	push	ar5
      000980 C0 04            [24] 2157 	push	ar4
      000982 C0 03            [24] 2158 	push	ar3
      000984 C0 02            [24] 2159 	push	ar2
      000986 12r00r00         [24] 2160 	lcall	_spi_control_write
                                   2161 ;	Eth.c:306: printf("\nENC28J60 Initialization Complete.\n");
      000989 74r54            [12] 2162 	mov	a,#___str_7
      00098B C0 E0            [24] 2163 	push	acc
      00098D 74s01            [12] 2164 	mov	a,#(___str_7 >> 8)
      00098F C0 E0            [24] 2165 	push	acc
      000991 74 80            [12] 2166 	mov	a,#0x80
      000993 C0 E0            [24] 2167 	push	acc
      000995 12r00r00         [24] 2168 	lcall	_printf
      000998 15 81            [12] 2169 	dec	sp
      00099A 15 81            [12] 2170 	dec	sp
      00099C 15 81            [12] 2171 	dec	sp
      00099E D0 02            [24] 2172 	pop	ar2
      0009A0 D0 03            [24] 2173 	pop	ar3
      0009A2 D0 04            [24] 2174 	pop	ar4
      0009A4 D0 05            [24] 2175 	pop	ar5
      0009A6 D0 06            [24] 2176 	pop	ar6
      0009A8 D0 07            [24] 2177 	pop	ar7
                                   2178 ;	Eth.c:308: mac[2], mac[3], mac[4], mac[5]);
      0009AA 85*00 82         [24] 2179 	mov	dpl,_enc_init_sloc0_1_0
      0009AD 85*01 83         [24] 2180 	mov	dph,(_enc_init_sloc0_1_0 + 1)
      0009B0 85*02 F0         [24] 2181 	mov	b,(_enc_init_sloc0_1_0 + 2)
      0009B3 12r00r00         [24] 2182 	lcall	__gptrget
      0009B6 F9               [12] 2183 	mov	r1,a
      0009B7 89*00            [24] 2184 	mov	_enc_init_sloc0_1_0,r1
      0009B9 75*01 00         [24] 2185 	mov	(_enc_init_sloc0_1_0 + 1),#0x00
      0009BC 85*03 82         [24] 2186 	mov	dpl,_enc_init_sloc1_1_0
      0009BF 85*04 83         [24] 2187 	mov	dph,(_enc_init_sloc1_1_0 + 1)
      0009C2 85*05 F0         [24] 2188 	mov	b,(_enc_init_sloc1_1_0 + 2)
      0009C5 12r00r00         [24] 2189 	lcall	__gptrget
      0009C8 F9               [12] 2190 	mov	r1,a
      0009C9 89*03            [24] 2191 	mov	_enc_init_sloc1_1_0,r1
      0009CB 75*04 00         [24] 2192 	mov	(_enc_init_sloc1_1_0 + 1),#0x00
      0009CE 85*06 82         [24] 2193 	mov	dpl,_enc_init_sloc2_1_0
      0009D1 85*07 83         [24] 2194 	mov	dph,(_enc_init_sloc2_1_0 + 1)
      0009D4 85*08 F0         [24] 2195 	mov	b,(_enc_init_sloc2_1_0 + 2)
      0009D7 12r00r00         [24] 2196 	lcall	__gptrget
      0009DA F9               [12] 2197 	mov	r1,a
      0009DB 89*06            [24] 2198 	mov	_enc_init_sloc2_1_0,r1
      0009DD 75*07 00         [24] 2199 	mov	(_enc_init_sloc2_1_0 + 1),#0x00
      0009E0 85*09 82         [24] 2200 	mov	dpl,_enc_init_sloc3_1_0
      0009E3 85*0A 83         [24] 2201 	mov	dph,(_enc_init_sloc3_1_0 + 1)
      0009E6 85*0B F0         [24] 2202 	mov	b,(_enc_init_sloc3_1_0 + 2)
      0009E9 12r00r00         [24] 2203 	lcall	__gptrget
      0009EC F8               [12] 2204 	mov	r0,a
      0009ED 79 00            [12] 2205 	mov	r1,#0x00
                                   2206 ;	Eth.c:307: printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
      0009EF 8A 82            [24] 2207 	mov	dpl,r2
      0009F1 8B 83            [24] 2208 	mov	dph,r3
      0009F3 8C F0            [24] 2209 	mov	b,r4
      0009F5 12r00r00         [24] 2210 	lcall	__gptrget
      0009F8 FA               [12] 2211 	mov	r2,a
      0009F9 7C 00            [12] 2212 	mov	r4,#0x00
      0009FB 8D 82            [24] 2213 	mov	dpl,r5
      0009FD 8E 83            [24] 2214 	mov	dph,r6
      0009FF 8F F0            [24] 2215 	mov	b,r7
      000A01 12r00r00         [24] 2216 	lcall	__gptrget
      000A04 FD               [12] 2217 	mov	r5,a
      000A05 7F 00            [12] 2218 	mov	r7,#0x00
      000A07 C0*00            [24] 2219 	push	_enc_init_sloc0_1_0
      000A09 C0*01            [24] 2220 	push	(_enc_init_sloc0_1_0 + 1)
      000A0B C0*03            [24] 2221 	push	_enc_init_sloc1_1_0
      000A0D C0*04            [24] 2222 	push	(_enc_init_sloc1_1_0 + 1)
      000A0F C0*06            [24] 2223 	push	_enc_init_sloc2_1_0
      000A11 C0*07            [24] 2224 	push	(_enc_init_sloc2_1_0 + 1)
      000A13 C0 00            [24] 2225 	push	ar0
      000A15 C0 01            [24] 2226 	push	ar1
      000A17 C0 02            [24] 2227 	push	ar2
      000A19 C0 04            [24] 2228 	push	ar4
      000A1B C0 05            [24] 2229 	push	ar5
      000A1D C0 07            [24] 2230 	push	ar7
      000A1F 74r78            [12] 2231 	mov	a,#___str_8
      000A21 C0 E0            [24] 2232 	push	acc
      000A23 74s01            [12] 2233 	mov	a,#(___str_8 >> 8)
      000A25 C0 E0            [24] 2234 	push	acc
      000A27 74 80            [12] 2235 	mov	a,#0x80
      000A29 C0 E0            [24] 2236 	push	acc
      000A2B 12r00r00         [24] 2237 	lcall	_printf
      000A2E E5 81            [12] 2238 	mov	a,sp
      000A30 24 F1            [12] 2239 	add	a,#0xf1
      000A32 F5 81            [12] 2240 	mov	sp,a
                                   2241 ;	Eth.c:309: }
      000A34 22               [24] 2242 	ret
                                   2243 	.area CSEG    (CODE)
                                   2244 	.area CONST   (CODE)
                                   2245 	.area CONST   (CODE)
      000000                       2246 ___str_0:
      000000 0A                    2247 	.db 0x0a
      000001 49 6E 76 61 6C 69 64  2248 	.ascii "Invalid Buffer Size. Buffer exceeds valid address range."
             20 42 75 66 66 65 72
             20 53 69 7A 65 2E 20
             42 75 66 66 65 72 20
             65 78 63 65 65 64 73
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 72 61 6E 67 65 2E
      000039 0A                    2249 	.db 0x0a
      00003A 00                    2250 	.db 0x00
                                   2251 	.area CSEG    (CODE)
                                   2252 	.area CONST   (CODE)
      00003B                       2253 ___str_1:
      00003B 41 52 50 20 72 65 71  2254 	.ascii "ARP request sent successfully."
             75 65 73 74 20 73 65
             6E 74 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79 2E
      000059 0A                    2255 	.db 0x0a
      00005A 0D                    2256 	.db 0x0d
      00005B 00                    2257 	.db 0x00
                                   2258 	.area CSEG    (CODE)
                                   2259 	.area CONST   (CODE)
      00005C                       2260 ___str_2:
      00005C 41 52 50 20 74 72 61  2261 	.ascii "ARP transmission failed. Check error flags."
             6E 73 6D 69 73 73 69
             6F 6E 20 66 61 69 6C
             65 64 2E 20 43 68 65
             63 6B 20 65 72 72 6F
             72 20 66 6C 61 67 73
             2E
      000087 0A                    2262 	.db 0x0a
      000088 0D                    2263 	.db 0x0d
      000089 00                    2264 	.db 0x00
                                   2265 	.area CSEG    (CODE)
                                   2266 	.area CONST   (CODE)
      00008A                       2267 ___str_3:
      00008A 54 72 61 6E 73 6D 69  2268 	.ascii "Transmission timeout. ENC28J60 may not be functioning correc"
             73 73 69 6F 6E 20 74
             69 6D 65 6F 75 74 2E
             20 45 4E 43 32 38 4A
             36 30 20 6D 61 79 20
             6E 6F 74 20 62 65 20
             66 75 6E 63 74 69 6F
             6E 69 6E 67 20 63 6F
             72 72 65 63
      0000C6 74 6C 79 2E           2269 	.ascii "tly."
      0000CA 0A                    2270 	.db 0x0a
      0000CB 0D                    2271 	.db 0x0d
      0000CC 00                    2272 	.db 0x00
                                   2273 	.area CSEG    (CODE)
                                   2274 	.area CONST   (CODE)
      0000CD                       2275 ___str_4:
      0000CD 49 6E 74 65 72 72 72  2276 	.ascii "Interrrrrrrruuuuuuuuuppppppppttttttt"
             72 72 72 72 72 75 75
             75 75 75 75 75 75 75
             70 70 70 70 70 70 70
             70 74 74 74 74 74 74
             74
      0000F1 0A                    2277 	.db 0x0a
      0000F2 0D                    2278 	.db 0x0d
      0000F3 00                    2279 	.db 0x00
                                   2280 	.area CSEG    (CODE)
                                   2281 	.area CONST   (CODE)
      0000F4                       2282 ___str_5:
      0000F4 0A                    2283 	.db 0x0a
      0000F5 49 6E 76 61 6C 69 64  2284 	.ascii "Invalid Buffer Range: Start 0x%04X, End 0x%04X"
             20 42 75 66 66 65 72
             20 52 61 6E 67 65 3A
             20 53 74 61 72 74 20
             30 78 25 30 34 58 2C
             20 45 6E 64 20 30 78
             25 30 34 58
      000123 0A                    2285 	.db 0x0a
      000124 00                    2286 	.db 0x00
                                   2287 	.area CSEG    (CODE)
                                   2288 	.area CONST   (CODE)
      000125                       2289 ___str_6:
      000125 0A                    2290 	.db 0x0a
      000126 42 75 66 66 65 72 20  2291 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      000152 0A                    2292 	.db 0x0a
      000153 00                    2293 	.db 0x00
                                   2294 	.area CSEG    (CODE)
                                   2295 	.area CONST   (CODE)
      000154                       2296 ___str_7:
      000154 0A                    2297 	.db 0x0a
      000155 45 4E 43 32 38 4A 36  2298 	.ascii "ENC28J60 Initialization Complete."
             30 20 49 6E 69 74 69
             61 6C 69 7A 61 74 69
             6F 6E 20 43 6F 6D 70
             6C 65 74 65 2E
      000176 0A                    2299 	.db 0x0a
      000177 00                    2300 	.db 0x00
                                   2301 	.area CSEG    (CODE)
                                   2302 	.area CONST   (CODE)
      000178                       2303 ___str_8:
      000178 4D 41 43 20 41 64 64  2304 	.ascii "MAC Address: %02X:%02X:%02X:%02X:%02X:%02X"
             72 65 73 73 3A 20 25
             30 32 58 3A 25 30 32
             58 3A 25 30 32 58 3A
             25 30 32 58 3A 25 30
             32 58 3A 25 30 32 58
      0001A2 0A                    2305 	.db 0x0a
      0001A3 00                    2306 	.db 0x00
                                   2307 	.area CSEG    (CODE)
                                   2308 	.area XINIT   (CODE)
                                   2309 	.area CABS    (ABS,CODE)
