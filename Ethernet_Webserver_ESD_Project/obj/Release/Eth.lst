                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module Eth
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _enc28j60_transmission_successful
                                     12 	.globl _wait_for_transmission_complete
                                     13 	.globl _enc28j60_set_transmit_pointers
                                     14 	.globl _enc28j60_start_transmission
                                     15 	.globl _delay_ms
                                     16 	.globl _set_mac_address
                                     17 	.globl _spi_control_write
                                     18 	.globl _spi_buffer_write
                                     19 	.globl _mac_spi_read
                                     20 	.globl _printf
                                     21 	.globl _TF1
                                     22 	.globl _TR1
                                     23 	.globl _TF0
                                     24 	.globl _TR0
                                     25 	.globl _IE1
                                     26 	.globl _IT1
                                     27 	.globl _IE0
                                     28 	.globl _IT0
                                     29 	.globl _SM0
                                     30 	.globl _SM1
                                     31 	.globl _SM2
                                     32 	.globl _REN
                                     33 	.globl _TB8
                                     34 	.globl _RB8
                                     35 	.globl _TI
                                     36 	.globl _RI
                                     37 	.globl _CY
                                     38 	.globl _AC
                                     39 	.globl _F0
                                     40 	.globl _RS1
                                     41 	.globl _RS0
                                     42 	.globl _OV
                                     43 	.globl _F1
                                     44 	.globl _P
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD0
                                     52 	.globl _TXD
                                     53 	.globl _RXD0
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _PS
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _EA
                                     93 	.globl _ES
                                     94 	.globl _ET1
                                     95 	.globl _EX1
                                     96 	.globl _ET0
                                     97 	.globl _EX0
                                     98 	.globl _BREG_F7
                                     99 	.globl _BREG_F6
                                    100 	.globl _BREG_F5
                                    101 	.globl _BREG_F4
                                    102 	.globl _BREG_F3
                                    103 	.globl _BREG_F2
                                    104 	.globl _BREG_F1
                                    105 	.globl _BREG_F0
                                    106 	.globl _P5_7
                                    107 	.globl _P5_6
                                    108 	.globl _P5_5
                                    109 	.globl _P5_4
                                    110 	.globl _P5_3
                                    111 	.globl _P5_2
                                    112 	.globl _P5_1
                                    113 	.globl _P5_0
                                    114 	.globl _P4_7
                                    115 	.globl _P4_6
                                    116 	.globl _P4_5
                                    117 	.globl _P4_4
                                    118 	.globl _P4_3
                                    119 	.globl _P4_2
                                    120 	.globl _P4_1
                                    121 	.globl _P4_0
                                    122 	.globl _PX0L
                                    123 	.globl _PT0L
                                    124 	.globl _PX1L
                                    125 	.globl _PT1L
                                    126 	.globl _PSL
                                    127 	.globl _PT2L
                                    128 	.globl _PPCL
                                    129 	.globl _EC
                                    130 	.globl _CCF0
                                    131 	.globl _CCF1
                                    132 	.globl _CCF2
                                    133 	.globl _CCF3
                                    134 	.globl _CCF4
                                    135 	.globl _CR
                                    136 	.globl _CF
                                    137 	.globl _TF2
                                    138 	.globl _EXF2
                                    139 	.globl _RCLK
                                    140 	.globl _TCLK
                                    141 	.globl _EXEN2
                                    142 	.globl _TR2
                                    143 	.globl _C_T2
                                    144 	.globl _CP_RL2
                                    145 	.globl _T2CON_7
                                    146 	.globl _T2CON_6
                                    147 	.globl _T2CON_5
                                    148 	.globl _T2CON_4
                                    149 	.globl _T2CON_3
                                    150 	.globl _T2CON_2
                                    151 	.globl _T2CON_1
                                    152 	.globl _T2CON_0
                                    153 	.globl _PT2
                                    154 	.globl _ET2
                                    155 	.globl _TMOD
                                    156 	.globl _TL1
                                    157 	.globl _TL0
                                    158 	.globl _TH1
                                    159 	.globl _TH0
                                    160 	.globl _TCON
                                    161 	.globl _SP
                                    162 	.globl _SCON
                                    163 	.globl _SBUF0
                                    164 	.globl _SBUF
                                    165 	.globl _PSW
                                    166 	.globl _PCON
                                    167 	.globl _P3
                                    168 	.globl _P2
                                    169 	.globl _P1
                                    170 	.globl _P0
                                    171 	.globl _IP
                                    172 	.globl _IE
                                    173 	.globl _DP0L
                                    174 	.globl _DPL
                                    175 	.globl _DP0H
                                    176 	.globl _DPH
                                    177 	.globl _B
                                    178 	.globl _ACC
                                    179 	.globl _EECON
                                    180 	.globl _KBF
                                    181 	.globl _KBE
                                    182 	.globl _KBLS
                                    183 	.globl _BRL
                                    184 	.globl _BDRCON
                                    185 	.globl _T2MOD
                                    186 	.globl _SPDAT
                                    187 	.globl _SPSTA
                                    188 	.globl _SPCON
                                    189 	.globl _SADEN
                                    190 	.globl _SADDR
                                    191 	.globl _WDTPRG
                                    192 	.globl _WDTRST
                                    193 	.globl _P5
                                    194 	.globl _P4
                                    195 	.globl _IPH1
                                    196 	.globl _IPL1
                                    197 	.globl _IPH0
                                    198 	.globl _IPL0
                                    199 	.globl _IEN1
                                    200 	.globl _IEN0
                                    201 	.globl _CMOD
                                    202 	.globl _CL
                                    203 	.globl _CH
                                    204 	.globl _CCON
                                    205 	.globl _CCAPM4
                                    206 	.globl _CCAPM3
                                    207 	.globl _CCAPM2
                                    208 	.globl _CCAPM1
                                    209 	.globl _CCAPM0
                                    210 	.globl _CCAP4L
                                    211 	.globl _CCAP3L
                                    212 	.globl _CCAP2L
                                    213 	.globl _CCAP1L
                                    214 	.globl _CCAP0L
                                    215 	.globl _CCAP4H
                                    216 	.globl _CCAP3H
                                    217 	.globl _CCAP2H
                                    218 	.globl _CCAP1H
                                    219 	.globl _CCAP0H
                                    220 	.globl _CKCON1
                                    221 	.globl _CKCON0
                                    222 	.globl _CKRL
                                    223 	.globl _AUXR1
                                    224 	.globl _AUXR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T2CON
                                    230 	.globl _target_ip
                                    231 	.globl _source_ip
                                    232 	.globl _dest_mac
                                    233 	.globl _source_mac
                                    234 	.globl _enc28j60_set_transmit_pointers_PARM_2
                                    235 	.globl _enc28j60_init_rx_buffer_PARM_2
                                    236 	.globl _enc28j60_init_rx_buffer
                                    237 	.globl _send_arp_request
                                    238 ;--------------------------------------------------------
                                    239 ; special function registers
                                    240 ;--------------------------------------------------------
                                    241 	.area RSEG    (ABS,DATA)
      000000                        242 	.org 0x0000
                           0000C8   243 _T2CON	=	0x00c8
                           0000CA   244 _RCAP2L	=	0x00ca
                           0000CB   245 _RCAP2H	=	0x00cb
                           0000CC   246 _TL2	=	0x00cc
                           0000CD   247 _TH2	=	0x00cd
                           00008E   248 _AUXR	=	0x008e
                           0000A2   249 _AUXR1	=	0x00a2
                           000097   250 _CKRL	=	0x0097
                           00008F   251 _CKCON0	=	0x008f
                           0000AF   252 _CKCON1	=	0x00af
                           0000FA   253 _CCAP0H	=	0x00fa
                           0000FB   254 _CCAP1H	=	0x00fb
                           0000FC   255 _CCAP2H	=	0x00fc
                           0000FD   256 _CCAP3H	=	0x00fd
                           0000FE   257 _CCAP4H	=	0x00fe
                           0000EA   258 _CCAP0L	=	0x00ea
                           0000EB   259 _CCAP1L	=	0x00eb
                           0000EC   260 _CCAP2L	=	0x00ec
                           0000ED   261 _CCAP3L	=	0x00ed
                           0000EE   262 _CCAP4L	=	0x00ee
                           0000DA   263 _CCAPM0	=	0x00da
                           0000DB   264 _CCAPM1	=	0x00db
                           0000DC   265 _CCAPM2	=	0x00dc
                           0000DD   266 _CCAPM3	=	0x00dd
                           0000DE   267 _CCAPM4	=	0x00de
                           0000D8   268 _CCON	=	0x00d8
                           0000F9   269 _CH	=	0x00f9
                           0000E9   270 _CL	=	0x00e9
                           0000D9   271 _CMOD	=	0x00d9
                           0000A8   272 _IEN0	=	0x00a8
                           0000B1   273 _IEN1	=	0x00b1
                           0000B8   274 _IPL0	=	0x00b8
                           0000B7   275 _IPH0	=	0x00b7
                           0000B2   276 _IPL1	=	0x00b2
                           0000B3   277 _IPH1	=	0x00b3
                           0000C0   278 _P4	=	0x00c0
                           0000E8   279 _P5	=	0x00e8
                           0000A6   280 _WDTRST	=	0x00a6
                           0000A7   281 _WDTPRG	=	0x00a7
                           0000A9   282 _SADDR	=	0x00a9
                           0000B9   283 _SADEN	=	0x00b9
                           0000C3   284 _SPCON	=	0x00c3
                           0000C4   285 _SPSTA	=	0x00c4
                           0000C5   286 _SPDAT	=	0x00c5
                           0000C9   287 _T2MOD	=	0x00c9
                           00009B   288 _BDRCON	=	0x009b
                           00009A   289 _BRL	=	0x009a
                           00009C   290 _KBLS	=	0x009c
                           00009D   291 _KBE	=	0x009d
                           00009E   292 _KBF	=	0x009e
                           0000D2   293 _EECON	=	0x00d2
                           0000E0   294 _ACC	=	0x00e0
                           0000F0   295 _B	=	0x00f0
                           000083   296 _DPH	=	0x0083
                           000083   297 _DP0H	=	0x0083
                           000082   298 _DPL	=	0x0082
                           000082   299 _DP0L	=	0x0082
                           0000A8   300 _IE	=	0x00a8
                           0000B8   301 _IP	=	0x00b8
                           000080   302 _P0	=	0x0080
                           000090   303 _P1	=	0x0090
                           0000A0   304 _P2	=	0x00a0
                           0000B0   305 _P3	=	0x00b0
                           000087   306 _PCON	=	0x0087
                           0000D0   307 _PSW	=	0x00d0
                           000099   308 _SBUF	=	0x0099
                           000099   309 _SBUF0	=	0x0099
                           000098   310 _SCON	=	0x0098
                           000081   311 _SP	=	0x0081
                           000088   312 _TCON	=	0x0088
                           00008C   313 _TH0	=	0x008c
                           00008D   314 _TH1	=	0x008d
                           00008A   315 _TL0	=	0x008a
                           00008B   316 _TL1	=	0x008b
                           000089   317 _TMOD	=	0x0089
                                    318 ;--------------------------------------------------------
                                    319 ; special function bits
                                    320 ;--------------------------------------------------------
                                    321 	.area RSEG    (ABS,DATA)
      000000                        322 	.org 0x0000
                           0000AD   323 _ET2	=	0x00ad
                           0000BD   324 _PT2	=	0x00bd
                           0000C8   325 _T2CON_0	=	0x00c8
                           0000C9   326 _T2CON_1	=	0x00c9
                           0000CA   327 _T2CON_2	=	0x00ca
                           0000CB   328 _T2CON_3	=	0x00cb
                           0000CC   329 _T2CON_4	=	0x00cc
                           0000CD   330 _T2CON_5	=	0x00cd
                           0000CE   331 _T2CON_6	=	0x00ce
                           0000CF   332 _T2CON_7	=	0x00cf
                           0000C8   333 _CP_RL2	=	0x00c8
                           0000C9   334 _C_T2	=	0x00c9
                           0000CA   335 _TR2	=	0x00ca
                           0000CB   336 _EXEN2	=	0x00cb
                           0000CC   337 _TCLK	=	0x00cc
                           0000CD   338 _RCLK	=	0x00cd
                           0000CE   339 _EXF2	=	0x00ce
                           0000CF   340 _TF2	=	0x00cf
                           0000DF   341 _CF	=	0x00df
                           0000DE   342 _CR	=	0x00de
                           0000DC   343 _CCF4	=	0x00dc
                           0000DB   344 _CCF3	=	0x00db
                           0000DA   345 _CCF2	=	0x00da
                           0000D9   346 _CCF1	=	0x00d9
                           0000D8   347 _CCF0	=	0x00d8
                           0000AE   348 _EC	=	0x00ae
                           0000BE   349 _PPCL	=	0x00be
                           0000BD   350 _PT2L	=	0x00bd
                           0000BC   351 _PSL	=	0x00bc
                           0000BB   352 _PT1L	=	0x00bb
                           0000BA   353 _PX1L	=	0x00ba
                           0000B9   354 _PT0L	=	0x00b9
                           0000B8   355 _PX0L	=	0x00b8
                           0000C0   356 _P4_0	=	0x00c0
                           0000C1   357 _P4_1	=	0x00c1
                           0000C2   358 _P4_2	=	0x00c2
                           0000C3   359 _P4_3	=	0x00c3
                           0000C4   360 _P4_4	=	0x00c4
                           0000C5   361 _P4_5	=	0x00c5
                           0000C6   362 _P4_6	=	0x00c6
                           0000C7   363 _P4_7	=	0x00c7
                           0000E8   364 _P5_0	=	0x00e8
                           0000E9   365 _P5_1	=	0x00e9
                           0000EA   366 _P5_2	=	0x00ea
                           0000EB   367 _P5_3	=	0x00eb
                           0000EC   368 _P5_4	=	0x00ec
                           0000ED   369 _P5_5	=	0x00ed
                           0000EE   370 _P5_6	=	0x00ee
                           0000EF   371 _P5_7	=	0x00ef
                           0000F0   372 _BREG_F0	=	0x00f0
                           0000F1   373 _BREG_F1	=	0x00f1
                           0000F2   374 _BREG_F2	=	0x00f2
                           0000F3   375 _BREG_F3	=	0x00f3
                           0000F4   376 _BREG_F4	=	0x00f4
                           0000F5   377 _BREG_F5	=	0x00f5
                           0000F6   378 _BREG_F6	=	0x00f6
                           0000F7   379 _BREG_F7	=	0x00f7
                           0000A8   380 _EX0	=	0x00a8
                           0000A9   381 _ET0	=	0x00a9
                           0000AA   382 _EX1	=	0x00aa
                           0000AB   383 _ET1	=	0x00ab
                           0000AC   384 _ES	=	0x00ac
                           0000AF   385 _EA	=	0x00af
                           0000B8   386 _PX0	=	0x00b8
                           0000B9   387 _PT0	=	0x00b9
                           0000BA   388 _PX1	=	0x00ba
                           0000BB   389 _PT1	=	0x00bb
                           0000BC   390 _PS	=	0x00bc
                           000080   391 _P0_0	=	0x0080
                           000081   392 _P0_1	=	0x0081
                           000082   393 _P0_2	=	0x0082
                           000083   394 _P0_3	=	0x0083
                           000084   395 _P0_4	=	0x0084
                           000085   396 _P0_5	=	0x0085
                           000086   397 _P0_6	=	0x0086
                           000087   398 _P0_7	=	0x0087
                           000090   399 _P1_0	=	0x0090
                           000091   400 _P1_1	=	0x0091
                           000092   401 _P1_2	=	0x0092
                           000093   402 _P1_3	=	0x0093
                           000094   403 _P1_4	=	0x0094
                           000095   404 _P1_5	=	0x0095
                           000096   405 _P1_6	=	0x0096
                           000097   406 _P1_7	=	0x0097
                           0000A0   407 _P2_0	=	0x00a0
                           0000A1   408 _P2_1	=	0x00a1
                           0000A2   409 _P2_2	=	0x00a2
                           0000A3   410 _P2_3	=	0x00a3
                           0000A4   411 _P2_4	=	0x00a4
                           0000A5   412 _P2_5	=	0x00a5
                           0000A6   413 _P2_6	=	0x00a6
                           0000A7   414 _P2_7	=	0x00a7
                           0000B0   415 _P3_0	=	0x00b0
                           0000B1   416 _P3_1	=	0x00b1
                           0000B2   417 _P3_2	=	0x00b2
                           0000B3   418 _P3_3	=	0x00b3
                           0000B4   419 _P3_4	=	0x00b4
                           0000B5   420 _P3_5	=	0x00b5
                           0000B6   421 _P3_6	=	0x00b6
                           0000B7   422 _P3_7	=	0x00b7
                           0000B0   423 _RXD	=	0x00b0
                           0000B0   424 _RXD0	=	0x00b0
                           0000B1   425 _TXD	=	0x00b1
                           0000B1   426 _TXD0	=	0x00b1
                           0000B2   427 _INT0	=	0x00b2
                           0000B3   428 _INT1	=	0x00b3
                           0000B4   429 _T0	=	0x00b4
                           0000B5   430 _T1	=	0x00b5
                           0000B6   431 _WR	=	0x00b6
                           0000B7   432 _RD	=	0x00b7
                           0000D0   433 _P	=	0x00d0
                           0000D1   434 _F1	=	0x00d1
                           0000D2   435 _OV	=	0x00d2
                           0000D3   436 _RS0	=	0x00d3
                           0000D4   437 _RS1	=	0x00d4
                           0000D5   438 _F0	=	0x00d5
                           0000D6   439 _AC	=	0x00d6
                           0000D7   440 _CY	=	0x00d7
                           000098   441 _RI	=	0x0098
                           000099   442 _TI	=	0x0099
                           00009A   443 _RB8	=	0x009a
                           00009B   444 _TB8	=	0x009b
                           00009C   445 _REN	=	0x009c
                           00009D   446 _SM2	=	0x009d
                           00009E   447 _SM1	=	0x009e
                           00009F   448 _SM0	=	0x009f
                           000088   449 _IT0	=	0x0088
                           000089   450 _IE0	=	0x0089
                           00008A   451 _IT1	=	0x008a
                           00008B   452 _IE1	=	0x008b
                           00008C   453 _TR0	=	0x008c
                           00008D   454 _TF0	=	0x008d
                           00008E   455 _TR1	=	0x008e
                           00008F   456 _TF1	=	0x008f
                                    457 ;--------------------------------------------------------
                                    458 ; overlayable register banks
                                    459 ;--------------------------------------------------------
                                    460 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        461 	.ds 8
                                    462 ;--------------------------------------------------------
                                    463 ; internal ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area DSEG    (DATA)
                                    466 ;--------------------------------------------------------
                                    467 ; overlayable items in internal ram
                                    468 ;--------------------------------------------------------
                                    469 ;--------------------------------------------------------
                                    470 ; indirectly addressable internal ram data
                                    471 ;--------------------------------------------------------
                                    472 	.area ISEG    (DATA)
                                    473 ;--------------------------------------------------------
                                    474 ; absolute internal ram data
                                    475 ;--------------------------------------------------------
                                    476 	.area IABS    (ABS,DATA)
                                    477 	.area IABS    (ABS,DATA)
                                    478 ;--------------------------------------------------------
                                    479 ; bit data
                                    480 ;--------------------------------------------------------
                                    481 	.area BSEG    (BIT)
      000000                        482 _enc28j60_transmission_successful_sloc0_1_0:
      000000                        483 	.ds 1
                                    484 ;--------------------------------------------------------
                                    485 ; paged external ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area PSEG    (PAG,XDATA)
                                    488 ;--------------------------------------------------------
                                    489 ; uninitialized external ram data
                                    490 ;--------------------------------------------------------
                                    491 	.area XSEG    (XDATA)
      000000                        492 _delay_ms_ms_10000_67:
      000000                        493 	.ds 2
      000002                        494 _delay_ms_i_20000_69:
      000002                        495 	.ds 4
      000006                        496 _enc28j60_init_rx_buffer_PARM_2:
      000006                        497 	.ds 2
      000008                        498 _enc28j60_init_rx_buffer_start_address_10000_73:
      000008                        499 	.ds 2
      00000A                        500 _enc28j60_set_transmit_pointers_PARM_2:
      00000A                        501 	.ds 2
      00000C                        502 _enc28j60_set_transmit_pointers_start_address_10000_76:
      00000C                        503 	.ds 2
      00000E                        504 _wait_for_transmission_complete_timeout_ms_10000_78:
      00000E                        505 	.ds 2
      000010                        506 _send_arp_request_source_mac_10000_84:
      000010                        507 	.ds 6
      000016                        508 _send_arp_request_dest_mac_10000_84:
      000016                        509 	.ds 6
      00001C                        510 _send_arp_request_source_ip_10000_84:
      00001C                        511 	.ds 4
      000020                        512 _send_arp_request_target_ip_10000_84:
      000020                        513 	.ds 4
      000024                        514 _send_arp_request_arp_packet_10000_84:
      000024                        515 	.ds 51
                                    516 ;--------------------------------------------------------
                                    517 ; absolute external ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area XABS    (ABS,XDATA)
                                    520 ;--------------------------------------------------------
                                    521 ; initialized external ram data
                                    522 ;--------------------------------------------------------
                                    523 	.area XISEG   (XDATA)
      000000                        524 _source_mac::
      000000                        525 	.ds 6
      000006                        526 _dest_mac::
      000006                        527 	.ds 6
      00000C                        528 _source_ip::
      00000C                        529 	.ds 4
      000010                        530 _target_ip::
      000010                        531 	.ds 4
                                    532 	.area HOME    (CODE)
                                    533 	.area GSINIT0 (CODE)
                                    534 	.area GSINIT1 (CODE)
                                    535 	.area GSINIT2 (CODE)
                                    536 	.area GSINIT3 (CODE)
                                    537 	.area GSINIT4 (CODE)
                                    538 	.area GSINIT5 (CODE)
                                    539 	.area GSINIT  (CODE)
                                    540 	.area GSFINAL (CODE)
                                    541 	.area CSEG    (CODE)
                                    542 ;--------------------------------------------------------
                                    543 ; global & static initialisations
                                    544 ;--------------------------------------------------------
                                    545 	.area HOME    (CODE)
                                    546 	.area GSINIT  (CODE)
                                    547 	.area GSFINAL (CODE)
                                    548 	.area GSINIT  (CODE)
                                    549 ;--------------------------------------------------------
                                    550 ; Home
                                    551 ;--------------------------------------------------------
                                    552 	.area HOME    (CODE)
                                    553 	.area HOME    (CODE)
                                    554 ;--------------------------------------------------------
                                    555 ; code
                                    556 ;--------------------------------------------------------
                                    557 	.area CSEG    (CODE)
                                    558 ;------------------------------------------------------------
                                    559 ;Allocation info for local variables in function 'set_mac_address'
                                    560 ;------------------------------------------------------------
                                    561 ;mac_address               Allocated with name '_set_mac_address_mac_address_10000_65'
                                    562 ;------------------------------------------------------------
                                    563 ;	Eth.c:35: void set_mac_address(uint8_t* mac_address)
                                    564 ;	-----------------------------------------
                                    565 ;	 function set_mac_address
                                    566 ;	-----------------------------------------
      000000                        567 _set_mac_address:
                           000007   568 	ar7 = 0x07
                           000006   569 	ar6 = 0x06
                           000005   570 	ar5 = 0x05
                           000004   571 	ar4 = 0x04
                           000003   572 	ar3 = 0x03
                           000002   573 	ar2 = 0x02
                           000001   574 	ar1 = 0x01
                           000000   575 	ar0 = 0x00
                                    576 ;	Eth.c:41: spi_control_write(3, 0x01, 0x00);  // MAADR6
      000000 90r00r00         [24]  577 	mov	dptr,#_spi_control_write_PARM_2
      000003 74 01            [12]  578 	mov	a,#0x01
      000005 F0               [24]  579 	movx	@dptr,a
      000006 90r00r00         [24]  580 	mov	dptr,#_spi_control_write_PARM_3
      000009 E4               [12]  581 	clr	a
      00000A F0               [24]  582 	movx	@dptr,a
      00000B 75 82 03         [24]  583 	mov	dpl, #0x03
      00000E 12r00r00         [24]  584 	lcall	_spi_control_write
                                    585 ;	Eth.c:42: spi_control_write(3, 0x00, 0x11);  // MAADR5
      000011 90r00r00         [24]  586 	mov	dptr,#_spi_control_write_PARM_2
      000014 E4               [12]  587 	clr	a
      000015 F0               [24]  588 	movx	@dptr,a
      000016 90r00r00         [24]  589 	mov	dptr,#_spi_control_write_PARM_3
      000019 74 11            [12]  590 	mov	a,#0x11
      00001B F0               [24]  591 	movx	@dptr,a
      00001C 75 82 03         [24]  592 	mov	dpl, #0x03
      00001F 12r00r00         [24]  593 	lcall	_spi_control_write
                                    594 ;	Eth.c:43: spi_control_write(3, 0x03, 0x22);  // MAADR4
      000022 90r00r00         [24]  595 	mov	dptr,#_spi_control_write_PARM_2
      000025 74 03            [12]  596 	mov	a,#0x03
      000027 F0               [24]  597 	movx	@dptr,a
      000028 90r00r00         [24]  598 	mov	dptr,#_spi_control_write_PARM_3
      00002B 74 22            [12]  599 	mov	a,#0x22
      00002D F0               [24]  600 	movx	@dptr,a
      00002E 75 82 03         [24]  601 	mov	dpl, #0x03
      000031 12r00r00         [24]  602 	lcall	_spi_control_write
                                    603 ;	Eth.c:44: spi_control_write(3, 0x02, 0x33);  // MAADR3
      000034 90r00r00         [24]  604 	mov	dptr,#_spi_control_write_PARM_2
      000037 74 02            [12]  605 	mov	a,#0x02
      000039 F0               [24]  606 	movx	@dptr,a
      00003A 90r00r00         [24]  607 	mov	dptr,#_spi_control_write_PARM_3
      00003D 74 33            [12]  608 	mov	a,#0x33
      00003F F0               [24]  609 	movx	@dptr,a
      000040 75 82 03         [24]  610 	mov	dpl, #0x03
      000043 12r00r00         [24]  611 	lcall	_spi_control_write
                                    612 ;	Eth.c:45: spi_control_write(3, 0x05, 0x44);  // MAADR2
      000046 90r00r00         [24]  613 	mov	dptr,#_spi_control_write_PARM_2
      000049 74 05            [12]  614 	mov	a,#0x05
      00004B F0               [24]  615 	movx	@dptr,a
      00004C 90r00r00         [24]  616 	mov	dptr,#_spi_control_write_PARM_3
      00004F 74 44            [12]  617 	mov	a,#0x44
      000051 F0               [24]  618 	movx	@dptr,a
      000052 75 82 03         [24]  619 	mov	dpl, #0x03
      000055 12r00r00         [24]  620 	lcall	_spi_control_write
                                    621 ;	Eth.c:46: spi_control_write(3, 0x04, 0x55);  // MAADR1
      000058 90r00r00         [24]  622 	mov	dptr,#_spi_control_write_PARM_2
      00005B 74 04            [12]  623 	mov	a,#0x04
      00005D F0               [24]  624 	movx	@dptr,a
      00005E 90r00r00         [24]  625 	mov	dptr,#_spi_control_write_PARM_3
      000061 74 55            [12]  626 	mov	a,#0x55
      000063 F0               [24]  627 	movx	@dptr,a
      000064 75 82 03         [24]  628 	mov	dpl, #0x03
                                    629 ;	Eth.c:48: }
      000067 02r00r00         [24]  630 	ljmp	_spi_control_write
                                    631 ;------------------------------------------------------------
                                    632 ;Allocation info for local variables in function 'delay_ms'
                                    633 ;------------------------------------------------------------
                                    634 ;ms                        Allocated with name '_delay_ms_ms_10000_67'
                                    635 ;i                         Allocated with name '_delay_ms_i_20000_69'
                                    636 ;------------------------------------------------------------
                                    637 ;	Eth.c:51: void delay_ms(uint16_t ms)
                                    638 ;	-----------------------------------------
                                    639 ;	 function delay_ms
                                    640 ;	-----------------------------------------
      00006A                        641 _delay_ms:
      00006A AF 83            [24]  642 	mov	r7,dph
      00006C E5 82            [12]  643 	mov	a,dpl
      00006E 90r00r00         [24]  644 	mov	dptr,#_delay_ms_ms_10000_67
      000071 F0               [24]  645 	movx	@dptr,a
      000072 EF               [12]  646 	mov	a,r7
      000073 A3               [24]  647 	inc	dptr
      000074 F0               [24]  648 	movx	@dptr,a
                                    649 ;	Eth.c:53: for (volatile uint32_t i = 0; i < ms * 1000; i++)
      000075 90r00r02         [24]  650 	mov	dptr,#_delay_ms_i_20000_69
      000078 E4               [12]  651 	clr	a
      000079 F0               [24]  652 	movx	@dptr,a
      00007A A3               [24]  653 	inc	dptr
      00007B F0               [24]  654 	movx	@dptr,a
      00007C A3               [24]  655 	inc	dptr
      00007D F0               [24]  656 	movx	@dptr,a
      00007E A3               [24]  657 	inc	dptr
      00007F F0               [24]  658 	movx	@dptr,a
      000080 90r00r00         [24]  659 	mov	dptr,#_delay_ms_ms_10000_67
      000083 E0               [24]  660 	movx	a,@dptr
      000084 FE               [12]  661 	mov	r6,a
      000085 A3               [24]  662 	inc	dptr
      000086 E0               [24]  663 	movx	a,@dptr
      000087 FF               [12]  664 	mov	r7,a
      000088                        665 00103$:
      000088 90r00r00         [24]  666 	mov	dptr,#__mulint_PARM_2
      00008B EE               [12]  667 	mov	a,r6
      00008C F0               [24]  668 	movx	@dptr,a
      00008D EF               [12]  669 	mov	a,r7
      00008E A3               [24]  670 	inc	dptr
      00008F F0               [24]  671 	movx	@dptr,a
      000090 90 03 E8         [24]  672 	mov	dptr,#0x03e8
      000093 C0 07            [24]  673 	push	ar7
      000095 C0 06            [24]  674 	push	ar6
      000097 12r00r00         [24]  675 	lcall	__mulint
      00009A AC 82            [24]  676 	mov	r4, dpl
      00009C AD 83            [24]  677 	mov	r5, dph
      00009E D0 06            [24]  678 	pop	ar6
      0000A0 D0 07            [24]  679 	pop	ar7
      0000A2 90r00r02         [24]  680 	mov	dptr,#_delay_ms_i_20000_69
      0000A5 E0               [24]  681 	movx	a,@dptr
      0000A6 F8               [12]  682 	mov	r0,a
      0000A7 A3               [24]  683 	inc	dptr
      0000A8 E0               [24]  684 	movx	a,@dptr
      0000A9 F9               [12]  685 	mov	r1,a
      0000AA A3               [24]  686 	inc	dptr
      0000AB E0               [24]  687 	movx	a,@dptr
      0000AC FA               [12]  688 	mov	r2,a
      0000AD A3               [24]  689 	inc	dptr
      0000AE E0               [24]  690 	movx	a,@dptr
      0000AF FB               [12]  691 	mov	r3,a
      0000B0 C0 06            [24]  692 	push	ar6
      0000B2 C0 07            [24]  693 	push	ar7
      0000B4 7E 00            [12]  694 	mov	r6,#0x00
      0000B6 7F 00            [12]  695 	mov	r7,#0x00
      0000B8 C3               [12]  696 	clr	c
      0000B9 E8               [12]  697 	mov	a,r0
      0000BA 9C               [12]  698 	subb	a,r4
      0000BB E9               [12]  699 	mov	a,r1
      0000BC 9D               [12]  700 	subb	a,r5
      0000BD EA               [12]  701 	mov	a,r2
      0000BE 9E               [12]  702 	subb	a,r6
      0000BF EB               [12]  703 	mov	a,r3
      0000C0 9F               [12]  704 	subb	a,r7
      0000C1 D0 07            [24]  705 	pop	ar7
      0000C3 D0 06            [24]  706 	pop	ar6
      0000C5 50 23            [24]  707 	jnc	00105$
      0000C7 90r00r02         [24]  708 	mov	dptr,#_delay_ms_i_20000_69
      0000CA E0               [24]  709 	movx	a,@dptr
      0000CB FA               [12]  710 	mov	r2,a
      0000CC A3               [24]  711 	inc	dptr
      0000CD E0               [24]  712 	movx	a,@dptr
      0000CE FB               [12]  713 	mov	r3,a
      0000CF A3               [24]  714 	inc	dptr
      0000D0 E0               [24]  715 	movx	a,@dptr
      0000D1 FC               [12]  716 	mov	r4,a
      0000D2 A3               [24]  717 	inc	dptr
      0000D3 E0               [24]  718 	movx	a,@dptr
      0000D4 FD               [12]  719 	mov	r5,a
      0000D5 90r00r02         [24]  720 	mov	dptr,#_delay_ms_i_20000_69
      0000D8 74 01            [12]  721 	mov	a,#0x01
      0000DA 2A               [12]  722 	add	a, r2
      0000DB F0               [24]  723 	movx	@dptr,a
      0000DC E4               [12]  724 	clr	a
      0000DD 3B               [12]  725 	addc	a, r3
      0000DE A3               [24]  726 	inc	dptr
      0000DF F0               [24]  727 	movx	@dptr,a
      0000E0 E4               [12]  728 	clr	a
      0000E1 3C               [12]  729 	addc	a, r4
      0000E2 A3               [24]  730 	inc	dptr
      0000E3 F0               [24]  731 	movx	@dptr,a
      0000E4 E4               [12]  732 	clr	a
      0000E5 3D               [12]  733 	addc	a, r5
      0000E6 A3               [24]  734 	inc	dptr
      0000E7 F0               [24]  735 	movx	@dptr,a
      0000E8 80 9E            [24]  736 	sjmp	00103$
      0000EA                        737 00105$:
                                    738 ;	Eth.c:57: }
      0000EA 22               [24]  739 	ret
                                    740 ;------------------------------------------------------------
                                    741 ;Allocation info for local variables in function 'enc28j60_start_transmission'
                                    742 ;------------------------------------------------------------
                                    743 ;econ1                     Allocated with name '_enc28j60_start_transmission_econ1_10000_72'
                                    744 ;------------------------------------------------------------
                                    745 ;	Eth.c:59: void enc28j60_start_transmission(void)
                                    746 ;	-----------------------------------------
                                    747 ;	 function enc28j60_start_transmission
                                    748 ;	-----------------------------------------
      0000EB                        749 _enc28j60_start_transmission:
                                    750 ;	Eth.c:61: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      0000EB 90r00r00         [24]  751 	mov	dptr,#_mac_spi_read_PARM_2
      0000EE E4               [12]  752 	clr	a
      0000EF F0               [24]  753 	movx	@dptr,a
      0000F0 75 82 1F         [24]  754 	mov	dpl, #0x1f
      0000F3 12r00r00         [24]  755 	lcall	_mac_spi_read
      0000F6 E5 82            [12]  756 	mov	a, dpl
                                    757 ;	Eth.c:62: econ1 |= 0x08; // Set TXRTS (bit 3)
      0000F8 44 08            [12]  758 	orl	a,#0x08
      0000FA FF               [12]  759 	mov	r7,a
                                    760 ;	Eth.c:63: spi_control_write(0, 0x1F, econ1); // Write back to ECON1
      0000FB 90r00r00         [24]  761 	mov	dptr,#_spi_control_write_PARM_2
      0000FE 74 1F            [12]  762 	mov	a,#0x1f
      000100 F0               [24]  763 	movx	@dptr,a
      000101 90r00r00         [24]  764 	mov	dptr,#_spi_control_write_PARM_3
      000104 EF               [12]  765 	mov	a,r7
      000105 F0               [24]  766 	movx	@dptr,a
      000106 75 82 00         [24]  767 	mov	dpl, #0x00
                                    768 ;	Eth.c:64: }
      000109 02r00r00         [24]  769 	ljmp	_spi_control_write
                                    770 ;------------------------------------------------------------
                                    771 ;Allocation info for local variables in function 'enc28j60_init_rx_buffer'
                                    772 ;------------------------------------------------------------
                                    773 ;end_address               Allocated with name '_enc28j60_init_rx_buffer_PARM_2'
                                    774 ;start_address             Allocated with name '_enc28j60_init_rx_buffer_start_address_10000_73'
                                    775 ;------------------------------------------------------------
                                    776 ;	Eth.c:65: void enc28j60_init_rx_buffer(uint16_t start_address, uint16_t end_address)
                                    777 ;	-----------------------------------------
                                    778 ;	 function enc28j60_init_rx_buffer
                                    779 ;	-----------------------------------------
      00010C                        780 _enc28j60_init_rx_buffer:
      00010C AF 83            [24]  781 	mov	r7,dph
      00010E E5 82            [12]  782 	mov	a,dpl
      000110 90r00r08         [24]  783 	mov	dptr,#_enc28j60_init_rx_buffer_start_address_10000_73
      000113 F0               [24]  784 	movx	@dptr,a
      000114 EF               [12]  785 	mov	a,r7
      000115 A3               [24]  786 	inc	dptr
      000116 F0               [24]  787 	movx	@dptr,a
                                    788 ;	Eth.c:68: if (start_address >= end_address || end_address > 0x1FFF) {
      000117 90r00r08         [24]  789 	mov	dptr,#_enc28j60_init_rx_buffer_start_address_10000_73
      00011A E0               [24]  790 	movx	a,@dptr
      00011B FE               [12]  791 	mov	r6,a
      00011C A3               [24]  792 	inc	dptr
      00011D E0               [24]  793 	movx	a,@dptr
      00011E FF               [12]  794 	mov	r7,a
      00011F 90r00r06         [24]  795 	mov	dptr,#_enc28j60_init_rx_buffer_PARM_2
      000122 E0               [24]  796 	movx	a,@dptr
      000123 FC               [12]  797 	mov	r4,a
      000124 A3               [24]  798 	inc	dptr
      000125 E0               [24]  799 	movx	a,@dptr
      000126 FD               [12]  800 	mov	r5,a
      000127 C3               [12]  801 	clr	c
      000128 EE               [12]  802 	mov	a,r6
      000129 9C               [12]  803 	subb	a,r4
      00012A EF               [12]  804 	mov	a,r7
      00012B 9D               [12]  805 	subb	a,r5
      00012C 50 0D            [24]  806 	jnc	00101$
      00012E 8C 02            [24]  807 	mov	ar2,r4
      000130 8D 03            [24]  808 	mov	ar3,r5
      000132 C3               [12]  809 	clr	c
      000133 74 FF            [12]  810 	mov	a,#0xff
      000135 9A               [12]  811 	subb	a,r2
      000136 74 1F            [12]  812 	mov	a,#0x1f
      000138 9B               [12]  813 	subb	a,r3
      000139 50 16            [24]  814 	jnc	00102$
      00013B                        815 00101$:
                                    816 ;	Eth.c:69: printf("Invalid RX buffer range.\n");
      00013B 74r00            [12]  817 	mov	a,#___str_0
      00013D C0 E0            [24]  818 	push	acc
      00013F 74s00            [12]  819 	mov	a,#(___str_0 >> 8)
      000141 C0 E0            [24]  820 	push	acc
      000143 74 80            [12]  821 	mov	a,#0x80
      000145 C0 E0            [24]  822 	push	acc
      000147 12r00r00         [24]  823 	lcall	_printf
      00014A 15 81            [12]  824 	dec	sp
      00014C 15 81            [12]  825 	dec	sp
      00014E 15 81            [12]  826 	dec	sp
                                    827 ;	Eth.c:70: return;
      000150 22               [24]  828 	ret
      000151                        829 00102$:
                                    830 ;	Eth.c:73: spi_control_write(0, 0x08, (uint8_t)(start_address & 0xFF)); // ERXSTL (low byte)
      000151 8E 03            [24]  831 	mov	ar3,r6
      000153 90r00r00         [24]  832 	mov	dptr,#_spi_control_write_PARM_2
      000156 74 08            [12]  833 	mov	a,#0x08
      000158 F0               [24]  834 	movx	@dptr,a
      000159 90r00r00         [24]  835 	mov	dptr,#_spi_control_write_PARM_3
      00015C EB               [12]  836 	mov	a,r3
      00015D F0               [24]  837 	movx	@dptr,a
      00015E 75 82 00         [24]  838 	mov	dpl, #0x00
      000161 C0 07            [24]  839 	push	ar7
      000163 C0 06            [24]  840 	push	ar6
      000165 C0 05            [24]  841 	push	ar5
      000167 C0 04            [24]  842 	push	ar4
      000169 C0 03            [24]  843 	push	ar3
      00016B 12r00r00         [24]  844 	lcall	_spi_control_write
      00016E D0 03            [24]  845 	pop	ar3
      000170 D0 04            [24]  846 	pop	ar4
      000172 D0 05            [24]  847 	pop	ar5
      000174 D0 06            [24]  848 	pop	ar6
      000176 D0 07            [24]  849 	pop	ar7
                                    850 ;	Eth.c:74: spi_control_write(0, 0x09, (uint8_t)((start_address >> 8) & 0xFF)); // ERXSTH (high byte)
      000178 8F 02            [24]  851 	mov	ar2,r7
      00017A 90r00r00         [24]  852 	mov	dptr,#_spi_control_write_PARM_2
      00017D 74 09            [12]  853 	mov	a,#0x09
      00017F F0               [24]  854 	movx	@dptr,a
      000180 90r00r00         [24]  855 	mov	dptr,#_spi_control_write_PARM_3
      000183 EA               [12]  856 	mov	a,r2
      000184 F0               [24]  857 	movx	@dptr,a
      000185 75 82 00         [24]  858 	mov	dpl, #0x00
      000188 C0 07            [24]  859 	push	ar7
      00018A C0 06            [24]  860 	push	ar6
      00018C C0 05            [24]  861 	push	ar5
      00018E C0 04            [24]  862 	push	ar4
      000190 C0 03            [24]  863 	push	ar3
      000192 C0 02            [24]  864 	push	ar2
      000194 12r00r00         [24]  865 	lcall	_spi_control_write
      000197 D0 02            [24]  866 	pop	ar2
      000199 D0 03            [24]  867 	pop	ar3
      00019B D0 04            [24]  868 	pop	ar4
      00019D D0 05            [24]  869 	pop	ar5
      00019F D0 06            [24]  870 	pop	ar6
      0001A1 D0 07            [24]  871 	pop	ar7
                                    872 ;	Eth.c:77: spi_control_write(0, 0x0A, (uint8_t)(end_address & 0xFF)); // ERXNDL (low byte)
      0001A3 8C 01            [24]  873 	mov	ar1,r4
      0001A5 90r00r00         [24]  874 	mov	dptr,#_spi_control_write_PARM_2
      0001A8 74 0A            [12]  875 	mov	a,#0x0a
      0001AA F0               [24]  876 	movx	@dptr,a
      0001AB 90r00r00         [24]  877 	mov	dptr,#_spi_control_write_PARM_3
      0001AE E9               [12]  878 	mov	a,r1
      0001AF F0               [24]  879 	movx	@dptr,a
      0001B0 75 82 00         [24]  880 	mov	dpl, #0x00
      0001B3 C0 07            [24]  881 	push	ar7
      0001B5 C0 06            [24]  882 	push	ar6
      0001B7 C0 05            [24]  883 	push	ar5
      0001B9 C0 04            [24]  884 	push	ar4
      0001BB C0 03            [24]  885 	push	ar3
      0001BD C0 02            [24]  886 	push	ar2
      0001BF 12r00r00         [24]  887 	lcall	_spi_control_write
      0001C2 D0 02            [24]  888 	pop	ar2
      0001C4 D0 03            [24]  889 	pop	ar3
      0001C6 D0 04            [24]  890 	pop	ar4
      0001C8 D0 05            [24]  891 	pop	ar5
      0001CA D0 06            [24]  892 	pop	ar6
      0001CC D0 07            [24]  893 	pop	ar7
                                    894 ;	Eth.c:78: spi_control_write(0, 0x0B, (uint8_t)((end_address >> 8) & 0xFF)); // ERXNDH (high byte)
      0001CE 8D 01            [24]  895 	mov	ar1,r5
      0001D0 90r00r00         [24]  896 	mov	dptr,#_spi_control_write_PARM_2
      0001D3 74 0B            [12]  897 	mov	a,#0x0b
      0001D5 F0               [24]  898 	movx	@dptr,a
      0001D6 90r00r00         [24]  899 	mov	dptr,#_spi_control_write_PARM_3
      0001D9 E9               [12]  900 	mov	a,r1
      0001DA F0               [24]  901 	movx	@dptr,a
      0001DB 75 82 00         [24]  902 	mov	dpl, #0x00
      0001DE C0 07            [24]  903 	push	ar7
      0001E0 C0 06            [24]  904 	push	ar6
      0001E2 C0 05            [24]  905 	push	ar5
      0001E4 C0 04            [24]  906 	push	ar4
      0001E6 C0 03            [24]  907 	push	ar3
      0001E8 C0 02            [24]  908 	push	ar2
      0001EA 12r00r00         [24]  909 	lcall	_spi_control_write
      0001ED D0 02            [24]  910 	pop	ar2
      0001EF D0 03            [24]  911 	pop	ar3
      0001F1 D0 04            [24]  912 	pop	ar4
      0001F3 D0 05            [24]  913 	pop	ar5
      0001F5 D0 06            [24]  914 	pop	ar6
      0001F7 D0 07            [24]  915 	pop	ar7
                                    916 ;	Eth.c:81: spi_control_write(0, 0x0C, (uint8_t)(start_address & 0xFF)); // ERXRDPTL (low byte)
      0001F9 90r00r00         [24]  917 	mov	dptr,#_spi_control_write_PARM_2
      0001FC 74 0C            [12]  918 	mov	a,#0x0c
      0001FE F0               [24]  919 	movx	@dptr,a
      0001FF 90r00r00         [24]  920 	mov	dptr,#_spi_control_write_PARM_3
      000202 EB               [12]  921 	mov	a,r3
      000203 F0               [24]  922 	movx	@dptr,a
      000204 75 82 00         [24]  923 	mov	dpl, #0x00
      000207 C0 07            [24]  924 	push	ar7
      000209 C0 06            [24]  925 	push	ar6
      00020B C0 05            [24]  926 	push	ar5
      00020D C0 04            [24]  927 	push	ar4
      00020F C0 02            [24]  928 	push	ar2
      000211 12r00r00         [24]  929 	lcall	_spi_control_write
      000214 D0 02            [24]  930 	pop	ar2
      000216 D0 04            [24]  931 	pop	ar4
      000218 D0 05            [24]  932 	pop	ar5
      00021A D0 06            [24]  933 	pop	ar6
      00021C D0 07            [24]  934 	pop	ar7
                                    935 ;	Eth.c:82: spi_control_write(0, 0x0D, (uint8_t)((start_address >> 8) & 0xFF)); // ERXRDPTH (high byte)
      00021E 90r00r00         [24]  936 	mov	dptr,#_spi_control_write_PARM_2
      000221 74 0D            [12]  937 	mov	a,#0x0d
      000223 F0               [24]  938 	movx	@dptr,a
      000224 90r00r00         [24]  939 	mov	dptr,#_spi_control_write_PARM_3
      000227 EA               [12]  940 	mov	a,r2
      000228 F0               [24]  941 	movx	@dptr,a
      000229 75 82 00         [24]  942 	mov	dpl, #0x00
      00022C C0 07            [24]  943 	push	ar7
      00022E C0 06            [24]  944 	push	ar6
      000230 C0 05            [24]  945 	push	ar5
      000232 C0 04            [24]  946 	push	ar4
      000234 12r00r00         [24]  947 	lcall	_spi_control_write
      000237 D0 04            [24]  948 	pop	ar4
      000239 D0 05            [24]  949 	pop	ar5
      00023B D0 06            [24]  950 	pop	ar6
      00023D D0 07            [24]  951 	pop	ar7
                                    952 ;	Eth.c:89: printf("RX buffer initialized: 0x%04X to 0x%04X.\n", start_address, end_address);
      00023F C0 04            [24]  953 	push	ar4
      000241 C0 05            [24]  954 	push	ar5
      000243 C0 06            [24]  955 	push	ar6
      000245 C0 07            [24]  956 	push	ar7
      000247 74r1A            [12]  957 	mov	a,#___str_1
      000249 C0 E0            [24]  958 	push	acc
      00024B 74s00            [12]  959 	mov	a,#(___str_1 >> 8)
      00024D C0 E0            [24]  960 	push	acc
      00024F 74 80            [12]  961 	mov	a,#0x80
      000251 C0 E0            [24]  962 	push	acc
      000253 12r00r00         [24]  963 	lcall	_printf
      000256 E5 81            [12]  964 	mov	a,sp
      000258 24 F9            [12]  965 	add	a,#0xf9
      00025A F5 81            [12]  966 	mov	sp,a
                                    967 ;	Eth.c:90: }
      00025C 22               [24]  968 	ret
                                    969 ;------------------------------------------------------------
                                    970 ;Allocation info for local variables in function 'enc28j60_set_transmit_pointers'
                                    971 ;------------------------------------------------------------
                                    972 ;end_address               Allocated with name '_enc28j60_set_transmit_pointers_PARM_2'
                                    973 ;start_address             Allocated with name '_enc28j60_set_transmit_pointers_start_address_10000_76'
                                    974 ;------------------------------------------------------------
                                    975 ;	Eth.c:92: void enc28j60_set_transmit_pointers(uint16_t start_address, uint16_t end_address)
                                    976 ;	-----------------------------------------
                                    977 ;	 function enc28j60_set_transmit_pointers
                                    978 ;	-----------------------------------------
      00025D                        979 _enc28j60_set_transmit_pointers:
      00025D AF 83            [24]  980 	mov	r7,dph
      00025F E5 82            [12]  981 	mov	a,dpl
      000261 90r00r0C         [24]  982 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_76
      000264 F0               [24]  983 	movx	@dptr,a
      000265 EF               [12]  984 	mov	a,r7
      000266 A3               [24]  985 	inc	dptr
      000267 F0               [24]  986 	movx	@dptr,a
                                    987 ;	Eth.c:95: spi_control_write(0, 0x04, (uint8_t)(start_address & 0xFF)); // Low byte
      000268 90r00r0C         [24]  988 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_76
      00026B E0               [24]  989 	movx	a,@dptr
      00026C FE               [12]  990 	mov	r6,a
      00026D A3               [24]  991 	inc	dptr
      00026E E0               [24]  992 	movx	a,@dptr
      00026F FF               [12]  993 	mov	r7,a
      000270 8E 05            [24]  994 	mov	ar5,r6
      000272 90r00r00         [24]  995 	mov	dptr,#_spi_control_write_PARM_2
      000275 74 04            [12]  996 	mov	a,#0x04
      000277 F0               [24]  997 	movx	@dptr,a
      000278 90r00r00         [24]  998 	mov	dptr,#_spi_control_write_PARM_3
      00027B ED               [12]  999 	mov	a,r5
      00027C F0               [24] 1000 	movx	@dptr,a
      00027D 75 82 00         [24] 1001 	mov	dpl, #0x00
      000280 C0 07            [24] 1002 	push	ar7
      000282 C0 06            [24] 1003 	push	ar6
      000284 12r00r00         [24] 1004 	lcall	_spi_control_write
      000287 D0 06            [24] 1005 	pop	ar6
      000289 D0 07            [24] 1006 	pop	ar7
                                   1007 ;	Eth.c:96: spi_control_write(0, 0x05, (uint8_t)((start_address >> 8) & 0xFF)); // High byte
      00028B 8F 06            [24] 1008 	mov	ar6,r7
      00028D 90r00r00         [24] 1009 	mov	dptr,#_spi_control_write_PARM_2
      000290 74 05            [12] 1010 	mov	a,#0x05
      000292 F0               [24] 1011 	movx	@dptr,a
      000293 90r00r00         [24] 1012 	mov	dptr,#_spi_control_write_PARM_3
      000296 EE               [12] 1013 	mov	a,r6
      000297 F0               [24] 1014 	movx	@dptr,a
      000298 75 82 00         [24] 1015 	mov	dpl, #0x00
      00029B 12r00r00         [24] 1016 	lcall	_spi_control_write
                                   1017 ;	Eth.c:99: spi_control_write(0, 0x06, (uint8_t)(end_address & 0xFF)); // Low byte
      00029E 90r00r0A         [24] 1018 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      0002A1 E0               [24] 1019 	movx	a,@dptr
      0002A2 FE               [12] 1020 	mov	r6,a
      0002A3 A3               [24] 1021 	inc	dptr
      0002A4 E0               [24] 1022 	movx	a,@dptr
      0002A5 FF               [12] 1023 	mov	r7,a
      0002A6 8E 05            [24] 1024 	mov	ar5,r6
      0002A8 90r00r00         [24] 1025 	mov	dptr,#_spi_control_write_PARM_2
      0002AB 74 06            [12] 1026 	mov	a,#0x06
      0002AD F0               [24] 1027 	movx	@dptr,a
      0002AE 90r00r00         [24] 1028 	mov	dptr,#_spi_control_write_PARM_3
      0002B1 ED               [12] 1029 	mov	a,r5
      0002B2 F0               [24] 1030 	movx	@dptr,a
      0002B3 75 82 00         [24] 1031 	mov	dpl, #0x00
      0002B6 C0 07            [24] 1032 	push	ar7
      0002B8 C0 06            [24] 1033 	push	ar6
      0002BA 12r00r00         [24] 1034 	lcall	_spi_control_write
      0002BD D0 06            [24] 1035 	pop	ar6
      0002BF D0 07            [24] 1036 	pop	ar7
                                   1037 ;	Eth.c:100: spi_control_write(0, 0x07, (uint8_t)((end_address >> 8) & 0xFF)); // High byte
      0002C1 8F 06            [24] 1038 	mov	ar6,r7
      0002C3 90r00r00         [24] 1039 	mov	dptr,#_spi_control_write_PARM_2
      0002C6 74 07            [12] 1040 	mov	a,#0x07
      0002C8 F0               [24] 1041 	movx	@dptr,a
      0002C9 90r00r00         [24] 1042 	mov	dptr,#_spi_control_write_PARM_3
      0002CC EE               [12] 1043 	mov	a,r6
      0002CD F0               [24] 1044 	movx	@dptr,a
      0002CE 75 82 00         [24] 1045 	mov	dpl, #0x00
                                   1046 ;	Eth.c:101: }
      0002D1 02r00r00         [24] 1047 	ljmp	_spi_control_write
                                   1048 ;------------------------------------------------------------
                                   1049 ;Allocation info for local variables in function 'wait_for_transmission_complete'
                                   1050 ;------------------------------------------------------------
                                   1051 ;timeout_ms                Allocated with name '_wait_for_transmission_complete_timeout_ms_10000_78'
                                   1052 ;elapsed                   Allocated with name '_wait_for_transmission_complete_elapsed_10000_79'
                                   1053 ;econ1                     Allocated with name '_wait_for_transmission_complete_econ1_20000_80'
                                   1054 ;------------------------------------------------------------
                                   1055 ;	Eth.c:103: bool wait_for_transmission_complete(uint16_t timeout_ms)
                                   1056 ;	-----------------------------------------
                                   1057 ;	 function wait_for_transmission_complete
                                   1058 ;	-----------------------------------------
      0002D4                       1059 _wait_for_transmission_complete:
      0002D4 AF 83            [24] 1060 	mov	r7,dph
      0002D6 E5 82            [12] 1061 	mov	a,dpl
      0002D8 90r00r0E         [24] 1062 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_78
      0002DB F0               [24] 1063 	movx	@dptr,a
      0002DC EF               [12] 1064 	mov	a,r7
      0002DD A3               [24] 1065 	inc	dptr
      0002DE F0               [24] 1066 	movx	@dptr,a
                                   1067 ;	Eth.c:107: while (elapsed < timeout_ms) {
      0002DF 90r00r0E         [24] 1068 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_78
      0002E2 E0               [24] 1069 	movx	a,@dptr
      0002E3 FE               [12] 1070 	mov	r6,a
      0002E4 A3               [24] 1071 	inc	dptr
      0002E5 E0               [24] 1072 	movx	a,@dptr
      0002E6 FF               [12] 1073 	mov	r7,a
      0002E7 7C 00            [12] 1074 	mov	r4,#0x00
      0002E9 7D 00            [12] 1075 	mov	r5,#0x00
      0002EB                       1076 00103$:
      0002EB C3               [12] 1077 	clr	c
      0002EC EC               [12] 1078 	mov	a,r4
      0002ED 9E               [12] 1079 	subb	a,r6
      0002EE ED               [12] 1080 	mov	a,r5
      0002EF 9F               [12] 1081 	subb	a,r7
      0002F0 50 41            [24] 1082 	jnc	00105$
                                   1083 ;	Eth.c:108: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      0002F2 90r00r00         [24] 1084 	mov	dptr,#_mac_spi_read_PARM_2
      0002F5 E4               [12] 1085 	clr	a
      0002F6 F0               [24] 1086 	movx	@dptr,a
      0002F7 75 82 1F         [24] 1087 	mov	dpl, #0x1f
      0002FA C0 07            [24] 1088 	push	ar7
      0002FC C0 06            [24] 1089 	push	ar6
      0002FE C0 05            [24] 1090 	push	ar5
      000300 C0 04            [24] 1091 	push	ar4
      000302 12r00r00         [24] 1092 	lcall	_mac_spi_read
      000305 E5 82            [12] 1093 	mov	a, dpl
      000307 D0 04            [24] 1094 	pop	ar4
      000309 D0 05            [24] 1095 	pop	ar5
      00030B D0 06            [24] 1096 	pop	ar6
      00030D D0 07            [24] 1097 	pop	ar7
                                   1098 ;	Eth.c:109: if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
      00030F 20 E3 04         [24] 1099 	jb	acc.3,00102$
                                   1100 ;	Eth.c:110: return true;  // Transmission completed
      000312 75 82 01         [24] 1101 	mov	dpl, #0x01
      000315 22               [24] 1102 	ret
      000316                       1103 00102$:
                                   1104 ;	Eth.c:113: delay_ms(1);  // Wait 1 ms
      000316 90 00 01         [24] 1105 	mov	dptr,#0x0001
      000319 C0 07            [24] 1106 	push	ar7
      00031B C0 06            [24] 1107 	push	ar6
      00031D C0 05            [24] 1108 	push	ar5
      00031F C0 04            [24] 1109 	push	ar4
      000321 12r00r6A         [24] 1110 	lcall	_delay_ms
      000324 D0 04            [24] 1111 	pop	ar4
      000326 D0 05            [24] 1112 	pop	ar5
      000328 D0 06            [24] 1113 	pop	ar6
      00032A D0 07            [24] 1114 	pop	ar7
                                   1115 ;	Eth.c:114: elapsed++;
      00032C 0C               [12] 1116 	inc	r4
      00032D BC 00 BB         [24] 1117 	cjne	r4,#0x00,00103$
      000330 0D               [12] 1118 	inc	r5
      000331 80 B8            [24] 1119 	sjmp	00103$
      000333                       1120 00105$:
                                   1121 ;	Eth.c:117: return false;  // Timed out
      000333 75 82 00         [24] 1122 	mov	dpl, #0x00
                                   1123 ;	Eth.c:118: }
      000336 22               [24] 1124 	ret
                                   1125 ;------------------------------------------------------------
                                   1126 ;Allocation info for local variables in function 'enc28j60_transmission_successful'
                                   1127 ;------------------------------------------------------------
                                   1128 ;estat                     Allocated with name '_enc28j60_transmission_successful_estat_10000_82'
                                   1129 ;------------------------------------------------------------
                                   1130 ;	Eth.c:120: bool enc28j60_transmission_successful()
                                   1131 ;	-----------------------------------------
                                   1132 ;	 function enc28j60_transmission_successful
                                   1133 ;	-----------------------------------------
      000337                       1134 _enc28j60_transmission_successful:
                                   1135 ;	Eth.c:122: uint8_t estat = mac_spi_read(0x1D, 0); // Read ESTAT
      000337 90r00r00         [24] 1136 	mov	dptr,#_mac_spi_read_PARM_2
      00033A E4               [12] 1137 	clr	a
      00033B F0               [24] 1138 	movx	@dptr,a
      00033C 75 82 1D         [24] 1139 	mov	dpl, #0x1d
      00033F 12r00r00         [24] 1140 	lcall	_mac_spi_read
                                   1141 ;	Eth.c:123: return !(estat & 0x02); // Check if TXABRT (bit 1) is not set
      000342 E5 82            [12] 1142 	mov	a,dpl
      000344 03               [12] 1143 	rr	a
      000345 54 01            [12] 1144 	anl	a,#0x01
      000347 B4 01 00         [24] 1145 	cjne	a,#0x01,00103$
      00034A                       1146 00103$:
      00034A 92*00            [24] 1147 	mov  _enc28j60_transmission_successful_sloc0_1_0,c
      00034C E4               [12] 1148 	clr	a
      00034D 33               [12] 1149 	rlc	a
      00034E F5 82            [12] 1150 	mov	dpl, a
                                   1151 ;	Eth.c:124: }
      000350 22               [24] 1152 	ret
                                   1153 ;------------------------------------------------------------
                                   1154 ;Allocation info for local variables in function 'send_arp_request'
                                   1155 ;------------------------------------------------------------
                                   1156 ;source_mac                Allocated with name '_send_arp_request_source_mac_10000_84'
                                   1157 ;dest_mac                  Allocated with name '_send_arp_request_dest_mac_10000_84'
                                   1158 ;source_ip                 Allocated with name '_send_arp_request_source_ip_10000_84'
                                   1159 ;target_ip                 Allocated with name '_send_arp_request_target_ip_10000_84'
                                   1160 ;arp_packet                Allocated with name '_send_arp_request_arp_packet_10000_84'
                                   1161 ;i                         Allocated with name '_send_arp_request_i_20000_85'
                                   1162 ;i                         Allocated with name '_send_arp_request_i_20000_87'
                                   1163 ;i                         Allocated with name '_send_arp_request_i_20000_89'
                                   1164 ;i                         Allocated with name '_send_arp_request_i_20000_91'
                                   1165 ;i                         Allocated with name '_send_arp_request_i_20000_93'
                                   1166 ;frame_size                Allocated with name '_send_arp_request_frame_size_10001_95'
                                   1167 ;start_address             Allocated with name '_send_arp_request_start_address_10001_95'
                                   1168 ;end_address               Allocated with name '_send_arp_request_end_address_10002_97'
                                   1169 ;------------------------------------------------------------
                                   1170 ;	Eth.c:127: void send_arp_request(void)
                                   1171 ;	-----------------------------------------
                                   1172 ;	 function send_arp_request
                                   1173 ;	-----------------------------------------
      000351                       1174 _send_arp_request:
                                   1175 ;	Eth.c:130: uint8_t source_mac[6] = {0x02, 0x11, 0x22, 0x33, 0x44, 0x55};  // ENC28J60 MAC address
      000351 90r00r10         [24] 1176 	mov	dptr,#_send_arp_request_source_mac_10000_84
      000354 74 02            [12] 1177 	mov	a,#0x02
      000356 F0               [24] 1178 	movx	@dptr,a
      000357 90r00r11         [24] 1179 	mov	dptr,#(_send_arp_request_source_mac_10000_84 + 0x0001)
      00035A 74 11            [12] 1180 	mov	a,#0x11
      00035C F0               [24] 1181 	movx	@dptr,a
      00035D 90r00r12         [24] 1182 	mov	dptr,#(_send_arp_request_source_mac_10000_84 + 0x0002)
      000360 23               [12] 1183 	rl	a
      000361 F0               [24] 1184 	movx	@dptr,a
      000362 90r00r13         [24] 1185 	mov	dptr,#(_send_arp_request_source_mac_10000_84 + 0x0003)
      000365 74 33            [12] 1186 	mov	a,#0x33
      000367 F0               [24] 1187 	movx	@dptr,a
      000368 90r00r14         [24] 1188 	mov	dptr,#(_send_arp_request_source_mac_10000_84 + 0x0004)
      00036B 74 44            [12] 1189 	mov	a,#0x44
      00036D F0               [24] 1190 	movx	@dptr,a
      00036E 90r00r15         [24] 1191 	mov	dptr,#(_send_arp_request_source_mac_10000_84 + 0x0005)
      000371 74 55            [12] 1192 	mov	a,#0x55
      000373 F0               [24] 1193 	movx	@dptr,a
                                   1194 ;	Eth.c:131: uint8_t dest_mac[6] = {0xF8, 0x75, 0xA4, 0x8C, 0x41, 0x31};  // Target PC MAC address
      000374 90r00r16         [24] 1195 	mov	dptr,#_send_arp_request_dest_mac_10000_84
      000377 74 F8            [12] 1196 	mov	a,#0xf8
      000379 F0               [24] 1197 	movx	@dptr,a
      00037A 90r00r17         [24] 1198 	mov	dptr,#(_send_arp_request_dest_mac_10000_84 + 0x0001)
      00037D 74 75            [12] 1199 	mov	a,#0x75
      00037F F0               [24] 1200 	movx	@dptr,a
      000380 90r00r18         [24] 1201 	mov	dptr,#(_send_arp_request_dest_mac_10000_84 + 0x0002)
      000383 74 A4            [12] 1202 	mov	a,#0xa4
      000385 F0               [24] 1203 	movx	@dptr,a
      000386 90r00r19         [24] 1204 	mov	dptr,#(_send_arp_request_dest_mac_10000_84 + 0x0003)
      000389 74 8C            [12] 1205 	mov	a,#0x8c
      00038B F0               [24] 1206 	movx	@dptr,a
      00038C 90r00r1A         [24] 1207 	mov	dptr,#(_send_arp_request_dest_mac_10000_84 + 0x0004)
      00038F 74 41            [12] 1208 	mov	a,#0x41
      000391 F0               [24] 1209 	movx	@dptr,a
      000392 90r00r1B         [24] 1210 	mov	dptr,#(_send_arp_request_dest_mac_10000_84 + 0x0005)
      000395 74 31            [12] 1211 	mov	a,#0x31
      000397 F0               [24] 1212 	movx	@dptr,a
                                   1213 ;	Eth.c:132: uint8_t source_ip[4] = {192, 168, 1, 100};  // ENC28J60 IP address (Example)
      000398 90r00r1C         [24] 1214 	mov	dptr,#_send_arp_request_source_ip_10000_84
      00039B 74 C0            [12] 1215 	mov	a,#0xc0
      00039D F0               [24] 1216 	movx	@dptr,a
      00039E 90r00r1D         [24] 1217 	mov	dptr,#(_send_arp_request_source_ip_10000_84 + 0x0001)
      0003A1 74 A8            [12] 1218 	mov	a,#0xa8
      0003A3 F0               [24] 1219 	movx	@dptr,a
      0003A4 90r00r1E         [24] 1220 	mov	dptr,#(_send_arp_request_source_ip_10000_84 + 0x0002)
      0003A7 74 01            [12] 1221 	mov	a,#0x01
      0003A9 F0               [24] 1222 	movx	@dptr,a
      0003AA 90r00r1F         [24] 1223 	mov	dptr,#(_send_arp_request_source_ip_10000_84 + 0x0003)
      0003AD 74 64            [12] 1224 	mov	a,#0x64
      0003AF F0               [24] 1225 	movx	@dptr,a
                                   1226 ;	Eth.c:133: uint8_t target_ip[4] = {192, 168, 1, 1};  // Target PC IP address
      0003B0 90r00r20         [24] 1227 	mov	dptr,#_send_arp_request_target_ip_10000_84
      0003B3 74 C0            [12] 1228 	mov	a,#0xc0
      0003B5 F0               [24] 1229 	movx	@dptr,a
      0003B6 90r00r21         [24] 1230 	mov	dptr,#(_send_arp_request_target_ip_10000_84 + 0x0001)
      0003B9 74 A8            [12] 1231 	mov	a,#0xa8
      0003BB F0               [24] 1232 	movx	@dptr,a
      0003BC 90r00r22         [24] 1233 	mov	dptr,#(_send_arp_request_target_ip_10000_84 + 0x0002)
      0003BF 74 01            [12] 1234 	mov	a,#0x01
      0003C1 F0               [24] 1235 	movx	@dptr,a
      0003C2 90r00r23         [24] 1236 	mov	dptr,#(_send_arp_request_target_ip_10000_84 + 0x0003)
      0003C5 F0               [24] 1237 	movx	@dptr,a
                                   1238 ;	Eth.c:137: arp_packet[0] = 0x0E;
      0003C6 90r00r24         [24] 1239 	mov	dptr,#_send_arp_request_arp_packet_10000_84
      0003C9 74 0E            [12] 1240 	mov	a,#0x0e
      0003CB F0               [24] 1241 	movx	@dptr,a
                                   1242 ;	Eth.c:141: set_mac_address(source_mac);
      0003CC 90r00r10         [24] 1243 	mov	dptr,#_send_arp_request_source_mac_10000_84
      0003CF 75 F0 00         [24] 1244 	mov	b, #0x00
      0003D2 12r00r00         [24] 1245 	lcall	_set_mac_address
                                   1246 ;	Eth.c:143: for (int i = 0; i < 6; i++)
      0003D5 7E 00            [12] 1247 	mov	r6,#0x00
      0003D7 7F 00            [12] 1248 	mov	r7,#0x00
      0003D9                       1249 00115$:
      0003D9 C3               [12] 1250 	clr	c
      0003DA EE               [12] 1251 	mov	a,r6
      0003DB 94 06            [12] 1252 	subb	a,#0x06
      0003DD EF               [12] 1253 	mov	a,r7
      0003DE 64 80            [12] 1254 	xrl	a,#0x80
      0003E0 94 80            [12] 1255 	subb	a,#0x80
      0003E2 50 48            [24] 1256 	jnc	00101$
                                   1257 ;	Eth.c:145: arp_packet[i + 1] = dest_mac[i];  // Destination MAC address
      0003E4 8E 05            [24] 1258 	mov	ar5,r6
      0003E6 ED               [12] 1259 	mov	a,r5
      0003E7 04               [12] 1260 	inc	a
      0003E8 FC               [12] 1261 	mov	r4,a
      0003E9 33               [12] 1262 	rlc	a
      0003EA 95 E0            [12] 1263 	subb	a,acc
      0003EC FB               [12] 1264 	mov	r3,a
      0003ED EC               [12] 1265 	mov	a,r4
      0003EE 24r24            [12] 1266 	add	a, #_send_arp_request_arp_packet_10000_84
      0003F0 FC               [12] 1267 	mov	r4,a
      0003F1 EB               [12] 1268 	mov	a,r3
      0003F2 34s00            [12] 1269 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      0003F4 FB               [12] 1270 	mov	r3,a
      0003F5 EE               [12] 1271 	mov	a,r6
      0003F6 24r16            [12] 1272 	add	a, #_send_arp_request_dest_mac_10000_84
      0003F8 F5 82            [12] 1273 	mov	dpl,a
      0003FA EF               [12] 1274 	mov	a,r7
      0003FB 34s00            [12] 1275 	addc	a, #(_send_arp_request_dest_mac_10000_84 >> 8)
      0003FD F5 83            [12] 1276 	mov	dph,a
      0003FF E0               [24] 1277 	movx	a,@dptr
      000400 8C 82            [24] 1278 	mov	dpl,r4
      000402 8B 83            [24] 1279 	mov	dph,r3
      000404 F0               [24] 1280 	movx	@dptr,a
                                   1281 ;	Eth.c:146: arp_packet[i + 7] = source_mac[i];  // Source MAC address
      000405 74 07            [12] 1282 	mov	a,#0x07
      000407 2D               [12] 1283 	add	a, r5
      000408 FD               [12] 1284 	mov	r5,a
      000409 33               [12] 1285 	rlc	a
      00040A 95 E0            [12] 1286 	subb	a,acc
      00040C FC               [12] 1287 	mov	r4,a
      00040D ED               [12] 1288 	mov	a,r5
      00040E 24r24            [12] 1289 	add	a, #_send_arp_request_arp_packet_10000_84
      000410 FD               [12] 1290 	mov	r5,a
      000411 EC               [12] 1291 	mov	a,r4
      000412 34s00            [12] 1292 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      000414 FC               [12] 1293 	mov	r4,a
      000415 EE               [12] 1294 	mov	a,r6
      000416 24r10            [12] 1295 	add	a, #_send_arp_request_source_mac_10000_84
      000418 F5 82            [12] 1296 	mov	dpl,a
      00041A EF               [12] 1297 	mov	a,r7
      00041B 34s00            [12] 1298 	addc	a, #(_send_arp_request_source_mac_10000_84 >> 8)
      00041D F5 83            [12] 1299 	mov	dph,a
      00041F E0               [24] 1300 	movx	a,@dptr
      000420 8D 82            [24] 1301 	mov	dpl,r5
      000422 8C 83            [24] 1302 	mov	dph,r4
      000424 F0               [24] 1303 	movx	@dptr,a
                                   1304 ;	Eth.c:143: for (int i = 0; i < 6; i++)
      000425 0E               [12] 1305 	inc	r6
      000426 BE 00 B0         [24] 1306 	cjne	r6,#0x00,00115$
      000429 0F               [12] 1307 	inc	r7
      00042A 80 AD            [24] 1308 	sjmp	00115$
      00042C                       1309 00101$:
                                   1310 ;	Eth.c:150: arp_packet[13] = (ETH_TYPE_ARP >> 8) & 0xFF;
      00042C 90r00r31         [24] 1311 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x000d)
      00042F 74 08            [12] 1312 	mov	a,#0x08
      000431 F0               [24] 1313 	movx	@dptr,a
                                   1314 ;	Eth.c:151: arp_packet[14] = ETH_TYPE_ARP & 0xFF;
      000432 90r00r32         [24] 1315 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x000e)
      000435 74 06            [12] 1316 	mov	a,#0x06
      000437 F0               [24] 1317 	movx	@dptr,a
                                   1318 ;	Eth.c:155: arp_packet[15] = 0x00;
      000438 90r00r33         [24] 1319 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x000f)
      00043B E4               [12] 1320 	clr	a
      00043C F0               [24] 1321 	movx	@dptr,a
                                   1322 ;	Eth.c:156: arp_packet[16] = 0x01;
      00043D 90r00r34         [24] 1323 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0010)
      000440 04               [12] 1324 	inc	a
      000441 F0               [24] 1325 	movx	@dptr,a
                                   1326 ;	Eth.c:159: arp_packet[17] = 0x08;
      000442 90r00r35         [24] 1327 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0011)
      000445 74 08            [12] 1328 	mov	a,#0x08
      000447 F0               [24] 1329 	movx	@dptr,a
                                   1330 ;	Eth.c:160: arp_packet[18] = 0x00;
      000448 90r00r36         [24] 1331 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0012)
      00044B E4               [12] 1332 	clr	a
      00044C F0               [24] 1333 	movx	@dptr,a
                                   1334 ;	Eth.c:163: arp_packet[19] = 0x06;
      00044D 90r00r37         [24] 1335 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0013)
      000450 74 06            [12] 1336 	mov	a,#0x06
      000452 F0               [24] 1337 	movx	@dptr,a
                                   1338 ;	Eth.c:166: arp_packet[20] = 0x04;
      000453 90r00r38         [24] 1339 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0014)
      000456 74 04            [12] 1340 	mov	a,#0x04
      000458 F0               [24] 1341 	movx	@dptr,a
                                   1342 ;	Eth.c:169: arp_packet[21] = 0x00;
      000459 90r00r39         [24] 1343 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0015)
      00045C E4               [12] 1344 	clr	a
      00045D F0               [24] 1345 	movx	@dptr,a
                                   1346 ;	Eth.c:170: arp_packet[22] = 0x01;
      00045E 90r00r3A         [24] 1347 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0016)
      000461 04               [12] 1348 	inc	a
      000462 F0               [24] 1349 	movx	@dptr,a
                                   1350 ;	Eth.c:173: for (int i = 0; i < 6; i++) {
      000463 7E 00            [12] 1351 	mov	r6,#0x00
      000465 7F 00            [12] 1352 	mov	r7,#0x00
      000467                       1353 00118$:
      000467 C3               [12] 1354 	clr	c
      000468 EE               [12] 1355 	mov	a,r6
      000469 94 06            [12] 1356 	subb	a,#0x06
      00046B EF               [12] 1357 	mov	a,r7
      00046C 64 80            [12] 1358 	xrl	a,#0x80
      00046E 94 80            [12] 1359 	subb	a,#0x80
      000470 50 29            [24] 1360 	jnc	00102$
                                   1361 ;	Eth.c:174: arp_packet[23 + i] = source_mac[i];
      000472 8E 05            [24] 1362 	mov	ar5,r6
      000474 74 17            [12] 1363 	mov	a,#0x17
      000476 2D               [12] 1364 	add	a, r5
      000477 FD               [12] 1365 	mov	r5,a
      000478 33               [12] 1366 	rlc	a
      000479 95 E0            [12] 1367 	subb	a,acc
      00047B FC               [12] 1368 	mov	r4,a
      00047C ED               [12] 1369 	mov	a,r5
      00047D 24r24            [12] 1370 	add	a, #_send_arp_request_arp_packet_10000_84
      00047F FD               [12] 1371 	mov	r5,a
      000480 EC               [12] 1372 	mov	a,r4
      000481 34s00            [12] 1373 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      000483 FC               [12] 1374 	mov	r4,a
      000484 EE               [12] 1375 	mov	a,r6
      000485 24r10            [12] 1376 	add	a, #_send_arp_request_source_mac_10000_84
      000487 F5 82            [12] 1377 	mov	dpl,a
      000489 EF               [12] 1378 	mov	a,r7
      00048A 34s00            [12] 1379 	addc	a, #(_send_arp_request_source_mac_10000_84 >> 8)
      00048C F5 83            [12] 1380 	mov	dph,a
      00048E E0               [24] 1381 	movx	a,@dptr
      00048F 8D 82            [24] 1382 	mov	dpl,r5
      000491 8C 83            [24] 1383 	mov	dph,r4
      000493 F0               [24] 1384 	movx	@dptr,a
                                   1385 ;	Eth.c:173: for (int i = 0; i < 6; i++) {
      000494 0E               [12] 1386 	inc	r6
      000495 BE 00 CF         [24] 1387 	cjne	r6,#0x00,00118$
      000498 0F               [12] 1388 	inc	r7
      000499 80 CC            [24] 1389 	sjmp	00118$
      00049B                       1390 00102$:
                                   1391 ;	Eth.c:178: for (int i = 0; i < 4; i++) {
      00049B 7E 00            [12] 1392 	mov	r6,#0x00
      00049D 7F 00            [12] 1393 	mov	r7,#0x00
      00049F                       1394 00121$:
      00049F C3               [12] 1395 	clr	c
      0004A0 EE               [12] 1396 	mov	a,r6
      0004A1 94 04            [12] 1397 	subb	a,#0x04
      0004A3 EF               [12] 1398 	mov	a,r7
      0004A4 64 80            [12] 1399 	xrl	a,#0x80
      0004A6 94 80            [12] 1400 	subb	a,#0x80
      0004A8 50 29            [24] 1401 	jnc	00103$
                                   1402 ;	Eth.c:179: arp_packet[29 + i] = source_ip[i];
      0004AA 8E 05            [24] 1403 	mov	ar5,r6
      0004AC 74 1D            [12] 1404 	mov	a,#0x1d
      0004AE 2D               [12] 1405 	add	a, r5
      0004AF FD               [12] 1406 	mov	r5,a
      0004B0 33               [12] 1407 	rlc	a
      0004B1 95 E0            [12] 1408 	subb	a,acc
      0004B3 FC               [12] 1409 	mov	r4,a
      0004B4 ED               [12] 1410 	mov	a,r5
      0004B5 24r24            [12] 1411 	add	a, #_send_arp_request_arp_packet_10000_84
      0004B7 FD               [12] 1412 	mov	r5,a
      0004B8 EC               [12] 1413 	mov	a,r4
      0004B9 34s00            [12] 1414 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      0004BB FC               [12] 1415 	mov	r4,a
      0004BC EE               [12] 1416 	mov	a,r6
      0004BD 24r1C            [12] 1417 	add	a, #_send_arp_request_source_ip_10000_84
      0004BF F5 82            [12] 1418 	mov	dpl,a
      0004C1 EF               [12] 1419 	mov	a,r7
      0004C2 34s00            [12] 1420 	addc	a, #(_send_arp_request_source_ip_10000_84 >> 8)
      0004C4 F5 83            [12] 1421 	mov	dph,a
      0004C6 E0               [24] 1422 	movx	a,@dptr
      0004C7 8D 82            [24] 1423 	mov	dpl,r5
      0004C9 8C 83            [24] 1424 	mov	dph,r4
      0004CB F0               [24] 1425 	movx	@dptr,a
                                   1426 ;	Eth.c:178: for (int i = 0; i < 4; i++) {
      0004CC 0E               [12] 1427 	inc	r6
      0004CD BE 00 CF         [24] 1428 	cjne	r6,#0x00,00121$
      0004D0 0F               [12] 1429 	inc	r7
      0004D1 80 CC            [24] 1430 	sjmp	00121$
      0004D3                       1431 00103$:
                                   1432 ;	Eth.c:183: for (int i = 0; i < 6; i++) {
      0004D3 7F 00            [12] 1433 	mov	r7,#0x00
      0004D5                       1434 00124$:
      0004D5 BF 06 00         [24] 1435 	cjne	r7,#0x06,00215$
      0004D8                       1436 00215$:
      0004D8 50 19            [24] 1437 	jnc	00104$
                                   1438 ;	Eth.c:184: arp_packet[33 + i] = 0x00;
      0004DA 8F 06            [24] 1439 	mov	ar6,r7
      0004DC 74 21            [12] 1440 	mov	a,#0x21
      0004DE 2E               [12] 1441 	add	a, r6
      0004DF FE               [12] 1442 	mov	r6,a
      0004E0 33               [12] 1443 	rlc	a
      0004E1 95 E0            [12] 1444 	subb	a,acc
      0004E3 FD               [12] 1445 	mov	r5,a
      0004E4 EE               [12] 1446 	mov	a,r6
      0004E5 24r24            [12] 1447 	add	a, #_send_arp_request_arp_packet_10000_84
      0004E7 F5 82            [12] 1448 	mov	dpl,a
      0004E9 ED               [12] 1449 	mov	a,r5
      0004EA 34s00            [12] 1450 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      0004EC F5 83            [12] 1451 	mov	dph,a
      0004EE E4               [12] 1452 	clr	a
      0004EF F0               [24] 1453 	movx	@dptr,a
                                   1454 ;	Eth.c:183: for (int i = 0; i < 6; i++) {
      0004F0 0F               [12] 1455 	inc	r7
      0004F1 80 E2            [24] 1456 	sjmp	00124$
      0004F3                       1457 00104$:
                                   1458 ;	Eth.c:188: for (int i = 0; i < 4; i++) {
      0004F3 7E 00            [12] 1459 	mov	r6,#0x00
      0004F5 7F 00            [12] 1460 	mov	r7,#0x00
      0004F7                       1461 00127$:
      0004F7 C3               [12] 1462 	clr	c
      0004F8 EE               [12] 1463 	mov	a,r6
      0004F9 94 04            [12] 1464 	subb	a,#0x04
      0004FB EF               [12] 1465 	mov	a,r7
      0004FC 64 80            [12] 1466 	xrl	a,#0x80
      0004FE 94 80            [12] 1467 	subb	a,#0x80
      000500 50 29            [24] 1468 	jnc	00105$
                                   1469 ;	Eth.c:189: arp_packet[39 + i] = target_ip[i];
      000502 8E 05            [24] 1470 	mov	ar5,r6
      000504 74 27            [12] 1471 	mov	a,#0x27
      000506 2D               [12] 1472 	add	a, r5
      000507 FD               [12] 1473 	mov	r5,a
      000508 33               [12] 1474 	rlc	a
      000509 95 E0            [12] 1475 	subb	a,acc
      00050B FC               [12] 1476 	mov	r4,a
      00050C ED               [12] 1477 	mov	a,r5
      00050D 24r24            [12] 1478 	add	a, #_send_arp_request_arp_packet_10000_84
      00050F FD               [12] 1479 	mov	r5,a
      000510 EC               [12] 1480 	mov	a,r4
      000511 34s00            [12] 1481 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      000513 FC               [12] 1482 	mov	r4,a
      000514 EE               [12] 1483 	mov	a,r6
      000515 24r20            [12] 1484 	add	a, #_send_arp_request_target_ip_10000_84
      000517 F5 82            [12] 1485 	mov	dpl,a
      000519 EF               [12] 1486 	mov	a,r7
      00051A 34s00            [12] 1487 	addc	a, #(_send_arp_request_target_ip_10000_84 >> 8)
      00051C F5 83            [12] 1488 	mov	dph,a
      00051E E0               [24] 1489 	movx	a,@dptr
      00051F 8D 82            [24] 1490 	mov	dpl,r5
      000521 8C 83            [24] 1491 	mov	dph,r4
      000523 F0               [24] 1492 	movx	@dptr,a
                                   1493 ;	Eth.c:188: for (int i = 0; i < 4; i++) {
      000524 0E               [12] 1494 	inc	r6
      000525 BE 00 CF         [24] 1495 	cjne	r6,#0x00,00127$
      000528 0F               [12] 1496 	inc	r7
      000529 80 CC            [24] 1497 	sjmp	00127$
      00052B                       1498 00105$:
                                   1499 ;	Eth.c:191: arp_packet[44] = 'A';
      00052B 90r00r50         [24] 1500 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x002c)
      00052E 74 41            [12] 1501 	mov	a,#0x41
      000530 F0               [24] 1502 	movx	@dptr,a
                                   1503 ;	Eth.c:192: arp_packet[45] = 'B';
      000531 90r00r51         [24] 1504 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x002d)
      000534 04               [12] 1505 	inc	a
      000535 F0               [24] 1506 	movx	@dptr,a
                                   1507 ;	Eth.c:193: arp_packet[46] = 'H';
      000536 90r00r52         [24] 1508 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x002e)
      000539 74 48            [12] 1509 	mov	a,#0x48
      00053B F0               [24] 1510 	movx	@dptr,a
                                   1511 ;	Eth.c:194: arp_packet[47] = 'I';
      00053C 90r00r53         [24] 1512 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x002f)
      00053F 04               [12] 1513 	inc	a
      000540 F0               [24] 1514 	movx	@dptr,a
                                   1515 ;	Eth.c:195: arp_packet[48] = 'S';
      000541 90r00r54         [24] 1516 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0030)
      000544 74 53            [12] 1517 	mov	a,#0x53
      000546 F0               [24] 1518 	movx	@dptr,a
                                   1519 ;	Eth.c:196: arp_packet[49] = 'H';
      000547 90r00r55         [24] 1520 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0031)
      00054A 74 48            [12] 1521 	mov	a,#0x48
      00054C F0               [24] 1522 	movx	@dptr,a
                                   1523 ;	Eth.c:197: arp_packet[50] = 'E';
      00054D 90r00r56         [24] 1524 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0032)
      000550 74 45            [12] 1525 	mov	a,#0x45
      000552 F0               [24] 1526 	movx	@dptr,a
                                   1527 ;	Eth.c:198: arp_packet[51] = 'K';
      000553 90r00r57         [24] 1528 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0033)
      000556 74 4B            [12] 1529 	mov	a,#0x4b
      000558 F0               [24] 1530 	movx	@dptr,a
                                   1531 ;	Eth.c:209: spi_buffer_write(frame_size, start_address, arp_packet);
      000559 90r00r00         [24] 1532 	mov	dptr,#_spi_buffer_write_PARM_2
      00055C 74 F0            [12] 1533 	mov	a,#0xf0
      00055E F0               [24] 1534 	movx	@dptr,a
      00055F E4               [12] 1535 	clr	a
      000560 A3               [24] 1536 	inc	dptr
      000561 F0               [24] 1537 	movx	@dptr,a
      000562 90r00r00         [24] 1538 	mov	dptr,#_spi_buffer_write_PARM_3
      000565 74r24            [12] 1539 	mov	a,#_send_arp_request_arp_packet_10000_84
      000567 F0               [24] 1540 	movx	@dptr,a
      000568 74s00            [12] 1541 	mov	a,#(_send_arp_request_arp_packet_10000_84 >> 8)
      00056A A3               [24] 1542 	inc	dptr
      00056B F0               [24] 1543 	movx	@dptr,a
      00056C E4               [12] 1544 	clr	a
      00056D A3               [24] 1545 	inc	dptr
      00056E F0               [24] 1546 	movx	@dptr,a
      00056F 90 00 33         [24] 1547 	mov	dptr,#0x0033
      000572 12r00r00         [24] 1548 	lcall	_spi_buffer_write
                                   1549 ;	Eth.c:212: enc28j60_set_transmit_pointers(start_address, end_address);
      000575 90r00r0A         [24] 1550 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      000578 74 22            [12] 1551 	mov	a,#0x22
      00057A F0               [24] 1552 	movx	@dptr,a
      00057B 74 01            [12] 1553 	mov	a,#0x01
      00057D A3               [24] 1554 	inc	dptr
      00057E F0               [24] 1555 	movx	@dptr,a
      00057F 90 00 F0         [24] 1556 	mov	dptr,#0x00f0
      000582 12r02r5D         [24] 1557 	lcall	_enc28j60_set_transmit_pointers
                                   1558 ;	Eth.c:215: enc28j60_start_transmission();
      000585 12r00rEB         [24] 1559 	lcall	_enc28j60_start_transmission
                                   1560 ;	Eth.c:218: if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
      000588 90 01 F4         [24] 1561 	mov	dptr,#0x01f4
      00058B 12r02rD4         [24] 1562 	lcall	_wait_for_transmission_complete
      00058E E5 82            [12] 1563 	mov	a, dpl
      000590 60 33            [24] 1564 	jz	00112$
                                   1565 ;	Eth.c:220: if (enc28j60_transmission_successful()) {
      000592 12r03r37         [24] 1566 	lcall	_enc28j60_transmission_successful
      000595 E5 82            [12] 1567 	mov	a, dpl
      000597 60 16            [24] 1568 	jz	00109$
                                   1569 ;	Eth.c:221: printf("ARP request sent successfully.\n\r");
      000599 74r7F            [12] 1570 	mov	a,#___str_3
      00059B C0 E0            [24] 1571 	push	acc
      00059D 74s00            [12] 1572 	mov	a,#(___str_3 >> 8)
      00059F C0 E0            [24] 1573 	push	acc
      0005A1 74 80            [12] 1574 	mov	a,#0x80
      0005A3 C0 E0            [24] 1575 	push	acc
      0005A5 12r00r00         [24] 1576 	lcall	_printf
      0005A8 15 81            [12] 1577 	dec	sp
      0005AA 15 81            [12] 1578 	dec	sp
      0005AC 15 81            [12] 1579 	dec	sp
      0005AE 22               [24] 1580 	ret
      0005AF                       1581 00109$:
                                   1582 ;	Eth.c:223: printf("ARP transmission failed. Check error flags.\n\r");
      0005AF 74rA0            [12] 1583 	mov	a,#___str_4
      0005B1 C0 E0            [24] 1584 	push	acc
      0005B3 74s00            [12] 1585 	mov	a,#(___str_4 >> 8)
      0005B5 C0 E0            [24] 1586 	push	acc
      0005B7 74 80            [12] 1587 	mov	a,#0x80
      0005B9 C0 E0            [24] 1588 	push	acc
      0005BB 12r00r00         [24] 1589 	lcall	_printf
      0005BE 15 81            [12] 1590 	dec	sp
      0005C0 15 81            [12] 1591 	dec	sp
      0005C2 15 81            [12] 1592 	dec	sp
      0005C4 22               [24] 1593 	ret
      0005C5                       1594 00112$:
                                   1595 ;	Eth.c:226: printf("Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
      0005C5 74rCE            [12] 1596 	mov	a,#___str_5
      0005C7 C0 E0            [24] 1597 	push	acc
      0005C9 74s00            [12] 1598 	mov	a,#(___str_5 >> 8)
      0005CB C0 E0            [24] 1599 	push	acc
      0005CD 74 80            [12] 1600 	mov	a,#0x80
      0005CF C0 E0            [24] 1601 	push	acc
      0005D1 12r00r00         [24] 1602 	lcall	_printf
      0005D4 15 81            [12] 1603 	dec	sp
      0005D6 15 81            [12] 1604 	dec	sp
      0005D8 15 81            [12] 1605 	dec	sp
                                   1606 ;	Eth.c:228: }
      0005DA 22               [24] 1607 	ret
                                   1608 	.area CSEG    (CODE)
                                   1609 	.area CONST   (CODE)
                                   1610 	.area CONST   (CODE)
      000000                       1611 ___str_0:
      000000 49 6E 76 61 6C 69 64  1612 	.ascii "Invalid RX buffer range."
             20 52 58 20 62 75 66
             66 65 72 20 72 61 6E
             67 65 2E
      000018 0A                    1613 	.db 0x0a
      000019 00                    1614 	.db 0x00
                                   1615 	.area CSEG    (CODE)
                                   1616 	.area CONST   (CODE)
      00001A                       1617 ___str_1:
      00001A 52 58 20 62 75 66 66  1618 	.ascii "RX buffer initialized: 0x%04X to 0x%04X."
             65 72 20 69 6E 69 74
             69 61 6C 69 7A 65 64
             3A 20 30 78 25 30 34
             58 20 74 6F 20 30 78
             25 30 34 58 2E
      000042 0A                    1619 	.db 0x0a
      000043 00                    1620 	.db 0x00
                                   1621 	.area CSEG    (CODE)
                                   1622 	.area CONST   (CODE)
      000044                       1623 ___str_2:
      000044 0A                    1624 	.db 0x0a
      000045 49 6E 76 61 6C 69 64  1625 	.ascii "Invalid Buffer Size. Buffer exceeds valid address range."
             20 42 75 66 66 65 72
             20 53 69 7A 65 2E 20
             42 75 66 66 65 72 20
             65 78 63 65 65 64 73
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 72 61 6E 67 65 2E
      00007D 0A                    1626 	.db 0x0a
      00007E 00                    1627 	.db 0x00
                                   1628 	.area CSEG    (CODE)
                                   1629 	.area CONST   (CODE)
      00007F                       1630 ___str_3:
      00007F 41 52 50 20 72 65 71  1631 	.ascii "ARP request sent successfully."
             75 65 73 74 20 73 65
             6E 74 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79 2E
      00009D 0A                    1632 	.db 0x0a
      00009E 0D                    1633 	.db 0x0d
      00009F 00                    1634 	.db 0x00
                                   1635 	.area CSEG    (CODE)
                                   1636 	.area CONST   (CODE)
      0000A0                       1637 ___str_4:
      0000A0 41 52 50 20 74 72 61  1638 	.ascii "ARP transmission failed. Check error flags."
             6E 73 6D 69 73 73 69
             6F 6E 20 66 61 69 6C
             65 64 2E 20 43 68 65
             63 6B 20 65 72 72 6F
             72 20 66 6C 61 67 73
             2E
      0000CB 0A                    1639 	.db 0x0a
      0000CC 0D                    1640 	.db 0x0d
      0000CD 00                    1641 	.db 0x00
                                   1642 	.area CSEG    (CODE)
                                   1643 	.area CONST   (CODE)
      0000CE                       1644 ___str_5:
      0000CE 54 72 61 6E 73 6D 69  1645 	.ascii "Transmission timeout. ENC28J60 may not be functioning correc"
             73 73 69 6F 6E 20 74
             69 6D 65 6F 75 74 2E
             20 45 4E 43 32 38 4A
             36 30 20 6D 61 79 20
             6E 6F 74 20 62 65 20
             66 75 6E 63 74 69 6F
             6E 69 6E 67 20 63 6F
             72 72 65 63
      00010A 74 6C 79 2E           1646 	.ascii "tly."
      00010E 0A                    1647 	.db 0x0a
      00010F 0D                    1648 	.db 0x0d
      000110 00                    1649 	.db 0x00
                                   1650 	.area CSEG    (CODE)
                                   1651 	.area XINIT   (CODE)
      000000                       1652 __xinit__source_mac:
      000000 02                    1653 	.db #0x02	; 2
      000001 11                    1654 	.db #0x11	; 17
      000002 22                    1655 	.db #0x22	; 34
      000003 33                    1656 	.db #0x33	; 51	'3'
      000004 44                    1657 	.db #0x44	; 68	'D'
      000005 55                    1658 	.db #0x55	; 85	'U'
      000006                       1659 __xinit__dest_mac:
      000006 FF                    1660 	.db #0xff	; 255
      000007 FF                    1661 	.db #0xff	; 255
      000008 FF                    1662 	.db #0xff	; 255
      000009 FF                    1663 	.db #0xff	; 255
      00000A FF                    1664 	.db #0xff	; 255
      00000B FF                    1665 	.db #0xff	; 255
      00000C                       1666 __xinit__source_ip:
      00000C C0                    1667 	.db #0xc0	; 192
      00000D A8                    1668 	.db #0xa8	; 168
      00000E 01                    1669 	.db #0x01	; 1
      00000F 64                    1670 	.db #0x64	; 100	'd'
      000010                       1671 __xinit__target_ip:
      000010 C0                    1672 	.db #0xc0	; 192
      000011 A8                    1673 	.db #0xa8	; 168
      000012 01                    1674 	.db #0x01	; 1
      000013 01                    1675 	.db #0x01	; 1
                                   1676 	.area CABS    (ABS,CODE)
