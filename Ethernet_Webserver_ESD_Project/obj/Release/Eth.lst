                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module Eth
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _external_interrupt0_isr
                                     12 	.globl _enc28j60_transmission_successful
                                     13 	.globl _enc28j60_start_transmission
                                     14 	.globl _delay_ms
                                     15 	.globl _spi_control_write
                                     16 	.globl _phy_spi_write
                                     17 	.globl _spi_buffer_write
                                     18 	.globl _mac_spi_read
                                     19 	.globl _enc_reset
                                     20 	.globl _printf
                                     21 	.globl _TF1
                                     22 	.globl _TR1
                                     23 	.globl _TF0
                                     24 	.globl _TR0
                                     25 	.globl _IE1
                                     26 	.globl _IT1
                                     27 	.globl _IE0
                                     28 	.globl _IT0
                                     29 	.globl _SM0
                                     30 	.globl _SM1
                                     31 	.globl _SM2
                                     32 	.globl _REN
                                     33 	.globl _TB8
                                     34 	.globl _RB8
                                     35 	.globl _TI
                                     36 	.globl _RI
                                     37 	.globl _CY
                                     38 	.globl _AC
                                     39 	.globl _F0
                                     40 	.globl _RS1
                                     41 	.globl _RS0
                                     42 	.globl _OV
                                     43 	.globl _F1
                                     44 	.globl _P
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD0
                                     52 	.globl _TXD
                                     53 	.globl _RXD0
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _PS
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _EA
                                     93 	.globl _ES
                                     94 	.globl _ET1
                                     95 	.globl _EX1
                                     96 	.globl _ET0
                                     97 	.globl _EX0
                                     98 	.globl _BREG_F7
                                     99 	.globl _BREG_F6
                                    100 	.globl _BREG_F5
                                    101 	.globl _BREG_F4
                                    102 	.globl _BREG_F3
                                    103 	.globl _BREG_F2
                                    104 	.globl _BREG_F1
                                    105 	.globl _BREG_F0
                                    106 	.globl _P5_7
                                    107 	.globl _P5_6
                                    108 	.globl _P5_5
                                    109 	.globl _P5_4
                                    110 	.globl _P5_3
                                    111 	.globl _P5_2
                                    112 	.globl _P5_1
                                    113 	.globl _P5_0
                                    114 	.globl _P4_7
                                    115 	.globl _P4_6
                                    116 	.globl _P4_5
                                    117 	.globl _P4_4
                                    118 	.globl _P4_3
                                    119 	.globl _P4_2
                                    120 	.globl _P4_1
                                    121 	.globl _P4_0
                                    122 	.globl _PX0L
                                    123 	.globl _PT0L
                                    124 	.globl _PX1L
                                    125 	.globl _PT1L
                                    126 	.globl _PSL
                                    127 	.globl _PT2L
                                    128 	.globl _PPCL
                                    129 	.globl _EC
                                    130 	.globl _CCF0
                                    131 	.globl _CCF1
                                    132 	.globl _CCF2
                                    133 	.globl _CCF3
                                    134 	.globl _CCF4
                                    135 	.globl _CR
                                    136 	.globl _CF
                                    137 	.globl _TF2
                                    138 	.globl _EXF2
                                    139 	.globl _RCLK
                                    140 	.globl _TCLK
                                    141 	.globl _EXEN2
                                    142 	.globl _TR2
                                    143 	.globl _C_T2
                                    144 	.globl _CP_RL2
                                    145 	.globl _T2CON_7
                                    146 	.globl _T2CON_6
                                    147 	.globl _T2CON_5
                                    148 	.globl _T2CON_4
                                    149 	.globl _T2CON_3
                                    150 	.globl _T2CON_2
                                    151 	.globl _T2CON_1
                                    152 	.globl _T2CON_0
                                    153 	.globl _PT2
                                    154 	.globl _ET2
                                    155 	.globl _TMOD
                                    156 	.globl _TL1
                                    157 	.globl _TL0
                                    158 	.globl _TH1
                                    159 	.globl _TH0
                                    160 	.globl _TCON
                                    161 	.globl _SP
                                    162 	.globl _SCON
                                    163 	.globl _SBUF0
                                    164 	.globl _SBUF
                                    165 	.globl _PSW
                                    166 	.globl _PCON
                                    167 	.globl _P3
                                    168 	.globl _P2
                                    169 	.globl _P1
                                    170 	.globl _P0
                                    171 	.globl _IP
                                    172 	.globl _IE
                                    173 	.globl _DP0L
                                    174 	.globl _DPL
                                    175 	.globl _DP0H
                                    176 	.globl _DPH
                                    177 	.globl _B
                                    178 	.globl _ACC
                                    179 	.globl _EECON
                                    180 	.globl _KBF
                                    181 	.globl _KBE
                                    182 	.globl _KBLS
                                    183 	.globl _BRL
                                    184 	.globl _BDRCON
                                    185 	.globl _T2MOD
                                    186 	.globl _SPDAT
                                    187 	.globl _SPSTA
                                    188 	.globl _SPCON
                                    189 	.globl _SADEN
                                    190 	.globl _SADDR
                                    191 	.globl _WDTPRG
                                    192 	.globl _WDTRST
                                    193 	.globl _P5
                                    194 	.globl _P4
                                    195 	.globl _IPH1
                                    196 	.globl _IPL1
                                    197 	.globl _IPH0
                                    198 	.globl _IPL0
                                    199 	.globl _IEN1
                                    200 	.globl _IEN0
                                    201 	.globl _CMOD
                                    202 	.globl _CL
                                    203 	.globl _CH
                                    204 	.globl _CCON
                                    205 	.globl _CCAPM4
                                    206 	.globl _CCAPM3
                                    207 	.globl _CCAPM2
                                    208 	.globl _CCAPM1
                                    209 	.globl _CCAPM0
                                    210 	.globl _CCAP4L
                                    211 	.globl _CCAP3L
                                    212 	.globl _CCAP2L
                                    213 	.globl _CCAP1L
                                    214 	.globl _CCAP0L
                                    215 	.globl _CCAP4H
                                    216 	.globl _CCAP3H
                                    217 	.globl _CCAP2H
                                    218 	.globl _CCAP1H
                                    219 	.globl _CCAP0H
                                    220 	.globl _CKCON1
                                    221 	.globl _CKCON0
                                    222 	.globl _CKRL
                                    223 	.globl _AUXR1
                                    224 	.globl _AUXR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T2CON
                                    230 	.globl _enc_buffer_init_PARM_2
                                    231 	.globl _enc28j60_set_transmit_pointers_PARM_2
                                    232 	.globl _enc28j60_set_transmit_pointers
                                    233 	.globl _wait_for_transmission_complete
                                    234 	.globl _send_arp_request
                                    235 	.globl _enc_buffer_init
                                    236 	.globl _enc_init
                                    237 	.globl _ENC_pkt_count
                                    238 	.globl _update_ERXRDPT
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           0000C8   244 _T2CON	=	0x00c8
                           0000CA   245 _RCAP2L	=	0x00ca
                           0000CB   246 _RCAP2H	=	0x00cb
                           0000CC   247 _TL2	=	0x00cc
                           0000CD   248 _TH2	=	0x00cd
                           00008E   249 _AUXR	=	0x008e
                           0000A2   250 _AUXR1	=	0x00a2
                           000097   251 _CKRL	=	0x0097
                           00008F   252 _CKCON0	=	0x008f
                           0000AF   253 _CKCON1	=	0x00af
                           0000FA   254 _CCAP0H	=	0x00fa
                           0000FB   255 _CCAP1H	=	0x00fb
                           0000FC   256 _CCAP2H	=	0x00fc
                           0000FD   257 _CCAP3H	=	0x00fd
                           0000FE   258 _CCAP4H	=	0x00fe
                           0000EA   259 _CCAP0L	=	0x00ea
                           0000EB   260 _CCAP1L	=	0x00eb
                           0000EC   261 _CCAP2L	=	0x00ec
                           0000ED   262 _CCAP3L	=	0x00ed
                           0000EE   263 _CCAP4L	=	0x00ee
                           0000DA   264 _CCAPM0	=	0x00da
                           0000DB   265 _CCAPM1	=	0x00db
                           0000DC   266 _CCAPM2	=	0x00dc
                           0000DD   267 _CCAPM3	=	0x00dd
                           0000DE   268 _CCAPM4	=	0x00de
                           0000D8   269 _CCON	=	0x00d8
                           0000F9   270 _CH	=	0x00f9
                           0000E9   271 _CL	=	0x00e9
                           0000D9   272 _CMOD	=	0x00d9
                           0000A8   273 _IEN0	=	0x00a8
                           0000B1   274 _IEN1	=	0x00b1
                           0000B8   275 _IPL0	=	0x00b8
                           0000B7   276 _IPH0	=	0x00b7
                           0000B2   277 _IPL1	=	0x00b2
                           0000B3   278 _IPH1	=	0x00b3
                           0000C0   279 _P4	=	0x00c0
                           0000E8   280 _P5	=	0x00e8
                           0000A6   281 _WDTRST	=	0x00a6
                           0000A7   282 _WDTPRG	=	0x00a7
                           0000A9   283 _SADDR	=	0x00a9
                           0000B9   284 _SADEN	=	0x00b9
                           0000C3   285 _SPCON	=	0x00c3
                           0000C4   286 _SPSTA	=	0x00c4
                           0000C5   287 _SPDAT	=	0x00c5
                           0000C9   288 _T2MOD	=	0x00c9
                           00009B   289 _BDRCON	=	0x009b
                           00009A   290 _BRL	=	0x009a
                           00009C   291 _KBLS	=	0x009c
                           00009D   292 _KBE	=	0x009d
                           00009E   293 _KBF	=	0x009e
                           0000D2   294 _EECON	=	0x00d2
                           0000E0   295 _ACC	=	0x00e0
                           0000F0   296 _B	=	0x00f0
                           000083   297 _DPH	=	0x0083
                           000083   298 _DP0H	=	0x0083
                           000082   299 _DPL	=	0x0082
                           000082   300 _DP0L	=	0x0082
                           0000A8   301 _IE	=	0x00a8
                           0000B8   302 _IP	=	0x00b8
                           000080   303 _P0	=	0x0080
                           000090   304 _P1	=	0x0090
                           0000A0   305 _P2	=	0x00a0
                           0000B0   306 _P3	=	0x00b0
                           000087   307 _PCON	=	0x0087
                           0000D0   308 _PSW	=	0x00d0
                           000099   309 _SBUF	=	0x0099
                           000099   310 _SBUF0	=	0x0099
                           000098   311 _SCON	=	0x0098
                           000081   312 _SP	=	0x0081
                           000088   313 _TCON	=	0x0088
                           00008C   314 _TH0	=	0x008c
                           00008D   315 _TH1	=	0x008d
                           00008A   316 _TL0	=	0x008a
                           00008B   317 _TL1	=	0x008b
                           000089   318 _TMOD	=	0x0089
                                    319 ;--------------------------------------------------------
                                    320 ; special function bits
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           0000AD   324 _ET2	=	0x00ad
                           0000BD   325 _PT2	=	0x00bd
                           0000C8   326 _T2CON_0	=	0x00c8
                           0000C9   327 _T2CON_1	=	0x00c9
                           0000CA   328 _T2CON_2	=	0x00ca
                           0000CB   329 _T2CON_3	=	0x00cb
                           0000CC   330 _T2CON_4	=	0x00cc
                           0000CD   331 _T2CON_5	=	0x00cd
                           0000CE   332 _T2CON_6	=	0x00ce
                           0000CF   333 _T2CON_7	=	0x00cf
                           0000C8   334 _CP_RL2	=	0x00c8
                           0000C9   335 _C_T2	=	0x00c9
                           0000CA   336 _TR2	=	0x00ca
                           0000CB   337 _EXEN2	=	0x00cb
                           0000CC   338 _TCLK	=	0x00cc
                           0000CD   339 _RCLK	=	0x00cd
                           0000CE   340 _EXF2	=	0x00ce
                           0000CF   341 _TF2	=	0x00cf
                           0000DF   342 _CF	=	0x00df
                           0000DE   343 _CR	=	0x00de
                           0000DC   344 _CCF4	=	0x00dc
                           0000DB   345 _CCF3	=	0x00db
                           0000DA   346 _CCF2	=	0x00da
                           0000D9   347 _CCF1	=	0x00d9
                           0000D8   348 _CCF0	=	0x00d8
                           0000AE   349 _EC	=	0x00ae
                           0000BE   350 _PPCL	=	0x00be
                           0000BD   351 _PT2L	=	0x00bd
                           0000BC   352 _PSL	=	0x00bc
                           0000BB   353 _PT1L	=	0x00bb
                           0000BA   354 _PX1L	=	0x00ba
                           0000B9   355 _PT0L	=	0x00b9
                           0000B8   356 _PX0L	=	0x00b8
                           0000C0   357 _P4_0	=	0x00c0
                           0000C1   358 _P4_1	=	0x00c1
                           0000C2   359 _P4_2	=	0x00c2
                           0000C3   360 _P4_3	=	0x00c3
                           0000C4   361 _P4_4	=	0x00c4
                           0000C5   362 _P4_5	=	0x00c5
                           0000C6   363 _P4_6	=	0x00c6
                           0000C7   364 _P4_7	=	0x00c7
                           0000E8   365 _P5_0	=	0x00e8
                           0000E9   366 _P5_1	=	0x00e9
                           0000EA   367 _P5_2	=	0x00ea
                           0000EB   368 _P5_3	=	0x00eb
                           0000EC   369 _P5_4	=	0x00ec
                           0000ED   370 _P5_5	=	0x00ed
                           0000EE   371 _P5_6	=	0x00ee
                           0000EF   372 _P5_7	=	0x00ef
                           0000F0   373 _BREG_F0	=	0x00f0
                           0000F1   374 _BREG_F1	=	0x00f1
                           0000F2   375 _BREG_F2	=	0x00f2
                           0000F3   376 _BREG_F3	=	0x00f3
                           0000F4   377 _BREG_F4	=	0x00f4
                           0000F5   378 _BREG_F5	=	0x00f5
                           0000F6   379 _BREG_F6	=	0x00f6
                           0000F7   380 _BREG_F7	=	0x00f7
                           0000A8   381 _EX0	=	0x00a8
                           0000A9   382 _ET0	=	0x00a9
                           0000AA   383 _EX1	=	0x00aa
                           0000AB   384 _ET1	=	0x00ab
                           0000AC   385 _ES	=	0x00ac
                           0000AF   386 _EA	=	0x00af
                           0000B8   387 _PX0	=	0x00b8
                           0000B9   388 _PT0	=	0x00b9
                           0000BA   389 _PX1	=	0x00ba
                           0000BB   390 _PT1	=	0x00bb
                           0000BC   391 _PS	=	0x00bc
                           000080   392 _P0_0	=	0x0080
                           000081   393 _P0_1	=	0x0081
                           000082   394 _P0_2	=	0x0082
                           000083   395 _P0_3	=	0x0083
                           000084   396 _P0_4	=	0x0084
                           000085   397 _P0_5	=	0x0085
                           000086   398 _P0_6	=	0x0086
                           000087   399 _P0_7	=	0x0087
                           000090   400 _P1_0	=	0x0090
                           000091   401 _P1_1	=	0x0091
                           000092   402 _P1_2	=	0x0092
                           000093   403 _P1_3	=	0x0093
                           000094   404 _P1_4	=	0x0094
                           000095   405 _P1_5	=	0x0095
                           000096   406 _P1_6	=	0x0096
                           000097   407 _P1_7	=	0x0097
                           0000A0   408 _P2_0	=	0x00a0
                           0000A1   409 _P2_1	=	0x00a1
                           0000A2   410 _P2_2	=	0x00a2
                           0000A3   411 _P2_3	=	0x00a3
                           0000A4   412 _P2_4	=	0x00a4
                           0000A5   413 _P2_5	=	0x00a5
                           0000A6   414 _P2_6	=	0x00a6
                           0000A7   415 _P2_7	=	0x00a7
                           0000B0   416 _P3_0	=	0x00b0
                           0000B1   417 _P3_1	=	0x00b1
                           0000B2   418 _P3_2	=	0x00b2
                           0000B3   419 _P3_3	=	0x00b3
                           0000B4   420 _P3_4	=	0x00b4
                           0000B5   421 _P3_5	=	0x00b5
                           0000B6   422 _P3_6	=	0x00b6
                           0000B7   423 _P3_7	=	0x00b7
                           0000B0   424 _RXD	=	0x00b0
                           0000B0   425 _RXD0	=	0x00b0
                           0000B1   426 _TXD	=	0x00b1
                           0000B1   427 _TXD0	=	0x00b1
                           0000B2   428 _INT0	=	0x00b2
                           0000B3   429 _INT1	=	0x00b3
                           0000B4   430 _T0	=	0x00b4
                           0000B5   431 _T1	=	0x00b5
                           0000B6   432 _WR	=	0x00b6
                           0000B7   433 _RD	=	0x00b7
                           0000D0   434 _P	=	0x00d0
                           0000D1   435 _F1	=	0x00d1
                           0000D2   436 _OV	=	0x00d2
                           0000D3   437 _RS0	=	0x00d3
                           0000D4   438 _RS1	=	0x00d4
                           0000D5   439 _F0	=	0x00d5
                           0000D6   440 _AC	=	0x00d6
                           0000D7   441 _CY	=	0x00d7
                           000098   442 _RI	=	0x0098
                           000099   443 _TI	=	0x0099
                           00009A   444 _RB8	=	0x009a
                           00009B   445 _TB8	=	0x009b
                           00009C   446 _REN	=	0x009c
                           00009D   447 _SM2	=	0x009d
                           00009E   448 _SM1	=	0x009e
                           00009F   449 _SM0	=	0x009f
                           000088   450 _IT0	=	0x0088
                           000089   451 _IE0	=	0x0089
                           00008A   452 _IT1	=	0x008a
                           00008B   453 _IE1	=	0x008b
                           00008C   454 _TR0	=	0x008c
                           00008D   455 _TF0	=	0x008d
                           00008E   456 _TR1	=	0x008e
                           00008F   457 _TF1	=	0x008f
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable register banks
                                    460 ;--------------------------------------------------------
                                    461 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        462 	.ds 8
                                    463 ;--------------------------------------------------------
                                    464 ; overlayable bit register bank
                                    465 ;--------------------------------------------------------
                                    466 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        467 bits:
      000000                        468 	.ds 1
                           008000   469 	b0 = bits[0]
                           008100   470 	b1 = bits[1]
                           008200   471 	b2 = bits[2]
                           008300   472 	b3 = bits[3]
                           008400   473 	b4 = bits[4]
                           008500   474 	b5 = bits[5]
                           008600   475 	b6 = bits[6]
                           008700   476 	b7 = bits[7]
                                    477 ;--------------------------------------------------------
                                    478 ; internal ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area DSEG    (DATA)
      000000                        481 _enc_init_sloc0_1_0:
      000000                        482 	.ds 3
      000003                        483 _enc_init_sloc1_1_0:
      000003                        484 	.ds 3
      000006                        485 _enc_init_sloc2_1_0:
      000006                        486 	.ds 3
      000009                        487 _enc_init_sloc3_1_0:
      000009                        488 	.ds 3
                                    489 ;--------------------------------------------------------
                                    490 ; overlayable items in internal ram
                                    491 ;--------------------------------------------------------
                                    492 ;--------------------------------------------------------
                                    493 ; indirectly addressable internal ram data
                                    494 ;--------------------------------------------------------
                                    495 	.area ISEG    (DATA)
                                    496 ;--------------------------------------------------------
                                    497 ; absolute internal ram data
                                    498 ;--------------------------------------------------------
                                    499 	.area IABS    (ABS,DATA)
                                    500 	.area IABS    (ABS,DATA)
                                    501 ;--------------------------------------------------------
                                    502 ; bit data
                                    503 ;--------------------------------------------------------
                                    504 	.area BSEG    (BIT)
      000000                        505 _enc28j60_transmission_successful_sloc0_1_0:
      000000                        506 	.ds 1
                                    507 ;--------------------------------------------------------
                                    508 ; paged external ram data
                                    509 ;--------------------------------------------------------
                                    510 	.area PSEG    (PAG,XDATA)
                                    511 ;--------------------------------------------------------
                                    512 ; uninitialized external ram data
                                    513 ;--------------------------------------------------------
                                    514 	.area XSEG    (XDATA)
      000000                        515 _delay_ms_ms_10000_122:
      000000                        516 	.ds 2
      000002                        517 _delay_ms_i_20000_124:
      000002                        518 	.ds 4
      000006                        519 _enc28j60_set_transmit_pointers_PARM_2:
      000006                        520 	.ds 2
      000008                        521 _enc28j60_set_transmit_pointers_start_address_10000_128:
      000008                        522 	.ds 2
      00000A                        523 _wait_for_transmission_complete_timeout_ms_10000_130:
      00000A                        524 	.ds 2
      00000C                        525 _send_arp_request_source_mac_10000_136:
      00000C                        526 	.ds 6
      000012                        527 _send_arp_request_dest_mac_10000_136:
      000012                        528 	.ds 6
      000018                        529 _send_arp_request_source_ip_10000_136:
      000018                        530 	.ds 4
      00001C                        531 _send_arp_request_target_ip_10000_136:
      00001C                        532 	.ds 4
      000020                        533 _send_arp_request_arp_packet_10000_136:
      000020                        534 	.ds 43
      00004B                        535 _external_interrupt0_isr_i_10000_155:
      00004B                        536 	.ds 2
      00004D                        537 _enc_buffer_init_PARM_2:
      00004D                        538 	.ds 2
      00004F                        539 _enc_buffer_init_start_address_10000_157:
      00004F                        540 	.ds 2
      000051                        541 _enc_init_mac_10000_160:
      000051                        542 	.ds 3
      000054                        543 _update_ERXRDPT_new_address_10000_167:
      000054                        544 	.ds 2
                                    545 ;--------------------------------------------------------
                                    546 ; absolute external ram data
                                    547 ;--------------------------------------------------------
                                    548 	.area XABS    (ABS,XDATA)
                                    549 ;--------------------------------------------------------
                                    550 ; initialized external ram data
                                    551 ;--------------------------------------------------------
                                    552 	.area XISEG   (XDATA)
                                    553 	.area HOME    (CODE)
                                    554 	.area GSINIT0 (CODE)
                                    555 	.area GSINIT1 (CODE)
                                    556 	.area GSINIT2 (CODE)
                                    557 	.area GSINIT3 (CODE)
                                    558 	.area GSINIT4 (CODE)
                                    559 	.area GSINIT5 (CODE)
                                    560 	.area GSINIT  (CODE)
                                    561 	.area GSFINAL (CODE)
                                    562 	.area CSEG    (CODE)
                                    563 ;--------------------------------------------------------
                                    564 ; global & static initialisations
                                    565 ;--------------------------------------------------------
                                    566 	.area HOME    (CODE)
                                    567 	.area GSINIT  (CODE)
                                    568 	.area GSFINAL (CODE)
                                    569 	.area GSINIT  (CODE)
                                    570 ;------------------------------------------------------------
                                    571 ;Allocation info for local variables in function 'external_interrupt0_isr'
                                    572 ;------------------------------------------------------------
                                    573 ;i                         Allocated with name '_external_interrupt0_isr_i_10000_155'
                                    574 ;------------------------------------------------------------
                                    575 ;	Eth.c:200: static int i = 0;
      000000 90r00r4B         [24]  576 	mov	dptr,#_external_interrupt0_isr_i_10000_155
      000003 E4               [12]  577 	clr	a
      000004 F0               [24]  578 	movx	@dptr,a
      000005 A3               [24]  579 	inc	dptr
      000006 F0               [24]  580 	movx	@dptr,a
                                    581 ;--------------------------------------------------------
                                    582 ; Home
                                    583 ;--------------------------------------------------------
                                    584 	.area HOME    (CODE)
                                    585 	.area HOME    (CODE)
                                    586 ;--------------------------------------------------------
                                    587 ; code
                                    588 ;--------------------------------------------------------
                                    589 	.area CSEG    (CODE)
                                    590 ;------------------------------------------------------------
                                    591 ;Allocation info for local variables in function 'delay_ms'
                                    592 ;------------------------------------------------------------
                                    593 ;ms                        Allocated with name '_delay_ms_ms_10000_122'
                                    594 ;i                         Allocated with name '_delay_ms_i_20000_124'
                                    595 ;------------------------------------------------------------
                                    596 ;	Eth.c:48: void delay_ms(uint16_t ms)
                                    597 ;	-----------------------------------------
                                    598 ;	 function delay_ms
                                    599 ;	-----------------------------------------
      000000                        600 _delay_ms:
                           000007   601 	ar7 = 0x07
                           000006   602 	ar6 = 0x06
                           000005   603 	ar5 = 0x05
                           000004   604 	ar4 = 0x04
                           000003   605 	ar3 = 0x03
                           000002   606 	ar2 = 0x02
                           000001   607 	ar1 = 0x01
                           000000   608 	ar0 = 0x00
      000000 AF 83            [24]  609 	mov	r7,dph
      000002 E5 82            [12]  610 	mov	a,dpl
      000004 90r00r00         [24]  611 	mov	dptr,#_delay_ms_ms_10000_122
      000007 F0               [24]  612 	movx	@dptr,a
      000008 EF               [12]  613 	mov	a,r7
      000009 A3               [24]  614 	inc	dptr
      00000A F0               [24]  615 	movx	@dptr,a
                                    616 ;	Eth.c:50: for (volatile uint32_t i = 0; i < ms * 1000; i++)
      00000B 90r00r02         [24]  617 	mov	dptr,#_delay_ms_i_20000_124
      00000E E4               [12]  618 	clr	a
      00000F F0               [24]  619 	movx	@dptr,a
      000010 A3               [24]  620 	inc	dptr
      000011 F0               [24]  621 	movx	@dptr,a
      000012 A3               [24]  622 	inc	dptr
      000013 F0               [24]  623 	movx	@dptr,a
      000014 A3               [24]  624 	inc	dptr
      000015 F0               [24]  625 	movx	@dptr,a
      000016 90r00r00         [24]  626 	mov	dptr,#_delay_ms_ms_10000_122
      000019 E0               [24]  627 	movx	a,@dptr
      00001A FE               [12]  628 	mov	r6,a
      00001B A3               [24]  629 	inc	dptr
      00001C E0               [24]  630 	movx	a,@dptr
      00001D FF               [12]  631 	mov	r7,a
      00001E                        632 00103$:
      00001E 90r00r00         [24]  633 	mov	dptr,#__mulint_PARM_2
      000021 EE               [12]  634 	mov	a,r6
      000022 F0               [24]  635 	movx	@dptr,a
      000023 EF               [12]  636 	mov	a,r7
      000024 A3               [24]  637 	inc	dptr
      000025 F0               [24]  638 	movx	@dptr,a
      000026 90 03 E8         [24]  639 	mov	dptr,#0x03e8
      000029 C0 07            [24]  640 	push	ar7
      00002B C0 06            [24]  641 	push	ar6
      00002D 12r00r00         [24]  642 	lcall	__mulint
      000030 AC 82            [24]  643 	mov	r4, dpl
      000032 AD 83            [24]  644 	mov	r5, dph
      000034 D0 06            [24]  645 	pop	ar6
      000036 D0 07            [24]  646 	pop	ar7
      000038 90r00r02         [24]  647 	mov	dptr,#_delay_ms_i_20000_124
      00003B E0               [24]  648 	movx	a,@dptr
      00003C F8               [12]  649 	mov	r0,a
      00003D A3               [24]  650 	inc	dptr
      00003E E0               [24]  651 	movx	a,@dptr
      00003F F9               [12]  652 	mov	r1,a
      000040 A3               [24]  653 	inc	dptr
      000041 E0               [24]  654 	movx	a,@dptr
      000042 FA               [12]  655 	mov	r2,a
      000043 A3               [24]  656 	inc	dptr
      000044 E0               [24]  657 	movx	a,@dptr
      000045 FB               [12]  658 	mov	r3,a
      000046 C0 06            [24]  659 	push	ar6
      000048 C0 07            [24]  660 	push	ar7
      00004A 7E 00            [12]  661 	mov	r6,#0x00
      00004C 7F 00            [12]  662 	mov	r7,#0x00
      00004E C3               [12]  663 	clr	c
      00004F E8               [12]  664 	mov	a,r0
      000050 9C               [12]  665 	subb	a,r4
      000051 E9               [12]  666 	mov	a,r1
      000052 9D               [12]  667 	subb	a,r5
      000053 EA               [12]  668 	mov	a,r2
      000054 9E               [12]  669 	subb	a,r6
      000055 EB               [12]  670 	mov	a,r3
      000056 9F               [12]  671 	subb	a,r7
      000057 D0 07            [24]  672 	pop	ar7
      000059 D0 06            [24]  673 	pop	ar6
      00005B 50 23            [24]  674 	jnc	00105$
      00005D 90r00r02         [24]  675 	mov	dptr,#_delay_ms_i_20000_124
      000060 E0               [24]  676 	movx	a,@dptr
      000061 FA               [12]  677 	mov	r2,a
      000062 A3               [24]  678 	inc	dptr
      000063 E0               [24]  679 	movx	a,@dptr
      000064 FB               [12]  680 	mov	r3,a
      000065 A3               [24]  681 	inc	dptr
      000066 E0               [24]  682 	movx	a,@dptr
      000067 FC               [12]  683 	mov	r4,a
      000068 A3               [24]  684 	inc	dptr
      000069 E0               [24]  685 	movx	a,@dptr
      00006A FD               [12]  686 	mov	r5,a
      00006B 90r00r02         [24]  687 	mov	dptr,#_delay_ms_i_20000_124
      00006E 74 01            [12]  688 	mov	a,#0x01
      000070 2A               [12]  689 	add	a, r2
      000071 F0               [24]  690 	movx	@dptr,a
      000072 E4               [12]  691 	clr	a
      000073 3B               [12]  692 	addc	a, r3
      000074 A3               [24]  693 	inc	dptr
      000075 F0               [24]  694 	movx	@dptr,a
      000076 E4               [12]  695 	clr	a
      000077 3C               [12]  696 	addc	a, r4
      000078 A3               [24]  697 	inc	dptr
      000079 F0               [24]  698 	movx	@dptr,a
      00007A E4               [12]  699 	clr	a
      00007B 3D               [12]  700 	addc	a, r5
      00007C A3               [24]  701 	inc	dptr
      00007D F0               [24]  702 	movx	@dptr,a
      00007E 80 9E            [24]  703 	sjmp	00103$
      000080                        704 00105$:
                                    705 ;	Eth.c:54: }
      000080 22               [24]  706 	ret
                                    707 ;------------------------------------------------------------
                                    708 ;Allocation info for local variables in function 'enc28j60_start_transmission'
                                    709 ;------------------------------------------------------------
                                    710 ;econ1                     Allocated with name '_enc28j60_start_transmission_econ1_10000_127'
                                    711 ;------------------------------------------------------------
                                    712 ;	Eth.c:56: void enc28j60_start_transmission(void)
                                    713 ;	-----------------------------------------
                                    714 ;	 function enc28j60_start_transmission
                                    715 ;	-----------------------------------------
      000081                        716 _enc28j60_start_transmission:
                                    717 ;	Eth.c:58: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      000081 90r00r00         [24]  718 	mov	dptr,#_mac_spi_read_PARM_2
      000084 E4               [12]  719 	clr	a
      000085 F0               [24]  720 	movx	@dptr,a
      000086 75 82 1F         [24]  721 	mov	dpl, #0x1f
      000089 12r00r00         [24]  722 	lcall	_mac_spi_read
      00008C E5 82            [12]  723 	mov	a, dpl
                                    724 ;	Eth.c:59: econ1 |= 0x08; // Set TXRTS (bit 3)
      00008E 44 08            [12]  725 	orl	a,#0x08
      000090 FF               [12]  726 	mov	r7,a
                                    727 ;	Eth.c:60: spi_control_write(0, 0x1F, econ1); // Write back to ECON1
      000091 90r00r00         [24]  728 	mov	dptr,#_spi_control_write_PARM_2
      000094 74 1F            [12]  729 	mov	a,#0x1f
      000096 F0               [24]  730 	movx	@dptr,a
      000097 90r00r00         [24]  731 	mov	dptr,#_spi_control_write_PARM_3
      00009A EF               [12]  732 	mov	a,r7
      00009B F0               [24]  733 	movx	@dptr,a
      00009C 75 82 00         [24]  734 	mov	dpl, #0x00
                                    735 ;	Eth.c:61: }
      00009F 02r00r00         [24]  736 	ljmp	_spi_control_write
                                    737 ;------------------------------------------------------------
                                    738 ;Allocation info for local variables in function 'enc28j60_set_transmit_pointers'
                                    739 ;------------------------------------------------------------
                                    740 ;end_address               Allocated with name '_enc28j60_set_transmit_pointers_PARM_2'
                                    741 ;start_address             Allocated with name '_enc28j60_set_transmit_pointers_start_address_10000_128'
                                    742 ;------------------------------------------------------------
                                    743 ;	Eth.c:64: void enc28j60_set_transmit_pointers(uint16_t start_address, uint16_t end_address)
                                    744 ;	-----------------------------------------
                                    745 ;	 function enc28j60_set_transmit_pointers
                                    746 ;	-----------------------------------------
      0000A2                        747 _enc28j60_set_transmit_pointers:
      0000A2 AF 83            [24]  748 	mov	r7,dph
      0000A4 E5 82            [12]  749 	mov	a,dpl
      0000A6 90r00r08         [24]  750 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_128
      0000A9 F0               [24]  751 	movx	@dptr,a
      0000AA EF               [12]  752 	mov	a,r7
      0000AB A3               [24]  753 	inc	dptr
      0000AC F0               [24]  754 	movx	@dptr,a
                                    755 ;	Eth.c:67: spi_control_write(0, 0x04, (uint8_t)(start_address & 0xFF)); // Low byte
      0000AD 90r00r08         [24]  756 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_128
      0000B0 E0               [24]  757 	movx	a,@dptr
      0000B1 FE               [12]  758 	mov	r6,a
      0000B2 A3               [24]  759 	inc	dptr
      0000B3 E0               [24]  760 	movx	a,@dptr
      0000B4 FF               [12]  761 	mov	r7,a
      0000B5 8E 05            [24]  762 	mov	ar5,r6
      0000B7 90r00r00         [24]  763 	mov	dptr,#_spi_control_write_PARM_2
      0000BA 74 04            [12]  764 	mov	a,#0x04
      0000BC F0               [24]  765 	movx	@dptr,a
      0000BD 90r00r00         [24]  766 	mov	dptr,#_spi_control_write_PARM_3
      0000C0 ED               [12]  767 	mov	a,r5
      0000C1 F0               [24]  768 	movx	@dptr,a
      0000C2 75 82 00         [24]  769 	mov	dpl, #0x00
      0000C5 C0 07            [24]  770 	push	ar7
      0000C7 C0 06            [24]  771 	push	ar6
      0000C9 12r00r00         [24]  772 	lcall	_spi_control_write
      0000CC D0 06            [24]  773 	pop	ar6
      0000CE D0 07            [24]  774 	pop	ar7
                                    775 ;	Eth.c:68: spi_control_write(0, 0x05, (uint8_t)((start_address >> 8) & 0xFF)); // High byte
      0000D0 8F 06            [24]  776 	mov	ar6,r7
      0000D2 90r00r00         [24]  777 	mov	dptr,#_spi_control_write_PARM_2
      0000D5 74 05            [12]  778 	mov	a,#0x05
      0000D7 F0               [24]  779 	movx	@dptr,a
      0000D8 90r00r00         [24]  780 	mov	dptr,#_spi_control_write_PARM_3
      0000DB EE               [12]  781 	mov	a,r6
      0000DC F0               [24]  782 	movx	@dptr,a
      0000DD 75 82 00         [24]  783 	mov	dpl, #0x00
      0000E0 12r00r00         [24]  784 	lcall	_spi_control_write
                                    785 ;	Eth.c:71: spi_control_write(0, 0x06, (uint8_t)(end_address & 0xFF)); // Low byte
      0000E3 90r00r06         [24]  786 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      0000E6 E0               [24]  787 	movx	a,@dptr
      0000E7 FE               [12]  788 	mov	r6,a
      0000E8 A3               [24]  789 	inc	dptr
      0000E9 E0               [24]  790 	movx	a,@dptr
      0000EA FF               [12]  791 	mov	r7,a
      0000EB 8E 05            [24]  792 	mov	ar5,r6
      0000ED 90r00r00         [24]  793 	mov	dptr,#_spi_control_write_PARM_2
      0000F0 74 06            [12]  794 	mov	a,#0x06
      0000F2 F0               [24]  795 	movx	@dptr,a
      0000F3 90r00r00         [24]  796 	mov	dptr,#_spi_control_write_PARM_3
      0000F6 ED               [12]  797 	mov	a,r5
      0000F7 F0               [24]  798 	movx	@dptr,a
      0000F8 75 82 00         [24]  799 	mov	dpl, #0x00
      0000FB C0 07            [24]  800 	push	ar7
      0000FD C0 06            [24]  801 	push	ar6
      0000FF 12r00r00         [24]  802 	lcall	_spi_control_write
      000102 D0 06            [24]  803 	pop	ar6
      000104 D0 07            [24]  804 	pop	ar7
                                    805 ;	Eth.c:72: spi_control_write(0, 0x07, (uint8_t)((end_address >> 8) & 0xFF)); // High byte
      000106 8F 06            [24]  806 	mov	ar6,r7
      000108 90r00r00         [24]  807 	mov	dptr,#_spi_control_write_PARM_2
      00010B 74 07            [12]  808 	mov	a,#0x07
      00010D F0               [24]  809 	movx	@dptr,a
      00010E 90r00r00         [24]  810 	mov	dptr,#_spi_control_write_PARM_3
      000111 EE               [12]  811 	mov	a,r6
      000112 F0               [24]  812 	movx	@dptr,a
      000113 75 82 00         [24]  813 	mov	dpl, #0x00
                                    814 ;	Eth.c:73: }
      000116 02r00r00         [24]  815 	ljmp	_spi_control_write
                                    816 ;------------------------------------------------------------
                                    817 ;Allocation info for local variables in function 'wait_for_transmission_complete'
                                    818 ;------------------------------------------------------------
                                    819 ;timeout_ms                Allocated with name '_wait_for_transmission_complete_timeout_ms_10000_130'
                                    820 ;elapsed                   Allocated with name '_wait_for_transmission_complete_elapsed_10000_131'
                                    821 ;econ1                     Allocated with name '_wait_for_transmission_complete_econ1_20000_132'
                                    822 ;------------------------------------------------------------
                                    823 ;	Eth.c:75: bool wait_for_transmission_complete(uint16_t timeout_ms)
                                    824 ;	-----------------------------------------
                                    825 ;	 function wait_for_transmission_complete
                                    826 ;	-----------------------------------------
      000119                        827 _wait_for_transmission_complete:
      000119 AF 83            [24]  828 	mov	r7,dph
      00011B E5 82            [12]  829 	mov	a,dpl
      00011D 90r00r0A         [24]  830 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_130
      000120 F0               [24]  831 	movx	@dptr,a
      000121 EF               [12]  832 	mov	a,r7
      000122 A3               [24]  833 	inc	dptr
      000123 F0               [24]  834 	movx	@dptr,a
                                    835 ;	Eth.c:79: while (elapsed < timeout_ms) {
      000124 90r00r0A         [24]  836 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_130
      000127 E0               [24]  837 	movx	a,@dptr
      000128 FE               [12]  838 	mov	r6,a
      000129 A3               [24]  839 	inc	dptr
      00012A E0               [24]  840 	movx	a,@dptr
      00012B FF               [12]  841 	mov	r7,a
      00012C 7C 00            [12]  842 	mov	r4,#0x00
      00012E 7D 00            [12]  843 	mov	r5,#0x00
      000130                        844 00103$:
      000130 C3               [12]  845 	clr	c
      000131 EC               [12]  846 	mov	a,r4
      000132 9E               [12]  847 	subb	a,r6
      000133 ED               [12]  848 	mov	a,r5
      000134 9F               [12]  849 	subb	a,r7
      000135 50 41            [24]  850 	jnc	00105$
                                    851 ;	Eth.c:80: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      000137 90r00r00         [24]  852 	mov	dptr,#_mac_spi_read_PARM_2
      00013A E4               [12]  853 	clr	a
      00013B F0               [24]  854 	movx	@dptr,a
      00013C 75 82 1F         [24]  855 	mov	dpl, #0x1f
      00013F C0 07            [24]  856 	push	ar7
      000141 C0 06            [24]  857 	push	ar6
      000143 C0 05            [24]  858 	push	ar5
      000145 C0 04            [24]  859 	push	ar4
      000147 12r00r00         [24]  860 	lcall	_mac_spi_read
      00014A E5 82            [12]  861 	mov	a, dpl
      00014C D0 04            [24]  862 	pop	ar4
      00014E D0 05            [24]  863 	pop	ar5
      000150 D0 06            [24]  864 	pop	ar6
      000152 D0 07            [24]  865 	pop	ar7
                                    866 ;	Eth.c:81: if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
      000154 20 E3 04         [24]  867 	jb	acc.3,00102$
                                    868 ;	Eth.c:82: return true;  // Transmission completed
      000157 75 82 01         [24]  869 	mov	dpl, #0x01
      00015A 22               [24]  870 	ret
      00015B                        871 00102$:
                                    872 ;	Eth.c:85: delay_ms(1);  // Wait 1 ms
      00015B 90 00 01         [24]  873 	mov	dptr,#0x0001
      00015E C0 07            [24]  874 	push	ar7
      000160 C0 06            [24]  875 	push	ar6
      000162 C0 05            [24]  876 	push	ar5
      000164 C0 04            [24]  877 	push	ar4
      000166 12r00r00         [24]  878 	lcall	_delay_ms
      000169 D0 04            [24]  879 	pop	ar4
      00016B D0 05            [24]  880 	pop	ar5
      00016D D0 06            [24]  881 	pop	ar6
      00016F D0 07            [24]  882 	pop	ar7
                                    883 ;	Eth.c:86: elapsed++;
      000171 0C               [12]  884 	inc	r4
      000172 BC 00 BB         [24]  885 	cjne	r4,#0x00,00103$
      000175 0D               [12]  886 	inc	r5
      000176 80 B8            [24]  887 	sjmp	00103$
      000178                        888 00105$:
                                    889 ;	Eth.c:89: return false;  // Timed out
      000178 75 82 00         [24]  890 	mov	dpl, #0x00
                                    891 ;	Eth.c:90: }
      00017B 22               [24]  892 	ret
                                    893 ;------------------------------------------------------------
                                    894 ;Allocation info for local variables in function 'enc28j60_transmission_successful'
                                    895 ;------------------------------------------------------------
                                    896 ;estat                     Allocated with name '_enc28j60_transmission_successful_estat_10000_134'
                                    897 ;------------------------------------------------------------
                                    898 ;	Eth.c:92: bool enc28j60_transmission_successful()
                                    899 ;	-----------------------------------------
                                    900 ;	 function enc28j60_transmission_successful
                                    901 ;	-----------------------------------------
      00017C                        902 _enc28j60_transmission_successful:
                                    903 ;	Eth.c:94: uint8_t estat = mac_spi_read(0x1D, 0); // Read ESTAT
      00017C 90r00r00         [24]  904 	mov	dptr,#_mac_spi_read_PARM_2
      00017F E4               [12]  905 	clr	a
      000180 F0               [24]  906 	movx	@dptr,a
      000181 75 82 1D         [24]  907 	mov	dpl, #0x1d
      000184 12r00r00         [24]  908 	lcall	_mac_spi_read
                                    909 ;	Eth.c:95: return !(estat & 0x02); // Check if TXABRT (bit 1) is not set
      000187 E5 82            [12]  910 	mov	a,dpl
      000189 03               [12]  911 	rr	a
      00018A 54 01            [12]  912 	anl	a,#0x01
      00018C B4 01 00         [24]  913 	cjne	a,#0x01,00103$
      00018F                        914 00103$:
      00018F 92*00            [24]  915 	mov  _enc28j60_transmission_successful_sloc0_1_0,c
      000191 E4               [12]  916 	clr	a
      000192 33               [12]  917 	rlc	a
      000193 F5 82            [12]  918 	mov	dpl, a
                                    919 ;	Eth.c:96: }
      000195 22               [24]  920 	ret
                                    921 ;------------------------------------------------------------
                                    922 ;Allocation info for local variables in function 'send_arp_request'
                                    923 ;------------------------------------------------------------
                                    924 ;source_mac                Allocated with name '_send_arp_request_source_mac_10000_136'
                                    925 ;dest_mac                  Allocated with name '_send_arp_request_dest_mac_10000_136'
                                    926 ;source_ip                 Allocated with name '_send_arp_request_source_ip_10000_136'
                                    927 ;target_ip                 Allocated with name '_send_arp_request_target_ip_10000_136'
                                    928 ;arp_packet                Allocated with name '_send_arp_request_arp_packet_10000_136'
                                    929 ;i                         Allocated with name '_send_arp_request_i_20000_137'
                                    930 ;i                         Allocated with name '_send_arp_request_i_20000_139'
                                    931 ;i                         Allocated with name '_send_arp_request_i_20000_141'
                                    932 ;i                         Allocated with name '_send_arp_request_i_20000_143'
                                    933 ;i                         Allocated with name '_send_arp_request_i_20000_145'
                                    934 ;frame_size                Allocated with name '_send_arp_request_frame_size_10001_147'
                                    935 ;start_address             Allocated with name '_send_arp_request_start_address_10001_147'
                                    936 ;end_address               Allocated with name '_send_arp_request_end_address_10002_149'
                                    937 ;------------------------------------------------------------
                                    938 ;	Eth.c:98: void send_arp_request(void)
                                    939 ;	-----------------------------------------
                                    940 ;	 function send_arp_request
                                    941 ;	-----------------------------------------
      000196                        942 _send_arp_request:
                                    943 ;	Eth.c:102: uint8_t source_mac[6] = {0x02, 0x11, 0x22, 0x33, 0x44, 0x55};  // ENC28J60 MAC address
      000196 90r00r0C         [24]  944 	mov	dptr,#_send_arp_request_source_mac_10000_136
      000199 74 02            [12]  945 	mov	a,#0x02
      00019B F0               [24]  946 	movx	@dptr,a
      00019C 90r00r0D         [24]  947 	mov	dptr,#(_send_arp_request_source_mac_10000_136 + 0x0001)
      00019F 74 11            [12]  948 	mov	a,#0x11
      0001A1 F0               [24]  949 	movx	@dptr,a
      0001A2 90r00r0E         [24]  950 	mov	dptr,#(_send_arp_request_source_mac_10000_136 + 0x0002)
      0001A5 23               [12]  951 	rl	a
      0001A6 F0               [24]  952 	movx	@dptr,a
      0001A7 90r00r0F         [24]  953 	mov	dptr,#(_send_arp_request_source_mac_10000_136 + 0x0003)
      0001AA 74 33            [12]  954 	mov	a,#0x33
      0001AC F0               [24]  955 	movx	@dptr,a
      0001AD 90r00r10         [24]  956 	mov	dptr,#(_send_arp_request_source_mac_10000_136 + 0x0004)
      0001B0 74 44            [12]  957 	mov	a,#0x44
      0001B2 F0               [24]  958 	movx	@dptr,a
      0001B3 90r00r11         [24]  959 	mov	dptr,#(_send_arp_request_source_mac_10000_136 + 0x0005)
      0001B6 74 55            [12]  960 	mov	a,#0x55
      0001B8 F0               [24]  961 	movx	@dptr,a
                                    962 ;	Eth.c:103: uint8_t dest_mac[6] = {0xF8, 0x75, 0xA4, 0x8C, 0x41, 0x31};  // Target PC MAC address
      0001B9 90r00r12         [24]  963 	mov	dptr,#_send_arp_request_dest_mac_10000_136
      0001BC 74 F8            [12]  964 	mov	a,#0xf8
      0001BE F0               [24]  965 	movx	@dptr,a
      0001BF 90r00r13         [24]  966 	mov	dptr,#(_send_arp_request_dest_mac_10000_136 + 0x0001)
      0001C2 74 75            [12]  967 	mov	a,#0x75
      0001C4 F0               [24]  968 	movx	@dptr,a
      0001C5 90r00r14         [24]  969 	mov	dptr,#(_send_arp_request_dest_mac_10000_136 + 0x0002)
      0001C8 74 A4            [12]  970 	mov	a,#0xa4
      0001CA F0               [24]  971 	movx	@dptr,a
      0001CB 90r00r15         [24]  972 	mov	dptr,#(_send_arp_request_dest_mac_10000_136 + 0x0003)
      0001CE 74 8C            [12]  973 	mov	a,#0x8c
      0001D0 F0               [24]  974 	movx	@dptr,a
      0001D1 90r00r16         [24]  975 	mov	dptr,#(_send_arp_request_dest_mac_10000_136 + 0x0004)
      0001D4 74 41            [12]  976 	mov	a,#0x41
      0001D6 F0               [24]  977 	movx	@dptr,a
      0001D7 90r00r17         [24]  978 	mov	dptr,#(_send_arp_request_dest_mac_10000_136 + 0x0005)
      0001DA 74 31            [12]  979 	mov	a,#0x31
      0001DC F0               [24]  980 	movx	@dptr,a
                                    981 ;	Eth.c:104: uint8_t source_ip[4] = {192, 168, 1, 100};  // ENC28J60 IP address (Example)
      0001DD 90r00r18         [24]  982 	mov	dptr,#_send_arp_request_source_ip_10000_136
      0001E0 74 C0            [12]  983 	mov	a,#0xc0
      0001E2 F0               [24]  984 	movx	@dptr,a
      0001E3 90r00r19         [24]  985 	mov	dptr,#(_send_arp_request_source_ip_10000_136 + 0x0001)
      0001E6 74 A8            [12]  986 	mov	a,#0xa8
      0001E8 F0               [24]  987 	movx	@dptr,a
      0001E9 90r00r1A         [24]  988 	mov	dptr,#(_send_arp_request_source_ip_10000_136 + 0x0002)
      0001EC 74 01            [12]  989 	mov	a,#0x01
      0001EE F0               [24]  990 	movx	@dptr,a
      0001EF 90r00r1B         [24]  991 	mov	dptr,#(_send_arp_request_source_ip_10000_136 + 0x0003)
      0001F2 74 64            [12]  992 	mov	a,#0x64
      0001F4 F0               [24]  993 	movx	@dptr,a
                                    994 ;	Eth.c:105: uint8_t target_ip[4] = {192, 168, 1, 1};  // Target PC IP address
      0001F5 90r00r1C         [24]  995 	mov	dptr,#_send_arp_request_target_ip_10000_136
      0001F8 74 C0            [12]  996 	mov	a,#0xc0
      0001FA F0               [24]  997 	movx	@dptr,a
      0001FB 90r00r1D         [24]  998 	mov	dptr,#(_send_arp_request_target_ip_10000_136 + 0x0001)
      0001FE 74 A8            [12]  999 	mov	a,#0xa8
      000200 F0               [24] 1000 	movx	@dptr,a
      000201 90r00r1E         [24] 1001 	mov	dptr,#(_send_arp_request_target_ip_10000_136 + 0x0002)
      000204 74 01            [12] 1002 	mov	a,#0x01
      000206 F0               [24] 1003 	movx	@dptr,a
      000207 90r00r1F         [24] 1004 	mov	dptr,#(_send_arp_request_target_ip_10000_136 + 0x0003)
      00020A F0               [24] 1005 	movx	@dptr,a
                                   1006 ;	Eth.c:109: arp_packet[0] = 0x0E;
      00020B 90r00r20         [24] 1007 	mov	dptr,#_send_arp_request_arp_packet_10000_136
      00020E 74 0E            [12] 1008 	mov	a,#0x0e
      000210 F0               [24] 1009 	movx	@dptr,a
                                   1010 ;	Eth.c:117: for (int i = 0; i < 6; i++)
      000211 7E 00            [12] 1011 	mov	r6,#0x00
      000213 7F 00            [12] 1012 	mov	r7,#0x00
      000215                       1013 00115$:
      000215 C3               [12] 1014 	clr	c
      000216 EE               [12] 1015 	mov	a,r6
      000217 94 06            [12] 1016 	subb	a,#0x06
      000219 EF               [12] 1017 	mov	a,r7
      00021A 64 80            [12] 1018 	xrl	a,#0x80
      00021C 94 80            [12] 1019 	subb	a,#0x80
      00021E 50 48            [24] 1020 	jnc	00101$
                                   1021 ;	Eth.c:119: arp_packet[i + 1] = dest_mac[i];  // Destination MAC address
      000220 8E 05            [24] 1022 	mov	ar5,r6
      000222 ED               [12] 1023 	mov	a,r5
      000223 04               [12] 1024 	inc	a
      000224 FC               [12] 1025 	mov	r4,a
      000225 33               [12] 1026 	rlc	a
      000226 95 E0            [12] 1027 	subb	a,acc
      000228 FB               [12] 1028 	mov	r3,a
      000229 EC               [12] 1029 	mov	a,r4
      00022A 24r20            [12] 1030 	add	a, #_send_arp_request_arp_packet_10000_136
      00022C FC               [12] 1031 	mov	r4,a
      00022D EB               [12] 1032 	mov	a,r3
      00022E 34s00            [12] 1033 	addc	a, #(_send_arp_request_arp_packet_10000_136 >> 8)
      000230 FB               [12] 1034 	mov	r3,a
      000231 EE               [12] 1035 	mov	a,r6
      000232 24r12            [12] 1036 	add	a, #_send_arp_request_dest_mac_10000_136
      000234 F5 82            [12] 1037 	mov	dpl,a
      000236 EF               [12] 1038 	mov	a,r7
      000237 34s00            [12] 1039 	addc	a, #(_send_arp_request_dest_mac_10000_136 >> 8)
      000239 F5 83            [12] 1040 	mov	dph,a
      00023B E0               [24] 1041 	movx	a,@dptr
      00023C 8C 82            [24] 1042 	mov	dpl,r4
      00023E 8B 83            [24] 1043 	mov	dph,r3
      000240 F0               [24] 1044 	movx	@dptr,a
                                   1045 ;	Eth.c:120: arp_packet[i + 7] = source_mac[i];  // Source MAC address
      000241 74 07            [12] 1046 	mov	a,#0x07
      000243 2D               [12] 1047 	add	a, r5
      000244 FD               [12] 1048 	mov	r5,a
      000245 33               [12] 1049 	rlc	a
      000246 95 E0            [12] 1050 	subb	a,acc
      000248 FC               [12] 1051 	mov	r4,a
      000249 ED               [12] 1052 	mov	a,r5
      00024A 24r20            [12] 1053 	add	a, #_send_arp_request_arp_packet_10000_136
      00024C FD               [12] 1054 	mov	r5,a
      00024D EC               [12] 1055 	mov	a,r4
      00024E 34s00            [12] 1056 	addc	a, #(_send_arp_request_arp_packet_10000_136 >> 8)
      000250 FC               [12] 1057 	mov	r4,a
      000251 EE               [12] 1058 	mov	a,r6
      000252 24r0C            [12] 1059 	add	a, #_send_arp_request_source_mac_10000_136
      000254 F5 82            [12] 1060 	mov	dpl,a
      000256 EF               [12] 1061 	mov	a,r7
      000257 34s00            [12] 1062 	addc	a, #(_send_arp_request_source_mac_10000_136 >> 8)
      000259 F5 83            [12] 1063 	mov	dph,a
      00025B E0               [24] 1064 	movx	a,@dptr
      00025C 8D 82            [24] 1065 	mov	dpl,r5
      00025E 8C 83            [24] 1066 	mov	dph,r4
      000260 F0               [24] 1067 	movx	@dptr,a
                                   1068 ;	Eth.c:117: for (int i = 0; i < 6; i++)
      000261 0E               [12] 1069 	inc	r6
      000262 BE 00 B0         [24] 1070 	cjne	r6,#0x00,00115$
      000265 0F               [12] 1071 	inc	r7
      000266 80 AD            [24] 1072 	sjmp	00115$
      000268                       1073 00101$:
                                   1074 ;	Eth.c:124: arp_packet[13] = (ETH_TYPE_ARP >> 8) & 0xFF;
      000268 90r00r2D         [24] 1075 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x000d)
      00026B 74 08            [12] 1076 	mov	a,#0x08
      00026D F0               [24] 1077 	movx	@dptr,a
                                   1078 ;	Eth.c:125: arp_packet[14] = ETH_TYPE_ARP & 0xFF;
      00026E 90r00r2E         [24] 1079 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x000e)
      000271 74 06            [12] 1080 	mov	a,#0x06
      000273 F0               [24] 1081 	movx	@dptr,a
                                   1082 ;	Eth.c:129: arp_packet[15] = 0x00;
      000274 90r00r2F         [24] 1083 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x000f)
      000277 E4               [12] 1084 	clr	a
      000278 F0               [24] 1085 	movx	@dptr,a
                                   1086 ;	Eth.c:130: arp_packet[16] = 0x01;
      000279 90r00r30         [24] 1087 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x0010)
      00027C 04               [12] 1088 	inc	a
      00027D F0               [24] 1089 	movx	@dptr,a
                                   1090 ;	Eth.c:133: arp_packet[17] = 0x08;
      00027E 90r00r31         [24] 1091 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x0011)
      000281 74 08            [12] 1092 	mov	a,#0x08
      000283 F0               [24] 1093 	movx	@dptr,a
                                   1094 ;	Eth.c:134: arp_packet[18] = 0x00;
      000284 90r00r32         [24] 1095 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x0012)
      000287 E4               [12] 1096 	clr	a
      000288 F0               [24] 1097 	movx	@dptr,a
                                   1098 ;	Eth.c:137: arp_packet[19] = 0x06;
      000289 90r00r33         [24] 1099 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x0013)
      00028C 74 06            [12] 1100 	mov	a,#0x06
      00028E F0               [24] 1101 	movx	@dptr,a
                                   1102 ;	Eth.c:140: arp_packet[20] = 0x04;
      00028F 90r00r34         [24] 1103 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x0014)
      000292 74 04            [12] 1104 	mov	a,#0x04
      000294 F0               [24] 1105 	movx	@dptr,a
                                   1106 ;	Eth.c:143: arp_packet[21] = 0x00;
      000295 90r00r35         [24] 1107 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x0015)
      000298 E4               [12] 1108 	clr	a
      000299 F0               [24] 1109 	movx	@dptr,a
                                   1110 ;	Eth.c:144: arp_packet[22] = 0x01;
      00029A 90r00r36         [24] 1111 	mov	dptr,#(_send_arp_request_arp_packet_10000_136 + 0x0016)
      00029D 04               [12] 1112 	inc	a
      00029E F0               [24] 1113 	movx	@dptr,a
                                   1114 ;	Eth.c:147: for (int i = 0; i < 6; i++) {
      00029F 7E 00            [12] 1115 	mov	r6,#0x00
      0002A1 7F 00            [12] 1116 	mov	r7,#0x00
      0002A3                       1117 00118$:
      0002A3 C3               [12] 1118 	clr	c
      0002A4 EE               [12] 1119 	mov	a,r6
      0002A5 94 06            [12] 1120 	subb	a,#0x06
      0002A7 EF               [12] 1121 	mov	a,r7
      0002A8 64 80            [12] 1122 	xrl	a,#0x80
      0002AA 94 80            [12] 1123 	subb	a,#0x80
      0002AC 50 29            [24] 1124 	jnc	00102$
                                   1125 ;	Eth.c:148: arp_packet[23 + i] = source_mac[i];
      0002AE 8E 05            [24] 1126 	mov	ar5,r6
      0002B0 74 17            [12] 1127 	mov	a,#0x17
      0002B2 2D               [12] 1128 	add	a, r5
      0002B3 FD               [12] 1129 	mov	r5,a
      0002B4 33               [12] 1130 	rlc	a
      0002B5 95 E0            [12] 1131 	subb	a,acc
      0002B7 FC               [12] 1132 	mov	r4,a
      0002B8 ED               [12] 1133 	mov	a,r5
      0002B9 24r20            [12] 1134 	add	a, #_send_arp_request_arp_packet_10000_136
      0002BB FD               [12] 1135 	mov	r5,a
      0002BC EC               [12] 1136 	mov	a,r4
      0002BD 34s00            [12] 1137 	addc	a, #(_send_arp_request_arp_packet_10000_136 >> 8)
      0002BF FC               [12] 1138 	mov	r4,a
      0002C0 EE               [12] 1139 	mov	a,r6
      0002C1 24r0C            [12] 1140 	add	a, #_send_arp_request_source_mac_10000_136
      0002C3 F5 82            [12] 1141 	mov	dpl,a
      0002C5 EF               [12] 1142 	mov	a,r7
      0002C6 34s00            [12] 1143 	addc	a, #(_send_arp_request_source_mac_10000_136 >> 8)
      0002C8 F5 83            [12] 1144 	mov	dph,a
      0002CA E0               [24] 1145 	movx	a,@dptr
      0002CB 8D 82            [24] 1146 	mov	dpl,r5
      0002CD 8C 83            [24] 1147 	mov	dph,r4
      0002CF F0               [24] 1148 	movx	@dptr,a
                                   1149 ;	Eth.c:147: for (int i = 0; i < 6; i++) {
      0002D0 0E               [12] 1150 	inc	r6
      0002D1 BE 00 CF         [24] 1151 	cjne	r6,#0x00,00118$
      0002D4 0F               [12] 1152 	inc	r7
      0002D5 80 CC            [24] 1153 	sjmp	00118$
      0002D7                       1154 00102$:
                                   1155 ;	Eth.c:152: for (int i = 0; i < 4; i++) {
      0002D7 7E 00            [12] 1156 	mov	r6,#0x00
      0002D9 7F 00            [12] 1157 	mov	r7,#0x00
      0002DB                       1158 00121$:
      0002DB C3               [12] 1159 	clr	c
      0002DC EE               [12] 1160 	mov	a,r6
      0002DD 94 04            [12] 1161 	subb	a,#0x04
      0002DF EF               [12] 1162 	mov	a,r7
      0002E0 64 80            [12] 1163 	xrl	a,#0x80
      0002E2 94 80            [12] 1164 	subb	a,#0x80
      0002E4 50 29            [24] 1165 	jnc	00103$
                                   1166 ;	Eth.c:153: arp_packet[29 + i] = source_ip[i];
      0002E6 8E 05            [24] 1167 	mov	ar5,r6
      0002E8 74 1D            [12] 1168 	mov	a,#0x1d
      0002EA 2D               [12] 1169 	add	a, r5
      0002EB FD               [12] 1170 	mov	r5,a
      0002EC 33               [12] 1171 	rlc	a
      0002ED 95 E0            [12] 1172 	subb	a,acc
      0002EF FC               [12] 1173 	mov	r4,a
      0002F0 ED               [12] 1174 	mov	a,r5
      0002F1 24r20            [12] 1175 	add	a, #_send_arp_request_arp_packet_10000_136
      0002F3 FD               [12] 1176 	mov	r5,a
      0002F4 EC               [12] 1177 	mov	a,r4
      0002F5 34s00            [12] 1178 	addc	a, #(_send_arp_request_arp_packet_10000_136 >> 8)
      0002F7 FC               [12] 1179 	mov	r4,a
      0002F8 EE               [12] 1180 	mov	a,r6
      0002F9 24r18            [12] 1181 	add	a, #_send_arp_request_source_ip_10000_136
      0002FB F5 82            [12] 1182 	mov	dpl,a
      0002FD EF               [12] 1183 	mov	a,r7
      0002FE 34s00            [12] 1184 	addc	a, #(_send_arp_request_source_ip_10000_136 >> 8)
      000300 F5 83            [12] 1185 	mov	dph,a
      000302 E0               [24] 1186 	movx	a,@dptr
      000303 8D 82            [24] 1187 	mov	dpl,r5
      000305 8C 83            [24] 1188 	mov	dph,r4
      000307 F0               [24] 1189 	movx	@dptr,a
                                   1190 ;	Eth.c:152: for (int i = 0; i < 4; i++) {
      000308 0E               [12] 1191 	inc	r6
      000309 BE 00 CF         [24] 1192 	cjne	r6,#0x00,00121$
      00030C 0F               [12] 1193 	inc	r7
      00030D 80 CC            [24] 1194 	sjmp	00121$
      00030F                       1195 00103$:
                                   1196 ;	Eth.c:157: for (int i = 0; i < 6; i++) {
      00030F 7F 00            [12] 1197 	mov	r7,#0x00
      000311                       1198 00124$:
      000311 BF 06 00         [24] 1199 	cjne	r7,#0x06,00215$
      000314                       1200 00215$:
      000314 50 19            [24] 1201 	jnc	00104$
                                   1202 ;	Eth.c:158: arp_packet[33 + i] = 0x00;
      000316 8F 06            [24] 1203 	mov	ar6,r7
      000318 74 21            [12] 1204 	mov	a,#0x21
      00031A 2E               [12] 1205 	add	a, r6
      00031B FE               [12] 1206 	mov	r6,a
      00031C 33               [12] 1207 	rlc	a
      00031D 95 E0            [12] 1208 	subb	a,acc
      00031F FD               [12] 1209 	mov	r5,a
      000320 EE               [12] 1210 	mov	a,r6
      000321 24r20            [12] 1211 	add	a, #_send_arp_request_arp_packet_10000_136
      000323 F5 82            [12] 1212 	mov	dpl,a
      000325 ED               [12] 1213 	mov	a,r5
      000326 34s00            [12] 1214 	addc	a, #(_send_arp_request_arp_packet_10000_136 >> 8)
      000328 F5 83            [12] 1215 	mov	dph,a
      00032A E4               [12] 1216 	clr	a
      00032B F0               [24] 1217 	movx	@dptr,a
                                   1218 ;	Eth.c:157: for (int i = 0; i < 6; i++) {
      00032C 0F               [12] 1219 	inc	r7
      00032D 80 E2            [24] 1220 	sjmp	00124$
      00032F                       1221 00104$:
                                   1222 ;	Eth.c:162: for (int i = 0; i < 4; i++) {
      00032F 7E 00            [12] 1223 	mov	r6,#0x00
      000331 7F 00            [12] 1224 	mov	r7,#0x00
      000333                       1225 00127$:
      000333 C3               [12] 1226 	clr	c
      000334 EE               [12] 1227 	mov	a,r6
      000335 94 04            [12] 1228 	subb	a,#0x04
      000337 EF               [12] 1229 	mov	a,r7
      000338 64 80            [12] 1230 	xrl	a,#0x80
      00033A 94 80            [12] 1231 	subb	a,#0x80
      00033C 50 29            [24] 1232 	jnc	00105$
                                   1233 ;	Eth.c:163: arp_packet[39 + i] = target_ip[i];
      00033E 8E 05            [24] 1234 	mov	ar5,r6
      000340 74 27            [12] 1235 	mov	a,#0x27
      000342 2D               [12] 1236 	add	a, r5
      000343 FD               [12] 1237 	mov	r5,a
      000344 33               [12] 1238 	rlc	a
      000345 95 E0            [12] 1239 	subb	a,acc
      000347 FC               [12] 1240 	mov	r4,a
      000348 ED               [12] 1241 	mov	a,r5
      000349 24r20            [12] 1242 	add	a, #_send_arp_request_arp_packet_10000_136
      00034B FD               [12] 1243 	mov	r5,a
      00034C EC               [12] 1244 	mov	a,r4
      00034D 34s00            [12] 1245 	addc	a, #(_send_arp_request_arp_packet_10000_136 >> 8)
      00034F FC               [12] 1246 	mov	r4,a
      000350 EE               [12] 1247 	mov	a,r6
      000351 24r1C            [12] 1248 	add	a, #_send_arp_request_target_ip_10000_136
      000353 F5 82            [12] 1249 	mov	dpl,a
      000355 EF               [12] 1250 	mov	a,r7
      000356 34s00            [12] 1251 	addc	a, #(_send_arp_request_target_ip_10000_136 >> 8)
      000358 F5 83            [12] 1252 	mov	dph,a
      00035A E0               [24] 1253 	movx	a,@dptr
      00035B 8D 82            [24] 1254 	mov	dpl,r5
      00035D 8C 83            [24] 1255 	mov	dph,r4
      00035F F0               [24] 1256 	movx	@dptr,a
                                   1257 ;	Eth.c:162: for (int i = 0; i < 4; i++) {
      000360 0E               [12] 1258 	inc	r6
      000361 BE 00 CF         [24] 1259 	cjne	r6,#0x00,00127$
      000364 0F               [12] 1260 	inc	r7
      000365 80 CC            [24] 1261 	sjmp	00127$
      000367                       1262 00105$:
                                   1263 ;	Eth.c:176: spi_buffer_write(frame_size, start_address, arp_packet);
      000367 90r00r00         [24] 1264 	mov	dptr,#_spi_buffer_write_PARM_2
      00036A E4               [12] 1265 	clr	a
      00036B F0               [24] 1266 	movx	@dptr,a
      00036C 74 0C            [12] 1267 	mov	a,#0x0c
      00036E A3               [24] 1268 	inc	dptr
      00036F F0               [24] 1269 	movx	@dptr,a
      000370 90r00r00         [24] 1270 	mov	dptr,#_spi_buffer_write_PARM_3
      000373 74r20            [12] 1271 	mov	a,#_send_arp_request_arp_packet_10000_136
      000375 F0               [24] 1272 	movx	@dptr,a
      000376 74s00            [12] 1273 	mov	a,#(_send_arp_request_arp_packet_10000_136 >> 8)
      000378 A3               [24] 1274 	inc	dptr
      000379 F0               [24] 1275 	movx	@dptr,a
      00037A E4               [12] 1276 	clr	a
      00037B A3               [24] 1277 	inc	dptr
      00037C F0               [24] 1278 	movx	@dptr,a
      00037D 90 00 2C         [24] 1279 	mov	dptr,#0x002c
      000380 12r00r00         [24] 1280 	lcall	_spi_buffer_write
                                   1281 ;	Eth.c:179: enc28j60_set_transmit_pointers(start_address, end_address);
      000383 90r00r06         [24] 1282 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      000386 74 2B            [12] 1283 	mov	a,#0x2b
      000388 F0               [24] 1284 	movx	@dptr,a
      000389 74 0C            [12] 1285 	mov	a,#0x0c
      00038B A3               [24] 1286 	inc	dptr
      00038C F0               [24] 1287 	movx	@dptr,a
      00038D 90 0C 00         [24] 1288 	mov	dptr,#0x0c00
      000390 12r00rA2         [24] 1289 	lcall	_enc28j60_set_transmit_pointers
                                   1290 ;	Eth.c:183: enc28j60_start_transmission();
      000393 12r00r81         [24] 1291 	lcall	_enc28j60_start_transmission
                                   1292 ;	Eth.c:186: if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
      000396 90 01 F4         [24] 1293 	mov	dptr,#0x01f4
      000399 12r01r19         [24] 1294 	lcall	_wait_for_transmission_complete
      00039C E5 82            [12] 1295 	mov	a, dpl
      00039E 60 33            [24] 1296 	jz	00112$
                                   1297 ;	Eth.c:188: if (enc28j60_transmission_successful()) {
      0003A0 12r01r7C         [24] 1298 	lcall	_enc28j60_transmission_successful
      0003A3 E5 82            [12] 1299 	mov	a, dpl
      0003A5 60 16            [24] 1300 	jz	00109$
                                   1301 ;	Eth.c:189: printf("ARP request sent successfully.\n\r");
      0003A7 74r3B            [12] 1302 	mov	a,#___str_1
      0003A9 C0 E0            [24] 1303 	push	acc
      0003AB 74s00            [12] 1304 	mov	a,#(___str_1 >> 8)
      0003AD C0 E0            [24] 1305 	push	acc
      0003AF 74 80            [12] 1306 	mov	a,#0x80
      0003B1 C0 E0            [24] 1307 	push	acc
      0003B3 12r00r00         [24] 1308 	lcall	_printf
      0003B6 15 81            [12] 1309 	dec	sp
      0003B8 15 81            [12] 1310 	dec	sp
      0003BA 15 81            [12] 1311 	dec	sp
      0003BC 22               [24] 1312 	ret
      0003BD                       1313 00109$:
                                   1314 ;	Eth.c:191: printf("ARP transmission failed. Check error flags.\n\r");
      0003BD 74r5C            [12] 1315 	mov	a,#___str_2
      0003BF C0 E0            [24] 1316 	push	acc
      0003C1 74s00            [12] 1317 	mov	a,#(___str_2 >> 8)
      0003C3 C0 E0            [24] 1318 	push	acc
      0003C5 74 80            [12] 1319 	mov	a,#0x80
      0003C7 C0 E0            [24] 1320 	push	acc
      0003C9 12r00r00         [24] 1321 	lcall	_printf
      0003CC 15 81            [12] 1322 	dec	sp
      0003CE 15 81            [12] 1323 	dec	sp
      0003D0 15 81            [12] 1324 	dec	sp
      0003D2 22               [24] 1325 	ret
      0003D3                       1326 00112$:
                                   1327 ;	Eth.c:194: printf("Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
      0003D3 74r8A            [12] 1328 	mov	a,#___str_3
      0003D5 C0 E0            [24] 1329 	push	acc
      0003D7 74s00            [12] 1330 	mov	a,#(___str_3 >> 8)
      0003D9 C0 E0            [24] 1331 	push	acc
      0003DB 74 80            [12] 1332 	mov	a,#0x80
      0003DD C0 E0            [24] 1333 	push	acc
      0003DF 12r00r00         [24] 1334 	lcall	_printf
      0003E2 15 81            [12] 1335 	dec	sp
      0003E4 15 81            [12] 1336 	dec	sp
      0003E6 15 81            [12] 1337 	dec	sp
                                   1338 ;	Eth.c:196: }
      0003E8 22               [24] 1339 	ret
                                   1340 ;------------------------------------------------------------
                                   1341 ;Allocation info for local variables in function 'external_interrupt0_isr'
                                   1342 ;------------------------------------------------------------
                                   1343 ;i                         Allocated with name '_external_interrupt0_isr_i_10000_155'
                                   1344 ;------------------------------------------------------------
                                   1345 ;	Eth.c:198: void external_interrupt0_isr(void) __interrupt (0)
                                   1346 ;	-----------------------------------------
                                   1347 ;	 function external_interrupt0_isr
                                   1348 ;	-----------------------------------------
      0003E9                       1349 _external_interrupt0_isr:
      0003E9 C0*00            [24] 1350 	push	bits
      0003EB C0 E0            [24] 1351 	push	acc
      0003ED C0 F0            [24] 1352 	push	b
      0003EF C0 82            [24] 1353 	push	dpl
      0003F1 C0 83            [24] 1354 	push	dph
      0003F3 C0 07            [24] 1355 	push	(0+7)
      0003F5 C0 06            [24] 1356 	push	(0+6)
      0003F7 C0 05            [24] 1357 	push	(0+5)
      0003F9 C0 04            [24] 1358 	push	(0+4)
      0003FB C0 03            [24] 1359 	push	(0+3)
      0003FD C0 02            [24] 1360 	push	(0+2)
      0003FF C0 01            [24] 1361 	push	(0+1)
      000401 C0 00            [24] 1362 	push	(0+0)
      000403 C0 D0            [24] 1363 	push	psw
      000405 75 D0 00         [24] 1364 	mov	psw,#0x00
                                   1365 ;	Eth.c:202: printf("Interrrrrrrruuuuuuuuuppppppppttttttt\n\r");
      000408 74rCD            [12] 1366 	mov	a,#___str_4
      00040A C0 E0            [24] 1367 	push	acc
      00040C 74s00            [12] 1368 	mov	a,#(___str_4 >> 8)
      00040E C0 E0            [24] 1369 	push	acc
      000410 74 80            [12] 1370 	mov	a,#0x80
      000412 C0 E0            [24] 1371 	push	acc
      000414 12r00r00         [24] 1372 	lcall	_printf
      000417 15 81            [12] 1373 	dec	sp
      000419 15 81            [12] 1374 	dec	sp
      00041B 15 81            [12] 1375 	dec	sp
                                   1376 ;	Eth.c:217: i++;
      00041D 90r00r4B         [24] 1377 	mov	dptr,#_external_interrupt0_isr_i_10000_155
      000420 E0               [24] 1378 	movx	a,@dptr
      000421 24 01            [12] 1379 	add	a, #0x01
      000423 F0               [24] 1380 	movx	@dptr,a
      000424 A3               [24] 1381 	inc	dptr
      000425 E0               [24] 1382 	movx	a,@dptr
      000426 34 00            [12] 1383 	addc	a, #0x00
      000428 F0               [24] 1384 	movx	@dptr,a
                                   1385 ;	Eth.c:218: }
      000429 D0 D0            [24] 1386 	pop	psw
      00042B D0 00            [24] 1387 	pop	(0+0)
      00042D D0 01            [24] 1388 	pop	(0+1)
      00042F D0 02            [24] 1389 	pop	(0+2)
      000431 D0 03            [24] 1390 	pop	(0+3)
      000433 D0 04            [24] 1391 	pop	(0+4)
      000435 D0 05            [24] 1392 	pop	(0+5)
      000437 D0 06            [24] 1393 	pop	(0+6)
      000439 D0 07            [24] 1394 	pop	(0+7)
      00043B D0 83            [24] 1395 	pop	dph
      00043D D0 82            [24] 1396 	pop	dpl
      00043F D0 F0            [24] 1397 	pop	b
      000441 D0 E0            [24] 1398 	pop	acc
      000443 D0*00            [24] 1399 	pop	bits
      000445 32               [24] 1400 	reti
                                   1401 ;------------------------------------------------------------
                                   1402 ;Allocation info for local variables in function 'enc_buffer_init'
                                   1403 ;------------------------------------------------------------
                                   1404 ;end_address               Allocated with name '_enc_buffer_init_PARM_2'
                                   1405 ;start_address             Allocated with name '_enc_buffer_init_start_address_10000_157'
                                   1406 ;------------------------------------------------------------
                                   1407 ;	Eth.c:221: void enc_buffer_init(uint16_t start_address, uint16_t end_address) {
                                   1408 ;	-----------------------------------------
                                   1409 ;	 function enc_buffer_init
                                   1410 ;	-----------------------------------------
      000446                       1411 _enc_buffer_init:
      000446 AF 83            [24] 1412 	mov	r7,dph
      000448 E5 82            [12] 1413 	mov	a,dpl
      00044A 90r00r4F         [24] 1414 	mov	dptr,#_enc_buffer_init_start_address_10000_157
      00044D F0               [24] 1415 	movx	@dptr,a
      00044E EF               [12] 1416 	mov	a,r7
      00044F A3               [24] 1417 	inc	dptr
      000450 F0               [24] 1418 	movx	@dptr,a
                                   1419 ;	Eth.c:223: if (start_address > 0x1FFF || end_address > 0x1FFF) {
      000451 90r00r4F         [24] 1420 	mov	dptr,#_enc_buffer_init_start_address_10000_157
      000454 E0               [24] 1421 	movx	a,@dptr
      000455 FE               [12] 1422 	mov	r6,a
      000456 A3               [24] 1423 	inc	dptr
      000457 E0               [24] 1424 	movx	a,@dptr
      000458 FF               [12] 1425 	mov	r7,a
      000459 C3               [12] 1426 	clr	c
      00045A 74 FF            [12] 1427 	mov	a,#0xff
      00045C 9E               [12] 1428 	subb	a,r6
      00045D 74 1F            [12] 1429 	mov	a,#0x1f
      00045F 9F               [12] 1430 	subb	a,r7
      000460 40 15            [24] 1431 	jc	00101$
      000462 90r00r4D         [24] 1432 	mov	dptr,#_enc_buffer_init_PARM_2
      000465 E0               [24] 1433 	movx	a,@dptr
      000466 FC               [12] 1434 	mov	r4,a
      000467 A3               [24] 1435 	inc	dptr
      000468 E0               [24] 1436 	movx	a,@dptr
      000469 FD               [12] 1437 	mov	r5,a
      00046A 8C 02            [24] 1438 	mov	ar2,r4
      00046C 8D 03            [24] 1439 	mov	ar3,r5
      00046E C3               [12] 1440 	clr	c
      00046F 74 FF            [12] 1441 	mov	a,#0xff
      000471 9A               [12] 1442 	subb	a,r2
      000472 74 1F            [12] 1443 	mov	a,#0x1f
      000474 9B               [12] 1444 	subb	a,r3
      000475 50 2A            [24] 1445 	jnc	00102$
      000477                       1446 00101$:
                                   1447 ;	Eth.c:224: printf("\nInvalid Buffer Range: Start 0x%04X, End 0x%04X\n",
      000477 90r00r4D         [24] 1448 	mov	dptr,#_enc_buffer_init_PARM_2
      00047A E0               [24] 1449 	movx	a,@dptr
      00047B C0 E0            [24] 1450 	push	acc
      00047D A3               [24] 1451 	inc	dptr
      00047E E0               [24] 1452 	movx	a,@dptr
      00047F C0 E0            [24] 1453 	push	acc
      000481 90r00r4F         [24] 1454 	mov	dptr,#_enc_buffer_init_start_address_10000_157
      000484 E0               [24] 1455 	movx	a,@dptr
      000485 C0 E0            [24] 1456 	push	acc
      000487 A3               [24] 1457 	inc	dptr
      000488 E0               [24] 1458 	movx	a,@dptr
      000489 C0 E0            [24] 1459 	push	acc
      00048B 74rF4            [12] 1460 	mov	a,#___str_5
      00048D C0 E0            [24] 1461 	push	acc
      00048F 74s00            [12] 1462 	mov	a,#(___str_5 >> 8)
      000491 C0 E0            [24] 1463 	push	acc
      000493 74 80            [12] 1464 	mov	a,#0x80
      000495 C0 E0            [24] 1465 	push	acc
      000497 12r00r00         [24] 1466 	lcall	_printf
      00049A E5 81            [12] 1467 	mov	a,sp
      00049C 24 F9            [12] 1468 	add	a,#0xf9
      00049E F5 81            [12] 1469 	mov	sp,a
                                   1470 ;	Eth.c:226: return;
      0004A0 22               [24] 1471 	ret
      0004A1                       1472 00102$:
                                   1473 ;	Eth.c:229: start_address &= ~1;  // Align to even address
      0004A1 53 06 FE         [24] 1474 	anl	ar6,#0xfe
      0004A4 90r00r4F         [24] 1475 	mov	dptr,#_enc_buffer_init_start_address_10000_157
      0004A7 EE               [12] 1476 	mov	a,r6
      0004A8 F0               [24] 1477 	movx	@dptr,a
      0004A9 EF               [12] 1478 	mov	a,r7
      0004AA A3               [24] 1479 	inc	dptr
      0004AB F0               [24] 1480 	movx	@dptr,a
                                   1481 ;	Eth.c:231: spi_control_write(0, 0x00, (uint8_t) (start_address & 0xFF)); // ERDPTL
      0004AC 90r00r4F         [24] 1482 	mov	dptr,#_enc_buffer_init_start_address_10000_157
      0004AF E0               [24] 1483 	movx	a,@dptr
      0004B0 FE               [12] 1484 	mov	r6,a
      0004B1 A3               [24] 1485 	inc	dptr
      0004B2 E0               [24] 1486 	movx	a,@dptr
      0004B3 FF               [12] 1487 	mov	r7,a
      0004B4 8E 03            [24] 1488 	mov	ar3,r6
      0004B6 90r00r00         [24] 1489 	mov	dptr,#_spi_control_write_PARM_2
      0004B9 E4               [12] 1490 	clr	a
      0004BA F0               [24] 1491 	movx	@dptr,a
      0004BB 90r00r00         [24] 1492 	mov	dptr,#_spi_control_write_PARM_3
      0004BE EB               [12] 1493 	mov	a,r3
      0004BF F0               [24] 1494 	movx	@dptr,a
      0004C0 75 82 00         [24] 1495 	mov	dpl, #0x00
      0004C3 C0 07            [24] 1496 	push	ar7
      0004C5 C0 06            [24] 1497 	push	ar6
      0004C7 C0 05            [24] 1498 	push	ar5
      0004C9 C0 04            [24] 1499 	push	ar4
      0004CB C0 03            [24] 1500 	push	ar3
      0004CD 12r00r00         [24] 1501 	lcall	_spi_control_write
      0004D0 D0 03            [24] 1502 	pop	ar3
      0004D2 D0 04            [24] 1503 	pop	ar4
      0004D4 D0 05            [24] 1504 	pop	ar5
      0004D6 D0 06            [24] 1505 	pop	ar6
      0004D8 D0 07            [24] 1506 	pop	ar7
                                   1507 ;	Eth.c:232: spi_control_write(0, 0x01, (uint8_t) (start_address >> 8)); // ERDPTH
      0004DA 8F 02            [24] 1508 	mov	ar2,r7
      0004DC 90r00r00         [24] 1509 	mov	dptr,#_spi_control_write_PARM_2
      0004DF 74 01            [12] 1510 	mov	a,#0x01
      0004E1 F0               [24] 1511 	movx	@dptr,a
      0004E2 90r00r00         [24] 1512 	mov	dptr,#_spi_control_write_PARM_3
      0004E5 EA               [12] 1513 	mov	a,r2
      0004E6 F0               [24] 1514 	movx	@dptr,a
      0004E7 75 82 00         [24] 1515 	mov	dpl, #0x00
      0004EA C0 07            [24] 1516 	push	ar7
      0004EC C0 06            [24] 1517 	push	ar6
      0004EE C0 05            [24] 1518 	push	ar5
      0004F0 C0 04            [24] 1519 	push	ar4
      0004F2 C0 03            [24] 1520 	push	ar3
      0004F4 C0 02            [24] 1521 	push	ar2
      0004F6 12r00r00         [24] 1522 	lcall	_spi_control_write
      0004F9 D0 02            [24] 1523 	pop	ar2
      0004FB D0 03            [24] 1524 	pop	ar3
      0004FD D0 04            [24] 1525 	pop	ar4
      0004FF D0 05            [24] 1526 	pop	ar5
      000501 D0 06            [24] 1527 	pop	ar6
      000503 D0 07            [24] 1528 	pop	ar7
                                   1529 ;	Eth.c:233: spi_control_write(0, 0x08, (uint8_t) (start_address & 0xFF)); // ERXSTL
      000505 90r00r00         [24] 1530 	mov	dptr,#_spi_control_write_PARM_2
      000508 74 08            [12] 1531 	mov	a,#0x08
      00050A F0               [24] 1532 	movx	@dptr,a
      00050B 90r00r00         [24] 1533 	mov	dptr,#_spi_control_write_PARM_3
      00050E EB               [12] 1534 	mov	a,r3
      00050F F0               [24] 1535 	movx	@dptr,a
      000510 75 82 00         [24] 1536 	mov	dpl, #0x00
      000513 C0 07            [24] 1537 	push	ar7
      000515 C0 06            [24] 1538 	push	ar6
      000517 C0 05            [24] 1539 	push	ar5
      000519 C0 04            [24] 1540 	push	ar4
      00051B C0 03            [24] 1541 	push	ar3
      00051D C0 02            [24] 1542 	push	ar2
      00051F 12r00r00         [24] 1543 	lcall	_spi_control_write
      000522 D0 02            [24] 1544 	pop	ar2
      000524 D0 03            [24] 1545 	pop	ar3
      000526 D0 04            [24] 1546 	pop	ar4
      000528 D0 05            [24] 1547 	pop	ar5
      00052A D0 06            [24] 1548 	pop	ar6
      00052C D0 07            [24] 1549 	pop	ar7
                                   1550 ;	Eth.c:234: spi_control_write(0, 0x09, (uint8_t) (start_address >> 8)); // ERXSTH
      00052E 90r00r00         [24] 1551 	mov	dptr,#_spi_control_write_PARM_2
      000531 74 09            [12] 1552 	mov	a,#0x09
      000533 F0               [24] 1553 	movx	@dptr,a
      000534 90r00r00         [24] 1554 	mov	dptr,#_spi_control_write_PARM_3
      000537 EA               [12] 1555 	mov	a,r2
      000538 F0               [24] 1556 	movx	@dptr,a
      000539 75 82 00         [24] 1557 	mov	dpl, #0x00
      00053C C0 07            [24] 1558 	push	ar7
      00053E C0 06            [24] 1559 	push	ar6
      000540 C0 05            [24] 1560 	push	ar5
      000542 C0 04            [24] 1561 	push	ar4
      000544 C0 03            [24] 1562 	push	ar3
      000546 C0 02            [24] 1563 	push	ar2
      000548 12r00r00         [24] 1564 	lcall	_spi_control_write
      00054B D0 02            [24] 1565 	pop	ar2
      00054D D0 03            [24] 1566 	pop	ar3
      00054F D0 04            [24] 1567 	pop	ar4
      000551 D0 05            [24] 1568 	pop	ar5
      000553 D0 06            [24] 1569 	pop	ar6
      000555 D0 07            [24] 1570 	pop	ar7
                                   1571 ;	Eth.c:235: spi_control_write(0, 0x0A, (uint8_t) (end_address & 0xFF)); // ERXNDL
      000557 8C 01            [24] 1572 	mov	ar1,r4
      000559 90r00r00         [24] 1573 	mov	dptr,#_spi_control_write_PARM_2
      00055C 74 0A            [12] 1574 	mov	a,#0x0a
      00055E F0               [24] 1575 	movx	@dptr,a
      00055F 90r00r00         [24] 1576 	mov	dptr,#_spi_control_write_PARM_3
      000562 E9               [12] 1577 	mov	a,r1
      000563 F0               [24] 1578 	movx	@dptr,a
      000564 75 82 00         [24] 1579 	mov	dpl, #0x00
      000567 C0 07            [24] 1580 	push	ar7
      000569 C0 06            [24] 1581 	push	ar6
      00056B C0 05            [24] 1582 	push	ar5
      00056D C0 04            [24] 1583 	push	ar4
      00056F C0 03            [24] 1584 	push	ar3
      000571 C0 02            [24] 1585 	push	ar2
      000573 12r00r00         [24] 1586 	lcall	_spi_control_write
      000576 D0 02            [24] 1587 	pop	ar2
      000578 D0 03            [24] 1588 	pop	ar3
      00057A D0 04            [24] 1589 	pop	ar4
      00057C D0 05            [24] 1590 	pop	ar5
      00057E D0 06            [24] 1591 	pop	ar6
      000580 D0 07            [24] 1592 	pop	ar7
                                   1593 ;	Eth.c:236: spi_control_write(0, 0x0B, (uint8_t) (end_address >> 8)); // ERXNDH
      000582 8D 01            [24] 1594 	mov	ar1,r5
      000584 90r00r00         [24] 1595 	mov	dptr,#_spi_control_write_PARM_2
      000587 74 0B            [12] 1596 	mov	a,#0x0b
      000589 F0               [24] 1597 	movx	@dptr,a
      00058A 90r00r00         [24] 1598 	mov	dptr,#_spi_control_write_PARM_3
      00058D E9               [12] 1599 	mov	a,r1
      00058E F0               [24] 1600 	movx	@dptr,a
      00058F 75 82 00         [24] 1601 	mov	dpl, #0x00
      000592 C0 07            [24] 1602 	push	ar7
      000594 C0 06            [24] 1603 	push	ar6
      000596 C0 05            [24] 1604 	push	ar5
      000598 C0 04            [24] 1605 	push	ar4
      00059A C0 03            [24] 1606 	push	ar3
      00059C C0 02            [24] 1607 	push	ar2
      00059E 12r00r00         [24] 1608 	lcall	_spi_control_write
      0005A1 D0 02            [24] 1609 	pop	ar2
      0005A3 D0 03            [24] 1610 	pop	ar3
      0005A5 D0 04            [24] 1611 	pop	ar4
      0005A7 D0 05            [24] 1612 	pop	ar5
      0005A9 D0 06            [24] 1613 	pop	ar6
      0005AB D0 07            [24] 1614 	pop	ar7
                                   1615 ;	Eth.c:237: spi_control_write(0, 0x0C, (uint8_t) (start_address & 0xFF)); // ERXRDPTL
      0005AD 90r00r00         [24] 1616 	mov	dptr,#_spi_control_write_PARM_2
      0005B0 74 0C            [12] 1617 	mov	a,#0x0c
      0005B2 F0               [24] 1618 	movx	@dptr,a
      0005B3 90r00r00         [24] 1619 	mov	dptr,#_spi_control_write_PARM_3
      0005B6 EB               [12] 1620 	mov	a,r3
      0005B7 F0               [24] 1621 	movx	@dptr,a
      0005B8 75 82 00         [24] 1622 	mov	dpl, #0x00
      0005BB C0 07            [24] 1623 	push	ar7
      0005BD C0 06            [24] 1624 	push	ar6
      0005BF C0 05            [24] 1625 	push	ar5
      0005C1 C0 04            [24] 1626 	push	ar4
      0005C3 C0 02            [24] 1627 	push	ar2
      0005C5 12r00r00         [24] 1628 	lcall	_spi_control_write
      0005C8 D0 02            [24] 1629 	pop	ar2
      0005CA D0 04            [24] 1630 	pop	ar4
      0005CC D0 05            [24] 1631 	pop	ar5
      0005CE D0 06            [24] 1632 	pop	ar6
      0005D0 D0 07            [24] 1633 	pop	ar7
                                   1634 ;	Eth.c:238: spi_control_write(0, 0x0D, (uint8_t) (start_address >> 8)); // ERXRDPTH
      0005D2 90r00r00         [24] 1635 	mov	dptr,#_spi_control_write_PARM_2
      0005D5 74 0D            [12] 1636 	mov	a,#0x0d
      0005D7 F0               [24] 1637 	movx	@dptr,a
      0005D8 90r00r00         [24] 1638 	mov	dptr,#_spi_control_write_PARM_3
      0005DB EA               [12] 1639 	mov	a,r2
      0005DC F0               [24] 1640 	movx	@dptr,a
      0005DD 75 82 00         [24] 1641 	mov	dpl, #0x00
      0005E0 C0 07            [24] 1642 	push	ar7
      0005E2 C0 06            [24] 1643 	push	ar6
      0005E4 C0 05            [24] 1644 	push	ar5
      0005E6 C0 04            [24] 1645 	push	ar4
      0005E8 12r00r00         [24] 1646 	lcall	_spi_control_write
      0005EB D0 04            [24] 1647 	pop	ar4
      0005ED D0 05            [24] 1648 	pop	ar5
      0005EF D0 06            [24] 1649 	pop	ar6
      0005F1 D0 07            [24] 1650 	pop	ar7
                                   1651 ;	Eth.c:239: printf("\nBuffer Initialized: Start 0x%04X, End 0x%04X\n", start_address,
      0005F3 C0 04            [24] 1652 	push	ar4
      0005F5 C0 05            [24] 1653 	push	ar5
      0005F7 C0 06            [24] 1654 	push	ar6
      0005F9 C0 07            [24] 1655 	push	ar7
      0005FB 74r25            [12] 1656 	mov	a,#___str_6
      0005FD C0 E0            [24] 1657 	push	acc
      0005FF 74s01            [12] 1658 	mov	a,#(___str_6 >> 8)
      000601 C0 E0            [24] 1659 	push	acc
      000603 74 80            [12] 1660 	mov	a,#0x80
      000605 C0 E0            [24] 1661 	push	acc
      000607 12r00r00         [24] 1662 	lcall	_printf
      00060A E5 81            [12] 1663 	mov	a,sp
      00060C 24 F9            [12] 1664 	add	a,#0xf9
      00060E F5 81            [12] 1665 	mov	sp,a
                                   1666 ;	Eth.c:241: }
      000610 22               [24] 1667 	ret
                                   1668 ;------------------------------------------------------------
                                   1669 ;Allocation info for local variables in function 'enc_init'
                                   1670 ;------------------------------------------------------------
                                   1671 ;sloc0                     Allocated with name '_enc_init_sloc0_1_0'
                                   1672 ;sloc1                     Allocated with name '_enc_init_sloc1_1_0'
                                   1673 ;sloc2                     Allocated with name '_enc_init_sloc2_1_0'
                                   1674 ;sloc3                     Allocated with name '_enc_init_sloc3_1_0'
                                   1675 ;mac                       Allocated with name '_enc_init_mac_10000_160'
                                   1676 ;rx_start                  Allocated with name '_enc_init_rx_start_10001_162'
                                   1677 ;rx_end                    Allocated with name '_enc_init_rx_end_10001_162'
                                   1678 ;read_macon3               Allocated with name '_enc_init_read_macon3_10002_163'
                                   1679 ;read_macon1               Allocated with name '_enc_init_read_macon1_10003_164'
                                   1680 ;------------------------------------------------------------
                                   1681 ;	Eth.c:243: void enc_init(const uint8_t *mac)
                                   1682 ;	-----------------------------------------
                                   1683 ;	 function enc_init
                                   1684 ;	-----------------------------------------
      000611                       1685 _enc_init:
      000611 AF F0            [24] 1686 	mov	r7,b
      000613 AE 83            [24] 1687 	mov	r6,dph
      000615 E5 82            [12] 1688 	mov	a,dpl
      000617 90r00r51         [24] 1689 	mov	dptr,#_enc_init_mac_10000_160
      00061A F0               [24] 1690 	movx	@dptr,a
      00061B EE               [12] 1691 	mov	a,r6
      00061C A3               [24] 1692 	inc	dptr
      00061D F0               [24] 1693 	movx	@dptr,a
      00061E EF               [12] 1694 	mov	a,r7
      00061F A3               [24] 1695 	inc	dptr
      000620 F0               [24] 1696 	movx	@dptr,a
                                   1697 ;	Eth.c:246: enc_reset();
      000621 12r00r00         [24] 1698 	lcall	_enc_reset
                                   1699 ;	Eth.c:249: while (!(mac_spi_read(0x1D, 0) & 0x01))
      000624                       1700 00101$:
      000624 90r00r00         [24] 1701 	mov	dptr,#_mac_spi_read_PARM_2
      000627 E4               [12] 1702 	clr	a
      000628 F0               [24] 1703 	movx	@dptr,a
      000629 75 82 1D         [24] 1704 	mov	dpl, #0x1d
      00062C 12r00r00         [24] 1705 	lcall	_mac_spi_read
      00062F E5 82            [12] 1706 	mov	a, dpl
      000631 30 E0 F0         [24] 1707 	jnb	acc.0,00101$
                                   1708 ;	Eth.c:257: enc_buffer_init(rx_start, rx_end);
      000634 90r00r4D         [24] 1709 	mov	dptr,#_enc_buffer_init_PARM_2
      000637 74 FF            [12] 1710 	mov	a,#0xff
      000639 F0               [24] 1711 	movx	@dptr,a
      00063A 74 0B            [12] 1712 	mov	a,#0x0b
      00063C A3               [24] 1713 	inc	dptr
      00063D F0               [24] 1714 	movx	@dptr,a
      00063E 90 00 00         [24] 1715 	mov	dptr,#0x0000
      000641 12r04r46         [24] 1716 	lcall	_enc_buffer_init
                                   1717 ;	Eth.c:268: spi_control_write(2, 0x02, 0x70); // MACON3: Padding, CRC, and frame length checking enabled37
      000644 90r00r00         [24] 1718 	mov	dptr,#_spi_control_write_PARM_2
      000647 74 02            [12] 1719 	mov	a,#0x02
      000649 F0               [24] 1720 	movx	@dptr,a
      00064A 90r00r00         [24] 1721 	mov	dptr,#_spi_control_write_PARM_3
      00064D 74 70            [12] 1722 	mov	a,#0x70
      00064F F0               [24] 1723 	movx	@dptr,a
      000650 75 82 02         [24] 1724 	mov	dpl, #0x02
      000653 12r00r00         [24] 1725 	lcall	_spi_control_write
                                   1726 ;	Eth.c:269: spi_control_write(2, 0x03, 0x40); // MACON4: IEEE compliance00
      000656 90r00r00         [24] 1727 	mov	dptr,#_spi_control_write_PARM_2
      000659 74 03            [12] 1728 	mov	a,#0x03
      00065B F0               [24] 1729 	movx	@dptr,a
      00065C 90r00r00         [24] 1730 	mov	dptr,#_spi_control_write_PARM_3
      00065F 74 40            [12] 1731 	mov	a,#0x40
      000661 F0               [24] 1732 	movx	@dptr,a
      000662 75 82 02         [24] 1733 	mov	dpl, #0x02
      000665 12r00r00         [24] 1734 	lcall	_spi_control_write
                                   1735 ;	Eth.c:272: spi_control_write(2, 0x0A, 0xEE); // MAMXFLL
      000668 90r00r00         [24] 1736 	mov	dptr,#_spi_control_write_PARM_2
      00066B 74 0A            [12] 1737 	mov	a,#0x0a
      00066D F0               [24] 1738 	movx	@dptr,a
      00066E 90r00r00         [24] 1739 	mov	dptr,#_spi_control_write_PARM_3
      000671 74 EE            [12] 1740 	mov	a,#0xee
      000673 F0               [24] 1741 	movx	@dptr,a
      000674 75 82 02         [24] 1742 	mov	dpl, #0x02
      000677 12r00r00         [24] 1743 	lcall	_spi_control_write
                                   1744 ;	Eth.c:273: spi_control_write(2, 0x0B, 0x05); // MAMXFLH
      00067A 90r00r00         [24] 1745 	mov	dptr,#_spi_control_write_PARM_2
      00067D 74 0B            [12] 1746 	mov	a,#0x0b
      00067F F0               [24] 1747 	movx	@dptr,a
      000680 90r00r00         [24] 1748 	mov	dptr,#_spi_control_write_PARM_3
      000683 74 05            [12] 1749 	mov	a,#0x05
      000685 F0               [24] 1750 	movx	@dptr,a
      000686 75 82 02         [24] 1751 	mov	dpl, #0x02
      000689 12r00r00         [24] 1752 	lcall	_spi_control_write
                                   1753 ;	Eth.c:276: spi_control_write(2, 0x04, 0x12); // MABBIPG: Back-to-back gap (Full Duplex)
      00068C 90r00r00         [24] 1754 	mov	dptr,#_spi_control_write_PARM_2
      00068F 74 04            [12] 1755 	mov	a,#0x04
      000691 F0               [24] 1756 	movx	@dptr,a
      000692 90r00r00         [24] 1757 	mov	dptr,#_spi_control_write_PARM_3
      000695 74 12            [12] 1758 	mov	a,#0x12
      000697 F0               [24] 1759 	movx	@dptr,a
      000698 75 82 02         [24] 1760 	mov	dpl, #0x02
      00069B 12r00r00         [24] 1761 	lcall	_spi_control_write
                                   1762 ;	Eth.c:277: spi_control_write(2, 0x06, 0x12); // MAIPGL: Non-back-to-back gap
      00069E 90r00r00         [24] 1763 	mov	dptr,#_spi_control_write_PARM_2
      0006A1 74 06            [12] 1764 	mov	a,#0x06
      0006A3 F0               [24] 1765 	movx	@dptr,a
      0006A4 90r00r00         [24] 1766 	mov	dptr,#_spi_control_write_PARM_3
      0006A7 74 12            [12] 1767 	mov	a,#0x12
      0006A9 F0               [24] 1768 	movx	@dptr,a
      0006AA 75 82 02         [24] 1769 	mov	dpl, #0x02
      0006AD 12r00r00         [24] 1770 	lcall	_spi_control_write
                                   1771 ;	Eth.c:278: spi_control_write(2, 0x07, 0x0C); // MAIPGH: Non-back-to-back gap (Half Duplex)
      0006B0 90r00r00         [24] 1772 	mov	dptr,#_spi_control_write_PARM_2
      0006B3 74 07            [12] 1773 	mov	a,#0x07
      0006B5 F0               [24] 1774 	movx	@dptr,a
      0006B6 90r00r00         [24] 1775 	mov	dptr,#_spi_control_write_PARM_3
      0006B9 74 0C            [12] 1776 	mov	a,#0x0c
      0006BB F0               [24] 1777 	movx	@dptr,a
      0006BC 75 82 02         [24] 1778 	mov	dpl, #0x02
      0006BF 12r00r00         [24] 1779 	lcall	_spi_control_write
                                   1780 ;	Eth.c:281: spi_control_write(3, 0x01, mac[5]); // MAADR6
      0006C2 90r00r51         [24] 1781 	mov	dptr,#_enc_init_mac_10000_160
      0006C5 E0               [24] 1782 	movx	a,@dptr
      0006C6 FD               [12] 1783 	mov	r5,a
      0006C7 A3               [24] 1784 	inc	dptr
      0006C8 E0               [24] 1785 	movx	a,@dptr
      0006C9 FE               [12] 1786 	mov	r6,a
      0006CA A3               [24] 1787 	inc	dptr
      0006CB E0               [24] 1788 	movx	a,@dptr
      0006CC FF               [12] 1789 	mov	r7,a
      0006CD 74 05            [12] 1790 	mov	a,#0x05
      0006CF 2D               [12] 1791 	add	a, r5
      0006D0 F5*00            [12] 1792 	mov	_enc_init_sloc0_1_0,a
      0006D2 E4               [12] 1793 	clr	a
      0006D3 3E               [12] 1794 	addc	a, r6
      0006D4 F5*01            [12] 1795 	mov	(_enc_init_sloc0_1_0 + 1),a
      0006D6 8F*02            [24] 1796 	mov	(_enc_init_sloc0_1_0 + 2),r7
      0006D8 85*00 82         [24] 1797 	mov	dpl,_enc_init_sloc0_1_0
      0006DB 85*01 83         [24] 1798 	mov	dph,(_enc_init_sloc0_1_0 + 1)
      0006DE 85*02 F0         [24] 1799 	mov	b,(_enc_init_sloc0_1_0 + 2)
      0006E1 12r00r00         [24] 1800 	lcall	__gptrget
      0006E4 F9               [12] 1801 	mov	r1,a
      0006E5 90r00r00         [24] 1802 	mov	dptr,#_spi_control_write_PARM_2
      0006E8 74 01            [12] 1803 	mov	a,#0x01
      0006EA F0               [24] 1804 	movx	@dptr,a
      0006EB 90r00r00         [24] 1805 	mov	dptr,#_spi_control_write_PARM_3
      0006EE E9               [12] 1806 	mov	a,r1
      0006EF F0               [24] 1807 	movx	@dptr,a
      0006F0 75 82 03         [24] 1808 	mov	dpl, #0x03
      0006F3 C0 07            [24] 1809 	push	ar7
      0006F5 C0 06            [24] 1810 	push	ar6
      0006F7 C0 05            [24] 1811 	push	ar5
      0006F9 12r00r00         [24] 1812 	lcall	_spi_control_write
      0006FC D0 05            [24] 1813 	pop	ar5
      0006FE D0 06            [24] 1814 	pop	ar6
      000700 D0 07            [24] 1815 	pop	ar7
                                   1816 ;	Eth.c:282: spi_control_write(3, 0x00, mac[4]); // MAADR5
      000702 74 04            [12] 1817 	mov	a,#0x04
      000704 2D               [12] 1818 	add	a, r5
      000705 F5*03            [12] 1819 	mov	_enc_init_sloc1_1_0,a
      000707 E4               [12] 1820 	clr	a
      000708 3E               [12] 1821 	addc	a, r6
      000709 F5*04            [12] 1822 	mov	(_enc_init_sloc1_1_0 + 1),a
      00070B 8F*05            [24] 1823 	mov	(_enc_init_sloc1_1_0 + 2),r7
      00070D 85*03 82         [24] 1824 	mov	dpl,_enc_init_sloc1_1_0
      000710 85*04 83         [24] 1825 	mov	dph,(_enc_init_sloc1_1_0 + 1)
      000713 85*05 F0         [24] 1826 	mov	b,(_enc_init_sloc1_1_0 + 2)
      000716 12r00r00         [24] 1827 	lcall	__gptrget
      000719 FB               [12] 1828 	mov	r3,a
      00071A 90r00r00         [24] 1829 	mov	dptr,#_spi_control_write_PARM_2
      00071D E4               [12] 1830 	clr	a
      00071E F0               [24] 1831 	movx	@dptr,a
      00071F 90r00r00         [24] 1832 	mov	dptr,#_spi_control_write_PARM_3
      000722 EB               [12] 1833 	mov	a,r3
      000723 F0               [24] 1834 	movx	@dptr,a
      000724 75 82 03         [24] 1835 	mov	dpl, #0x03
      000727 C0 07            [24] 1836 	push	ar7
      000729 C0 06            [24] 1837 	push	ar6
      00072B C0 05            [24] 1838 	push	ar5
      00072D 12r00r00         [24] 1839 	lcall	_spi_control_write
      000730 D0 05            [24] 1840 	pop	ar5
      000732 D0 06            [24] 1841 	pop	ar6
      000734 D0 07            [24] 1842 	pop	ar7
                                   1843 ;	Eth.c:283: spi_control_write(3, 0x03, mac[3]); // MAADR4
      000736 74 03            [12] 1844 	mov	a,#0x03
      000738 2D               [12] 1845 	add	a, r5
      000739 F5*06            [12] 1846 	mov	_enc_init_sloc2_1_0,a
      00073B E4               [12] 1847 	clr	a
      00073C 3E               [12] 1848 	addc	a, r6
      00073D F5*07            [12] 1849 	mov	(_enc_init_sloc2_1_0 + 1),a
      00073F 8F*08            [24] 1850 	mov	(_enc_init_sloc2_1_0 + 2),r7
      000741 85*06 82         [24] 1851 	mov	dpl,_enc_init_sloc2_1_0
      000744 85*07 83         [24] 1852 	mov	dph,(_enc_init_sloc2_1_0 + 1)
      000747 85*08 F0         [24] 1853 	mov	b,(_enc_init_sloc2_1_0 + 2)
      00074A 12r00r00         [24] 1854 	lcall	__gptrget
      00074D F9               [12] 1855 	mov	r1,a
      00074E 90r00r00         [24] 1856 	mov	dptr,#_spi_control_write_PARM_2
      000751 74 03            [12] 1857 	mov	a,#0x03
      000753 F0               [24] 1858 	movx	@dptr,a
      000754 90r00r00         [24] 1859 	mov	dptr,#_spi_control_write_PARM_3
      000757 E9               [12] 1860 	mov	a,r1
      000758 F0               [24] 1861 	movx	@dptr,a
      000759 75 82 03         [24] 1862 	mov	dpl, #0x03
      00075C C0 07            [24] 1863 	push	ar7
      00075E C0 06            [24] 1864 	push	ar6
      000760 C0 05            [24] 1865 	push	ar5
      000762 12r00r00         [24] 1866 	lcall	_spi_control_write
      000765 D0 05            [24] 1867 	pop	ar5
      000767 D0 06            [24] 1868 	pop	ar6
      000769 D0 07            [24] 1869 	pop	ar7
                                   1870 ;	Eth.c:284: spi_control_write(3, 0x02, mac[2]); // MAADR3
      00076B 74 02            [12] 1871 	mov	a,#0x02
      00076D 2D               [12] 1872 	add	a, r5
      00076E F5*09            [12] 1873 	mov	_enc_init_sloc3_1_0,a
      000770 E4               [12] 1874 	clr	a
      000771 3E               [12] 1875 	addc	a, r6
      000772 F5*0A            [12] 1876 	mov	(_enc_init_sloc3_1_0 + 1),a
      000774 8F*0B            [24] 1877 	mov	(_enc_init_sloc3_1_0 + 2),r7
      000776 85*09 82         [24] 1878 	mov	dpl,_enc_init_sloc3_1_0
      000779 85*0A 83         [24] 1879 	mov	dph,(_enc_init_sloc3_1_0 + 1)
      00077C 85*0B F0         [24] 1880 	mov	b,(_enc_init_sloc3_1_0 + 2)
      00077F 12r00r00         [24] 1881 	lcall	__gptrget
      000782 FB               [12] 1882 	mov	r3,a
      000783 90r00r00         [24] 1883 	mov	dptr,#_spi_control_write_PARM_2
      000786 74 02            [12] 1884 	mov	a,#0x02
      000788 F0               [24] 1885 	movx	@dptr,a
      000789 90r00r00         [24] 1886 	mov	dptr,#_spi_control_write_PARM_3
      00078C EB               [12] 1887 	mov	a,r3
      00078D F0               [24] 1888 	movx	@dptr,a
      00078E 75 82 03         [24] 1889 	mov	dpl, #0x03
      000791 C0 07            [24] 1890 	push	ar7
      000793 C0 06            [24] 1891 	push	ar6
      000795 C0 05            [24] 1892 	push	ar5
      000797 12r00r00         [24] 1893 	lcall	_spi_control_write
      00079A D0 05            [24] 1894 	pop	ar5
      00079C D0 06            [24] 1895 	pop	ar6
      00079E D0 07            [24] 1896 	pop	ar7
                                   1897 ;	Eth.c:285: spi_control_write(3, 0x05, mac[1]); // MAADR2
      0007A0 74 01            [12] 1898 	mov	a,#0x01
      0007A2 2D               [12] 1899 	add	a, r5
      0007A3 FA               [12] 1900 	mov	r2,a
      0007A4 E4               [12] 1901 	clr	a
      0007A5 3E               [12] 1902 	addc	a, r6
      0007A6 FB               [12] 1903 	mov	r3,a
      0007A7 8F 04            [24] 1904 	mov	ar4,r7
      0007A9 8A 82            [24] 1905 	mov	dpl,r2
      0007AB 8B 83            [24] 1906 	mov	dph,r3
      0007AD 8C F0            [24] 1907 	mov	b,r4
      0007AF 12r00r00         [24] 1908 	lcall	__gptrget
      0007B2 F9               [12] 1909 	mov	r1,a
      0007B3 90r00r00         [24] 1910 	mov	dptr,#_spi_control_write_PARM_2
      0007B6 74 05            [12] 1911 	mov	a,#0x05
      0007B8 F0               [24] 1912 	movx	@dptr,a
      0007B9 90r00r00         [24] 1913 	mov	dptr,#_spi_control_write_PARM_3
      0007BC E9               [12] 1914 	mov	a,r1
      0007BD F0               [24] 1915 	movx	@dptr,a
      0007BE 75 82 03         [24] 1916 	mov	dpl, #0x03
      0007C1 C0 07            [24] 1917 	push	ar7
      0007C3 C0 06            [24] 1918 	push	ar6
      0007C5 C0 05            [24] 1919 	push	ar5
      0007C7 C0 04            [24] 1920 	push	ar4
      0007C9 C0 03            [24] 1921 	push	ar3
      0007CB C0 02            [24] 1922 	push	ar2
      0007CD 12r00r00         [24] 1923 	lcall	_spi_control_write
      0007D0 D0 02            [24] 1924 	pop	ar2
      0007D2 D0 03            [24] 1925 	pop	ar3
      0007D4 D0 04            [24] 1926 	pop	ar4
      0007D6 D0 05            [24] 1927 	pop	ar5
      0007D8 D0 06            [24] 1928 	pop	ar6
      0007DA D0 07            [24] 1929 	pop	ar7
                                   1930 ;	Eth.c:286: spi_control_write(3, 0x04, mac[0]); // MAADR1
      0007DC 8D 82            [24] 1931 	mov	dpl,r5
      0007DE 8E 83            [24] 1932 	mov	dph,r6
      0007E0 8F F0            [24] 1933 	mov	b,r7
      0007E2 12r00r00         [24] 1934 	lcall	__gptrget
      0007E5 F9               [12] 1935 	mov	r1,a
      0007E6 90r00r00         [24] 1936 	mov	dptr,#_spi_control_write_PARM_2
      0007E9 74 04            [12] 1937 	mov	a,#0x04
      0007EB F0               [24] 1938 	movx	@dptr,a
      0007EC 90r00r00         [24] 1939 	mov	dptr,#_spi_control_write_PARM_3
      0007EF E9               [12] 1940 	mov	a,r1
      0007F0 F0               [24] 1941 	movx	@dptr,a
      0007F1 75 82 03         [24] 1942 	mov	dpl, #0x03
      0007F4 C0 07            [24] 1943 	push	ar7
      0007F6 C0 06            [24] 1944 	push	ar6
      0007F8 C0 05            [24] 1945 	push	ar5
      0007FA C0 04            [24] 1946 	push	ar4
      0007FC C0 03            [24] 1947 	push	ar3
      0007FE C0 02            [24] 1948 	push	ar2
      000800 12r00r00         [24] 1949 	lcall	_spi_control_write
      000803 D0 02            [24] 1950 	pop	ar2
      000805 D0 03            [24] 1951 	pop	ar3
      000807 D0 04            [24] 1952 	pop	ar4
      000809 D0 05            [24] 1953 	pop	ar5
      00080B D0 06            [24] 1954 	pop	ar6
      00080D D0 07            [24] 1955 	pop	ar7
                                   1956 ;	Eth.c:288: spi_control_write(1, 0x18, 0x80); //unicast filter funcationality register
      00080F 90r00r00         [24] 1957 	mov	dptr,#_spi_control_write_PARM_2
      000812 74 18            [12] 1958 	mov	a,#0x18
      000814 F0               [24] 1959 	movx	@dptr,a
      000815 90r00r00         [24] 1960 	mov	dptr,#_spi_control_write_PARM_3
      000818 74 80            [12] 1961 	mov	a,#0x80
      00081A F0               [24] 1962 	movx	@dptr,a
      00081B 75 82 01         [24] 1963 	mov	dpl, #0x01
      00081E C0 07            [24] 1964 	push	ar7
      000820 C0 06            [24] 1965 	push	ar6
      000822 C0 05            [24] 1966 	push	ar5
      000824 C0 04            [24] 1967 	push	ar4
      000826 C0 03            [24] 1968 	push	ar3
      000828 C0 02            [24] 1969 	push	ar2
      00082A 12r00r00         [24] 1970 	lcall	_spi_control_write
      00082D D0 02            [24] 1971 	pop	ar2
      00082F D0 03            [24] 1972 	pop	ar3
      000831 D0 04            [24] 1973 	pop	ar4
      000833 D0 05            [24] 1974 	pop	ar5
      000835 D0 06            [24] 1975 	pop	ar6
      000837 D0 07            [24] 1976 	pop	ar7
                                   1977 ;	Eth.c:290: uint8_t read_macon3 = mac_spi_read(0x03, 2);
      000839 90r00r00         [24] 1978 	mov	dptr,#_mac_spi_read_PARM_2
      00083C 74 02            [12] 1979 	mov	a,#0x02
      00083E F0               [24] 1980 	movx	@dptr,a
      00083F 75 82 03         [24] 1981 	mov	dpl, #0x03
      000842 C0 07            [24] 1982 	push	ar7
      000844 C0 06            [24] 1983 	push	ar6
      000846 C0 05            [24] 1984 	push	ar5
      000848 C0 04            [24] 1985 	push	ar4
      00084A C0 03            [24] 1986 	push	ar3
      00084C C0 02            [24] 1987 	push	ar2
      00084E 12r00r00         [24] 1988 	lcall	_mac_spi_read
      000851 E5 82            [12] 1989 	mov	a, dpl
      000853 D0 02            [24] 1990 	pop	ar2
      000855 D0 03            [24] 1991 	pop	ar3
      000857 D0 04            [24] 1992 	pop	ar4
      000859 D0 05            [24] 1993 	pop	ar5
      00085B D0 06            [24] 1994 	pop	ar6
      00085D D0 07            [24] 1995 	pop	ar7
                                   1996 ;	Eth.c:291: spi_control_write(2, 0x03, (read_macon3 | (1 << 0)));
      00085F 44 01            [12] 1997 	orl	a,#0x01
      000861 F9               [12] 1998 	mov	r1,a
      000862 90r00r00         [24] 1999 	mov	dptr,#_spi_control_write_PARM_2
      000865 74 03            [12] 2000 	mov	a,#0x03
      000867 F0               [24] 2001 	movx	@dptr,a
      000868 90r00r00         [24] 2002 	mov	dptr,#_spi_control_write_PARM_3
      00086B E9               [12] 2003 	mov	a,r1
      00086C F0               [24] 2004 	movx	@dptr,a
      00086D 75 82 02         [24] 2005 	mov	dpl, #0x02
      000870 C0 07            [24] 2006 	push	ar7
      000872 C0 06            [24] 2007 	push	ar6
      000874 C0 05            [24] 2008 	push	ar5
      000876 C0 04            [24] 2009 	push	ar4
      000878 C0 03            [24] 2010 	push	ar3
      00087A C0 02            [24] 2011 	push	ar2
      00087C 12r00r00         [24] 2012 	lcall	_spi_control_write
      00087F D0 02            [24] 2013 	pop	ar2
      000881 D0 03            [24] 2014 	pop	ar3
      000883 D0 04            [24] 2015 	pop	ar4
      000885 D0 05            [24] 2016 	pop	ar5
      000887 D0 06            [24] 2017 	pop	ar6
      000889 D0 07            [24] 2018 	pop	ar7
                                   2019 ;	Eth.c:292: uint8_t read_macon1 = mac_spi_read(0x00, 2); //mac enable for reception
      00088B 90r00r00         [24] 2020 	mov	dptr,#_mac_spi_read_PARM_2
      00088E 74 02            [12] 2021 	mov	a,#0x02
      000890 F0               [24] 2022 	movx	@dptr,a
      000891 75 82 00         [24] 2023 	mov	dpl, #0x00
      000894 C0 07            [24] 2024 	push	ar7
      000896 C0 06            [24] 2025 	push	ar6
      000898 C0 05            [24] 2026 	push	ar5
      00089A C0 04            [24] 2027 	push	ar4
      00089C C0 03            [24] 2028 	push	ar3
      00089E C0 02            [24] 2029 	push	ar2
      0008A0 12r00r00         [24] 2030 	lcall	_mac_spi_read
      0008A3 E5 82            [12] 2031 	mov	a, dpl
      0008A5 D0 02            [24] 2032 	pop	ar2
      0008A7 D0 03            [24] 2033 	pop	ar3
      0008A9 D0 04            [24] 2034 	pop	ar4
      0008AB D0 05            [24] 2035 	pop	ar5
      0008AD D0 06            [24] 2036 	pop	ar6
      0008AF D0 07            [24] 2037 	pop	ar7
                                   2038 ;	Eth.c:293: spi_control_write(2, 0x00, (read_macon1 | (1 << 0))); //mac enable for reception
      0008B1 44 01            [12] 2039 	orl	a,#0x01
      0008B3 F9               [12] 2040 	mov	r1,a
      0008B4 90r00r00         [24] 2041 	mov	dptr,#_spi_control_write_PARM_2
      0008B7 E4               [12] 2042 	clr	a
      0008B8 F0               [24] 2043 	movx	@dptr,a
      0008B9 90r00r00         [24] 2044 	mov	dptr,#_spi_control_write_PARM_3
      0008BC E9               [12] 2045 	mov	a,r1
      0008BD F0               [24] 2046 	movx	@dptr,a
      0008BE 75 82 02         [24] 2047 	mov	dpl, #0x02
      0008C1 C0 07            [24] 2048 	push	ar7
      0008C3 C0 06            [24] 2049 	push	ar6
      0008C5 C0 05            [24] 2050 	push	ar5
      0008C7 C0 04            [24] 2051 	push	ar4
      0008C9 C0 03            [24] 2052 	push	ar3
      0008CB C0 02            [24] 2053 	push	ar2
      0008CD 12r00r00         [24] 2054 	lcall	_spi_control_write
      0008D0 D0 02            [24] 2055 	pop	ar2
      0008D2 D0 03            [24] 2056 	pop	ar3
      0008D4 D0 04            [24] 2057 	pop	ar4
      0008D6 D0 05            [24] 2058 	pop	ar5
      0008D8 D0 06            [24] 2059 	pop	ar6
      0008DA D0 07            [24] 2060 	pop	ar7
                                   2061 ;	Eth.c:294: phy_spi_write(0x00, 0x0100);
      0008DC 90r00r00         [24] 2062 	mov	dptr,#_phy_spi_write_PARM_2
      0008DF E4               [12] 2063 	clr	a
      0008E0 F0               [24] 2064 	movx	@dptr,a
      0008E1 04               [12] 2065 	inc	a
      0008E2 A3               [24] 2066 	inc	dptr
      0008E3 F0               [24] 2067 	movx	@dptr,a
      0008E4 75 82 00         [24] 2068 	mov	dpl, #0x00
      0008E7 C0 07            [24] 2069 	push	ar7
      0008E9 C0 06            [24] 2070 	push	ar6
      0008EB C0 05            [24] 2071 	push	ar5
      0008ED C0 04            [24] 2072 	push	ar4
      0008EF C0 03            [24] 2073 	push	ar3
      0008F1 C0 02            [24] 2074 	push	ar2
      0008F3 12r00r00         [24] 2075 	lcall	_phy_spi_write
      0008F6 D0 02            [24] 2076 	pop	ar2
      0008F8 D0 03            [24] 2077 	pop	ar3
      0008FA D0 04            [24] 2078 	pop	ar4
      0008FC D0 05            [24] 2079 	pop	ar5
      0008FE D0 06            [24] 2080 	pop	ar6
      000900 D0 07            [24] 2081 	pop	ar7
                                   2082 ;	Eth.c:297: phy_spi_write(0x14, 0x3422); // PHLCON: LEDA=Link/Activity, LEDB=RX/TX Activity
      000902 90r00r00         [24] 2083 	mov	dptr,#_phy_spi_write_PARM_2
      000905 74 22            [12] 2084 	mov	a,#0x22
      000907 F0               [24] 2085 	movx	@dptr,a
      000908 74 34            [12] 2086 	mov	a,#0x34
      00090A A3               [24] 2087 	inc	dptr
      00090B F0               [24] 2088 	movx	@dptr,a
      00090C 75 82 14         [24] 2089 	mov	dpl, #0x14
      00090F C0 07            [24] 2090 	push	ar7
      000911 C0 06            [24] 2091 	push	ar6
      000913 C0 05            [24] 2092 	push	ar5
      000915 C0 04            [24] 2093 	push	ar4
      000917 C0 03            [24] 2094 	push	ar3
      000919 C0 02            [24] 2095 	push	ar2
      00091B 12r00r00         [24] 2096 	lcall	_phy_spi_write
      00091E D0 02            [24] 2097 	pop	ar2
      000920 D0 03            [24] 2098 	pop	ar3
      000922 D0 04            [24] 2099 	pop	ar4
      000924 D0 05            [24] 2100 	pop	ar5
      000926 D0 06            [24] 2101 	pop	ar6
      000928 D0 07            [24] 2102 	pop	ar7
                                   2103 ;	Eth.c:298: spi_control_write(0, 0X1F, 0X04); // reception enable bit
      00092A 90r00r00         [24] 2104 	mov	dptr,#_spi_control_write_PARM_2
      00092D 74 1F            [12] 2105 	mov	a,#0x1f
      00092F F0               [24] 2106 	movx	@dptr,a
      000930 90r00r00         [24] 2107 	mov	dptr,#_spi_control_write_PARM_3
      000933 74 04            [12] 2108 	mov	a,#0x04
      000935 F0               [24] 2109 	movx	@dptr,a
      000936 75 82 00         [24] 2110 	mov	dpl, #0x00
      000939 C0 07            [24] 2111 	push	ar7
      00093B C0 06            [24] 2112 	push	ar6
      00093D C0 05            [24] 2113 	push	ar5
      00093F C0 04            [24] 2114 	push	ar4
      000941 C0 03            [24] 2115 	push	ar3
      000943 C0 02            [24] 2116 	push	ar2
      000945 12r00r00         [24] 2117 	lcall	_spi_control_write
                                   2118 ;	Eth.c:299: printf("\nENC28J60 Initialization Complete.\n");
      000948 74r54            [12] 2119 	mov	a,#___str_7
      00094A C0 E0            [24] 2120 	push	acc
      00094C 74s01            [12] 2121 	mov	a,#(___str_7 >> 8)
      00094E C0 E0            [24] 2122 	push	acc
      000950 74 80            [12] 2123 	mov	a,#0x80
      000952 C0 E0            [24] 2124 	push	acc
      000954 12r00r00         [24] 2125 	lcall	_printf
      000957 15 81            [12] 2126 	dec	sp
      000959 15 81            [12] 2127 	dec	sp
      00095B 15 81            [12] 2128 	dec	sp
      00095D D0 02            [24] 2129 	pop	ar2
      00095F D0 03            [24] 2130 	pop	ar3
      000961 D0 04            [24] 2131 	pop	ar4
      000963 D0 05            [24] 2132 	pop	ar5
      000965 D0 06            [24] 2133 	pop	ar6
      000967 D0 07            [24] 2134 	pop	ar7
                                   2135 ;	Eth.c:301: mac[2], mac[3], mac[4], mac[5]);
      000969 85*00 82         [24] 2136 	mov	dpl,_enc_init_sloc0_1_0
      00096C 85*01 83         [24] 2137 	mov	dph,(_enc_init_sloc0_1_0 + 1)
      00096F 85*02 F0         [24] 2138 	mov	b,(_enc_init_sloc0_1_0 + 2)
      000972 12r00r00         [24] 2139 	lcall	__gptrget
      000975 F9               [12] 2140 	mov	r1,a
      000976 89*00            [24] 2141 	mov	_enc_init_sloc0_1_0,r1
      000978 75*01 00         [24] 2142 	mov	(_enc_init_sloc0_1_0 + 1),#0x00
      00097B 85*03 82         [24] 2143 	mov	dpl,_enc_init_sloc1_1_0
      00097E 85*04 83         [24] 2144 	mov	dph,(_enc_init_sloc1_1_0 + 1)
      000981 85*05 F0         [24] 2145 	mov	b,(_enc_init_sloc1_1_0 + 2)
      000984 12r00r00         [24] 2146 	lcall	__gptrget
      000987 F9               [12] 2147 	mov	r1,a
      000988 89*03            [24] 2148 	mov	_enc_init_sloc1_1_0,r1
      00098A 75*04 00         [24] 2149 	mov	(_enc_init_sloc1_1_0 + 1),#0x00
      00098D 85*06 82         [24] 2150 	mov	dpl,_enc_init_sloc2_1_0
      000990 85*07 83         [24] 2151 	mov	dph,(_enc_init_sloc2_1_0 + 1)
      000993 85*08 F0         [24] 2152 	mov	b,(_enc_init_sloc2_1_0 + 2)
      000996 12r00r00         [24] 2153 	lcall	__gptrget
      000999 F9               [12] 2154 	mov	r1,a
      00099A 89*06            [24] 2155 	mov	_enc_init_sloc2_1_0,r1
      00099C 75*07 00         [24] 2156 	mov	(_enc_init_sloc2_1_0 + 1),#0x00
      00099F 85*09 82         [24] 2157 	mov	dpl,_enc_init_sloc3_1_0
      0009A2 85*0A 83         [24] 2158 	mov	dph,(_enc_init_sloc3_1_0 + 1)
      0009A5 85*0B F0         [24] 2159 	mov	b,(_enc_init_sloc3_1_0 + 2)
      0009A8 12r00r00         [24] 2160 	lcall	__gptrget
      0009AB F8               [12] 2161 	mov	r0,a
      0009AC 79 00            [12] 2162 	mov	r1,#0x00
                                   2163 ;	Eth.c:300: printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
      0009AE 8A 82            [24] 2164 	mov	dpl,r2
      0009B0 8B 83            [24] 2165 	mov	dph,r3
      0009B2 8C F0            [24] 2166 	mov	b,r4
      0009B4 12r00r00         [24] 2167 	lcall	__gptrget
      0009B7 FA               [12] 2168 	mov	r2,a
      0009B8 7C 00            [12] 2169 	mov	r4,#0x00
      0009BA 8D 82            [24] 2170 	mov	dpl,r5
      0009BC 8E 83            [24] 2171 	mov	dph,r6
      0009BE 8F F0            [24] 2172 	mov	b,r7
      0009C0 12r00r00         [24] 2173 	lcall	__gptrget
      0009C3 FD               [12] 2174 	mov	r5,a
      0009C4 7F 00            [12] 2175 	mov	r7,#0x00
      0009C6 C0*00            [24] 2176 	push	_enc_init_sloc0_1_0
      0009C8 C0*01            [24] 2177 	push	(_enc_init_sloc0_1_0 + 1)
      0009CA C0*03            [24] 2178 	push	_enc_init_sloc1_1_0
      0009CC C0*04            [24] 2179 	push	(_enc_init_sloc1_1_0 + 1)
      0009CE C0*06            [24] 2180 	push	_enc_init_sloc2_1_0
      0009D0 C0*07            [24] 2181 	push	(_enc_init_sloc2_1_0 + 1)
      0009D2 C0 00            [24] 2182 	push	ar0
      0009D4 C0 01            [24] 2183 	push	ar1
      0009D6 C0 02            [24] 2184 	push	ar2
      0009D8 C0 04            [24] 2185 	push	ar4
      0009DA C0 05            [24] 2186 	push	ar5
      0009DC C0 07            [24] 2187 	push	ar7
      0009DE 74r78            [12] 2188 	mov	a,#___str_8
      0009E0 C0 E0            [24] 2189 	push	acc
      0009E2 74s01            [12] 2190 	mov	a,#(___str_8 >> 8)
      0009E4 C0 E0            [24] 2191 	push	acc
      0009E6 74 80            [12] 2192 	mov	a,#0x80
      0009E8 C0 E0            [24] 2193 	push	acc
      0009EA 12r00r00         [24] 2194 	lcall	_printf
      0009ED E5 81            [12] 2195 	mov	a,sp
      0009EF 24 F1            [12] 2196 	add	a,#0xf1
      0009F1 F5 81            [12] 2197 	mov	sp,a
                                   2198 ;	Eth.c:302: }
      0009F3 22               [24] 2199 	ret
                                   2200 ;------------------------------------------------------------
                                   2201 ;Allocation info for local variables in function 'ENC_pkt_count'
                                   2202 ;------------------------------------------------------------
                                   2203 ;count                     Allocated with name '_ENC_pkt_count_count_10000_166'
                                   2204 ;------------------------------------------------------------
                                   2205 ;	Eth.c:304: uint8_t ENC_pkt_count(void)
                                   2206 ;	-----------------------------------------
                                   2207 ;	 function ENC_pkt_count
                                   2208 ;	-----------------------------------------
      0009F4                       2209 _ENC_pkt_count:
                                   2210 ;	Eth.c:306: uint8_t count = mac_spi_read(0x19, 1);
      0009F4 90r00r00         [24] 2211 	mov	dptr,#_mac_spi_read_PARM_2
      0009F7 74 01            [12] 2212 	mov	a,#0x01
      0009F9 F0               [24] 2213 	movx	@dptr,a
      0009FA 75 82 19         [24] 2214 	mov	dpl, #0x19
                                   2215 ;	Eth.c:307: return count;
                                   2216 ;	Eth.c:308: }
      0009FD 02r00r00         [24] 2217 	ljmp	_mac_spi_read
                                   2218 ;------------------------------------------------------------
                                   2219 ;Allocation info for local variables in function 'update_ERXRDPT'
                                   2220 ;------------------------------------------------------------
                                   2221 ;new_address               Allocated with name '_update_ERXRDPT_new_address_10000_167'
                                   2222 ;high_byte                 Allocated with name '_update_ERXRDPT_high_byte_10000_168'
                                   2223 ;low_byte                  Allocated with name '_update_ERXRDPT_low_byte_10000_168'
                                   2224 ;------------------------------------------------------------
                                   2225 ;	Eth.c:310: void update_ERXRDPT(uint16_t new_address) {
                                   2226 ;	-----------------------------------------
                                   2227 ;	 function update_ERXRDPT
                                   2228 ;	-----------------------------------------
      000A00                       2229 _update_ERXRDPT:
      000A00 AF 83            [24] 2230 	mov	r7,dph
      000A02 E5 82            [12] 2231 	mov	a,dpl
      000A04 90r00r54         [24] 2232 	mov	dptr,#_update_ERXRDPT_new_address_10000_167
      000A07 F0               [24] 2233 	movx	@dptr,a
      000A08 EF               [12] 2234 	mov	a,r7
      000A09 A3               [24] 2235 	inc	dptr
      000A0A F0               [24] 2236 	movx	@dptr,a
                                   2237 ;	Eth.c:312: uint8_t high_byte = (uint8_t)((new_address >> 8) & 0xFF);
      000A0B 90r00r54         [24] 2238 	mov	dptr,#_update_ERXRDPT_new_address_10000_167
      000A0E E0               [24] 2239 	movx	a,@dptr
      000A0F FE               [12] 2240 	mov	r6,a
      000A10 A3               [24] 2241 	inc	dptr
      000A11 E0               [24] 2242 	movx	a,@dptr
      000A12 FF               [12] 2243 	mov	r7,a
      000A13 FD               [12] 2244 	mov	r5,a
                                   2245 ;	Eth.c:313: uint8_t low_byte = (uint8_t)(new_address & 0xFF);
      000A14 8E 04            [24] 2246 	mov	ar4,r6
                                   2247 ;	Eth.c:316: spi_control_write(0, 0x0C, low_byte);  // Write to low-byte register
      000A16 90r00r00         [24] 2248 	mov	dptr,#_spi_control_write_PARM_2
      000A19 74 0C            [12] 2249 	mov	a,#0x0c
      000A1B F0               [24] 2250 	movx	@dptr,a
      000A1C 90r00r00         [24] 2251 	mov	dptr,#_spi_control_write_PARM_3
      000A1F EC               [12] 2252 	mov	a,r4
      000A20 F0               [24] 2253 	movx	@dptr,a
      000A21 75 82 00         [24] 2254 	mov	dpl, #0x00
      000A24 C0 07            [24] 2255 	push	ar7
      000A26 C0 06            [24] 2256 	push	ar6
      000A28 C0 05            [24] 2257 	push	ar5
      000A2A 12r00r00         [24] 2258 	lcall	_spi_control_write
      000A2D D0 05            [24] 2259 	pop	ar5
      000A2F D0 06            [24] 2260 	pop	ar6
      000A31 D0 07            [24] 2261 	pop	ar7
                                   2262 ;	Eth.c:317: spi_control_write(0, 0x0D, high_byte); // Write to high-byte register
      000A33 90r00r00         [24] 2263 	mov	dptr,#_spi_control_write_PARM_2
      000A36 74 0D            [12] 2264 	mov	a,#0x0d
      000A38 F0               [24] 2265 	movx	@dptr,a
      000A39 90r00r00         [24] 2266 	mov	dptr,#_spi_control_write_PARM_3
      000A3C ED               [12] 2267 	mov	a,r5
      000A3D F0               [24] 2268 	movx	@dptr,a
      000A3E 75 82 00         [24] 2269 	mov	dpl, #0x00
      000A41 C0 07            [24] 2270 	push	ar7
      000A43 C0 06            [24] 2271 	push	ar6
      000A45 12r00r00         [24] 2272 	lcall	_spi_control_write
      000A48 D0 06            [24] 2273 	pop	ar6
      000A4A D0 07            [24] 2274 	pop	ar7
                                   2275 ;	Eth.c:320: printf("Updated ERXRDPT to 0x%04X\n", new_address);
      000A4C C0 06            [24] 2276 	push	ar6
      000A4E C0 07            [24] 2277 	push	ar7
      000A50 74rA4            [12] 2278 	mov	a,#___str_9
      000A52 C0 E0            [24] 2279 	push	acc
      000A54 74s01            [12] 2280 	mov	a,#(___str_9 >> 8)
      000A56 C0 E0            [24] 2281 	push	acc
      000A58 74 80            [12] 2282 	mov	a,#0x80
      000A5A C0 E0            [24] 2283 	push	acc
      000A5C 12r00r00         [24] 2284 	lcall	_printf
      000A5F E5 81            [12] 2285 	mov	a,sp
      000A61 24 FB            [12] 2286 	add	a,#0xfb
      000A63 F5 81            [12] 2287 	mov	sp,a
                                   2288 ;	Eth.c:321: }
      000A65 22               [24] 2289 	ret
                                   2290 	.area CSEG    (CODE)
                                   2291 	.area CONST   (CODE)
                                   2292 	.area CONST   (CODE)
      000000                       2293 ___str_0:
      000000 0A                    2294 	.db 0x0a
      000001 49 6E 76 61 6C 69 64  2295 	.ascii "Invalid Buffer Size. Buffer exceeds valid address range."
             20 42 75 66 66 65 72
             20 53 69 7A 65 2E 20
             42 75 66 66 65 72 20
             65 78 63 65 65 64 73
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 72 61 6E 67 65 2E
      000039 0A                    2296 	.db 0x0a
      00003A 00                    2297 	.db 0x00
                                   2298 	.area CSEG    (CODE)
                                   2299 	.area CONST   (CODE)
      00003B                       2300 ___str_1:
      00003B 41 52 50 20 72 65 71  2301 	.ascii "ARP request sent successfully."
             75 65 73 74 20 73 65
             6E 74 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79 2E
      000059 0A                    2302 	.db 0x0a
      00005A 0D                    2303 	.db 0x0d
      00005B 00                    2304 	.db 0x00
                                   2305 	.area CSEG    (CODE)
                                   2306 	.area CONST   (CODE)
      00005C                       2307 ___str_2:
      00005C 41 52 50 20 74 72 61  2308 	.ascii "ARP transmission failed. Check error flags."
             6E 73 6D 69 73 73 69
             6F 6E 20 66 61 69 6C
             65 64 2E 20 43 68 65
             63 6B 20 65 72 72 6F
             72 20 66 6C 61 67 73
             2E
      000087 0A                    2309 	.db 0x0a
      000088 0D                    2310 	.db 0x0d
      000089 00                    2311 	.db 0x00
                                   2312 	.area CSEG    (CODE)
                                   2313 	.area CONST   (CODE)
      00008A                       2314 ___str_3:
      00008A 54 72 61 6E 73 6D 69  2315 	.ascii "Transmission timeout. ENC28J60 may not be functioning correc"
             73 73 69 6F 6E 20 74
             69 6D 65 6F 75 74 2E
             20 45 4E 43 32 38 4A
             36 30 20 6D 61 79 20
             6E 6F 74 20 62 65 20
             66 75 6E 63 74 69 6F
             6E 69 6E 67 20 63 6F
             72 72 65 63
      0000C6 74 6C 79 2E           2316 	.ascii "tly."
      0000CA 0A                    2317 	.db 0x0a
      0000CB 0D                    2318 	.db 0x0d
      0000CC 00                    2319 	.db 0x00
                                   2320 	.area CSEG    (CODE)
                                   2321 	.area CONST   (CODE)
      0000CD                       2322 ___str_4:
      0000CD 49 6E 74 65 72 72 72  2323 	.ascii "Interrrrrrrruuuuuuuuuppppppppttttttt"
             72 72 72 72 72 75 75
             75 75 75 75 75 75 75
             70 70 70 70 70 70 70
             70 74 74 74 74 74 74
             74
      0000F1 0A                    2324 	.db 0x0a
      0000F2 0D                    2325 	.db 0x0d
      0000F3 00                    2326 	.db 0x00
                                   2327 	.area CSEG    (CODE)
                                   2328 	.area CONST   (CODE)
      0000F4                       2329 ___str_5:
      0000F4 0A                    2330 	.db 0x0a
      0000F5 49 6E 76 61 6C 69 64  2331 	.ascii "Invalid Buffer Range: Start 0x%04X, End 0x%04X"
             20 42 75 66 66 65 72
             20 52 61 6E 67 65 3A
             20 53 74 61 72 74 20
             30 78 25 30 34 58 2C
             20 45 6E 64 20 30 78
             25 30 34 58
      000123 0A                    2332 	.db 0x0a
      000124 00                    2333 	.db 0x00
                                   2334 	.area CSEG    (CODE)
                                   2335 	.area CONST   (CODE)
      000125                       2336 ___str_6:
      000125 0A                    2337 	.db 0x0a
      000126 42 75 66 66 65 72 20  2338 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      000152 0A                    2339 	.db 0x0a
      000153 00                    2340 	.db 0x00
                                   2341 	.area CSEG    (CODE)
                                   2342 	.area CONST   (CODE)
      000154                       2343 ___str_7:
      000154 0A                    2344 	.db 0x0a
      000155 45 4E 43 32 38 4A 36  2345 	.ascii "ENC28J60 Initialization Complete."
             30 20 49 6E 69 74 69
             61 6C 69 7A 61 74 69
             6F 6E 20 43 6F 6D 70
             6C 65 74 65 2E
      000176 0A                    2346 	.db 0x0a
      000177 00                    2347 	.db 0x00
                                   2348 	.area CSEG    (CODE)
                                   2349 	.area CONST   (CODE)
      000178                       2350 ___str_8:
      000178 4D 41 43 20 41 64 64  2351 	.ascii "MAC Address: %02X:%02X:%02X:%02X:%02X:%02X"
             72 65 73 73 3A 20 25
             30 32 58 3A 25 30 32
             58 3A 25 30 32 58 3A
             25 30 32 58 3A 25 30
             32 58 3A 25 30 32 58
      0001A2 0A                    2352 	.db 0x0a
      0001A3 00                    2353 	.db 0x00
                                   2354 	.area CSEG    (CODE)
                                   2355 	.area CONST   (CODE)
      0001A4                       2356 ___str_9:
      0001A4 55 70 64 61 74 65 64  2357 	.ascii "Updated ERXRDPT to 0x%04X"
             20 45 52 58 52 44 50
             54 20 74 6F 20 30 78
             25 30 34 58
      0001BD 0A                    2358 	.db 0x0a
      0001BE 00                    2359 	.db 0x00
                                   2360 	.area CSEG    (CODE)
                                   2361 	.area XINIT   (CODE)
                                   2362 	.area CABS    (ABS,CODE)
