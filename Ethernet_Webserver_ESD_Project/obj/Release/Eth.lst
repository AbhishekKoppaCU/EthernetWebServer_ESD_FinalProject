                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module Eth
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _external_interrupt0_isr
                                     12 	.globl _enc28j60_transmission_successful
                                     13 	.globl _wait_for_transmission_complete
                                     14 	.globl _enc28j60_set_transmit_pointers
                                     15 	.globl _enc28j60_start_transmission
                                     16 	.globl _delay_ms
                                     17 	.globl _set_mac_address
                                     18 	.globl _spi_control_write
                                     19 	.globl _spi_buffer_write
                                     20 	.globl _mac_spi_read
                                     21 	.globl _printf
                                     22 	.globl _TF1
                                     23 	.globl _TR1
                                     24 	.globl _TF0
                                     25 	.globl _TR0
                                     26 	.globl _IE1
                                     27 	.globl _IT1
                                     28 	.globl _IE0
                                     29 	.globl _IT0
                                     30 	.globl _SM0
                                     31 	.globl _SM1
                                     32 	.globl _SM2
                                     33 	.globl _REN
                                     34 	.globl _TB8
                                     35 	.globl _RB8
                                     36 	.globl _TI
                                     37 	.globl _RI
                                     38 	.globl _CY
                                     39 	.globl _AC
                                     40 	.globl _F0
                                     41 	.globl _RS1
                                     42 	.globl _RS0
                                     43 	.globl _OV
                                     44 	.globl _F1
                                     45 	.globl _P
                                     46 	.globl _RD
                                     47 	.globl _WR
                                     48 	.globl _T1
                                     49 	.globl _T0
                                     50 	.globl _INT1
                                     51 	.globl _INT0
                                     52 	.globl _TXD0
                                     53 	.globl _TXD
                                     54 	.globl _RXD0
                                     55 	.globl _RXD
                                     56 	.globl _P3_7
                                     57 	.globl _P3_6
                                     58 	.globl _P3_5
                                     59 	.globl _P3_4
                                     60 	.globl _P3_3
                                     61 	.globl _P3_2
                                     62 	.globl _P3_1
                                     63 	.globl _P3_0
                                     64 	.globl _P2_7
                                     65 	.globl _P2_6
                                     66 	.globl _P2_5
                                     67 	.globl _P2_4
                                     68 	.globl _P2_3
                                     69 	.globl _P2_2
                                     70 	.globl _P2_1
                                     71 	.globl _P2_0
                                     72 	.globl _P1_7
                                     73 	.globl _P1_6
                                     74 	.globl _P1_5
                                     75 	.globl _P1_4
                                     76 	.globl _P1_3
                                     77 	.globl _P1_2
                                     78 	.globl _P1_1
                                     79 	.globl _P1_0
                                     80 	.globl _P0_7
                                     81 	.globl _P0_6
                                     82 	.globl _P0_5
                                     83 	.globl _P0_4
                                     84 	.globl _P0_3
                                     85 	.globl _P0_2
                                     86 	.globl _P0_1
                                     87 	.globl _P0_0
                                     88 	.globl _PS
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _EA
                                     94 	.globl _ES
                                     95 	.globl _ET1
                                     96 	.globl _EX1
                                     97 	.globl _ET0
                                     98 	.globl _EX0
                                     99 	.globl _BREG_F7
                                    100 	.globl _BREG_F6
                                    101 	.globl _BREG_F5
                                    102 	.globl _BREG_F4
                                    103 	.globl _BREG_F3
                                    104 	.globl _BREG_F2
                                    105 	.globl _BREG_F1
                                    106 	.globl _BREG_F0
                                    107 	.globl _P5_7
                                    108 	.globl _P5_6
                                    109 	.globl _P5_5
                                    110 	.globl _P5_4
                                    111 	.globl _P5_3
                                    112 	.globl _P5_2
                                    113 	.globl _P5_1
                                    114 	.globl _P5_0
                                    115 	.globl _P4_7
                                    116 	.globl _P4_6
                                    117 	.globl _P4_5
                                    118 	.globl _P4_4
                                    119 	.globl _P4_3
                                    120 	.globl _P4_2
                                    121 	.globl _P4_1
                                    122 	.globl _P4_0
                                    123 	.globl _PX0L
                                    124 	.globl _PT0L
                                    125 	.globl _PX1L
                                    126 	.globl _PT1L
                                    127 	.globl _PSL
                                    128 	.globl _PT2L
                                    129 	.globl _PPCL
                                    130 	.globl _EC
                                    131 	.globl _CCF0
                                    132 	.globl _CCF1
                                    133 	.globl _CCF2
                                    134 	.globl _CCF3
                                    135 	.globl _CCF4
                                    136 	.globl _CR
                                    137 	.globl _CF
                                    138 	.globl _TF2
                                    139 	.globl _EXF2
                                    140 	.globl _RCLK
                                    141 	.globl _TCLK
                                    142 	.globl _EXEN2
                                    143 	.globl _TR2
                                    144 	.globl _C_T2
                                    145 	.globl _CP_RL2
                                    146 	.globl _T2CON_7
                                    147 	.globl _T2CON_6
                                    148 	.globl _T2CON_5
                                    149 	.globl _T2CON_4
                                    150 	.globl _T2CON_3
                                    151 	.globl _T2CON_2
                                    152 	.globl _T2CON_1
                                    153 	.globl _T2CON_0
                                    154 	.globl _PT2
                                    155 	.globl _ET2
                                    156 	.globl _TMOD
                                    157 	.globl _TL1
                                    158 	.globl _TL0
                                    159 	.globl _TH1
                                    160 	.globl _TH0
                                    161 	.globl _TCON
                                    162 	.globl _SP
                                    163 	.globl _SCON
                                    164 	.globl _SBUF0
                                    165 	.globl _SBUF
                                    166 	.globl _PSW
                                    167 	.globl _PCON
                                    168 	.globl _P3
                                    169 	.globl _P2
                                    170 	.globl _P1
                                    171 	.globl _P0
                                    172 	.globl _IP
                                    173 	.globl _IE
                                    174 	.globl _DP0L
                                    175 	.globl _DPL
                                    176 	.globl _DP0H
                                    177 	.globl _DPH
                                    178 	.globl _B
                                    179 	.globl _ACC
                                    180 	.globl _EECON
                                    181 	.globl _KBF
                                    182 	.globl _KBE
                                    183 	.globl _KBLS
                                    184 	.globl _BRL
                                    185 	.globl _BDRCON
                                    186 	.globl _T2MOD
                                    187 	.globl _SPDAT
                                    188 	.globl _SPSTA
                                    189 	.globl _SPCON
                                    190 	.globl _SADEN
                                    191 	.globl _SADDR
                                    192 	.globl _WDTPRG
                                    193 	.globl _WDTRST
                                    194 	.globl _P5
                                    195 	.globl _P4
                                    196 	.globl _IPH1
                                    197 	.globl _IPL1
                                    198 	.globl _IPH0
                                    199 	.globl _IPL0
                                    200 	.globl _IEN1
                                    201 	.globl _IEN0
                                    202 	.globl _CMOD
                                    203 	.globl _CL
                                    204 	.globl _CH
                                    205 	.globl _CCON
                                    206 	.globl _CCAPM4
                                    207 	.globl _CCAPM3
                                    208 	.globl _CCAPM2
                                    209 	.globl _CCAPM1
                                    210 	.globl _CCAPM0
                                    211 	.globl _CCAP4L
                                    212 	.globl _CCAP3L
                                    213 	.globl _CCAP2L
                                    214 	.globl _CCAP1L
                                    215 	.globl _CCAP0L
                                    216 	.globl _CCAP4H
                                    217 	.globl _CCAP3H
                                    218 	.globl _CCAP2H
                                    219 	.globl _CCAP1H
                                    220 	.globl _CCAP0H
                                    221 	.globl _CKCON1
                                    222 	.globl _CKCON0
                                    223 	.globl _CKRL
                                    224 	.globl _AUXR1
                                    225 	.globl _AUXR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T2CON
                                    231 	.globl _target_ip
                                    232 	.globl _source_ip
                                    233 	.globl _dest_mac
                                    234 	.globl _source_mac
                                    235 	.globl _enc28j60_set_transmit_pointers_PARM_2
                                    236 	.globl _enc28j60_init_rx_buffer_PARM_2
                                    237 	.globl _enc28j60_init_rx_buffer
                                    238 	.globl _RX_disable
                                    239 	.globl _RX_enable
                                    240 	.globl _send_arp_request
                                    241 ;--------------------------------------------------------
                                    242 ; special function registers
                                    243 ;--------------------------------------------------------
                                    244 	.area RSEG    (ABS,DATA)
      000000                        245 	.org 0x0000
                           0000C8   246 _T2CON	=	0x00c8
                           0000CA   247 _RCAP2L	=	0x00ca
                           0000CB   248 _RCAP2H	=	0x00cb
                           0000CC   249 _TL2	=	0x00cc
                           0000CD   250 _TH2	=	0x00cd
                           00008E   251 _AUXR	=	0x008e
                           0000A2   252 _AUXR1	=	0x00a2
                           000097   253 _CKRL	=	0x0097
                           00008F   254 _CKCON0	=	0x008f
                           0000AF   255 _CKCON1	=	0x00af
                           0000FA   256 _CCAP0H	=	0x00fa
                           0000FB   257 _CCAP1H	=	0x00fb
                           0000FC   258 _CCAP2H	=	0x00fc
                           0000FD   259 _CCAP3H	=	0x00fd
                           0000FE   260 _CCAP4H	=	0x00fe
                           0000EA   261 _CCAP0L	=	0x00ea
                           0000EB   262 _CCAP1L	=	0x00eb
                           0000EC   263 _CCAP2L	=	0x00ec
                           0000ED   264 _CCAP3L	=	0x00ed
                           0000EE   265 _CCAP4L	=	0x00ee
                           0000DA   266 _CCAPM0	=	0x00da
                           0000DB   267 _CCAPM1	=	0x00db
                           0000DC   268 _CCAPM2	=	0x00dc
                           0000DD   269 _CCAPM3	=	0x00dd
                           0000DE   270 _CCAPM4	=	0x00de
                           0000D8   271 _CCON	=	0x00d8
                           0000F9   272 _CH	=	0x00f9
                           0000E9   273 _CL	=	0x00e9
                           0000D9   274 _CMOD	=	0x00d9
                           0000A8   275 _IEN0	=	0x00a8
                           0000B1   276 _IEN1	=	0x00b1
                           0000B8   277 _IPL0	=	0x00b8
                           0000B7   278 _IPH0	=	0x00b7
                           0000B2   279 _IPL1	=	0x00b2
                           0000B3   280 _IPH1	=	0x00b3
                           0000C0   281 _P4	=	0x00c0
                           0000E8   282 _P5	=	0x00e8
                           0000A6   283 _WDTRST	=	0x00a6
                           0000A7   284 _WDTPRG	=	0x00a7
                           0000A9   285 _SADDR	=	0x00a9
                           0000B9   286 _SADEN	=	0x00b9
                           0000C3   287 _SPCON	=	0x00c3
                           0000C4   288 _SPSTA	=	0x00c4
                           0000C5   289 _SPDAT	=	0x00c5
                           0000C9   290 _T2MOD	=	0x00c9
                           00009B   291 _BDRCON	=	0x009b
                           00009A   292 _BRL	=	0x009a
                           00009C   293 _KBLS	=	0x009c
                           00009D   294 _KBE	=	0x009d
                           00009E   295 _KBF	=	0x009e
                           0000D2   296 _EECON	=	0x00d2
                           0000E0   297 _ACC	=	0x00e0
                           0000F0   298 _B	=	0x00f0
                           000083   299 _DPH	=	0x0083
                           000083   300 _DP0H	=	0x0083
                           000082   301 _DPL	=	0x0082
                           000082   302 _DP0L	=	0x0082
                           0000A8   303 _IE	=	0x00a8
                           0000B8   304 _IP	=	0x00b8
                           000080   305 _P0	=	0x0080
                           000090   306 _P1	=	0x0090
                           0000A0   307 _P2	=	0x00a0
                           0000B0   308 _P3	=	0x00b0
                           000087   309 _PCON	=	0x0087
                           0000D0   310 _PSW	=	0x00d0
                           000099   311 _SBUF	=	0x0099
                           000099   312 _SBUF0	=	0x0099
                           000098   313 _SCON	=	0x0098
                           000081   314 _SP	=	0x0081
                           000088   315 _TCON	=	0x0088
                           00008C   316 _TH0	=	0x008c
                           00008D   317 _TH1	=	0x008d
                           00008A   318 _TL0	=	0x008a
                           00008B   319 _TL1	=	0x008b
                           000089   320 _TMOD	=	0x0089
                                    321 ;--------------------------------------------------------
                                    322 ; special function bits
                                    323 ;--------------------------------------------------------
                                    324 	.area RSEG    (ABS,DATA)
      000000                        325 	.org 0x0000
                           0000AD   326 _ET2	=	0x00ad
                           0000BD   327 _PT2	=	0x00bd
                           0000C8   328 _T2CON_0	=	0x00c8
                           0000C9   329 _T2CON_1	=	0x00c9
                           0000CA   330 _T2CON_2	=	0x00ca
                           0000CB   331 _T2CON_3	=	0x00cb
                           0000CC   332 _T2CON_4	=	0x00cc
                           0000CD   333 _T2CON_5	=	0x00cd
                           0000CE   334 _T2CON_6	=	0x00ce
                           0000CF   335 _T2CON_7	=	0x00cf
                           0000C8   336 _CP_RL2	=	0x00c8
                           0000C9   337 _C_T2	=	0x00c9
                           0000CA   338 _TR2	=	0x00ca
                           0000CB   339 _EXEN2	=	0x00cb
                           0000CC   340 _TCLK	=	0x00cc
                           0000CD   341 _RCLK	=	0x00cd
                           0000CE   342 _EXF2	=	0x00ce
                           0000CF   343 _TF2	=	0x00cf
                           0000DF   344 _CF	=	0x00df
                           0000DE   345 _CR	=	0x00de
                           0000DC   346 _CCF4	=	0x00dc
                           0000DB   347 _CCF3	=	0x00db
                           0000DA   348 _CCF2	=	0x00da
                           0000D9   349 _CCF1	=	0x00d9
                           0000D8   350 _CCF0	=	0x00d8
                           0000AE   351 _EC	=	0x00ae
                           0000BE   352 _PPCL	=	0x00be
                           0000BD   353 _PT2L	=	0x00bd
                           0000BC   354 _PSL	=	0x00bc
                           0000BB   355 _PT1L	=	0x00bb
                           0000BA   356 _PX1L	=	0x00ba
                           0000B9   357 _PT0L	=	0x00b9
                           0000B8   358 _PX0L	=	0x00b8
                           0000C0   359 _P4_0	=	0x00c0
                           0000C1   360 _P4_1	=	0x00c1
                           0000C2   361 _P4_2	=	0x00c2
                           0000C3   362 _P4_3	=	0x00c3
                           0000C4   363 _P4_4	=	0x00c4
                           0000C5   364 _P4_5	=	0x00c5
                           0000C6   365 _P4_6	=	0x00c6
                           0000C7   366 _P4_7	=	0x00c7
                           0000E8   367 _P5_0	=	0x00e8
                           0000E9   368 _P5_1	=	0x00e9
                           0000EA   369 _P5_2	=	0x00ea
                           0000EB   370 _P5_3	=	0x00eb
                           0000EC   371 _P5_4	=	0x00ec
                           0000ED   372 _P5_5	=	0x00ed
                           0000EE   373 _P5_6	=	0x00ee
                           0000EF   374 _P5_7	=	0x00ef
                           0000F0   375 _BREG_F0	=	0x00f0
                           0000F1   376 _BREG_F1	=	0x00f1
                           0000F2   377 _BREG_F2	=	0x00f2
                           0000F3   378 _BREG_F3	=	0x00f3
                           0000F4   379 _BREG_F4	=	0x00f4
                           0000F5   380 _BREG_F5	=	0x00f5
                           0000F6   381 _BREG_F6	=	0x00f6
                           0000F7   382 _BREG_F7	=	0x00f7
                           0000A8   383 _EX0	=	0x00a8
                           0000A9   384 _ET0	=	0x00a9
                           0000AA   385 _EX1	=	0x00aa
                           0000AB   386 _ET1	=	0x00ab
                           0000AC   387 _ES	=	0x00ac
                           0000AF   388 _EA	=	0x00af
                           0000B8   389 _PX0	=	0x00b8
                           0000B9   390 _PT0	=	0x00b9
                           0000BA   391 _PX1	=	0x00ba
                           0000BB   392 _PT1	=	0x00bb
                           0000BC   393 _PS	=	0x00bc
                           000080   394 _P0_0	=	0x0080
                           000081   395 _P0_1	=	0x0081
                           000082   396 _P0_2	=	0x0082
                           000083   397 _P0_3	=	0x0083
                           000084   398 _P0_4	=	0x0084
                           000085   399 _P0_5	=	0x0085
                           000086   400 _P0_6	=	0x0086
                           000087   401 _P0_7	=	0x0087
                           000090   402 _P1_0	=	0x0090
                           000091   403 _P1_1	=	0x0091
                           000092   404 _P1_2	=	0x0092
                           000093   405 _P1_3	=	0x0093
                           000094   406 _P1_4	=	0x0094
                           000095   407 _P1_5	=	0x0095
                           000096   408 _P1_6	=	0x0096
                           000097   409 _P1_7	=	0x0097
                           0000A0   410 _P2_0	=	0x00a0
                           0000A1   411 _P2_1	=	0x00a1
                           0000A2   412 _P2_2	=	0x00a2
                           0000A3   413 _P2_3	=	0x00a3
                           0000A4   414 _P2_4	=	0x00a4
                           0000A5   415 _P2_5	=	0x00a5
                           0000A6   416 _P2_6	=	0x00a6
                           0000A7   417 _P2_7	=	0x00a7
                           0000B0   418 _P3_0	=	0x00b0
                           0000B1   419 _P3_1	=	0x00b1
                           0000B2   420 _P3_2	=	0x00b2
                           0000B3   421 _P3_3	=	0x00b3
                           0000B4   422 _P3_4	=	0x00b4
                           0000B5   423 _P3_5	=	0x00b5
                           0000B6   424 _P3_6	=	0x00b6
                           0000B7   425 _P3_7	=	0x00b7
                           0000B0   426 _RXD	=	0x00b0
                           0000B0   427 _RXD0	=	0x00b0
                           0000B1   428 _TXD	=	0x00b1
                           0000B1   429 _TXD0	=	0x00b1
                           0000B2   430 _INT0	=	0x00b2
                           0000B3   431 _INT1	=	0x00b3
                           0000B4   432 _T0	=	0x00b4
                           0000B5   433 _T1	=	0x00b5
                           0000B6   434 _WR	=	0x00b6
                           0000B7   435 _RD	=	0x00b7
                           0000D0   436 _P	=	0x00d0
                           0000D1   437 _F1	=	0x00d1
                           0000D2   438 _OV	=	0x00d2
                           0000D3   439 _RS0	=	0x00d3
                           0000D4   440 _RS1	=	0x00d4
                           0000D5   441 _F0	=	0x00d5
                           0000D6   442 _AC	=	0x00d6
                           0000D7   443 _CY	=	0x00d7
                           000098   444 _RI	=	0x0098
                           000099   445 _TI	=	0x0099
                           00009A   446 _RB8	=	0x009a
                           00009B   447 _TB8	=	0x009b
                           00009C   448 _REN	=	0x009c
                           00009D   449 _SM2	=	0x009d
                           00009E   450 _SM1	=	0x009e
                           00009F   451 _SM0	=	0x009f
                           000088   452 _IT0	=	0x0088
                           000089   453 _IE0	=	0x0089
                           00008A   454 _IT1	=	0x008a
                           00008B   455 _IE1	=	0x008b
                           00008C   456 _TR0	=	0x008c
                           00008D   457 _TF0	=	0x008d
                           00008E   458 _TR1	=	0x008e
                           00008F   459 _TF1	=	0x008f
                                    460 ;--------------------------------------------------------
                                    461 ; overlayable register banks
                                    462 ;--------------------------------------------------------
                                    463 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        464 	.ds 8
                                    465 ;--------------------------------------------------------
                                    466 ; overlayable bit register bank
                                    467 ;--------------------------------------------------------
                                    468 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        469 bits:
      000000                        470 	.ds 1
                           008000   471 	b0 = bits[0]
                           008100   472 	b1 = bits[1]
                           008200   473 	b2 = bits[2]
                           008300   474 	b3 = bits[3]
                           008400   475 	b4 = bits[4]
                           008500   476 	b5 = bits[5]
                           008600   477 	b6 = bits[6]
                           008700   478 	b7 = bits[7]
                                    479 ;--------------------------------------------------------
                                    480 ; internal ram data
                                    481 ;--------------------------------------------------------
                                    482 	.area DSEG    (DATA)
                                    483 ;--------------------------------------------------------
                                    484 ; overlayable items in internal ram
                                    485 ;--------------------------------------------------------
                                    486 ;--------------------------------------------------------
                                    487 ; indirectly addressable internal ram data
                                    488 ;--------------------------------------------------------
                                    489 	.area ISEG    (DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; absolute internal ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area IABS    (ABS,DATA)
                                    494 	.area IABS    (ABS,DATA)
                                    495 ;--------------------------------------------------------
                                    496 ; bit data
                                    497 ;--------------------------------------------------------
                                    498 	.area BSEG    (BIT)
      000000                        499 _enc28j60_transmission_successful_sloc0_1_0:
      000000                        500 	.ds 1
                                    501 ;--------------------------------------------------------
                                    502 ; paged external ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area PSEG    (PAG,XDATA)
                                    505 ;--------------------------------------------------------
                                    506 ; uninitialized external ram data
                                    507 ;--------------------------------------------------------
                                    508 	.area XSEG    (XDATA)
      000000                        509 _delay_ms_ms_10000_71:
      000000                        510 	.ds 2
      000002                        511 _delay_ms_i_20000_73:
      000002                        512 	.ds 4
      000006                        513 _enc28j60_init_rx_buffer_PARM_2:
      000006                        514 	.ds 2
      000008                        515 _enc28j60_init_rx_buffer_start_address_10000_77:
      000008                        516 	.ds 2
      00000A                        517 _enc28j60_set_transmit_pointers_PARM_2:
      00000A                        518 	.ds 2
      00000C                        519 _enc28j60_set_transmit_pointers_start_address_10000_80:
      00000C                        520 	.ds 2
      00000E                        521 _wait_for_transmission_complete_timeout_ms_10000_82:
      00000E                        522 	.ds 2
      000010                        523 _send_arp_request_source_mac_10000_92:
      000010                        524 	.ds 6
      000016                        525 _send_arp_request_dest_mac_10000_92:
      000016                        526 	.ds 6
      00001C                        527 _send_arp_request_source_ip_10000_92:
      00001C                        528 	.ds 4
      000020                        529 _send_arp_request_target_ip_10000_92:
      000020                        530 	.ds 4
      000024                        531 _send_arp_request_arp_packet_10000_92:
      000024                        532 	.ds 43
                                    533 ;--------------------------------------------------------
                                    534 ; absolute external ram data
                                    535 ;--------------------------------------------------------
                                    536 	.area XABS    (ABS,XDATA)
                                    537 ;--------------------------------------------------------
                                    538 ; initialized external ram data
                                    539 ;--------------------------------------------------------
                                    540 	.area XISEG   (XDATA)
      000000                        541 _source_mac::
      000000                        542 	.ds 6
      000006                        543 _dest_mac::
      000006                        544 	.ds 6
      00000C                        545 _source_ip::
      00000C                        546 	.ds 4
      000010                        547 _target_ip::
      000010                        548 	.ds 4
                                    549 	.area HOME    (CODE)
                                    550 	.area GSINIT0 (CODE)
                                    551 	.area GSINIT1 (CODE)
                                    552 	.area GSINIT2 (CODE)
                                    553 	.area GSINIT3 (CODE)
                                    554 	.area GSINIT4 (CODE)
                                    555 	.area GSINIT5 (CODE)
                                    556 	.area GSINIT  (CODE)
                                    557 	.area GSFINAL (CODE)
                                    558 	.area CSEG    (CODE)
                                    559 ;--------------------------------------------------------
                                    560 ; global & static initialisations
                                    561 ;--------------------------------------------------------
                                    562 	.area HOME    (CODE)
                                    563 	.area GSINIT  (CODE)
                                    564 	.area GSFINAL (CODE)
                                    565 	.area GSINIT  (CODE)
                                    566 ;--------------------------------------------------------
                                    567 ; Home
                                    568 ;--------------------------------------------------------
                                    569 	.area HOME    (CODE)
                                    570 	.area HOME    (CODE)
                                    571 ;--------------------------------------------------------
                                    572 ; code
                                    573 ;--------------------------------------------------------
                                    574 	.area CSEG    (CODE)
                                    575 ;------------------------------------------------------------
                                    576 ;Allocation info for local variables in function 'set_mac_address'
                                    577 ;------------------------------------------------------------
                                    578 ;mac_address               Allocated with name '_set_mac_address_mac_address_10000_69'
                                    579 ;------------------------------------------------------------
                                    580 ;	Eth.c:35: void set_mac_address(uint8_t* mac_address)
                                    581 ;	-----------------------------------------
                                    582 ;	 function set_mac_address
                                    583 ;	-----------------------------------------
      000000                        584 _set_mac_address:
                           000007   585 	ar7 = 0x07
                           000006   586 	ar6 = 0x06
                           000005   587 	ar5 = 0x05
                           000004   588 	ar4 = 0x04
                           000003   589 	ar3 = 0x03
                           000002   590 	ar2 = 0x02
                           000001   591 	ar1 = 0x01
                           000000   592 	ar0 = 0x00
                                    593 ;	Eth.c:41: spi_control_write(3, 0x01, 0x02);  // MAADR6
      000000 90r00r00         [24]  594 	mov	dptr,#_spi_control_write_PARM_2
      000003 74 01            [12]  595 	mov	a,#0x01
      000005 F0               [24]  596 	movx	@dptr,a
      000006 90r00r00         [24]  597 	mov	dptr,#_spi_control_write_PARM_3
      000009 04               [12]  598 	inc	a
      00000A F0               [24]  599 	movx	@dptr,a
      00000B 75 82 03         [24]  600 	mov	dpl, #0x03
      00000E 12r00r00         [24]  601 	lcall	_spi_control_write
                                    602 ;	Eth.c:42: spi_control_write(3, 0x00, 0x11);  // MAADR5
      000011 90r00r00         [24]  603 	mov	dptr,#_spi_control_write_PARM_2
      000014 E4               [12]  604 	clr	a
      000015 F0               [24]  605 	movx	@dptr,a
      000016 90r00r00         [24]  606 	mov	dptr,#_spi_control_write_PARM_3
      000019 74 11            [12]  607 	mov	a,#0x11
      00001B F0               [24]  608 	movx	@dptr,a
      00001C 75 82 03         [24]  609 	mov	dpl, #0x03
      00001F 12r00r00         [24]  610 	lcall	_spi_control_write
                                    611 ;	Eth.c:43: spi_control_write(3, 0x03, 0x22);  // MAADR4
      000022 90r00r00         [24]  612 	mov	dptr,#_spi_control_write_PARM_2
      000025 74 03            [12]  613 	mov	a,#0x03
      000027 F0               [24]  614 	movx	@dptr,a
      000028 90r00r00         [24]  615 	mov	dptr,#_spi_control_write_PARM_3
      00002B 74 22            [12]  616 	mov	a,#0x22
      00002D F0               [24]  617 	movx	@dptr,a
      00002E 75 82 03         [24]  618 	mov	dpl, #0x03
      000031 12r00r00         [24]  619 	lcall	_spi_control_write
                                    620 ;	Eth.c:44: spi_control_write(3, 0x02, 0x33);  // MAADR3
      000034 90r00r00         [24]  621 	mov	dptr,#_spi_control_write_PARM_2
      000037 74 02            [12]  622 	mov	a,#0x02
      000039 F0               [24]  623 	movx	@dptr,a
      00003A 90r00r00         [24]  624 	mov	dptr,#_spi_control_write_PARM_3
      00003D 74 33            [12]  625 	mov	a,#0x33
      00003F F0               [24]  626 	movx	@dptr,a
      000040 75 82 03         [24]  627 	mov	dpl, #0x03
      000043 12r00r00         [24]  628 	lcall	_spi_control_write
                                    629 ;	Eth.c:45: spi_control_write(3, 0x05, 0x44);  // MAADR2
      000046 90r00r00         [24]  630 	mov	dptr,#_spi_control_write_PARM_2
      000049 74 05            [12]  631 	mov	a,#0x05
      00004B F0               [24]  632 	movx	@dptr,a
      00004C 90r00r00         [24]  633 	mov	dptr,#_spi_control_write_PARM_3
      00004F 74 44            [12]  634 	mov	a,#0x44
      000051 F0               [24]  635 	movx	@dptr,a
      000052 75 82 03         [24]  636 	mov	dpl, #0x03
      000055 12r00r00         [24]  637 	lcall	_spi_control_write
                                    638 ;	Eth.c:46: spi_control_write(3, 0x04, 0x55);  // MAADR1
      000058 90r00r00         [24]  639 	mov	dptr,#_spi_control_write_PARM_2
      00005B 74 04            [12]  640 	mov	a,#0x04
      00005D F0               [24]  641 	movx	@dptr,a
      00005E 90r00r00         [24]  642 	mov	dptr,#_spi_control_write_PARM_3
      000061 74 55            [12]  643 	mov	a,#0x55
      000063 F0               [24]  644 	movx	@dptr,a
      000064 75 82 03         [24]  645 	mov	dpl, #0x03
                                    646 ;	Eth.c:48: }
      000067 02r00r00         [24]  647 	ljmp	_spi_control_write
                                    648 ;------------------------------------------------------------
                                    649 ;Allocation info for local variables in function 'delay_ms'
                                    650 ;------------------------------------------------------------
                                    651 ;ms                        Allocated with name '_delay_ms_ms_10000_71'
                                    652 ;i                         Allocated with name '_delay_ms_i_20000_73'
                                    653 ;------------------------------------------------------------
                                    654 ;	Eth.c:51: void delay_ms(uint16_t ms)
                                    655 ;	-----------------------------------------
                                    656 ;	 function delay_ms
                                    657 ;	-----------------------------------------
      00006A                        658 _delay_ms:
      00006A AF 83            [24]  659 	mov	r7,dph
      00006C E5 82            [12]  660 	mov	a,dpl
      00006E 90r00r00         [24]  661 	mov	dptr,#_delay_ms_ms_10000_71
      000071 F0               [24]  662 	movx	@dptr,a
      000072 EF               [12]  663 	mov	a,r7
      000073 A3               [24]  664 	inc	dptr
      000074 F0               [24]  665 	movx	@dptr,a
                                    666 ;	Eth.c:53: for (volatile uint32_t i = 0; i < ms * 1000; i++)
      000075 90r00r02         [24]  667 	mov	dptr,#_delay_ms_i_20000_73
      000078 E4               [12]  668 	clr	a
      000079 F0               [24]  669 	movx	@dptr,a
      00007A A3               [24]  670 	inc	dptr
      00007B F0               [24]  671 	movx	@dptr,a
      00007C A3               [24]  672 	inc	dptr
      00007D F0               [24]  673 	movx	@dptr,a
      00007E A3               [24]  674 	inc	dptr
      00007F F0               [24]  675 	movx	@dptr,a
      000080 90r00r00         [24]  676 	mov	dptr,#_delay_ms_ms_10000_71
      000083 E0               [24]  677 	movx	a,@dptr
      000084 FE               [12]  678 	mov	r6,a
      000085 A3               [24]  679 	inc	dptr
      000086 E0               [24]  680 	movx	a,@dptr
      000087 FF               [12]  681 	mov	r7,a
      000088                        682 00103$:
      000088 90r00r00         [24]  683 	mov	dptr,#__mulint_PARM_2
      00008B EE               [12]  684 	mov	a,r6
      00008C F0               [24]  685 	movx	@dptr,a
      00008D EF               [12]  686 	mov	a,r7
      00008E A3               [24]  687 	inc	dptr
      00008F F0               [24]  688 	movx	@dptr,a
      000090 90 03 E8         [24]  689 	mov	dptr,#0x03e8
      000093 C0 07            [24]  690 	push	ar7
      000095 C0 06            [24]  691 	push	ar6
      000097 12r00r00         [24]  692 	lcall	__mulint
      00009A AC 82            [24]  693 	mov	r4, dpl
      00009C AD 83            [24]  694 	mov	r5, dph
      00009E D0 06            [24]  695 	pop	ar6
      0000A0 D0 07            [24]  696 	pop	ar7
      0000A2 90r00r02         [24]  697 	mov	dptr,#_delay_ms_i_20000_73
      0000A5 E0               [24]  698 	movx	a,@dptr
      0000A6 F8               [12]  699 	mov	r0,a
      0000A7 A3               [24]  700 	inc	dptr
      0000A8 E0               [24]  701 	movx	a,@dptr
      0000A9 F9               [12]  702 	mov	r1,a
      0000AA A3               [24]  703 	inc	dptr
      0000AB E0               [24]  704 	movx	a,@dptr
      0000AC FA               [12]  705 	mov	r2,a
      0000AD A3               [24]  706 	inc	dptr
      0000AE E0               [24]  707 	movx	a,@dptr
      0000AF FB               [12]  708 	mov	r3,a
      0000B0 C0 06            [24]  709 	push	ar6
      0000B2 C0 07            [24]  710 	push	ar7
      0000B4 7E 00            [12]  711 	mov	r6,#0x00
      0000B6 7F 00            [12]  712 	mov	r7,#0x00
      0000B8 C3               [12]  713 	clr	c
      0000B9 E8               [12]  714 	mov	a,r0
      0000BA 9C               [12]  715 	subb	a,r4
      0000BB E9               [12]  716 	mov	a,r1
      0000BC 9D               [12]  717 	subb	a,r5
      0000BD EA               [12]  718 	mov	a,r2
      0000BE 9E               [12]  719 	subb	a,r6
      0000BF EB               [12]  720 	mov	a,r3
      0000C0 9F               [12]  721 	subb	a,r7
      0000C1 D0 07            [24]  722 	pop	ar7
      0000C3 D0 06            [24]  723 	pop	ar6
      0000C5 50 23            [24]  724 	jnc	00105$
      0000C7 90r00r02         [24]  725 	mov	dptr,#_delay_ms_i_20000_73
      0000CA E0               [24]  726 	movx	a,@dptr
      0000CB FA               [12]  727 	mov	r2,a
      0000CC A3               [24]  728 	inc	dptr
      0000CD E0               [24]  729 	movx	a,@dptr
      0000CE FB               [12]  730 	mov	r3,a
      0000CF A3               [24]  731 	inc	dptr
      0000D0 E0               [24]  732 	movx	a,@dptr
      0000D1 FC               [12]  733 	mov	r4,a
      0000D2 A3               [24]  734 	inc	dptr
      0000D3 E0               [24]  735 	movx	a,@dptr
      0000D4 FD               [12]  736 	mov	r5,a
      0000D5 90r00r02         [24]  737 	mov	dptr,#_delay_ms_i_20000_73
      0000D8 74 01            [12]  738 	mov	a,#0x01
      0000DA 2A               [12]  739 	add	a, r2
      0000DB F0               [24]  740 	movx	@dptr,a
      0000DC E4               [12]  741 	clr	a
      0000DD 3B               [12]  742 	addc	a, r3
      0000DE A3               [24]  743 	inc	dptr
      0000DF F0               [24]  744 	movx	@dptr,a
      0000E0 E4               [12]  745 	clr	a
      0000E1 3C               [12]  746 	addc	a, r4
      0000E2 A3               [24]  747 	inc	dptr
      0000E3 F0               [24]  748 	movx	@dptr,a
      0000E4 E4               [12]  749 	clr	a
      0000E5 3D               [12]  750 	addc	a, r5
      0000E6 A3               [24]  751 	inc	dptr
      0000E7 F0               [24]  752 	movx	@dptr,a
      0000E8 80 9E            [24]  753 	sjmp	00103$
      0000EA                        754 00105$:
                                    755 ;	Eth.c:57: }
      0000EA 22               [24]  756 	ret
                                    757 ;------------------------------------------------------------
                                    758 ;Allocation info for local variables in function 'enc28j60_start_transmission'
                                    759 ;------------------------------------------------------------
                                    760 ;econ1                     Allocated with name '_enc28j60_start_transmission_econ1_10000_76'
                                    761 ;------------------------------------------------------------
                                    762 ;	Eth.c:59: void enc28j60_start_transmission(void)
                                    763 ;	-----------------------------------------
                                    764 ;	 function enc28j60_start_transmission
                                    765 ;	-----------------------------------------
      0000EB                        766 _enc28j60_start_transmission:
                                    767 ;	Eth.c:61: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      0000EB 90r00r00         [24]  768 	mov	dptr,#_mac_spi_read_PARM_2
      0000EE E4               [12]  769 	clr	a
      0000EF F0               [24]  770 	movx	@dptr,a
      0000F0 75 82 1F         [24]  771 	mov	dpl, #0x1f
      0000F3 12r00r00         [24]  772 	lcall	_mac_spi_read
      0000F6 E5 82            [12]  773 	mov	a, dpl
                                    774 ;	Eth.c:62: econ1 |= 0x08; // Set TXRTS (bit 3)
      0000F8 44 08            [12]  775 	orl	a,#0x08
      0000FA FF               [12]  776 	mov	r7,a
                                    777 ;	Eth.c:63: spi_control_write(0, 0x1F, econ1); // Write back to ECON1
      0000FB 90r00r00         [24]  778 	mov	dptr,#_spi_control_write_PARM_2
      0000FE 74 1F            [12]  779 	mov	a,#0x1f
      000100 F0               [24]  780 	movx	@dptr,a
      000101 90r00r00         [24]  781 	mov	dptr,#_spi_control_write_PARM_3
      000104 EF               [12]  782 	mov	a,r7
      000105 F0               [24]  783 	movx	@dptr,a
      000106 75 82 00         [24]  784 	mov	dpl, #0x00
                                    785 ;	Eth.c:64: }
      000109 02r00r00         [24]  786 	ljmp	_spi_control_write
                                    787 ;------------------------------------------------------------
                                    788 ;Allocation info for local variables in function 'enc28j60_init_rx_buffer'
                                    789 ;------------------------------------------------------------
                                    790 ;end_address               Allocated with name '_enc28j60_init_rx_buffer_PARM_2'
                                    791 ;start_address             Allocated with name '_enc28j60_init_rx_buffer_start_address_10000_77'
                                    792 ;------------------------------------------------------------
                                    793 ;	Eth.c:65: void enc28j60_init_rx_buffer(uint16_t start_address, uint16_t end_address)
                                    794 ;	-----------------------------------------
                                    795 ;	 function enc28j60_init_rx_buffer
                                    796 ;	-----------------------------------------
      00010C                        797 _enc28j60_init_rx_buffer:
      00010C AF 83            [24]  798 	mov	r7,dph
      00010E E5 82            [12]  799 	mov	a,dpl
      000110 90r00r08         [24]  800 	mov	dptr,#_enc28j60_init_rx_buffer_start_address_10000_77
      000113 F0               [24]  801 	movx	@dptr,a
      000114 EF               [12]  802 	mov	a,r7
      000115 A3               [24]  803 	inc	dptr
      000116 F0               [24]  804 	movx	@dptr,a
                                    805 ;	Eth.c:68: if (start_address >= end_address || end_address > 0x1FFF) {
      000117 90r00r08         [24]  806 	mov	dptr,#_enc28j60_init_rx_buffer_start_address_10000_77
      00011A E0               [24]  807 	movx	a,@dptr
      00011B FE               [12]  808 	mov	r6,a
      00011C A3               [24]  809 	inc	dptr
      00011D E0               [24]  810 	movx	a,@dptr
      00011E FF               [12]  811 	mov	r7,a
      00011F 90r00r06         [24]  812 	mov	dptr,#_enc28j60_init_rx_buffer_PARM_2
      000122 E0               [24]  813 	movx	a,@dptr
      000123 FC               [12]  814 	mov	r4,a
      000124 A3               [24]  815 	inc	dptr
      000125 E0               [24]  816 	movx	a,@dptr
      000126 FD               [12]  817 	mov	r5,a
      000127 C3               [12]  818 	clr	c
      000128 EE               [12]  819 	mov	a,r6
      000129 9C               [12]  820 	subb	a,r4
      00012A EF               [12]  821 	mov	a,r7
      00012B 9D               [12]  822 	subb	a,r5
      00012C 50 0D            [24]  823 	jnc	00101$
      00012E 8C 02            [24]  824 	mov	ar2,r4
      000130 8D 03            [24]  825 	mov	ar3,r5
      000132 C3               [12]  826 	clr	c
      000133 74 FF            [12]  827 	mov	a,#0xff
      000135 9A               [12]  828 	subb	a,r2
      000136 74 1F            [12]  829 	mov	a,#0x1f
      000138 9B               [12]  830 	subb	a,r3
      000139 50 16            [24]  831 	jnc	00102$
      00013B                        832 00101$:
                                    833 ;	Eth.c:69: printf("Invalid RX buffer range.\n");
      00013B 74r00            [12]  834 	mov	a,#___str_0
      00013D C0 E0            [24]  835 	push	acc
      00013F 74s00            [12]  836 	mov	a,#(___str_0 >> 8)
      000141 C0 E0            [24]  837 	push	acc
      000143 74 80            [12]  838 	mov	a,#0x80
      000145 C0 E0            [24]  839 	push	acc
      000147 12r00r00         [24]  840 	lcall	_printf
      00014A 15 81            [12]  841 	dec	sp
      00014C 15 81            [12]  842 	dec	sp
      00014E 15 81            [12]  843 	dec	sp
                                    844 ;	Eth.c:70: return;
      000150 22               [24]  845 	ret
      000151                        846 00102$:
                                    847 ;	Eth.c:73: spi_control_write(0, 0x08, (uint8_t)(start_address & 0xFF)); // ERXSTL (low byte)
      000151 8E 03            [24]  848 	mov	ar3,r6
      000153 90r00r00         [24]  849 	mov	dptr,#_spi_control_write_PARM_2
      000156 74 08            [12]  850 	mov	a,#0x08
      000158 F0               [24]  851 	movx	@dptr,a
      000159 90r00r00         [24]  852 	mov	dptr,#_spi_control_write_PARM_3
      00015C EB               [12]  853 	mov	a,r3
      00015D F0               [24]  854 	movx	@dptr,a
      00015E 75 82 00         [24]  855 	mov	dpl, #0x00
      000161 C0 07            [24]  856 	push	ar7
      000163 C0 06            [24]  857 	push	ar6
      000165 C0 05            [24]  858 	push	ar5
      000167 C0 04            [24]  859 	push	ar4
      000169 12r00r00         [24]  860 	lcall	_spi_control_write
      00016C D0 04            [24]  861 	pop	ar4
      00016E D0 05            [24]  862 	pop	ar5
      000170 D0 06            [24]  863 	pop	ar6
      000172 D0 07            [24]  864 	pop	ar7
                                    865 ;	Eth.c:74: spi_control_write(0, 0x09, (uint8_t)((start_address >> 8) & 0xFF)); // ERXSTH (high byte)
      000174 8F 03            [24]  866 	mov	ar3,r7
      000176 90r00r00         [24]  867 	mov	dptr,#_spi_control_write_PARM_2
      000179 74 09            [12]  868 	mov	a,#0x09
      00017B F0               [24]  869 	movx	@dptr,a
      00017C 90r00r00         [24]  870 	mov	dptr,#_spi_control_write_PARM_3
      00017F EB               [12]  871 	mov	a,r3
      000180 F0               [24]  872 	movx	@dptr,a
      000181 75 82 00         [24]  873 	mov	dpl, #0x00
      000184 C0 07            [24]  874 	push	ar7
      000186 C0 06            [24]  875 	push	ar6
      000188 C0 05            [24]  876 	push	ar5
      00018A C0 04            [24]  877 	push	ar4
      00018C 12r00r00         [24]  878 	lcall	_spi_control_write
      00018F D0 04            [24]  879 	pop	ar4
      000191 D0 05            [24]  880 	pop	ar5
      000193 D0 06            [24]  881 	pop	ar6
      000195 D0 07            [24]  882 	pop	ar7
                                    883 ;	Eth.c:77: spi_control_write(0, 0x0A, (uint8_t)(end_address & 0xFF)); // ERXNDL (low byte)
      000197 8C 03            [24]  884 	mov	ar3,r4
      000199 90r00r00         [24]  885 	mov	dptr,#_spi_control_write_PARM_2
      00019C 74 0A            [12]  886 	mov	a,#0x0a
      00019E F0               [24]  887 	movx	@dptr,a
      00019F 90r00r00         [24]  888 	mov	dptr,#_spi_control_write_PARM_3
      0001A2 EB               [12]  889 	mov	a,r3
      0001A3 F0               [24]  890 	movx	@dptr,a
      0001A4 75 82 00         [24]  891 	mov	dpl, #0x00
      0001A7 C0 07            [24]  892 	push	ar7
      0001A9 C0 06            [24]  893 	push	ar6
      0001AB C0 05            [24]  894 	push	ar5
      0001AD C0 04            [24]  895 	push	ar4
      0001AF 12r00r00         [24]  896 	lcall	_spi_control_write
      0001B2 D0 04            [24]  897 	pop	ar4
      0001B4 D0 05            [24]  898 	pop	ar5
      0001B6 D0 06            [24]  899 	pop	ar6
      0001B8 D0 07            [24]  900 	pop	ar7
                                    901 ;	Eth.c:78: spi_control_write(0, 0x0B, (uint8_t)((end_address >> 8) & 0xFF)); // ERXNDH (high byte)
      0001BA 8D 03            [24]  902 	mov	ar3,r5
      0001BC 90r00r00         [24]  903 	mov	dptr,#_spi_control_write_PARM_2
      0001BF 74 0B            [12]  904 	mov	a,#0x0b
      0001C1 F0               [24]  905 	movx	@dptr,a
      0001C2 90r00r00         [24]  906 	mov	dptr,#_spi_control_write_PARM_3
      0001C5 EB               [12]  907 	mov	a,r3
      0001C6 F0               [24]  908 	movx	@dptr,a
      0001C7 75 82 00         [24]  909 	mov	dpl, #0x00
      0001CA C0 07            [24]  910 	push	ar7
      0001CC C0 06            [24]  911 	push	ar6
      0001CE C0 05            [24]  912 	push	ar5
      0001D0 C0 04            [24]  913 	push	ar4
      0001D2 12r00r00         [24]  914 	lcall	_spi_control_write
      0001D5 D0 04            [24]  915 	pop	ar4
      0001D7 D0 05            [24]  916 	pop	ar5
      0001D9 D0 06            [24]  917 	pop	ar6
      0001DB D0 07            [24]  918 	pop	ar7
                                    919 ;	Eth.c:81: spi_control_write(0, 0x0C, start_address); // ERXRDPTL (low byte)
      0001DD 8E 03            [24]  920 	mov	ar3,r6
      0001DF 90r00r00         [24]  921 	mov	dptr,#_spi_control_write_PARM_2
      0001E2 74 0C            [12]  922 	mov	a,#0x0c
      0001E4 F0               [24]  923 	movx	@dptr,a
      0001E5 90r00r00         [24]  924 	mov	dptr,#_spi_control_write_PARM_3
      0001E8 EB               [12]  925 	mov	a,r3
      0001E9 F0               [24]  926 	movx	@dptr,a
      0001EA 75 82 00         [24]  927 	mov	dpl, #0x00
      0001ED C0 07            [24]  928 	push	ar7
      0001EF C0 06            [24]  929 	push	ar6
      0001F1 C0 05            [24]  930 	push	ar5
      0001F3 C0 04            [24]  931 	push	ar4
      0001F5 C0 03            [24]  932 	push	ar3
      0001F7 12r00r00         [24]  933 	lcall	_spi_control_write
      0001FA D0 03            [24]  934 	pop	ar3
      0001FC D0 04            [24]  935 	pop	ar4
      0001FE D0 05            [24]  936 	pop	ar5
      000200 D0 06            [24]  937 	pop	ar6
      000202 D0 07            [24]  938 	pop	ar7
                                    939 ;	Eth.c:82: spi_control_write(0, 0x0D, start_address); // ERXRDPTH (high byte)
      000204 90r00r00         [24]  940 	mov	dptr,#_spi_control_write_PARM_2
      000207 74 0D            [12]  941 	mov	a,#0x0d
      000209 F0               [24]  942 	movx	@dptr,a
      00020A 90r00r00         [24]  943 	mov	dptr,#_spi_control_write_PARM_3
      00020D EB               [12]  944 	mov	a,r3
      00020E F0               [24]  945 	movx	@dptr,a
      00020F 75 82 00         [24]  946 	mov	dpl, #0x00
      000212 C0 07            [24]  947 	push	ar7
      000214 C0 06            [24]  948 	push	ar6
      000216 C0 05            [24]  949 	push	ar5
      000218 C0 04            [24]  950 	push	ar4
      00021A 12r00r00         [24]  951 	lcall	_spi_control_write
      00021D D0 04            [24]  952 	pop	ar4
      00021F D0 05            [24]  953 	pop	ar5
      000221 D0 06            [24]  954 	pop	ar6
      000223 D0 07            [24]  955 	pop	ar7
                                    956 ;	Eth.c:90: printf("RX buffer initialized: 0x%04X to 0x%04X.\n", start_address, end_address);
      000225 C0 04            [24]  957 	push	ar4
      000227 C0 05            [24]  958 	push	ar5
      000229 C0 06            [24]  959 	push	ar6
      00022B C0 07            [24]  960 	push	ar7
      00022D 74r1A            [12]  961 	mov	a,#___str_1
      00022F C0 E0            [24]  962 	push	acc
      000231 74s00            [12]  963 	mov	a,#(___str_1 >> 8)
      000233 C0 E0            [24]  964 	push	acc
      000235 74 80            [12]  965 	mov	a,#0x80
      000237 C0 E0            [24]  966 	push	acc
      000239 12r00r00         [24]  967 	lcall	_printf
      00023C E5 81            [12]  968 	mov	a,sp
      00023E 24 F9            [12]  969 	add	a,#0xf9
      000240 F5 81            [12]  970 	mov	sp,a
                                    971 ;	Eth.c:91: }
      000242 22               [24]  972 	ret
                                    973 ;------------------------------------------------------------
                                    974 ;Allocation info for local variables in function 'enc28j60_set_transmit_pointers'
                                    975 ;------------------------------------------------------------
                                    976 ;end_address               Allocated with name '_enc28j60_set_transmit_pointers_PARM_2'
                                    977 ;start_address             Allocated with name '_enc28j60_set_transmit_pointers_start_address_10000_80'
                                    978 ;------------------------------------------------------------
                                    979 ;	Eth.c:93: void enc28j60_set_transmit_pointers(uint16_t start_address, uint16_t end_address)
                                    980 ;	-----------------------------------------
                                    981 ;	 function enc28j60_set_transmit_pointers
                                    982 ;	-----------------------------------------
      000243                        983 _enc28j60_set_transmit_pointers:
      000243 AF 83            [24]  984 	mov	r7,dph
      000245 E5 82            [12]  985 	mov	a,dpl
      000247 90r00r0C         [24]  986 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_80
      00024A F0               [24]  987 	movx	@dptr,a
      00024B EF               [12]  988 	mov	a,r7
      00024C A3               [24]  989 	inc	dptr
      00024D F0               [24]  990 	movx	@dptr,a
                                    991 ;	Eth.c:96: spi_control_write(0, 0x04, (uint8_t)(start_address & 0xFF)); // Low byte
      00024E 90r00r0C         [24]  992 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_80
      000251 E0               [24]  993 	movx	a,@dptr
      000252 FE               [12]  994 	mov	r6,a
      000253 A3               [24]  995 	inc	dptr
      000254 E0               [24]  996 	movx	a,@dptr
      000255 FF               [12]  997 	mov	r7,a
      000256 8E 05            [24]  998 	mov	ar5,r6
      000258 90r00r00         [24]  999 	mov	dptr,#_spi_control_write_PARM_2
      00025B 74 04            [12] 1000 	mov	a,#0x04
      00025D F0               [24] 1001 	movx	@dptr,a
      00025E 90r00r00         [24] 1002 	mov	dptr,#_spi_control_write_PARM_3
      000261 ED               [12] 1003 	mov	a,r5
      000262 F0               [24] 1004 	movx	@dptr,a
      000263 75 82 00         [24] 1005 	mov	dpl, #0x00
      000266 C0 07            [24] 1006 	push	ar7
      000268 C0 06            [24] 1007 	push	ar6
      00026A 12r00r00         [24] 1008 	lcall	_spi_control_write
      00026D D0 06            [24] 1009 	pop	ar6
      00026F D0 07            [24] 1010 	pop	ar7
                                   1011 ;	Eth.c:97: spi_control_write(0, 0x05, (uint8_t)((start_address >> 8) & 0xFF)); // High byte
      000271 8F 06            [24] 1012 	mov	ar6,r7
      000273 90r00r00         [24] 1013 	mov	dptr,#_spi_control_write_PARM_2
      000276 74 05            [12] 1014 	mov	a,#0x05
      000278 F0               [24] 1015 	movx	@dptr,a
      000279 90r00r00         [24] 1016 	mov	dptr,#_spi_control_write_PARM_3
      00027C EE               [12] 1017 	mov	a,r6
      00027D F0               [24] 1018 	movx	@dptr,a
      00027E 75 82 00         [24] 1019 	mov	dpl, #0x00
      000281 12r00r00         [24] 1020 	lcall	_spi_control_write
                                   1021 ;	Eth.c:100: spi_control_write(0, 0x06, (uint8_t)(end_address & 0xFF)); // Low byte
      000284 90r00r0A         [24] 1022 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      000287 E0               [24] 1023 	movx	a,@dptr
      000288 FE               [12] 1024 	mov	r6,a
      000289 A3               [24] 1025 	inc	dptr
      00028A E0               [24] 1026 	movx	a,@dptr
      00028B FF               [12] 1027 	mov	r7,a
      00028C 8E 05            [24] 1028 	mov	ar5,r6
      00028E 90r00r00         [24] 1029 	mov	dptr,#_spi_control_write_PARM_2
      000291 74 06            [12] 1030 	mov	a,#0x06
      000293 F0               [24] 1031 	movx	@dptr,a
      000294 90r00r00         [24] 1032 	mov	dptr,#_spi_control_write_PARM_3
      000297 ED               [12] 1033 	mov	a,r5
      000298 F0               [24] 1034 	movx	@dptr,a
      000299 75 82 00         [24] 1035 	mov	dpl, #0x00
      00029C C0 07            [24] 1036 	push	ar7
      00029E C0 06            [24] 1037 	push	ar6
      0002A0 12r00r00         [24] 1038 	lcall	_spi_control_write
      0002A3 D0 06            [24] 1039 	pop	ar6
      0002A5 D0 07            [24] 1040 	pop	ar7
                                   1041 ;	Eth.c:101: spi_control_write(0, 0x07, (uint8_t)((end_address >> 8) & 0xFF)); // High byte
      0002A7 8F 06            [24] 1042 	mov	ar6,r7
      0002A9 90r00r00         [24] 1043 	mov	dptr,#_spi_control_write_PARM_2
      0002AC 74 07            [12] 1044 	mov	a,#0x07
      0002AE F0               [24] 1045 	movx	@dptr,a
      0002AF 90r00r00         [24] 1046 	mov	dptr,#_spi_control_write_PARM_3
      0002B2 EE               [12] 1047 	mov	a,r6
      0002B3 F0               [24] 1048 	movx	@dptr,a
      0002B4 75 82 00         [24] 1049 	mov	dpl, #0x00
                                   1050 ;	Eth.c:102: }
      0002B7 02r00r00         [24] 1051 	ljmp	_spi_control_write
                                   1052 ;------------------------------------------------------------
                                   1053 ;Allocation info for local variables in function 'wait_for_transmission_complete'
                                   1054 ;------------------------------------------------------------
                                   1055 ;timeout_ms                Allocated with name '_wait_for_transmission_complete_timeout_ms_10000_82'
                                   1056 ;elapsed                   Allocated with name '_wait_for_transmission_complete_elapsed_10000_83'
                                   1057 ;econ1                     Allocated with name '_wait_for_transmission_complete_econ1_20000_84'
                                   1058 ;------------------------------------------------------------
                                   1059 ;	Eth.c:104: bool wait_for_transmission_complete(uint16_t timeout_ms)
                                   1060 ;	-----------------------------------------
                                   1061 ;	 function wait_for_transmission_complete
                                   1062 ;	-----------------------------------------
      0002BA                       1063 _wait_for_transmission_complete:
      0002BA AF 83            [24] 1064 	mov	r7,dph
      0002BC E5 82            [12] 1065 	mov	a,dpl
      0002BE 90r00r0E         [24] 1066 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_82
      0002C1 F0               [24] 1067 	movx	@dptr,a
      0002C2 EF               [12] 1068 	mov	a,r7
      0002C3 A3               [24] 1069 	inc	dptr
      0002C4 F0               [24] 1070 	movx	@dptr,a
                                   1071 ;	Eth.c:108: while (elapsed < timeout_ms) {
      0002C5 90r00r0E         [24] 1072 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_82
      0002C8 E0               [24] 1073 	movx	a,@dptr
      0002C9 FE               [12] 1074 	mov	r6,a
      0002CA A3               [24] 1075 	inc	dptr
      0002CB E0               [24] 1076 	movx	a,@dptr
      0002CC FF               [12] 1077 	mov	r7,a
      0002CD 7C 00            [12] 1078 	mov	r4,#0x00
      0002CF 7D 00            [12] 1079 	mov	r5,#0x00
      0002D1                       1080 00103$:
      0002D1 C3               [12] 1081 	clr	c
      0002D2 EC               [12] 1082 	mov	a,r4
      0002D3 9E               [12] 1083 	subb	a,r6
      0002D4 ED               [12] 1084 	mov	a,r5
      0002D5 9F               [12] 1085 	subb	a,r7
      0002D6 50 41            [24] 1086 	jnc	00105$
                                   1087 ;	Eth.c:109: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      0002D8 90r00r00         [24] 1088 	mov	dptr,#_mac_spi_read_PARM_2
      0002DB E4               [12] 1089 	clr	a
      0002DC F0               [24] 1090 	movx	@dptr,a
      0002DD 75 82 1F         [24] 1091 	mov	dpl, #0x1f
      0002E0 C0 07            [24] 1092 	push	ar7
      0002E2 C0 06            [24] 1093 	push	ar6
      0002E4 C0 05            [24] 1094 	push	ar5
      0002E6 C0 04            [24] 1095 	push	ar4
      0002E8 12r00r00         [24] 1096 	lcall	_mac_spi_read
      0002EB E5 82            [12] 1097 	mov	a, dpl
      0002ED D0 04            [24] 1098 	pop	ar4
      0002EF D0 05            [24] 1099 	pop	ar5
      0002F1 D0 06            [24] 1100 	pop	ar6
      0002F3 D0 07            [24] 1101 	pop	ar7
                                   1102 ;	Eth.c:110: if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
      0002F5 20 E3 04         [24] 1103 	jb	acc.3,00102$
                                   1104 ;	Eth.c:111: return true;  // Transmission completed
      0002F8 75 82 01         [24] 1105 	mov	dpl, #0x01
      0002FB 22               [24] 1106 	ret
      0002FC                       1107 00102$:
                                   1108 ;	Eth.c:114: delay_ms(1);  // Wait 1 ms
      0002FC 90 00 01         [24] 1109 	mov	dptr,#0x0001
      0002FF C0 07            [24] 1110 	push	ar7
      000301 C0 06            [24] 1111 	push	ar6
      000303 C0 05            [24] 1112 	push	ar5
      000305 C0 04            [24] 1113 	push	ar4
      000307 12r00r6A         [24] 1114 	lcall	_delay_ms
      00030A D0 04            [24] 1115 	pop	ar4
      00030C D0 05            [24] 1116 	pop	ar5
      00030E D0 06            [24] 1117 	pop	ar6
      000310 D0 07            [24] 1118 	pop	ar7
                                   1119 ;	Eth.c:115: elapsed++;
      000312 0C               [12] 1120 	inc	r4
      000313 BC 00 BB         [24] 1121 	cjne	r4,#0x00,00103$
      000316 0D               [12] 1122 	inc	r5
      000317 80 B8            [24] 1123 	sjmp	00103$
      000319                       1124 00105$:
                                   1125 ;	Eth.c:118: return false;  // Timed out
      000319 75 82 00         [24] 1126 	mov	dpl, #0x00
                                   1127 ;	Eth.c:119: }
      00031C 22               [24] 1128 	ret
                                   1129 ;------------------------------------------------------------
                                   1130 ;Allocation info for local variables in function 'enc28j60_transmission_successful'
                                   1131 ;------------------------------------------------------------
                                   1132 ;estat                     Allocated with name '_enc28j60_transmission_successful_estat_10000_86'
                                   1133 ;------------------------------------------------------------
                                   1134 ;	Eth.c:121: bool enc28j60_transmission_successful()
                                   1135 ;	-----------------------------------------
                                   1136 ;	 function enc28j60_transmission_successful
                                   1137 ;	-----------------------------------------
      00031D                       1138 _enc28j60_transmission_successful:
                                   1139 ;	Eth.c:123: uint8_t estat = mac_spi_read(0x1D, 0); // Read ESTAT
      00031D 90r00r00         [24] 1140 	mov	dptr,#_mac_spi_read_PARM_2
      000320 E4               [12] 1141 	clr	a
      000321 F0               [24] 1142 	movx	@dptr,a
      000322 75 82 1D         [24] 1143 	mov	dpl, #0x1d
      000325 12r00r00         [24] 1144 	lcall	_mac_spi_read
                                   1145 ;	Eth.c:124: return !(estat & 0x02); // Check if TXABRT (bit 1) is not set
      000328 E5 82            [12] 1146 	mov	a,dpl
      00032A 03               [12] 1147 	rr	a
      00032B 54 01            [12] 1148 	anl	a,#0x01
      00032D B4 01 00         [24] 1149 	cjne	a,#0x01,00103$
      000330                       1150 00103$:
      000330 92*00            [24] 1151 	mov  _enc28j60_transmission_successful_sloc0_1_0,c
      000332 E4               [12] 1152 	clr	a
      000333 33               [12] 1153 	rlc	a
      000334 F5 82            [12] 1154 	mov	dpl, a
                                   1155 ;	Eth.c:125: }
      000336 22               [24] 1156 	ret
                                   1157 ;------------------------------------------------------------
                                   1158 ;Allocation info for local variables in function 'RX_disable'
                                   1159 ;------------------------------------------------------------
                                   1160 ;econ1_value               Allocated with name '_RX_disable_econ1_value_10000_88'
                                   1161 ;------------------------------------------------------------
                                   1162 ;	Eth.c:126: void RX_disable(void)
                                   1163 ;	-----------------------------------------
                                   1164 ;	 function RX_disable
                                   1165 ;	-----------------------------------------
      000337                       1166 _RX_disable:
                                   1167 ;	Eth.c:128: uint8_t econ1_value = mac_spi_read(0x1F, 0); // Read ECON1
      000337 90r00r00         [24] 1168 	mov	dptr,#_mac_spi_read_PARM_2
      00033A E4               [12] 1169 	clr	a
      00033B F0               [24] 1170 	movx	@dptr,a
      00033C 75 82 1F         [24] 1171 	mov	dpl, #0x1f
      00033F 12r00r00         [24] 1172 	lcall	_mac_spi_read
      000342 E5 82            [12] 1173 	mov	a, dpl
                                   1174 ;	Eth.c:131: econ1_value &= ~(0x04);
      000344 54 FB            [12] 1175 	anl	a,#0xfb
      000346 FF               [12] 1176 	mov	r7,a
                                   1177 ;	Eth.c:134: spi_control_write(0, 0x1F, econ1_value); // Write back to ECON1
      000347 90r00r00         [24] 1178 	mov	dptr,#_spi_control_write_PARM_2
      00034A 74 1F            [12] 1179 	mov	a,#0x1f
      00034C F0               [24] 1180 	movx	@dptr,a
      00034D 90r00r00         [24] 1181 	mov	dptr,#_spi_control_write_PARM_3
      000350 EF               [12] 1182 	mov	a,r7
      000351 F0               [24] 1183 	movx	@dptr,a
      000352 75 82 00         [24] 1184 	mov	dpl, #0x00
                                   1185 ;	Eth.c:135: }
      000355 02r00r00         [24] 1186 	ljmp	_spi_control_write
                                   1187 ;------------------------------------------------------------
                                   1188 ;Allocation info for local variables in function 'RX_enable'
                                   1189 ;------------------------------------------------------------
                                   1190 ;econ1_value               Allocated with name '_RX_enable_econ1_value_10000_90'
                                   1191 ;------------------------------------------------------------
                                   1192 ;	Eth.c:137: void RX_enable(void)
                                   1193 ;	-----------------------------------------
                                   1194 ;	 function RX_enable
                                   1195 ;	-----------------------------------------
      000358                       1196 _RX_enable:
                                   1197 ;	Eth.c:139: uint8_t econ1_value = mac_spi_read(0x1F, 0); // Read ECON1
      000358 90r00r00         [24] 1198 	mov	dptr,#_mac_spi_read_PARM_2
      00035B E4               [12] 1199 	clr	a
      00035C F0               [24] 1200 	movx	@dptr,a
      00035D 75 82 1F         [24] 1201 	mov	dpl, #0x1f
      000360 12r00r00         [24] 1202 	lcall	_mac_spi_read
      000363 E5 82            [12] 1203 	mov	a, dpl
                                   1204 ;	Eth.c:142: econ1_value |= 0x04;
      000365 44 04            [12] 1205 	orl	a,#0x04
      000367 FF               [12] 1206 	mov	r7,a
                                   1207 ;	Eth.c:145: spi_control_write(0, 0x1F, econ1_value); // Write back to ECON1
      000368 90r00r00         [24] 1208 	mov	dptr,#_spi_control_write_PARM_2
      00036B 74 1F            [12] 1209 	mov	a,#0x1f
      00036D F0               [24] 1210 	movx	@dptr,a
      00036E 90r00r00         [24] 1211 	mov	dptr,#_spi_control_write_PARM_3
      000371 EF               [12] 1212 	mov	a,r7
      000372 F0               [24] 1213 	movx	@dptr,a
      000373 75 82 00         [24] 1214 	mov	dpl, #0x00
                                   1215 ;	Eth.c:146: }
      000376 02r00r00         [24] 1216 	ljmp	_spi_control_write
                                   1217 ;------------------------------------------------------------
                                   1218 ;Allocation info for local variables in function 'send_arp_request'
                                   1219 ;------------------------------------------------------------
                                   1220 ;source_mac                Allocated with name '_send_arp_request_source_mac_10000_92'
                                   1221 ;dest_mac                  Allocated with name '_send_arp_request_dest_mac_10000_92'
                                   1222 ;source_ip                 Allocated with name '_send_arp_request_source_ip_10000_92'
                                   1223 ;target_ip                 Allocated with name '_send_arp_request_target_ip_10000_92'
                                   1224 ;arp_packet                Allocated with name '_send_arp_request_arp_packet_10000_92'
                                   1225 ;i                         Allocated with name '_send_arp_request_i_20000_93'
                                   1226 ;i                         Allocated with name '_send_arp_request_i_20000_95'
                                   1227 ;i                         Allocated with name '_send_arp_request_i_20000_97'
                                   1228 ;i                         Allocated with name '_send_arp_request_i_20000_99'
                                   1229 ;i                         Allocated with name '_send_arp_request_i_20000_101'
                                   1230 ;frame_size                Allocated with name '_send_arp_request_frame_size_10001_103'
                                   1231 ;start_address             Allocated with name '_send_arp_request_start_address_10001_103'
                                   1232 ;end_address               Allocated with name '_send_arp_request_end_address_10002_105'
                                   1233 ;------------------------------------------------------------
                                   1234 ;	Eth.c:148: void send_arp_request(void)
                                   1235 ;	-----------------------------------------
                                   1236 ;	 function send_arp_request
                                   1237 ;	-----------------------------------------
      000379                       1238 _send_arp_request:
                                   1239 ;	Eth.c:152: uint8_t source_mac[6] = {0x02, 0x11, 0x22, 0x33, 0x44, 0x55};  // ENC28J60 MAC address
      000379 90r00r10         [24] 1240 	mov	dptr,#_send_arp_request_source_mac_10000_92
      00037C 74 02            [12] 1241 	mov	a,#0x02
      00037E F0               [24] 1242 	movx	@dptr,a
      00037F 90r00r11         [24] 1243 	mov	dptr,#(_send_arp_request_source_mac_10000_92 + 0x0001)
      000382 74 11            [12] 1244 	mov	a,#0x11
      000384 F0               [24] 1245 	movx	@dptr,a
      000385 90r00r12         [24] 1246 	mov	dptr,#(_send_arp_request_source_mac_10000_92 + 0x0002)
      000388 23               [12] 1247 	rl	a
      000389 F0               [24] 1248 	movx	@dptr,a
      00038A 90r00r13         [24] 1249 	mov	dptr,#(_send_arp_request_source_mac_10000_92 + 0x0003)
      00038D 74 33            [12] 1250 	mov	a,#0x33
      00038F F0               [24] 1251 	movx	@dptr,a
      000390 90r00r14         [24] 1252 	mov	dptr,#(_send_arp_request_source_mac_10000_92 + 0x0004)
      000393 74 44            [12] 1253 	mov	a,#0x44
      000395 F0               [24] 1254 	movx	@dptr,a
      000396 90r00r15         [24] 1255 	mov	dptr,#(_send_arp_request_source_mac_10000_92 + 0x0005)
      000399 74 55            [12] 1256 	mov	a,#0x55
      00039B F0               [24] 1257 	movx	@dptr,a
                                   1258 ;	Eth.c:153: uint8_t dest_mac[6] = {0xF8, 0x75, 0xA4, 0x8C, 0x41, 0x31};  // Target PC MAC address
      00039C 90r00r16         [24] 1259 	mov	dptr,#_send_arp_request_dest_mac_10000_92
      00039F 74 F8            [12] 1260 	mov	a,#0xf8
      0003A1 F0               [24] 1261 	movx	@dptr,a
      0003A2 90r00r17         [24] 1262 	mov	dptr,#(_send_arp_request_dest_mac_10000_92 + 0x0001)
      0003A5 74 75            [12] 1263 	mov	a,#0x75
      0003A7 F0               [24] 1264 	movx	@dptr,a
      0003A8 90r00r18         [24] 1265 	mov	dptr,#(_send_arp_request_dest_mac_10000_92 + 0x0002)
      0003AB 74 A4            [12] 1266 	mov	a,#0xa4
      0003AD F0               [24] 1267 	movx	@dptr,a
      0003AE 90r00r19         [24] 1268 	mov	dptr,#(_send_arp_request_dest_mac_10000_92 + 0x0003)
      0003B1 74 8C            [12] 1269 	mov	a,#0x8c
      0003B3 F0               [24] 1270 	movx	@dptr,a
      0003B4 90r00r1A         [24] 1271 	mov	dptr,#(_send_arp_request_dest_mac_10000_92 + 0x0004)
      0003B7 74 41            [12] 1272 	mov	a,#0x41
      0003B9 F0               [24] 1273 	movx	@dptr,a
      0003BA 90r00r1B         [24] 1274 	mov	dptr,#(_send_arp_request_dest_mac_10000_92 + 0x0005)
      0003BD 74 31            [12] 1275 	mov	a,#0x31
      0003BF F0               [24] 1276 	movx	@dptr,a
                                   1277 ;	Eth.c:154: uint8_t source_ip[4] = {192, 168, 1, 100};  // ENC28J60 IP address (Example)
      0003C0 90r00r1C         [24] 1278 	mov	dptr,#_send_arp_request_source_ip_10000_92
      0003C3 74 C0            [12] 1279 	mov	a,#0xc0
      0003C5 F0               [24] 1280 	movx	@dptr,a
      0003C6 90r00r1D         [24] 1281 	mov	dptr,#(_send_arp_request_source_ip_10000_92 + 0x0001)
      0003C9 74 A8            [12] 1282 	mov	a,#0xa8
      0003CB F0               [24] 1283 	movx	@dptr,a
      0003CC 90r00r1E         [24] 1284 	mov	dptr,#(_send_arp_request_source_ip_10000_92 + 0x0002)
      0003CF 74 01            [12] 1285 	mov	a,#0x01
      0003D1 F0               [24] 1286 	movx	@dptr,a
      0003D2 90r00r1F         [24] 1287 	mov	dptr,#(_send_arp_request_source_ip_10000_92 + 0x0003)
      0003D5 74 64            [12] 1288 	mov	a,#0x64
      0003D7 F0               [24] 1289 	movx	@dptr,a
                                   1290 ;	Eth.c:155: uint8_t target_ip[4] = {192, 168, 1, 1};  // Target PC IP address
      0003D8 90r00r20         [24] 1291 	mov	dptr,#_send_arp_request_target_ip_10000_92
      0003DB 74 C0            [12] 1292 	mov	a,#0xc0
      0003DD F0               [24] 1293 	movx	@dptr,a
      0003DE 90r00r21         [24] 1294 	mov	dptr,#(_send_arp_request_target_ip_10000_92 + 0x0001)
      0003E1 74 A8            [12] 1295 	mov	a,#0xa8
      0003E3 F0               [24] 1296 	movx	@dptr,a
      0003E4 90r00r22         [24] 1297 	mov	dptr,#(_send_arp_request_target_ip_10000_92 + 0x0002)
      0003E7 74 01            [12] 1298 	mov	a,#0x01
      0003E9 F0               [24] 1299 	movx	@dptr,a
      0003EA 90r00r23         [24] 1300 	mov	dptr,#(_send_arp_request_target_ip_10000_92 + 0x0003)
      0003ED F0               [24] 1301 	movx	@dptr,a
                                   1302 ;	Eth.c:159: arp_packet[0] = 0x0E;
      0003EE 90r00r24         [24] 1303 	mov	dptr,#_send_arp_request_arp_packet_10000_92
      0003F1 74 0E            [12] 1304 	mov	a,#0x0e
      0003F3 F0               [24] 1305 	movx	@dptr,a
                                   1306 ;	Eth.c:163: set_mac_address(source_mac);
      0003F4 90r00r10         [24] 1307 	mov	dptr,#_send_arp_request_source_mac_10000_92
      0003F7 75 F0 00         [24] 1308 	mov	b, #0x00
      0003FA 12r00r00         [24] 1309 	lcall	_set_mac_address
                                   1310 ;	Eth.c:166: for (int i = 0; i < 6; i++)
      0003FD 7E 00            [12] 1311 	mov	r6,#0x00
      0003FF 7F 00            [12] 1312 	mov	r7,#0x00
      000401                       1313 00115$:
      000401 C3               [12] 1314 	clr	c
      000402 EE               [12] 1315 	mov	a,r6
      000403 94 06            [12] 1316 	subb	a,#0x06
      000405 EF               [12] 1317 	mov	a,r7
      000406 64 80            [12] 1318 	xrl	a,#0x80
      000408 94 80            [12] 1319 	subb	a,#0x80
      00040A 50 48            [24] 1320 	jnc	00101$
                                   1321 ;	Eth.c:168: arp_packet[i + 1] = dest_mac[i];  // Destination MAC address
      00040C 8E 05            [24] 1322 	mov	ar5,r6
      00040E ED               [12] 1323 	mov	a,r5
      00040F 04               [12] 1324 	inc	a
      000410 FC               [12] 1325 	mov	r4,a
      000411 33               [12] 1326 	rlc	a
      000412 95 E0            [12] 1327 	subb	a,acc
      000414 FB               [12] 1328 	mov	r3,a
      000415 EC               [12] 1329 	mov	a,r4
      000416 24r24            [12] 1330 	add	a, #_send_arp_request_arp_packet_10000_92
      000418 FC               [12] 1331 	mov	r4,a
      000419 EB               [12] 1332 	mov	a,r3
      00041A 34s00            [12] 1333 	addc	a, #(_send_arp_request_arp_packet_10000_92 >> 8)
      00041C FB               [12] 1334 	mov	r3,a
      00041D EE               [12] 1335 	mov	a,r6
      00041E 24r16            [12] 1336 	add	a, #_send_arp_request_dest_mac_10000_92
      000420 F5 82            [12] 1337 	mov	dpl,a
      000422 EF               [12] 1338 	mov	a,r7
      000423 34s00            [12] 1339 	addc	a, #(_send_arp_request_dest_mac_10000_92 >> 8)
      000425 F5 83            [12] 1340 	mov	dph,a
      000427 E0               [24] 1341 	movx	a,@dptr
      000428 8C 82            [24] 1342 	mov	dpl,r4
      00042A 8B 83            [24] 1343 	mov	dph,r3
      00042C F0               [24] 1344 	movx	@dptr,a
                                   1345 ;	Eth.c:169: arp_packet[i + 7] = source_mac[i];  // Source MAC address
      00042D 74 07            [12] 1346 	mov	a,#0x07
      00042F 2D               [12] 1347 	add	a, r5
      000430 FD               [12] 1348 	mov	r5,a
      000431 33               [12] 1349 	rlc	a
      000432 95 E0            [12] 1350 	subb	a,acc
      000434 FC               [12] 1351 	mov	r4,a
      000435 ED               [12] 1352 	mov	a,r5
      000436 24r24            [12] 1353 	add	a, #_send_arp_request_arp_packet_10000_92
      000438 FD               [12] 1354 	mov	r5,a
      000439 EC               [12] 1355 	mov	a,r4
      00043A 34s00            [12] 1356 	addc	a, #(_send_arp_request_arp_packet_10000_92 >> 8)
      00043C FC               [12] 1357 	mov	r4,a
      00043D EE               [12] 1358 	mov	a,r6
      00043E 24r10            [12] 1359 	add	a, #_send_arp_request_source_mac_10000_92
      000440 F5 82            [12] 1360 	mov	dpl,a
      000442 EF               [12] 1361 	mov	a,r7
      000443 34s00            [12] 1362 	addc	a, #(_send_arp_request_source_mac_10000_92 >> 8)
      000445 F5 83            [12] 1363 	mov	dph,a
      000447 E0               [24] 1364 	movx	a,@dptr
      000448 8D 82            [24] 1365 	mov	dpl,r5
      00044A 8C 83            [24] 1366 	mov	dph,r4
      00044C F0               [24] 1367 	movx	@dptr,a
                                   1368 ;	Eth.c:166: for (int i = 0; i < 6; i++)
      00044D 0E               [12] 1369 	inc	r6
      00044E BE 00 B0         [24] 1370 	cjne	r6,#0x00,00115$
      000451 0F               [12] 1371 	inc	r7
      000452 80 AD            [24] 1372 	sjmp	00115$
      000454                       1373 00101$:
                                   1374 ;	Eth.c:173: arp_packet[13] = (ETH_TYPE_ARP >> 8) & 0xFF;
      000454 90r00r31         [24] 1375 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x000d)
      000457 74 08            [12] 1376 	mov	a,#0x08
      000459 F0               [24] 1377 	movx	@dptr,a
                                   1378 ;	Eth.c:174: arp_packet[14] = ETH_TYPE_ARP & 0xFF;
      00045A 90r00r32         [24] 1379 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x000e)
      00045D 74 06            [12] 1380 	mov	a,#0x06
      00045F F0               [24] 1381 	movx	@dptr,a
                                   1382 ;	Eth.c:178: arp_packet[15] = 0x00;
      000460 90r00r33         [24] 1383 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x000f)
      000463 E4               [12] 1384 	clr	a
      000464 F0               [24] 1385 	movx	@dptr,a
                                   1386 ;	Eth.c:179: arp_packet[16] = 0x01;
      000465 90r00r34         [24] 1387 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x0010)
      000468 04               [12] 1388 	inc	a
      000469 F0               [24] 1389 	movx	@dptr,a
                                   1390 ;	Eth.c:182: arp_packet[17] = 0x08;
      00046A 90r00r35         [24] 1391 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x0011)
      00046D 74 08            [12] 1392 	mov	a,#0x08
      00046F F0               [24] 1393 	movx	@dptr,a
                                   1394 ;	Eth.c:183: arp_packet[18] = 0x00;
      000470 90r00r36         [24] 1395 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x0012)
      000473 E4               [12] 1396 	clr	a
      000474 F0               [24] 1397 	movx	@dptr,a
                                   1398 ;	Eth.c:186: arp_packet[19] = 0x06;
      000475 90r00r37         [24] 1399 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x0013)
      000478 74 06            [12] 1400 	mov	a,#0x06
      00047A F0               [24] 1401 	movx	@dptr,a
                                   1402 ;	Eth.c:189: arp_packet[20] = 0x04;
      00047B 90r00r38         [24] 1403 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x0014)
      00047E 74 04            [12] 1404 	mov	a,#0x04
      000480 F0               [24] 1405 	movx	@dptr,a
                                   1406 ;	Eth.c:192: arp_packet[21] = 0x00;
      000481 90r00r39         [24] 1407 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x0015)
      000484 E4               [12] 1408 	clr	a
      000485 F0               [24] 1409 	movx	@dptr,a
                                   1410 ;	Eth.c:193: arp_packet[22] = 0x01;
      000486 90r00r3A         [24] 1411 	mov	dptr,#(_send_arp_request_arp_packet_10000_92 + 0x0016)
      000489 04               [12] 1412 	inc	a
      00048A F0               [24] 1413 	movx	@dptr,a
                                   1414 ;	Eth.c:196: for (int i = 0; i < 6; i++) {
      00048B 7E 00            [12] 1415 	mov	r6,#0x00
      00048D 7F 00            [12] 1416 	mov	r7,#0x00
      00048F                       1417 00118$:
      00048F C3               [12] 1418 	clr	c
      000490 EE               [12] 1419 	mov	a,r6
      000491 94 06            [12] 1420 	subb	a,#0x06
      000493 EF               [12] 1421 	mov	a,r7
      000494 64 80            [12] 1422 	xrl	a,#0x80
      000496 94 80            [12] 1423 	subb	a,#0x80
      000498 50 29            [24] 1424 	jnc	00102$
                                   1425 ;	Eth.c:197: arp_packet[23 + i] = source_mac[i];
      00049A 8E 05            [24] 1426 	mov	ar5,r6
      00049C 74 17            [12] 1427 	mov	a,#0x17
      00049E 2D               [12] 1428 	add	a, r5
      00049F FD               [12] 1429 	mov	r5,a
      0004A0 33               [12] 1430 	rlc	a
      0004A1 95 E0            [12] 1431 	subb	a,acc
      0004A3 FC               [12] 1432 	mov	r4,a
      0004A4 ED               [12] 1433 	mov	a,r5
      0004A5 24r24            [12] 1434 	add	a, #_send_arp_request_arp_packet_10000_92
      0004A7 FD               [12] 1435 	mov	r5,a
      0004A8 EC               [12] 1436 	mov	a,r4
      0004A9 34s00            [12] 1437 	addc	a, #(_send_arp_request_arp_packet_10000_92 >> 8)
      0004AB FC               [12] 1438 	mov	r4,a
      0004AC EE               [12] 1439 	mov	a,r6
      0004AD 24r10            [12] 1440 	add	a, #_send_arp_request_source_mac_10000_92
      0004AF F5 82            [12] 1441 	mov	dpl,a
      0004B1 EF               [12] 1442 	mov	a,r7
      0004B2 34s00            [12] 1443 	addc	a, #(_send_arp_request_source_mac_10000_92 >> 8)
      0004B4 F5 83            [12] 1444 	mov	dph,a
      0004B6 E0               [24] 1445 	movx	a,@dptr
      0004B7 8D 82            [24] 1446 	mov	dpl,r5
      0004B9 8C 83            [24] 1447 	mov	dph,r4
      0004BB F0               [24] 1448 	movx	@dptr,a
                                   1449 ;	Eth.c:196: for (int i = 0; i < 6; i++) {
      0004BC 0E               [12] 1450 	inc	r6
      0004BD BE 00 CF         [24] 1451 	cjne	r6,#0x00,00118$
      0004C0 0F               [12] 1452 	inc	r7
      0004C1 80 CC            [24] 1453 	sjmp	00118$
      0004C3                       1454 00102$:
                                   1455 ;	Eth.c:201: for (int i = 0; i < 4; i++) {
      0004C3 7E 00            [12] 1456 	mov	r6,#0x00
      0004C5 7F 00            [12] 1457 	mov	r7,#0x00
      0004C7                       1458 00121$:
      0004C7 C3               [12] 1459 	clr	c
      0004C8 EE               [12] 1460 	mov	a,r6
      0004C9 94 04            [12] 1461 	subb	a,#0x04
      0004CB EF               [12] 1462 	mov	a,r7
      0004CC 64 80            [12] 1463 	xrl	a,#0x80
      0004CE 94 80            [12] 1464 	subb	a,#0x80
      0004D0 50 29            [24] 1465 	jnc	00103$
                                   1466 ;	Eth.c:202: arp_packet[29 + i] = source_ip[i];
      0004D2 8E 05            [24] 1467 	mov	ar5,r6
      0004D4 74 1D            [12] 1468 	mov	a,#0x1d
      0004D6 2D               [12] 1469 	add	a, r5
      0004D7 FD               [12] 1470 	mov	r5,a
      0004D8 33               [12] 1471 	rlc	a
      0004D9 95 E0            [12] 1472 	subb	a,acc
      0004DB FC               [12] 1473 	mov	r4,a
      0004DC ED               [12] 1474 	mov	a,r5
      0004DD 24r24            [12] 1475 	add	a, #_send_arp_request_arp_packet_10000_92
      0004DF FD               [12] 1476 	mov	r5,a
      0004E0 EC               [12] 1477 	mov	a,r4
      0004E1 34s00            [12] 1478 	addc	a, #(_send_arp_request_arp_packet_10000_92 >> 8)
      0004E3 FC               [12] 1479 	mov	r4,a
      0004E4 EE               [12] 1480 	mov	a,r6
      0004E5 24r1C            [12] 1481 	add	a, #_send_arp_request_source_ip_10000_92
      0004E7 F5 82            [12] 1482 	mov	dpl,a
      0004E9 EF               [12] 1483 	mov	a,r7
      0004EA 34s00            [12] 1484 	addc	a, #(_send_arp_request_source_ip_10000_92 >> 8)
      0004EC F5 83            [12] 1485 	mov	dph,a
      0004EE E0               [24] 1486 	movx	a,@dptr
      0004EF 8D 82            [24] 1487 	mov	dpl,r5
      0004F1 8C 83            [24] 1488 	mov	dph,r4
      0004F3 F0               [24] 1489 	movx	@dptr,a
                                   1490 ;	Eth.c:201: for (int i = 0; i < 4; i++) {
      0004F4 0E               [12] 1491 	inc	r6
      0004F5 BE 00 CF         [24] 1492 	cjne	r6,#0x00,00121$
      0004F8 0F               [12] 1493 	inc	r7
      0004F9 80 CC            [24] 1494 	sjmp	00121$
      0004FB                       1495 00103$:
                                   1496 ;	Eth.c:206: for (int i = 0; i < 6; i++) {
      0004FB 7F 00            [12] 1497 	mov	r7,#0x00
      0004FD                       1498 00124$:
      0004FD BF 06 00         [24] 1499 	cjne	r7,#0x06,00215$
      000500                       1500 00215$:
      000500 50 19            [24] 1501 	jnc	00104$
                                   1502 ;	Eth.c:207: arp_packet[33 + i] = 0x00;
      000502 8F 06            [24] 1503 	mov	ar6,r7
      000504 74 21            [12] 1504 	mov	a,#0x21
      000506 2E               [12] 1505 	add	a, r6
      000507 FE               [12] 1506 	mov	r6,a
      000508 33               [12] 1507 	rlc	a
      000509 95 E0            [12] 1508 	subb	a,acc
      00050B FD               [12] 1509 	mov	r5,a
      00050C EE               [12] 1510 	mov	a,r6
      00050D 24r24            [12] 1511 	add	a, #_send_arp_request_arp_packet_10000_92
      00050F F5 82            [12] 1512 	mov	dpl,a
      000511 ED               [12] 1513 	mov	a,r5
      000512 34s00            [12] 1514 	addc	a, #(_send_arp_request_arp_packet_10000_92 >> 8)
      000514 F5 83            [12] 1515 	mov	dph,a
      000516 E4               [12] 1516 	clr	a
      000517 F0               [24] 1517 	movx	@dptr,a
                                   1518 ;	Eth.c:206: for (int i = 0; i < 6; i++) {
      000518 0F               [12] 1519 	inc	r7
      000519 80 E2            [24] 1520 	sjmp	00124$
      00051B                       1521 00104$:
                                   1522 ;	Eth.c:211: for (int i = 0; i < 4; i++) {
      00051B 7E 00            [12] 1523 	mov	r6,#0x00
      00051D 7F 00            [12] 1524 	mov	r7,#0x00
      00051F                       1525 00127$:
      00051F C3               [12] 1526 	clr	c
      000520 EE               [12] 1527 	mov	a,r6
      000521 94 04            [12] 1528 	subb	a,#0x04
      000523 EF               [12] 1529 	mov	a,r7
      000524 64 80            [12] 1530 	xrl	a,#0x80
      000526 94 80            [12] 1531 	subb	a,#0x80
      000528 50 29            [24] 1532 	jnc	00105$
                                   1533 ;	Eth.c:212: arp_packet[39 + i] = target_ip[i];
      00052A 8E 05            [24] 1534 	mov	ar5,r6
      00052C 74 27            [12] 1535 	mov	a,#0x27
      00052E 2D               [12] 1536 	add	a, r5
      00052F FD               [12] 1537 	mov	r5,a
      000530 33               [12] 1538 	rlc	a
      000531 95 E0            [12] 1539 	subb	a,acc
      000533 FC               [12] 1540 	mov	r4,a
      000534 ED               [12] 1541 	mov	a,r5
      000535 24r24            [12] 1542 	add	a, #_send_arp_request_arp_packet_10000_92
      000537 FD               [12] 1543 	mov	r5,a
      000538 EC               [12] 1544 	mov	a,r4
      000539 34s00            [12] 1545 	addc	a, #(_send_arp_request_arp_packet_10000_92 >> 8)
      00053B FC               [12] 1546 	mov	r4,a
      00053C EE               [12] 1547 	mov	a,r6
      00053D 24r20            [12] 1548 	add	a, #_send_arp_request_target_ip_10000_92
      00053F F5 82            [12] 1549 	mov	dpl,a
      000541 EF               [12] 1550 	mov	a,r7
      000542 34s00            [12] 1551 	addc	a, #(_send_arp_request_target_ip_10000_92 >> 8)
      000544 F5 83            [12] 1552 	mov	dph,a
      000546 E0               [24] 1553 	movx	a,@dptr
      000547 8D 82            [24] 1554 	mov	dpl,r5
      000549 8C 83            [24] 1555 	mov	dph,r4
      00054B F0               [24] 1556 	movx	@dptr,a
                                   1557 ;	Eth.c:211: for (int i = 0; i < 4; i++) {
      00054C 0E               [12] 1558 	inc	r6
      00054D BE 00 CF         [24] 1559 	cjne	r6,#0x00,00127$
      000550 0F               [12] 1560 	inc	r7
      000551 80 CC            [24] 1561 	sjmp	00127$
      000553                       1562 00105$:
                                   1563 ;	Eth.c:225: spi_buffer_write(frame_size, start_address, arp_packet);
      000553 90r00r00         [24] 1564 	mov	dptr,#_spi_buffer_write_PARM_2
      000556 E4               [12] 1565 	clr	a
      000557 F0               [24] 1566 	movx	@dptr,a
      000558 A3               [24] 1567 	inc	dptr
      000559 F0               [24] 1568 	movx	@dptr,a
      00055A 90r00r00         [24] 1569 	mov	dptr,#_spi_buffer_write_PARM_3
      00055D 74r24            [12] 1570 	mov	a,#_send_arp_request_arp_packet_10000_92
      00055F F0               [24] 1571 	movx	@dptr,a
      000560 74s00            [12] 1572 	mov	a,#(_send_arp_request_arp_packet_10000_92 >> 8)
      000562 A3               [24] 1573 	inc	dptr
      000563 F0               [24] 1574 	movx	@dptr,a
      000564 E4               [12] 1575 	clr	a
      000565 A3               [24] 1576 	inc	dptr
      000566 F0               [24] 1577 	movx	@dptr,a
      000567 90 00 2C         [24] 1578 	mov	dptr,#0x002c
      00056A 12r00r00         [24] 1579 	lcall	_spi_buffer_write
                                   1580 ;	Eth.c:228: enc28j60_set_transmit_pointers(start_address, end_address);
      00056D 90r00r0A         [24] 1581 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      000570 74 2B            [12] 1582 	mov	a,#0x2b
      000572 F0               [24] 1583 	movx	@dptr,a
      000573 E4               [12] 1584 	clr	a
      000574 A3               [24] 1585 	inc	dptr
      000575 F0               [24] 1586 	movx	@dptr,a
      000576 90 00 00         [24] 1587 	mov	dptr,#0x0000
      000579 12r02r43         [24] 1588 	lcall	_enc28j60_set_transmit_pointers
                                   1589 ;	Eth.c:231: RX_enable();
      00057C 12r03r58         [24] 1590 	lcall	_RX_enable
                                   1591 ;	Eth.c:232: enc28j60_start_transmission();
      00057F 12r00rEB         [24] 1592 	lcall	_enc28j60_start_transmission
                                   1593 ;	Eth.c:235: if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
      000582 90 01 F4         [24] 1594 	mov	dptr,#0x01f4
      000585 12r02rBA         [24] 1595 	lcall	_wait_for_transmission_complete
      000588 E5 82            [12] 1596 	mov	a, dpl
      00058A 60 33            [24] 1597 	jz	00112$
                                   1598 ;	Eth.c:237: if (enc28j60_transmission_successful()) {
      00058C 12r03r1D         [24] 1599 	lcall	_enc28j60_transmission_successful
      00058F E5 82            [12] 1600 	mov	a, dpl
      000591 60 16            [24] 1601 	jz	00109$
                                   1602 ;	Eth.c:238: printf("ARP request sent successfully.\n\r");
      000593 74r7F            [12] 1603 	mov	a,#___str_3
      000595 C0 E0            [24] 1604 	push	acc
      000597 74s00            [12] 1605 	mov	a,#(___str_3 >> 8)
      000599 C0 E0            [24] 1606 	push	acc
      00059B 74 80            [12] 1607 	mov	a,#0x80
      00059D C0 E0            [24] 1608 	push	acc
      00059F 12r00r00         [24] 1609 	lcall	_printf
      0005A2 15 81            [12] 1610 	dec	sp
      0005A4 15 81            [12] 1611 	dec	sp
      0005A6 15 81            [12] 1612 	dec	sp
      0005A8 22               [24] 1613 	ret
      0005A9                       1614 00109$:
                                   1615 ;	Eth.c:240: printf("ARP transmission failed. Check error flags.\n\r");
      0005A9 74rA0            [12] 1616 	mov	a,#___str_4
      0005AB C0 E0            [24] 1617 	push	acc
      0005AD 74s00            [12] 1618 	mov	a,#(___str_4 >> 8)
      0005AF C0 E0            [24] 1619 	push	acc
      0005B1 74 80            [12] 1620 	mov	a,#0x80
      0005B3 C0 E0            [24] 1621 	push	acc
      0005B5 12r00r00         [24] 1622 	lcall	_printf
      0005B8 15 81            [12] 1623 	dec	sp
      0005BA 15 81            [12] 1624 	dec	sp
      0005BC 15 81            [12] 1625 	dec	sp
      0005BE 22               [24] 1626 	ret
      0005BF                       1627 00112$:
                                   1628 ;	Eth.c:243: printf("Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
      0005BF 74rCE            [12] 1629 	mov	a,#___str_5
      0005C1 C0 E0            [24] 1630 	push	acc
      0005C3 74s00            [12] 1631 	mov	a,#(___str_5 >> 8)
      0005C5 C0 E0            [24] 1632 	push	acc
      0005C7 74 80            [12] 1633 	mov	a,#0x80
      0005C9 C0 E0            [24] 1634 	push	acc
      0005CB 12r00r00         [24] 1635 	lcall	_printf
      0005CE 15 81            [12] 1636 	dec	sp
      0005D0 15 81            [12] 1637 	dec	sp
      0005D2 15 81            [12] 1638 	dec	sp
                                   1639 ;	Eth.c:245: }
      0005D4 22               [24] 1640 	ret
                                   1641 ;------------------------------------------------------------
                                   1642 ;Allocation info for local variables in function 'external_interrupt0_isr'
                                   1643 ;------------------------------------------------------------
                                   1644 ;eir                       Allocated with name '_external_interrupt0_isr_eir_10000_111'
                                   1645 ;------------------------------------------------------------
                                   1646 ;	Eth.c:247: void external_interrupt0_isr(void) __interrupt (0)
                                   1647 ;	-----------------------------------------
                                   1648 ;	 function external_interrupt0_isr
                                   1649 ;	-----------------------------------------
      0005D5                       1650 _external_interrupt0_isr:
      0005D5 C0*00            [24] 1651 	push	bits
      0005D7 C0 E0            [24] 1652 	push	acc
      0005D9 C0 F0            [24] 1653 	push	b
      0005DB C0 82            [24] 1654 	push	dpl
      0005DD C0 83            [24] 1655 	push	dph
      0005DF C0 07            [24] 1656 	push	(0+7)
      0005E1 C0 06            [24] 1657 	push	(0+6)
      0005E3 C0 05            [24] 1658 	push	(0+5)
      0005E5 C0 04            [24] 1659 	push	(0+4)
      0005E7 C0 03            [24] 1660 	push	(0+3)
      0005E9 C0 02            [24] 1661 	push	(0+2)
      0005EB C0 01            [24] 1662 	push	(0+1)
      0005ED C0 00            [24] 1663 	push	(0+0)
      0005EF C0 D0            [24] 1664 	push	psw
      0005F1 75 D0 00         [24] 1665 	mov	psw,#0x00
                                   1666 ;	Eth.c:249: uint8_t eir = mac_spi_read(0x1C, 0); // Read EIR register (address 0x1C, bank 0)
      0005F4 90r00r00         [24] 1667 	mov	dptr,#_mac_spi_read_PARM_2
      0005F7 E4               [12] 1668 	clr	a
      0005F8 F0               [24] 1669 	movx	@dptr,a
      0005F9 75 82 1C         [24] 1670 	mov	dpl, #0x1c
      0005FC 12r00r00         [24] 1671 	lcall	_mac_spi_read
                                   1672 ;	Eth.c:250: printf("Interrrrrrrruuuuuuuuuppppppppttttttt\n\r");
      0005FF 74r11            [12] 1673 	mov	a,#___str_6
      000601 C0 E0            [24] 1674 	push	acc
      000603 74s01            [12] 1675 	mov	a,#(___str_6 >> 8)
      000605 C0 E0            [24] 1676 	push	acc
      000607 74 80            [12] 1677 	mov	a,#0x80
      000609 C0 E0            [24] 1678 	push	acc
      00060B 12r00r00         [24] 1679 	lcall	_printf
      00060E 15 81            [12] 1680 	dec	sp
      000610 15 81            [12] 1681 	dec	sp
      000612 15 81            [12] 1682 	dec	sp
                                   1683 ;	Eth.c:254: }
      000614 D0 D0            [24] 1684 	pop	psw
      000616 D0 00            [24] 1685 	pop	(0+0)
      000618 D0 01            [24] 1686 	pop	(0+1)
      00061A D0 02            [24] 1687 	pop	(0+2)
      00061C D0 03            [24] 1688 	pop	(0+3)
      00061E D0 04            [24] 1689 	pop	(0+4)
      000620 D0 05            [24] 1690 	pop	(0+5)
      000622 D0 06            [24] 1691 	pop	(0+6)
      000624 D0 07            [24] 1692 	pop	(0+7)
      000626 D0 83            [24] 1693 	pop	dph
      000628 D0 82            [24] 1694 	pop	dpl
      00062A D0 F0            [24] 1695 	pop	b
      00062C D0 E0            [24] 1696 	pop	acc
      00062E D0*00            [24] 1697 	pop	bits
      000630 32               [24] 1698 	reti
                                   1699 	.area CSEG    (CODE)
                                   1700 	.area CONST   (CODE)
                                   1701 	.area CONST   (CODE)
      000000                       1702 ___str_0:
      000000 49 6E 76 61 6C 69 64  1703 	.ascii "Invalid RX buffer range."
             20 52 58 20 62 75 66
             66 65 72 20 72 61 6E
             67 65 2E
      000018 0A                    1704 	.db 0x0a
      000019 00                    1705 	.db 0x00
                                   1706 	.area CSEG    (CODE)
                                   1707 	.area CONST   (CODE)
      00001A                       1708 ___str_1:
      00001A 52 58 20 62 75 66 66  1709 	.ascii "RX buffer initialized: 0x%04X to 0x%04X."
             65 72 20 69 6E 69 74
             69 61 6C 69 7A 65 64
             3A 20 30 78 25 30 34
             58 20 74 6F 20 30 78
             25 30 34 58 2E
      000042 0A                    1710 	.db 0x0a
      000043 00                    1711 	.db 0x00
                                   1712 	.area CSEG    (CODE)
                                   1713 	.area CONST   (CODE)
      000044                       1714 ___str_2:
      000044 0A                    1715 	.db 0x0a
      000045 49 6E 76 61 6C 69 64  1716 	.ascii "Invalid Buffer Size. Buffer exceeds valid address range."
             20 42 75 66 66 65 72
             20 53 69 7A 65 2E 20
             42 75 66 66 65 72 20
             65 78 63 65 65 64 73
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 72 61 6E 67 65 2E
      00007D 0A                    1717 	.db 0x0a
      00007E 00                    1718 	.db 0x00
                                   1719 	.area CSEG    (CODE)
                                   1720 	.area CONST   (CODE)
      00007F                       1721 ___str_3:
      00007F 41 52 50 20 72 65 71  1722 	.ascii "ARP request sent successfully."
             75 65 73 74 20 73 65
             6E 74 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79 2E
      00009D 0A                    1723 	.db 0x0a
      00009E 0D                    1724 	.db 0x0d
      00009F 00                    1725 	.db 0x00
                                   1726 	.area CSEG    (CODE)
                                   1727 	.area CONST   (CODE)
      0000A0                       1728 ___str_4:
      0000A0 41 52 50 20 74 72 61  1729 	.ascii "ARP transmission failed. Check error flags."
             6E 73 6D 69 73 73 69
             6F 6E 20 66 61 69 6C
             65 64 2E 20 43 68 65
             63 6B 20 65 72 72 6F
             72 20 66 6C 61 67 73
             2E
      0000CB 0A                    1730 	.db 0x0a
      0000CC 0D                    1731 	.db 0x0d
      0000CD 00                    1732 	.db 0x00
                                   1733 	.area CSEG    (CODE)
                                   1734 	.area CONST   (CODE)
      0000CE                       1735 ___str_5:
      0000CE 54 72 61 6E 73 6D 69  1736 	.ascii "Transmission timeout. ENC28J60 may not be functioning correc"
             73 73 69 6F 6E 20 74
             69 6D 65 6F 75 74 2E
             20 45 4E 43 32 38 4A
             36 30 20 6D 61 79 20
             6E 6F 74 20 62 65 20
             66 75 6E 63 74 69 6F
             6E 69 6E 67 20 63 6F
             72 72 65 63
      00010A 74 6C 79 2E           1737 	.ascii "tly."
      00010E 0A                    1738 	.db 0x0a
      00010F 0D                    1739 	.db 0x0d
      000110 00                    1740 	.db 0x00
                                   1741 	.area CSEG    (CODE)
                                   1742 	.area CONST   (CODE)
      000111                       1743 ___str_6:
      000111 49 6E 74 65 72 72 72  1744 	.ascii "Interrrrrrrruuuuuuuuuppppppppttttttt"
             72 72 72 72 72 75 75
             75 75 75 75 75 75 75
             70 70 70 70 70 70 70
             70 74 74 74 74 74 74
             74
      000135 0A                    1745 	.db 0x0a
      000136 0D                    1746 	.db 0x0d
      000137 00                    1747 	.db 0x00
                                   1748 	.area CSEG    (CODE)
                                   1749 	.area XINIT   (CODE)
      000000                       1750 __xinit__source_mac:
      000000 02                    1751 	.db #0x02	; 2
      000001 11                    1752 	.db #0x11	; 17
      000002 22                    1753 	.db #0x22	; 34
      000003 33                    1754 	.db #0x33	; 51	'3'
      000004 44                    1755 	.db #0x44	; 68	'D'
      000005 55                    1756 	.db #0x55	; 85	'U'
      000006                       1757 __xinit__dest_mac:
      000006 FF                    1758 	.db #0xff	; 255
      000007 FF                    1759 	.db #0xff	; 255
      000008 FF                    1760 	.db #0xff	; 255
      000009 FF                    1761 	.db #0xff	; 255
      00000A FF                    1762 	.db #0xff	; 255
      00000B FF                    1763 	.db #0xff	; 255
      00000C                       1764 __xinit__source_ip:
      00000C C0                    1765 	.db #0xc0	; 192
      00000D A8                    1766 	.db #0xa8	; 168
      00000E 01                    1767 	.db #0x01	; 1
      00000F 64                    1768 	.db #0x64	; 100	'd'
      000010                       1769 __xinit__target_ip:
      000010 C0                    1770 	.db #0xc0	; 192
      000011 A8                    1771 	.db #0xa8	; 168
      000012 01                    1772 	.db #0x01	; 1
      000013 01                    1773 	.db #0x01	; 1
                                   1774 	.area CABS    (ABS,CODE)
