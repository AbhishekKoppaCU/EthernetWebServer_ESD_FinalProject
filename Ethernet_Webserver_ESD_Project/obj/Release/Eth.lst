                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module Eth
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _enc28j60_transmission_successful
                                     12 	.globl _wait_for_transmission_complete
                                     13 	.globl _enc28j60_set_transmit_pointers
                                     14 	.globl _enc28j60_start_transmission
                                     15 	.globl _delay_ms
                                     16 	.globl _set_mac_address
                                     17 	.globl _spi_control_write
                                     18 	.globl _spi_buffer_write
                                     19 	.globl _mac_spi_read
                                     20 	.globl _printf
                                     21 	.globl _TF1
                                     22 	.globl _TR1
                                     23 	.globl _TF0
                                     24 	.globl _TR0
                                     25 	.globl _IE1
                                     26 	.globl _IT1
                                     27 	.globl _IE0
                                     28 	.globl _IT0
                                     29 	.globl _SM0
                                     30 	.globl _SM1
                                     31 	.globl _SM2
                                     32 	.globl _REN
                                     33 	.globl _TB8
                                     34 	.globl _RB8
                                     35 	.globl _TI
                                     36 	.globl _RI
                                     37 	.globl _CY
                                     38 	.globl _AC
                                     39 	.globl _F0
                                     40 	.globl _RS1
                                     41 	.globl _RS0
                                     42 	.globl _OV
                                     43 	.globl _F1
                                     44 	.globl _P
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD0
                                     52 	.globl _TXD
                                     53 	.globl _RXD0
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _PS
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _EA
                                     93 	.globl _ES
                                     94 	.globl _ET1
                                     95 	.globl _EX1
                                     96 	.globl _ET0
                                     97 	.globl _EX0
                                     98 	.globl _BREG_F7
                                     99 	.globl _BREG_F6
                                    100 	.globl _BREG_F5
                                    101 	.globl _BREG_F4
                                    102 	.globl _BREG_F3
                                    103 	.globl _BREG_F2
                                    104 	.globl _BREG_F1
                                    105 	.globl _BREG_F0
                                    106 	.globl _P5_7
                                    107 	.globl _P5_6
                                    108 	.globl _P5_5
                                    109 	.globl _P5_4
                                    110 	.globl _P5_3
                                    111 	.globl _P5_2
                                    112 	.globl _P5_1
                                    113 	.globl _P5_0
                                    114 	.globl _P4_7
                                    115 	.globl _P4_6
                                    116 	.globl _P4_5
                                    117 	.globl _P4_4
                                    118 	.globl _P4_3
                                    119 	.globl _P4_2
                                    120 	.globl _P4_1
                                    121 	.globl _P4_0
                                    122 	.globl _PX0L
                                    123 	.globl _PT0L
                                    124 	.globl _PX1L
                                    125 	.globl _PT1L
                                    126 	.globl _PSL
                                    127 	.globl _PT2L
                                    128 	.globl _PPCL
                                    129 	.globl _EC
                                    130 	.globl _CCF0
                                    131 	.globl _CCF1
                                    132 	.globl _CCF2
                                    133 	.globl _CCF3
                                    134 	.globl _CCF4
                                    135 	.globl _CR
                                    136 	.globl _CF
                                    137 	.globl _TF2
                                    138 	.globl _EXF2
                                    139 	.globl _RCLK
                                    140 	.globl _TCLK
                                    141 	.globl _EXEN2
                                    142 	.globl _TR2
                                    143 	.globl _C_T2
                                    144 	.globl _CP_RL2
                                    145 	.globl _T2CON_7
                                    146 	.globl _T2CON_6
                                    147 	.globl _T2CON_5
                                    148 	.globl _T2CON_4
                                    149 	.globl _T2CON_3
                                    150 	.globl _T2CON_2
                                    151 	.globl _T2CON_1
                                    152 	.globl _T2CON_0
                                    153 	.globl _PT2
                                    154 	.globl _ET2
                                    155 	.globl _TMOD
                                    156 	.globl _TL1
                                    157 	.globl _TL0
                                    158 	.globl _TH1
                                    159 	.globl _TH0
                                    160 	.globl _TCON
                                    161 	.globl _SP
                                    162 	.globl _SCON
                                    163 	.globl _SBUF0
                                    164 	.globl _SBUF
                                    165 	.globl _PSW
                                    166 	.globl _PCON
                                    167 	.globl _P3
                                    168 	.globl _P2
                                    169 	.globl _P1
                                    170 	.globl _P0
                                    171 	.globl _IP
                                    172 	.globl _IE
                                    173 	.globl _DP0L
                                    174 	.globl _DPL
                                    175 	.globl _DP0H
                                    176 	.globl _DPH
                                    177 	.globl _B
                                    178 	.globl _ACC
                                    179 	.globl _EECON
                                    180 	.globl _KBF
                                    181 	.globl _KBE
                                    182 	.globl _KBLS
                                    183 	.globl _BRL
                                    184 	.globl _BDRCON
                                    185 	.globl _T2MOD
                                    186 	.globl _SPDAT
                                    187 	.globl _SPSTA
                                    188 	.globl _SPCON
                                    189 	.globl _SADEN
                                    190 	.globl _SADDR
                                    191 	.globl _WDTPRG
                                    192 	.globl _WDTRST
                                    193 	.globl _P5
                                    194 	.globl _P4
                                    195 	.globl _IPH1
                                    196 	.globl _IPL1
                                    197 	.globl _IPH0
                                    198 	.globl _IPL0
                                    199 	.globl _IEN1
                                    200 	.globl _IEN0
                                    201 	.globl _CMOD
                                    202 	.globl _CL
                                    203 	.globl _CH
                                    204 	.globl _CCON
                                    205 	.globl _CCAPM4
                                    206 	.globl _CCAPM3
                                    207 	.globl _CCAPM2
                                    208 	.globl _CCAPM1
                                    209 	.globl _CCAPM0
                                    210 	.globl _CCAP4L
                                    211 	.globl _CCAP3L
                                    212 	.globl _CCAP2L
                                    213 	.globl _CCAP1L
                                    214 	.globl _CCAP0L
                                    215 	.globl _CCAP4H
                                    216 	.globl _CCAP3H
                                    217 	.globl _CCAP2H
                                    218 	.globl _CCAP1H
                                    219 	.globl _CCAP0H
                                    220 	.globl _CKCON1
                                    221 	.globl _CKCON0
                                    222 	.globl _CKRL
                                    223 	.globl _AUXR1
                                    224 	.globl _AUXR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T2CON
                                    230 	.globl _target_ip
                                    231 	.globl _source_ip
                                    232 	.globl _dest_mac
                                    233 	.globl _source_mac
                                    234 	.globl _enc28j60_set_transmit_pointers_PARM_2
                                    235 	.globl _enc28j60_init_rx_buffer_PARM_2
                                    236 	.globl _enc28j60_init_rx_buffer
                                    237 	.globl _send_arp_request
                                    238 ;--------------------------------------------------------
                                    239 ; special function registers
                                    240 ;--------------------------------------------------------
                                    241 	.area RSEG    (ABS,DATA)
      000000                        242 	.org 0x0000
                           0000C8   243 _T2CON	=	0x00c8
                           0000CA   244 _RCAP2L	=	0x00ca
                           0000CB   245 _RCAP2H	=	0x00cb
                           0000CC   246 _TL2	=	0x00cc
                           0000CD   247 _TH2	=	0x00cd
                           00008E   248 _AUXR	=	0x008e
                           0000A2   249 _AUXR1	=	0x00a2
                           000097   250 _CKRL	=	0x0097
                           00008F   251 _CKCON0	=	0x008f
                           0000AF   252 _CKCON1	=	0x00af
                           0000FA   253 _CCAP0H	=	0x00fa
                           0000FB   254 _CCAP1H	=	0x00fb
                           0000FC   255 _CCAP2H	=	0x00fc
                           0000FD   256 _CCAP3H	=	0x00fd
                           0000FE   257 _CCAP4H	=	0x00fe
                           0000EA   258 _CCAP0L	=	0x00ea
                           0000EB   259 _CCAP1L	=	0x00eb
                           0000EC   260 _CCAP2L	=	0x00ec
                           0000ED   261 _CCAP3L	=	0x00ed
                           0000EE   262 _CCAP4L	=	0x00ee
                           0000DA   263 _CCAPM0	=	0x00da
                           0000DB   264 _CCAPM1	=	0x00db
                           0000DC   265 _CCAPM2	=	0x00dc
                           0000DD   266 _CCAPM3	=	0x00dd
                           0000DE   267 _CCAPM4	=	0x00de
                           0000D8   268 _CCON	=	0x00d8
                           0000F9   269 _CH	=	0x00f9
                           0000E9   270 _CL	=	0x00e9
                           0000D9   271 _CMOD	=	0x00d9
                           0000A8   272 _IEN0	=	0x00a8
                           0000B1   273 _IEN1	=	0x00b1
                           0000B8   274 _IPL0	=	0x00b8
                           0000B7   275 _IPH0	=	0x00b7
                           0000B2   276 _IPL1	=	0x00b2
                           0000B3   277 _IPH1	=	0x00b3
                           0000C0   278 _P4	=	0x00c0
                           0000E8   279 _P5	=	0x00e8
                           0000A6   280 _WDTRST	=	0x00a6
                           0000A7   281 _WDTPRG	=	0x00a7
                           0000A9   282 _SADDR	=	0x00a9
                           0000B9   283 _SADEN	=	0x00b9
                           0000C3   284 _SPCON	=	0x00c3
                           0000C4   285 _SPSTA	=	0x00c4
                           0000C5   286 _SPDAT	=	0x00c5
                           0000C9   287 _T2MOD	=	0x00c9
                           00009B   288 _BDRCON	=	0x009b
                           00009A   289 _BRL	=	0x009a
                           00009C   290 _KBLS	=	0x009c
                           00009D   291 _KBE	=	0x009d
                           00009E   292 _KBF	=	0x009e
                           0000D2   293 _EECON	=	0x00d2
                           0000E0   294 _ACC	=	0x00e0
                           0000F0   295 _B	=	0x00f0
                           000083   296 _DPH	=	0x0083
                           000083   297 _DP0H	=	0x0083
                           000082   298 _DPL	=	0x0082
                           000082   299 _DP0L	=	0x0082
                           0000A8   300 _IE	=	0x00a8
                           0000B8   301 _IP	=	0x00b8
                           000080   302 _P0	=	0x0080
                           000090   303 _P1	=	0x0090
                           0000A0   304 _P2	=	0x00a0
                           0000B0   305 _P3	=	0x00b0
                           000087   306 _PCON	=	0x0087
                           0000D0   307 _PSW	=	0x00d0
                           000099   308 _SBUF	=	0x0099
                           000099   309 _SBUF0	=	0x0099
                           000098   310 _SCON	=	0x0098
                           000081   311 _SP	=	0x0081
                           000088   312 _TCON	=	0x0088
                           00008C   313 _TH0	=	0x008c
                           00008D   314 _TH1	=	0x008d
                           00008A   315 _TL0	=	0x008a
                           00008B   316 _TL1	=	0x008b
                           000089   317 _TMOD	=	0x0089
                                    318 ;--------------------------------------------------------
                                    319 ; special function bits
                                    320 ;--------------------------------------------------------
                                    321 	.area RSEG    (ABS,DATA)
      000000                        322 	.org 0x0000
                           0000AD   323 _ET2	=	0x00ad
                           0000BD   324 _PT2	=	0x00bd
                           0000C8   325 _T2CON_0	=	0x00c8
                           0000C9   326 _T2CON_1	=	0x00c9
                           0000CA   327 _T2CON_2	=	0x00ca
                           0000CB   328 _T2CON_3	=	0x00cb
                           0000CC   329 _T2CON_4	=	0x00cc
                           0000CD   330 _T2CON_5	=	0x00cd
                           0000CE   331 _T2CON_6	=	0x00ce
                           0000CF   332 _T2CON_7	=	0x00cf
                           0000C8   333 _CP_RL2	=	0x00c8
                           0000C9   334 _C_T2	=	0x00c9
                           0000CA   335 _TR2	=	0x00ca
                           0000CB   336 _EXEN2	=	0x00cb
                           0000CC   337 _TCLK	=	0x00cc
                           0000CD   338 _RCLK	=	0x00cd
                           0000CE   339 _EXF2	=	0x00ce
                           0000CF   340 _TF2	=	0x00cf
                           0000DF   341 _CF	=	0x00df
                           0000DE   342 _CR	=	0x00de
                           0000DC   343 _CCF4	=	0x00dc
                           0000DB   344 _CCF3	=	0x00db
                           0000DA   345 _CCF2	=	0x00da
                           0000D9   346 _CCF1	=	0x00d9
                           0000D8   347 _CCF0	=	0x00d8
                           0000AE   348 _EC	=	0x00ae
                           0000BE   349 _PPCL	=	0x00be
                           0000BD   350 _PT2L	=	0x00bd
                           0000BC   351 _PSL	=	0x00bc
                           0000BB   352 _PT1L	=	0x00bb
                           0000BA   353 _PX1L	=	0x00ba
                           0000B9   354 _PT0L	=	0x00b9
                           0000B8   355 _PX0L	=	0x00b8
                           0000C0   356 _P4_0	=	0x00c0
                           0000C1   357 _P4_1	=	0x00c1
                           0000C2   358 _P4_2	=	0x00c2
                           0000C3   359 _P4_3	=	0x00c3
                           0000C4   360 _P4_4	=	0x00c4
                           0000C5   361 _P4_5	=	0x00c5
                           0000C6   362 _P4_6	=	0x00c6
                           0000C7   363 _P4_7	=	0x00c7
                           0000E8   364 _P5_0	=	0x00e8
                           0000E9   365 _P5_1	=	0x00e9
                           0000EA   366 _P5_2	=	0x00ea
                           0000EB   367 _P5_3	=	0x00eb
                           0000EC   368 _P5_4	=	0x00ec
                           0000ED   369 _P5_5	=	0x00ed
                           0000EE   370 _P5_6	=	0x00ee
                           0000EF   371 _P5_7	=	0x00ef
                           0000F0   372 _BREG_F0	=	0x00f0
                           0000F1   373 _BREG_F1	=	0x00f1
                           0000F2   374 _BREG_F2	=	0x00f2
                           0000F3   375 _BREG_F3	=	0x00f3
                           0000F4   376 _BREG_F4	=	0x00f4
                           0000F5   377 _BREG_F5	=	0x00f5
                           0000F6   378 _BREG_F6	=	0x00f6
                           0000F7   379 _BREG_F7	=	0x00f7
                           0000A8   380 _EX0	=	0x00a8
                           0000A9   381 _ET0	=	0x00a9
                           0000AA   382 _EX1	=	0x00aa
                           0000AB   383 _ET1	=	0x00ab
                           0000AC   384 _ES	=	0x00ac
                           0000AF   385 _EA	=	0x00af
                           0000B8   386 _PX0	=	0x00b8
                           0000B9   387 _PT0	=	0x00b9
                           0000BA   388 _PX1	=	0x00ba
                           0000BB   389 _PT1	=	0x00bb
                           0000BC   390 _PS	=	0x00bc
                           000080   391 _P0_0	=	0x0080
                           000081   392 _P0_1	=	0x0081
                           000082   393 _P0_2	=	0x0082
                           000083   394 _P0_3	=	0x0083
                           000084   395 _P0_4	=	0x0084
                           000085   396 _P0_5	=	0x0085
                           000086   397 _P0_6	=	0x0086
                           000087   398 _P0_7	=	0x0087
                           000090   399 _P1_0	=	0x0090
                           000091   400 _P1_1	=	0x0091
                           000092   401 _P1_2	=	0x0092
                           000093   402 _P1_3	=	0x0093
                           000094   403 _P1_4	=	0x0094
                           000095   404 _P1_5	=	0x0095
                           000096   405 _P1_6	=	0x0096
                           000097   406 _P1_7	=	0x0097
                           0000A0   407 _P2_0	=	0x00a0
                           0000A1   408 _P2_1	=	0x00a1
                           0000A2   409 _P2_2	=	0x00a2
                           0000A3   410 _P2_3	=	0x00a3
                           0000A4   411 _P2_4	=	0x00a4
                           0000A5   412 _P2_5	=	0x00a5
                           0000A6   413 _P2_6	=	0x00a6
                           0000A7   414 _P2_7	=	0x00a7
                           0000B0   415 _P3_0	=	0x00b0
                           0000B1   416 _P3_1	=	0x00b1
                           0000B2   417 _P3_2	=	0x00b2
                           0000B3   418 _P3_3	=	0x00b3
                           0000B4   419 _P3_4	=	0x00b4
                           0000B5   420 _P3_5	=	0x00b5
                           0000B6   421 _P3_6	=	0x00b6
                           0000B7   422 _P3_7	=	0x00b7
                           0000B0   423 _RXD	=	0x00b0
                           0000B0   424 _RXD0	=	0x00b0
                           0000B1   425 _TXD	=	0x00b1
                           0000B1   426 _TXD0	=	0x00b1
                           0000B2   427 _INT0	=	0x00b2
                           0000B3   428 _INT1	=	0x00b3
                           0000B4   429 _T0	=	0x00b4
                           0000B5   430 _T1	=	0x00b5
                           0000B6   431 _WR	=	0x00b6
                           0000B7   432 _RD	=	0x00b7
                           0000D0   433 _P	=	0x00d0
                           0000D1   434 _F1	=	0x00d1
                           0000D2   435 _OV	=	0x00d2
                           0000D3   436 _RS0	=	0x00d3
                           0000D4   437 _RS1	=	0x00d4
                           0000D5   438 _F0	=	0x00d5
                           0000D6   439 _AC	=	0x00d6
                           0000D7   440 _CY	=	0x00d7
                           000098   441 _RI	=	0x0098
                           000099   442 _TI	=	0x0099
                           00009A   443 _RB8	=	0x009a
                           00009B   444 _TB8	=	0x009b
                           00009C   445 _REN	=	0x009c
                           00009D   446 _SM2	=	0x009d
                           00009E   447 _SM1	=	0x009e
                           00009F   448 _SM0	=	0x009f
                           000088   449 _IT0	=	0x0088
                           000089   450 _IE0	=	0x0089
                           00008A   451 _IT1	=	0x008a
                           00008B   452 _IE1	=	0x008b
                           00008C   453 _TR0	=	0x008c
                           00008D   454 _TF0	=	0x008d
                           00008E   455 _TR1	=	0x008e
                           00008F   456 _TF1	=	0x008f
                                    457 ;--------------------------------------------------------
                                    458 ; overlayable register banks
                                    459 ;--------------------------------------------------------
                                    460 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        461 	.ds 8
                                    462 ;--------------------------------------------------------
                                    463 ; internal ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area DSEG    (DATA)
                                    466 ;--------------------------------------------------------
                                    467 ; overlayable items in internal ram
                                    468 ;--------------------------------------------------------
                                    469 ;--------------------------------------------------------
                                    470 ; indirectly addressable internal ram data
                                    471 ;--------------------------------------------------------
                                    472 	.area ISEG    (DATA)
                                    473 ;--------------------------------------------------------
                                    474 ; absolute internal ram data
                                    475 ;--------------------------------------------------------
                                    476 	.area IABS    (ABS,DATA)
                                    477 	.area IABS    (ABS,DATA)
                                    478 ;--------------------------------------------------------
                                    479 ; bit data
                                    480 ;--------------------------------------------------------
                                    481 	.area BSEG    (BIT)
      000000                        482 _enc28j60_transmission_successful_sloc0_1_0:
      000000                        483 	.ds 1
                                    484 ;--------------------------------------------------------
                                    485 ; paged external ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area PSEG    (PAG,XDATA)
                                    488 ;--------------------------------------------------------
                                    489 ; uninitialized external ram data
                                    490 ;--------------------------------------------------------
                                    491 	.area XSEG    (XDATA)
      000000                        492 _delay_ms_ms_10000_67:
      000000                        493 	.ds 2
      000002                        494 _delay_ms_i_20000_69:
      000002                        495 	.ds 4
      000006                        496 _enc28j60_init_rx_buffer_PARM_2:
      000006                        497 	.ds 2
      000008                        498 _enc28j60_init_rx_buffer_start_address_10000_73:
      000008                        499 	.ds 2
      00000A                        500 _enc28j60_set_transmit_pointers_PARM_2:
      00000A                        501 	.ds 2
      00000C                        502 _enc28j60_set_transmit_pointers_start_address_10000_76:
      00000C                        503 	.ds 2
      00000E                        504 _wait_for_transmission_complete_timeout_ms_10000_78:
      00000E                        505 	.ds 2
      000010                        506 _send_arp_request_arp_packet_10000_84:
      000010                        507 	.ds 42
                                    508 ;--------------------------------------------------------
                                    509 ; absolute external ram data
                                    510 ;--------------------------------------------------------
                                    511 	.area XABS    (ABS,XDATA)
                                    512 ;--------------------------------------------------------
                                    513 ; initialized external ram data
                                    514 ;--------------------------------------------------------
                                    515 	.area XISEG   (XDATA)
      000000                        516 _source_mac::
      000000                        517 	.ds 6
      000006                        518 _dest_mac::
      000006                        519 	.ds 6
      00000C                        520 _source_ip::
      00000C                        521 	.ds 4
      000010                        522 _target_ip::
      000010                        523 	.ds 4
                                    524 	.area HOME    (CODE)
                                    525 	.area GSINIT0 (CODE)
                                    526 	.area GSINIT1 (CODE)
                                    527 	.area GSINIT2 (CODE)
                                    528 	.area GSINIT3 (CODE)
                                    529 	.area GSINIT4 (CODE)
                                    530 	.area GSINIT5 (CODE)
                                    531 	.area GSINIT  (CODE)
                                    532 	.area GSFINAL (CODE)
                                    533 	.area CSEG    (CODE)
                                    534 ;--------------------------------------------------------
                                    535 ; global & static initialisations
                                    536 ;--------------------------------------------------------
                                    537 	.area HOME    (CODE)
                                    538 	.area GSINIT  (CODE)
                                    539 	.area GSFINAL (CODE)
                                    540 	.area GSINIT  (CODE)
                                    541 ;--------------------------------------------------------
                                    542 ; Home
                                    543 ;--------------------------------------------------------
                                    544 	.area HOME    (CODE)
                                    545 	.area HOME    (CODE)
                                    546 ;--------------------------------------------------------
                                    547 ; code
                                    548 ;--------------------------------------------------------
                                    549 	.area CSEG    (CODE)
                                    550 ;------------------------------------------------------------
                                    551 ;Allocation info for local variables in function 'set_mac_address'
                                    552 ;------------------------------------------------------------
                                    553 ;mac_address               Allocated with name '_set_mac_address_mac_address_10000_65'
                                    554 ;------------------------------------------------------------
                                    555 ;	Eth.c:35: void set_mac_address(uint8_t* mac_address)
                                    556 ;	-----------------------------------------
                                    557 ;	 function set_mac_address
                                    558 ;	-----------------------------------------
      000000                        559 _set_mac_address:
                           000007   560 	ar7 = 0x07
                           000006   561 	ar6 = 0x06
                           000005   562 	ar5 = 0x05
                           000004   563 	ar4 = 0x04
                           000003   564 	ar3 = 0x03
                           000002   565 	ar2 = 0x02
                           000001   566 	ar1 = 0x01
                           000000   567 	ar0 = 0x00
                                    568 ;	Eth.c:41: spi_control_write(3, 0x01, 0x00);  // MAADR6
      000000 90r00r00         [24]  569 	mov	dptr,#_spi_control_write_PARM_2
      000003 74 01            [12]  570 	mov	a,#0x01
      000005 F0               [24]  571 	movx	@dptr,a
      000006 90r00r00         [24]  572 	mov	dptr,#_spi_control_write_PARM_3
      000009 E4               [12]  573 	clr	a
      00000A F0               [24]  574 	movx	@dptr,a
      00000B 75 82 03         [24]  575 	mov	dpl, #0x03
      00000E 12r00r00         [24]  576 	lcall	_spi_control_write
                                    577 ;	Eth.c:42: spi_control_write(3, 0x00, 0x11);  // MAADR5
      000011 90r00r00         [24]  578 	mov	dptr,#_spi_control_write_PARM_2
      000014 E4               [12]  579 	clr	a
      000015 F0               [24]  580 	movx	@dptr,a
      000016 90r00r00         [24]  581 	mov	dptr,#_spi_control_write_PARM_3
      000019 74 11            [12]  582 	mov	a,#0x11
      00001B F0               [24]  583 	movx	@dptr,a
      00001C 75 82 03         [24]  584 	mov	dpl, #0x03
      00001F 12r00r00         [24]  585 	lcall	_spi_control_write
                                    586 ;	Eth.c:43: spi_control_write(3, 0x03, 0x22);  // MAADR4
      000022 90r00r00         [24]  587 	mov	dptr,#_spi_control_write_PARM_2
      000025 74 03            [12]  588 	mov	a,#0x03
      000027 F0               [24]  589 	movx	@dptr,a
      000028 90r00r00         [24]  590 	mov	dptr,#_spi_control_write_PARM_3
      00002B 74 22            [12]  591 	mov	a,#0x22
      00002D F0               [24]  592 	movx	@dptr,a
      00002E 75 82 03         [24]  593 	mov	dpl, #0x03
      000031 12r00r00         [24]  594 	lcall	_spi_control_write
                                    595 ;	Eth.c:44: spi_control_write(3, 0x02, 0x33);  // MAADR3
      000034 90r00r00         [24]  596 	mov	dptr,#_spi_control_write_PARM_2
      000037 74 02            [12]  597 	mov	a,#0x02
      000039 F0               [24]  598 	movx	@dptr,a
      00003A 90r00r00         [24]  599 	mov	dptr,#_spi_control_write_PARM_3
      00003D 74 33            [12]  600 	mov	a,#0x33
      00003F F0               [24]  601 	movx	@dptr,a
      000040 75 82 03         [24]  602 	mov	dpl, #0x03
      000043 12r00r00         [24]  603 	lcall	_spi_control_write
                                    604 ;	Eth.c:45: spi_control_write(3, 0x05, 0x44);  // MAADR2
      000046 90r00r00         [24]  605 	mov	dptr,#_spi_control_write_PARM_2
      000049 74 05            [12]  606 	mov	a,#0x05
      00004B F0               [24]  607 	movx	@dptr,a
      00004C 90r00r00         [24]  608 	mov	dptr,#_spi_control_write_PARM_3
      00004F 74 44            [12]  609 	mov	a,#0x44
      000051 F0               [24]  610 	movx	@dptr,a
      000052 75 82 03         [24]  611 	mov	dpl, #0x03
      000055 12r00r00         [24]  612 	lcall	_spi_control_write
                                    613 ;	Eth.c:46: spi_control_write(3, 0x04, 0x55);  // MAADR1
      000058 90r00r00         [24]  614 	mov	dptr,#_spi_control_write_PARM_2
      00005B 74 04            [12]  615 	mov	a,#0x04
      00005D F0               [24]  616 	movx	@dptr,a
      00005E 90r00r00         [24]  617 	mov	dptr,#_spi_control_write_PARM_3
      000061 74 55            [12]  618 	mov	a,#0x55
      000063 F0               [24]  619 	movx	@dptr,a
      000064 75 82 03         [24]  620 	mov	dpl, #0x03
                                    621 ;	Eth.c:48: }
      000067 02r00r00         [24]  622 	ljmp	_spi_control_write
                                    623 ;------------------------------------------------------------
                                    624 ;Allocation info for local variables in function 'delay_ms'
                                    625 ;------------------------------------------------------------
                                    626 ;ms                        Allocated with name '_delay_ms_ms_10000_67'
                                    627 ;i                         Allocated with name '_delay_ms_i_20000_69'
                                    628 ;------------------------------------------------------------
                                    629 ;	Eth.c:51: void delay_ms(uint16_t ms)
                                    630 ;	-----------------------------------------
                                    631 ;	 function delay_ms
                                    632 ;	-----------------------------------------
      00006A                        633 _delay_ms:
      00006A AF 83            [24]  634 	mov	r7,dph
      00006C E5 82            [12]  635 	mov	a,dpl
      00006E 90r00r00         [24]  636 	mov	dptr,#_delay_ms_ms_10000_67
      000071 F0               [24]  637 	movx	@dptr,a
      000072 EF               [12]  638 	mov	a,r7
      000073 A3               [24]  639 	inc	dptr
      000074 F0               [24]  640 	movx	@dptr,a
                                    641 ;	Eth.c:53: for (volatile uint32_t i = 0; i < ms * 1000; i++)
      000075 90r00r02         [24]  642 	mov	dptr,#_delay_ms_i_20000_69
      000078 E4               [12]  643 	clr	a
      000079 F0               [24]  644 	movx	@dptr,a
      00007A A3               [24]  645 	inc	dptr
      00007B F0               [24]  646 	movx	@dptr,a
      00007C A3               [24]  647 	inc	dptr
      00007D F0               [24]  648 	movx	@dptr,a
      00007E A3               [24]  649 	inc	dptr
      00007F F0               [24]  650 	movx	@dptr,a
      000080 90r00r00         [24]  651 	mov	dptr,#_delay_ms_ms_10000_67
      000083 E0               [24]  652 	movx	a,@dptr
      000084 FE               [12]  653 	mov	r6,a
      000085 A3               [24]  654 	inc	dptr
      000086 E0               [24]  655 	movx	a,@dptr
      000087 FF               [12]  656 	mov	r7,a
      000088                        657 00103$:
      000088 90r00r00         [24]  658 	mov	dptr,#__mulint_PARM_2
      00008B EE               [12]  659 	mov	a,r6
      00008C F0               [24]  660 	movx	@dptr,a
      00008D EF               [12]  661 	mov	a,r7
      00008E A3               [24]  662 	inc	dptr
      00008F F0               [24]  663 	movx	@dptr,a
      000090 90 03 E8         [24]  664 	mov	dptr,#0x03e8
      000093 C0 07            [24]  665 	push	ar7
      000095 C0 06            [24]  666 	push	ar6
      000097 12r00r00         [24]  667 	lcall	__mulint
      00009A AC 82            [24]  668 	mov	r4, dpl
      00009C AD 83            [24]  669 	mov	r5, dph
      00009E D0 06            [24]  670 	pop	ar6
      0000A0 D0 07            [24]  671 	pop	ar7
      0000A2 90r00r02         [24]  672 	mov	dptr,#_delay_ms_i_20000_69
      0000A5 E0               [24]  673 	movx	a,@dptr
      0000A6 F8               [12]  674 	mov	r0,a
      0000A7 A3               [24]  675 	inc	dptr
      0000A8 E0               [24]  676 	movx	a,@dptr
      0000A9 F9               [12]  677 	mov	r1,a
      0000AA A3               [24]  678 	inc	dptr
      0000AB E0               [24]  679 	movx	a,@dptr
      0000AC FA               [12]  680 	mov	r2,a
      0000AD A3               [24]  681 	inc	dptr
      0000AE E0               [24]  682 	movx	a,@dptr
      0000AF FB               [12]  683 	mov	r3,a
      0000B0 C0 06            [24]  684 	push	ar6
      0000B2 C0 07            [24]  685 	push	ar7
      0000B4 7E 00            [12]  686 	mov	r6,#0x00
      0000B6 7F 00            [12]  687 	mov	r7,#0x00
      0000B8 C3               [12]  688 	clr	c
      0000B9 E8               [12]  689 	mov	a,r0
      0000BA 9C               [12]  690 	subb	a,r4
      0000BB E9               [12]  691 	mov	a,r1
      0000BC 9D               [12]  692 	subb	a,r5
      0000BD EA               [12]  693 	mov	a,r2
      0000BE 9E               [12]  694 	subb	a,r6
      0000BF EB               [12]  695 	mov	a,r3
      0000C0 9F               [12]  696 	subb	a,r7
      0000C1 D0 07            [24]  697 	pop	ar7
      0000C3 D0 06            [24]  698 	pop	ar6
      0000C5 50 23            [24]  699 	jnc	00105$
      0000C7 90r00r02         [24]  700 	mov	dptr,#_delay_ms_i_20000_69
      0000CA E0               [24]  701 	movx	a,@dptr
      0000CB FA               [12]  702 	mov	r2,a
      0000CC A3               [24]  703 	inc	dptr
      0000CD E0               [24]  704 	movx	a,@dptr
      0000CE FB               [12]  705 	mov	r3,a
      0000CF A3               [24]  706 	inc	dptr
      0000D0 E0               [24]  707 	movx	a,@dptr
      0000D1 FC               [12]  708 	mov	r4,a
      0000D2 A3               [24]  709 	inc	dptr
      0000D3 E0               [24]  710 	movx	a,@dptr
      0000D4 FD               [12]  711 	mov	r5,a
      0000D5 90r00r02         [24]  712 	mov	dptr,#_delay_ms_i_20000_69
      0000D8 74 01            [12]  713 	mov	a,#0x01
      0000DA 2A               [12]  714 	add	a, r2
      0000DB F0               [24]  715 	movx	@dptr,a
      0000DC E4               [12]  716 	clr	a
      0000DD 3B               [12]  717 	addc	a, r3
      0000DE A3               [24]  718 	inc	dptr
      0000DF F0               [24]  719 	movx	@dptr,a
      0000E0 E4               [12]  720 	clr	a
      0000E1 3C               [12]  721 	addc	a, r4
      0000E2 A3               [24]  722 	inc	dptr
      0000E3 F0               [24]  723 	movx	@dptr,a
      0000E4 E4               [12]  724 	clr	a
      0000E5 3D               [12]  725 	addc	a, r5
      0000E6 A3               [24]  726 	inc	dptr
      0000E7 F0               [24]  727 	movx	@dptr,a
      0000E8 80 9E            [24]  728 	sjmp	00103$
      0000EA                        729 00105$:
                                    730 ;	Eth.c:57: }
      0000EA 22               [24]  731 	ret
                                    732 ;------------------------------------------------------------
                                    733 ;Allocation info for local variables in function 'enc28j60_start_transmission'
                                    734 ;------------------------------------------------------------
                                    735 ;econ1                     Allocated with name '_enc28j60_start_transmission_econ1_10000_72'
                                    736 ;------------------------------------------------------------
                                    737 ;	Eth.c:59: void enc28j60_start_transmission(void)
                                    738 ;	-----------------------------------------
                                    739 ;	 function enc28j60_start_transmission
                                    740 ;	-----------------------------------------
      0000EB                        741 _enc28j60_start_transmission:
                                    742 ;	Eth.c:61: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      0000EB 90r00r00         [24]  743 	mov	dptr,#_mac_spi_read_PARM_2
      0000EE E4               [12]  744 	clr	a
      0000EF F0               [24]  745 	movx	@dptr,a
      0000F0 75 82 1F         [24]  746 	mov	dpl, #0x1f
      0000F3 12r00r00         [24]  747 	lcall	_mac_spi_read
      0000F6 E5 82            [12]  748 	mov	a, dpl
                                    749 ;	Eth.c:62: econ1 |= 0x08; // Set TXRTS (bit 3)
      0000F8 44 08            [12]  750 	orl	a,#0x08
      0000FA FF               [12]  751 	mov	r7,a
                                    752 ;	Eth.c:63: spi_control_write(0, 0x1F, econ1); // Write back to ECON1
      0000FB 90r00r00         [24]  753 	mov	dptr,#_spi_control_write_PARM_2
      0000FE 74 1F            [12]  754 	mov	a,#0x1f
      000100 F0               [24]  755 	movx	@dptr,a
      000101 90r00r00         [24]  756 	mov	dptr,#_spi_control_write_PARM_3
      000104 EF               [12]  757 	mov	a,r7
      000105 F0               [24]  758 	movx	@dptr,a
      000106 75 82 00         [24]  759 	mov	dpl, #0x00
                                    760 ;	Eth.c:64: }
      000109 02r00r00         [24]  761 	ljmp	_spi_control_write
                                    762 ;------------------------------------------------------------
                                    763 ;Allocation info for local variables in function 'enc28j60_init_rx_buffer'
                                    764 ;------------------------------------------------------------
                                    765 ;end_address               Allocated with name '_enc28j60_init_rx_buffer_PARM_2'
                                    766 ;start_address             Allocated with name '_enc28j60_init_rx_buffer_start_address_10000_73'
                                    767 ;------------------------------------------------------------
                                    768 ;	Eth.c:65: void enc28j60_init_rx_buffer(uint16_t start_address, uint16_t end_address)
                                    769 ;	-----------------------------------------
                                    770 ;	 function enc28j60_init_rx_buffer
                                    771 ;	-----------------------------------------
      00010C                        772 _enc28j60_init_rx_buffer:
      00010C AF 83            [24]  773 	mov	r7,dph
      00010E E5 82            [12]  774 	mov	a,dpl
      000110 90r00r08         [24]  775 	mov	dptr,#_enc28j60_init_rx_buffer_start_address_10000_73
      000113 F0               [24]  776 	movx	@dptr,a
      000114 EF               [12]  777 	mov	a,r7
      000115 A3               [24]  778 	inc	dptr
      000116 F0               [24]  779 	movx	@dptr,a
                                    780 ;	Eth.c:68: if (start_address >= end_address || end_address > 0x1FFF) {
      000117 90r00r08         [24]  781 	mov	dptr,#_enc28j60_init_rx_buffer_start_address_10000_73
      00011A E0               [24]  782 	movx	a,@dptr
      00011B FE               [12]  783 	mov	r6,a
      00011C A3               [24]  784 	inc	dptr
      00011D E0               [24]  785 	movx	a,@dptr
      00011E FF               [12]  786 	mov	r7,a
      00011F 90r00r06         [24]  787 	mov	dptr,#_enc28j60_init_rx_buffer_PARM_2
      000122 E0               [24]  788 	movx	a,@dptr
      000123 FC               [12]  789 	mov	r4,a
      000124 A3               [24]  790 	inc	dptr
      000125 E0               [24]  791 	movx	a,@dptr
      000126 FD               [12]  792 	mov	r5,a
      000127 C3               [12]  793 	clr	c
      000128 EE               [12]  794 	mov	a,r6
      000129 9C               [12]  795 	subb	a,r4
      00012A EF               [12]  796 	mov	a,r7
      00012B 9D               [12]  797 	subb	a,r5
      00012C 50 0D            [24]  798 	jnc	00101$
      00012E 8C 02            [24]  799 	mov	ar2,r4
      000130 8D 03            [24]  800 	mov	ar3,r5
      000132 C3               [12]  801 	clr	c
      000133 74 FF            [12]  802 	mov	a,#0xff
      000135 9A               [12]  803 	subb	a,r2
      000136 74 1F            [12]  804 	mov	a,#0x1f
      000138 9B               [12]  805 	subb	a,r3
      000139 50 16            [24]  806 	jnc	00102$
      00013B                        807 00101$:
                                    808 ;	Eth.c:69: printf("Invalid RX buffer range.\n");
      00013B 74r00            [12]  809 	mov	a,#___str_0
      00013D C0 E0            [24]  810 	push	acc
      00013F 74s00            [12]  811 	mov	a,#(___str_0 >> 8)
      000141 C0 E0            [24]  812 	push	acc
      000143 74 80            [12]  813 	mov	a,#0x80
      000145 C0 E0            [24]  814 	push	acc
      000147 12r00r00         [24]  815 	lcall	_printf
      00014A 15 81            [12]  816 	dec	sp
      00014C 15 81            [12]  817 	dec	sp
      00014E 15 81            [12]  818 	dec	sp
                                    819 ;	Eth.c:70: return;
      000150 22               [24]  820 	ret
      000151                        821 00102$:
                                    822 ;	Eth.c:73: spi_control_write(0, 0x08, (uint8_t)(start_address & 0xFF)); // ERXSTL (low byte)
      000151 8E 03            [24]  823 	mov	ar3,r6
      000153 90r00r00         [24]  824 	mov	dptr,#_spi_control_write_PARM_2
      000156 74 08            [12]  825 	mov	a,#0x08
      000158 F0               [24]  826 	movx	@dptr,a
      000159 90r00r00         [24]  827 	mov	dptr,#_spi_control_write_PARM_3
      00015C EB               [12]  828 	mov	a,r3
      00015D F0               [24]  829 	movx	@dptr,a
      00015E 75 82 00         [24]  830 	mov	dpl, #0x00
      000161 C0 07            [24]  831 	push	ar7
      000163 C0 06            [24]  832 	push	ar6
      000165 C0 05            [24]  833 	push	ar5
      000167 C0 04            [24]  834 	push	ar4
      000169 C0 03            [24]  835 	push	ar3
      00016B 12r00r00         [24]  836 	lcall	_spi_control_write
      00016E D0 03            [24]  837 	pop	ar3
      000170 D0 04            [24]  838 	pop	ar4
      000172 D0 05            [24]  839 	pop	ar5
      000174 D0 06            [24]  840 	pop	ar6
      000176 D0 07            [24]  841 	pop	ar7
                                    842 ;	Eth.c:74: spi_control_write(0, 0x09, (uint8_t)((start_address >> 8) & 0xFF)); // ERXSTH (high byte)
      000178 8F 02            [24]  843 	mov	ar2,r7
      00017A 90r00r00         [24]  844 	mov	dptr,#_spi_control_write_PARM_2
      00017D 74 09            [12]  845 	mov	a,#0x09
      00017F F0               [24]  846 	movx	@dptr,a
      000180 90r00r00         [24]  847 	mov	dptr,#_spi_control_write_PARM_3
      000183 EA               [12]  848 	mov	a,r2
      000184 F0               [24]  849 	movx	@dptr,a
      000185 75 82 00         [24]  850 	mov	dpl, #0x00
      000188 C0 07            [24]  851 	push	ar7
      00018A C0 06            [24]  852 	push	ar6
      00018C C0 05            [24]  853 	push	ar5
      00018E C0 04            [24]  854 	push	ar4
      000190 C0 03            [24]  855 	push	ar3
      000192 C0 02            [24]  856 	push	ar2
      000194 12r00r00         [24]  857 	lcall	_spi_control_write
      000197 D0 02            [24]  858 	pop	ar2
      000199 D0 03            [24]  859 	pop	ar3
      00019B D0 04            [24]  860 	pop	ar4
      00019D D0 05            [24]  861 	pop	ar5
      00019F D0 06            [24]  862 	pop	ar6
      0001A1 D0 07            [24]  863 	pop	ar7
                                    864 ;	Eth.c:77: spi_control_write(0, 0x0A, (uint8_t)(end_address & 0xFF)); // ERXNDL (low byte)
      0001A3 8C 01            [24]  865 	mov	ar1,r4
      0001A5 90r00r00         [24]  866 	mov	dptr,#_spi_control_write_PARM_2
      0001A8 74 0A            [12]  867 	mov	a,#0x0a
      0001AA F0               [24]  868 	movx	@dptr,a
      0001AB 90r00r00         [24]  869 	mov	dptr,#_spi_control_write_PARM_3
      0001AE E9               [12]  870 	mov	a,r1
      0001AF F0               [24]  871 	movx	@dptr,a
      0001B0 75 82 00         [24]  872 	mov	dpl, #0x00
      0001B3 C0 07            [24]  873 	push	ar7
      0001B5 C0 06            [24]  874 	push	ar6
      0001B7 C0 05            [24]  875 	push	ar5
      0001B9 C0 04            [24]  876 	push	ar4
      0001BB C0 03            [24]  877 	push	ar3
      0001BD C0 02            [24]  878 	push	ar2
      0001BF 12r00r00         [24]  879 	lcall	_spi_control_write
      0001C2 D0 02            [24]  880 	pop	ar2
      0001C4 D0 03            [24]  881 	pop	ar3
      0001C6 D0 04            [24]  882 	pop	ar4
      0001C8 D0 05            [24]  883 	pop	ar5
      0001CA D0 06            [24]  884 	pop	ar6
      0001CC D0 07            [24]  885 	pop	ar7
                                    886 ;	Eth.c:78: spi_control_write(0, 0x0B, (uint8_t)((end_address >> 8) & 0xFF)); // ERXNDH (high byte)
      0001CE 8D 01            [24]  887 	mov	ar1,r5
      0001D0 90r00r00         [24]  888 	mov	dptr,#_spi_control_write_PARM_2
      0001D3 74 0B            [12]  889 	mov	a,#0x0b
      0001D5 F0               [24]  890 	movx	@dptr,a
      0001D6 90r00r00         [24]  891 	mov	dptr,#_spi_control_write_PARM_3
      0001D9 E9               [12]  892 	mov	a,r1
      0001DA F0               [24]  893 	movx	@dptr,a
      0001DB 75 82 00         [24]  894 	mov	dpl, #0x00
      0001DE C0 07            [24]  895 	push	ar7
      0001E0 C0 06            [24]  896 	push	ar6
      0001E2 C0 05            [24]  897 	push	ar5
      0001E4 C0 04            [24]  898 	push	ar4
      0001E6 C0 03            [24]  899 	push	ar3
      0001E8 C0 02            [24]  900 	push	ar2
      0001EA 12r00r00         [24]  901 	lcall	_spi_control_write
      0001ED D0 02            [24]  902 	pop	ar2
      0001EF D0 03            [24]  903 	pop	ar3
      0001F1 D0 04            [24]  904 	pop	ar4
      0001F3 D0 05            [24]  905 	pop	ar5
      0001F5 D0 06            [24]  906 	pop	ar6
      0001F7 D0 07            [24]  907 	pop	ar7
                                    908 ;	Eth.c:81: spi_control_write(0, 0x0C, (uint8_t)(start_address & 0xFF)); // ERXRDPTL (low byte)
      0001F9 90r00r00         [24]  909 	mov	dptr,#_spi_control_write_PARM_2
      0001FC 74 0C            [12]  910 	mov	a,#0x0c
      0001FE F0               [24]  911 	movx	@dptr,a
      0001FF 90r00r00         [24]  912 	mov	dptr,#_spi_control_write_PARM_3
      000202 EB               [12]  913 	mov	a,r3
      000203 F0               [24]  914 	movx	@dptr,a
      000204 75 82 00         [24]  915 	mov	dpl, #0x00
      000207 C0 07            [24]  916 	push	ar7
      000209 C0 06            [24]  917 	push	ar6
      00020B C0 05            [24]  918 	push	ar5
      00020D C0 04            [24]  919 	push	ar4
      00020F C0 02            [24]  920 	push	ar2
      000211 12r00r00         [24]  921 	lcall	_spi_control_write
      000214 D0 02            [24]  922 	pop	ar2
      000216 D0 04            [24]  923 	pop	ar4
      000218 D0 05            [24]  924 	pop	ar5
      00021A D0 06            [24]  925 	pop	ar6
      00021C D0 07            [24]  926 	pop	ar7
                                    927 ;	Eth.c:82: spi_control_write(0, 0x0D, (uint8_t)((start_address >> 8) & 0xFF)); // ERXRDPTH (high byte)
      00021E 90r00r00         [24]  928 	mov	dptr,#_spi_control_write_PARM_2
      000221 74 0D            [12]  929 	mov	a,#0x0d
      000223 F0               [24]  930 	movx	@dptr,a
      000224 90r00r00         [24]  931 	mov	dptr,#_spi_control_write_PARM_3
      000227 EA               [12]  932 	mov	a,r2
      000228 F0               [24]  933 	movx	@dptr,a
      000229 75 82 00         [24]  934 	mov	dpl, #0x00
      00022C C0 07            [24]  935 	push	ar7
      00022E C0 06            [24]  936 	push	ar6
      000230 C0 05            [24]  937 	push	ar5
      000232 C0 04            [24]  938 	push	ar4
      000234 12r00r00         [24]  939 	lcall	_spi_control_write
      000237 D0 04            [24]  940 	pop	ar4
      000239 D0 05            [24]  941 	pop	ar5
      00023B D0 06            [24]  942 	pop	ar6
      00023D D0 07            [24]  943 	pop	ar7
                                    944 ;	Eth.c:89: printf("RX buffer initialized: 0x%04X to 0x%04X.\n", start_address, end_address);
      00023F C0 04            [24]  945 	push	ar4
      000241 C0 05            [24]  946 	push	ar5
      000243 C0 06            [24]  947 	push	ar6
      000245 C0 07            [24]  948 	push	ar7
      000247 74r1A            [12]  949 	mov	a,#___str_1
      000249 C0 E0            [24]  950 	push	acc
      00024B 74s00            [12]  951 	mov	a,#(___str_1 >> 8)
      00024D C0 E0            [24]  952 	push	acc
      00024F 74 80            [12]  953 	mov	a,#0x80
      000251 C0 E0            [24]  954 	push	acc
      000253 12r00r00         [24]  955 	lcall	_printf
      000256 E5 81            [12]  956 	mov	a,sp
      000258 24 F9            [12]  957 	add	a,#0xf9
      00025A F5 81            [12]  958 	mov	sp,a
                                    959 ;	Eth.c:90: }
      00025C 22               [24]  960 	ret
                                    961 ;------------------------------------------------------------
                                    962 ;Allocation info for local variables in function 'enc28j60_set_transmit_pointers'
                                    963 ;------------------------------------------------------------
                                    964 ;end_address               Allocated with name '_enc28j60_set_transmit_pointers_PARM_2'
                                    965 ;start_address             Allocated with name '_enc28j60_set_transmit_pointers_start_address_10000_76'
                                    966 ;------------------------------------------------------------
                                    967 ;	Eth.c:92: void enc28j60_set_transmit_pointers(uint16_t start_address, uint16_t end_address)
                                    968 ;	-----------------------------------------
                                    969 ;	 function enc28j60_set_transmit_pointers
                                    970 ;	-----------------------------------------
      00025D                        971 _enc28j60_set_transmit_pointers:
      00025D AF 83            [24]  972 	mov	r7,dph
      00025F E5 82            [12]  973 	mov	a,dpl
      000261 90r00r0C         [24]  974 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_76
      000264 F0               [24]  975 	movx	@dptr,a
      000265 EF               [12]  976 	mov	a,r7
      000266 A3               [24]  977 	inc	dptr
      000267 F0               [24]  978 	movx	@dptr,a
                                    979 ;	Eth.c:95: spi_control_write(0, 0x04, (uint8_t)(start_address & 0xFF)); // Low byte
      000268 90r00r0C         [24]  980 	mov	dptr,#_enc28j60_set_transmit_pointers_start_address_10000_76
      00026B E0               [24]  981 	movx	a,@dptr
      00026C FE               [12]  982 	mov	r6,a
      00026D A3               [24]  983 	inc	dptr
      00026E E0               [24]  984 	movx	a,@dptr
      00026F FF               [12]  985 	mov	r7,a
      000270 8E 05            [24]  986 	mov	ar5,r6
      000272 90r00r00         [24]  987 	mov	dptr,#_spi_control_write_PARM_2
      000275 74 04            [12]  988 	mov	a,#0x04
      000277 F0               [24]  989 	movx	@dptr,a
      000278 90r00r00         [24]  990 	mov	dptr,#_spi_control_write_PARM_3
      00027B ED               [12]  991 	mov	a,r5
      00027C F0               [24]  992 	movx	@dptr,a
      00027D 75 82 00         [24]  993 	mov	dpl, #0x00
      000280 C0 07            [24]  994 	push	ar7
      000282 C0 06            [24]  995 	push	ar6
      000284 12r00r00         [24]  996 	lcall	_spi_control_write
      000287 D0 06            [24]  997 	pop	ar6
      000289 D0 07            [24]  998 	pop	ar7
                                    999 ;	Eth.c:96: spi_control_write(0, 0x05, (uint8_t)((start_address >> 8) & 0xFF)); // High byte
      00028B 8F 06            [24] 1000 	mov	ar6,r7
      00028D 90r00r00         [24] 1001 	mov	dptr,#_spi_control_write_PARM_2
      000290 74 05            [12] 1002 	mov	a,#0x05
      000292 F0               [24] 1003 	movx	@dptr,a
      000293 90r00r00         [24] 1004 	mov	dptr,#_spi_control_write_PARM_3
      000296 EE               [12] 1005 	mov	a,r6
      000297 F0               [24] 1006 	movx	@dptr,a
      000298 75 82 00         [24] 1007 	mov	dpl, #0x00
      00029B 12r00r00         [24] 1008 	lcall	_spi_control_write
                                   1009 ;	Eth.c:99: spi_control_write(0, 0x06, (uint8_t)(end_address & 0xFF)); // Low byte
      00029E 90r00r0A         [24] 1010 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      0002A1 E0               [24] 1011 	movx	a,@dptr
      0002A2 FE               [12] 1012 	mov	r6,a
      0002A3 A3               [24] 1013 	inc	dptr
      0002A4 E0               [24] 1014 	movx	a,@dptr
      0002A5 FF               [12] 1015 	mov	r7,a
      0002A6 8E 05            [24] 1016 	mov	ar5,r6
      0002A8 90r00r00         [24] 1017 	mov	dptr,#_spi_control_write_PARM_2
      0002AB 74 06            [12] 1018 	mov	a,#0x06
      0002AD F0               [24] 1019 	movx	@dptr,a
      0002AE 90r00r00         [24] 1020 	mov	dptr,#_spi_control_write_PARM_3
      0002B1 ED               [12] 1021 	mov	a,r5
      0002B2 F0               [24] 1022 	movx	@dptr,a
      0002B3 75 82 00         [24] 1023 	mov	dpl, #0x00
      0002B6 C0 07            [24] 1024 	push	ar7
      0002B8 C0 06            [24] 1025 	push	ar6
      0002BA 12r00r00         [24] 1026 	lcall	_spi_control_write
      0002BD D0 06            [24] 1027 	pop	ar6
      0002BF D0 07            [24] 1028 	pop	ar7
                                   1029 ;	Eth.c:100: spi_control_write(0, 0x07, (uint8_t)((end_address >> 8) & 0xFF)); // High byte
      0002C1 8F 06            [24] 1030 	mov	ar6,r7
      0002C3 90r00r00         [24] 1031 	mov	dptr,#_spi_control_write_PARM_2
      0002C6 74 07            [12] 1032 	mov	a,#0x07
      0002C8 F0               [24] 1033 	movx	@dptr,a
      0002C9 90r00r00         [24] 1034 	mov	dptr,#_spi_control_write_PARM_3
      0002CC EE               [12] 1035 	mov	a,r6
      0002CD F0               [24] 1036 	movx	@dptr,a
      0002CE 75 82 00         [24] 1037 	mov	dpl, #0x00
                                   1038 ;	Eth.c:101: }
      0002D1 02r00r00         [24] 1039 	ljmp	_spi_control_write
                                   1040 ;------------------------------------------------------------
                                   1041 ;Allocation info for local variables in function 'wait_for_transmission_complete'
                                   1042 ;------------------------------------------------------------
                                   1043 ;timeout_ms                Allocated with name '_wait_for_transmission_complete_timeout_ms_10000_78'
                                   1044 ;elapsed                   Allocated with name '_wait_for_transmission_complete_elapsed_10000_79'
                                   1045 ;econ1                     Allocated with name '_wait_for_transmission_complete_econ1_20000_80'
                                   1046 ;------------------------------------------------------------
                                   1047 ;	Eth.c:103: bool wait_for_transmission_complete(uint16_t timeout_ms)
                                   1048 ;	-----------------------------------------
                                   1049 ;	 function wait_for_transmission_complete
                                   1050 ;	-----------------------------------------
      0002D4                       1051 _wait_for_transmission_complete:
      0002D4 AF 83            [24] 1052 	mov	r7,dph
      0002D6 E5 82            [12] 1053 	mov	a,dpl
      0002D8 90r00r0E         [24] 1054 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_78
      0002DB F0               [24] 1055 	movx	@dptr,a
      0002DC EF               [12] 1056 	mov	a,r7
      0002DD A3               [24] 1057 	inc	dptr
      0002DE F0               [24] 1058 	movx	@dptr,a
                                   1059 ;	Eth.c:107: while (elapsed < timeout_ms) {
      0002DF 90r00r0E         [24] 1060 	mov	dptr,#_wait_for_transmission_complete_timeout_ms_10000_78
      0002E2 E0               [24] 1061 	movx	a,@dptr
      0002E3 FE               [12] 1062 	mov	r6,a
      0002E4 A3               [24] 1063 	inc	dptr
      0002E5 E0               [24] 1064 	movx	a,@dptr
      0002E6 FF               [12] 1065 	mov	r7,a
      0002E7 7C 00            [12] 1066 	mov	r4,#0x00
      0002E9 7D 00            [12] 1067 	mov	r5,#0x00
      0002EB                       1068 00103$:
      0002EB C3               [12] 1069 	clr	c
      0002EC EC               [12] 1070 	mov	a,r4
      0002ED 9E               [12] 1071 	subb	a,r6
      0002EE ED               [12] 1072 	mov	a,r5
      0002EF 9F               [12] 1073 	subb	a,r7
      0002F0 50 41            [24] 1074 	jnc	00105$
                                   1075 ;	Eth.c:108: uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
      0002F2 90r00r00         [24] 1076 	mov	dptr,#_mac_spi_read_PARM_2
      0002F5 E4               [12] 1077 	clr	a
      0002F6 F0               [24] 1078 	movx	@dptr,a
      0002F7 75 82 1F         [24] 1079 	mov	dpl, #0x1f
      0002FA C0 07            [24] 1080 	push	ar7
      0002FC C0 06            [24] 1081 	push	ar6
      0002FE C0 05            [24] 1082 	push	ar5
      000300 C0 04            [24] 1083 	push	ar4
      000302 12r00r00         [24] 1084 	lcall	_mac_spi_read
      000305 E5 82            [12] 1085 	mov	a, dpl
      000307 D0 04            [24] 1086 	pop	ar4
      000309 D0 05            [24] 1087 	pop	ar5
      00030B D0 06            [24] 1088 	pop	ar6
      00030D D0 07            [24] 1089 	pop	ar7
                                   1090 ;	Eth.c:109: if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
      00030F 20 E3 04         [24] 1091 	jb	acc.3,00102$
                                   1092 ;	Eth.c:110: return true;  // Transmission completed
      000312 75 82 01         [24] 1093 	mov	dpl, #0x01
      000315 22               [24] 1094 	ret
      000316                       1095 00102$:
                                   1096 ;	Eth.c:113: delay_ms(1);  // Wait 1 ms
      000316 90 00 01         [24] 1097 	mov	dptr,#0x0001
      000319 C0 07            [24] 1098 	push	ar7
      00031B C0 06            [24] 1099 	push	ar6
      00031D C0 05            [24] 1100 	push	ar5
      00031F C0 04            [24] 1101 	push	ar4
      000321 12r00r6A         [24] 1102 	lcall	_delay_ms
      000324 D0 04            [24] 1103 	pop	ar4
      000326 D0 05            [24] 1104 	pop	ar5
      000328 D0 06            [24] 1105 	pop	ar6
      00032A D0 07            [24] 1106 	pop	ar7
                                   1107 ;	Eth.c:114: elapsed++;
      00032C 0C               [12] 1108 	inc	r4
      00032D BC 00 BB         [24] 1109 	cjne	r4,#0x00,00103$
      000330 0D               [12] 1110 	inc	r5
      000331 80 B8            [24] 1111 	sjmp	00103$
      000333                       1112 00105$:
                                   1113 ;	Eth.c:117: return false;  // Timed out
      000333 75 82 00         [24] 1114 	mov	dpl, #0x00
                                   1115 ;	Eth.c:118: }
      000336 22               [24] 1116 	ret
                                   1117 ;------------------------------------------------------------
                                   1118 ;Allocation info for local variables in function 'enc28j60_transmission_successful'
                                   1119 ;------------------------------------------------------------
                                   1120 ;estat                     Allocated with name '_enc28j60_transmission_successful_estat_10000_82'
                                   1121 ;------------------------------------------------------------
                                   1122 ;	Eth.c:120: bool enc28j60_transmission_successful()
                                   1123 ;	-----------------------------------------
                                   1124 ;	 function enc28j60_transmission_successful
                                   1125 ;	-----------------------------------------
      000337                       1126 _enc28j60_transmission_successful:
                                   1127 ;	Eth.c:122: uint8_t estat = mac_spi_read(0x1D, 0); // Read ESTAT
      000337 90r00r00         [24] 1128 	mov	dptr,#_mac_spi_read_PARM_2
      00033A E4               [12] 1129 	clr	a
      00033B F0               [24] 1130 	movx	@dptr,a
      00033C 75 82 1D         [24] 1131 	mov	dpl, #0x1d
      00033F 12r00r00         [24] 1132 	lcall	_mac_spi_read
                                   1133 ;	Eth.c:123: return !(estat & 0x02); // Check if TXABRT (bit 1) is not set
      000342 E5 82            [12] 1134 	mov	a,dpl
      000344 03               [12] 1135 	rr	a
      000345 54 01            [12] 1136 	anl	a,#0x01
      000347 B4 01 00         [24] 1137 	cjne	a,#0x01,00103$
      00034A                       1138 00103$:
      00034A 92*00            [24] 1139 	mov  _enc28j60_transmission_successful_sloc0_1_0,c
      00034C E4               [12] 1140 	clr	a
      00034D 33               [12] 1141 	rlc	a
      00034E F5 82            [12] 1142 	mov	dpl, a
                                   1143 ;	Eth.c:124: }
      000350 22               [24] 1144 	ret
                                   1145 ;------------------------------------------------------------
                                   1146 ;Allocation info for local variables in function 'send_arp_request'
                                   1147 ;------------------------------------------------------------
                                   1148 ;arp_packet                Allocated with name '_send_arp_request_arp_packet_10000_84'
                                   1149 ;i                         Allocated with name '_send_arp_request_i_20000_85'
                                   1150 ;i                         Allocated with name '_send_arp_request_i_20000_87'
                                   1151 ;i                         Allocated with name '_send_arp_request_i_20000_89'
                                   1152 ;i                         Allocated with name '_send_arp_request_i_20000_91'
                                   1153 ;i                         Allocated with name '_send_arp_request_i_20000_93'
                                   1154 ;frame_size                Allocated with name '_send_arp_request_frame_size_10001_95'
                                   1155 ;start_address             Allocated with name '_send_arp_request_start_address_10001_95'
                                   1156 ;end_address               Allocated with name '_send_arp_request_end_address_10002_97'
                                   1157 ;------------------------------------------------------------
                                   1158 ;	Eth.c:127: void send_arp_request(void)
                                   1159 ;	-----------------------------------------
                                   1160 ;	 function send_arp_request
                                   1161 ;	-----------------------------------------
      000351                       1162 _send_arp_request:
                                   1163 ;	Eth.c:132: arp_packet[0] = 0x0E;
      000351 90r00r10         [24] 1164 	mov	dptr,#_send_arp_request_arp_packet_10000_84
      000354 74 0E            [12] 1165 	mov	a,#0x0e
      000356 F0               [24] 1166 	movx	@dptr,a
                                   1167 ;	Eth.c:136: set_mac_address(source_mac);
      000357 90r00r00         [24] 1168 	mov	dptr,#_source_mac
      00035A 75 F0 00         [24] 1169 	mov	b, #0x00
      00035D 12r00r00         [24] 1170 	lcall	_set_mac_address
                                   1171 ;	Eth.c:138: for (int i = 0; i < 6; i++)
      000360 7E 00            [12] 1172 	mov	r6,#0x00
      000362 7F 00            [12] 1173 	mov	r7,#0x00
      000364                       1174 00115$:
      000364 C3               [12] 1175 	clr	c
      000365 EE               [12] 1176 	mov	a,r6
      000366 94 06            [12] 1177 	subb	a,#0x06
      000368 EF               [12] 1178 	mov	a,r7
      000369 64 80            [12] 1179 	xrl	a,#0x80
      00036B 94 80            [12] 1180 	subb	a,#0x80
      00036D 50 48            [24] 1181 	jnc	00101$
                                   1182 ;	Eth.c:140: arp_packet[i + 1] = dest_mac[i];  // Destination MAC address
      00036F 8E 05            [24] 1183 	mov	ar5,r6
      000371 ED               [12] 1184 	mov	a,r5
      000372 04               [12] 1185 	inc	a
      000373 FC               [12] 1186 	mov	r4,a
      000374 33               [12] 1187 	rlc	a
      000375 95 E0            [12] 1188 	subb	a,acc
      000377 FB               [12] 1189 	mov	r3,a
      000378 EC               [12] 1190 	mov	a,r4
      000379 24r10            [12] 1191 	add	a, #_send_arp_request_arp_packet_10000_84
      00037B FC               [12] 1192 	mov	r4,a
      00037C EB               [12] 1193 	mov	a,r3
      00037D 34s00            [12] 1194 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      00037F FB               [12] 1195 	mov	r3,a
      000380 EE               [12] 1196 	mov	a,r6
      000381 24r06            [12] 1197 	add	a, #_dest_mac
      000383 F5 82            [12] 1198 	mov	dpl,a
      000385 EF               [12] 1199 	mov	a,r7
      000386 34s00            [12] 1200 	addc	a, #(_dest_mac >> 8)
      000388 F5 83            [12] 1201 	mov	dph,a
      00038A E0               [24] 1202 	movx	a,@dptr
      00038B 8C 82            [24] 1203 	mov	dpl,r4
      00038D 8B 83            [24] 1204 	mov	dph,r3
      00038F F0               [24] 1205 	movx	@dptr,a
                                   1206 ;	Eth.c:141: arp_packet[i + 7] = source_mac[i];  // Source MAC address
      000390 74 07            [12] 1207 	mov	a,#0x07
      000392 2D               [12] 1208 	add	a, r5
      000393 FD               [12] 1209 	mov	r5,a
      000394 33               [12] 1210 	rlc	a
      000395 95 E0            [12] 1211 	subb	a,acc
      000397 FC               [12] 1212 	mov	r4,a
      000398 ED               [12] 1213 	mov	a,r5
      000399 24r10            [12] 1214 	add	a, #_send_arp_request_arp_packet_10000_84
      00039B FD               [12] 1215 	mov	r5,a
      00039C EC               [12] 1216 	mov	a,r4
      00039D 34s00            [12] 1217 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      00039F FC               [12] 1218 	mov	r4,a
      0003A0 EE               [12] 1219 	mov	a,r6
      0003A1 24r00            [12] 1220 	add	a, #_source_mac
      0003A3 F5 82            [12] 1221 	mov	dpl,a
      0003A5 EF               [12] 1222 	mov	a,r7
      0003A6 34s00            [12] 1223 	addc	a, #(_source_mac >> 8)
      0003A8 F5 83            [12] 1224 	mov	dph,a
      0003AA E0               [24] 1225 	movx	a,@dptr
      0003AB 8D 82            [24] 1226 	mov	dpl,r5
      0003AD 8C 83            [24] 1227 	mov	dph,r4
      0003AF F0               [24] 1228 	movx	@dptr,a
                                   1229 ;	Eth.c:138: for (int i = 0; i < 6; i++)
      0003B0 0E               [12] 1230 	inc	r6
      0003B1 BE 00 B0         [24] 1231 	cjne	r6,#0x00,00115$
      0003B4 0F               [12] 1232 	inc	r7
      0003B5 80 AD            [24] 1233 	sjmp	00115$
      0003B7                       1234 00101$:
                                   1235 ;	Eth.c:145: arp_packet[13] = (ETH_TYPE_ARP >> 8) & 0xFF;
      0003B7 90r00r1D         [24] 1236 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x000d)
      0003BA 74 08            [12] 1237 	mov	a,#0x08
      0003BC F0               [24] 1238 	movx	@dptr,a
                                   1239 ;	Eth.c:146: arp_packet[14] = ETH_TYPE_ARP & 0xFF;
      0003BD 90r00r1E         [24] 1240 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x000e)
      0003C0 74 06            [12] 1241 	mov	a,#0x06
      0003C2 F0               [24] 1242 	movx	@dptr,a
                                   1243 ;	Eth.c:150: arp_packet[15] = 0x00;
      0003C3 90r00r1F         [24] 1244 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x000f)
      0003C6 E4               [12] 1245 	clr	a
      0003C7 F0               [24] 1246 	movx	@dptr,a
                                   1247 ;	Eth.c:151: arp_packet[16] = 0x01;
      0003C8 90r00r20         [24] 1248 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0010)
      0003CB 04               [12] 1249 	inc	a
      0003CC F0               [24] 1250 	movx	@dptr,a
                                   1251 ;	Eth.c:154: arp_packet[17] = 0x08;
      0003CD 90r00r21         [24] 1252 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0011)
      0003D0 74 08            [12] 1253 	mov	a,#0x08
      0003D2 F0               [24] 1254 	movx	@dptr,a
                                   1255 ;	Eth.c:155: arp_packet[18] = 0x00;
      0003D3 90r00r22         [24] 1256 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0012)
      0003D6 E4               [12] 1257 	clr	a
      0003D7 F0               [24] 1258 	movx	@dptr,a
                                   1259 ;	Eth.c:158: arp_packet[19] = 0x06;
      0003D8 90r00r23         [24] 1260 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0013)
      0003DB 74 06            [12] 1261 	mov	a,#0x06
      0003DD F0               [24] 1262 	movx	@dptr,a
                                   1263 ;	Eth.c:161: arp_packet[20] = 0x04;
      0003DE 90r00r24         [24] 1264 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0014)
      0003E1 74 04            [12] 1265 	mov	a,#0x04
      0003E3 F0               [24] 1266 	movx	@dptr,a
                                   1267 ;	Eth.c:164: arp_packet[21] = 0x00;
      0003E4 90r00r25         [24] 1268 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0015)
      0003E7 E4               [12] 1269 	clr	a
      0003E8 F0               [24] 1270 	movx	@dptr,a
                                   1271 ;	Eth.c:165: arp_packet[22] = 0x01;
      0003E9 90r00r26         [24] 1272 	mov	dptr,#(_send_arp_request_arp_packet_10000_84 + 0x0016)
      0003EC 04               [12] 1273 	inc	a
      0003ED F0               [24] 1274 	movx	@dptr,a
                                   1275 ;	Eth.c:168: for (int i = 0; i < 6; i++) {
      0003EE 7E 00            [12] 1276 	mov	r6,#0x00
      0003F0 7F 00            [12] 1277 	mov	r7,#0x00
      0003F2                       1278 00118$:
      0003F2 C3               [12] 1279 	clr	c
      0003F3 EE               [12] 1280 	mov	a,r6
      0003F4 94 06            [12] 1281 	subb	a,#0x06
      0003F6 EF               [12] 1282 	mov	a,r7
      0003F7 64 80            [12] 1283 	xrl	a,#0x80
      0003F9 94 80            [12] 1284 	subb	a,#0x80
      0003FB 50 29            [24] 1285 	jnc	00102$
                                   1286 ;	Eth.c:169: arp_packet[23 + i] = source_mac[i];
      0003FD 8E 05            [24] 1287 	mov	ar5,r6
      0003FF 74 17            [12] 1288 	mov	a,#0x17
      000401 2D               [12] 1289 	add	a, r5
      000402 FD               [12] 1290 	mov	r5,a
      000403 33               [12] 1291 	rlc	a
      000404 95 E0            [12] 1292 	subb	a,acc
      000406 FC               [12] 1293 	mov	r4,a
      000407 ED               [12] 1294 	mov	a,r5
      000408 24r10            [12] 1295 	add	a, #_send_arp_request_arp_packet_10000_84
      00040A FD               [12] 1296 	mov	r5,a
      00040B EC               [12] 1297 	mov	a,r4
      00040C 34s00            [12] 1298 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      00040E FC               [12] 1299 	mov	r4,a
      00040F EE               [12] 1300 	mov	a,r6
      000410 24r00            [12] 1301 	add	a, #_source_mac
      000412 F5 82            [12] 1302 	mov	dpl,a
      000414 EF               [12] 1303 	mov	a,r7
      000415 34s00            [12] 1304 	addc	a, #(_source_mac >> 8)
      000417 F5 83            [12] 1305 	mov	dph,a
      000419 E0               [24] 1306 	movx	a,@dptr
      00041A 8D 82            [24] 1307 	mov	dpl,r5
      00041C 8C 83            [24] 1308 	mov	dph,r4
      00041E F0               [24] 1309 	movx	@dptr,a
                                   1310 ;	Eth.c:168: for (int i = 0; i < 6; i++) {
      00041F 0E               [12] 1311 	inc	r6
      000420 BE 00 CF         [24] 1312 	cjne	r6,#0x00,00118$
      000423 0F               [12] 1313 	inc	r7
      000424 80 CC            [24] 1314 	sjmp	00118$
      000426                       1315 00102$:
                                   1316 ;	Eth.c:173: for (int i = 0; i < 4; i++) {
      000426 7E 00            [12] 1317 	mov	r6,#0x00
      000428 7F 00            [12] 1318 	mov	r7,#0x00
      00042A                       1319 00121$:
      00042A C3               [12] 1320 	clr	c
      00042B EE               [12] 1321 	mov	a,r6
      00042C 94 04            [12] 1322 	subb	a,#0x04
      00042E EF               [12] 1323 	mov	a,r7
      00042F 64 80            [12] 1324 	xrl	a,#0x80
      000431 94 80            [12] 1325 	subb	a,#0x80
      000433 50 29            [24] 1326 	jnc	00103$
                                   1327 ;	Eth.c:174: arp_packet[29 + i] = source_ip[i];
      000435 8E 05            [24] 1328 	mov	ar5,r6
      000437 74 1D            [12] 1329 	mov	a,#0x1d
      000439 2D               [12] 1330 	add	a, r5
      00043A FD               [12] 1331 	mov	r5,a
      00043B 33               [12] 1332 	rlc	a
      00043C 95 E0            [12] 1333 	subb	a,acc
      00043E FC               [12] 1334 	mov	r4,a
      00043F ED               [12] 1335 	mov	a,r5
      000440 24r10            [12] 1336 	add	a, #_send_arp_request_arp_packet_10000_84
      000442 FD               [12] 1337 	mov	r5,a
      000443 EC               [12] 1338 	mov	a,r4
      000444 34s00            [12] 1339 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      000446 FC               [12] 1340 	mov	r4,a
      000447 EE               [12] 1341 	mov	a,r6
      000448 24r0C            [12] 1342 	add	a, #_source_ip
      00044A F5 82            [12] 1343 	mov	dpl,a
      00044C EF               [12] 1344 	mov	a,r7
      00044D 34s00            [12] 1345 	addc	a, #(_source_ip >> 8)
      00044F F5 83            [12] 1346 	mov	dph,a
      000451 E0               [24] 1347 	movx	a,@dptr
      000452 8D 82            [24] 1348 	mov	dpl,r5
      000454 8C 83            [24] 1349 	mov	dph,r4
      000456 F0               [24] 1350 	movx	@dptr,a
                                   1351 ;	Eth.c:173: for (int i = 0; i < 4; i++) {
      000457 0E               [12] 1352 	inc	r6
      000458 BE 00 CF         [24] 1353 	cjne	r6,#0x00,00121$
      00045B 0F               [12] 1354 	inc	r7
      00045C 80 CC            [24] 1355 	sjmp	00121$
      00045E                       1356 00103$:
                                   1357 ;	Eth.c:178: for (int i = 0; i < 6; i++) {
      00045E 7F 00            [12] 1358 	mov	r7,#0x00
      000460                       1359 00124$:
      000460 BF 06 00         [24] 1360 	cjne	r7,#0x06,00215$
      000463                       1361 00215$:
      000463 50 19            [24] 1362 	jnc	00104$
                                   1363 ;	Eth.c:179: arp_packet[33 + i] = 0x00;
      000465 8F 06            [24] 1364 	mov	ar6,r7
      000467 74 21            [12] 1365 	mov	a,#0x21
      000469 2E               [12] 1366 	add	a, r6
      00046A FE               [12] 1367 	mov	r6,a
      00046B 33               [12] 1368 	rlc	a
      00046C 95 E0            [12] 1369 	subb	a,acc
      00046E FD               [12] 1370 	mov	r5,a
      00046F EE               [12] 1371 	mov	a,r6
      000470 24r10            [12] 1372 	add	a, #_send_arp_request_arp_packet_10000_84
      000472 F5 82            [12] 1373 	mov	dpl,a
      000474 ED               [12] 1374 	mov	a,r5
      000475 34s00            [12] 1375 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      000477 F5 83            [12] 1376 	mov	dph,a
      000479 E4               [12] 1377 	clr	a
      00047A F0               [24] 1378 	movx	@dptr,a
                                   1379 ;	Eth.c:178: for (int i = 0; i < 6; i++) {
      00047B 0F               [12] 1380 	inc	r7
      00047C 80 E2            [24] 1381 	sjmp	00124$
      00047E                       1382 00104$:
                                   1383 ;	Eth.c:183: for (int i = 0; i < 4; i++) {
      00047E 7E 00            [12] 1384 	mov	r6,#0x00
      000480 7F 00            [12] 1385 	mov	r7,#0x00
      000482                       1386 00127$:
      000482 C3               [12] 1387 	clr	c
      000483 EE               [12] 1388 	mov	a,r6
      000484 94 04            [12] 1389 	subb	a,#0x04
      000486 EF               [12] 1390 	mov	a,r7
      000487 64 80            [12] 1391 	xrl	a,#0x80
      000489 94 80            [12] 1392 	subb	a,#0x80
      00048B 50 29            [24] 1393 	jnc	00105$
                                   1394 ;	Eth.c:184: arp_packet[39 + i] = target_ip[i];
      00048D 8E 05            [24] 1395 	mov	ar5,r6
      00048F 74 27            [12] 1396 	mov	a,#0x27
      000491 2D               [12] 1397 	add	a, r5
      000492 FD               [12] 1398 	mov	r5,a
      000493 33               [12] 1399 	rlc	a
      000494 95 E0            [12] 1400 	subb	a,acc
      000496 FC               [12] 1401 	mov	r4,a
      000497 ED               [12] 1402 	mov	a,r5
      000498 24r10            [12] 1403 	add	a, #_send_arp_request_arp_packet_10000_84
      00049A FD               [12] 1404 	mov	r5,a
      00049B EC               [12] 1405 	mov	a,r4
      00049C 34s00            [12] 1406 	addc	a, #(_send_arp_request_arp_packet_10000_84 >> 8)
      00049E FC               [12] 1407 	mov	r4,a
      00049F EE               [12] 1408 	mov	a,r6
      0004A0 24r10            [12] 1409 	add	a, #_target_ip
      0004A2 F5 82            [12] 1410 	mov	dpl,a
      0004A4 EF               [12] 1411 	mov	a,r7
      0004A5 34s00            [12] 1412 	addc	a, #(_target_ip >> 8)
      0004A7 F5 83            [12] 1413 	mov	dph,a
      0004A9 E0               [24] 1414 	movx	a,@dptr
      0004AA 8D 82            [24] 1415 	mov	dpl,r5
      0004AC 8C 83            [24] 1416 	mov	dph,r4
      0004AE F0               [24] 1417 	movx	@dptr,a
                                   1418 ;	Eth.c:183: for (int i = 0; i < 4; i++) {
      0004AF 0E               [12] 1419 	inc	r6
      0004B0 BE 00 CF         [24] 1420 	cjne	r6,#0x00,00127$
      0004B3 0F               [12] 1421 	inc	r7
      0004B4 80 CC            [24] 1422 	sjmp	00127$
      0004B6                       1423 00105$:
                                   1424 ;	Eth.c:196: spi_buffer_write(frame_size, start_address, arp_packet);
      0004B6 90r00r00         [24] 1425 	mov	dptr,#_spi_buffer_write_PARM_2
      0004B9 74 F0            [12] 1426 	mov	a,#0xf0
      0004BB F0               [24] 1427 	movx	@dptr,a
      0004BC E4               [12] 1428 	clr	a
      0004BD A3               [24] 1429 	inc	dptr
      0004BE F0               [24] 1430 	movx	@dptr,a
      0004BF 90r00r00         [24] 1431 	mov	dptr,#_spi_buffer_write_PARM_3
      0004C2 74r10            [12] 1432 	mov	a,#_send_arp_request_arp_packet_10000_84
      0004C4 F0               [24] 1433 	movx	@dptr,a
      0004C5 74s00            [12] 1434 	mov	a,#(_send_arp_request_arp_packet_10000_84 >> 8)
      0004C7 A3               [24] 1435 	inc	dptr
      0004C8 F0               [24] 1436 	movx	@dptr,a
      0004C9 E4               [12] 1437 	clr	a
      0004CA A3               [24] 1438 	inc	dptr
      0004CB F0               [24] 1439 	movx	@dptr,a
      0004CC 90 00 2A         [24] 1440 	mov	dptr,#0x002a
      0004CF 12r00r00         [24] 1441 	lcall	_spi_buffer_write
                                   1442 ;	Eth.c:199: enc28j60_set_transmit_pointers(start_address, end_address);
      0004D2 90r00r0A         [24] 1443 	mov	dptr,#_enc28j60_set_transmit_pointers_PARM_2
      0004D5 74 19            [12] 1444 	mov	a,#0x19
      0004D7 F0               [24] 1445 	movx	@dptr,a
      0004D8 74 01            [12] 1446 	mov	a,#0x01
      0004DA A3               [24] 1447 	inc	dptr
      0004DB F0               [24] 1448 	movx	@dptr,a
      0004DC 90 00 F0         [24] 1449 	mov	dptr,#0x00f0
      0004DF 12r02r5D         [24] 1450 	lcall	_enc28j60_set_transmit_pointers
                                   1451 ;	Eth.c:202: enc28j60_start_transmission();
      0004E2 12r00rEB         [24] 1452 	lcall	_enc28j60_start_transmission
                                   1453 ;	Eth.c:205: if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
      0004E5 90 01 F4         [24] 1454 	mov	dptr,#0x01f4
      0004E8 12r02rD4         [24] 1455 	lcall	_wait_for_transmission_complete
      0004EB E5 82            [12] 1456 	mov	a, dpl
      0004ED 60 33            [24] 1457 	jz	00112$
                                   1458 ;	Eth.c:207: if (enc28j60_transmission_successful()) {
      0004EF 12r03r37         [24] 1459 	lcall	_enc28j60_transmission_successful
      0004F2 E5 82            [12] 1460 	mov	a, dpl
      0004F4 60 16            [24] 1461 	jz	00109$
                                   1462 ;	Eth.c:208: printf("ARP request sent successfully.\n\r");
      0004F6 74r7F            [12] 1463 	mov	a,#___str_3
      0004F8 C0 E0            [24] 1464 	push	acc
      0004FA 74s00            [12] 1465 	mov	a,#(___str_3 >> 8)
      0004FC C0 E0            [24] 1466 	push	acc
      0004FE 74 80            [12] 1467 	mov	a,#0x80
      000500 C0 E0            [24] 1468 	push	acc
      000502 12r00r00         [24] 1469 	lcall	_printf
      000505 15 81            [12] 1470 	dec	sp
      000507 15 81            [12] 1471 	dec	sp
      000509 15 81            [12] 1472 	dec	sp
      00050B 22               [24] 1473 	ret
      00050C                       1474 00109$:
                                   1475 ;	Eth.c:210: printf("ARP transmission failed. Check error flags.\n\r");
      00050C 74rA0            [12] 1476 	mov	a,#___str_4
      00050E C0 E0            [24] 1477 	push	acc
      000510 74s00            [12] 1478 	mov	a,#(___str_4 >> 8)
      000512 C0 E0            [24] 1479 	push	acc
      000514 74 80            [12] 1480 	mov	a,#0x80
      000516 C0 E0            [24] 1481 	push	acc
      000518 12r00r00         [24] 1482 	lcall	_printf
      00051B 15 81            [12] 1483 	dec	sp
      00051D 15 81            [12] 1484 	dec	sp
      00051F 15 81            [12] 1485 	dec	sp
      000521 22               [24] 1486 	ret
      000522                       1487 00112$:
                                   1488 ;	Eth.c:213: printf("Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
      000522 74rCE            [12] 1489 	mov	a,#___str_5
      000524 C0 E0            [24] 1490 	push	acc
      000526 74s00            [12] 1491 	mov	a,#(___str_5 >> 8)
      000528 C0 E0            [24] 1492 	push	acc
      00052A 74 80            [12] 1493 	mov	a,#0x80
      00052C C0 E0            [24] 1494 	push	acc
      00052E 12r00r00         [24] 1495 	lcall	_printf
      000531 15 81            [12] 1496 	dec	sp
      000533 15 81            [12] 1497 	dec	sp
      000535 15 81            [12] 1498 	dec	sp
                                   1499 ;	Eth.c:215: }
      000537 22               [24] 1500 	ret
                                   1501 	.area CSEG    (CODE)
                                   1502 	.area CONST   (CODE)
                                   1503 	.area CONST   (CODE)
      000000                       1504 ___str_0:
      000000 49 6E 76 61 6C 69 64  1505 	.ascii "Invalid RX buffer range."
             20 52 58 20 62 75 66
             66 65 72 20 72 61 6E
             67 65 2E
      000018 0A                    1506 	.db 0x0a
      000019 00                    1507 	.db 0x00
                                   1508 	.area CSEG    (CODE)
                                   1509 	.area CONST   (CODE)
      00001A                       1510 ___str_1:
      00001A 52 58 20 62 75 66 66  1511 	.ascii "RX buffer initialized: 0x%04X to 0x%04X."
             65 72 20 69 6E 69 74
             69 61 6C 69 7A 65 64
             3A 20 30 78 25 30 34
             58 20 74 6F 20 30 78
             25 30 34 58 2E
      000042 0A                    1512 	.db 0x0a
      000043 00                    1513 	.db 0x00
                                   1514 	.area CSEG    (CODE)
                                   1515 	.area CONST   (CODE)
      000044                       1516 ___str_2:
      000044 0A                    1517 	.db 0x0a
      000045 49 6E 76 61 6C 69 64  1518 	.ascii "Invalid Buffer Size. Buffer exceeds valid address range."
             20 42 75 66 66 65 72
             20 53 69 7A 65 2E 20
             42 75 66 66 65 72 20
             65 78 63 65 65 64 73
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 72 61 6E 67 65 2E
      00007D 0A                    1519 	.db 0x0a
      00007E 00                    1520 	.db 0x00
                                   1521 	.area CSEG    (CODE)
                                   1522 	.area CONST   (CODE)
      00007F                       1523 ___str_3:
      00007F 41 52 50 20 72 65 71  1524 	.ascii "ARP request sent successfully."
             75 65 73 74 20 73 65
             6E 74 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79 2E
      00009D 0A                    1525 	.db 0x0a
      00009E 0D                    1526 	.db 0x0d
      00009F 00                    1527 	.db 0x00
                                   1528 	.area CSEG    (CODE)
                                   1529 	.area CONST   (CODE)
      0000A0                       1530 ___str_4:
      0000A0 41 52 50 20 74 72 61  1531 	.ascii "ARP transmission failed. Check error flags."
             6E 73 6D 69 73 73 69
             6F 6E 20 66 61 69 6C
             65 64 2E 20 43 68 65
             63 6B 20 65 72 72 6F
             72 20 66 6C 61 67 73
             2E
      0000CB 0A                    1532 	.db 0x0a
      0000CC 0D                    1533 	.db 0x0d
      0000CD 00                    1534 	.db 0x00
                                   1535 	.area CSEG    (CODE)
                                   1536 	.area CONST   (CODE)
      0000CE                       1537 ___str_5:
      0000CE 54 72 61 6E 73 6D 69  1538 	.ascii "Transmission timeout. ENC28J60 may not be functioning correc"
             73 73 69 6F 6E 20 74
             69 6D 65 6F 75 74 2E
             20 45 4E 43 32 38 4A
             36 30 20 6D 61 79 20
             6E 6F 74 20 62 65 20
             66 75 6E 63 74 69 6F
             6E 69 6E 67 20 63 6F
             72 72 65 63
      00010A 74 6C 79 2E           1539 	.ascii "tly."
      00010E 0A                    1540 	.db 0x0a
      00010F 0D                    1541 	.db 0x0d
      000110 00                    1542 	.db 0x00
                                   1543 	.area CSEG    (CODE)
                                   1544 	.area XINIT   (CODE)
      000000                       1545 __xinit__source_mac:
      000000 00                    1546 	.db #0x00	; 0
      000001 11                    1547 	.db #0x11	; 17
      000002 22                    1548 	.db #0x22	; 34
      000003 33                    1549 	.db #0x33	; 51	'3'
      000004 44                    1550 	.db #0x44	; 68	'D'
      000005 55                    1551 	.db #0x55	; 85	'U'
      000006                       1552 __xinit__dest_mac:
      000006 FF                    1553 	.db #0xff	; 255
      000007 FF                    1554 	.db #0xff	; 255
      000008 FF                    1555 	.db #0xff	; 255
      000009 FF                    1556 	.db #0xff	; 255
      00000A FF                    1557 	.db #0xff	; 255
      00000B FF                    1558 	.db #0xff	; 255
      00000C                       1559 __xinit__source_ip:
      00000C A9                    1560 	.db #0xa9	; 169
      00000D FE                    1561 	.db #0xfe	; 254
      00000E ED                    1562 	.db #0xed	; 237
      00000F 64                    1563 	.db #0x64	; 100	'd'
      000010                       1564 __xinit__target_ip:
      000010 FF                    1565 	.db #0xff	; 255
      000011 FF                    1566 	.db #0xff	; 255
      000012 FF                    1567 	.db #0xff	; 255
      000013 FF                    1568 	.db #0xff	; 255
                                   1569 	.area CABS    (ABS,CODE)
