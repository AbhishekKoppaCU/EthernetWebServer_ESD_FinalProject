
Assignment6_SerialIO_Answer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002834  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  080028f4  080028f4  000038f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de4  08002de4  00004060  2**0
                  CONTENTS
  4 .ARM          00000000  08002de4  08002de4  00004060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de4  08002de4  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00003de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002de8  08002de8  00003de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002dec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000060  08002e4c  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08002e4c  000042e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f2c  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010cc  00000000  00000000  00006fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f0  00000000  00000000  00008080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000213  00000000  00000000  00008370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015826  00000000  00000000  00008583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058e1  00000000  00000000  0001dda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006974a  00000000  00000000  0002368a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0008cdd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014cc  00000000  00000000  0008ce5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0008e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028dc 	.word	0x080028dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080028dc 	.word	0x080028dc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <cbfifo_init>:


/*
 * Initialize the FIFO structure.
 */
void cbfifo_init(cbfifo_t *fifo) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d00b      	beq.n	800026a <cbfifo_init+0x26>
        fifo->write = 0;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2280      	movs	r2, #128	@ 0x80
 8000256:	2100      	movs	r1, #0
 8000258:	5099      	str	r1, [r3, r2]
        fifo->read = 0;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2284      	movs	r2, #132	@ 0x84
 800025e:	2100      	movs	r1, #0
 8000260:	5099      	str	r1, [r3, r2]
        fifo->length = 0;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2288      	movs	r2, #136	@ 0x88
 8000266:	2100      	movs	r1, #0
 8000268:	5099      	str	r1, [r3, r2]
    }
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <cbfifo_enqueue>:
 *
 * Returns:
 *   The number of bytes actually enqueued, which could be 0.
 *   In case of an error, returns (size_t) -1.
 */
size_t cbfifo_enqueue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 8000272:	b580      	push	{r7, lr}
 8000274:	b088      	sub	sp, #32
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL) {
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <cbfifo_enqueue+0x18>
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <cbfifo_enqueue+0x1e>
        return FIFO_ERROR;
 800028a:	2301      	movs	r3, #1
 800028c:	425b      	negs	r3, r3
 800028e:	e03b      	b.n	8000308 <cbfifo_enqueue+0x96>
    }
    if (nbyte == 0) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d101      	bne.n	800029a <cbfifo_enqueue+0x28>
        return 0;
 8000296:	2300      	movs	r3, #0
 8000298:	e036      	b.n	8000308 <cbfifo_enqueue+0x96>
    }
    size_t blank = (MAX_FIFO_SIZE - (fifo->length));
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	2288      	movs	r2, #136	@ 0x88
 800029e:	589b      	ldr	r3, [r3, r2]
 80002a0:	2280      	movs	r2, #128	@ 0x80
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	61bb      	str	r3, [r7, #24]
    if (blank == 0) {
 80002a6:	69bb      	ldr	r3, [r7, #24]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d101      	bne.n	80002b0 <cbfifo_enqueue+0x3e>
        return 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	e02b      	b.n	8000308 <cbfifo_enqueue+0x96>
    }
    size_t endq = (nbyte <= blank) ? nbyte : blank;
 80002b0:	69ba      	ldr	r2, [r7, #24]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d900      	bls.n	80002ba <cbfifo_enqueue+0x48>
 80002b8:	0013      	movs	r3, r2
 80002ba:	617b      	str	r3, [r7, #20]
    uint8_t *temp = (uint8_t*)buf;
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < endq; i++) {
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
 80002c4:	e01b      	b.n	80002fe <cbfifo_enqueue+0x8c>
        fifo->buffer[fifo->write] = temp[i];
 80002c6:	693a      	ldr	r2, [r7, #16]
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	18d2      	adds	r2, r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2180      	movs	r1, #128	@ 0x80
 80002d0:	585b      	ldr	r3, [r3, r1]
 80002d2:	7811      	ldrb	r1, [r2, #0]
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	54d1      	strb	r1, [r2, r3]
        fifo->length++;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2288      	movs	r2, #136	@ 0x88
 80002dc:	589b      	ldr	r3, [r3, r2]
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	2188      	movs	r1, #136	@ 0x88
 80002e4:	505a      	str	r2, [r3, r1]
        fifo->write = ((fifo->write + 1) & (MAX_FIFO_SIZE-1)); // Increment write pointer with wrap-around
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2280      	movs	r2, #128	@ 0x80
 80002ea:	589b      	ldr	r3, [r3, r2]
 80002ec:	3301      	adds	r3, #1
 80002ee:	227f      	movs	r2, #127	@ 0x7f
 80002f0:	401a      	ands	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2180      	movs	r1, #128	@ 0x80
 80002f6:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	3301      	adds	r3, #1
 80002fc:	61fb      	str	r3, [r7, #28]
 80002fe:	69fa      	ldr	r2, [r7, #28]
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3df      	bcc.n	80002c6 <cbfifo_enqueue+0x54>
    }
    return endq;
 8000306:	697b      	ldr	r3, [r7, #20]
}
 8000308:	0018      	movs	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	b008      	add	sp, #32
 800030e:	bd80      	pop	{r7, pc}

08000310 <cbfifo_dequeue>:
 *   nbyte   Bytes of data requested
 *
 * Returns:
 *   The number of bytes actually removed.
 */
size_t cbfifo_dequeue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL || nbyte == 0 || fifo->length == 0) {
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d00a      	beq.n	8000338 <cbfifo_dequeue+0x28>
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d007      	beq.n	8000338 <cbfifo_dequeue+0x28>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <cbfifo_dequeue+0x28>
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2288      	movs	r2, #136	@ 0x88
 8000332:	589b      	ldr	r3, [r3, r2]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d101      	bne.n	800033c <cbfifo_dequeue+0x2c>
        return 0;
 8000338:	2300      	movs	r3, #0
 800033a:	e02d      	b.n	8000398 <cbfifo_dequeue+0x88>
    }
    size_t endq = (nbyte <= fifo->length) ? nbyte : fifo->length;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	2288      	movs	r2, #136	@ 0x88
 8000340:	589a      	ldr	r2, [r3, r2]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4293      	cmp	r3, r2
 8000346:	d900      	bls.n	800034a <cbfifo_dequeue+0x3a>
 8000348:	0013      	movs	r3, r2
 800034a:	61bb      	str	r3, [r7, #24]
    uint8_t *temp = (uint8_t*)buf;
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < endq; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
 8000354:	e01b      	b.n	800038e <cbfifo_dequeue+0x7e>
        temp[i] = fifo->buffer[fifo->read];
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2284      	movs	r2, #132	@ 0x84
 800035a:	589a      	ldr	r2, [r3, r2]
 800035c:	6979      	ldr	r1, [r7, #20]
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	18cb      	adds	r3, r1, r3
 8000362:	68f9      	ldr	r1, [r7, #12]
 8000364:	5c8a      	ldrb	r2, [r1, r2]
 8000366:	701a      	strb	r2, [r3, #0]
        fifo->length--;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2288      	movs	r2, #136	@ 0x88
 800036c:	589b      	ldr	r3, [r3, r2]
 800036e:	1e5a      	subs	r2, r3, #1
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	2188      	movs	r1, #136	@ 0x88
 8000374:	505a      	str	r2, [r3, r1]
        fifo->read = ((fifo->read + 1) & (MAX_FIFO_SIZE-1)); // Increment read pointer with wrap-around
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2284      	movs	r2, #132	@ 0x84
 800037a:	589b      	ldr	r3, [r3, r2]
 800037c:	3301      	adds	r3, #1
 800037e:	227f      	movs	r2, #127	@ 0x7f
 8000380:	401a      	ands	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2184      	movs	r1, #132	@ 0x84
 8000386:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	3301      	adds	r3, #1
 800038c:	61fb      	str	r3, [r7, #28]
 800038e:	69fa      	ldr	r2, [r7, #28]
 8000390:	69bb      	ldr	r3, [r7, #24]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3df      	bcc.n	8000356 <cbfifo_dequeue+0x46>
    }
    return endq;
 8000396:	69bb      	ldr	r3, [r7, #24]
}
 8000398:	0018      	movs	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	b008      	add	sp, #32
 800039e:	bd80      	pop	{r7, pc}

080003a0 <cbfifo_length>:
 *   fifo    Pointer to the FIFO structure
 *
 * Returns:
 *   Number of bytes currently available to be dequeued from the FIFO.
 */
size_t cbfifo_length(cbfifo_t *fifo) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
    return (fifo != NULL) ? fifo->length : 0; // Return length or 0 if fifo is NULL
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d003      	beq.n	80003b6 <cbfifo_length+0x16>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2288      	movs	r2, #136	@ 0x88
 80003b2:	589b      	ldr	r3, [r3, r2]
 80003b4:	e000      	b.n	80003b8 <cbfifo_length+0x18>
 80003b6:	2300      	movs	r3, #0
}
 80003b8:	0018      	movs	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b002      	add	sp, #8
 80003be:	bd80      	pop	{r7, pc}

080003c0 <ULED_ON>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_ON() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_ON_MASK;
 80003c4:	2390      	movs	r3, #144	@ 0x90
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	699a      	ldr	r2, [r3, #24]
 80003ca:	2390      	movs	r3, #144	@ 0x90
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2120      	movs	r1, #32
 80003d0:	430a      	orrs	r2, r1
 80003d2:	619a      	str	r2, [r3, #24]
}
 80003d4:	46c0      	nop			@ (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <ULED_OFF>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_OFF() {
 80003da:	b580      	push	{r7, lr}
 80003dc:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_OFF_MASK;
 80003de:	2390      	movs	r3, #144	@ 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	699a      	ldr	r2, [r3, #24]
 80003e4:	2390      	movs	r3, #144	@ 0x90
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	2180      	movs	r1, #128	@ 0x80
 80003ea:	0389      	lsls	r1, r1, #14
 80003ec:	430a      	orrs	r2, r1
 80003ee:	619a      	str	r2, [r3, #24]
}
 80003f0:	46c0      	nop			@ (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <cmd_led>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_led(int argc, char *argv[]) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	if (argc != 2) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b02      	cmp	r3, #2
 8000406:	d004      	beq.n	8000412 <cmd_led+0x1a>
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 8000408:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <cmd_led+0x6c>)
 800040a:	0018      	movs	r0, r3
 800040c:	f001 f902 	bl	8001614 <puts>
		return;
 8000410:	e025      	b.n	800045e <cmd_led+0x66>
	}
	if (strcasecmp(argv[1], "ON") == 0) {
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	3304      	adds	r3, #4
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <cmd_led+0x70>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f001 faad 	bl	800197c <strcasecmp>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d106      	bne.n	8000434 <cmd_led+0x3c>
		ULED_ON();
 8000426:	f7ff ffcb 	bl	80003c0 <ULED_ON>
		printf("\nLED turned ON\n");
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <cmd_led+0x74>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 f8f1 	bl	8001614 <puts>
 8000432:	e014      	b.n	800045e <cmd_led+0x66>
	} else if (strcasecmp(argv[1], "OFF") == 0) {
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	3304      	adds	r3, #4
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <cmd_led+0x78>)
 800043c:	0011      	movs	r1, r2
 800043e:	0018      	movs	r0, r3
 8000440:	f001 fa9c 	bl	800197c <strcasecmp>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d106      	bne.n	8000456 <cmd_led+0x5e>
		ULED_OFF();
 8000448:	f7ff ffc7 	bl	80003da <ULED_OFF>
		printf("\nLED turned OFF\n");
 800044c:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <cmd_led+0x7c>)
 800044e:	0018      	movs	r0, r3
 8000450:	f001 f8e0 	bl	8001614 <puts>
 8000454:	e003      	b.n	800045e <cmd_led+0x66>
	} else {
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 8000456:	4b03      	ldr	r3, [pc, #12]	@ (8000464 <cmd_led+0x6c>)
 8000458:	0018      	movs	r0, r3
 800045a:	f001 f8db 	bl	8001614 <puts>
	}
}
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	08002918 	.word	0x08002918
 8000468:	08002948 	.word	0x08002948
 800046c:	0800294c 	.word	0x0800294c
 8000470:	0800295c 	.word	0x0800295c
 8000474:	08002960 	.word	0x08002960

08000478 <cmd_echo>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_echo(int argc, char *argv[]) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	printf("\n");
 8000482:	200a      	movs	r0, #10
 8000484:	f001 f866 	bl	8001554 <putchar>
	for (int i = 1; i < argc; i++) {
 8000488:	2301      	movs	r3, #1
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e00c      	b.n	80004a8 <cmd_echo+0x30>
		printf("%s ", argv[i]);
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	18d3      	adds	r3, r2, r3
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <cmd_echo+0x48>)
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f001 f849 	bl	8001534 <iprintf>
	for (int i = 1; i < argc; i++) {
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dbee      	blt.n	800048e <cmd_echo+0x16>
	}
	printf("\n");
 80004b0:	200a      	movs	r0, #10
 80004b2:	f001 f84f 	bl	8001554 <putchar>
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	08002970 	.word	0x08002970

080004c4 <cmd_hexdump>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_hexdump(int argc, char *argv[]) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	if (argc != 3) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d004      	beq.n	80004de <cmd_hexdump+0x1a>
		printf(
 80004d4:	4b5b      	ldr	r3, [pc, #364]	@ (8000644 <cmd_hexdump+0x180>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 f89c 	bl	8001614 <puts>
				"\nInvalid command: HEXDUMP requires start and stop addresses\n");
		return;
 80004dc:	e0ae      	b.n	800063c <cmd_hexdump+0x178>
	}

	char *start_address_str = argv[1];
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	613b      	str	r3, [r7, #16]
	if(strlen(start_address_str) < 1 || strlen(start_address_str) > 8) {
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d006      	beq.n	80004fa <cmd_hexdump+0x36>
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff fe0a 	bl	8000108 <strlen>
 80004f4:	0003      	movs	r3, r0
 80004f6:	2b08      	cmp	r3, #8
 80004f8:	d904      	bls.n	8000504 <cmd_hexdump+0x40>
		printf("\nInvalid address\n");
 80004fa:	4b53      	ldr	r3, [pc, #332]	@ (8000648 <cmd_hexdump+0x184>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 f889 	bl	8001614 <puts>
		return;
 8000502:	e09b      	b.n	800063c <cmd_hexdump+0x178>
	}

	for (int i = 0; i < strlen(start_address_str); i++) {
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
 8000508:	e01f      	b.n	800054a <cmd_hexdump+0x86>
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	693a      	ldr	r2, [r7, #16]
 800050e:	18d3      	adds	r3, r2, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b2f      	cmp	r3, #47	@ 0x2f
 8000514:	d905      	bls.n	8000522 <cmd_hexdump+0x5e>
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	18d3      	adds	r3, r2, r3
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b39      	cmp	r3, #57	@ 0x39
 8000520:	d910      	bls.n	8000544 <cmd_hexdump+0x80>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	18d3      	adds	r3, r2, r3
 8000528:	781b      	ldrb	r3, [r3, #0]
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 800052a:	2b40      	cmp	r3, #64	@ 0x40
 800052c:	d905      	bls.n	800053a <cmd_hexdump+0x76>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	18d3      	adds	r3, r2, r3
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b46      	cmp	r3, #70	@ 0x46
 8000538:	d904      	bls.n	8000544 <cmd_hexdump+0x80>
			printf("\nInvalid address\n");
 800053a:	4b43      	ldr	r3, [pc, #268]	@ (8000648 <cmd_hexdump+0x184>)
 800053c:	0018      	movs	r0, r3
 800053e:	f001 f869 	bl	8001614 <puts>
			return;
 8000542:	e07b      	b.n	800063c <cmd_hexdump+0x178>
	for (int i = 0; i < strlen(start_address_str); i++) {
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	3301      	adds	r3, #1
 8000548:	61fb      	str	r3, [r7, #28]
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	0018      	movs	r0, r3
 800054e:	f7ff fddb 	bl	8000108 <strlen>
 8000552:	0002      	movs	r2, r0
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	429a      	cmp	r2, r3
 8000558:	d8d7      	bhi.n	800050a <cmd_hexdump+0x46>
		}
	}
	unsigned int start = (unsigned int) strtol(argv[1], NULL, 16);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	3304      	adds	r3, #4
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2210      	movs	r2, #16
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f000 ff0b 	bl	8001380 <strtol>
 800056a:	0003      	movs	r3, r0
 800056c:	60fb      	str	r3, [r7, #12]
	unsigned int length;

	switch (strncmp(argv[2], "0X", 2) == 0) {
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3308      	adds	r3, #8
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4935      	ldr	r1, [pc, #212]	@ (800064c <cmd_hexdump+0x188>)
 8000576:	2202      	movs	r2, #2
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fa19 	bl	80019b0 <strncmp>
 800057e:	0003      	movs	r3, r0
 8000580:	425a      	negs	r2, r3
 8000582:	4153      	adcs	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00c      	beq.n	80005a4 <cmd_hexdump+0xe0>
 800058a:	2b01      	cmp	r3, #1
 800058c:	d115      	bne.n	80005ba <cmd_hexdump+0xf6>
	case 1:
		length = (unsigned int) strtol(argv[2], NULL, 16);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	3308      	adds	r3, #8
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2210      	movs	r2, #16
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fef1 	bl	8001380 <strtol>
 800059e:	0003      	movs	r3, r0
 80005a0:	61bb      	str	r3, [r7, #24]
		break;
 80005a2:	e00a      	b.n	80005ba <cmd_hexdump+0xf6>
	case 0:
		length = (unsigned int) strtol(argv[2], NULL, 10);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	3308      	adds	r3, #8
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	220a      	movs	r2, #10
 80005ac:	2100      	movs	r1, #0
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fee6 	bl	8001380 <strtol>
 80005b4:	0003      	movs	r3, r0
 80005b6:	61bb      	str	r3, [r7, #24]
		break;
 80005b8:	46c0      	nop			@ (mov r8, r8)
	}

	if (length == 0 || length >= 640) {
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d004      	beq.n	80005ca <cmd_hexdump+0x106>
 80005c0:	69ba      	ldr	r2, [r7, #24]
 80005c2:	23a0      	movs	r3, #160	@ 0xa0
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d304      	bcc.n	80005d4 <cmd_hexdump+0x110>
		printf("\nInvalid length\n");
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <cmd_hexdump+0x18c>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 f821 	bl	8001614 <puts>
		return;
 80005d2:	e033      	b.n	800063c <cmd_hexdump+0x178>
	}

	printf("\nHexdump from %08X to %08X\n", start, start + length - 1);
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	68f9      	ldr	r1, [r7, #12]
 80005de:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <cmd_hexdump+0x190>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 ffa7 	bl	8001534 <iprintf>

	char *buff = (char*) start;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < length; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e01e      	b.n	800062e <cmd_hexdump+0x16a>
		if ((i % 8) == 0) {
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	2207      	movs	r2, #7
 80005f4:	4013      	ands	r3, r2
 80005f6:	d10d      	bne.n	8000614 <cmd_hexdump+0x150>
			if (i != 0) {
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <cmd_hexdump+0x140>
				printf("\n");
 80005fe:	200a      	movs	r0, #10
 8000600:	f000 ffa8 	bl	8001554 <putchar>
			}
			printf("%08X ", start + i);  // Address with underscores
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	18d2      	adds	r2, r2, r3
 800060a:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <cmd_hexdump+0x194>)
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f000 ff90 	bl	8001534 <iprintf>
		}
		printf("%02X ", (unsigned char) buff[i]);
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	001a      	movs	r2, r3
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <cmd_hexdump+0x198>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 ff86 	bl	8001534 <iprintf>
	for (int i = 0; i < length; i++) {
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	3301      	adds	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	69ba      	ldr	r2, [r7, #24]
 8000632:	429a      	cmp	r2, r3
 8000634:	d8dc      	bhi.n	80005f0 <cmd_hexdump+0x12c>
	}

	printf("\n");
 8000636:	200a      	movs	r0, #10
 8000638:	f000 ff8c 	bl	8001554 <putchar>
}
 800063c:	46bd      	mov	sp, r7
 800063e:	b008      	add	sp, #32
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	08002974 	.word	0x08002974
 8000648:	080029b0 	.word	0x080029b0
 800064c:	080029c4 	.word	0x080029c4
 8000650:	080029c8 	.word	0x080029c8
 8000654:	080029d8 	.word	0x080029d8
 8000658:	080029f4 	.word	0x080029f4
 800065c:	080029fc 	.word	0x080029fc

08000660 <accumulate_line>:
 * Parameters:
 * Buffer and Buffer Size
 *
 * Returns:
 */
void accumulate_line(char *buffer, int max_size) {
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	int index = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
	char ch;

	while (1) {
		ch = getchar();
 800066e:	f000 ff57 	bl	8001520 <getchar>
 8000672:	0002      	movs	r2, r0
 8000674:	210b      	movs	r1, #11
 8000676:	187b      	adds	r3, r7, r1
 8000678:	701a      	strb	r2, [r3, #0]
		if ((ch != 255)) {
 800067a:	000a      	movs	r2, r1
 800067c:	18bb      	adds	r3, r7, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2bff      	cmp	r3, #255	@ 0xff
 8000682:	d0f4      	beq.n	800066e <accumulate_line+0xe>
			switch (ch) {
 8000684:	18bb      	adds	r3, r7, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b7f      	cmp	r3, #127	@ 0x7f
 800068a:	d018      	beq.n	80006be <accumulate_line+0x5e>
 800068c:	dc32      	bgt.n	80006f4 <accumulate_line+0x94>
 800068e:	2b20      	cmp	r3, #32
 8000690:	d020      	beq.n	80006d4 <accumulate_line+0x74>
 8000692:	dc2f      	bgt.n	80006f4 <accumulate_line+0x94>
 8000694:	2b08      	cmp	r3, #8
 8000696:	d007      	beq.n	80006a8 <accumulate_line+0x48>
 8000698:	2b0d      	cmp	r3, #13
 800069a:	d12b      	bne.n	80006f4 <accumulate_line+0x94>
			case '\r':
				buffer[index] = '\0';
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	18d3      	adds	r3, r2, r3
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
				return;
 80006a6:	e04f      	b.n	8000748 <accumulate_line+0xe8>
			case '\b':
				if (index > 0) {
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dd48      	ble.n	8000740 <accumulate_line+0xe0>
					index--;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
					printf("\b \b");
 80006b4:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <accumulate_line+0xf0>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 ff3c 	bl	8001534 <iprintf>
				}
				break;
 80006bc:	e040      	b.n	8000740 <accumulate_line+0xe0>
			case '\177':
				if (index > 0) {
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dd3f      	ble.n	8000744 <accumulate_line+0xe4>
					index--;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
					printf("\177 \177");
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <accumulate_line+0xf4>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 ff31 	bl	8001534 <iprintf>
				}
				break;
 80006d2:	e037      	b.n	8000744 <accumulate_line+0xe4>
			case ' ':
				printf("%c", ch);
 80006d4:	240b      	movs	r4, #11
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 ff3a 	bl	8001554 <putchar>
				buffer[index] = ch;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	193a      	adds	r2, r7, r4
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	701a      	strb	r2, [r3, #0]
				index++;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
				break;
 80006f2:	e028      	b.n	8000746 <accumulate_line+0xe6>
			default:
				printf("%c", ch);
 80006f4:	240b      	movs	r4, #11
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 ff2a 	bl	8001554 <putchar>
				buffer[index] = toupper((unsigned char )ch);
 8000700:	210a      	movs	r1, #10
 8000702:	187b      	adds	r3, r7, r1
 8000704:	193a      	adds	r2, r7, r4
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	187b      	adds	r3, r7, r1
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <accumulate_line+0xf8>)
 8000712:	18d3      	adds	r3, r2, r3
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	001a      	movs	r2, r3
 8000718:	2303      	movs	r3, #3
 800071a:	4013      	ands	r3, r2
 800071c:	2b02      	cmp	r3, #2
 800071e:	d103      	bne.n	8000728 <accumulate_line+0xc8>
 8000720:	187b      	adds	r3, r7, r1
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3b20      	subs	r3, #32
 8000726:	e002      	b.n	800072e <accumulate_line+0xce>
 8000728:	230a      	movs	r3, #10
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	188a      	adds	r2, r1, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	7013      	strb	r3, [r2, #0]
				index++;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
				break;
 800073e:	e002      	b.n	8000746 <accumulate_line+0xe6>
				break;
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	e794      	b.n	800066e <accumulate_line+0xe>
				break;
 8000744:	46c0      	nop			@ (mov r8, r8)
		ch = getchar();
 8000746:	e792      	b.n	800066e <accumulate_line+0xe>
			}
		}
	}
}
 8000748:	46bd      	mov	sp, r7
 800074a:	b005      	add	sp, #20
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	08002a04 	.word	0x08002a04
 8000754:	08002a08 	.word	0x08002a08
 8000758:	08002c00 	.word	0x08002c00

0800075c <tokenize_line>:
 *   max capacity of argument count buffer
 *
 * Returns:
 *   None.
 */
int tokenize_line(char *line, char *argv[], int max_tokens) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	int argc = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
	char *token = strtok(line, " ");
 800076c:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <tokenize_line+0x58>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f001 f92e 	bl	80019d4 <strtok>
 8000778:	0003      	movs	r3, r0
 800077a:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 800077c:	e00e      	b.n	800079c <tokenize_line+0x40>
		argv[argc++] = token;
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	617a      	str	r2, [r7, #20]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	601a      	str	r2, [r3, #0]
		token = strtok(NULL, " ");
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <tokenize_line+0x58>)
 8000790:	0019      	movs	r1, r3
 8000792:	2000      	movs	r0, #0
 8000794:	f001 f91e 	bl	80019d4 <strtok>
 8000798:	0003      	movs	r3, r0
 800079a:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d003      	beq.n	80007aa <tokenize_line+0x4e>
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dbe9      	blt.n	800077e <tokenize_line+0x22>
	}
	return argc;
 80007aa:	697b      	ldr	r3, [r7, #20]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b006      	add	sp, #24
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	08002a0c 	.word	0x08002a0c

080007b8 <process_command>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void process_command(int argc, char *argv[]) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	if (argc == 0) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d104      	bne.n	80007d2 <process_command+0x1a>
		printf("\nNo command provided\n");
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <process_command+0x70>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 ff22 	bl	8001614 <puts>
		return;
 80007d0:	e027      	b.n	8000822 <process_command+0x6a>
	}
	for (int i = 0; i < num_commands; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e018      	b.n	800080a <process_command+0x52>
		if (strcasecmp(argv[0], commands[i].name) == 0) {
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <process_command+0x74>)
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	00d2      	lsls	r2, r2, #3
 80007e2:	58d3      	ldr	r3, [r2, r3]
 80007e4:	0019      	movs	r1, r3
 80007e6:	f001 f8c9 	bl	800197c <strcasecmp>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d10a      	bne.n	8000804 <process_command+0x4c>
			commands[i].handler(argc, argv);
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <process_command+0x74>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	3304      	adds	r3, #4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	0010      	movs	r0, r2
 8000800:	4798      	blx	r3
			return;
 8000802:	e00e      	b.n	8000822 <process_command+0x6a>
	for (int i = 0; i < num_commands; i++) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <process_command+0x78>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbe1      	blt.n	80007d8 <process_command+0x20>
		}
	}
	printf("\nUnknown command: %s\n", argv[0]);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <process_command+0x7c>)
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fe89 	bl	8001534 <iprintf>
}
 8000822:	46bd      	mov	sp, r7
 8000824:	b004      	add	sp, #16
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08002a10 	.word	0x08002a10
 800082c:	08002bc4 	.word	0x08002bc4
 8000830:	08002bec 	.word	0x08002bec
 8000834:	08002a28 	.word	0x08002a28

08000838 <USART2_IRQHandler>:

#include "global.h"
#include <stdbool.h>

void USART2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	// Check if RXNE flag is set (data received)
	if (USART2->ISR & USART_ISR_RXNE)
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	2220      	movs	r2, #32
 8000844:	4013      	ands	r3, r2
 8000846:	d00b      	beq.n	8000860 <USART2_IRQHandler+0x28>
	{
		char newval = USART2->RDR; // Read the received character
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <USART2_IRQHandler+0x84>)
 800084a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800084c:	b29b      	uxth	r3, r3
 800084e:	b2da      	uxtb	r2, r3
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	701a      	strb	r2, [r3, #0]
		cbfifo_enqueue(&fiforx,&newval,sizeof(newval));
 8000854:	1df9      	adds	r1, r7, #7
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <USART2_IRQHandler+0x88>)
 8000858:	2201      	movs	r2, #1
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff fd09 	bl	8000272 <cbfifo_enqueue>
	}
	if (USART2->ISR & USART_ISR_TXE)
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	4013      	ands	r3, r2
 8000868:	d023      	beq.n	80008b2 <USART2_IRQHandler+0x7a>
	{
		char newval; // Read the received character
		if(cbfifo_dequeue(&fifotx,&newval,sizeof(newval))>0)
 800086a:	1db9      	adds	r1, r7, #6
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <USART2_IRQHandler+0x8c>)
 800086e:	2201      	movs	r2, #1
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff fd4d 	bl	8000310 <cbfifo_dequeue>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d015      	beq.n	80008a6 <USART2_IRQHandler+0x6e>
		{
			 if (newval == '\n')
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b0a      	cmp	r3, #10
 8000880:	d10c      	bne.n	800089c <USART2_IRQHandler+0x64>
			 {
	                USART2->TDR = '\r';
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000884:	220d      	movs	r2, #13
 8000886:	851a      	strh	r2, [r3, #40]	@ 0x28
	                while (!(USART2->ISR & USART_ISR_TXE));
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <USART2_IRQHandler+0x84>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	4013      	ands	r3, r2
 8000892:	d0fa      	beq.n	800088a <USART2_IRQHandler+0x52>
	                USART2->TDR = '\n';
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000896:	220a      	movs	r2, #10
 8000898:	851a      	strh	r2, [r3, #40]	@ 0x28
		else
		{
			USART2->CR1 &= (~(USART_CR1_TXEIE));
		}
	}
}
 800089a:	e00a      	b.n	80008b2 <USART2_IRQHandler+0x7a>
				 USART2->TDR = newval; // Send the character
 800089c:	1dbb      	adds	r3, r7, #6
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <USART2_IRQHandler+0x84>)
 80008a2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80008a4:	e005      	b.n	80008b2 <USART2_IRQHandler+0x7a>
			USART2->CR1 &= (~(USART_CR1_TXEIE));
 80008a6:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <USART2_IRQHandler+0x84>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <USART2_IRQHandler+0x84>)
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	438a      	bics	r2, r1
 80008b0:	601a      	str	r2, [r3, #0]
}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	40004400 	.word	0x40004400
 80008c0:	20000108 	.word	0x20000108
 80008c4:	2000007c 	.word	0x2000007c

080008c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008da:	d809      	bhi.n	80008f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	001a      	movs	r2, r3
 80008e2:	231f      	movs	r3, #31
 80008e4:	401a      	ands	r2, r3
 80008e6:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <__NVIC_EnableIRQ+0x30>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	4091      	lsls	r1, r2
 80008ec:	000a      	movs	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	e000e100 	.word	0xe000e100

080008fc <uart_init>:
 *      Author: Abhishek Nadgir
 */

#include "init_functions.h"

void uart_init(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 8000900:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <uart_init+0xb0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6898      	ldr	r0, [r3, #8]
 8000906:	2300      	movs	r3, #0
 8000908:	2202      	movs	r2, #2
 800090a:	2100      	movs	r1, #0
 800090c:	f000 fe8c 	bl	8001628 <setvbuf>
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable GPIOA clock
 8000910:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <uart_init+0xb4>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <uart_init+0xb4>)
 8000916:	2180      	movs	r1, #128	@ 0x80
 8000918:	0289      	lsls	r1, r1, #10
 800091a:	430a      	orrs	r2, r1
 800091c:	615a      	str	r2, [r3, #20]
	// Set PA2 (TX) and PA3 (RX) to alternate function mode (AF7 for USART2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);			// Clear
 800091e:	2390      	movs	r3, #144	@ 0x90
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	2390      	movs	r3, #144	@ 0x90
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	21f0      	movs	r1, #240	@ 0xf0
 800092a:	438a      	bics	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);// Set AF mode
 800092e:	2390      	movs	r3, #144	@ 0x90
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2390      	movs	r3, #144	@ 0x90
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	21a0      	movs	r1, #160	@ 0xa0
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos) | (1 << GPIO_AFRL_AFSEL3_Pos); // AF7 (USART2) for PA2 and PA3
 800093e:	2390      	movs	r3, #144	@ 0x90
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	6a1a      	ldr	r2, [r3, #32]
 8000944:	2390      	movs	r3, #144	@ 0x90
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	2188      	movs	r1, #136	@ 0x88
 800094a:	0149      	lsls	r1, r1, #5
 800094c:	430a      	orrs	r2, r1
 800094e:	621a      	str	r2, [r3, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;				// Enable USART2 clock
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <uart_init+0xb4>)
 8000952:	69da      	ldr	r2, [r3, #28]
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <uart_init+0xb4>)
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	0289      	lsls	r1, r1, #10
 800095a:	430a      	orrs	r2, r1
 800095c:	61da      	str	r2, [r3, #28]
	USART2->BRR = USART_BRR_VALUE;// Configure baud rate (assuming 24MHz APB1 clock and 19200 baud rate)
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <uart_init+0xb8>)
 8000960:	4a15      	ldr	r2, [pc, #84]	@ (80009b8 <uart_init+0xbc>)
 8000962:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE; // Enable TX, RX, and RX interrupt
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <uart_init+0xb8>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <uart_init+0xb8>)
 800096a:	212c      	movs	r1, #44	@ 0x2c
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_PARITY_CONFIG;
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <uart_init+0xb8>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <uart_init+0xb8>)
 8000976:	21c0      	movs	r1, #192	@ 0xc0
 8000978:	00c9      	lsls	r1, r1, #3
 800097a:	430a      	orrs	r2, r1
 800097c:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_WORD_LENGTH;
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <uart_init+0xb8>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <uart_init+0xb8>)
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	0149      	lsls	r1, r1, #5
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
	USART2->CR2 |= USART_STOP_BITS;
 800098c:	4a09      	ldr	r2, [pc, #36]	@ (80009b4 <uart_init+0xb8>)
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <uart_init+0xb8>)
 8000990:	6852      	ldr	r2, [r2, #4]
 8000992:	605a      	str	r2, [r3, #4]
	USART2->CR1 |= USART_CR1_UE;								// Enable USART
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <uart_init+0xb8>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <uart_init+0xb8>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);			// Enable USART2 interrupt in NVIC
 80009a0:	201c      	movs	r0, #28
 80009a2:	f7ff ff91 	bl	80008c8 <__NVIC_EnableIRQ>
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000010 	.word	0x20000010
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40004400 	.word	0x40004400
 80009b8:	000004e2 	.word	0x000004e2

080009bc <main>:
 ******************************************************************************
 */
// Reference USed: Lecture Presentation Slides utilised for Command table and Command processing
#include "main.h"
#include "spi.h"
int main(void) {
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	4c23      	ldr	r4, [pc, #140]	@ (8000a4c <main+0x90>)
 80009c0:	44a5      	add	sp, r4
 80009c2:	af00      	add	r7, sp, #0
	/*
	 * Clocks: Processor = 48 Mhz. AHB = 48 MHz. APB = 24 MHz.
	 *
	 */
	//init_uled(); //On board LED Initialisation
	uart_init(); //UART 2 Initialisation for Serial COmmunication
 80009c4:	f7ff ff9a 	bl	80008fc <uart_init>
	cbfifo_init(&fiforx); // Initialising RX Buffer
 80009c8:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <main+0x94>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fc3a 	bl	8000244 <cbfifo_init>
	cbfifo_init(&fifotx); // Initialising TX buffer
 80009d0:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <main+0x98>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fc36 	bl	8000244 <cbfifo_init>
	char inputval[INPUT_BUFFER_SIZE]; // Defining a buffer to accept the command and Process
	char *argv[ARGUMENT_BUFFER_SIZE]; // Defining a buffer to store Argument Vectors after tokenization
	int argc; //TO store Argument COunt
	printf("\nWelcome to SerialIO!\n");
 80009d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <main+0x9c>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fe1a 	bl	8001614 <puts>
	//IO_Init();
	SPI_Init();
 80009e0:	f000 f848 	bl	8000a74 <SPI_Init>
	printf("SPI2->CR1: 0x%08lX\n", SPI2->CR1);
 80009e4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <main+0xa0>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <main+0xa4>)
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f000 fda1 	bl	8001534 <iprintf>
	printf("SPI2->CR2: 0x%08lX\n", SPI2->CR2);
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <main+0xa0>)
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <main+0xa8>)
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fd9a 	bl	8001534 <iprintf>
	printf("GPIOB->AFR[1]: 0x%08lX\n", GPIOB->AFR[1]);
 8000a00:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <main+0xac>)
 8000a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <main+0xb0>)
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fd93 	bl	8001534 <iprintf>
	while (1) {
		printf("\n$$ ");
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <main+0xb4>)
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fd8f 	bl	8001534 <iprintf>
		accumulate_line(inputval, INPUT_BUFFER_SIZE); //Takes character from Serial Terminal
 8000a16:	2481      	movs	r4, #129	@ 0x81
 8000a18:	00a4      	lsls	r4, r4, #2
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff fe1e 	bl	8000660 <accumulate_line>
		argc = tokenize_line(inputval, argv, ARGUMENT_BUFFER_SIZE); // Takes array of string as input and returs Number of Arguments and buffer of argument vector
 8000a24:	1d39      	adds	r1, r7, #4
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fe96 	bl	800075c <tokenize_line>
 8000a30:	0003      	movs	r3, r0
 8000a32:	21a1      	movs	r1, #161	@ 0xa1
 8000a34:	0089      	lsls	r1, r1, #2
 8000a36:	187a      	adds	r2, r7, r1
 8000a38:	6013      	str	r3, [r2, #0]
		process_command(argc, argv); // Takes argument count and vector as input and processes the command accordingly
 8000a3a:	1d3a      	adds	r2, r7, #4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff feb8 	bl	80007b8 <process_command>
		printf("\n$$ ");
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	e7e0      	b.n	8000a0e <main+0x52>
 8000a4c:	fffffd74 	.word	0xfffffd74
 8000a50:	20000108 	.word	0x20000108
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	08002a40 	.word	0x08002a40
 8000a5c:	40003800 	.word	0x40003800
 8000a60:	08002a58 	.word	0x08002a58
 8000a64:	08002a6c 	.word	0x08002a6c
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	08002a80 	.word	0x08002a80
 8000a70:	08002a98 	.word	0x08002a98

08000a74 <SPI_Init>:
#define SPI2_CS_PORT   GPIOB
#define SPI2_SCK_PORT  GPIOB
#define SPI2_MISO_PORT GPIOB
#define SPI2_MOSI_PORT GPIOB

void SPI_Init(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <SPI_Init+0x74>)
 8000a7a:	695a      	ldr	r2, [r3, #20]
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <SPI_Init+0x74>)
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	02c9      	lsls	r1, r1, #11
 8000a82:	430a      	orrs	r2, r1
 8000a84:	615a      	str	r2, [r3, #20]

    // Configure CS, SCK, and MOSI as output
    GPIOB->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER13 | GPIO_MODER_MODER15); // Clear MODER bits
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <SPI_Init+0x78>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <SPI_Init+0x78>)
 8000a8c:	4918      	ldr	r1, [pc, #96]	@ (8000af0 <SPI_Init+0x7c>)
 8000a8e:	400a      	ands	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER15_0); // Set as output
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <SPI_Init+0x78>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <SPI_Init+0x78>)
 8000a98:	218a      	movs	r1, #138	@ 0x8a
 8000a9a:	05c9      	lsls	r1, r1, #23
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	601a      	str	r2, [r3, #0]

    // Configure MISO as input
    GPIOB->MODER &= ~GPIO_MODER_MODER14; // Set as input
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <SPI_Init+0x78>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <SPI_Init+0x78>)
 8000aa6:	4913      	ldr	r1, [pc, #76]	@ (8000af4 <SPI_Init+0x80>)
 8000aa8:	400a      	ands	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]

    // Set all pins to high-speed mode
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR12 | GPIO_OSPEEDR_OSPEEDR13 | GPIO_OSPEEDR_OSPEEDR14 | GPIO_OSPEEDR_OSPEEDR15);
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <SPI_Init+0x78>)
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <SPI_Init+0x78>)
 8000ab2:	21ff      	movs	r1, #255	@ 0xff
 8000ab4:	0609      	lsls	r1, r1, #24
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	609a      	str	r2, [r3, #8]

    // Set default states
    GPIOB->ODR |= SPI2_CS_PIN;    // CS High (inactive)
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <SPI_Init+0x78>)
 8000abc:	695a      	ldr	r2, [r3, #20]
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <SPI_Init+0x78>)
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	0149      	lsls	r1, r1, #5
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	615a      	str	r2, [r3, #20]
    GPIOB->ODR &= ~SPI2_SCK_PIN;  // SCK Low (idle)
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <SPI_Init+0x78>)
 8000aca:	695a      	ldr	r2, [r3, #20]
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <SPI_Init+0x78>)
 8000ace:	490a      	ldr	r1, [pc, #40]	@ (8000af8 <SPI_Init+0x84>)
 8000ad0:	400a      	ands	r2, r1
 8000ad2:	615a      	str	r2, [r3, #20]
    GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <SPI_Init+0x78>)
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <SPI_Init+0x78>)
 8000ada:	4908      	ldr	r1, [pc, #32]	@ (8000afc <SPI_Init+0x88>)
 8000adc:	400a      	ands	r2, r1
 8000ade:	615a      	str	r2, [r3, #20]
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000400 	.word	0x48000400
 8000af0:	30ffffff 	.word	0x30ffffff
 8000af4:	cfffffff 	.word	0xcfffffff
 8000af8:	ffffdfff 	.word	0xffffdfff
 8000afc:	ffff7fff 	.word	0xffff7fff

08000b00 <SPI_WriteByte>:

void SPI_WriteByte(uint8_t data) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e039      	b.n	8000b86 <SPI_WriteByte+0x86>
        // Write the MSB to MOSI
        if (data & 0x80) {
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	da07      	bge.n	8000b2c <SPI_WriteByte+0x2c>
            GPIOB->ODR |= SPI2_MOSI_PIN; // Set MOSI High
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <SPI_WriteByte+0x98>)
 8000b1e:	695a      	ldr	r2, [r3, #20]
 8000b20:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <SPI_WriteByte+0x98>)
 8000b22:	2180      	movs	r1, #128	@ 0x80
 8000b24:	0209      	lsls	r1, r1, #8
 8000b26:	430a      	orrs	r2, r1
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	e005      	b.n	8000b38 <SPI_WriteByte+0x38>
        } else {
            GPIOB->ODR &= ~SPI2_MOSI_PIN; // Set MOSI Low
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <SPI_WriteByte+0x98>)
 8000b2e:	695a      	ldr	r2, [r3, #20]
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <SPI_WriteByte+0x98>)
 8000b32:	491a      	ldr	r1, [pc, #104]	@ (8000b9c <SPI_WriteByte+0x9c>)
 8000b34:	400a      	ands	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
        }
        data <<= 1; // Shift to the next bit
 8000b38:	1dfa      	adds	r2, r7, #7
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	18db      	adds	r3, r3, r3
 8000b40:	7013      	strb	r3, [r2, #0]

        // Toggle SCK to clock the bit
        GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <SPI_WriteByte+0x98>)
 8000b44:	695a      	ldr	r2, [r3, #20]
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <SPI_WriteByte+0x98>)
 8000b48:	2180      	movs	r1, #128	@ 0x80
 8000b4a:	0189      	lsls	r1, r1, #6
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	e002      	b.n	8000b5c <SPI_WriteByte+0x5c>
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	2b0f      	cmp	r3, #15
 8000b60:	ddf9      	ble.n	8000b56 <SPI_WriteByte+0x56>
        GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <SPI_WriteByte+0x98>)
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <SPI_WriteByte+0x98>)
 8000b68:	490d      	ldr	r1, [pc, #52]	@ (8000ba0 <SPI_WriteByte+0xa0>)
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	e002      	b.n	8000b7a <SPI_WriteByte+0x7a>
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	ddf9      	ble.n	8000b74 <SPI_WriteByte+0x74>
    for (int i = 0; i < 8; i++) {
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	ddc2      	ble.n	8000b12 <SPI_WriteByte+0x12>
    }
}
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b006      	add	sp, #24
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	ffff7fff 	.word	0xffff7fff
 8000ba0:	ffffdfff 	.word	0xffffdfff

08000ba4 <SPI_ReadByte>:

uint8_t SPI_ReadByte(void) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
    uint8_t received_data = 0;
 8000baa:	230f      	movs	r3, #15
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 8; i++) {
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	e034      	b.n	8000c22 <SPI_ReadByte+0x7e>
        received_data <<= 1; // Make room for the next bit
 8000bb8:	230f      	movs	r3, #15
 8000bba:	18fa      	adds	r2, r7, r3
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	18db      	adds	r3, r3, r3
 8000bc2:	7013      	strb	r3, [r2, #0]

        // Toggle SCK to clock the bit
        GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <SPI_ReadByte+0x94>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <SPI_ReadByte+0x94>)
 8000bca:	2180      	movs	r1, #128	@ 0x80
 8000bcc:	0189      	lsls	r1, r1, #6
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	e002      	b.n	8000bde <SPI_ReadByte+0x3a>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	ddf9      	ble.n	8000bd8 <SPI_ReadByte+0x34>

        // Read the bit from MISO
        if (GPIOB->IDR & SPI2_MISO_PIN) {
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <SPI_ReadByte+0x94>)
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	01db      	lsls	r3, r3, #7
 8000bec:	4013      	ands	r3, r2
 8000bee:	d006      	beq.n	8000bfe <SPI_ReadByte+0x5a>
            received_data |= 0x01; // Set the LSB
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	18bb      	adds	r3, r7, r2
 8000bf4:	18ba      	adds	r2, r7, r2
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
        }

        GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <SPI_ReadByte+0x94>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <SPI_ReadByte+0x94>)
 8000c04:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <SPI_ReadByte+0x98>)
 8000c06:	400a      	ands	r2, r1
 8000c08:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	e002      	b.n	8000c16 <SPI_ReadByte+0x72>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	ddf9      	ble.n	8000c10 <SPI_ReadByte+0x6c>
    for (int i = 0; i < 8; i++) {
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	ddc7      	ble.n	8000bb8 <SPI_ReadByte+0x14>
    }

    return received_data;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	781b      	ldrb	r3, [r3, #0]
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	ffffdfff 	.word	0xffffdfff

08000c40 <cmd_spi_read>:
void cmd_spi_read(int argc, char *argv[]) {
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
    if (argc < 2) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	dc04      	bgt.n	8000c5a <cmd_spi_read+0x1a>
        printf("\nInvalid command: READ requires address\n");
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <cmd_spi_read+0x98>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fcde 	bl	8001614 <puts>
        return;
 8000c58:	e03a      	b.n	8000cd0 <cmd_spi_read+0x90>
    }

    // Parse the address
    char *endptr;
    uint8_t addr = (uint8_t)strtol(argv[1], &endptr, 16);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2208      	movs	r2, #8
 8000c62:	18b9      	adds	r1, r7, r2
 8000c64:	2210      	movs	r2, #16
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fb8a 	bl	8001380 <strtol>
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	230f      	movs	r3, #15
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	701a      	strb	r2, [r3, #0]
    if (*endptr != '\0') {
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <cmd_spi_read+0x4e>
        printf("\nInvalid address: %s\n", argv[1]);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	3304      	adds	r3, #4
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <cmd_spi_read+0x9c>)
 8000c84:	0011      	movs	r1, r2
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 fc54 	bl	8001534 <iprintf>
        return;
 8000c8c:	e020      	b.n	8000cd0 <cmd_spi_read+0x90>
    }

    // Pull CS Low
    GPIOB->ODR &= ~SPI2_CS_PIN;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <cmd_spi_read+0xa0>)
 8000c90:	695a      	ldr	r2, [r3, #20]
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <cmd_spi_read+0xa0>)
 8000c94:	4913      	ldr	r1, [pc, #76]	@ (8000ce4 <cmd_spi_read+0xa4>)
 8000c96:	400a      	ands	r2, r1
 8000c98:	615a      	str	r2, [r3, #20]

    // Send address and read data
    SPI_WriteByte(addr);           // Send the address
 8000c9a:	250f      	movs	r5, #15
 8000c9c:	197b      	adds	r3, r7, r5
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ff2d 	bl	8000b00 <SPI_WriteByte>
    uint8_t data = SPI_ReadByte(); // Read the data
 8000ca6:	260e      	movs	r6, #14
 8000ca8:	19bc      	adds	r4, r7, r6
 8000caa:	f7ff ff7b 	bl	8000ba4 <SPI_ReadByte>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	7023      	strb	r3, [r4, #0]

    // Pull CS High
    GPIOB->ODR |= SPI2_CS_PIN;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <cmd_spi_read+0xa0>)
 8000cb4:	695a      	ldr	r2, [r3, #20]
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <cmd_spi_read+0xa0>)
 8000cb8:	2180      	movs	r1, #128	@ 0x80
 8000cba:	0149      	lsls	r1, r1, #5
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	615a      	str	r2, [r3, #20]

    // Print the received data
    printf("\nSPI Read Completed: Address 0x%02X, Data 0x%02X\n", addr, data);
 8000cc0:	197b      	adds	r3, r7, r5
 8000cc2:	7819      	ldrb	r1, [r3, #0]
 8000cc4:	19bb      	adds	r3, r7, r6
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <cmd_spi_read+0xa8>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fc32 	bl	8001534 <iprintf>
}
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b005      	add	sp, #20
 8000cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	08002aa0 	.word	0x08002aa0
 8000cdc:	08002ac8 	.word	0x08002ac8
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	ffffefff 	.word	0xffffefff
 8000ce8:	08002ae0 	.word	0x08002ae0

08000cec <cmd_spi_write>:

void cmd_spi_write(int argc, char *argv[]) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    if (argc < 3) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	dc04      	bgt.n	8000d06 <cmd_spi_write+0x1a>
        printf("\nInvalid command: WRITE requires number of bytes and data\n");
 8000cfc:	4b33      	ldr	r3, [pc, #204]	@ (8000dcc <cmd_spi_write+0xe0>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fc88 	bl	8001614 <puts>
        return;
 8000d04:	e05e      	b.n	8000dc4 <cmd_spi_write+0xd8>
    }

    int num_bytes = atoi(argv[1]);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 faa7 	bl	8001260 <atoi>
 8000d12:	0003      	movs	r3, r0
 8000d14:	613b      	str	r3, [r7, #16]
    if (num_bytes <= 0 || argc != (num_bytes + 2)) {
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dd04      	ble.n	8000d26 <cmd_spi_write+0x3a>
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	3302      	adds	r3, #2
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d004      	beq.n	8000d30 <cmd_spi_write+0x44>
        printf("\nInvalid command: Incorrect number of data arguments\n");
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <cmd_spi_write+0xe4>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 fc73 	bl	8001614 <puts>
        return;
 8000d2e:	e049      	b.n	8000dc4 <cmd_spi_write+0xd8>
    }

    // Pull CS Low
    GPIOB->ODR &= ~SPI2_CS_PIN;
 8000d30:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <cmd_spi_write+0xe8>)
 8000d32:	695a      	ldr	r2, [r3, #20]
 8000d34:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <cmd_spi_write+0xe8>)
 8000d36:	4928      	ldr	r1, [pc, #160]	@ (8000dd8 <cmd_spi_write+0xec>)
 8000d38:	400a      	ands	r2, r1
 8000d3a:	615a      	str	r2, [r3, #20]

    // Write each byte
    for (int i = 0; i < num_bytes; i++) {
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e02f      	b.n	8000da2 <cmd_spi_write+0xb6>
        char *endptr;
        uint8_t data = (uint8_t)strtol(argv[i + 2], &endptr, 16);
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3302      	adds	r3, #2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	18d3      	adds	r3, r2, r3
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2208      	movs	r2, #8
 8000d50:	18b9      	adds	r1, r7, r2
 8000d52:	2210      	movs	r2, #16
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fb13 	bl	8001380 <strtol>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	701a      	strb	r2, [r3, #0]
        if (*endptr != '\0') {
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d012      	beq.n	8000d90 <cmd_spi_write+0xa4>
            printf("\nInvalid data: %s\n", argv[i + 2]);
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	18d3      	adds	r3, r2, r3
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <cmd_spi_write+0xf0>)
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 fbda 	bl	8001534 <iprintf>
            GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <cmd_spi_write+0xe8>)
 8000d82:	695a      	ldr	r2, [r3, #20]
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <cmd_spi_write+0xe8>)
 8000d86:	2180      	movs	r1, #128	@ 0x80
 8000d88:	0149      	lsls	r1, r1, #5
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	e019      	b.n	8000dc4 <cmd_spi_write+0xd8>
            return;
        }
        SPI_WriteByte(data);
 8000d90:	230f      	movs	r3, #15
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff feb2 	bl	8000b00 <SPI_WriteByte>
    for (int i = 0; i < num_bytes; i++) {
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dbcb      	blt.n	8000d42 <cmd_spi_write+0x56>
    }

    // Pull CS High
    GPIOB->ODR |= SPI2_CS_PIN;
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <cmd_spi_write+0xe8>)
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <cmd_spi_write+0xe8>)
 8000db0:	2180      	movs	r1, #128	@ 0x80
 8000db2:	0149      	lsls	r1, r1, #5
 8000db4:	430a      	orrs	r2, r1
 8000db6:	615a      	str	r2, [r3, #20]

    printf("\nSPI Write Completed: Sent %d bytes\n", num_bytes);
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <cmd_spi_write+0xf4>)
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fbb8 	bl	8001534 <iprintf>
}
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b006      	add	sp, #24
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	08002b14 	.word	0x08002b14
 8000dd0:	08002b50 	.word	0x08002b50
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	ffffefff 	.word	0xffffefff
 8000ddc:	08002b88 	.word	0x08002b88
 8000de0:	08002b9c 	.word	0x08002b9c

08000de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  return 1;
 8000de8:	2301      	movs	r3, #1
}
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_kill>:

int _kill(int pid, int sig)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dfa:	f000 fe99 	bl	8001b30 <__errno>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	2216      	movs	r2, #22
 8000e02:	601a      	str	r2, [r3, #0]
  return -1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	425b      	negs	r3, r3
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_exit>:

void _exit (int status)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e18:	2301      	movs	r3, #1
 8000e1a:	425a      	negs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff ffe5 	bl	8000df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	e7fd      	b.n	8000e26 <_exit+0x16>

08000e2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e00a      	b.n	8000e52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3c:	f000 f890 	bl	8000f60 <__io_getchar>
 8000e40:	0001      	movs	r1, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	60ba      	str	r2, [r7, #8]
 8000e48:	b2ca      	uxtb	r2, r1
 8000e4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	dbf0      	blt.n	8000e3c <_read+0x12>
  }

  return len;
 8000e5a:	687b      	ldr	r3, [r7, #4]
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b006      	add	sp, #24
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e009      	b.n	8000e8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	60ba      	str	r2, [r7, #8]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 f886 	bl	8000f90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3301      	adds	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	dbf1      	blt.n	8000e76 <_write+0x12>
  }
  return len;
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b006      	add	sp, #24
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_close>:

int _close(int file)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	425b      	negs	r3, r3
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2280      	movs	r2, #128	@ 0x80
 8000ebe:	0192      	lsls	r2, r2, #6
 8000ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <_isatty>:

int _isatty(int file)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b004      	add	sp, #16
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	18d3      	adds	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f000 fe04 	bl	8001b30 <__errno>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	425b      	negs	r3, r3
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	18d2      	adds	r2, r2, r3
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <_sbrk+0x64>)
 8000f44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b006      	add	sp, #24
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20008000 	.word	0x20008000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	20000194 	.word	0x20000194
 8000f5c:	200002e8 	.word	0x200002e8

08000f60 <__io_getchar>:
 *
 * Returns:
 * either received char or -1 if not
 */
int __io_getchar(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	char ch;
	if(cbfifo_dequeue(&fiforx, &ch, 1)==1)
 8000f66:	1df9      	adds	r1, r7, #7
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <__io_getchar+0x2c>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff f9cf 	bl	8000310 <cbfifo_dequeue>
 8000f72:	0003      	movs	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <__io_getchar+0x1e>
	{
		return ch;
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	e001      	b.n	8000f82 <__io_getchar+0x22>
	}
	else
	{
		return -1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	425b      	negs	r3, r3
	}
}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	20000108 	.word	0x20000108

08000f90 <__io_putchar>:
 *
 * Returns:
 *  either received 1 or -1(if transmission not successful)
 */
int __io_putchar(int ch)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	while (cbfifo_length(&fifotx) >= 127);
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <__io_putchar+0x48>)
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff f9ff 	bl	80003a0 <cbfifo_length>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	2b7e      	cmp	r3, #126	@ 0x7e
 8000fa6:	d8f8      	bhi.n	8000f9a <__io_putchar+0xa>
	if(cbfifo_enqueue(&fifotx,&ch,1)==1)
 8000fa8:	1d39      	adds	r1, r7, #4
 8000faa:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <__io_putchar+0x48>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff f95f 	bl	8000272 <cbfifo_enqueue>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d107      	bne.n	8000fca <__io_putchar+0x3a>
	{
		USART2->CR1 |= USART_CR1_TXEIE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <__io_putchar+0x4c>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <__io_putchar+0x4c>)
 8000fc0:	2180      	movs	r1, #128	@ 0x80
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]
		return 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e001      	b.n	8000fce <__io_putchar+0x3e>
	}
	else
	{
		return -1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	425b      	negs	r3, r3
	}
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	2000007c 	.word	0x2000007c
 8000fdc:	40004400 	.word	0x40004400

08000fe0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe0:	480e      	ldr	r0, [pc, #56]	@ (800101c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fe2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe4:	f000 f866 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	@ (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	@ (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	@ (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800100e:	f000 fd95 	bl	8001b3c <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 8001012:	f000 f895 	bl	8001140 <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 8001016:	f7ff fcd1 	bl	80009bc <main>

0800101a <LoopForever>:

LoopForever:
  b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   r0, =_estack
 800101c:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001028:	08002dec 	.word	0x08002dec
  ldr r2, =_sbss
 800102c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001030:	200002e4 	.word	0x200002e4

08001034 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_COMP_IRQHandler>
	...

08001038 <Set_Clocks_To_48MHz>:
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
 800103c:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <Set_Clocks_To_48MHz+0x70>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <Set_Clocks_To_48MHz+0x70>)
 8001042:	2101      	movs	r1, #1
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 800104a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 800104e:	2180      	movs	r1, #128	@ 0x80
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	430a      	orrs	r2, r1
 8001054:	635a      	str	r2, [r3, #52]	@ 0x34
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 800105a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	029b      	lsls	r3, r3, #10
 8001060:	4013      	ands	r3, r2
 8001062:	d0f9      	beq.n	8001058 <Set_Clocks_To_48MHz+0x20>
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 800106a:	21f0      	movs	r1, #240	@ 0xf0
 800106c:	438a      	bics	r2, r1
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 8001076:	2103      	movs	r1, #3
 8001078:	430a      	orrs	r2, r1
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	089a      	lsrs	r2, r3, #2
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4053      	eors	r3, r2
 800108a:	2203      	movs	r2, #3
 800108c:	4013      	ands	r3, r2
 800108e:	d1f6      	bne.n	800107e <Set_Clocks_To_48MHz+0x46>
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <Set_Clocks_To_48MHz+0x78>)
 8001096:	401a      	ands	r2, r3
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <Set_Clocks_To_48MHz+0x74>)
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	00c9      	lsls	r1, r1, #3
 800109e:	430a      	orrs	r2, r1
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40022000 	.word	0x40022000
 80010ac:	40021000 	.word	0x40021000
 80010b0:	fffff8ff 	.word	0xfffff8ff

080010b4 <SystemInit>:
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <SystemInit+0x74>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <SystemInit+0x74>)
 80010be:	2101      	movs	r1, #1
 80010c0:	430a      	orrs	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <SystemInit+0x74>)
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <SystemInit+0x74>)
 80010ca:	4918      	ldr	r1, [pc, #96]	@ (800112c <SystemInit+0x78>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <SystemInit+0x74>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <SystemInit+0x74>)
 80010d6:	4916      	ldr	r1, [pc, #88]	@ (8001130 <SystemInit+0x7c>)
 80010d8:	400a      	ands	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <SystemInit+0x74>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <SystemInit+0x74>)
 80010e2:	4914      	ldr	r1, [pc, #80]	@ (8001134 <SystemInit+0x80>)
 80010e4:	400a      	ands	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <SystemInit+0x74>)
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <SystemInit+0x74>)
 80010ee:	4912      	ldr	r1, [pc, #72]	@ (8001138 <SystemInit+0x84>)
 80010f0:	400a      	ands	r2, r1
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <SystemInit+0x74>)
 80010f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <SystemInit+0x74>)
 80010fa:	210f      	movs	r1, #15
 80010fc:	438a      	bics	r2, r1
 80010fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <SystemInit+0x74>)
 8001102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <SystemInit+0x74>)
 8001106:	490d      	ldr	r1, [pc, #52]	@ (800113c <SystemInit+0x88>)
 8001108:	400a      	ands	r2, r1
 800110a:	631a      	str	r2, [r3, #48]	@ 0x30
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x74>)
 800110e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SystemInit+0x74>)
 8001112:	2101      	movs	r1, #1
 8001114:	438a      	bics	r2, r1
 8001116:	635a      	str	r2, [r3, #52]	@ 0x34
 8001118:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <SystemInit+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	f7ff ff8b 	bl	8001038 <Set_Clocks_To_48MHz>
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000
 800112c:	08ffb80c 	.word	0x08ffb80c
 8001130:	fef6ffff 	.word	0xfef6ffff
 8001134:	fffbffff 	.word	0xfffbffff
 8001138:	ffc0ffff 	.word	0xffc0ffff
 800113c:	fff0feac 	.word	0xfff0feac

08001140 <SystemCoreClockUpdate>:
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <SystemCoreClockUpdate+0x10c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	220c      	movs	r2, #12
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b0c      	cmp	r3, #12
 8001164:	d00f      	beq.n	8001186 <SystemCoreClockUpdate+0x46>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d859      	bhi.n	8001220 <SystemCoreClockUpdate+0xe0>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b08      	cmp	r3, #8
 8001170:	d015      	beq.n	800119e <SystemCoreClockUpdate+0x5e>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b08      	cmp	r3, #8
 8001176:	d853      	bhi.n	8001220 <SystemCoreClockUpdate+0xe0>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <SystemCoreClockUpdate+0x4e>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d008      	beq.n	8001196 <SystemCoreClockUpdate+0x56>
 8001184:	e04c      	b.n	8001220 <SystemCoreClockUpdate+0xe0>
 8001186:	4b32      	ldr	r3, [pc, #200]	@ (8001250 <SystemCoreClockUpdate+0x110>)
 8001188:	4a32      	ldr	r2, [pc, #200]	@ (8001254 <SystemCoreClockUpdate+0x114>)
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e04c      	b.n	8001228 <SystemCoreClockUpdate+0xe8>
 800118e:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <SystemCoreClockUpdate+0x110>)
 8001190:	4a31      	ldr	r2, [pc, #196]	@ (8001258 <SystemCoreClockUpdate+0x118>)
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e048      	b.n	8001228 <SystemCoreClockUpdate+0xe8>
 8001196:	4b2e      	ldr	r3, [pc, #184]	@ (8001250 <SystemCoreClockUpdate+0x110>)
 8001198:	4a2f      	ldr	r2, [pc, #188]	@ (8001258 <SystemCoreClockUpdate+0x118>)
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e044      	b.n	8001228 <SystemCoreClockUpdate+0xe8>
 800119e:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <SystemCoreClockUpdate+0x10c>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	23f0      	movs	r3, #240	@ 0xf0
 80011a4:	039b      	lsls	r3, r3, #14
 80011a6:	4013      	ands	r3, r2
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b28      	ldr	r3, [pc, #160]	@ (800124c <SystemCoreClockUpdate+0x10c>)
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	23c0      	movs	r3, #192	@ 0xc0
 80011b0:	025b      	lsls	r3, r3, #9
 80011b2:	4013      	ands	r3, r2
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	0c9b      	lsrs	r3, r3, #18
 80011ba:	3302      	adds	r3, #2
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b23      	ldr	r3, [pc, #140]	@ (800124c <SystemCoreClockUpdate+0x10c>)
 80011c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c2:	220f      	movs	r2, #15
 80011c4:	4013      	ands	r3, r2
 80011c6:	3301      	adds	r3, #1
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	025b      	lsls	r3, r3, #9
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d10a      	bne.n	80011ea <SystemCoreClockUpdate+0xaa>
 80011d4:	6839      	ldr	r1, [r7, #0]
 80011d6:	4820      	ldr	r0, [pc, #128]	@ (8001258 <SystemCoreClockUpdate+0x118>)
 80011d8:	f7fe ffa8 	bl	800012c <__udivsi3>
 80011dc:	0003      	movs	r3, r0
 80011de:	001a      	movs	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	435a      	muls	r2, r3
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <SystemCoreClockUpdate+0x110>)
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e01e      	b.n	8001228 <SystemCoreClockUpdate+0xe8>
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	23c0      	movs	r3, #192	@ 0xc0
 80011ee:	025b      	lsls	r3, r3, #9
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d10a      	bne.n	800120a <SystemCoreClockUpdate+0xca>
 80011f4:	6839      	ldr	r1, [r7, #0]
 80011f6:	4817      	ldr	r0, [pc, #92]	@ (8001254 <SystemCoreClockUpdate+0x114>)
 80011f8:	f7fe ff98 	bl	800012c <__udivsi3>
 80011fc:	0003      	movs	r3, r0
 80011fe:	001a      	movs	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	435a      	muls	r2, r3
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <SystemCoreClockUpdate+0x110>)
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e00e      	b.n	8001228 <SystemCoreClockUpdate+0xe8>
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	4812      	ldr	r0, [pc, #72]	@ (8001258 <SystemCoreClockUpdate+0x118>)
 800120e:	f7fe ff8d 	bl	800012c <__udivsi3>
 8001212:	0003      	movs	r3, r0
 8001214:	001a      	movs	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	435a      	muls	r2, r3
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <SystemCoreClockUpdate+0x110>)
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e003      	b.n	8001228 <SystemCoreClockUpdate+0xe8>
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <SystemCoreClockUpdate+0x110>)
 8001222:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <SystemCoreClockUpdate+0x118>)
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <SystemCoreClockUpdate+0x10c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	220f      	movs	r2, #15
 8001230:	4013      	ands	r3, r2
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <SystemCoreClockUpdate+0x11c>)
 8001234:	5cd3      	ldrb	r3, [r2, r3]
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <SystemCoreClockUpdate+0x110>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	40da      	lsrs	r2, r3
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <SystemCoreClockUpdate+0x110>)
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b004      	add	sp, #16
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	20000000 	.word	0x20000000
 8001254:	02dc6c00 	.word	0x02dc6c00
 8001258:	007a1200 	.word	0x007a1200
 800125c:	08002bf0 	.word	0x08002bf0

08001260 <atoi>:
 8001260:	b510      	push	{r4, lr}
 8001262:	220a      	movs	r2, #10
 8001264:	2100      	movs	r1, #0
 8001266:	f000 f88b 	bl	8001380 <strtol>
 800126a:	bd10      	pop	{r4, pc}

0800126c <_strtol_l.constprop.0>:
 800126c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	0017      	movs	r7, r2
 8001272:	001e      	movs	r6, r3
 8001274:	9003      	str	r0, [sp, #12]
 8001276:	9101      	str	r1, [sp, #4]
 8001278:	2b24      	cmp	r3, #36	@ 0x24
 800127a:	d844      	bhi.n	8001306 <_strtol_l.constprop.0+0x9a>
 800127c:	000c      	movs	r4, r1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d041      	beq.n	8001306 <_strtol_l.constprop.0+0x9a>
 8001282:	4b3d      	ldr	r3, [pc, #244]	@ (8001378 <_strtol_l.constprop.0+0x10c>)
 8001284:	2208      	movs	r2, #8
 8001286:	469c      	mov	ip, r3
 8001288:	0023      	movs	r3, r4
 800128a:	4661      	mov	r1, ip
 800128c:	781d      	ldrb	r5, [r3, #0]
 800128e:	3401      	adds	r4, #1
 8001290:	5d48      	ldrb	r0, [r1, r5]
 8001292:	0001      	movs	r1, r0
 8001294:	4011      	ands	r1, r2
 8001296:	4210      	tst	r0, r2
 8001298:	d1f6      	bne.n	8001288 <_strtol_l.constprop.0+0x1c>
 800129a:	2d2d      	cmp	r5, #45	@ 0x2d
 800129c:	d13a      	bne.n	8001314 <_strtol_l.constprop.0+0xa8>
 800129e:	7825      	ldrb	r5, [r4, #0]
 80012a0:	1c9c      	adds	r4, r3, #2
 80012a2:	2301      	movs	r3, #1
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2210      	movs	r2, #16
 80012a8:	0033      	movs	r3, r6
 80012aa:	4393      	bics	r3, r2
 80012ac:	d109      	bne.n	80012c2 <_strtol_l.constprop.0+0x56>
 80012ae:	2d30      	cmp	r5, #48	@ 0x30
 80012b0:	d136      	bne.n	8001320 <_strtol_l.constprop.0+0xb4>
 80012b2:	2120      	movs	r1, #32
 80012b4:	7823      	ldrb	r3, [r4, #0]
 80012b6:	438b      	bics	r3, r1
 80012b8:	2b58      	cmp	r3, #88	@ 0x58
 80012ba:	d131      	bne.n	8001320 <_strtol_l.constprop.0+0xb4>
 80012bc:	0016      	movs	r6, r2
 80012be:	7865      	ldrb	r5, [r4, #1]
 80012c0:	3402      	adds	r4, #2
 80012c2:	4a2e      	ldr	r2, [pc, #184]	@ (800137c <_strtol_l.constprop.0+0x110>)
 80012c4:	9b00      	ldr	r3, [sp, #0]
 80012c6:	4694      	mov	ip, r2
 80012c8:	4463      	add	r3, ip
 80012ca:	0031      	movs	r1, r6
 80012cc:	0018      	movs	r0, r3
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	f7fe ffb2 	bl	8000238 <__aeabi_uidivmod>
 80012d4:	2200      	movs	r2, #0
 80012d6:	4684      	mov	ip, r0
 80012d8:	0010      	movs	r0, r2
 80012da:	002b      	movs	r3, r5
 80012dc:	3b30      	subs	r3, #48	@ 0x30
 80012de:	2b09      	cmp	r3, #9
 80012e0:	d825      	bhi.n	800132e <_strtol_l.constprop.0+0xc2>
 80012e2:	001d      	movs	r5, r3
 80012e4:	42ae      	cmp	r6, r5
 80012e6:	dd31      	ble.n	800134c <_strtol_l.constprop.0+0xe0>
 80012e8:	1c53      	adds	r3, r2, #1
 80012ea:	d009      	beq.n	8001300 <_strtol_l.constprop.0+0x94>
 80012ec:	2201      	movs	r2, #1
 80012ee:	4252      	negs	r2, r2
 80012f0:	4584      	cmp	ip, r0
 80012f2:	d305      	bcc.n	8001300 <_strtol_l.constprop.0+0x94>
 80012f4:	d101      	bne.n	80012fa <_strtol_l.constprop.0+0x8e>
 80012f6:	42a9      	cmp	r1, r5
 80012f8:	db25      	blt.n	8001346 <_strtol_l.constprop.0+0xda>
 80012fa:	2201      	movs	r2, #1
 80012fc:	4370      	muls	r0, r6
 80012fe:	1828      	adds	r0, r5, r0
 8001300:	7825      	ldrb	r5, [r4, #0]
 8001302:	3401      	adds	r4, #1
 8001304:	e7e9      	b.n	80012da <_strtol_l.constprop.0+0x6e>
 8001306:	f000 fc13 	bl	8001b30 <__errno>
 800130a:	2316      	movs	r3, #22
 800130c:	6003      	str	r3, [r0, #0]
 800130e:	2000      	movs	r0, #0
 8001310:	b005      	add	sp, #20
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	9100      	str	r1, [sp, #0]
 8001316:	2d2b      	cmp	r5, #43	@ 0x2b
 8001318:	d1c5      	bne.n	80012a6 <_strtol_l.constprop.0+0x3a>
 800131a:	7825      	ldrb	r5, [r4, #0]
 800131c:	1c9c      	adds	r4, r3, #2
 800131e:	e7c2      	b.n	80012a6 <_strtol_l.constprop.0+0x3a>
 8001320:	2e00      	cmp	r6, #0
 8001322:	d1ce      	bne.n	80012c2 <_strtol_l.constprop.0+0x56>
 8001324:	3608      	adds	r6, #8
 8001326:	2d30      	cmp	r5, #48	@ 0x30
 8001328:	d0cb      	beq.n	80012c2 <_strtol_l.constprop.0+0x56>
 800132a:	3602      	adds	r6, #2
 800132c:	e7c9      	b.n	80012c2 <_strtol_l.constprop.0+0x56>
 800132e:	002b      	movs	r3, r5
 8001330:	3b41      	subs	r3, #65	@ 0x41
 8001332:	2b19      	cmp	r3, #25
 8001334:	d801      	bhi.n	800133a <_strtol_l.constprop.0+0xce>
 8001336:	3d37      	subs	r5, #55	@ 0x37
 8001338:	e7d4      	b.n	80012e4 <_strtol_l.constprop.0+0x78>
 800133a:	002b      	movs	r3, r5
 800133c:	3b61      	subs	r3, #97	@ 0x61
 800133e:	2b19      	cmp	r3, #25
 8001340:	d804      	bhi.n	800134c <_strtol_l.constprop.0+0xe0>
 8001342:	3d57      	subs	r5, #87	@ 0x57
 8001344:	e7ce      	b.n	80012e4 <_strtol_l.constprop.0+0x78>
 8001346:	2201      	movs	r2, #1
 8001348:	4252      	negs	r2, r2
 800134a:	e7d9      	b.n	8001300 <_strtol_l.constprop.0+0x94>
 800134c:	1c53      	adds	r3, r2, #1
 800134e:	d108      	bne.n	8001362 <_strtol_l.constprop.0+0xf6>
 8001350:	2322      	movs	r3, #34	@ 0x22
 8001352:	9a03      	ldr	r2, [sp, #12]
 8001354:	9802      	ldr	r0, [sp, #8]
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	2f00      	cmp	r7, #0
 800135a:	d0d9      	beq.n	8001310 <_strtol_l.constprop.0+0xa4>
 800135c:	1e63      	subs	r3, r4, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	e007      	b.n	8001372 <_strtol_l.constprop.0+0x106>
 8001362:	9b00      	ldr	r3, [sp, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d000      	beq.n	800136a <_strtol_l.constprop.0+0xfe>
 8001368:	4240      	negs	r0, r0
 800136a:	2f00      	cmp	r7, #0
 800136c:	d0d0      	beq.n	8001310 <_strtol_l.constprop.0+0xa4>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d1f4      	bne.n	800135c <_strtol_l.constprop.0+0xf0>
 8001372:	9b01      	ldr	r3, [sp, #4]
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	e7cb      	b.n	8001310 <_strtol_l.constprop.0+0xa4>
 8001378:	08002c01 	.word	0x08002c01
 800137c:	7fffffff 	.word	0x7fffffff

08001380 <strtol>:
 8001380:	b510      	push	{r4, lr}
 8001382:	4c04      	ldr	r4, [pc, #16]	@ (8001394 <strtol+0x14>)
 8001384:	0013      	movs	r3, r2
 8001386:	000a      	movs	r2, r1
 8001388:	0001      	movs	r1, r0
 800138a:	6820      	ldr	r0, [r4, #0]
 800138c:	f7ff ff6e 	bl	800126c <_strtol_l.constprop.0>
 8001390:	bd10      	pop	{r4, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	20000010 	.word	0x20000010

08001398 <std>:
 8001398:	2300      	movs	r3, #0
 800139a:	b510      	push	{r4, lr}
 800139c:	0004      	movs	r4, r0
 800139e:	6003      	str	r3, [r0, #0]
 80013a0:	6043      	str	r3, [r0, #4]
 80013a2:	6083      	str	r3, [r0, #8]
 80013a4:	8181      	strh	r1, [r0, #12]
 80013a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80013a8:	81c2      	strh	r2, [r0, #14]
 80013aa:	6103      	str	r3, [r0, #16]
 80013ac:	6143      	str	r3, [r0, #20]
 80013ae:	6183      	str	r3, [r0, #24]
 80013b0:	0019      	movs	r1, r3
 80013b2:	2208      	movs	r2, #8
 80013b4:	305c      	adds	r0, #92	@ 0x5c
 80013b6:	f000 fad9 	bl	800196c <memset>
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <std+0x50>)
 80013bc:	6224      	str	r4, [r4, #32]
 80013be:	6263      	str	r3, [r4, #36]	@ 0x24
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <std+0x54>)
 80013c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <std+0x58>)
 80013c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <std+0x5c>)
 80013ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80013cc:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <std+0x60>)
 80013ce:	429c      	cmp	r4, r3
 80013d0:	d005      	beq.n	80013de <std+0x46>
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <std+0x64>)
 80013d4:	429c      	cmp	r4, r3
 80013d6:	d002      	beq.n	80013de <std+0x46>
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <std+0x68>)
 80013da:	429c      	cmp	r4, r3
 80013dc:	d103      	bne.n	80013e6 <std+0x4e>
 80013de:	0020      	movs	r0, r4
 80013e0:	3058      	adds	r0, #88	@ 0x58
 80013e2:	f000 fbcf 	bl	8001b84 <__retarget_lock_init_recursive>
 80013e6:	bd10      	pop	{r4, pc}
 80013e8:	08001795 	.word	0x08001795
 80013ec:	080017bd 	.word	0x080017bd
 80013f0:	080017f5 	.word	0x080017f5
 80013f4:	08001821 	.word	0x08001821
 80013f8:	20000198 	.word	0x20000198
 80013fc:	20000200 	.word	0x20000200
 8001400:	20000268 	.word	0x20000268

08001404 <stdio_exit_handler>:
 8001404:	b510      	push	{r4, lr}
 8001406:	4a03      	ldr	r2, [pc, #12]	@ (8001414 <stdio_exit_handler+0x10>)
 8001408:	4903      	ldr	r1, [pc, #12]	@ (8001418 <stdio_exit_handler+0x14>)
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <stdio_exit_handler+0x18>)
 800140c:	f000 f86c 	bl	80014e8 <_fwalk_sglue>
 8001410:	bd10      	pop	{r4, pc}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	20000004 	.word	0x20000004
 8001418:	08002465 	.word	0x08002465
 800141c:	20000014 	.word	0x20000014

08001420 <cleanup_stdio>:
 8001420:	6841      	ldr	r1, [r0, #4]
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <cleanup_stdio+0x30>)
 8001424:	b510      	push	{r4, lr}
 8001426:	0004      	movs	r4, r0
 8001428:	4299      	cmp	r1, r3
 800142a:	d001      	beq.n	8001430 <cleanup_stdio+0x10>
 800142c:	f001 f81a 	bl	8002464 <_fflush_r>
 8001430:	68a1      	ldr	r1, [r4, #8]
 8001432:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <cleanup_stdio+0x34>)
 8001434:	4299      	cmp	r1, r3
 8001436:	d002      	beq.n	800143e <cleanup_stdio+0x1e>
 8001438:	0020      	movs	r0, r4
 800143a:	f001 f813 	bl	8002464 <_fflush_r>
 800143e:	68e1      	ldr	r1, [r4, #12]
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <cleanup_stdio+0x38>)
 8001442:	4299      	cmp	r1, r3
 8001444:	d002      	beq.n	800144c <cleanup_stdio+0x2c>
 8001446:	0020      	movs	r0, r4
 8001448:	f001 f80c 	bl	8002464 <_fflush_r>
 800144c:	bd10      	pop	{r4, pc}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	20000198 	.word	0x20000198
 8001454:	20000200 	.word	0x20000200
 8001458:	20000268 	.word	0x20000268

0800145c <global_stdio_init.part.0>:
 800145c:	b510      	push	{r4, lr}
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <global_stdio_init.part.0+0x28>)
 8001460:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <global_stdio_init.part.0+0x2c>)
 8001462:	2104      	movs	r1, #4
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	4809      	ldr	r0, [pc, #36]	@ (800148c <global_stdio_init.part.0+0x30>)
 8001468:	2200      	movs	r2, #0
 800146a:	f7ff ff95 	bl	8001398 <std>
 800146e:	2201      	movs	r2, #1
 8001470:	2109      	movs	r1, #9
 8001472:	4807      	ldr	r0, [pc, #28]	@ (8001490 <global_stdio_init.part.0+0x34>)
 8001474:	f7ff ff90 	bl	8001398 <std>
 8001478:	2202      	movs	r2, #2
 800147a:	2112      	movs	r1, #18
 800147c:	4805      	ldr	r0, [pc, #20]	@ (8001494 <global_stdio_init.part.0+0x38>)
 800147e:	f7ff ff8b 	bl	8001398 <std>
 8001482:	bd10      	pop	{r4, pc}
 8001484:	200002d0 	.word	0x200002d0
 8001488:	08001405 	.word	0x08001405
 800148c:	20000198 	.word	0x20000198
 8001490:	20000200 	.word	0x20000200
 8001494:	20000268 	.word	0x20000268

08001498 <__sfp_lock_acquire>:
 8001498:	b510      	push	{r4, lr}
 800149a:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <__sfp_lock_acquire+0xc>)
 800149c:	f000 fb73 	bl	8001b86 <__retarget_lock_acquire_recursive>
 80014a0:	bd10      	pop	{r4, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	200002d9 	.word	0x200002d9

080014a8 <__sfp_lock_release>:
 80014a8:	b510      	push	{r4, lr}
 80014aa:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <__sfp_lock_release+0xc>)
 80014ac:	f000 fb6c 	bl	8001b88 <__retarget_lock_release_recursive>
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	200002d9 	.word	0x200002d9

080014b8 <__sinit>:
 80014b8:	b510      	push	{r4, lr}
 80014ba:	0004      	movs	r4, r0
 80014bc:	f7ff ffec 	bl	8001498 <__sfp_lock_acquire>
 80014c0:	6a23      	ldr	r3, [r4, #32]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <__sinit+0x14>
 80014c6:	f7ff ffef 	bl	80014a8 <__sfp_lock_release>
 80014ca:	bd10      	pop	{r4, pc}
 80014cc:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <__sinit+0x28>)
 80014ce:	6223      	str	r3, [r4, #32]
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <__sinit+0x2c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f6      	bne.n	80014c6 <__sinit+0xe>
 80014d8:	f7ff ffc0 	bl	800145c <global_stdio_init.part.0>
 80014dc:	e7f3      	b.n	80014c6 <__sinit+0xe>
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	08001421 	.word	0x08001421
 80014e4:	200002d0 	.word	0x200002d0

080014e8 <_fwalk_sglue>:
 80014e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014ea:	0014      	movs	r4, r2
 80014ec:	2600      	movs	r6, #0
 80014ee:	9000      	str	r0, [sp, #0]
 80014f0:	9101      	str	r1, [sp, #4]
 80014f2:	68a5      	ldr	r5, [r4, #8]
 80014f4:	6867      	ldr	r7, [r4, #4]
 80014f6:	3f01      	subs	r7, #1
 80014f8:	d504      	bpl.n	8001504 <_fwalk_sglue+0x1c>
 80014fa:	6824      	ldr	r4, [r4, #0]
 80014fc:	2c00      	cmp	r4, #0
 80014fe:	d1f8      	bne.n	80014f2 <_fwalk_sglue+0xa>
 8001500:	0030      	movs	r0, r6
 8001502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001504:	89ab      	ldrh	r3, [r5, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d908      	bls.n	800151c <_fwalk_sglue+0x34>
 800150a:	220e      	movs	r2, #14
 800150c:	5eab      	ldrsh	r3, [r5, r2]
 800150e:	3301      	adds	r3, #1
 8001510:	d004      	beq.n	800151c <_fwalk_sglue+0x34>
 8001512:	0029      	movs	r1, r5
 8001514:	9800      	ldr	r0, [sp, #0]
 8001516:	9b01      	ldr	r3, [sp, #4]
 8001518:	4798      	blx	r3
 800151a:	4306      	orrs	r6, r0
 800151c:	3568      	adds	r5, #104	@ 0x68
 800151e:	e7ea      	b.n	80014f6 <_fwalk_sglue+0xe>

08001520 <getchar>:
 8001520:	b510      	push	{r4, lr}
 8001522:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <getchar+0x10>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	6841      	ldr	r1, [r0, #4]
 8001528:	f000 ffd8 	bl	80024dc <_getc_r>
 800152c:	bd10      	pop	{r4, pc}
 800152e:	46c0      	nop			@ (mov r8, r8)
 8001530:	20000010 	.word	0x20000010

08001534 <iprintf>:
 8001534:	b40f      	push	{r0, r1, r2, r3}
 8001536:	b507      	push	{r0, r1, r2, lr}
 8001538:	4905      	ldr	r1, [pc, #20]	@ (8001550 <iprintf+0x1c>)
 800153a:	ab04      	add	r3, sp, #16
 800153c:	6808      	ldr	r0, [r1, #0]
 800153e:	cb04      	ldmia	r3!, {r2}
 8001540:	6881      	ldr	r1, [r0, #8]
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	f000 fc6e 	bl	8001e24 <_vfiprintf_r>
 8001548:	b003      	add	sp, #12
 800154a:	bc08      	pop	{r3}
 800154c:	b004      	add	sp, #16
 800154e:	4718      	bx	r3
 8001550:	20000010 	.word	0x20000010

08001554 <putchar>:
 8001554:	b510      	push	{r4, lr}
 8001556:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <putchar+0x10>)
 8001558:	0001      	movs	r1, r0
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	6882      	ldr	r2, [r0, #8]
 800155e:	f001 f856 	bl	800260e <_putc_r>
 8001562:	bd10      	pop	{r4, pc}
 8001564:	20000010 	.word	0x20000010

08001568 <_puts_r>:
 8001568:	6a03      	ldr	r3, [r0, #32]
 800156a:	b570      	push	{r4, r5, r6, lr}
 800156c:	0005      	movs	r5, r0
 800156e:	000e      	movs	r6, r1
 8001570:	6884      	ldr	r4, [r0, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <_puts_r+0x12>
 8001576:	f7ff ff9f 	bl	80014b8 <__sinit>
 800157a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800157c:	07db      	lsls	r3, r3, #31
 800157e:	d405      	bmi.n	800158c <_puts_r+0x24>
 8001580:	89a3      	ldrh	r3, [r4, #12]
 8001582:	059b      	lsls	r3, r3, #22
 8001584:	d402      	bmi.n	800158c <_puts_r+0x24>
 8001586:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001588:	f000 fafd 	bl	8001b86 <__retarget_lock_acquire_recursive>
 800158c:	89a3      	ldrh	r3, [r4, #12]
 800158e:	071b      	lsls	r3, r3, #28
 8001590:	d502      	bpl.n	8001598 <_puts_r+0x30>
 8001592:	6923      	ldr	r3, [r4, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d11f      	bne.n	80015d8 <_puts_r+0x70>
 8001598:	0021      	movs	r1, r4
 800159a:	0028      	movs	r0, r5
 800159c:	f000 f988 	bl	80018b0 <__swsetup_r>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d019      	beq.n	80015d8 <_puts_r+0x70>
 80015a4:	2501      	movs	r5, #1
 80015a6:	426d      	negs	r5, r5
 80015a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015aa:	07db      	lsls	r3, r3, #31
 80015ac:	d405      	bmi.n	80015ba <_puts_r+0x52>
 80015ae:	89a3      	ldrh	r3, [r4, #12]
 80015b0:	059b      	lsls	r3, r3, #22
 80015b2:	d402      	bmi.n	80015ba <_puts_r+0x52>
 80015b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015b6:	f000 fae7 	bl	8001b88 <__retarget_lock_release_recursive>
 80015ba:	0028      	movs	r0, r5
 80015bc:	bd70      	pop	{r4, r5, r6, pc}
 80015be:	3601      	adds	r6, #1
 80015c0:	60a3      	str	r3, [r4, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	da04      	bge.n	80015d0 <_puts_r+0x68>
 80015c6:	69a2      	ldr	r2, [r4, #24]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dc16      	bgt.n	80015fa <_puts_r+0x92>
 80015cc:	290a      	cmp	r1, #10
 80015ce:	d014      	beq.n	80015fa <_puts_r+0x92>
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	6022      	str	r2, [r4, #0]
 80015d6:	7019      	strb	r1, [r3, #0]
 80015d8:	68a3      	ldr	r3, [r4, #8]
 80015da:	7831      	ldrb	r1, [r6, #0]
 80015dc:	3b01      	subs	r3, #1
 80015de:	2900      	cmp	r1, #0
 80015e0:	d1ed      	bne.n	80015be <_puts_r+0x56>
 80015e2:	60a3      	str	r3, [r4, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da0f      	bge.n	8001608 <_puts_r+0xa0>
 80015e8:	0022      	movs	r2, r4
 80015ea:	0028      	movs	r0, r5
 80015ec:	310a      	adds	r1, #10
 80015ee:	f000 f91d 	bl	800182c <__swbuf_r>
 80015f2:	3001      	adds	r0, #1
 80015f4:	d0d6      	beq.n	80015a4 <_puts_r+0x3c>
 80015f6:	250a      	movs	r5, #10
 80015f8:	e7d6      	b.n	80015a8 <_puts_r+0x40>
 80015fa:	0022      	movs	r2, r4
 80015fc:	0028      	movs	r0, r5
 80015fe:	f000 f915 	bl	800182c <__swbuf_r>
 8001602:	3001      	adds	r0, #1
 8001604:	d1e8      	bne.n	80015d8 <_puts_r+0x70>
 8001606:	e7cd      	b.n	80015a4 <_puts_r+0x3c>
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	6022      	str	r2, [r4, #0]
 800160e:	220a      	movs	r2, #10
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e7f0      	b.n	80015f6 <_puts_r+0x8e>

08001614 <puts>:
 8001614:	b510      	push	{r4, lr}
 8001616:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <puts+0x10>)
 8001618:	0001      	movs	r1, r0
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	f7ff ffa4 	bl	8001568 <_puts_r>
 8001620:	bd10      	pop	{r4, pc}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	20000010 	.word	0x20000010

08001628 <setvbuf>:
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	001d      	movs	r5, r3
 800162c:	4b57      	ldr	r3, [pc, #348]	@ (800178c <setvbuf+0x164>)
 800162e:	b085      	sub	sp, #20
 8001630:	681e      	ldr	r6, [r3, #0]
 8001632:	0004      	movs	r4, r0
 8001634:	000f      	movs	r7, r1
 8001636:	9200      	str	r2, [sp, #0]
 8001638:	2e00      	cmp	r6, #0
 800163a:	d005      	beq.n	8001648 <setvbuf+0x20>
 800163c:	6a33      	ldr	r3, [r6, #32]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <setvbuf+0x20>
 8001642:	0030      	movs	r0, r6
 8001644:	f7ff ff38 	bl	80014b8 <__sinit>
 8001648:	9b00      	ldr	r3, [sp, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d005      	beq.n	800165a <setvbuf+0x32>
 800164e:	2b01      	cmp	r3, #1
 8001650:	d900      	bls.n	8001654 <setvbuf+0x2c>
 8001652:	e097      	b.n	8001784 <setvbuf+0x15c>
 8001654:	2d00      	cmp	r5, #0
 8001656:	da00      	bge.n	800165a <setvbuf+0x32>
 8001658:	e094      	b.n	8001784 <setvbuf+0x15c>
 800165a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800165c:	07db      	lsls	r3, r3, #31
 800165e:	d405      	bmi.n	800166c <setvbuf+0x44>
 8001660:	89a3      	ldrh	r3, [r4, #12]
 8001662:	059b      	lsls	r3, r3, #22
 8001664:	d402      	bmi.n	800166c <setvbuf+0x44>
 8001666:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001668:	f000 fa8d 	bl	8001b86 <__retarget_lock_acquire_recursive>
 800166c:	0021      	movs	r1, r4
 800166e:	0030      	movs	r0, r6
 8001670:	f000 fef8 	bl	8002464 <_fflush_r>
 8001674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001676:	2900      	cmp	r1, #0
 8001678:	d008      	beq.n	800168c <setvbuf+0x64>
 800167a:	0023      	movs	r3, r4
 800167c:	3344      	adds	r3, #68	@ 0x44
 800167e:	4299      	cmp	r1, r3
 8001680:	d002      	beq.n	8001688 <setvbuf+0x60>
 8001682:	0030      	movs	r0, r6
 8001684:	f000 faa0 	bl	8001bc8 <_free_r>
 8001688:	2300      	movs	r3, #0
 800168a:	6363      	str	r3, [r4, #52]	@ 0x34
 800168c:	2300      	movs	r3, #0
 800168e:	61a3      	str	r3, [r4, #24]
 8001690:	6063      	str	r3, [r4, #4]
 8001692:	89a3      	ldrh	r3, [r4, #12]
 8001694:	061b      	lsls	r3, r3, #24
 8001696:	d503      	bpl.n	80016a0 <setvbuf+0x78>
 8001698:	0030      	movs	r0, r6
 800169a:	6921      	ldr	r1, [r4, #16]
 800169c:	f000 fa94 	bl	8001bc8 <_free_r>
 80016a0:	89a3      	ldrh	r3, [r4, #12]
 80016a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001790 <setvbuf+0x168>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	81a3      	strh	r3, [r4, #12]
 80016a8:	9b00      	ldr	r3, [sp, #0]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d060      	beq.n	8001770 <setvbuf+0x148>
 80016ae:	ab03      	add	r3, sp, #12
 80016b0:	0021      	movs	r1, r4
 80016b2:	0030      	movs	r0, r6
 80016b4:	aa02      	add	r2, sp, #8
 80016b6:	f000 ff3f 	bl	8002538 <__swhatbuf_r>
 80016ba:	89a3      	ldrh	r3, [r4, #12]
 80016bc:	4303      	orrs	r3, r0
 80016be:	81a3      	strh	r3, [r4, #12]
 80016c0:	2d00      	cmp	r5, #0
 80016c2:	d124      	bne.n	800170e <setvbuf+0xe6>
 80016c4:	9d02      	ldr	r5, [sp, #8]
 80016c6:	0028      	movs	r0, r5
 80016c8:	f000 fac8 	bl	8001c5c <malloc>
 80016cc:	9501      	str	r5, [sp, #4]
 80016ce:	1e07      	subs	r7, r0, #0
 80016d0:	d148      	bne.n	8001764 <setvbuf+0x13c>
 80016d2:	9b02      	ldr	r3, [sp, #8]
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	42ab      	cmp	r3, r5
 80016d8:	d13f      	bne.n	800175a <setvbuf+0x132>
 80016da:	2501      	movs	r5, #1
 80016dc:	426d      	negs	r5, r5
 80016de:	220c      	movs	r2, #12
 80016e0:	5ea3      	ldrsh	r3, [r4, r2]
 80016e2:	2202      	movs	r2, #2
 80016e4:	431a      	orrs	r2, r3
 80016e6:	81a2      	strh	r2, [r4, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	60a2      	str	r2, [r4, #8]
 80016ec:	0022      	movs	r2, r4
 80016ee:	3247      	adds	r2, #71	@ 0x47
 80016f0:	6022      	str	r2, [r4, #0]
 80016f2:	6122      	str	r2, [r4, #16]
 80016f4:	2201      	movs	r2, #1
 80016f6:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80016f8:	6162      	str	r2, [r4, #20]
 80016fa:	4211      	tst	r1, r2
 80016fc:	d104      	bne.n	8001708 <setvbuf+0xe0>
 80016fe:	059b      	lsls	r3, r3, #22
 8001700:	d402      	bmi.n	8001708 <setvbuf+0xe0>
 8001702:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001704:	f000 fa40 	bl	8001b88 <__retarget_lock_release_recursive>
 8001708:	0028      	movs	r0, r5
 800170a:	b005      	add	sp, #20
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	2f00      	cmp	r7, #0
 8001710:	d0d9      	beq.n	80016c6 <setvbuf+0x9e>
 8001712:	6a33      	ldr	r3, [r6, #32]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <setvbuf+0xf6>
 8001718:	0030      	movs	r0, r6
 800171a:	f7ff fecd 	bl	80014b8 <__sinit>
 800171e:	9b00      	ldr	r3, [sp, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d103      	bne.n	800172c <setvbuf+0x104>
 8001724:	89a3      	ldrh	r3, [r4, #12]
 8001726:	9a00      	ldr	r2, [sp, #0]
 8001728:	431a      	orrs	r2, r3
 800172a:	81a2      	strh	r2, [r4, #12]
 800172c:	220c      	movs	r2, #12
 800172e:	5ea3      	ldrsh	r3, [r4, r2]
 8001730:	2208      	movs	r2, #8
 8001732:	0019      	movs	r1, r3
 8001734:	6027      	str	r7, [r4, #0]
 8001736:	6127      	str	r7, [r4, #16]
 8001738:	6165      	str	r5, [r4, #20]
 800173a:	4011      	ands	r1, r2
 800173c:	4213      	tst	r3, r2
 800173e:	d01b      	beq.n	8001778 <setvbuf+0x150>
 8001740:	07da      	lsls	r2, r3, #31
 8001742:	d517      	bpl.n	8001774 <setvbuf+0x14c>
 8001744:	2200      	movs	r2, #0
 8001746:	426d      	negs	r5, r5
 8001748:	60a2      	str	r2, [r4, #8]
 800174a:	61a5      	str	r5, [r4, #24]
 800174c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800174e:	07d2      	lsls	r2, r2, #31
 8001750:	d401      	bmi.n	8001756 <setvbuf+0x12e>
 8001752:	059b      	lsls	r3, r3, #22
 8001754:	d512      	bpl.n	800177c <setvbuf+0x154>
 8001756:	2500      	movs	r5, #0
 8001758:	e7d6      	b.n	8001708 <setvbuf+0xe0>
 800175a:	9801      	ldr	r0, [sp, #4]
 800175c:	f000 fa7e 	bl	8001c5c <malloc>
 8001760:	1e07      	subs	r7, r0, #0
 8001762:	d0ba      	beq.n	80016da <setvbuf+0xb2>
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	89a2      	ldrh	r2, [r4, #12]
 8001768:	9d01      	ldr	r5, [sp, #4]
 800176a:	4313      	orrs	r3, r2
 800176c:	81a3      	strh	r3, [r4, #12]
 800176e:	e7d0      	b.n	8001712 <setvbuf+0xea>
 8001770:	2500      	movs	r5, #0
 8001772:	e7b4      	b.n	80016de <setvbuf+0xb6>
 8001774:	60a5      	str	r5, [r4, #8]
 8001776:	e7e9      	b.n	800174c <setvbuf+0x124>
 8001778:	60a1      	str	r1, [r4, #8]
 800177a:	e7e7      	b.n	800174c <setvbuf+0x124>
 800177c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800177e:	f000 fa03 	bl	8001b88 <__retarget_lock_release_recursive>
 8001782:	e7e8      	b.n	8001756 <setvbuf+0x12e>
 8001784:	2501      	movs	r5, #1
 8001786:	426d      	negs	r5, r5
 8001788:	e7be      	b.n	8001708 <setvbuf+0xe0>
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	20000010 	.word	0x20000010
 8001790:	fffff35c 	.word	0xfffff35c

08001794 <__sread>:
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	000c      	movs	r4, r1
 8001798:	250e      	movs	r5, #14
 800179a:	5f49      	ldrsh	r1, [r1, r5]
 800179c:	f000 f9a0 	bl	8001ae0 <_read_r>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	db03      	blt.n	80017ac <__sread+0x18>
 80017a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017a6:	181b      	adds	r3, r3, r0
 80017a8:	6563      	str	r3, [r4, #84]	@ 0x54
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	89a3      	ldrh	r3, [r4, #12]
 80017ae:	4a02      	ldr	r2, [pc, #8]	@ (80017b8 <__sread+0x24>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	81a3      	strh	r3, [r4, #12]
 80017b4:	e7f9      	b.n	80017aa <__sread+0x16>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	ffffefff 	.word	0xffffefff

080017bc <__swrite>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	001f      	movs	r7, r3
 80017c0:	898b      	ldrh	r3, [r1, #12]
 80017c2:	0005      	movs	r5, r0
 80017c4:	000c      	movs	r4, r1
 80017c6:	0016      	movs	r6, r2
 80017c8:	05db      	lsls	r3, r3, #23
 80017ca:	d505      	bpl.n	80017d8 <__swrite+0x1c>
 80017cc:	230e      	movs	r3, #14
 80017ce:	5ec9      	ldrsh	r1, [r1, r3]
 80017d0:	2200      	movs	r2, #0
 80017d2:	2302      	movs	r3, #2
 80017d4:	f000 f970 	bl	8001ab8 <_lseek_r>
 80017d8:	89a3      	ldrh	r3, [r4, #12]
 80017da:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <__swrite+0x34>)
 80017dc:	0028      	movs	r0, r5
 80017de:	4013      	ands	r3, r2
 80017e0:	81a3      	strh	r3, [r4, #12]
 80017e2:	0032      	movs	r2, r6
 80017e4:	230e      	movs	r3, #14
 80017e6:	5ee1      	ldrsh	r1, [r4, r3]
 80017e8:	003b      	movs	r3, r7
 80017ea:	f000 f98d 	bl	8001b08 <_write_r>
 80017ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017f0:	ffffefff 	.word	0xffffefff

080017f4 <__sseek>:
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	000c      	movs	r4, r1
 80017f8:	250e      	movs	r5, #14
 80017fa:	5f49      	ldrsh	r1, [r1, r5]
 80017fc:	f000 f95c 	bl	8001ab8 <_lseek_r>
 8001800:	89a3      	ldrh	r3, [r4, #12]
 8001802:	1c42      	adds	r2, r0, #1
 8001804:	d103      	bne.n	800180e <__sseek+0x1a>
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <__sseek+0x28>)
 8001808:	4013      	ands	r3, r2
 800180a:	81a3      	strh	r3, [r4, #12]
 800180c:	bd70      	pop	{r4, r5, r6, pc}
 800180e:	2280      	movs	r2, #128	@ 0x80
 8001810:	0152      	lsls	r2, r2, #5
 8001812:	4313      	orrs	r3, r2
 8001814:	81a3      	strh	r3, [r4, #12]
 8001816:	6560      	str	r0, [r4, #84]	@ 0x54
 8001818:	e7f8      	b.n	800180c <__sseek+0x18>
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	ffffefff 	.word	0xffffefff

08001820 <__sclose>:
 8001820:	b510      	push	{r4, lr}
 8001822:	230e      	movs	r3, #14
 8001824:	5ec9      	ldrsh	r1, [r1, r3]
 8001826:	f000 f935 	bl	8001a94 <_close_r>
 800182a:	bd10      	pop	{r4, pc}

0800182c <__swbuf_r>:
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	0006      	movs	r6, r0
 8001830:	000d      	movs	r5, r1
 8001832:	0014      	movs	r4, r2
 8001834:	2800      	cmp	r0, #0
 8001836:	d004      	beq.n	8001842 <__swbuf_r+0x16>
 8001838:	6a03      	ldr	r3, [r0, #32]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <__swbuf_r+0x16>
 800183e:	f7ff fe3b 	bl	80014b8 <__sinit>
 8001842:	69a3      	ldr	r3, [r4, #24]
 8001844:	60a3      	str	r3, [r4, #8]
 8001846:	89a3      	ldrh	r3, [r4, #12]
 8001848:	071b      	lsls	r3, r3, #28
 800184a:	d502      	bpl.n	8001852 <__swbuf_r+0x26>
 800184c:	6923      	ldr	r3, [r4, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <__swbuf_r+0x3a>
 8001852:	0021      	movs	r1, r4
 8001854:	0030      	movs	r0, r6
 8001856:	f000 f82b 	bl	80018b0 <__swsetup_r>
 800185a:	2800      	cmp	r0, #0
 800185c:	d003      	beq.n	8001866 <__swbuf_r+0x3a>
 800185e:	2501      	movs	r5, #1
 8001860:	426d      	negs	r5, r5
 8001862:	0028      	movs	r0, r5
 8001864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001866:	6923      	ldr	r3, [r4, #16]
 8001868:	6820      	ldr	r0, [r4, #0]
 800186a:	b2ef      	uxtb	r7, r5
 800186c:	1ac0      	subs	r0, r0, r3
 800186e:	6963      	ldr	r3, [r4, #20]
 8001870:	b2ed      	uxtb	r5, r5
 8001872:	4283      	cmp	r3, r0
 8001874:	dc05      	bgt.n	8001882 <__swbuf_r+0x56>
 8001876:	0021      	movs	r1, r4
 8001878:	0030      	movs	r0, r6
 800187a:	f000 fdf3 	bl	8002464 <_fflush_r>
 800187e:	2800      	cmp	r0, #0
 8001880:	d1ed      	bne.n	800185e <__swbuf_r+0x32>
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	3001      	adds	r0, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	60a3      	str	r3, [r4, #8]
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	6022      	str	r2, [r4, #0]
 8001890:	701f      	strb	r7, [r3, #0]
 8001892:	6963      	ldr	r3, [r4, #20]
 8001894:	4283      	cmp	r3, r0
 8001896:	d004      	beq.n	80018a2 <__swbuf_r+0x76>
 8001898:	89a3      	ldrh	r3, [r4, #12]
 800189a:	07db      	lsls	r3, r3, #31
 800189c:	d5e1      	bpl.n	8001862 <__swbuf_r+0x36>
 800189e:	2d0a      	cmp	r5, #10
 80018a0:	d1df      	bne.n	8001862 <__swbuf_r+0x36>
 80018a2:	0021      	movs	r1, r4
 80018a4:	0030      	movs	r0, r6
 80018a6:	f000 fddd 	bl	8002464 <_fflush_r>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d0d9      	beq.n	8001862 <__swbuf_r+0x36>
 80018ae:	e7d6      	b.n	800185e <__swbuf_r+0x32>

080018b0 <__swsetup_r>:
 80018b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001968 <__swsetup_r+0xb8>)
 80018b2:	b570      	push	{r4, r5, r6, lr}
 80018b4:	0005      	movs	r5, r0
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	000c      	movs	r4, r1
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d004      	beq.n	80018c8 <__swsetup_r+0x18>
 80018be:	6a03      	ldr	r3, [r0, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <__swsetup_r+0x18>
 80018c4:	f7ff fdf8 	bl	80014b8 <__sinit>
 80018c8:	230c      	movs	r3, #12
 80018ca:	5ee2      	ldrsh	r2, [r4, r3]
 80018cc:	0713      	lsls	r3, r2, #28
 80018ce:	d423      	bmi.n	8001918 <__swsetup_r+0x68>
 80018d0:	06d3      	lsls	r3, r2, #27
 80018d2:	d407      	bmi.n	80018e4 <__swsetup_r+0x34>
 80018d4:	2309      	movs	r3, #9
 80018d6:	602b      	str	r3, [r5, #0]
 80018d8:	2340      	movs	r3, #64	@ 0x40
 80018da:	2001      	movs	r0, #1
 80018dc:	4313      	orrs	r3, r2
 80018de:	81a3      	strh	r3, [r4, #12]
 80018e0:	4240      	negs	r0, r0
 80018e2:	e03a      	b.n	800195a <__swsetup_r+0xaa>
 80018e4:	0752      	lsls	r2, r2, #29
 80018e6:	d513      	bpl.n	8001910 <__swsetup_r+0x60>
 80018e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018ea:	2900      	cmp	r1, #0
 80018ec:	d008      	beq.n	8001900 <__swsetup_r+0x50>
 80018ee:	0023      	movs	r3, r4
 80018f0:	3344      	adds	r3, #68	@ 0x44
 80018f2:	4299      	cmp	r1, r3
 80018f4:	d002      	beq.n	80018fc <__swsetup_r+0x4c>
 80018f6:	0028      	movs	r0, r5
 80018f8:	f000 f966 	bl	8001bc8 <_free_r>
 80018fc:	2300      	movs	r3, #0
 80018fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8001900:	2224      	movs	r2, #36	@ 0x24
 8001902:	89a3      	ldrh	r3, [r4, #12]
 8001904:	4393      	bics	r3, r2
 8001906:	81a3      	strh	r3, [r4, #12]
 8001908:	2300      	movs	r3, #0
 800190a:	6063      	str	r3, [r4, #4]
 800190c:	6923      	ldr	r3, [r4, #16]
 800190e:	6023      	str	r3, [r4, #0]
 8001910:	2308      	movs	r3, #8
 8001912:	89a2      	ldrh	r2, [r4, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	81a3      	strh	r3, [r4, #12]
 8001918:	6923      	ldr	r3, [r4, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10b      	bne.n	8001936 <__swsetup_r+0x86>
 800191e:	21a0      	movs	r1, #160	@ 0xa0
 8001920:	2280      	movs	r2, #128	@ 0x80
 8001922:	89a3      	ldrh	r3, [r4, #12]
 8001924:	0089      	lsls	r1, r1, #2
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	400b      	ands	r3, r1
 800192a:	4293      	cmp	r3, r2
 800192c:	d003      	beq.n	8001936 <__swsetup_r+0x86>
 800192e:	0021      	movs	r1, r4
 8001930:	0028      	movs	r0, r5
 8001932:	f000 fe2b 	bl	800258c <__smakebuf_r>
 8001936:	230c      	movs	r3, #12
 8001938:	5ee2      	ldrsh	r2, [r4, r3]
 800193a:	2101      	movs	r1, #1
 800193c:	0013      	movs	r3, r2
 800193e:	400b      	ands	r3, r1
 8001940:	420a      	tst	r2, r1
 8001942:	d00b      	beq.n	800195c <__swsetup_r+0xac>
 8001944:	2300      	movs	r3, #0
 8001946:	60a3      	str	r3, [r4, #8]
 8001948:	6963      	ldr	r3, [r4, #20]
 800194a:	425b      	negs	r3, r3
 800194c:	61a3      	str	r3, [r4, #24]
 800194e:	2000      	movs	r0, #0
 8001950:	6923      	ldr	r3, [r4, #16]
 8001952:	4283      	cmp	r3, r0
 8001954:	d101      	bne.n	800195a <__swsetup_r+0xaa>
 8001956:	0613      	lsls	r3, r2, #24
 8001958:	d4be      	bmi.n	80018d8 <__swsetup_r+0x28>
 800195a:	bd70      	pop	{r4, r5, r6, pc}
 800195c:	0791      	lsls	r1, r2, #30
 800195e:	d400      	bmi.n	8001962 <__swsetup_r+0xb2>
 8001960:	6963      	ldr	r3, [r4, #20]
 8001962:	60a3      	str	r3, [r4, #8]
 8001964:	e7f3      	b.n	800194e <__swsetup_r+0x9e>
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	20000010 	.word	0x20000010

0800196c <memset>:
 800196c:	0003      	movs	r3, r0
 800196e:	1882      	adds	r2, r0, r2
 8001970:	4293      	cmp	r3, r2
 8001972:	d100      	bne.n	8001976 <memset+0xa>
 8001974:	4770      	bx	lr
 8001976:	7019      	strb	r1, [r3, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	e7f9      	b.n	8001970 <memset+0x4>

0800197c <strcasecmp>:
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	0005      	movs	r5, r0
 8001980:	2400      	movs	r4, #0
 8001982:	2703      	movs	r7, #3
 8001984:	4e09      	ldr	r6, [pc, #36]	@ (80019ac <strcasecmp+0x30>)
 8001986:	5d2a      	ldrb	r2, [r5, r4]
 8001988:	5cb3      	ldrb	r3, [r6, r2]
 800198a:	403b      	ands	r3, r7
 800198c:	2b01      	cmp	r3, #1
 800198e:	d100      	bne.n	8001992 <strcasecmp+0x16>
 8001990:	3220      	adds	r2, #32
 8001992:	5d0b      	ldrb	r3, [r1, r4]
 8001994:	5cf0      	ldrb	r0, [r6, r3]
 8001996:	4038      	ands	r0, r7
 8001998:	2801      	cmp	r0, #1
 800199a:	d100      	bne.n	800199e <strcasecmp+0x22>
 800199c:	3320      	adds	r3, #32
 800199e:	1ad0      	subs	r0, r2, r3
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d102      	bne.n	80019aa <strcasecmp+0x2e>
 80019a4:	3401      	adds	r4, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ed      	bne.n	8001986 <strcasecmp+0xa>
 80019aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ac:	08002c01 	.word	0x08002c01

080019b0 <strncmp>:
 80019b0:	b530      	push	{r4, r5, lr}
 80019b2:	0005      	movs	r5, r0
 80019b4:	1e10      	subs	r0, r2, #0
 80019b6:	d00b      	beq.n	80019d0 <strncmp+0x20>
 80019b8:	2400      	movs	r4, #0
 80019ba:	3a01      	subs	r2, #1
 80019bc:	5d2b      	ldrb	r3, [r5, r4]
 80019be:	5d08      	ldrb	r0, [r1, r4]
 80019c0:	4283      	cmp	r3, r0
 80019c2:	d104      	bne.n	80019ce <strncmp+0x1e>
 80019c4:	42a2      	cmp	r2, r4
 80019c6:	d002      	beq.n	80019ce <strncmp+0x1e>
 80019c8:	3401      	adds	r4, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f6      	bne.n	80019bc <strncmp+0xc>
 80019ce:	1a18      	subs	r0, r3, r0
 80019d0:	bd30      	pop	{r4, r5, pc}
	...

080019d4 <strtok>:
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <strtok+0x5c>)
 80019d8:	0005      	movs	r5, r0
 80019da:	681f      	ldr	r7, [r3, #0]
 80019dc:	000e      	movs	r6, r1
 80019de:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80019e0:	2c00      	cmp	r4, #0
 80019e2:	d11d      	bne.n	8001a20 <strtok+0x4c>
 80019e4:	2050      	movs	r0, #80	@ 0x50
 80019e6:	f000 f939 	bl	8001c5c <malloc>
 80019ea:	1e02      	subs	r2, r0, #0
 80019ec:	6478      	str	r0, [r7, #68]	@ 0x44
 80019ee:	d104      	bne.n	80019fa <strtok+0x26>
 80019f0:	215b      	movs	r1, #91	@ 0x5b
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <strtok+0x60>)
 80019f4:	4810      	ldr	r0, [pc, #64]	@ (8001a38 <strtok+0x64>)
 80019f6:	f000 f8c9 	bl	8001b8c <__assert_func>
 80019fa:	6004      	str	r4, [r0, #0]
 80019fc:	6044      	str	r4, [r0, #4]
 80019fe:	6084      	str	r4, [r0, #8]
 8001a00:	60c4      	str	r4, [r0, #12]
 8001a02:	6104      	str	r4, [r0, #16]
 8001a04:	6144      	str	r4, [r0, #20]
 8001a06:	6184      	str	r4, [r0, #24]
 8001a08:	6284      	str	r4, [r0, #40]	@ 0x28
 8001a0a:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8001a0c:	6304      	str	r4, [r0, #48]	@ 0x30
 8001a0e:	6344      	str	r4, [r0, #52]	@ 0x34
 8001a10:	6384      	str	r4, [r0, #56]	@ 0x38
 8001a12:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8001a14:	6404      	str	r4, [r0, #64]	@ 0x40
 8001a16:	6444      	str	r4, [r0, #68]	@ 0x44
 8001a18:	6484      	str	r4, [r0, #72]	@ 0x48
 8001a1a:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8001a1c:	7704      	strb	r4, [r0, #28]
 8001a1e:	6244      	str	r4, [r0, #36]	@ 0x24
 8001a20:	0031      	movs	r1, r6
 8001a22:	0028      	movs	r0, r5
 8001a24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a26:	2301      	movs	r3, #1
 8001a28:	f000 f808 	bl	8001a3c <__strtok_r>
 8001a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	20000010 	.word	0x20000010
 8001a34:	08002d01 	.word	0x08002d01
 8001a38:	08002d18 	.word	0x08002d18

08001a3c <__strtok_r>:
 8001a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3e:	1e04      	subs	r4, r0, #0
 8001a40:	d102      	bne.n	8001a48 <__strtok_r+0xc>
 8001a42:	6814      	ldr	r4, [r2, #0]
 8001a44:	2c00      	cmp	r4, #0
 8001a46:	d009      	beq.n	8001a5c <__strtok_r+0x20>
 8001a48:	0020      	movs	r0, r4
 8001a4a:	000e      	movs	r6, r1
 8001a4c:	7805      	ldrb	r5, [r0, #0]
 8001a4e:	3401      	adds	r4, #1
 8001a50:	7837      	ldrb	r7, [r6, #0]
 8001a52:	2f00      	cmp	r7, #0
 8001a54:	d104      	bne.n	8001a60 <__strtok_r+0x24>
 8001a56:	2d00      	cmp	r5, #0
 8001a58:	d10d      	bne.n	8001a76 <__strtok_r+0x3a>
 8001a5a:	6015      	str	r5, [r2, #0]
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	e006      	b.n	8001a6e <__strtok_r+0x32>
 8001a60:	3601      	adds	r6, #1
 8001a62:	42bd      	cmp	r5, r7
 8001a64:	d1f4      	bne.n	8001a50 <__strtok_r+0x14>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1ee      	bne.n	8001a48 <__strtok_r+0xc>
 8001a6a:	6014      	str	r4, [r2, #0]
 8001a6c:	7003      	strb	r3, [r0, #0]
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a70:	3301      	adds	r3, #1
 8001a72:	2d00      	cmp	r5, #0
 8001a74:	d102      	bne.n	8001a7c <__strtok_r+0x40>
 8001a76:	000b      	movs	r3, r1
 8001a78:	7826      	ldrb	r6, [r4, #0]
 8001a7a:	3401      	adds	r4, #1
 8001a7c:	781d      	ldrb	r5, [r3, #0]
 8001a7e:	42ae      	cmp	r6, r5
 8001a80:	d1f6      	bne.n	8001a70 <__strtok_r+0x34>
 8001a82:	2300      	movs	r3, #0
 8001a84:	001d      	movs	r5, r3
 8001a86:	429e      	cmp	r6, r3
 8001a88:	d002      	beq.n	8001a90 <__strtok_r+0x54>
 8001a8a:	0023      	movs	r3, r4
 8001a8c:	1e61      	subs	r1, r4, #1
 8001a8e:	700d      	strb	r5, [r1, #0]
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e7ec      	b.n	8001a6e <__strtok_r+0x32>

08001a94 <_close_r>:
 8001a94:	2300      	movs	r3, #0
 8001a96:	b570      	push	{r4, r5, r6, lr}
 8001a98:	4d06      	ldr	r5, [pc, #24]	@ (8001ab4 <_close_r+0x20>)
 8001a9a:	0004      	movs	r4, r0
 8001a9c:	0008      	movs	r0, r1
 8001a9e:	602b      	str	r3, [r5, #0]
 8001aa0:	f7ff f9fc 	bl	8000e9c <_close>
 8001aa4:	1c43      	adds	r3, r0, #1
 8001aa6:	d103      	bne.n	8001ab0 <_close_r+0x1c>
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d000      	beq.n	8001ab0 <_close_r+0x1c>
 8001aae:	6023      	str	r3, [r4, #0]
 8001ab0:	bd70      	pop	{r4, r5, r6, pc}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	200002d4 	.word	0x200002d4

08001ab8 <_lseek_r>:
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	0004      	movs	r4, r0
 8001abc:	0008      	movs	r0, r1
 8001abe:	0011      	movs	r1, r2
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	4d05      	ldr	r5, [pc, #20]	@ (8001adc <_lseek_r+0x24>)
 8001ac6:	602b      	str	r3, [r5, #0]
 8001ac8:	f7ff fa09 	bl	8000ede <_lseek>
 8001acc:	1c43      	adds	r3, r0, #1
 8001ace:	d103      	bne.n	8001ad8 <_lseek_r+0x20>
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d000      	beq.n	8001ad8 <_lseek_r+0x20>
 8001ad6:	6023      	str	r3, [r4, #0]
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	200002d4 	.word	0x200002d4

08001ae0 <_read_r>:
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	0004      	movs	r4, r0
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	0011      	movs	r1, r2
 8001ae8:	001a      	movs	r2, r3
 8001aea:	2300      	movs	r3, #0
 8001aec:	4d05      	ldr	r5, [pc, #20]	@ (8001b04 <_read_r+0x24>)
 8001aee:	602b      	str	r3, [r5, #0]
 8001af0:	f7ff f99b 	bl	8000e2a <_read>
 8001af4:	1c43      	adds	r3, r0, #1
 8001af6:	d103      	bne.n	8001b00 <_read_r+0x20>
 8001af8:	682b      	ldr	r3, [r5, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d000      	beq.n	8001b00 <_read_r+0x20>
 8001afe:	6023      	str	r3, [r4, #0]
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	200002d4 	.word	0x200002d4

08001b08 <_write_r>:
 8001b08:	b570      	push	{r4, r5, r6, lr}
 8001b0a:	0004      	movs	r4, r0
 8001b0c:	0008      	movs	r0, r1
 8001b0e:	0011      	movs	r1, r2
 8001b10:	001a      	movs	r2, r3
 8001b12:	2300      	movs	r3, #0
 8001b14:	4d05      	ldr	r5, [pc, #20]	@ (8001b2c <_write_r+0x24>)
 8001b16:	602b      	str	r3, [r5, #0]
 8001b18:	f7ff f9a4 	bl	8000e64 <_write>
 8001b1c:	1c43      	adds	r3, r0, #1
 8001b1e:	d103      	bne.n	8001b28 <_write_r+0x20>
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d000      	beq.n	8001b28 <_write_r+0x20>
 8001b26:	6023      	str	r3, [r4, #0]
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	200002d4 	.word	0x200002d4

08001b30 <__errno>:
 8001b30:	4b01      	ldr	r3, [pc, #4]	@ (8001b38 <__errno+0x8>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	4770      	bx	lr
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	20000010 	.word	0x20000010

08001b3c <__libc_init_array>:
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	2600      	movs	r6, #0
 8001b40:	4c0c      	ldr	r4, [pc, #48]	@ (8001b74 <__libc_init_array+0x38>)
 8001b42:	4d0d      	ldr	r5, [pc, #52]	@ (8001b78 <__libc_init_array+0x3c>)
 8001b44:	1b64      	subs	r4, r4, r5
 8001b46:	10a4      	asrs	r4, r4, #2
 8001b48:	42a6      	cmp	r6, r4
 8001b4a:	d109      	bne.n	8001b60 <__libc_init_array+0x24>
 8001b4c:	2600      	movs	r6, #0
 8001b4e:	f000 fec5 	bl	80028dc <_init>
 8001b52:	4c0a      	ldr	r4, [pc, #40]	@ (8001b7c <__libc_init_array+0x40>)
 8001b54:	4d0a      	ldr	r5, [pc, #40]	@ (8001b80 <__libc_init_array+0x44>)
 8001b56:	1b64      	subs	r4, r4, r5
 8001b58:	10a4      	asrs	r4, r4, #2
 8001b5a:	42a6      	cmp	r6, r4
 8001b5c:	d105      	bne.n	8001b6a <__libc_init_array+0x2e>
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	00b3      	lsls	r3, r6, #2
 8001b62:	58eb      	ldr	r3, [r5, r3]
 8001b64:	4798      	blx	r3
 8001b66:	3601      	adds	r6, #1
 8001b68:	e7ee      	b.n	8001b48 <__libc_init_array+0xc>
 8001b6a:	00b3      	lsls	r3, r6, #2
 8001b6c:	58eb      	ldr	r3, [r5, r3]
 8001b6e:	4798      	blx	r3
 8001b70:	3601      	adds	r6, #1
 8001b72:	e7f2      	b.n	8001b5a <__libc_init_array+0x1e>
 8001b74:	08002de4 	.word	0x08002de4
 8001b78:	08002de4 	.word	0x08002de4
 8001b7c:	08002de8 	.word	0x08002de8
 8001b80:	08002de4 	.word	0x08002de4

08001b84 <__retarget_lock_init_recursive>:
 8001b84:	4770      	bx	lr

08001b86 <__retarget_lock_acquire_recursive>:
 8001b86:	4770      	bx	lr

08001b88 <__retarget_lock_release_recursive>:
 8001b88:	4770      	bx	lr
	...

08001b8c <__assert_func>:
 8001b8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001b8e:	0014      	movs	r4, r2
 8001b90:	001a      	movs	r2, r3
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <__assert_func+0x2c>)
 8001b94:	0005      	movs	r5, r0
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	000e      	movs	r6, r1
 8001b9a:	68d8      	ldr	r0, [r3, #12]
 8001b9c:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <__assert_func+0x30>)
 8001b9e:	2c00      	cmp	r4, #0
 8001ba0:	d101      	bne.n	8001ba6 <__assert_func+0x1a>
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <__assert_func+0x34>)
 8001ba4:	001c      	movs	r4, r3
 8001ba6:	4907      	ldr	r1, [pc, #28]	@ (8001bc4 <__assert_func+0x38>)
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	9402      	str	r4, [sp, #8]
 8001bac:	002b      	movs	r3, r5
 8001bae:	9600      	str	r6, [sp, #0]
 8001bb0:	f000 fc84 	bl	80024bc <fiprintf>
 8001bb4:	f000 fdbd 	bl	8002732 <abort>
 8001bb8:	20000010 	.word	0x20000010
 8001bbc:	08002d72 	.word	0x08002d72
 8001bc0:	08002dad 	.word	0x08002dad
 8001bc4:	08002d7f 	.word	0x08002d7f

08001bc8 <_free_r>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	0005      	movs	r5, r0
 8001bcc:	1e0c      	subs	r4, r1, #0
 8001bce:	d010      	beq.n	8001bf2 <_free_r+0x2a>
 8001bd0:	3c04      	subs	r4, #4
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da00      	bge.n	8001bda <_free_r+0x12>
 8001bd8:	18e4      	adds	r4, r4, r3
 8001bda:	0028      	movs	r0, r5
 8001bdc:	f000 f8ea 	bl	8001db4 <__malloc_lock>
 8001be0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c58 <_free_r+0x90>)
 8001be2:	6813      	ldr	r3, [r2, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <_free_r+0x2c>
 8001be8:	6063      	str	r3, [r4, #4]
 8001bea:	6014      	str	r4, [r2, #0]
 8001bec:	0028      	movs	r0, r5
 8001bee:	f000 f8e9 	bl	8001dc4 <__malloc_unlock>
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	42a3      	cmp	r3, r4
 8001bf6:	d908      	bls.n	8001c0a <_free_r+0x42>
 8001bf8:	6820      	ldr	r0, [r4, #0]
 8001bfa:	1821      	adds	r1, r4, r0
 8001bfc:	428b      	cmp	r3, r1
 8001bfe:	d1f3      	bne.n	8001be8 <_free_r+0x20>
 8001c00:	6819      	ldr	r1, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	1809      	adds	r1, r1, r0
 8001c06:	6021      	str	r1, [r4, #0]
 8001c08:	e7ee      	b.n	8001be8 <_free_r+0x20>
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <_free_r+0x4e>
 8001c12:	42a3      	cmp	r3, r4
 8001c14:	d9f9      	bls.n	8001c0a <_free_r+0x42>
 8001c16:	6811      	ldr	r1, [r2, #0]
 8001c18:	1850      	adds	r0, r2, r1
 8001c1a:	42a0      	cmp	r0, r4
 8001c1c:	d10b      	bne.n	8001c36 <_free_r+0x6e>
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	1809      	adds	r1, r1, r0
 8001c22:	1850      	adds	r0, r2, r1
 8001c24:	6011      	str	r1, [r2, #0]
 8001c26:	4283      	cmp	r3, r0
 8001c28:	d1e0      	bne.n	8001bec <_free_r+0x24>
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	1841      	adds	r1, r0, r1
 8001c30:	6011      	str	r1, [r2, #0]
 8001c32:	6053      	str	r3, [r2, #4]
 8001c34:	e7da      	b.n	8001bec <_free_r+0x24>
 8001c36:	42a0      	cmp	r0, r4
 8001c38:	d902      	bls.n	8001c40 <_free_r+0x78>
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	602b      	str	r3, [r5, #0]
 8001c3e:	e7d5      	b.n	8001bec <_free_r+0x24>
 8001c40:	6820      	ldr	r0, [r4, #0]
 8001c42:	1821      	adds	r1, r4, r0
 8001c44:	428b      	cmp	r3, r1
 8001c46:	d103      	bne.n	8001c50 <_free_r+0x88>
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	1809      	adds	r1, r1, r0
 8001c4e:	6021      	str	r1, [r4, #0]
 8001c50:	6063      	str	r3, [r4, #4]
 8001c52:	6054      	str	r4, [r2, #4]
 8001c54:	e7ca      	b.n	8001bec <_free_r+0x24>
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	200002e0 	.word	0x200002e0

08001c5c <malloc>:
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <malloc+0x10>)
 8001c60:	0001      	movs	r1, r0
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	f000 f826 	bl	8001cb4 <_malloc_r>
 8001c68:	bd10      	pop	{r4, pc}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	20000010 	.word	0x20000010

08001c70 <sbrk_aligned>:
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	4e0f      	ldr	r6, [pc, #60]	@ (8001cb0 <sbrk_aligned+0x40>)
 8001c74:	000d      	movs	r5, r1
 8001c76:	6831      	ldr	r1, [r6, #0]
 8001c78:	0004      	movs	r4, r0
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	d102      	bne.n	8001c84 <sbrk_aligned+0x14>
 8001c7e:	f000 fd3b 	bl	80026f8 <_sbrk_r>
 8001c82:	6030      	str	r0, [r6, #0]
 8001c84:	0029      	movs	r1, r5
 8001c86:	0020      	movs	r0, r4
 8001c88:	f000 fd36 	bl	80026f8 <_sbrk_r>
 8001c8c:	1c43      	adds	r3, r0, #1
 8001c8e:	d103      	bne.n	8001c98 <sbrk_aligned+0x28>
 8001c90:	2501      	movs	r5, #1
 8001c92:	426d      	negs	r5, r5
 8001c94:	0028      	movs	r0, r5
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	2303      	movs	r3, #3
 8001c9a:	1cc5      	adds	r5, r0, #3
 8001c9c:	439d      	bics	r5, r3
 8001c9e:	42a8      	cmp	r0, r5
 8001ca0:	d0f8      	beq.n	8001c94 <sbrk_aligned+0x24>
 8001ca2:	1a29      	subs	r1, r5, r0
 8001ca4:	0020      	movs	r0, r4
 8001ca6:	f000 fd27 	bl	80026f8 <_sbrk_r>
 8001caa:	3001      	adds	r0, #1
 8001cac:	d1f2      	bne.n	8001c94 <sbrk_aligned+0x24>
 8001cae:	e7ef      	b.n	8001c90 <sbrk_aligned+0x20>
 8001cb0:	200002dc 	.word	0x200002dc

08001cb4 <_malloc_r>:
 8001cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	1ccb      	adds	r3, r1, #3
 8001cba:	4393      	bics	r3, r2
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	0005      	movs	r5, r0
 8001cc0:	001f      	movs	r7, r3
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d234      	bcs.n	8001d30 <_malloc_r+0x7c>
 8001cc6:	270c      	movs	r7, #12
 8001cc8:	42b9      	cmp	r1, r7
 8001cca:	d833      	bhi.n	8001d34 <_malloc_r+0x80>
 8001ccc:	0028      	movs	r0, r5
 8001cce:	f000 f871 	bl	8001db4 <__malloc_lock>
 8001cd2:	4e37      	ldr	r6, [pc, #220]	@ (8001db0 <_malloc_r+0xfc>)
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	001c      	movs	r4, r3
 8001cd8:	2c00      	cmp	r4, #0
 8001cda:	d12f      	bne.n	8001d3c <_malloc_r+0x88>
 8001cdc:	0039      	movs	r1, r7
 8001cde:	0028      	movs	r0, r5
 8001ce0:	f7ff ffc6 	bl	8001c70 <sbrk_aligned>
 8001ce4:	0004      	movs	r4, r0
 8001ce6:	1c43      	adds	r3, r0, #1
 8001ce8:	d15f      	bne.n	8001daa <_malloc_r+0xf6>
 8001cea:	6834      	ldr	r4, [r6, #0]
 8001cec:	9400      	str	r4, [sp, #0]
 8001cee:	9b00      	ldr	r3, [sp, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d14a      	bne.n	8001d8a <_malloc_r+0xd6>
 8001cf4:	2c00      	cmp	r4, #0
 8001cf6:	d052      	beq.n	8001d9e <_malloc_r+0xea>
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	0028      	movs	r0, r5
 8001cfc:	18e3      	adds	r3, r4, r3
 8001cfe:	9900      	ldr	r1, [sp, #0]
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	f000 fcf9 	bl	80026f8 <_sbrk_r>
 8001d06:	9b01      	ldr	r3, [sp, #4]
 8001d08:	4283      	cmp	r3, r0
 8001d0a:	d148      	bne.n	8001d9e <_malloc_r+0xea>
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	0028      	movs	r0, r5
 8001d10:	1aff      	subs	r7, r7, r3
 8001d12:	0039      	movs	r1, r7
 8001d14:	f7ff ffac 	bl	8001c70 <sbrk_aligned>
 8001d18:	3001      	adds	r0, #1
 8001d1a:	d040      	beq.n	8001d9e <_malloc_r+0xea>
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	19db      	adds	r3, r3, r7
 8001d20:	6023      	str	r3, [r4, #0]
 8001d22:	6833      	ldr	r3, [r6, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d133      	bne.n	8001d92 <_malloc_r+0xde>
 8001d2a:	9b00      	ldr	r3, [sp, #0]
 8001d2c:	6033      	str	r3, [r6, #0]
 8001d2e:	e019      	b.n	8001d64 <_malloc_r+0xb0>
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	dac9      	bge.n	8001cc8 <_malloc_r+0x14>
 8001d34:	230c      	movs	r3, #12
 8001d36:	602b      	str	r3, [r5, #0]
 8001d38:	2000      	movs	r0, #0
 8001d3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d3c:	6821      	ldr	r1, [r4, #0]
 8001d3e:	1bc9      	subs	r1, r1, r7
 8001d40:	d420      	bmi.n	8001d84 <_malloc_r+0xd0>
 8001d42:	290b      	cmp	r1, #11
 8001d44:	d90a      	bls.n	8001d5c <_malloc_r+0xa8>
 8001d46:	19e2      	adds	r2, r4, r7
 8001d48:	6027      	str	r7, [r4, #0]
 8001d4a:	42a3      	cmp	r3, r4
 8001d4c:	d104      	bne.n	8001d58 <_malloc_r+0xa4>
 8001d4e:	6032      	str	r2, [r6, #0]
 8001d50:	6863      	ldr	r3, [r4, #4]
 8001d52:	6011      	str	r1, [r2, #0]
 8001d54:	6053      	str	r3, [r2, #4]
 8001d56:	e005      	b.n	8001d64 <_malloc_r+0xb0>
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	e7f9      	b.n	8001d50 <_malloc_r+0x9c>
 8001d5c:	6862      	ldr	r2, [r4, #4]
 8001d5e:	42a3      	cmp	r3, r4
 8001d60:	d10e      	bne.n	8001d80 <_malloc_r+0xcc>
 8001d62:	6032      	str	r2, [r6, #0]
 8001d64:	0028      	movs	r0, r5
 8001d66:	f000 f82d 	bl	8001dc4 <__malloc_unlock>
 8001d6a:	0020      	movs	r0, r4
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	300b      	adds	r0, #11
 8001d70:	1d23      	adds	r3, r4, #4
 8001d72:	4390      	bics	r0, r2
 8001d74:	1ac2      	subs	r2, r0, r3
 8001d76:	4298      	cmp	r0, r3
 8001d78:	d0df      	beq.n	8001d3a <_malloc_r+0x86>
 8001d7a:	1a1b      	subs	r3, r3, r0
 8001d7c:	50a3      	str	r3, [r4, r2]
 8001d7e:	e7dc      	b.n	8001d3a <_malloc_r+0x86>
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	e7ef      	b.n	8001d64 <_malloc_r+0xb0>
 8001d84:	0023      	movs	r3, r4
 8001d86:	6864      	ldr	r4, [r4, #4]
 8001d88:	e7a6      	b.n	8001cd8 <_malloc_r+0x24>
 8001d8a:	9c00      	ldr	r4, [sp, #0]
 8001d8c:	6863      	ldr	r3, [r4, #4]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	e7ad      	b.n	8001cee <_malloc_r+0x3a>
 8001d92:	001a      	movs	r2, r3
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	42a3      	cmp	r3, r4
 8001d98:	d1fb      	bne.n	8001d92 <_malloc_r+0xde>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e7da      	b.n	8001d54 <_malloc_r+0xa0>
 8001d9e:	230c      	movs	r3, #12
 8001da0:	0028      	movs	r0, r5
 8001da2:	602b      	str	r3, [r5, #0]
 8001da4:	f000 f80e 	bl	8001dc4 <__malloc_unlock>
 8001da8:	e7c6      	b.n	8001d38 <_malloc_r+0x84>
 8001daa:	6007      	str	r7, [r0, #0]
 8001dac:	e7da      	b.n	8001d64 <_malloc_r+0xb0>
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	200002e0 	.word	0x200002e0

08001db4 <__malloc_lock>:
 8001db4:	b510      	push	{r4, lr}
 8001db6:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <__malloc_lock+0xc>)
 8001db8:	f7ff fee5 	bl	8001b86 <__retarget_lock_acquire_recursive>
 8001dbc:	bd10      	pop	{r4, pc}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	200002d8 	.word	0x200002d8

08001dc4 <__malloc_unlock>:
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <__malloc_unlock+0xc>)
 8001dc8:	f7ff fede 	bl	8001b88 <__retarget_lock_release_recursive>
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	200002d8 	.word	0x200002d8

08001dd4 <__sfputc_r>:
 8001dd4:	6893      	ldr	r3, [r2, #8]
 8001dd6:	b510      	push	{r4, lr}
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	6093      	str	r3, [r2, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da04      	bge.n	8001dea <__sfputc_r+0x16>
 8001de0:	6994      	ldr	r4, [r2, #24]
 8001de2:	42a3      	cmp	r3, r4
 8001de4:	db07      	blt.n	8001df6 <__sfputc_r+0x22>
 8001de6:	290a      	cmp	r1, #10
 8001de8:	d005      	beq.n	8001df6 <__sfputc_r+0x22>
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	1c58      	adds	r0, r3, #1
 8001dee:	6010      	str	r0, [r2, #0]
 8001df0:	7019      	strb	r1, [r3, #0]
 8001df2:	0008      	movs	r0, r1
 8001df4:	bd10      	pop	{r4, pc}
 8001df6:	f7ff fd19 	bl	800182c <__swbuf_r>
 8001dfa:	0001      	movs	r1, r0
 8001dfc:	e7f9      	b.n	8001df2 <__sfputc_r+0x1e>

08001dfe <__sfputs_r>:
 8001dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e00:	0006      	movs	r6, r0
 8001e02:	000f      	movs	r7, r1
 8001e04:	0014      	movs	r4, r2
 8001e06:	18d5      	adds	r5, r2, r3
 8001e08:	42ac      	cmp	r4, r5
 8001e0a:	d101      	bne.n	8001e10 <__sfputs_r+0x12>
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	e007      	b.n	8001e20 <__sfputs_r+0x22>
 8001e10:	7821      	ldrb	r1, [r4, #0]
 8001e12:	003a      	movs	r2, r7
 8001e14:	0030      	movs	r0, r6
 8001e16:	f7ff ffdd 	bl	8001dd4 <__sfputc_r>
 8001e1a:	3401      	adds	r4, #1
 8001e1c:	1c43      	adds	r3, r0, #1
 8001e1e:	d1f3      	bne.n	8001e08 <__sfputs_r+0xa>
 8001e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e24 <_vfiprintf_r>:
 8001e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e26:	b0a1      	sub	sp, #132	@ 0x84
 8001e28:	000f      	movs	r7, r1
 8001e2a:	0015      	movs	r5, r2
 8001e2c:	001e      	movs	r6, r3
 8001e2e:	9003      	str	r0, [sp, #12]
 8001e30:	2800      	cmp	r0, #0
 8001e32:	d004      	beq.n	8001e3e <_vfiprintf_r+0x1a>
 8001e34:	6a03      	ldr	r3, [r0, #32]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <_vfiprintf_r+0x1a>
 8001e3a:	f7ff fb3d 	bl	80014b8 <__sinit>
 8001e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e40:	07db      	lsls	r3, r3, #31
 8001e42:	d405      	bmi.n	8001e50 <_vfiprintf_r+0x2c>
 8001e44:	89bb      	ldrh	r3, [r7, #12]
 8001e46:	059b      	lsls	r3, r3, #22
 8001e48:	d402      	bmi.n	8001e50 <_vfiprintf_r+0x2c>
 8001e4a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001e4c:	f7ff fe9b 	bl	8001b86 <__retarget_lock_acquire_recursive>
 8001e50:	89bb      	ldrh	r3, [r7, #12]
 8001e52:	071b      	lsls	r3, r3, #28
 8001e54:	d502      	bpl.n	8001e5c <_vfiprintf_r+0x38>
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d113      	bne.n	8001e84 <_vfiprintf_r+0x60>
 8001e5c:	0039      	movs	r1, r7
 8001e5e:	9803      	ldr	r0, [sp, #12]
 8001e60:	f7ff fd26 	bl	80018b0 <__swsetup_r>
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d00d      	beq.n	8001e84 <_vfiprintf_r+0x60>
 8001e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e6a:	07db      	lsls	r3, r3, #31
 8001e6c:	d503      	bpl.n	8001e76 <_vfiprintf_r+0x52>
 8001e6e:	2001      	movs	r0, #1
 8001e70:	4240      	negs	r0, r0
 8001e72:	b021      	add	sp, #132	@ 0x84
 8001e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e76:	89bb      	ldrh	r3, [r7, #12]
 8001e78:	059b      	lsls	r3, r3, #22
 8001e7a:	d4f8      	bmi.n	8001e6e <_vfiprintf_r+0x4a>
 8001e7c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001e7e:	f7ff fe83 	bl	8001b88 <__retarget_lock_release_recursive>
 8001e82:	e7f4      	b.n	8001e6e <_vfiprintf_r+0x4a>
 8001e84:	2300      	movs	r3, #0
 8001e86:	ac08      	add	r4, sp, #32
 8001e88:	6163      	str	r3, [r4, #20]
 8001e8a:	3320      	adds	r3, #32
 8001e8c:	7663      	strb	r3, [r4, #25]
 8001e8e:	3310      	adds	r3, #16
 8001e90:	76a3      	strb	r3, [r4, #26]
 8001e92:	9607      	str	r6, [sp, #28]
 8001e94:	002e      	movs	r6, r5
 8001e96:	7833      	ldrb	r3, [r6, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <_vfiprintf_r+0x7c>
 8001e9c:	2b25      	cmp	r3, #37	@ 0x25
 8001e9e:	d148      	bne.n	8001f32 <_vfiprintf_r+0x10e>
 8001ea0:	1b73      	subs	r3, r6, r5
 8001ea2:	9305      	str	r3, [sp, #20]
 8001ea4:	42ae      	cmp	r6, r5
 8001ea6:	d00b      	beq.n	8001ec0 <_vfiprintf_r+0x9c>
 8001ea8:	002a      	movs	r2, r5
 8001eaa:	0039      	movs	r1, r7
 8001eac:	9803      	ldr	r0, [sp, #12]
 8001eae:	f7ff ffa6 	bl	8001dfe <__sfputs_r>
 8001eb2:	3001      	adds	r0, #1
 8001eb4:	d100      	bne.n	8001eb8 <_vfiprintf_r+0x94>
 8001eb6:	e0ae      	b.n	8002016 <_vfiprintf_r+0x1f2>
 8001eb8:	6963      	ldr	r3, [r4, #20]
 8001eba:	9a05      	ldr	r2, [sp, #20]
 8001ebc:	189b      	adds	r3, r3, r2
 8001ebe:	6163      	str	r3, [r4, #20]
 8001ec0:	7833      	ldrb	r3, [r6, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d100      	bne.n	8001ec8 <_vfiprintf_r+0xa4>
 8001ec6:	e0a6      	b.n	8002016 <_vfiprintf_r+0x1f2>
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2300      	movs	r3, #0
 8001ecc:	4252      	negs	r2, r2
 8001ece:	6062      	str	r2, [r4, #4]
 8001ed0:	a904      	add	r1, sp, #16
 8001ed2:	3254      	adds	r2, #84	@ 0x54
 8001ed4:	1852      	adds	r2, r2, r1
 8001ed6:	1c75      	adds	r5, r6, #1
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	60e3      	str	r3, [r4, #12]
 8001edc:	60a3      	str	r3, [r4, #8]
 8001ede:	7013      	strb	r3, [r2, #0]
 8001ee0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001ee2:	4b59      	ldr	r3, [pc, #356]	@ (8002048 <_vfiprintf_r+0x224>)
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	7829      	ldrb	r1, [r5, #0]
 8001eea:	9305      	str	r3, [sp, #20]
 8001eec:	f000 fc16 	bl	800271c <memchr>
 8001ef0:	1c6e      	adds	r6, r5, #1
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d11f      	bne.n	8001f36 <_vfiprintf_r+0x112>
 8001ef6:	6822      	ldr	r2, [r4, #0]
 8001ef8:	06d3      	lsls	r3, r2, #27
 8001efa:	d504      	bpl.n	8001f06 <_vfiprintf_r+0xe2>
 8001efc:	2353      	movs	r3, #83	@ 0x53
 8001efe:	a904      	add	r1, sp, #16
 8001f00:	185b      	adds	r3, r3, r1
 8001f02:	2120      	movs	r1, #32
 8001f04:	7019      	strb	r1, [r3, #0]
 8001f06:	0713      	lsls	r3, r2, #28
 8001f08:	d504      	bpl.n	8001f14 <_vfiprintf_r+0xf0>
 8001f0a:	2353      	movs	r3, #83	@ 0x53
 8001f0c:	a904      	add	r1, sp, #16
 8001f0e:	185b      	adds	r3, r3, r1
 8001f10:	212b      	movs	r1, #43	@ 0x2b
 8001f12:	7019      	strb	r1, [r3, #0]
 8001f14:	782b      	ldrb	r3, [r5, #0]
 8001f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f18:	d016      	beq.n	8001f48 <_vfiprintf_r+0x124>
 8001f1a:	002e      	movs	r6, r5
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	200a      	movs	r0, #10
 8001f20:	68e3      	ldr	r3, [r4, #12]
 8001f22:	7832      	ldrb	r2, [r6, #0]
 8001f24:	1c75      	adds	r5, r6, #1
 8001f26:	3a30      	subs	r2, #48	@ 0x30
 8001f28:	2a09      	cmp	r2, #9
 8001f2a:	d950      	bls.n	8001fce <_vfiprintf_r+0x1aa>
 8001f2c:	2900      	cmp	r1, #0
 8001f2e:	d111      	bne.n	8001f54 <_vfiprintf_r+0x130>
 8001f30:	e017      	b.n	8001f62 <_vfiprintf_r+0x13e>
 8001f32:	3601      	adds	r6, #1
 8001f34:	e7af      	b.n	8001e96 <_vfiprintf_r+0x72>
 8001f36:	9b05      	ldr	r3, [sp, #20]
 8001f38:	6822      	ldr	r2, [r4, #0]
 8001f3a:	1ac0      	subs	r0, r0, r3
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	4083      	lsls	r3, r0
 8001f40:	4313      	orrs	r3, r2
 8001f42:	0035      	movs	r5, r6
 8001f44:	6023      	str	r3, [r4, #0]
 8001f46:	e7cc      	b.n	8001ee2 <_vfiprintf_r+0xbe>
 8001f48:	9b07      	ldr	r3, [sp, #28]
 8001f4a:	1d19      	adds	r1, r3, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	9107      	str	r1, [sp, #28]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db01      	blt.n	8001f58 <_vfiprintf_r+0x134>
 8001f54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001f56:	e004      	b.n	8001f62 <_vfiprintf_r+0x13e>
 8001f58:	425b      	negs	r3, r3
 8001f5a:	60e3      	str	r3, [r4, #12]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	6023      	str	r3, [r4, #0]
 8001f62:	7833      	ldrb	r3, [r6, #0]
 8001f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f66:	d10c      	bne.n	8001f82 <_vfiprintf_r+0x15e>
 8001f68:	7873      	ldrb	r3, [r6, #1]
 8001f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f6c:	d134      	bne.n	8001fd8 <_vfiprintf_r+0x1b4>
 8001f6e:	9b07      	ldr	r3, [sp, #28]
 8001f70:	3602      	adds	r6, #2
 8001f72:	1d1a      	adds	r2, r3, #4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	9207      	str	r2, [sp, #28]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	da01      	bge.n	8001f80 <_vfiprintf_r+0x15c>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	425b      	negs	r3, r3
 8001f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f82:	4d32      	ldr	r5, [pc, #200]	@ (800204c <_vfiprintf_r+0x228>)
 8001f84:	2203      	movs	r2, #3
 8001f86:	0028      	movs	r0, r5
 8001f88:	7831      	ldrb	r1, [r6, #0]
 8001f8a:	f000 fbc7 	bl	800271c <memchr>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d006      	beq.n	8001fa0 <_vfiprintf_r+0x17c>
 8001f92:	2340      	movs	r3, #64	@ 0x40
 8001f94:	1b40      	subs	r0, r0, r5
 8001f96:	4083      	lsls	r3, r0
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	3601      	adds	r6, #1
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	6023      	str	r3, [r4, #0]
 8001fa0:	7831      	ldrb	r1, [r6, #0]
 8001fa2:	2206      	movs	r2, #6
 8001fa4:	482a      	ldr	r0, [pc, #168]	@ (8002050 <_vfiprintf_r+0x22c>)
 8001fa6:	1c75      	adds	r5, r6, #1
 8001fa8:	7621      	strb	r1, [r4, #24]
 8001faa:	f000 fbb7 	bl	800271c <memchr>
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d040      	beq.n	8002034 <_vfiprintf_r+0x210>
 8001fb2:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <_vfiprintf_r+0x230>)
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d122      	bne.n	8001ffe <_vfiprintf_r+0x1da>
 8001fb8:	2207      	movs	r2, #7
 8001fba:	9b07      	ldr	r3, [sp, #28]
 8001fbc:	3307      	adds	r3, #7
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	3308      	adds	r3, #8
 8001fc2:	9307      	str	r3, [sp, #28]
 8001fc4:	6963      	ldr	r3, [r4, #20]
 8001fc6:	9a04      	ldr	r2, [sp, #16]
 8001fc8:	189b      	adds	r3, r3, r2
 8001fca:	6163      	str	r3, [r4, #20]
 8001fcc:	e762      	b.n	8001e94 <_vfiprintf_r+0x70>
 8001fce:	4343      	muls	r3, r0
 8001fd0:	002e      	movs	r6, r5
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	189b      	adds	r3, r3, r2
 8001fd6:	e7a4      	b.n	8001f22 <_vfiprintf_r+0xfe>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	200a      	movs	r0, #10
 8001fdc:	0019      	movs	r1, r3
 8001fde:	3601      	adds	r6, #1
 8001fe0:	6063      	str	r3, [r4, #4]
 8001fe2:	7832      	ldrb	r2, [r6, #0]
 8001fe4:	1c75      	adds	r5, r6, #1
 8001fe6:	3a30      	subs	r2, #48	@ 0x30
 8001fe8:	2a09      	cmp	r2, #9
 8001fea:	d903      	bls.n	8001ff4 <_vfiprintf_r+0x1d0>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0c8      	beq.n	8001f82 <_vfiprintf_r+0x15e>
 8001ff0:	9109      	str	r1, [sp, #36]	@ 0x24
 8001ff2:	e7c6      	b.n	8001f82 <_vfiprintf_r+0x15e>
 8001ff4:	4341      	muls	r1, r0
 8001ff6:	002e      	movs	r6, r5
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	1889      	adds	r1, r1, r2
 8001ffc:	e7f1      	b.n	8001fe2 <_vfiprintf_r+0x1be>
 8001ffe:	aa07      	add	r2, sp, #28
 8002000:	9200      	str	r2, [sp, #0]
 8002002:	0021      	movs	r1, r4
 8002004:	003a      	movs	r2, r7
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <_vfiprintf_r+0x234>)
 8002008:	9803      	ldr	r0, [sp, #12]
 800200a:	e000      	b.n	800200e <_vfiprintf_r+0x1ea>
 800200c:	bf00      	nop
 800200e:	9004      	str	r0, [sp, #16]
 8002010:	9b04      	ldr	r3, [sp, #16]
 8002012:	3301      	adds	r3, #1
 8002014:	d1d6      	bne.n	8001fc4 <_vfiprintf_r+0x1a0>
 8002016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002018:	07db      	lsls	r3, r3, #31
 800201a:	d405      	bmi.n	8002028 <_vfiprintf_r+0x204>
 800201c:	89bb      	ldrh	r3, [r7, #12]
 800201e:	059b      	lsls	r3, r3, #22
 8002020:	d402      	bmi.n	8002028 <_vfiprintf_r+0x204>
 8002022:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002024:	f7ff fdb0 	bl	8001b88 <__retarget_lock_release_recursive>
 8002028:	89bb      	ldrh	r3, [r7, #12]
 800202a:	065b      	lsls	r3, r3, #25
 800202c:	d500      	bpl.n	8002030 <_vfiprintf_r+0x20c>
 800202e:	e71e      	b.n	8001e6e <_vfiprintf_r+0x4a>
 8002030:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002032:	e71e      	b.n	8001e72 <_vfiprintf_r+0x4e>
 8002034:	aa07      	add	r2, sp, #28
 8002036:	9200      	str	r2, [sp, #0]
 8002038:	0021      	movs	r1, r4
 800203a:	003a      	movs	r2, r7
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <_vfiprintf_r+0x234>)
 800203e:	9803      	ldr	r0, [sp, #12]
 8002040:	f000 f87c 	bl	800213c <_printf_i>
 8002044:	e7e3      	b.n	800200e <_vfiprintf_r+0x1ea>
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	08002dae 	.word	0x08002dae
 800204c:	08002db4 	.word	0x08002db4
 8002050:	08002db8 	.word	0x08002db8
 8002054:	00000000 	.word	0x00000000
 8002058:	08001dff 	.word	0x08001dff

0800205c <_printf_common>:
 800205c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800205e:	0016      	movs	r6, r2
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	688a      	ldr	r2, [r1, #8]
 8002064:	690b      	ldr	r3, [r1, #16]
 8002066:	000c      	movs	r4, r1
 8002068:	9000      	str	r0, [sp, #0]
 800206a:	4293      	cmp	r3, r2
 800206c:	da00      	bge.n	8002070 <_printf_common+0x14>
 800206e:	0013      	movs	r3, r2
 8002070:	0022      	movs	r2, r4
 8002072:	6033      	str	r3, [r6, #0]
 8002074:	3243      	adds	r2, #67	@ 0x43
 8002076:	7812      	ldrb	r2, [r2, #0]
 8002078:	2a00      	cmp	r2, #0
 800207a:	d001      	beq.n	8002080 <_printf_common+0x24>
 800207c:	3301      	adds	r3, #1
 800207e:	6033      	str	r3, [r6, #0]
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	069b      	lsls	r3, r3, #26
 8002084:	d502      	bpl.n	800208c <_printf_common+0x30>
 8002086:	6833      	ldr	r3, [r6, #0]
 8002088:	3302      	adds	r3, #2
 800208a:	6033      	str	r3, [r6, #0]
 800208c:	6822      	ldr	r2, [r4, #0]
 800208e:	2306      	movs	r3, #6
 8002090:	0015      	movs	r5, r2
 8002092:	401d      	ands	r5, r3
 8002094:	421a      	tst	r2, r3
 8002096:	d027      	beq.n	80020e8 <_printf_common+0x8c>
 8002098:	0023      	movs	r3, r4
 800209a:	3343      	adds	r3, #67	@ 0x43
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	1e5a      	subs	r2, r3, #1
 80020a0:	4193      	sbcs	r3, r2
 80020a2:	6822      	ldr	r2, [r4, #0]
 80020a4:	0692      	lsls	r2, r2, #26
 80020a6:	d430      	bmi.n	800210a <_printf_common+0xae>
 80020a8:	0022      	movs	r2, r4
 80020aa:	9901      	ldr	r1, [sp, #4]
 80020ac:	9800      	ldr	r0, [sp, #0]
 80020ae:	9d08      	ldr	r5, [sp, #32]
 80020b0:	3243      	adds	r2, #67	@ 0x43
 80020b2:	47a8      	blx	r5
 80020b4:	3001      	adds	r0, #1
 80020b6:	d025      	beq.n	8002104 <_printf_common+0xa8>
 80020b8:	2206      	movs	r2, #6
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	2500      	movs	r5, #0
 80020be:	4013      	ands	r3, r2
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d105      	bne.n	80020d0 <_printf_common+0x74>
 80020c4:	6833      	ldr	r3, [r6, #0]
 80020c6:	68e5      	ldr	r5, [r4, #12]
 80020c8:	1aed      	subs	r5, r5, r3
 80020ca:	43eb      	mvns	r3, r5
 80020cc:	17db      	asrs	r3, r3, #31
 80020ce:	401d      	ands	r5, r3
 80020d0:	68a3      	ldr	r3, [r4, #8]
 80020d2:	6922      	ldr	r2, [r4, #16]
 80020d4:	4293      	cmp	r3, r2
 80020d6:	dd01      	ble.n	80020dc <_printf_common+0x80>
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	18ed      	adds	r5, r5, r3
 80020dc:	2600      	movs	r6, #0
 80020de:	42b5      	cmp	r5, r6
 80020e0:	d120      	bne.n	8002124 <_printf_common+0xc8>
 80020e2:	2000      	movs	r0, #0
 80020e4:	e010      	b.n	8002108 <_printf_common+0xac>
 80020e6:	3501      	adds	r5, #1
 80020e8:	68e3      	ldr	r3, [r4, #12]
 80020ea:	6832      	ldr	r2, [r6, #0]
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	42ab      	cmp	r3, r5
 80020f0:	ddd2      	ble.n	8002098 <_printf_common+0x3c>
 80020f2:	0022      	movs	r2, r4
 80020f4:	2301      	movs	r3, #1
 80020f6:	9901      	ldr	r1, [sp, #4]
 80020f8:	9800      	ldr	r0, [sp, #0]
 80020fa:	9f08      	ldr	r7, [sp, #32]
 80020fc:	3219      	adds	r2, #25
 80020fe:	47b8      	blx	r7
 8002100:	3001      	adds	r0, #1
 8002102:	d1f0      	bne.n	80020e6 <_printf_common+0x8a>
 8002104:	2001      	movs	r0, #1
 8002106:	4240      	negs	r0, r0
 8002108:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800210a:	2030      	movs	r0, #48	@ 0x30
 800210c:	18e1      	adds	r1, r4, r3
 800210e:	3143      	adds	r1, #67	@ 0x43
 8002110:	7008      	strb	r0, [r1, #0]
 8002112:	0021      	movs	r1, r4
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	3145      	adds	r1, #69	@ 0x45
 8002118:	7809      	ldrb	r1, [r1, #0]
 800211a:	18a2      	adds	r2, r4, r2
 800211c:	3243      	adds	r2, #67	@ 0x43
 800211e:	3302      	adds	r3, #2
 8002120:	7011      	strb	r1, [r2, #0]
 8002122:	e7c1      	b.n	80020a8 <_printf_common+0x4c>
 8002124:	0022      	movs	r2, r4
 8002126:	2301      	movs	r3, #1
 8002128:	9901      	ldr	r1, [sp, #4]
 800212a:	9800      	ldr	r0, [sp, #0]
 800212c:	9f08      	ldr	r7, [sp, #32]
 800212e:	321a      	adds	r2, #26
 8002130:	47b8      	blx	r7
 8002132:	3001      	adds	r0, #1
 8002134:	d0e6      	beq.n	8002104 <_printf_common+0xa8>
 8002136:	3601      	adds	r6, #1
 8002138:	e7d1      	b.n	80020de <_printf_common+0x82>
	...

0800213c <_printf_i>:
 800213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213e:	b08b      	sub	sp, #44	@ 0x2c
 8002140:	9206      	str	r2, [sp, #24]
 8002142:	000a      	movs	r2, r1
 8002144:	3243      	adds	r2, #67	@ 0x43
 8002146:	9307      	str	r3, [sp, #28]
 8002148:	9005      	str	r0, [sp, #20]
 800214a:	9203      	str	r2, [sp, #12]
 800214c:	7e0a      	ldrb	r2, [r1, #24]
 800214e:	000c      	movs	r4, r1
 8002150:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002152:	2a78      	cmp	r2, #120	@ 0x78
 8002154:	d809      	bhi.n	800216a <_printf_i+0x2e>
 8002156:	2a62      	cmp	r2, #98	@ 0x62
 8002158:	d80b      	bhi.n	8002172 <_printf_i+0x36>
 800215a:	2a00      	cmp	r2, #0
 800215c:	d100      	bne.n	8002160 <_printf_i+0x24>
 800215e:	e0bc      	b.n	80022da <_printf_i+0x19e>
 8002160:	497b      	ldr	r1, [pc, #492]	@ (8002350 <_printf_i+0x214>)
 8002162:	9104      	str	r1, [sp, #16]
 8002164:	2a58      	cmp	r2, #88	@ 0x58
 8002166:	d100      	bne.n	800216a <_printf_i+0x2e>
 8002168:	e090      	b.n	800228c <_printf_i+0x150>
 800216a:	0025      	movs	r5, r4
 800216c:	3542      	adds	r5, #66	@ 0x42
 800216e:	702a      	strb	r2, [r5, #0]
 8002170:	e022      	b.n	80021b8 <_printf_i+0x7c>
 8002172:	0010      	movs	r0, r2
 8002174:	3863      	subs	r0, #99	@ 0x63
 8002176:	2815      	cmp	r0, #21
 8002178:	d8f7      	bhi.n	800216a <_printf_i+0x2e>
 800217a:	f7fd ffcd 	bl	8000118 <__gnu_thumb1_case_shi>
 800217e:	0016      	.short	0x0016
 8002180:	fff6001f 	.word	0xfff6001f
 8002184:	fff6fff6 	.word	0xfff6fff6
 8002188:	001ffff6 	.word	0x001ffff6
 800218c:	fff6fff6 	.word	0xfff6fff6
 8002190:	fff6fff6 	.word	0xfff6fff6
 8002194:	003600a1 	.word	0x003600a1
 8002198:	fff60080 	.word	0xfff60080
 800219c:	00b2fff6 	.word	0x00b2fff6
 80021a0:	0036fff6 	.word	0x0036fff6
 80021a4:	fff6fff6 	.word	0xfff6fff6
 80021a8:	0084      	.short	0x0084
 80021aa:	0025      	movs	r5, r4
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	3542      	adds	r5, #66	@ 0x42
 80021b0:	1d11      	adds	r1, r2, #4
 80021b2:	6019      	str	r1, [r3, #0]
 80021b4:	6813      	ldr	r3, [r2, #0]
 80021b6:	702b      	strb	r3, [r5, #0]
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0a0      	b.n	80022fe <_printf_i+0x1c2>
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	6809      	ldr	r1, [r1, #0]
 80021c0:	1d02      	adds	r2, r0, #4
 80021c2:	060d      	lsls	r5, r1, #24
 80021c4:	d50b      	bpl.n	80021de <_printf_i+0xa2>
 80021c6:	6806      	ldr	r6, [r0, #0]
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	2e00      	cmp	r6, #0
 80021cc:	da03      	bge.n	80021d6 <_printf_i+0x9a>
 80021ce:	232d      	movs	r3, #45	@ 0x2d
 80021d0:	9a03      	ldr	r2, [sp, #12]
 80021d2:	4276      	negs	r6, r6
 80021d4:	7013      	strb	r3, [r2, #0]
 80021d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002350 <_printf_i+0x214>)
 80021d8:	270a      	movs	r7, #10
 80021da:	9304      	str	r3, [sp, #16]
 80021dc:	e018      	b.n	8002210 <_printf_i+0xd4>
 80021de:	6806      	ldr	r6, [r0, #0]
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	0649      	lsls	r1, r1, #25
 80021e4:	d5f1      	bpl.n	80021ca <_printf_i+0x8e>
 80021e6:	b236      	sxth	r6, r6
 80021e8:	e7ef      	b.n	80021ca <_printf_i+0x8e>
 80021ea:	6808      	ldr	r0, [r1, #0]
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	c940      	ldmia	r1!, {r6}
 80021f0:	0605      	lsls	r5, r0, #24
 80021f2:	d402      	bmi.n	80021fa <_printf_i+0xbe>
 80021f4:	0640      	lsls	r0, r0, #25
 80021f6:	d500      	bpl.n	80021fa <_printf_i+0xbe>
 80021f8:	b2b6      	uxth	r6, r6
 80021fa:	6019      	str	r1, [r3, #0]
 80021fc:	4b54      	ldr	r3, [pc, #336]	@ (8002350 <_printf_i+0x214>)
 80021fe:	270a      	movs	r7, #10
 8002200:	9304      	str	r3, [sp, #16]
 8002202:	2a6f      	cmp	r2, #111	@ 0x6f
 8002204:	d100      	bne.n	8002208 <_printf_i+0xcc>
 8002206:	3f02      	subs	r7, #2
 8002208:	0023      	movs	r3, r4
 800220a:	2200      	movs	r2, #0
 800220c:	3343      	adds	r3, #67	@ 0x43
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	6863      	ldr	r3, [r4, #4]
 8002212:	60a3      	str	r3, [r4, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db03      	blt.n	8002220 <_printf_i+0xe4>
 8002218:	2104      	movs	r1, #4
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	438a      	bics	r2, r1
 800221e:	6022      	str	r2, [r4, #0]
 8002220:	2e00      	cmp	r6, #0
 8002222:	d102      	bne.n	800222a <_printf_i+0xee>
 8002224:	9d03      	ldr	r5, [sp, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <_printf_i+0x108>
 800222a:	9d03      	ldr	r5, [sp, #12]
 800222c:	0030      	movs	r0, r6
 800222e:	0039      	movs	r1, r7
 8002230:	f7fe f802 	bl	8000238 <__aeabi_uidivmod>
 8002234:	9b04      	ldr	r3, [sp, #16]
 8002236:	3d01      	subs	r5, #1
 8002238:	5c5b      	ldrb	r3, [r3, r1]
 800223a:	702b      	strb	r3, [r5, #0]
 800223c:	0033      	movs	r3, r6
 800223e:	0006      	movs	r6, r0
 8002240:	429f      	cmp	r7, r3
 8002242:	d9f3      	bls.n	800222c <_printf_i+0xf0>
 8002244:	2f08      	cmp	r7, #8
 8002246:	d109      	bne.n	800225c <_printf_i+0x120>
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	07db      	lsls	r3, r3, #31
 800224c:	d506      	bpl.n	800225c <_printf_i+0x120>
 800224e:	6862      	ldr	r2, [r4, #4]
 8002250:	6923      	ldr	r3, [r4, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	dc02      	bgt.n	800225c <_printf_i+0x120>
 8002256:	2330      	movs	r3, #48	@ 0x30
 8002258:	3d01      	subs	r5, #1
 800225a:	702b      	strb	r3, [r5, #0]
 800225c:	9b03      	ldr	r3, [sp, #12]
 800225e:	1b5b      	subs	r3, r3, r5
 8002260:	6123      	str	r3, [r4, #16]
 8002262:	9b07      	ldr	r3, [sp, #28]
 8002264:	0021      	movs	r1, r4
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	9805      	ldr	r0, [sp, #20]
 800226a:	9b06      	ldr	r3, [sp, #24]
 800226c:	aa09      	add	r2, sp, #36	@ 0x24
 800226e:	f7ff fef5 	bl	800205c <_printf_common>
 8002272:	3001      	adds	r0, #1
 8002274:	d148      	bne.n	8002308 <_printf_i+0x1cc>
 8002276:	2001      	movs	r0, #1
 8002278:	4240      	negs	r0, r0
 800227a:	b00b      	add	sp, #44	@ 0x2c
 800227c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227e:	2220      	movs	r2, #32
 8002280:	6809      	ldr	r1, [r1, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	6022      	str	r2, [r4, #0]
 8002286:	2278      	movs	r2, #120	@ 0x78
 8002288:	4932      	ldr	r1, [pc, #200]	@ (8002354 <_printf_i+0x218>)
 800228a:	9104      	str	r1, [sp, #16]
 800228c:	0021      	movs	r1, r4
 800228e:	3145      	adds	r1, #69	@ 0x45
 8002290:	700a      	strb	r2, [r1, #0]
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	6822      	ldr	r2, [r4, #0]
 8002296:	c940      	ldmia	r1!, {r6}
 8002298:	0610      	lsls	r0, r2, #24
 800229a:	d402      	bmi.n	80022a2 <_printf_i+0x166>
 800229c:	0650      	lsls	r0, r2, #25
 800229e:	d500      	bpl.n	80022a2 <_printf_i+0x166>
 80022a0:	b2b6      	uxth	r6, r6
 80022a2:	6019      	str	r1, [r3, #0]
 80022a4:	07d3      	lsls	r3, r2, #31
 80022a6:	d502      	bpl.n	80022ae <_printf_i+0x172>
 80022a8:	2320      	movs	r3, #32
 80022aa:	4313      	orrs	r3, r2
 80022ac:	6023      	str	r3, [r4, #0]
 80022ae:	2e00      	cmp	r6, #0
 80022b0:	d001      	beq.n	80022b6 <_printf_i+0x17a>
 80022b2:	2710      	movs	r7, #16
 80022b4:	e7a8      	b.n	8002208 <_printf_i+0xcc>
 80022b6:	2220      	movs	r2, #32
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	4393      	bics	r3, r2
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	e7f8      	b.n	80022b2 <_printf_i+0x176>
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	680d      	ldr	r5, [r1, #0]
 80022c4:	1d10      	adds	r0, r2, #4
 80022c6:	6949      	ldr	r1, [r1, #20]
 80022c8:	6018      	str	r0, [r3, #0]
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	062e      	lsls	r6, r5, #24
 80022ce:	d501      	bpl.n	80022d4 <_printf_i+0x198>
 80022d0:	6019      	str	r1, [r3, #0]
 80022d2:	e002      	b.n	80022da <_printf_i+0x19e>
 80022d4:	066d      	lsls	r5, r5, #25
 80022d6:	d5fb      	bpl.n	80022d0 <_printf_i+0x194>
 80022d8:	8019      	strh	r1, [r3, #0]
 80022da:	2300      	movs	r3, #0
 80022dc:	9d03      	ldr	r5, [sp, #12]
 80022de:	6123      	str	r3, [r4, #16]
 80022e0:	e7bf      	b.n	8002262 <_printf_i+0x126>
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	1d11      	adds	r1, r2, #4
 80022e6:	6019      	str	r1, [r3, #0]
 80022e8:	6815      	ldr	r5, [r2, #0]
 80022ea:	2100      	movs	r1, #0
 80022ec:	0028      	movs	r0, r5
 80022ee:	6862      	ldr	r2, [r4, #4]
 80022f0:	f000 fa14 	bl	800271c <memchr>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d001      	beq.n	80022fc <_printf_i+0x1c0>
 80022f8:	1b40      	subs	r0, r0, r5
 80022fa:	6060      	str	r0, [r4, #4]
 80022fc:	6863      	ldr	r3, [r4, #4]
 80022fe:	6123      	str	r3, [r4, #16]
 8002300:	2300      	movs	r3, #0
 8002302:	9a03      	ldr	r2, [sp, #12]
 8002304:	7013      	strb	r3, [r2, #0]
 8002306:	e7ac      	b.n	8002262 <_printf_i+0x126>
 8002308:	002a      	movs	r2, r5
 800230a:	6923      	ldr	r3, [r4, #16]
 800230c:	9906      	ldr	r1, [sp, #24]
 800230e:	9805      	ldr	r0, [sp, #20]
 8002310:	9d07      	ldr	r5, [sp, #28]
 8002312:	47a8      	blx	r5
 8002314:	3001      	adds	r0, #1
 8002316:	d0ae      	beq.n	8002276 <_printf_i+0x13a>
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	079b      	lsls	r3, r3, #30
 800231c:	d415      	bmi.n	800234a <_printf_i+0x20e>
 800231e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002320:	68e0      	ldr	r0, [r4, #12]
 8002322:	4298      	cmp	r0, r3
 8002324:	daa9      	bge.n	800227a <_printf_i+0x13e>
 8002326:	0018      	movs	r0, r3
 8002328:	e7a7      	b.n	800227a <_printf_i+0x13e>
 800232a:	0022      	movs	r2, r4
 800232c:	2301      	movs	r3, #1
 800232e:	9906      	ldr	r1, [sp, #24]
 8002330:	9805      	ldr	r0, [sp, #20]
 8002332:	9e07      	ldr	r6, [sp, #28]
 8002334:	3219      	adds	r2, #25
 8002336:	47b0      	blx	r6
 8002338:	3001      	adds	r0, #1
 800233a:	d09c      	beq.n	8002276 <_printf_i+0x13a>
 800233c:	3501      	adds	r5, #1
 800233e:	68e3      	ldr	r3, [r4, #12]
 8002340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	42ab      	cmp	r3, r5
 8002346:	dcf0      	bgt.n	800232a <_printf_i+0x1ee>
 8002348:	e7e9      	b.n	800231e <_printf_i+0x1e2>
 800234a:	2500      	movs	r5, #0
 800234c:	e7f7      	b.n	800233e <_printf_i+0x202>
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	08002dbf 	.word	0x08002dbf
 8002354:	08002dd0 	.word	0x08002dd0

08002358 <__sflush_r>:
 8002358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800235a:	220c      	movs	r2, #12
 800235c:	5e8b      	ldrsh	r3, [r1, r2]
 800235e:	0005      	movs	r5, r0
 8002360:	000c      	movs	r4, r1
 8002362:	071a      	lsls	r2, r3, #28
 8002364:	d456      	bmi.n	8002414 <__sflush_r+0xbc>
 8002366:	684a      	ldr	r2, [r1, #4]
 8002368:	2a00      	cmp	r2, #0
 800236a:	dc02      	bgt.n	8002372 <__sflush_r+0x1a>
 800236c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800236e:	2a00      	cmp	r2, #0
 8002370:	dd4e      	ble.n	8002410 <__sflush_r+0xb8>
 8002372:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002374:	2f00      	cmp	r7, #0
 8002376:	d04b      	beq.n	8002410 <__sflush_r+0xb8>
 8002378:	2200      	movs	r2, #0
 800237a:	2080      	movs	r0, #128	@ 0x80
 800237c:	682e      	ldr	r6, [r5, #0]
 800237e:	602a      	str	r2, [r5, #0]
 8002380:	001a      	movs	r2, r3
 8002382:	0140      	lsls	r0, r0, #5
 8002384:	6a21      	ldr	r1, [r4, #32]
 8002386:	4002      	ands	r2, r0
 8002388:	4203      	tst	r3, r0
 800238a:	d033      	beq.n	80023f4 <__sflush_r+0x9c>
 800238c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800238e:	89a3      	ldrh	r3, [r4, #12]
 8002390:	075b      	lsls	r3, r3, #29
 8002392:	d506      	bpl.n	80023a2 <__sflush_r+0x4a>
 8002394:	6863      	ldr	r3, [r4, #4]
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <__sflush_r+0x4a>
 800239e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023a0:	1ad2      	subs	r2, r2, r3
 80023a2:	2300      	movs	r3, #0
 80023a4:	0028      	movs	r0, r5
 80023a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80023a8:	6a21      	ldr	r1, [r4, #32]
 80023aa:	47b8      	blx	r7
 80023ac:	89a2      	ldrh	r2, [r4, #12]
 80023ae:	1c43      	adds	r3, r0, #1
 80023b0:	d106      	bne.n	80023c0 <__sflush_r+0x68>
 80023b2:	6829      	ldr	r1, [r5, #0]
 80023b4:	291d      	cmp	r1, #29
 80023b6:	d846      	bhi.n	8002446 <__sflush_r+0xee>
 80023b8:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <__sflush_r+0x108>)
 80023ba:	410b      	asrs	r3, r1
 80023bc:	07db      	lsls	r3, r3, #31
 80023be:	d442      	bmi.n	8002446 <__sflush_r+0xee>
 80023c0:	2300      	movs	r3, #0
 80023c2:	6063      	str	r3, [r4, #4]
 80023c4:	6923      	ldr	r3, [r4, #16]
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	04d2      	lsls	r2, r2, #19
 80023ca:	d505      	bpl.n	80023d8 <__sflush_r+0x80>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d102      	bne.n	80023d6 <__sflush_r+0x7e>
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d100      	bne.n	80023d8 <__sflush_r+0x80>
 80023d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80023d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023da:	602e      	str	r6, [r5, #0]
 80023dc:	2900      	cmp	r1, #0
 80023de:	d017      	beq.n	8002410 <__sflush_r+0xb8>
 80023e0:	0023      	movs	r3, r4
 80023e2:	3344      	adds	r3, #68	@ 0x44
 80023e4:	4299      	cmp	r1, r3
 80023e6:	d002      	beq.n	80023ee <__sflush_r+0x96>
 80023e8:	0028      	movs	r0, r5
 80023ea:	f7ff fbed 	bl	8001bc8 <_free_r>
 80023ee:	2300      	movs	r3, #0
 80023f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80023f2:	e00d      	b.n	8002410 <__sflush_r+0xb8>
 80023f4:	2301      	movs	r3, #1
 80023f6:	0028      	movs	r0, r5
 80023f8:	47b8      	blx	r7
 80023fa:	0002      	movs	r2, r0
 80023fc:	1c43      	adds	r3, r0, #1
 80023fe:	d1c6      	bne.n	800238e <__sflush_r+0x36>
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0c3      	beq.n	800238e <__sflush_r+0x36>
 8002406:	2b1d      	cmp	r3, #29
 8002408:	d001      	beq.n	800240e <__sflush_r+0xb6>
 800240a:	2b16      	cmp	r3, #22
 800240c:	d11a      	bne.n	8002444 <__sflush_r+0xec>
 800240e:	602e      	str	r6, [r5, #0]
 8002410:	2000      	movs	r0, #0
 8002412:	e01e      	b.n	8002452 <__sflush_r+0xfa>
 8002414:	690e      	ldr	r6, [r1, #16]
 8002416:	2e00      	cmp	r6, #0
 8002418:	d0fa      	beq.n	8002410 <__sflush_r+0xb8>
 800241a:	680f      	ldr	r7, [r1, #0]
 800241c:	600e      	str	r6, [r1, #0]
 800241e:	1bba      	subs	r2, r7, r6
 8002420:	9201      	str	r2, [sp, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	079b      	lsls	r3, r3, #30
 8002426:	d100      	bne.n	800242a <__sflush_r+0xd2>
 8002428:	694a      	ldr	r2, [r1, #20]
 800242a:	60a2      	str	r2, [r4, #8]
 800242c:	9b01      	ldr	r3, [sp, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	ddee      	ble.n	8002410 <__sflush_r+0xb8>
 8002432:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002434:	0032      	movs	r2, r6
 8002436:	001f      	movs	r7, r3
 8002438:	0028      	movs	r0, r5
 800243a:	9b01      	ldr	r3, [sp, #4]
 800243c:	6a21      	ldr	r1, [r4, #32]
 800243e:	47b8      	blx	r7
 8002440:	2800      	cmp	r0, #0
 8002442:	dc07      	bgt.n	8002454 <__sflush_r+0xfc>
 8002444:	89a2      	ldrh	r2, [r4, #12]
 8002446:	2340      	movs	r3, #64	@ 0x40
 8002448:	2001      	movs	r0, #1
 800244a:	4313      	orrs	r3, r2
 800244c:	b21b      	sxth	r3, r3
 800244e:	81a3      	strh	r3, [r4, #12]
 8002450:	4240      	negs	r0, r0
 8002452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	1836      	adds	r6, r6, r0
 8002458:	1a1b      	subs	r3, r3, r0
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	e7e6      	b.n	800242c <__sflush_r+0xd4>
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	dfbffffe 	.word	0xdfbffffe

08002464 <_fflush_r>:
 8002464:	690b      	ldr	r3, [r1, #16]
 8002466:	b570      	push	{r4, r5, r6, lr}
 8002468:	0005      	movs	r5, r0
 800246a:	000c      	movs	r4, r1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_fflush_r+0x12>
 8002470:	2500      	movs	r5, #0
 8002472:	0028      	movs	r0, r5
 8002474:	bd70      	pop	{r4, r5, r6, pc}
 8002476:	2800      	cmp	r0, #0
 8002478:	d004      	beq.n	8002484 <_fflush_r+0x20>
 800247a:	6a03      	ldr	r3, [r0, #32]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <_fflush_r+0x20>
 8002480:	f7ff f81a 	bl	80014b8 <__sinit>
 8002484:	220c      	movs	r2, #12
 8002486:	5ea3      	ldrsh	r3, [r4, r2]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f1      	beq.n	8002470 <_fflush_r+0xc>
 800248c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800248e:	07d2      	lsls	r2, r2, #31
 8002490:	d404      	bmi.n	800249c <_fflush_r+0x38>
 8002492:	059b      	lsls	r3, r3, #22
 8002494:	d402      	bmi.n	800249c <_fflush_r+0x38>
 8002496:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002498:	f7ff fb75 	bl	8001b86 <__retarget_lock_acquire_recursive>
 800249c:	0028      	movs	r0, r5
 800249e:	0021      	movs	r1, r4
 80024a0:	f7ff ff5a 	bl	8002358 <__sflush_r>
 80024a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024a6:	0005      	movs	r5, r0
 80024a8:	07db      	lsls	r3, r3, #31
 80024aa:	d4e2      	bmi.n	8002472 <_fflush_r+0xe>
 80024ac:	89a3      	ldrh	r3, [r4, #12]
 80024ae:	059b      	lsls	r3, r3, #22
 80024b0:	d4df      	bmi.n	8002472 <_fflush_r+0xe>
 80024b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024b4:	f7ff fb68 	bl	8001b88 <__retarget_lock_release_recursive>
 80024b8:	e7db      	b.n	8002472 <_fflush_r+0xe>
	...

080024bc <fiprintf>:
 80024bc:	b40e      	push	{r1, r2, r3}
 80024be:	b517      	push	{r0, r1, r2, r4, lr}
 80024c0:	4c05      	ldr	r4, [pc, #20]	@ (80024d8 <fiprintf+0x1c>)
 80024c2:	ab05      	add	r3, sp, #20
 80024c4:	cb04      	ldmia	r3!, {r2}
 80024c6:	0001      	movs	r1, r0
 80024c8:	6820      	ldr	r0, [r4, #0]
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	f7ff fcaa 	bl	8001e24 <_vfiprintf_r>
 80024d0:	bc1e      	pop	{r1, r2, r3, r4}
 80024d2:	bc08      	pop	{r3}
 80024d4:	b003      	add	sp, #12
 80024d6:	4718      	bx	r3
 80024d8:	20000010 	.word	0x20000010

080024dc <_getc_r>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	0005      	movs	r5, r0
 80024e0:	000c      	movs	r4, r1
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d004      	beq.n	80024f0 <_getc_r+0x14>
 80024e6:	6a03      	ldr	r3, [r0, #32]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <_getc_r+0x14>
 80024ec:	f7fe ffe4 	bl	80014b8 <__sinit>
 80024f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024f2:	07db      	lsls	r3, r3, #31
 80024f4:	d405      	bmi.n	8002502 <_getc_r+0x26>
 80024f6:	89a3      	ldrh	r3, [r4, #12]
 80024f8:	059b      	lsls	r3, r3, #22
 80024fa:	d402      	bmi.n	8002502 <_getc_r+0x26>
 80024fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024fe:	f7ff fb42 	bl	8001b86 <__retarget_lock_acquire_recursive>
 8002502:	6863      	ldr	r3, [r4, #4]
 8002504:	3b01      	subs	r3, #1
 8002506:	6063      	str	r3, [r4, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	da0f      	bge.n	800252c <_getc_r+0x50>
 800250c:	0028      	movs	r0, r5
 800250e:	0021      	movs	r1, r4
 8002510:	f000 f8b3 	bl	800267a <__srget_r>
 8002514:	0005      	movs	r5, r0
 8002516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002518:	07db      	lsls	r3, r3, #31
 800251a:	d405      	bmi.n	8002528 <_getc_r+0x4c>
 800251c:	89a3      	ldrh	r3, [r4, #12]
 800251e:	059b      	lsls	r3, r3, #22
 8002520:	d402      	bmi.n	8002528 <_getc_r+0x4c>
 8002522:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002524:	f7ff fb30 	bl	8001b88 <__retarget_lock_release_recursive>
 8002528:	0028      	movs	r0, r5
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	6022      	str	r2, [r4, #0]
 8002532:	781d      	ldrb	r5, [r3, #0]
 8002534:	e7ef      	b.n	8002516 <_getc_r+0x3a>
	...

08002538 <__swhatbuf_r>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	000e      	movs	r6, r1
 800253c:	001d      	movs	r5, r3
 800253e:	230e      	movs	r3, #14
 8002540:	5ec9      	ldrsh	r1, [r1, r3]
 8002542:	0014      	movs	r4, r2
 8002544:	b096      	sub	sp, #88	@ 0x58
 8002546:	2900      	cmp	r1, #0
 8002548:	da0c      	bge.n	8002564 <__swhatbuf_r+0x2c>
 800254a:	89b2      	ldrh	r2, [r6, #12]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	0011      	movs	r1, r2
 8002550:	4019      	ands	r1, r3
 8002552:	421a      	tst	r2, r3
 8002554:	d114      	bne.n	8002580 <__swhatbuf_r+0x48>
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	2000      	movs	r0, #0
 800255c:	6029      	str	r1, [r5, #0]
 800255e:	6023      	str	r3, [r4, #0]
 8002560:	b016      	add	sp, #88	@ 0x58
 8002562:	bd70      	pop	{r4, r5, r6, pc}
 8002564:	466a      	mov	r2, sp
 8002566:	f000 f8a3 	bl	80026b0 <_fstat_r>
 800256a:	2800      	cmp	r0, #0
 800256c:	dbed      	blt.n	800254a <__swhatbuf_r+0x12>
 800256e:	23f0      	movs	r3, #240	@ 0xf0
 8002570:	9901      	ldr	r1, [sp, #4]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	4019      	ands	r1, r3
 8002576:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__swhatbuf_r+0x50>)
 8002578:	18c9      	adds	r1, r1, r3
 800257a:	424b      	negs	r3, r1
 800257c:	4159      	adcs	r1, r3
 800257e:	e7ea      	b.n	8002556 <__swhatbuf_r+0x1e>
 8002580:	2100      	movs	r1, #0
 8002582:	2340      	movs	r3, #64	@ 0x40
 8002584:	e7e9      	b.n	800255a <__swhatbuf_r+0x22>
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	ffffe000 	.word	0xffffe000

0800258c <__smakebuf_r>:
 800258c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258e:	2602      	movs	r6, #2
 8002590:	898b      	ldrh	r3, [r1, #12]
 8002592:	0005      	movs	r5, r0
 8002594:	000c      	movs	r4, r1
 8002596:	b085      	sub	sp, #20
 8002598:	4233      	tst	r3, r6
 800259a:	d007      	beq.n	80025ac <__smakebuf_r+0x20>
 800259c:	0023      	movs	r3, r4
 800259e:	3347      	adds	r3, #71	@ 0x47
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	6123      	str	r3, [r4, #16]
 80025a4:	2301      	movs	r3, #1
 80025a6:	6163      	str	r3, [r4, #20]
 80025a8:	b005      	add	sp, #20
 80025aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ac:	ab03      	add	r3, sp, #12
 80025ae:	aa02      	add	r2, sp, #8
 80025b0:	f7ff ffc2 	bl	8002538 <__swhatbuf_r>
 80025b4:	9f02      	ldr	r7, [sp, #8]
 80025b6:	9001      	str	r0, [sp, #4]
 80025b8:	0039      	movs	r1, r7
 80025ba:	0028      	movs	r0, r5
 80025bc:	f7ff fb7a 	bl	8001cb4 <_malloc_r>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d108      	bne.n	80025d6 <__smakebuf_r+0x4a>
 80025c4:	220c      	movs	r2, #12
 80025c6:	5ea3      	ldrsh	r3, [r4, r2]
 80025c8:	059a      	lsls	r2, r3, #22
 80025ca:	d4ed      	bmi.n	80025a8 <__smakebuf_r+0x1c>
 80025cc:	2203      	movs	r2, #3
 80025ce:	4393      	bics	r3, r2
 80025d0:	431e      	orrs	r6, r3
 80025d2:	81a6      	strh	r6, [r4, #12]
 80025d4:	e7e2      	b.n	800259c <__smakebuf_r+0x10>
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	89a2      	ldrh	r2, [r4, #12]
 80025da:	6020      	str	r0, [r4, #0]
 80025dc:	4313      	orrs	r3, r2
 80025de:	81a3      	strh	r3, [r4, #12]
 80025e0:	9b03      	ldr	r3, [sp, #12]
 80025e2:	6120      	str	r0, [r4, #16]
 80025e4:	6167      	str	r7, [r4, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <__smakebuf_r+0x78>
 80025ea:	0028      	movs	r0, r5
 80025ec:	230e      	movs	r3, #14
 80025ee:	5ee1      	ldrsh	r1, [r4, r3]
 80025f0:	f000 f870 	bl	80026d4 <_isatty_r>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d005      	beq.n	8002604 <__smakebuf_r+0x78>
 80025f8:	2303      	movs	r3, #3
 80025fa:	89a2      	ldrh	r2, [r4, #12]
 80025fc:	439a      	bics	r2, r3
 80025fe:	3b02      	subs	r3, #2
 8002600:	4313      	orrs	r3, r2
 8002602:	81a3      	strh	r3, [r4, #12]
 8002604:	89a3      	ldrh	r3, [r4, #12]
 8002606:	9a01      	ldr	r2, [sp, #4]
 8002608:	4313      	orrs	r3, r2
 800260a:	81a3      	strh	r3, [r4, #12]
 800260c:	e7cc      	b.n	80025a8 <__smakebuf_r+0x1c>

0800260e <_putc_r>:
 800260e:	b570      	push	{r4, r5, r6, lr}
 8002610:	0006      	movs	r6, r0
 8002612:	000d      	movs	r5, r1
 8002614:	0014      	movs	r4, r2
 8002616:	2800      	cmp	r0, #0
 8002618:	d004      	beq.n	8002624 <_putc_r+0x16>
 800261a:	6a03      	ldr	r3, [r0, #32]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <_putc_r+0x16>
 8002620:	f7fe ff4a 	bl	80014b8 <__sinit>
 8002624:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002626:	07db      	lsls	r3, r3, #31
 8002628:	d405      	bmi.n	8002636 <_putc_r+0x28>
 800262a:	89a3      	ldrh	r3, [r4, #12]
 800262c:	059b      	lsls	r3, r3, #22
 800262e:	d402      	bmi.n	8002636 <_putc_r+0x28>
 8002630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002632:	f7ff faa8 	bl	8001b86 <__retarget_lock_acquire_recursive>
 8002636:	68a3      	ldr	r3, [r4, #8]
 8002638:	3b01      	subs	r3, #1
 800263a:	60a3      	str	r3, [r4, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	da05      	bge.n	800264c <_putc_r+0x3e>
 8002640:	69a2      	ldr	r2, [r4, #24]
 8002642:	4293      	cmp	r3, r2
 8002644:	db12      	blt.n	800266c <_putc_r+0x5e>
 8002646:	b2eb      	uxtb	r3, r5
 8002648:	2b0a      	cmp	r3, #10
 800264a:	d00f      	beq.n	800266c <_putc_r+0x5e>
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	6022      	str	r2, [r4, #0]
 8002652:	701d      	strb	r5, [r3, #0]
 8002654:	b2ed      	uxtb	r5, r5
 8002656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002658:	07db      	lsls	r3, r3, #31
 800265a:	d405      	bmi.n	8002668 <_putc_r+0x5a>
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	059b      	lsls	r3, r3, #22
 8002660:	d402      	bmi.n	8002668 <_putc_r+0x5a>
 8002662:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002664:	f7ff fa90 	bl	8001b88 <__retarget_lock_release_recursive>
 8002668:	0028      	movs	r0, r5
 800266a:	bd70      	pop	{r4, r5, r6, pc}
 800266c:	0029      	movs	r1, r5
 800266e:	0022      	movs	r2, r4
 8002670:	0030      	movs	r0, r6
 8002672:	f7ff f8db 	bl	800182c <__swbuf_r>
 8002676:	0005      	movs	r5, r0
 8002678:	e7ed      	b.n	8002656 <_putc_r+0x48>

0800267a <__srget_r>:
 800267a:	b570      	push	{r4, r5, r6, lr}
 800267c:	0005      	movs	r5, r0
 800267e:	000c      	movs	r4, r1
 8002680:	2800      	cmp	r0, #0
 8002682:	d004      	beq.n	800268e <__srget_r+0x14>
 8002684:	6a03      	ldr	r3, [r0, #32]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <__srget_r+0x14>
 800268a:	f7fe ff15 	bl	80014b8 <__sinit>
 800268e:	0021      	movs	r1, r4
 8002690:	0028      	movs	r0, r5
 8002692:	f000 f863 	bl	800275c <__srefill_r>
 8002696:	2800      	cmp	r0, #0
 8002698:	d107      	bne.n	80026aa <__srget_r+0x30>
 800269a:	6863      	ldr	r3, [r4, #4]
 800269c:	3b01      	subs	r3, #1
 800269e:	6063      	str	r3, [r4, #4]
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	6022      	str	r2, [r4, #0]
 80026a6:	7818      	ldrb	r0, [r3, #0]
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
 80026aa:	2001      	movs	r0, #1
 80026ac:	4240      	negs	r0, r0
 80026ae:	e7fb      	b.n	80026a8 <__srget_r+0x2e>

080026b0 <_fstat_r>:
 80026b0:	2300      	movs	r3, #0
 80026b2:	b570      	push	{r4, r5, r6, lr}
 80026b4:	4d06      	ldr	r5, [pc, #24]	@ (80026d0 <_fstat_r+0x20>)
 80026b6:	0004      	movs	r4, r0
 80026b8:	0008      	movs	r0, r1
 80026ba:	0011      	movs	r1, r2
 80026bc:	602b      	str	r3, [r5, #0]
 80026be:	f7fe fbf7 	bl	8000eb0 <_fstat>
 80026c2:	1c43      	adds	r3, r0, #1
 80026c4:	d103      	bne.n	80026ce <_fstat_r+0x1e>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d000      	beq.n	80026ce <_fstat_r+0x1e>
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	200002d4 	.word	0x200002d4

080026d4 <_isatty_r>:
 80026d4:	2300      	movs	r3, #0
 80026d6:	b570      	push	{r4, r5, r6, lr}
 80026d8:	4d06      	ldr	r5, [pc, #24]	@ (80026f4 <_isatty_r+0x20>)
 80026da:	0004      	movs	r4, r0
 80026dc:	0008      	movs	r0, r1
 80026de:	602b      	str	r3, [r5, #0]
 80026e0:	f7fe fbf4 	bl	8000ecc <_isatty>
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d103      	bne.n	80026f0 <_isatty_r+0x1c>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d000      	beq.n	80026f0 <_isatty_r+0x1c>
 80026ee:	6023      	str	r3, [r4, #0]
 80026f0:	bd70      	pop	{r4, r5, r6, pc}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	200002d4 	.word	0x200002d4

080026f8 <_sbrk_r>:
 80026f8:	2300      	movs	r3, #0
 80026fa:	b570      	push	{r4, r5, r6, lr}
 80026fc:	4d06      	ldr	r5, [pc, #24]	@ (8002718 <_sbrk_r+0x20>)
 80026fe:	0004      	movs	r4, r0
 8002700:	0008      	movs	r0, r1
 8002702:	602b      	str	r3, [r5, #0]
 8002704:	f7fe fbf6 	bl	8000ef4 <_sbrk>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d103      	bne.n	8002714 <_sbrk_r+0x1c>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d000      	beq.n	8002714 <_sbrk_r+0x1c>
 8002712:	6023      	str	r3, [r4, #0]
 8002714:	bd70      	pop	{r4, r5, r6, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	200002d4 	.word	0x200002d4

0800271c <memchr>:
 800271c:	b2c9      	uxtb	r1, r1
 800271e:	1882      	adds	r2, r0, r2
 8002720:	4290      	cmp	r0, r2
 8002722:	d101      	bne.n	8002728 <memchr+0xc>
 8002724:	2000      	movs	r0, #0
 8002726:	4770      	bx	lr
 8002728:	7803      	ldrb	r3, [r0, #0]
 800272a:	428b      	cmp	r3, r1
 800272c:	d0fb      	beq.n	8002726 <memchr+0xa>
 800272e:	3001      	adds	r0, #1
 8002730:	e7f6      	b.n	8002720 <memchr+0x4>

08002732 <abort>:
 8002732:	2006      	movs	r0, #6
 8002734:	b510      	push	{r4, lr}
 8002736:	f000 f8b1 	bl	800289c <raise>
 800273a:	2001      	movs	r0, #1
 800273c:	f7fe fb68 	bl	8000e10 <_exit>

08002740 <lflush>:
 8002740:	2209      	movs	r2, #9
 8002742:	898b      	ldrh	r3, [r1, #12]
 8002744:	2000      	movs	r0, #0
 8002746:	b510      	push	{r4, lr}
 8002748:	4013      	ands	r3, r2
 800274a:	4293      	cmp	r3, r2
 800274c:	d103      	bne.n	8002756 <lflush+0x16>
 800274e:	4b02      	ldr	r3, [pc, #8]	@ (8002758 <lflush+0x18>)
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	f7ff fe87 	bl	8002464 <_fflush_r>
 8002756:	bd10      	pop	{r4, pc}
 8002758:	20000010 	.word	0x20000010

0800275c <__srefill_r>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	0005      	movs	r5, r0
 8002760:	000c      	movs	r4, r1
 8002762:	2800      	cmp	r0, #0
 8002764:	d004      	beq.n	8002770 <__srefill_r+0x14>
 8002766:	6a03      	ldr	r3, [r0, #32]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <__srefill_r+0x14>
 800276c:	f7fe fea4 	bl	80014b8 <__sinit>
 8002770:	2300      	movs	r3, #0
 8002772:	6063      	str	r3, [r4, #4]
 8002774:	220c      	movs	r2, #12
 8002776:	5ea3      	ldrsh	r3, [r4, r2]
 8002778:	069a      	lsls	r2, r3, #26
 800277a:	d408      	bmi.n	800278e <__srefill_r+0x32>
 800277c:	075a      	lsls	r2, r3, #29
 800277e:	d449      	bmi.n	8002814 <__srefill_r+0xb8>
 8002780:	06da      	lsls	r2, r3, #27
 8002782:	d407      	bmi.n	8002794 <__srefill_r+0x38>
 8002784:	2209      	movs	r2, #9
 8002786:	602a      	str	r2, [r5, #0]
 8002788:	3237      	adds	r2, #55	@ 0x37
 800278a:	4313      	orrs	r3, r2
 800278c:	81a3      	strh	r3, [r4, #12]
 800278e:	2001      	movs	r0, #1
 8002790:	4240      	negs	r0, r0
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	2608      	movs	r6, #8
 8002796:	4233      	tst	r3, r6
 8002798:	d00a      	beq.n	80027b0 <__srefill_r+0x54>
 800279a:	0021      	movs	r1, r4
 800279c:	0028      	movs	r0, r5
 800279e:	f7ff fe61 	bl	8002464 <_fflush_r>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d1f3      	bne.n	800278e <__srefill_r+0x32>
 80027a6:	89a3      	ldrh	r3, [r4, #12]
 80027a8:	60a0      	str	r0, [r4, #8]
 80027aa:	43b3      	bics	r3, r6
 80027ac:	81a3      	strh	r3, [r4, #12]
 80027ae:	61a0      	str	r0, [r4, #24]
 80027b0:	2304      	movs	r3, #4
 80027b2:	89a2      	ldrh	r2, [r4, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	81a3      	strh	r3, [r4, #12]
 80027b8:	6923      	ldr	r3, [r4, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <__srefill_r+0x6a>
 80027be:	0021      	movs	r1, r4
 80027c0:	0028      	movs	r0, r5
 80027c2:	f7ff fee3 	bl	800258c <__smakebuf_r>
 80027c6:	230c      	movs	r3, #12
 80027c8:	5ee6      	ldrsh	r6, [r4, r3]
 80027ca:	07b3      	lsls	r3, r6, #30
 80027cc:	d00f      	beq.n	80027ee <__srefill_r+0x92>
 80027ce:	2301      	movs	r3, #1
 80027d0:	4a1a      	ldr	r2, [pc, #104]	@ (800283c <__srefill_r+0xe0>)
 80027d2:	81a3      	strh	r3, [r4, #12]
 80027d4:	491a      	ldr	r1, [pc, #104]	@ (8002840 <__srefill_r+0xe4>)
 80027d6:	481b      	ldr	r0, [pc, #108]	@ (8002844 <__srefill_r+0xe8>)
 80027d8:	f7fe fe86 	bl	80014e8 <_fwalk_sglue>
 80027dc:	2309      	movs	r3, #9
 80027de:	81a6      	strh	r6, [r4, #12]
 80027e0:	401e      	ands	r6, r3
 80027e2:	429e      	cmp	r6, r3
 80027e4:	d103      	bne.n	80027ee <__srefill_r+0x92>
 80027e6:	0021      	movs	r1, r4
 80027e8:	0028      	movs	r0, r5
 80027ea:	f7ff fdb5 	bl	8002358 <__sflush_r>
 80027ee:	6922      	ldr	r2, [r4, #16]
 80027f0:	0028      	movs	r0, r5
 80027f2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80027f4:	6963      	ldr	r3, [r4, #20]
 80027f6:	6a21      	ldr	r1, [r4, #32]
 80027f8:	6022      	str	r2, [r4, #0]
 80027fa:	47b0      	blx	r6
 80027fc:	6060      	str	r0, [r4, #4]
 80027fe:	2800      	cmp	r0, #0
 8002800:	dc1a      	bgt.n	8002838 <__srefill_r+0xdc>
 8002802:	230c      	movs	r3, #12
 8002804:	5ee2      	ldrsh	r2, [r4, r3]
 8002806:	2320      	movs	r3, #32
 8002808:	2800      	cmp	r0, #0
 800280a:	d0be      	beq.n	800278a <__srefill_r+0x2e>
 800280c:	2300      	movs	r3, #0
 800280e:	6063      	str	r3, [r4, #4]
 8002810:	3340      	adds	r3, #64	@ 0x40
 8002812:	e7ba      	b.n	800278a <__srefill_r+0x2e>
 8002814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002816:	2900      	cmp	r1, #0
 8002818:	d0ce      	beq.n	80027b8 <__srefill_r+0x5c>
 800281a:	0023      	movs	r3, r4
 800281c:	3344      	adds	r3, #68	@ 0x44
 800281e:	4299      	cmp	r1, r3
 8002820:	d002      	beq.n	8002828 <__srefill_r+0xcc>
 8002822:	0028      	movs	r0, r5
 8002824:	f7ff f9d0 	bl	8001bc8 <_free_r>
 8002828:	2300      	movs	r3, #0
 800282a:	6363      	str	r3, [r4, #52]	@ 0x34
 800282c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800282e:	6063      	str	r3, [r4, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0c1      	beq.n	80027b8 <__srefill_r+0x5c>
 8002834:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002836:	6023      	str	r3, [r4, #0]
 8002838:	2000      	movs	r0, #0
 800283a:	e7aa      	b.n	8002792 <__srefill_r+0x36>
 800283c:	20000004 	.word	0x20000004
 8002840:	08002741 	.word	0x08002741
 8002844:	20000014 	.word	0x20000014

08002848 <_raise_r>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	0004      	movs	r4, r0
 800284c:	000d      	movs	r5, r1
 800284e:	291f      	cmp	r1, #31
 8002850:	d904      	bls.n	800285c <_raise_r+0x14>
 8002852:	2316      	movs	r3, #22
 8002854:	6003      	str	r3, [r0, #0]
 8002856:	2001      	movs	r0, #1
 8002858:	4240      	negs	r0, r0
 800285a:	bd70      	pop	{r4, r5, r6, pc}
 800285c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <_raise_r+0x24>
 8002862:	008a      	lsls	r2, r1, #2
 8002864:	189b      	adds	r3, r3, r2
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2a00      	cmp	r2, #0
 800286a:	d108      	bne.n	800287e <_raise_r+0x36>
 800286c:	0020      	movs	r0, r4
 800286e:	f000 f831 	bl	80028d4 <_getpid_r>
 8002872:	002a      	movs	r2, r5
 8002874:	0001      	movs	r1, r0
 8002876:	0020      	movs	r0, r4
 8002878:	f000 f81a 	bl	80028b0 <_kill_r>
 800287c:	e7ed      	b.n	800285a <_raise_r+0x12>
 800287e:	2a01      	cmp	r2, #1
 8002880:	d009      	beq.n	8002896 <_raise_r+0x4e>
 8002882:	1c51      	adds	r1, r2, #1
 8002884:	d103      	bne.n	800288e <_raise_r+0x46>
 8002886:	2316      	movs	r3, #22
 8002888:	6003      	str	r3, [r0, #0]
 800288a:	2001      	movs	r0, #1
 800288c:	e7e5      	b.n	800285a <_raise_r+0x12>
 800288e:	2100      	movs	r1, #0
 8002890:	0028      	movs	r0, r5
 8002892:	6019      	str	r1, [r3, #0]
 8002894:	4790      	blx	r2
 8002896:	2000      	movs	r0, #0
 8002898:	e7df      	b.n	800285a <_raise_r+0x12>
	...

0800289c <raise>:
 800289c:	b510      	push	{r4, lr}
 800289e:	4b03      	ldr	r3, [pc, #12]	@ (80028ac <raise+0x10>)
 80028a0:	0001      	movs	r1, r0
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	f7ff ffd0 	bl	8002848 <_raise_r>
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	20000010 	.word	0x20000010

080028b0 <_kill_r>:
 80028b0:	2300      	movs	r3, #0
 80028b2:	b570      	push	{r4, r5, r6, lr}
 80028b4:	4d06      	ldr	r5, [pc, #24]	@ (80028d0 <_kill_r+0x20>)
 80028b6:	0004      	movs	r4, r0
 80028b8:	0008      	movs	r0, r1
 80028ba:	0011      	movs	r1, r2
 80028bc:	602b      	str	r3, [r5, #0]
 80028be:	f7fe fa97 	bl	8000df0 <_kill>
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	d103      	bne.n	80028ce <_kill_r+0x1e>
 80028c6:	682b      	ldr	r3, [r5, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d000      	beq.n	80028ce <_kill_r+0x1e>
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	200002d4 	.word	0x200002d4

080028d4 <_getpid_r>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	f7fe fa85 	bl	8000de4 <_getpid>
 80028da:	bd10      	pop	{r4, pc}

080028dc <_init>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr

080028e8 <_fini>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ee:	bc08      	pop	{r3}
 80028f0:	469e      	mov	lr, r3
 80028f2:	4770      	bx	lr
