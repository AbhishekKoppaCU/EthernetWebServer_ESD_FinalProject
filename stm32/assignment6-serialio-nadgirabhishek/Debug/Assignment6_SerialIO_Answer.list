
Assignment6_SerialIO_Answer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc0  08003764  08003764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004324  08004324  0000606c  2**0
                  CONTENTS
  4 .ARM          00000000  08004324  08004324  0000606c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004324  08004324  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004324  08004324  00005324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004328  08004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800432c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  2000006c  08004398  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  08004398  000068dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f76  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001497  00000000  00000000  0000a00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  0000b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000321  00000000  00000000  0000b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000303e  00000000  00000000  0000bc01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bf2  00000000  00000000  0000ec3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a146  00000000  00000000  00016831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00080977  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014a4  00000000  00000000  000809bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b3  00000000  00000000  00081e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800374c 	.word	0x0800374c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800374c 	.word	0x0800374c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <delay_ms>:
 *      Author: nadgi
 */

#include "arp.h"

void delay_ms(uint16_t ms) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	0002      	movs	r2, r0
 800024c:	1dbb      	adds	r3, r7, #6
 800024e:	801a      	strh	r2, [r3, #0]
	for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	e002      	b.n	800025c <delay_ms+0x18>
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	3301      	adds	r3, #1
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	1dbb      	adds	r3, r7, #6
 800025e:	881a      	ldrh	r2, [r3, #0]
 8000260:	0013      	movs	r3, r2
 8000262:	015b      	lsls	r3, r3, #5
 8000264:	1a9b      	subs	r3, r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	189b      	adds	r3, r3, r2
 800026a:	00db      	lsls	r3, r3, #3
 800026c:	001a      	movs	r2, r3
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	429a      	cmp	r2, r3
 8000272:	d8f0      	bhi.n	8000256 <delay_ms+0x12>
		// Simple loop for delay; adjust the multiplier based on clock speed
	}
}
 8000274:	46c0      	nop			@ (mov r8, r8)
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b004      	add	sp, #16
 800027c:	bd80      	pop	{r7, pc}

0800027e <enc28j60_start_transmission>:
void enc28j60_start_transmission(void) {
 800027e:	b590      	push	{r4, r7, lr}
 8000280:	b083      	sub	sp, #12
 8000282:	af00      	add	r7, sp, #0
	uint8_t econ1 = enc_mac_read(0x1F, 0); // Read ECON1
 8000284:	1dfc      	adds	r4, r7, #7
 8000286:	2100      	movs	r1, #0
 8000288:	201f      	movs	r0, #31
 800028a:	f000 fbd5 	bl	8000a38 <enc_mac_read>
 800028e:	0003      	movs	r3, r0
 8000290:	7023      	strb	r3, [r4, #0]
	econ1 |= 0x08; // Set TXRTS (bit 3)
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	1dfa      	adds	r2, r7, #7
 8000296:	7812      	ldrb	r2, [r2, #0]
 8000298:	2108      	movs	r1, #8
 800029a:	430a      	orrs	r2, r1
 800029c:	701a      	strb	r2, [r3, #0]
	enc_control_write(0, 0x1F, econ1); // Write back to ECON1
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	001a      	movs	r2, r3
 80002a4:	211f      	movs	r1, #31
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f9ee 	bl	8000688 <enc_control_write>
}
 80002ac:	46c0      	nop			@ (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b003      	add	sp, #12
 80002b2:	bd90      	pop	{r4, r7, pc}

080002b4 <enc28j60_set_transmit_pointers>:
void enc28j60_set_transmit_pointers(uint16_t start_address,
		uint16_t end_address) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	0002      	movs	r2, r0
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	801a      	strh	r2, [r3, #0]
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	1c0a      	adds	r2, r1, #0
 80002c4:	801a      	strh	r2, [r3, #0]
	// Write to ETXST (Transmit Start Pointer)
	enc_control_write(0, 0x04, (uint8_t) (start_address & 0xFF)); // Low byte
 80002c6:	1dbb      	adds	r3, r7, #6
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	001a      	movs	r2, r3
 80002ce:	2104      	movs	r1, #4
 80002d0:	2000      	movs	r0, #0
 80002d2:	f000 f9d9 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x05, (uint8_t) ((start_address >> 8) & 0xFF)); // High byte
 80002d6:	1dbb      	adds	r3, r7, #6
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	0a1b      	lsrs	r3, r3, #8
 80002dc:	b29b      	uxth	r3, r3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	001a      	movs	r2, r3
 80002e2:	2105      	movs	r1, #5
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 f9cf 	bl	8000688 <enc_control_write>

	// Write to ETXND (Transmit End Pointer)
	enc_control_write(0, 0x06, (uint8_t) (end_address & 0xFF)); // Low byte
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	001a      	movs	r2, r3
 80002f2:	2106      	movs	r1, #6
 80002f4:	2000      	movs	r0, #0
 80002f6:	f000 f9c7 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x07, (uint8_t) ((end_address >> 8) & 0xFF)); // High byte
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	0a1b      	lsrs	r3, r3, #8
 8000300:	b29b      	uxth	r3, r3
 8000302:	b2db      	uxtb	r3, r3
 8000304:	001a      	movs	r2, r3
 8000306:	2107      	movs	r1, #7
 8000308:	2000      	movs	r0, #0
 800030a:	f000 f9bd 	bl	8000688 <enc_control_write>
}
 800030e:	46c0      	nop			@ (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b002      	add	sp, #8
 8000314:	bd80      	pop	{r7, pc}

08000316 <wait_for_transmission_complete>:

bool wait_for_transmission_complete(uint16_t timeout_ms) {
 8000316:	b5b0      	push	{r4, r5, r7, lr}
 8000318:	b084      	sub	sp, #16
 800031a:	af00      	add	r7, sp, #0
 800031c:	0002      	movs	r2, r0
 800031e:	1dbb      	adds	r3, r7, #6
 8000320:	801a      	strh	r2, [r3, #0]
	uint16_t elapsed = 0;
 8000322:	230e      	movs	r3, #14
 8000324:	18fb      	adds	r3, r7, r3
 8000326:	2200      	movs	r2, #0
 8000328:	801a      	strh	r2, [r3, #0]

	while (elapsed < timeout_ms) {
 800032a:	e017      	b.n	800035c <wait_for_transmission_complete+0x46>
		uint8_t econ1 = enc_mac_read(0x1F, 0); // Read ECON1
 800032c:	250d      	movs	r5, #13
 800032e:	197c      	adds	r4, r7, r5
 8000330:	2100      	movs	r1, #0
 8000332:	201f      	movs	r0, #31
 8000334:	f000 fb80 	bl	8000a38 <enc_mac_read>
 8000338:	0003      	movs	r3, r0
 800033a:	7023      	strb	r3, [r4, #0]
		if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
 800033c:	197b      	adds	r3, r7, r5
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2208      	movs	r2, #8
 8000342:	4013      	ands	r3, r2
 8000344:	d101      	bne.n	800034a <wait_for_transmission_complete+0x34>
			return true;  // Transmission completed
 8000346:	2301      	movs	r3, #1
 8000348:	e010      	b.n	800036c <wait_for_transmission_complete+0x56>
		}

		delay_ms(1);  // Wait 1 ms
 800034a:	2001      	movs	r0, #1
 800034c:	f7ff ff7a 	bl	8000244 <delay_ms>
		elapsed++;
 8000350:	210e      	movs	r1, #14
 8000352:	187b      	adds	r3, r7, r1
 8000354:	881a      	ldrh	r2, [r3, #0]
 8000356:	187b      	adds	r3, r7, r1
 8000358:	3201      	adds	r2, #1
 800035a:	801a      	strh	r2, [r3, #0]
	while (elapsed < timeout_ms) {
 800035c:	230e      	movs	r3, #14
 800035e:	18fa      	adds	r2, r7, r3
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	8812      	ldrh	r2, [r2, #0]
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d3e0      	bcc.n	800032c <wait_for_transmission_complete+0x16>
	}

	return false;  // Timed out
 800036a:	2300      	movs	r3, #0
}
 800036c:	0018      	movs	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	b004      	add	sp, #16
 8000372:	bdb0      	pop	{r4, r5, r7, pc}

08000374 <enc28j60_transmission_successful>:

bool enc28j60_transmission_successful() {
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
	uint8_t estat = enc_mac_read(0x1D, 0); // Read ESTAT
 800037a:	1dfc      	adds	r4, r7, #7
 800037c:	2100      	movs	r1, #0
 800037e:	201d      	movs	r0, #29
 8000380:	f000 fb5a 	bl	8000a38 <enc_mac_read>
 8000384:	0003      	movs	r3, r0
 8000386:	7023      	strb	r3, [r4, #0]
	return !(estat & 0x02); // Check if TXABRT (bit 1) is not set
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2202      	movs	r2, #2
 800038e:	4013      	ands	r3, r2
 8000390:	425a      	negs	r2, r3
 8000392:	4153      	adcs	r3, r2
 8000394:	b2db      	uxtb	r3, r3
}
 8000396:	0018      	movs	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	b003      	add	sp, #12
 800039c:	bd90      	pop	{r4, r7, pc}

0800039e <cbfifo_init>:


/*
 * Initialize the FIFO structure.
 */
void cbfifo_init(cbfifo_t *fifo) {
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d00b      	beq.n	80003c4 <cbfifo_init+0x26>
        fifo->write = 0;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2280      	movs	r2, #128	@ 0x80
 80003b0:	2100      	movs	r1, #0
 80003b2:	5099      	str	r1, [r3, r2]
        fifo->read = 0;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2284      	movs	r2, #132	@ 0x84
 80003b8:	2100      	movs	r1, #0
 80003ba:	5099      	str	r1, [r3, r2]
        fifo->length = 0;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2288      	movs	r2, #136	@ 0x88
 80003c0:	2100      	movs	r1, #0
 80003c2:	5099      	str	r1, [r3, r2]
    }
}
 80003c4:	46c0      	nop			@ (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b002      	add	sp, #8
 80003ca:	bd80      	pop	{r7, pc}

080003cc <cbfifo_enqueue>:
 *
 * Returns:
 *   The number of bytes actually enqueued, which could be 0.
 *   In case of an error, returns (size_t) -1.
 */
size_t cbfifo_enqueue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL) {
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d002      	beq.n	80003e4 <cbfifo_enqueue+0x18>
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d102      	bne.n	80003ea <cbfifo_enqueue+0x1e>
        return FIFO_ERROR;
 80003e4:	2301      	movs	r3, #1
 80003e6:	425b      	negs	r3, r3
 80003e8:	e03b      	b.n	8000462 <cbfifo_enqueue+0x96>
    }
    if (nbyte == 0) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d101      	bne.n	80003f4 <cbfifo_enqueue+0x28>
        return 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	e036      	b.n	8000462 <cbfifo_enqueue+0x96>
    }
    size_t blank = (MAX_FIFO_SIZE - (fifo->length));
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	2288      	movs	r2, #136	@ 0x88
 80003f8:	589b      	ldr	r3, [r3, r2]
 80003fa:	2280      	movs	r2, #128	@ 0x80
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	61bb      	str	r3, [r7, #24]
    if (blank == 0) {
 8000400:	69bb      	ldr	r3, [r7, #24]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d101      	bne.n	800040a <cbfifo_enqueue+0x3e>
        return 0;
 8000406:	2300      	movs	r3, #0
 8000408:	e02b      	b.n	8000462 <cbfifo_enqueue+0x96>
    }
    size_t endq = (nbyte <= blank) ? nbyte : blank;
 800040a:	69ba      	ldr	r2, [r7, #24]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4293      	cmp	r3, r2
 8000410:	d900      	bls.n	8000414 <cbfifo_enqueue+0x48>
 8000412:	0013      	movs	r3, r2
 8000414:	617b      	str	r3, [r7, #20]
    uint8_t *temp = (uint8_t*)buf;
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < endq; i++) {
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
 800041e:	e01b      	b.n	8000458 <cbfifo_enqueue+0x8c>
        fifo->buffer[fifo->write] = temp[i];
 8000420:	693a      	ldr	r2, [r7, #16]
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	18d2      	adds	r2, r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2180      	movs	r1, #128	@ 0x80
 800042a:	585b      	ldr	r3, [r3, r1]
 800042c:	7811      	ldrb	r1, [r2, #0]
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	54d1      	strb	r1, [r2, r3]
        fifo->length++;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2288      	movs	r2, #136	@ 0x88
 8000436:	589b      	ldr	r3, [r3, r2]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2188      	movs	r1, #136	@ 0x88
 800043e:	505a      	str	r2, [r3, r1]
        fifo->write = ((fifo->write + 1) & (MAX_FIFO_SIZE-1)); // Increment write pointer with wrap-around
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	2280      	movs	r2, #128	@ 0x80
 8000444:	589b      	ldr	r3, [r3, r2]
 8000446:	3301      	adds	r3, #1
 8000448:	227f      	movs	r2, #127	@ 0x7f
 800044a:	401a      	ands	r2, r3
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	2180      	movs	r1, #128	@ 0x80
 8000450:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	3301      	adds	r3, #1
 8000456:	61fb      	str	r3, [r7, #28]
 8000458:	69fa      	ldr	r2, [r7, #28]
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	429a      	cmp	r2, r3
 800045e:	d3df      	bcc.n	8000420 <cbfifo_enqueue+0x54>
    }
    return endq;
 8000460:	697b      	ldr	r3, [r7, #20]
}
 8000462:	0018      	movs	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	b008      	add	sp, #32
 8000468:	bd80      	pop	{r7, pc}

0800046a <cbfifo_dequeue>:
 *   nbyte   Bytes of data requested
 *
 * Returns:
 *   The number of bytes actually removed.
 */
size_t cbfifo_dequeue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 800046a:	b580      	push	{r7, lr}
 800046c:	b088      	sub	sp, #32
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL || nbyte == 0 || fifo->length == 0) {
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00a      	beq.n	8000492 <cbfifo_dequeue+0x28>
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d007      	beq.n	8000492 <cbfifo_dequeue+0x28>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d004      	beq.n	8000492 <cbfifo_dequeue+0x28>
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2288      	movs	r2, #136	@ 0x88
 800048c:	589b      	ldr	r3, [r3, r2]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d101      	bne.n	8000496 <cbfifo_dequeue+0x2c>
        return 0;
 8000492:	2300      	movs	r3, #0
 8000494:	e02d      	b.n	80004f2 <cbfifo_dequeue+0x88>
    }
    size_t endq = (nbyte <= fifo->length) ? nbyte : fifo->length;
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2288      	movs	r2, #136	@ 0x88
 800049a:	589a      	ldr	r2, [r3, r2]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4293      	cmp	r3, r2
 80004a0:	d900      	bls.n	80004a4 <cbfifo_dequeue+0x3a>
 80004a2:	0013      	movs	r3, r2
 80004a4:	61bb      	str	r3, [r7, #24]
    uint8_t *temp = (uint8_t*)buf;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < endq; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
 80004ae:	e01b      	b.n	80004e8 <cbfifo_dequeue+0x7e>
        temp[i] = fifo->buffer[fifo->read];
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	2284      	movs	r2, #132	@ 0x84
 80004b4:	589a      	ldr	r2, [r3, r2]
 80004b6:	6979      	ldr	r1, [r7, #20]
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	18cb      	adds	r3, r1, r3
 80004bc:	68f9      	ldr	r1, [r7, #12]
 80004be:	5c8a      	ldrb	r2, [r1, r2]
 80004c0:	701a      	strb	r2, [r3, #0]
        fifo->length--;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2288      	movs	r2, #136	@ 0x88
 80004c6:	589b      	ldr	r3, [r3, r2]
 80004c8:	1e5a      	subs	r2, r3, #1
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2188      	movs	r1, #136	@ 0x88
 80004ce:	505a      	str	r2, [r3, r1]
        fifo->read = ((fifo->read + 1) & (MAX_FIFO_SIZE-1)); // Increment read pointer with wrap-around
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2284      	movs	r2, #132	@ 0x84
 80004d4:	589b      	ldr	r3, [r3, r2]
 80004d6:	3301      	adds	r3, #1
 80004d8:	227f      	movs	r2, #127	@ 0x7f
 80004da:	401a      	ands	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2184      	movs	r1, #132	@ 0x84
 80004e0:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	3301      	adds	r3, #1
 80004e6:	61fb      	str	r3, [r7, #28]
 80004e8:	69fa      	ldr	r2, [r7, #28]
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d3df      	bcc.n	80004b0 <cbfifo_dequeue+0x46>
    }
    return endq;
 80004f0:	69bb      	ldr	r3, [r7, #24]
}
 80004f2:	0018      	movs	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b008      	add	sp, #32
 80004f8:	bd80      	pop	{r7, pc}

080004fa <cbfifo_length>:
 *   fifo    Pointer to the FIFO structure
 *
 * Returns:
 *   Number of bytes currently available to be dequeued from the FIFO.
 */
size_t cbfifo_length(cbfifo_t *fifo) {
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
    return (fifo != NULL) ? fifo->length : 0; // Return length or 0 if fifo is NULL
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d003      	beq.n	8000510 <cbfifo_length+0x16>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2288      	movs	r2, #136	@ 0x88
 800050c:	589b      	ldr	r3, [r3, r2]
 800050e:	e000      	b.n	8000512 <cbfifo_length+0x18>
 8000510:	2300      	movs	r3, #0
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <enc_set_autoinc>:
 *      Author: nadgi
 */
#include "enc.h"
#include "spi.h"

void enc_set_autoinc(void) {
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000522:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <enc_set_autoinc+0x70>)
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <enc_set_autoinc+0x70>)
 8000528:	4919      	ldr	r1, [pc, #100]	@ (8000590 <enc_set_autoinc+0x74>)
 800052a:	400a      	ands	r2, r1
 800052c:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x1E);
 800052e:	201e      	movs	r0, #30
 8000530:	f000 fe24 	bl	800117c <SPI_WriteByte>
	uint8_t data = SPI_ReadByte(); // Read the data from the SPI slave
 8000534:	1dfc      	adds	r4, r7, #7
 8000536:	f000 fe77 	bl	8001228 <SPI_ReadByte>
 800053a:	0003      	movs	r3, r0
 800053c:	7023      	strb	r3, [r4, #0]
	GPIOB->ODR |= SPI2_CS_PIN;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <enc_set_autoinc+0x70>)
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	4b12      	ldr	r3, [pc, #72]	@ (800058c <enc_set_autoinc+0x70>)
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	0149      	lsls	r1, r1, #5
 8000548:	430a      	orrs	r2, r1
 800054a:	615a      	str	r2, [r3, #20]
	data |= (1 << 7); // Set bit 7 of the data to 1
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	1dfa      	adds	r2, r7, #7
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	2180      	movs	r1, #128	@ 0x80
 8000554:	4249      	negs	r1, r1
 8000556:	430a      	orrs	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 800055a:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <enc_set_autoinc+0x70>)
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <enc_set_autoinc+0x70>)
 8000560:	490b      	ldr	r1, [pc, #44]	@ (8000590 <enc_set_autoinc+0x74>)
 8000562:	400a      	ands	r2, r1
 8000564:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x5E);      // Write ECON2 address
 8000566:	205e      	movs	r0, #94	@ 0x5e
 8000568:	f000 fe08 	bl	800117c <SPI_WriteByte>
	SPI_WriteByte(data);      // Write the modified data with MSB set
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fe03 	bl	800117c <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 8000576:	4b05      	ldr	r3, [pc, #20]	@ (800058c <enc_set_autoinc+0x70>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b04      	ldr	r3, [pc, #16]	@ (800058c <enc_set_autoinc+0x70>)
 800057c:	2180      	movs	r1, #128	@ 0x80
 800057e:	0149      	lsls	r1, r1, #5
 8000580:	430a      	orrs	r2, r1
 8000582:	615a      	str	r2, [r3, #20]
}
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b003      	add	sp, #12
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	48000400 	.word	0x48000400
 8000590:	ffffefff 	.word	0xffffefff

08000594 <enc_select_reg_bank>:
void enc_select_reg_bank(uint8_t bank) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	0002      	movs	r2, r0
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 80005a0:	4b36      	ldr	r3, [pc, #216]	@ (800067c <enc_select_reg_bank+0xe8>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	4b35      	ldr	r3, [pc, #212]	@ (800067c <enc_select_reg_bank+0xe8>)
 80005a6:	4936      	ldr	r1, [pc, #216]	@ (8000680 <enc_select_reg_bank+0xec>)
 80005a8:	400a      	ands	r2, r1
 80005aa:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0X1F); // Send the address
 80005ac:	201f      	movs	r0, #31
 80005ae:	f000 fde5 	bl	800117c <SPI_WriteByte>
	uint8_t data = SPI_ReadByte(); // Read the data
 80005b2:	250f      	movs	r5, #15
 80005b4:	197c      	adds	r4, r7, r5
 80005b6:	f000 fe37 	bl	8001228 <SPI_ReadByte>
 80005ba:	0003      	movs	r3, r0
 80005bc:	7023      	strb	r3, [r4, #0]
	GPIOB->ODR |= SPI2_CS_PIN;
 80005be:	4b2f      	ldr	r3, [pc, #188]	@ (800067c <enc_select_reg_bank+0xe8>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <enc_select_reg_bank+0xe8>)
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	0149      	lsls	r1, r1, #5
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]

	// Modify the last two bits of 'data' based on 'bank'
	data &= ~0x03; // Clear the last two bits
 80005cc:	197b      	adds	r3, r7, r5
 80005ce:	197a      	adds	r2, r7, r5
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	2103      	movs	r1, #3
 80005d4:	438a      	bics	r2, r1
 80005d6:	701a      	strb	r2, [r3, #0]
	switch (bank) {
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d01e      	beq.n	800061e <enc_select_reg_bank+0x8a>
 80005e0:	dc25      	bgt.n	800062e <enc_select_reg_bank+0x9a>
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d013      	beq.n	800060e <enc_select_reg_bank+0x7a>
 80005e6:	dc22      	bgt.n	800062e <enc_select_reg_bank+0x9a>
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <enc_select_reg_bank+0x5e>
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d006      	beq.n	80005fe <enc_select_reg_bank+0x6a>
 80005f0:	e01d      	b.n	800062e <enc_select_reg_bank+0x9a>
	case 0:
		data |= 0x00; // Last two bits: 00
 80005f2:	220f      	movs	r2, #15
 80005f4:	18bb      	adds	r3, r7, r2
 80005f6:	18ba      	adds	r2, r7, r2
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	701a      	strb	r2, [r3, #0]
		break;
 80005fc:	e01b      	b.n	8000636 <enc_select_reg_bank+0xa2>
	case 1:
		data |= 0x01; // Last two bits: 01
 80005fe:	220f      	movs	r2, #15
 8000600:	18bb      	adds	r3, r7, r2
 8000602:	18ba      	adds	r2, r7, r2
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	2101      	movs	r1, #1
 8000608:	430a      	orrs	r2, r1
 800060a:	701a      	strb	r2, [r3, #0]
		break;
 800060c:	e013      	b.n	8000636 <enc_select_reg_bank+0xa2>
	case 2:
		data |= 0x02; // Last two bits: 10
 800060e:	220f      	movs	r2, #15
 8000610:	18bb      	adds	r3, r7, r2
 8000612:	18ba      	adds	r2, r7, r2
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	2102      	movs	r1, #2
 8000618:	430a      	orrs	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
		break;
 800061c:	e00b      	b.n	8000636 <enc_select_reg_bank+0xa2>
	case 3:
		data |= 0x03; // Last two bits: 11
 800061e:	220f      	movs	r2, #15
 8000620:	18bb      	adds	r3, r7, r2
 8000622:	18ba      	adds	r2, r7, r2
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	2103      	movs	r1, #3
 8000628:	430a      	orrs	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
		break;
 800062c:	e003      	b.n	8000636 <enc_select_reg_bank+0xa2>
	default:
		printf("wrong bank");
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <enc_select_reg_bank+0xf0>)
 8000630:	0018      	movs	r0, r3
 8000632:	f002 f96d 	bl	8002910 <iprintf>
	}

	for (int i = 0; i < 16; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	e002      	b.n	8000642 <enc_select_reg_bank+0xae>
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	3301      	adds	r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	ddf9      	ble.n	800063c <enc_select_reg_bank+0xa8>
		; // Delay

	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <enc_select_reg_bank+0xe8>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <enc_select_reg_bank+0xe8>)
 800064e:	490c      	ldr	r1, [pc, #48]	@ (8000680 <enc_select_reg_bank+0xec>)
 8000650:	400a      	ands	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x5F);
 8000654:	205f      	movs	r0, #95	@ 0x5f
 8000656:	f000 fd91 	bl	800117c <SPI_WriteByte>
	SPI_WriteByte(data); // Send the modified data
 800065a:	230f      	movs	r3, #15
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fd8b 	bl	800117c <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 8000666:	4b05      	ldr	r3, [pc, #20]	@ (800067c <enc_select_reg_bank+0xe8>)
 8000668:	695a      	ldr	r2, [r3, #20]
 800066a:	4b04      	ldr	r3, [pc, #16]	@ (800067c <enc_select_reg_bank+0xe8>)
 800066c:	2180      	movs	r1, #128	@ 0x80
 800066e:	0149      	lsls	r1, r1, #5
 8000670:	430a      	orrs	r2, r1
 8000672:	615a      	str	r2, [r3, #20]
}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b004      	add	sp, #16
 800067a:	bdb0      	pop	{r4, r5, r7, pc}
 800067c:	48000400 	.word	0x48000400
 8000680:	ffffefff 	.word	0xffffefff
 8000684:	08003764 	.word	0x08003764

08000688 <enc_control_write>:

void enc_control_write(int reg_bank, uint8_t addr, uint8_t data) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	0008      	movs	r0, r1
 8000692:	0011      	movs	r1, r2
 8000694:	1cfb      	adds	r3, r7, #3
 8000696:	1c02      	adds	r2, r0, #0
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	1cbb      	adds	r3, r7, #2
 800069c:	1c0a      	adds	r2, r1, #0
 800069e:	701a      	strb	r2, [r3, #0]
	uint8_t opcode = 0x40;
 80006a0:	200f      	movs	r0, #15
 80006a2:	183b      	adds	r3, r7, r0
 80006a4:	2240      	movs	r2, #64	@ 0x40
 80006a6:	701a      	strb	r2, [r3, #0]
	addr = addr + opcode;
 80006a8:	1cfb      	adds	r3, r7, #3
 80006aa:	1cf9      	adds	r1, r7, #3
 80006ac:	183a      	adds	r2, r7, r0
 80006ae:	7809      	ldrb	r1, [r1, #0]
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	188a      	adds	r2, r1, r2
 80006b4:	701a      	strb	r2, [r3, #0]
	enc_select_reg_bank(reg_bank);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff ff6a 	bl	8000594 <enc_select_reg_bank>
	GPIOB->ODR &= ~SPI2_CS_PIN;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <enc_control_write+0x70>)
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <enc_control_write+0x70>)
 80006c6:	490d      	ldr	r1, [pc, #52]	@ (80006fc <enc_control_write+0x74>)
 80006c8:	400a      	ands	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(addr);
 80006cc:	1cfb      	adds	r3, r7, #3
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fd53 	bl	800117c <SPI_WriteByte>
	SPI_WriteByte(data);
 80006d6:	1cbb      	adds	r3, r7, #2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fd4e 	bl	800117c <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <enc_control_write+0x70>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <enc_control_write+0x70>)
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	0149      	lsls	r1, r1, #5
 80006ea:	430a      	orrs	r2, r1
 80006ec:	615a      	str	r2, [r3, #20]
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b004      	add	sp, #16
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	48000400 	.word	0x48000400
 80006fc:	ffffefff 	.word	0xffffefff

08000700 <enc_buffer_init>:

void enc_buffer_init(uint16_t start_address, uint16_t end_address) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	0002      	movs	r2, r0
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	801a      	strh	r2, [r3, #0]
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	1c0a      	adds	r2, r1, #0
 8000710:	801a      	strh	r2, [r3, #0]

	if (start_address > 0x1FFF || end_address > 0x1FFF) {
 8000712:	1dbb      	adds	r3, r7, #6
 8000714:	881a      	ldrh	r2, [r3, #0]
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	429a      	cmp	r2, r3
 800071c:	d205      	bcs.n	800072a <enc_buffer_init+0x2a>
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	2380      	movs	r3, #128	@ 0x80
 8000724:	019b      	lsls	r3, r3, #6
 8000726:	429a      	cmp	r2, r3
 8000728:	d308      	bcc.n	800073c <enc_buffer_init+0x3c>
		printf("\nInvalid Buffer Range: Start 0x%04X, End 0x%04X\n",
 800072a:	1dbb      	adds	r3, r7, #6
 800072c:	8819      	ldrh	r1, [r3, #0]
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <enc_buffer_init+0xf0>)
 8000734:	0018      	movs	r0, r3
 8000736:	f002 f8eb 	bl	8002910 <iprintf>
				start_address, end_address);
		return;
 800073a:	e055      	b.n	80007e8 <enc_buffer_init+0xe8>
	}

	start_address &= ~1;  // Align to even address
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	1dba      	adds	r2, r7, #6
 8000740:	8812      	ldrh	r2, [r2, #0]
 8000742:	2101      	movs	r1, #1
 8000744:	438a      	bics	r2, r1
 8000746:	801a      	strh	r2, [r3, #0]

	enc_control_write(0, 0x00, (uint8_t) (start_address & 0xFF)); // ERDPTL
 8000748:	1dbb      	adds	r3, r7, #6
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ff98 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x01, (uint8_t) (start_address >> 8)); // ERDPTH
 8000758:	1dbb      	adds	r3, r7, #6
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	b29b      	uxth	r3, r3
 8000760:	b2db      	uxtb	r3, r3
 8000762:	001a      	movs	r2, r3
 8000764:	2101      	movs	r1, #1
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff8e 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x08, (uint8_t) (start_address & 0xFF)); // ERXSTL
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	001a      	movs	r2, r3
 8000774:	2108      	movs	r1, #8
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff ff86 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x09, (uint8_t) (start_address >> 8)); // ERXSTH
 800077c:	1dbb      	adds	r3, r7, #6
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	b29b      	uxth	r3, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	001a      	movs	r2, r3
 8000788:	2109      	movs	r1, #9
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff7c 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x0A, (uint8_t) (end_address & 0xFF)); // ERXNDL
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	001a      	movs	r2, r3
 8000798:	210a      	movs	r1, #10
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ff74 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x0B, (uint8_t) (end_address >> 8)); // ERXNDH
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	001a      	movs	r2, r3
 80007ac:	210b      	movs	r1, #11
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ff6a 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x0C, (uint8_t) (start_address & 0xFF)); // ERXRDPTL
 80007b4:	1dbb      	adds	r3, r7, #6
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	001a      	movs	r2, r3
 80007bc:	210c      	movs	r1, #12
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ff62 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x0D, (uint8_t) (start_address >> 8)); // ERXRDPTH
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	001a      	movs	r2, r3
 80007d0:	210d      	movs	r1, #13
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff ff58 	bl	8000688 <enc_control_write>
	printf("\nBuffer Initialized: Start 0x%04X, End 0x%04X\n", start_address,
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	8819      	ldrh	r1, [r3, #0]
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <enc_buffer_init+0xf4>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 f894 	bl	8002910 <iprintf>
			end_address);
}
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	08003770 	.word	0x08003770
 80007f4:	080037a4 	.word	0x080037a4

080007f8 <enc_buffer_write>:

void enc_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr) {
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	230a      	movs	r3, #10
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	1c0a      	adds	r2, r1, #0
 8000808:	801a      	strh	r2, [r3, #0]
	if (num_bytes < 1) {
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dc06      	bgt.n	800081e <enc_buffer_write+0x26>
		printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	4b3c      	ldr	r3, [pc, #240]	@ (8000904 <enc_buffer_write+0x10c>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f002 f87a 	bl	8002910 <iprintf>
		return;
 800081c:	e06e      	b.n	80008fc <enc_buffer_write+0x104>
	}
	if (start_address > 0x1FFF) {
 800081e:	210a      	movs	r1, #10
 8000820:	187b      	adds	r3, r7, r1
 8000822:	881a      	ldrh	r2, [r3, #0]
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	019b      	lsls	r3, r3, #6
 8000828:	429a      	cmp	r2, r3
 800082a:	d307      	bcc.n	800083c <enc_buffer_write+0x44>
		printf("\n\rInvalid address: %04X\n\r", start_address);
 800082c:	187b      	adds	r3, r7, r1
 800082e:	881a      	ldrh	r2, [r3, #0]
 8000830:	4b35      	ldr	r3, [pc, #212]	@ (8000908 <enc_buffer_write+0x110>)
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f002 f86b 	bl	8002910 <iprintf>
		return;
 800083a:	e05f      	b.n	80008fc <enc_buffer_write+0x104>
	}
	if (start_address < TX_BUFFER_START
 800083c:	210a      	movs	r1, #10
 800083e:	187b      	adds	r3, r7, r1
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	23e0      	movs	r3, #224	@ 0xe0
 8000844:	015b      	lsls	r3, r3, #5
 8000846:	429a      	cmp	r2, r3
 8000848:	d307      	bcc.n	800085a <enc_buffer_write+0x62>
			|| (start_address + num_bytes) > TX_BUFFER_END) {
 800084a:	187b      	adds	r3, r7, r1
 800084c:	881a      	ldrh	r2, [r3, #0]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	18d2      	adds	r2, r2, r3
 8000852:	2380      	movs	r3, #128	@ 0x80
 8000854:	019b      	lsls	r3, r3, #6
 8000856:	429a      	cmp	r2, r3
 8000858:	db08      	blt.n	800086c <enc_buffer_write+0x74>
		printf("\nInvalid TX Address: Start 0x%04X, Size %d\n", start_address,
 800085a:	230a      	movs	r3, #10
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	8819      	ldrh	r1, [r3, #0]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	4b2a      	ldr	r3, [pc, #168]	@ (800090c <enc_buffer_write+0x114>)
 8000864:	0018      	movs	r0, r3
 8000866:	f002 f853 	bl	8002910 <iprintf>
				num_bytes);
		return;
 800086a:	e047      	b.n	80008fc <enc_buffer_write+0x104>
	}
	//buffer_init(0000,start_address-2);
	if (num_bytes > 1) {
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b01      	cmp	r3, #1
 8000870:	dd01      	ble.n	8000876 <enc_buffer_write+0x7e>
		enc_set_autoinc();
 8000872:	f7ff fe53 	bl	800051c <enc_set_autoinc>
	}
	uint8_t higher_byte = (uint8_t) ((start_address >> 8) & 0xFF);
 8000876:	210a      	movs	r1, #10
 8000878:	187b      	adds	r3, r7, r1
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	b29a      	uxth	r2, r3
 8000880:	2013      	movs	r0, #19
 8000882:	183b      	adds	r3, r7, r0
 8000884:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t) (start_address & 0xFF);
 8000886:	2412      	movs	r4, #18
 8000888:	193b      	adds	r3, r7, r4
 800088a:	187a      	adds	r2, r7, r1
 800088c:	8812      	ldrh	r2, [r2, #0]
 800088e:	701a      	strb	r2, [r3, #0]

	enc_control_write(0, 0x03, higher_byte); // High byte
 8000890:	183b      	adds	r3, r7, r0
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	001a      	movs	r2, r3
 8000896:	2103      	movs	r1, #3
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fef5 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x02, lower_byte); //
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	001a      	movs	r2, r3
 80008a4:	2102      	movs	r1, #2
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff feee 	bl	8000688 <enc_control_write>

	uint8_t opcode = 0x7A; // Write buffer memory command
 80008ac:	2011      	movs	r0, #17
 80008ae:	183b      	adds	r3, r7, r0
 80008b0:	227a      	movs	r2, #122	@ 0x7a
 80008b2:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN; // Pull CS Low
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <enc_buffer_write+0x118>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <enc_buffer_write+0x118>)
 80008ba:	4916      	ldr	r1, [pc, #88]	@ (8000914 <enc_buffer_write+0x11c>)
 80008bc:	400a      	ands	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fc59 	bl	800117c <SPI_WriteByte>
	//printf("Writing %d bytes to buffer starting at address 0x%04X:\n\r",
	//		num_bytes, start_address);
	for (int i = 0; i < num_bytes; i++) {
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e00a      	b.n	80008e6 <enc_buffer_write+0xee>
		//printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
		SPI_WriteByte(*data_ptr); // Send data
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fc51 	bl	800117c <SPI_WriteByte>
		data_ptr++;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3301      	adds	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	dbf0      	blt.n	80008d0 <enc_buffer_write+0xd8>
	}
	GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <enc_buffer_write+0x118>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <enc_buffer_write+0x118>)
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	0149      	lsls	r1, r1, #5
 80008f8:	430a      	orrs	r2, r1
 80008fa:	615a      	str	r2, [r3, #20]
}
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b007      	add	sp, #28
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	080037d4 	.word	0x080037d4
 8000908:	080037f4 	.word	0x080037f4
 800090c:	08003810 	.word	0x08003810
 8000910:	48000400 	.word	0x48000400
 8000914:	ffffefff 	.word	0xffffefff

08000918 <enc_buffer_read>:


uint16_t enc_buffer_read(int num_bytes, uint16_t start_address,
		uint8_t *data_ptr) {
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	230a      	movs	r3, #10
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	1c0a      	adds	r2, r1, #0
 8000928:	801a      	strh	r2, [r3, #0]
	if (num_bytes < 1) {
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc07      	bgt.n	8000940 <enc_buffer_read+0x28>
		printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4b3c      	ldr	r3, [pc, #240]	@ (8000a24 <enc_buffer_read+0x10c>)
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f001 ffea 	bl	8002910 <iprintf>
		return 0;
 800093c:	2300      	movs	r3, #0
 800093e:	e06c      	b.n	8000a1a <enc_buffer_read+0x102>
	}
	if (start_address > 0x1FFF) {
 8000940:	210a      	movs	r1, #10
 8000942:	187b      	adds	r3, r7, r1
 8000944:	881a      	ldrh	r2, [r3, #0]
 8000946:	2380      	movs	r3, #128	@ 0x80
 8000948:	019b      	lsls	r3, r3, #6
 800094a:	429a      	cmp	r2, r3
 800094c:	d308      	bcc.n	8000960 <enc_buffer_read+0x48>
		printf("\n\rInvalid address: %04X\n\r", start_address);
 800094e:	187b      	adds	r3, r7, r1
 8000950:	881a      	ldrh	r2, [r3, #0]
 8000952:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <enc_buffer_read+0x110>)
 8000954:	0011      	movs	r1, r2
 8000956:	0018      	movs	r0, r3
 8000958:	f001 ffda 	bl	8002910 <iprintf>
		return 0;
 800095c:	2300      	movs	r3, #0
 800095e:	e05c      	b.n	8000a1a <enc_buffer_read+0x102>
	}

	if (start_address < RX_BUFFER_START
			|| (start_address + num_bytes) > RX_BUFFER_END) {
 8000960:	210a      	movs	r1, #10
 8000962:	187b      	adds	r3, r7, r1
 8000964:	881a      	ldrh	r2, [r3, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	18d2      	adds	r2, r2, r3
	if (start_address < RX_BUFFER_START
 800096a:	23e0      	movs	r3, #224	@ 0xe0
 800096c:	015b      	lsls	r3, r3, #5
 800096e:	429a      	cmp	r2, r3
 8000970:	db08      	blt.n	8000984 <enc_buffer_read+0x6c>
		printf("\nInvalid RX Address: Start 0x%04X, Size %d\n", start_address,
 8000972:	187b      	adds	r3, r7, r1
 8000974:	8819      	ldrh	r1, [r3, #0]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <enc_buffer_read+0x114>)
 800097a:	0018      	movs	r0, r3
 800097c:	f001 ffc8 	bl	8002910 <iprintf>
				num_bytes);
		return 0;
 8000980:	2300      	movs	r3, #0
 8000982:	e04a      	b.n	8000a1a <enc_buffer_read+0x102>
	}

	if (num_bytes > 1) {
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b01      	cmp	r3, #1
 8000988:	dd01      	ble.n	800098e <enc_buffer_read+0x76>
		enc_set_autoinc();
 800098a:	f7ff fdc7 	bl	800051c <enc_set_autoinc>
	}
	//buffer_init(start_address,start_address+num_bytes);
	uint8_t higher_byte = (uint8_t) ((start_address >> 8) & 0xFF);
 800098e:	210a      	movs	r1, #10
 8000990:	187b      	adds	r3, r7, r1
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29a      	uxth	r2, r3
 8000998:	2013      	movs	r0, #19
 800099a:	183b      	adds	r3, r7, r0
 800099c:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t) (start_address & 0xFF);
 800099e:	2412      	movs	r4, #18
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	187a      	adds	r2, r7, r1
 80009a4:	8812      	ldrh	r2, [r2, #0]
 80009a6:	701a      	strb	r2, [r3, #0]
	enc_control_write(0, 0x01, higher_byte); // ERDPTH
 80009a8:	183b      	adds	r3, r7, r0
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	001a      	movs	r2, r3
 80009ae:	2101      	movs	r1, #1
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fe69 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x00, lower_byte); // ERDPTL
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff fe62 	bl	8000688 <enc_control_write>
	//printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r",
	//		num_bytes, start_address);
	uint8_t opcode = 0x3A; // Read buffer memory command
 80009c4:	2011      	movs	r0, #17
 80009c6:	183b      	adds	r3, r7, r0
 80009c8:	223a      	movs	r2, #58	@ 0x3a
 80009ca:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN; // Pull CS Low
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <enc_buffer_read+0x118>)
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <enc_buffer_read+0x118>)
 80009d2:	4918      	ldr	r1, [pc, #96]	@ (8000a34 <enc_buffer_read+0x11c>)
 80009d4:	400a      	ands	r2, r1
 80009d6:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fbcd 	bl	800117c <SPI_WriteByte>
	for (int i = 0; i < num_bytes; i++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e00b      	b.n	8000a00 <enc_buffer_read+0xe8>
		*data_ptr = SPI_ReadByte(); // Read data
 80009e8:	f000 fc1e 	bl	8001228 <SPI_ReadByte>
 80009ec:	0003      	movs	r3, r0
 80009ee:	001a      	movs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	701a      	strb	r2, [r3, #0]
		//printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
		data_ptr++;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3301      	adds	r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbef      	blt.n	80009e8 <enc_buffer_read+0xd0>
	}
	GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <enc_buffer_read+0x118>)
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <enc_buffer_read+0x118>)
 8000a0e:	2180      	movs	r1, #128	@ 0x80
 8000a10:	0149      	lsls	r1, r1, #5
 8000a12:	430a      	orrs	r2, r1
 8000a14:	615a      	str	r2, [r3, #20]
	return (uint16_t) num_bytes;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	b29b      	uxth	r3, r3
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b007      	add	sp, #28
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	080037d4 	.word	0x080037d4
 8000a28:	080037f4 	.word	0x080037f4
 8000a2c:	0800383c 	.word	0x0800383c
 8000a30:	48000400 	.word	0x48000400
 8000a34:	ffffefff 	.word	0xffffefff

08000a38 <enc_mac_read>:

uint8_t enc_mac_read(uint8_t addr, uint8_t bank) {
 8000a38:	b5b0      	push	{r4, r5, r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	1dbb      	adds	r3, r7, #6
 8000a46:	1c0a      	adds	r2, r1, #0
 8000a48:	701a      	strb	r2, [r3, #0]
	if (addr > 0x1F) {
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b1f      	cmp	r3, #31
 8000a50:	d905      	bls.n	8000a5e <enc_mac_read+0x26>
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <enc_mac_read+0x7c>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 ffc1 	bl	80029dc <puts>
		return 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e026      	b.n	8000aac <enc_mac_read+0x74>
	}

	enc_select_reg_bank(bank);
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fd96 	bl	8000594 <enc_select_reg_bank>
	// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <enc_mac_read+0x80>)
 8000a6a:	695a      	ldr	r2, [r3, #20]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <enc_mac_read+0x80>)
 8000a6e:	4913      	ldr	r1, [pc, #76]	@ (8000abc <enc_mac_read+0x84>)
 8000a70:	400a      	ands	r2, r1
 8000a72:	615a      	str	r2, [r3, #20]

	// Send address and read data
	SPI_WriteByte(addr);           // Send the address
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fb7f 	bl	800117c <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 8000a7e:	250f      	movs	r5, #15
 8000a80:	197c      	adds	r4, r7, r5
 8000a82:	f000 fbd1 	bl	8001228 <SPI_ReadByte>
 8000a86:	0003      	movs	r3, r0
 8000a88:	7023      	strb	r3, [r4, #0]

	// Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <enc_mac_read+0x80>)
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <enc_mac_read+0x80>)
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	0149      	lsls	r1, r1, #5
 8000a94:	430a      	orrs	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
	printf("Read: Address 0x%02X, Data 0x%02X\n", addr, data);
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	7819      	ldrb	r1, [r3, #0]
 8000a9c:	197b      	adds	r3, r7, r5
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <enc_mac_read+0x88>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 ff34 	bl	8002910 <iprintf>

	return data;
 8000aa8:	197b      	adds	r3, r7, r5
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b004      	add	sp, #16
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab4:	08003868 	.word	0x08003868
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	ffffefff 	.word	0xffffefff
 8000ac0:	080038a0 	.word	0x080038a0

08000ac4 <enc_phy_write>:
	uint16_t data = (data_MSB << 8) + data_LSB;
	printf("PHY Read: Address 0x%02X, Data 0x%04X\n\r", addr, data);
	return data;
}

void enc_phy_write(uint8_t addr, uint16_t data) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	0002      	movs	r2, r0
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	1c0a      	adds	r2, r1, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
	enc_control_write(2, 0x14, addr);
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	001a      	movs	r2, r3
 8000adc:	2114      	movs	r1, #20
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f7ff fdd2 	bl	8000688 <enc_control_write>
	enc_control_write(2, 0x16, (uint8_t) (data & 0xFF));
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	001a      	movs	r2, r3
 8000aec:	2116      	movs	r1, #22
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fdca 	bl	8000688 <enc_control_write>
	enc_control_write(2, 0x17, (uint8_t) ((data >> 8) & 0xFF));
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	001a      	movs	r2, r3
 8000b00:	2117      	movs	r1, #23
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff fdc0 	bl	8000688 <enc_control_write>
	printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	7819      	ldrb	r1, [r3, #0]
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	881a      	ldrh	r2, [r3, #0]
 8000b10:	4b03      	ldr	r3, [pc, #12]	@ (8000b20 <enc_phy_write+0x5c>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fefc 	bl	8002910 <iprintf>
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	080038ec 	.word	0x080038ec

08000b24 <enc_eth_read>:

uint8_t enc_eth_read(uint8_t addr, uint8_t bank) {
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	1dbb      	adds	r3, r7, #6
 8000b32:	1c0a      	adds	r2, r1, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	if (addr > 0x1F) {
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b1f      	cmp	r3, #31
 8000b3c:	d903      	bls.n	8000b46 <enc_eth_read+0x22>
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <enc_eth_read+0x68>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f001 ff4b 	bl	80029dc <puts>
	}

	enc_select_reg_bank(bank);
 8000b46:	1dbb      	adds	r3, r7, #6
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fd22 	bl	8000594 <enc_select_reg_bank>
	// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <enc_eth_read+0x6c>)
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <enc_eth_read+0x6c>)
 8000b56:	490f      	ldr	r1, [pc, #60]	@ (8000b94 <enc_eth_read+0x70>)
 8000b58:	400a      	ands	r2, r1
 8000b5a:	615a      	str	r2, [r3, #20]

	// Send address and read data
	SPI_WriteByte(addr);           // Send the address
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fb0b 	bl	800117c <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 8000b66:	250f      	movs	r5, #15
 8000b68:	197c      	adds	r4, r7, r5
 8000b6a:	f000 fb5d 	bl	8001228 <SPI_ReadByte>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]

	// Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <enc_eth_read+0x6c>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <enc_eth_read+0x6c>)
 8000b78:	2180      	movs	r1, #128	@ 0x80
 8000b7a:	0149      	lsls	r1, r1, #5
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]

	return data;
 8000b80:	197b      	adds	r3, r7, r5
 8000b82:	781b      	ldrb	r3, [r3, #0]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8c:	08003868 	.word	0x08003868
 8000b90:	48000400 	.word	0x48000400
 8000b94:	ffffefff 	.word	0xffffefff

08000b98 <enc_reset>:

void enc_reset(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <enc_reset+0x2c>)
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <enc_reset+0x2c>)
 8000ba2:	4909      	ldr	r1, [pc, #36]	@ (8000bc8 <enc_reset+0x30>)
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	615a      	str	r2, [r3, #20]

	SPI_WriteByte(0XFF);
 8000ba8:	20ff      	movs	r0, #255	@ 0xff
 8000baa:	f000 fae7 	bl	800117c <SPI_WriteByte>

	GPIOB->ODR |= SPI2_CS_PIN;
 8000bae:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <enc_reset+0x2c>)
 8000bb0:	695a      	ldr	r2, [r3, #20]
 8000bb2:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <enc_reset+0x2c>)
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	0149      	lsls	r1, r1, #5
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	615a      	str	r2, [r3, #20]

}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	ffffefff 	.word	0xffffefff

08000bcc <enc_init>:



void enc_init(const uint8_t *mac) {
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b08b      	sub	sp, #44	@ 0x2c
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	6078      	str	r0, [r7, #4]
	// Perform a system reset
	enc_reset();
 8000bd4:	f7ff ffe0 	bl	8000b98 <enc_reset>

	// Wait for the ENC28J60 to stabilize (poll CLKRDY bit in ESTAT register)
	while (!(enc_mac_read(0x1D, 0) & 0x01))
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	201d      	movs	r0, #29
 8000bde:	f7ff ff2b 	bl	8000a38 <enc_mac_read>
 8000be2:	0003      	movs	r3, r0
 8000be4:	001a      	movs	r2, r3
 8000be6:	2301      	movs	r3, #1
 8000be8:	4013      	ands	r3, r2
 8000bea:	d0f6      	beq.n	8000bda <enc_init+0xe>
		; // ESTAT.CLKRDY

	// Split Memory: Reserve RX and TX buffers
	uint16_t rx_start = RX_BUFFER_START;
 8000bec:	2116      	movs	r1, #22
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	801a      	strh	r2, [r3, #0]
	uint16_t rx_end = RX_BUFFER_END;
 8000bf4:	2014      	movs	r0, #20
 8000bf6:	183b      	adds	r3, r7, r0
 8000bf8:	4a7d      	ldr	r2, [pc, #500]	@ (8000df0 <enc_init+0x224>)
 8000bfa:	801a      	strh	r2, [r3, #0]
	uint16_t tx_start = TX_BUFFER_START;
 8000bfc:	2412      	movs	r4, #18
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	22e0      	movs	r2, #224	@ 0xe0
 8000c02:	0152      	lsls	r2, r2, #5
 8000c04:	801a      	strh	r2, [r3, #0]
	uint16_t tx_end  = TX_BUFFER_END;
 8000c06:	2510      	movs	r5, #16
 8000c08:	197b      	adds	r3, r7, r5
 8000c0a:	4a7a      	ldr	r2, [pc, #488]	@ (8000df4 <enc_init+0x228>)
 8000c0c:	801a      	strh	r2, [r3, #0]
	// Initialize RX Buffer
	enc_buffer_init(rx_start, rx_end);
 8000c0e:	183b      	adds	r3, r7, r0
 8000c10:	881a      	ldrh	r2, [r3, #0]
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fd71 	bl	8000700 <enc_buffer_init>
	enc_control_write(0, 0x04, (uint8_t) (tx_start & 0xFF)); // Low byte
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	001a      	movs	r2, r3
 8000c26:	2104      	movs	r1, #4
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fd2d 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x05, (uint8_t) ((tx_start >> 8) & 0xFF)); // High byte
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fd23 	bl	8000688 <enc_control_write>

	// Write to ETXND (Transmit End Pointer)
	enc_control_write(0, 0x06, (uint8_t) (tx_end & 0xFF)); // Low byte
 8000c42:	197b      	adds	r3, r7, r5
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2106      	movs	r1, #6
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fd1b 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0x07, (uint8_t) ((tx_end >> 8) & 0xFF)); // High byte
 8000c52:	197b      	adds	r3, r7, r5
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	2107      	movs	r1, #7
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fd11 	bl	8000688 <enc_control_write>
	//spi_control_write(0, 0x0D, (uint8_t) ((rx_start >> 8) & 0xFF)); // ERXRDPTH

	// Enable MAC Receive
	//spi_control_write(2, 0x00, 0x0D); // MACON1: Enable RX (MARXEN), TXPAUS, RXPAUS

	enc_control_write(1, 0x18, 0xB1);// crcen,ucen,pcen,bcen
 8000c66:	22b1      	movs	r2, #177	@ 0xb1
 8000c68:	2118      	movs	r1, #24
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff fd0c 	bl	8000688 <enc_control_write>
	enc_control_write(1, 0x08, 0x3F); //pattern match
 8000c70:	223f      	movs	r2, #63	@ 0x3f
 8000c72:	2108      	movs	r1, #8
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fd07 	bl	8000688 <enc_control_write>
	enc_control_write(1, 0x09, 0x30); //pattern match
 8000c7a:	2230      	movs	r2, #48	@ 0x30
 8000c7c:	2109      	movs	r1, #9
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff fd02 	bl	8000688 <enc_control_write>
	enc_control_write(1, 0x10, 0xF9); //pattern match
 8000c84:	22f9      	movs	r2, #249	@ 0xf9
 8000c86:	2110      	movs	r1, #16
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f7ff fcfd 	bl	8000688 <enc_control_write>
	enc_control_write(1, 0x11, 0xF7); //pattern match
 8000c8e:	22f7      	movs	r2, #247	@ 0xf7
 8000c90:	2111      	movs	r1, #17
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff fcf8 	bl	8000688 <enc_control_write>


	uint8_t read_macon1 = enc_mac_read(0x00, 2); //mac enable for reception
 8000c98:	250f      	movs	r5, #15
 8000c9a:	197c      	adds	r4, r7, r5
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff feca 	bl	8000a38 <enc_mac_read>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	7023      	strb	r3, [r4, #0]
	enc_control_write(2, 0x00, (read_macon1 | (1 << 0))); //mac enable for reception
 8000ca8:	197b      	adds	r3, r7, r5
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2201      	movs	r2, #1
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff fce6 	bl	8000688 <enc_control_write>

	enc_control_write(2, 0x02, 0x32); //MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN)
 8000cbc:	2232      	movs	r2, #50	@ 0x32
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f7ff fce1 	bl	8000688 <enc_control_write>
	// Configure MACON3 for padding, CRC, and frame length
	//enc_control_write(2, 0x02, 0x70); // MACON3: Padding, CRC, and frame length checking enabled37

	enc_control_write(2, 0x06, 0x12); // MAIPGL: Non-back-to-back gap
 8000cc6:	2212      	movs	r2, #18
 8000cc8:	2106      	movs	r1, #6
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f7ff fcdc 	bl	8000688 <enc_control_write>
	enc_control_write(2, 0x07, 0x0C); // MAIPGH: Non-back-to-back gap (Half Duplex)
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	2107      	movs	r1, #7
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff fcd7 	bl	8000688 <enc_control_write>

	enc_control_write(2, 0x04, 0x12); // MABBIPG: Back-to-back gap (Full Duplex)
 8000cda:	2212      	movs	r2, #18
 8000cdc:	2104      	movs	r1, #4
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f7ff fcd2 	bl	8000688 <enc_control_write>

	enc_control_write(2, 0x03, 0x40); // MACON4: IEEE compliance00
 8000ce4:	2240      	movs	r2, #64	@ 0x40
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fccd 	bl	8000688 <enc_control_write>

	// Set maximum frame length (1518 bytes for standard Ethernet)
	enc_control_write(2, 0x0A, 0xDC); // MAMXFLL
 8000cee:	22dc      	movs	r2, #220	@ 0xdc
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f7ff fcc8 	bl	8000688 <enc_control_write>
	enc_control_write(2, 0x0B, 0x05); // MAMXFLH
 8000cf8:	2205      	movs	r2, #5
 8000cfa:	210b      	movs	r1, #11
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f7ff fcc3 	bl	8000688 <enc_control_write>

	// Configure MAC Address (write in reverse order)
	enc_control_write(3, 0x01, mac[5]); // MAADR6
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3305      	adds	r3, #5
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f7ff fcbb 	bl	8000688 <enc_control_write>
	enc_control_write(3, 0x00, mac[4]); // MAADR5
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3304      	adds	r3, #4
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f7ff fcb3 	bl	8000688 <enc_control_write>
	enc_control_write(3, 0x03, mac[3]); // MAADR4
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3303      	adds	r3, #3
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f7ff fcab 	bl	8000688 <enc_control_write>
	enc_control_write(3, 0x02, mac[2]); // MAADR3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3302      	adds	r3, #2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f7ff fca3 	bl	8000688 <enc_control_write>
	enc_control_write(3, 0x05, mac[1]); // MAADR2
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2105      	movs	r1, #5
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f7ff fc9b 	bl	8000688 <enc_control_write>
	enc_control_write(3, 0x04, mac[0]); // MAADR1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	001a      	movs	r2, r3
 8000d58:	2104      	movs	r1, #4
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f7ff fc94 	bl	8000688 <enc_control_write>
	enc_phy_write(0x10, 0x0100);
 8000d60:	2380      	movs	r3, #128	@ 0x80
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	0019      	movs	r1, r3
 8000d66:	2010      	movs	r0, #16
 8000d68:	f7ff feac 	bl	8000ac4 <enc_phy_write>

	// Configure PHY LEDs for activity indication
	enc_control_write(0, 0X1B, 0XC0); // reception enable bit
 8000d6c:	22c0      	movs	r2, #192	@ 0xc0
 8000d6e:	211b      	movs	r1, #27
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff fc89 	bl	8000688 <enc_control_write>
	enc_control_write(0, 0X1F, 0X04); // reception enable bit
 8000d76:	2204      	movs	r2, #4
 8000d78:	211f      	movs	r1, #31
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fc84 	bl	8000688 <enc_control_write>

	printf("\nENC28J60 Initialization Complete.\n");
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <enc_init+0x22c>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 fe2a 	bl	80029dc <puts>
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	001c      	movs	r4, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3301      	adds	r3, #1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	001d      	movs	r5, r3
			mac[2], mac[3], mac[4], mac[5]);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3302      	adds	r3, #2
 8000d9a:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000d9c:	001e      	movs	r6, r3
			mac[2], mac[3], mac[4], mac[5]);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3303      	adds	r3, #3
 8000da2:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000da4:	001a      	movs	r2, r3
			mac[2], mac[3], mac[4], mac[5]);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3304      	adds	r3, #4
 8000daa:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000dac:	0019      	movs	r1, r3
			mac[2], mac[3], mac[4], mac[5]);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3305      	adds	r3, #5
 8000db2:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000db4:	4811      	ldr	r0, [pc, #68]	@ (8000dfc <enc_init+0x230>)
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	9101      	str	r1, [sp, #4]
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	002a      	movs	r2, r5
 8000dc0:	0021      	movs	r1, r4
 8000dc2:	f001 fda5 	bl	8002910 <iprintf>
	uint8_t rev = enc_eth_read(0x12,3);
 8000dc6:	250e      	movs	r5, #14
 8000dc8:	197c      	adds	r4, r7, r5
 8000dca:	2103      	movs	r1, #3
 8000dcc:	2012      	movs	r0, #18
 8000dce:	f7ff fea9 	bl	8000b24 <enc_eth_read>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	7023      	strb	r3, [r4, #0]
	    // microchip forgot to step the number on the silicon when they
	    // released the revision B7. 6 is now rev B7. We still have
	    // to see what they do when they release B8. At the moment
	    // there is no B8 out yet
	    if (rev > 5) ++rev;
 8000dd6:	197b      	adds	r3, r7, r5
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	d904      	bls.n	8000de8 <enc_init+0x21c>
 8000dde:	197b      	adds	r3, r7, r5
 8000de0:	197a      	adds	r2, r7, r5
 8000de2:	7812      	ldrb	r2, [r2, #0]
 8000de4:	3201      	adds	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
	    //return rev;
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b007      	add	sp, #28
 8000dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df0:	00001bff 	.word	0x00001bff
 8000df4:	00001fff 	.word	0x00001fff
 8000df8:	08003918 	.word	0x08003918
 8000dfc:	0800393c 	.word	0x0800393c

08000e00 <USART2_IRQHandler>:
#include "cbfifo.h"

#include "global.h"
#include <stdbool.h>
volatile uint32_t tick_counter = 0;
void USART2_IRQHandler(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	// Check if RXNE flag is set (data received)
	if (USART2->ISR & USART_ISR_RXNE) {
 8000e06:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d00b      	beq.n	8000e28 <USART2_IRQHandler+0x28>
		char newval = USART2->RDR; // Read the received character
 8000e10:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	701a      	strb	r2, [r3, #0]
		cbfifo_enqueue(&fiforx, &newval, sizeof(newval));
 8000e1c:	1df9      	adds	r1, r7, #7
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <USART2_IRQHandler+0x88>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fad2 	bl	80003cc <cbfifo_enqueue>
	}
	if (USART2->ISR & USART_ISR_TXE) {
 8000e28:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	2280      	movs	r2, #128	@ 0x80
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d023      	beq.n	8000e7a <USART2_IRQHandler+0x7a>
		char newval; // Read the received character
		if (cbfifo_dequeue(&fifotx, &newval, sizeof(newval)) > 0) {
 8000e32:	1db9      	adds	r1, r7, #6
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <USART2_IRQHandler+0x8c>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fb16 	bl	800046a <cbfifo_dequeue>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d015      	beq.n	8000e6e <USART2_IRQHandler+0x6e>
			if (newval == '\n') {
 8000e42:	1dbb      	adds	r3, r7, #6
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	d10c      	bne.n	8000e64 <USART2_IRQHandler+0x64>
				USART2->TDR = '\r';
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e4c:	220d      	movs	r2, #13
 8000e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
				while (!(USART2->ISR & USART_ISR_TXE))
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	2280      	movs	r2, #128	@ 0x80
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d0fa      	beq.n	8000e52 <USART2_IRQHandler+0x52>
					;
				USART2->TDR = '\n';
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e5e:	220a      	movs	r2, #10
 8000e60:	851a      	strh	r2, [r3, #40]	@ 0x28
			}
		} else {
			USART2->CR1 &= (~(USART_CR1_TXEIE));
		}
	}
}
 8000e62:	e00a      	b.n	8000e7a <USART2_IRQHandler+0x7a>
				USART2->TDR = newval; // Send the character
 8000e64:	1dbb      	adds	r3, r7, #6
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000e6c:	e005      	b.n	8000e7a <USART2_IRQHandler+0x7a>
			USART2->CR1 &= (~(USART_CR1_TXEIE));
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e74:	2180      	movs	r1, #128	@ 0x80
 8000e76:	438a      	bics	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	40004400 	.word	0x40004400
 8000e88:	20000118 	.word	0x20000118
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <SysTick_Handler>:
/*
 * This function increments tick counter and global tick counter every 10ms.
 * Tick counter is used to run the functions whereas global tick counter is used for
 * keeping a time record since startup.
 */
void SysTick_Handler(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	tick_counter++;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <SysTick_Handler+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	4b02      	ldr	r3, [pc, #8]	@ (8000ea4 <SysTick_Handler+0x14>)
 8000e9c:	601a      	str	r2, [r3, #0]
	//global_tick_counter++;
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000088 	.word	0x20000088

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	0002      	movs	r2, r0
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eba:	d809      	bhi.n	8000ed0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	231f      	movs	r3, #31
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <__NVIC_EnableIRQ+0x30>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ef0:	d828      	bhi.n	8000f44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb0 <__NVIC_SetPriority+0xd4>)
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	33c0      	adds	r3, #192	@ 0xc0
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	589b      	ldr	r3, [r3, r2]
 8000f02:	1dfa      	adds	r2, r7, #7
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	0011      	movs	r1, r2
 8000f08:	2203      	movs	r2, #3
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	00d2      	lsls	r2, r2, #3
 8000f0e:	21ff      	movs	r1, #255	@ 0xff
 8000f10:	4091      	lsls	r1, r2
 8000f12:	000a      	movs	r2, r1
 8000f14:	43d2      	mvns	r2, r2
 8000f16:	401a      	ands	r2, r3
 8000f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	22ff      	movs	r2, #255	@ 0xff
 8000f20:	401a      	ands	r2, r3
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0018      	movs	r0, r3
 8000f28:	2303      	movs	r3, #3
 8000f2a:	4003      	ands	r3, r0
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f30:	481f      	ldr	r0, [pc, #124]	@ (8000fb0 <__NVIC_SetPriority+0xd4>)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	33c0      	adds	r3, #192	@ 0xc0
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f42:	e031      	b.n	8000fa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f44:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb4 <__NVIC_SetPriority+0xd8>)
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	400b      	ands	r3, r1
 8000f50:	3b08      	subs	r3, #8
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3306      	adds	r3, #6
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	18d3      	adds	r3, r2, r3
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1dfa      	adds	r2, r7, #7
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	0011      	movs	r1, r2
 8000f64:	2203      	movs	r2, #3
 8000f66:	400a      	ands	r2, r1
 8000f68:	00d2      	lsls	r2, r2, #3
 8000f6a:	21ff      	movs	r1, #255	@ 0xff
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	000a      	movs	r2, r1
 8000f70:	43d2      	mvns	r2, r2
 8000f72:	401a      	ands	r2, r3
 8000f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	22ff      	movs	r2, #255	@ 0xff
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	0018      	movs	r0, r3
 8000f84:	2303      	movs	r3, #3
 8000f86:	4003      	ands	r3, r0
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	001c      	movs	r4, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	4023      	ands	r3, r4
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	3306      	adds	r3, #6
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	18c3      	adds	r3, r0, r3
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b003      	add	sp, #12
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <uart_init>:
#define F_TIM_CLOCK (48UL*1000UL*1000UL)	// 48 MHz
#define PWM_FREQUENCY (500)
#define PWM_MAX_DUTY_VALUE ( (F_TIM_CLOCK / (PWM_FREQUENCY * PWM_PRESCALER)) - 1)
#define PWM_PRESCALER (2)

void uart_init(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001068 <uart_init+0xb0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6898      	ldr	r0, [r3, #8]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f001 fd12 	bl	80029f0 <setvbuf>
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable GPIOA clock
 8000fcc:	4b27      	ldr	r3, [pc, #156]	@ (800106c <uart_init+0xb4>)
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	4b26      	ldr	r3, [pc, #152]	@ (800106c <uart_init+0xb4>)
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	0289      	lsls	r1, r1, #10
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	615a      	str	r2, [r3, #20]
	// Set PA2 (TX) and PA3 (RX) to alternate function mode (AF7 for USART2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);			// Clear
 8000fda:	2390      	movs	r3, #144	@ 0x90
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2390      	movs	r3, #144	@ 0x90
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	21f0      	movs	r1, #240	@ 0xf0
 8000fe6:	438a      	bics	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);// Set AF mode
 8000fea:	2390      	movs	r3, #144	@ 0x90
 8000fec:	05db      	lsls	r3, r3, #23
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2390      	movs	r3, #144	@ 0x90
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	21a0      	movs	r1, #160	@ 0xa0
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos) | (1 << GPIO_AFRL_AFSEL3_Pos); // AF7 (USART2) for PA2 and PA3
 8000ffa:	2390      	movs	r3, #144	@ 0x90
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	2390      	movs	r3, #144	@ 0x90
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	2188      	movs	r1, #136	@ 0x88
 8001006:	0149      	lsls	r1, r1, #5
 8001008:	430a      	orrs	r2, r1
 800100a:	621a      	str	r2, [r3, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;				// Enable USART2 clock
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <uart_init+0xb4>)
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	4b16      	ldr	r3, [pc, #88]	@ (800106c <uart_init+0xb4>)
 8001012:	2180      	movs	r1, #128	@ 0x80
 8001014:	0289      	lsls	r1, r1, #10
 8001016:	430a      	orrs	r2, r1
 8001018:	61da      	str	r2, [r3, #28]
	USART2->BRR = USART_BRR_VALUE;// Configure baud rate (assuming 24MHz APB1 clock and 19200 baud rate)
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <uart_init+0xb8>)
 800101c:	4a15      	ldr	r2, [pc, #84]	@ (8001074 <uart_init+0xbc>)
 800101e:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE; // Enable TX, RX, and RX interrupt
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <uart_init+0xb8>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <uart_init+0xb8>)
 8001026:	212c      	movs	r1, #44	@ 0x2c
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_PARITY_CONFIG;
 800102c:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <uart_init+0xb8>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <uart_init+0xb8>)
 8001032:	21c0      	movs	r1, #192	@ 0xc0
 8001034:	00c9      	lsls	r1, r1, #3
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_WORD_LENGTH;
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <uart_init+0xb8>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <uart_init+0xb8>)
 8001040:	2180      	movs	r1, #128	@ 0x80
 8001042:	0149      	lsls	r1, r1, #5
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
	USART2->CR2 |= USART_STOP_BITS;
 8001048:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <uart_init+0xb8>)
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <uart_init+0xb8>)
 800104c:	6852      	ldr	r2, [r2, #4]
 800104e:	605a      	str	r2, [r3, #4]
	USART2->CR1 |= USART_CR1_UE;								// Enable USART
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <uart_init+0xb8>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <uart_init+0xb8>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);			// Enable USART2 interrupt in NVIC
 800105c:	201c      	movs	r0, #28
 800105e:	f7ff ff23 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000001c 	.word	0x2000001c
 800106c:	40021000 	.word	0x40021000
 8001070:	40004400 	.word	0x40004400
 8001074:	000004e2 	.word	0x000004e2

08001078 <SysTick_Init>:
	NVIC_SetPriority(SysTick_IRQn, 3);
	SysTick->VAL = 0;
	SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
}
*/
void SysTick_Init(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    SysTick->LOAD = (F_TIM_CLOCK - 1); // Configure SysTick to generate 1 interrupt every 1 second
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <SysTick_Init+0x28>)
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <SysTick_Init+0x2c>)
 8001080:	605a      	str	r2, [r3, #4]
    NVIC_SetPriority(SysTick_IRQn, 3); // Set priority level (optional)
 8001082:	2301      	movs	r3, #1
 8001084:	425b      	negs	r3, r3
 8001086:	2103      	movs	r1, #3
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ff27 	bl	8000edc <__NVIC_SetPriority>
    SysTick->VAL = 0; // Clear the current value register
 800108e:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <SysTick_Init+0x28>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // Enable SysTick with interrupt
 8001094:	4b02      	ldr	r3, [pc, #8]	@ (80010a0 <SysTick_Init+0x28>)
 8001096:	2203      	movs	r2, #3
 8001098:	601a      	str	r2, [r3, #0]
}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	e000e010 	.word	0xe000e010
 80010a4:	02dc6bff 	.word	0x02dc6bff

080010a8 <main>:
uint8_t device_mac[6] = { 0x02, 0x04, 0xA3, 0x3C, 0x4D, 0x50 }; // Default MAC
uint8_t target_mac[6] = { 0xFF, 0XFF, 0XFF, 0xFF, 0XFF, 0XFF }; // Default MAC
uint8_t device_ip[4] = { 192, 168, 1, 100 }; // Default IP Address
uint8_t target_ip[4] = { 192, 168, 1, 1 };
void runWebServer(const uint8_t *macAddress, const uint8_t *ipAddress);
int main(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	/*
	 * Clocks: Processor = 48 Mhz. AHB = 48 MHz. APB = 24 MHz.
	 *
	 */
	//init_uled(); //On board LED Initialisation
	SysTick_Init();
 80010ac:	f7ff ffe4 	bl	8001078 <SysTick_Init>
	SPI_Init();
 80010b0:	f000 f81e 	bl	80010f0 <SPI_Init>
	uart_init(); //UART 2 Initialisation for Serial COmmunication
 80010b4:	f7ff ff80 	bl	8000fb8 <uart_init>
	cbfifo_init(&fiforx); // Initialising RX Buffer
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <main+0x38>)
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff f96f 	bl	800039e <cbfifo_init>
	cbfifo_init(&fifotx); // Initialising TX buffer
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <main+0x3c>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff f96b 	bl	800039e <cbfifo_init>
//	char inputval[INPUT_BUFFER_SIZE]; // Defining a buffer to accept the command and Process
//	char *argv[ARGUMENT_BUFFER_SIZE]; // Defining a buffer to store Argument Vectors after tokenization
//	int argc; //TO store Argument COunt
	printf("\nWelcome to SerialIO!\n");
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <main+0x40>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f001 fc86 	bl	80029dc <puts>
	enc_init(device_mac);
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <main+0x44>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff fd7a 	bl	8000bcc <enc_init>
	//runWebServer(device_mac,device_ip);
	while (1) {
		packetLoop();
 80010d8:	f001 f850 	bl	800217c <packetLoop>
 80010dc:	e7fc      	b.n	80010d8 <main+0x30>
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	20000118 	.word	0x20000118
 80010e4:	2000008c 	.word	0x2000008c
 80010e8:	08003968 	.word	0x08003968
 80010ec:	20000000 	.word	0x20000000

080010f0 <SPI_Init>:
#include "spi.h"

void SPI_Init(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	// Enable GPIOB clock
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <SPI_Init+0x74>)
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <SPI_Init+0x74>)
 80010fa:	2180      	movs	r1, #128	@ 0x80
 80010fc:	02c9      	lsls	r1, r1, #11
 80010fe:	430a      	orrs	r2, r1
 8001100:	615a      	str	r2, [r3, #20]

	// Configure CS, SCK, and MOSI as output
	GPIOB->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER13
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <SPI_Init+0x78>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <SPI_Init+0x78>)
 8001108:	4918      	ldr	r1, [pc, #96]	@ (800116c <SPI_Init+0x7c>)
 800110a:	400a      	ands	r2, r1
 800110c:	601a      	str	r2, [r3, #0]
			| GPIO_MODER_MODER15); // Clear MODER bits
	GPIOB->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0
 800110e:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <SPI_Init+0x78>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <SPI_Init+0x78>)
 8001114:	218a      	movs	r1, #138	@ 0x8a
 8001116:	05c9      	lsls	r1, r1, #23
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
			| GPIO_MODER_MODER15_0); // Set as output

	// Configure MISO as input
	GPIOB->MODER &= ~GPIO_MODER_MODER14; // Set as input
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <SPI_Init+0x78>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <SPI_Init+0x78>)
 8001122:	4913      	ldr	r1, [pc, #76]	@ (8001170 <SPI_Init+0x80>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

	// Set all pins to high-speed mode
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR12 | GPIO_OSPEEDR_OSPEEDR13
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <SPI_Init+0x78>)
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <SPI_Init+0x78>)
 800112e:	21ff      	movs	r1, #255	@ 0xff
 8001130:	0609      	lsls	r1, r1, #24
 8001132:	430a      	orrs	r2, r1
 8001134:	609a      	str	r2, [r3, #8]
			| GPIO_OSPEEDR_OSPEEDR14 | GPIO_OSPEEDR_OSPEEDR15);

	// Set default states
	GPIOB->ODR |= SPI2_CS_PIN;    // CS High (inactive)
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <SPI_Init+0x78>)
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <SPI_Init+0x78>)
 800113c:	2180      	movs	r1, #128	@ 0x80
 800113e:	0149      	lsls	r1, r1, #5
 8001140:	430a      	orrs	r2, r1
 8001142:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~SPI2_SCK_PIN;  // SCK Low (idle)
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <SPI_Init+0x78>)
 8001146:	695a      	ldr	r2, [r3, #20]
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <SPI_Init+0x78>)
 800114a:	490a      	ldr	r1, [pc, #40]	@ (8001174 <SPI_Init+0x84>)
 800114c:	400a      	ands	r2, r1
 800114e:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <SPI_Init+0x78>)
 8001152:	695a      	ldr	r2, [r3, #20]
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <SPI_Init+0x78>)
 8001156:	4908      	ldr	r1, [pc, #32]	@ (8001178 <SPI_Init+0x88>)
 8001158:	400a      	ands	r2, r1
 800115a:	615a      	str	r2, [r3, #20]
}
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400
 800116c:	30ffffff 	.word	0x30ffffff
 8001170:	cfffffff 	.word	0xcfffffff
 8001174:	ffffdfff 	.word	0xffffdfff
 8001178:	ffff7fff 	.word	0xffff7fff

0800117c <SPI_WriteByte>:

void SPI_WriteByte(uint8_t data) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	0002      	movs	r2, r0
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e039      	b.n	8001202 <SPI_WriteByte+0x86>
		// Write the MSB to MOSI
		if (data & 0x80) {
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b25b      	sxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	da07      	bge.n	80011a8 <SPI_WriteByte+0x2c>
			GPIOB->ODR |= SPI2_MOSI_PIN; // Set MOSI High
 8001198:	4b20      	ldr	r3, [pc, #128]	@ (800121c <SPI_WriteByte+0xa0>)
 800119a:	695a      	ldr	r2, [r3, #20]
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <SPI_WriteByte+0xa0>)
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	0209      	lsls	r1, r1, #8
 80011a2:	430a      	orrs	r2, r1
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	e005      	b.n	80011b4 <SPI_WriteByte+0x38>
		} else {
			GPIOB->ODR &= ~SPI2_MOSI_PIN; // Set MOSI Low
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <SPI_WriteByte+0xa0>)
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <SPI_WriteByte+0xa0>)
 80011ae:	491c      	ldr	r1, [pc, #112]	@ (8001220 <SPI_WriteByte+0xa4>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	615a      	str	r2, [r3, #20]
		}
		data <<= 1; // Shift to the next bit
 80011b4:	1dfa      	adds	r2, r7, #7
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	18db      	adds	r3, r3, r3
 80011bc:	7013      	strb	r3, [r2, #0]

		// Toggle SCK to clock the bit
		GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <SPI_WriteByte+0xa0>)
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <SPI_WriteByte+0xa0>)
 80011c4:	2180      	movs	r1, #128	@ 0x80
 80011c6:	0189      	lsls	r1, r1, #6
 80011c8:	430a      	orrs	r2, r1
 80011ca:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	e002      	b.n	80011d8 <SPI_WriteByte+0x5c>
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3301      	adds	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	ddf9      	ble.n	80011d2 <SPI_WriteByte+0x56>
			;
		GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <SPI_WriteByte+0xa0>)
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <SPI_WriteByte+0xa0>)
 80011e4:	490f      	ldr	r1, [pc, #60]	@ (8001224 <SPI_WriteByte+0xa8>)
 80011e6:	400a      	ands	r2, r1
 80011e8:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e002      	b.n	80011f6 <SPI_WriteByte+0x7a>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	ddf9      	ble.n	80011f0 <SPI_WriteByte+0x74>
	for (int i = 0; i < 8; i++) {
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2b07      	cmp	r3, #7
 8001206:	ddc2      	ble.n	800118e <SPI_WriteByte+0x12>
			;
	}
	GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SPI_WriteByte+0xa0>)
 800120a:	695a      	ldr	r2, [r3, #20]
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <SPI_WriteByte+0xa0>)
 800120e:	4904      	ldr	r1, [pc, #16]	@ (8001220 <SPI_WriteByte+0xa4>)
 8001210:	400a      	ands	r2, r1
 8001212:	615a      	str	r2, [r3, #20]
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b006      	add	sp, #24
 800121a:	bd80      	pop	{r7, pc}
 800121c:	48000400 	.word	0x48000400
 8001220:	ffff7fff 	.word	0xffff7fff
 8001224:	ffffdfff 	.word	0xffffdfff

08001228 <SPI_ReadByte>:

uint8_t SPI_ReadByte(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
	uint8_t received_data = 0;
 800122e:	230f      	movs	r3, #15
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 8; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	e034      	b.n	80012a6 <SPI_ReadByte+0x7e>
		received_data <<= 1; // Make room for the next bit
 800123c:	230f      	movs	r3, #15
 800123e:	18fa      	adds	r2, r7, r3
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	18db      	adds	r3, r3, r3
 8001246:	7013      	strb	r3, [r2, #0]

		// Toggle SCK to clock the bit
		GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <SPI_ReadByte+0x94>)
 800124a:	695a      	ldr	r2, [r3, #20]
 800124c:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <SPI_ReadByte+0x94>)
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	0189      	lsls	r1, r1, #6
 8001252:	430a      	orrs	r2, r1
 8001254:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	e002      	b.n	8001262 <SPI_ReadByte+0x3a>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3301      	adds	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	ddf9      	ble.n	800125c <SPI_ReadByte+0x34>
			;

		// Read the bit from MISO
		if (GPIOB->IDR & SPI2_MISO_PIN) {
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <SPI_ReadByte+0x94>)
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	01db      	lsls	r3, r3, #7
 8001270:	4013      	ands	r3, r2
 8001272:	d006      	beq.n	8001282 <SPI_ReadByte+0x5a>
			received_data |= 0x01; // Set the LSB
 8001274:	220f      	movs	r2, #15
 8001276:	18bb      	adds	r3, r7, r2
 8001278:	18ba      	adds	r2, r7, r2
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	430a      	orrs	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
		}

		GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <SPI_ReadByte+0x94>)
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <SPI_ReadByte+0x94>)
 8001288:	490d      	ldr	r1, [pc, #52]	@ (80012c0 <SPI_ReadByte+0x98>)
 800128a:	400a      	ands	r2, r1
 800128c:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	e002      	b.n	800129a <SPI_ReadByte+0x72>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	ddf9      	ble.n	8001294 <SPI_ReadByte+0x6c>
	for (int i = 0; i < 8; i++) {
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	ddc7      	ble.n	800123c <SPI_ReadByte+0x14>
			;
	}

	return received_data;
 80012ac:	230f      	movs	r3, #15
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	781b      	ldrb	r3, [r3, #0]
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	48000400 	.word	0x48000400
 80012c0:	ffffdfff 	.word	0xffffdfff

080012c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e00a      	b.n	80012ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012d6:	f001 f81b 	bl	8002310 <__io_getchar>
 80012da:	0001      	movs	r1, r0
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	60ba      	str	r2, [r7, #8]
 80012e2:	b2ca      	uxtb	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbf0      	blt.n	80012d6 <_read+0x12>
  }

  return len;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b006      	add	sp, #24
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e009      	b.n	8001324 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	0018      	movs	r0, r3
 800131a:	f001 f811 	bl	8002340 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf1      	blt.n	8001310 <_write+0x12>
  }
  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b006      	add	sp, #24
 8001334:	bd80      	pop	{r7, pc}

08001336 <_close>:

int _close(int file)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133e:	2301      	movs	r3, #1
 8001340:	425b      	negs	r3, r3
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}

0800134a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	0192      	lsls	r2, r2, #6
 800135a:	605a      	str	r2, [r3, #4]
  return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	18d3      	adds	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f001 fd34 	bl	8002e2c <__errno>
 80013c4:	0003      	movs	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	425b      	negs	r3, r3
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	18d2      	adds	r2, r2, r3
 80013de:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <_sbrk+0x64>)
 80013e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b006      	add	sp, #24
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20008000 	.word	0x20008000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	200001a4 	.word	0x200001a4
 80013f8:	200008e0 	.word	0x200008e0

080013fc <transmit_tcp_packet>:
           packet_size, start_address, next_start_address - 1);
}


void transmit_tcp_packet(uint8_t *packet, uint16_t packet_size)
{
 80013fc:	b5b0      	push	{r4, r5, r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	000a      	movs	r2, r1
 8001406:	1cbb      	adds	r3, r7, #2
 8001408:	801a      	strh	r2, [r3, #0]
	//Write the ARP packet to the ENC28J60 buffer
	//uint16_t frame_size = 43; // The total length is now exactly 42 bytes (without padding)
	uint16_t start_address = TX_BUFFER_START;
 800140a:	210e      	movs	r1, #14
 800140c:	187b      	adds	r3, r7, r1
 800140e:	22e0      	movs	r2, #224	@ 0xe0
 8001410:	0152      	lsls	r2, r2, #5
 8001412:	801a      	strh	r2, [r3, #0]
	if ((start_address + packet_size - 1) > 0x1FFF) {
 8001414:	187b      	adds	r3, r7, r1
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	1cbb      	adds	r3, r7, #2
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	18d2      	adds	r2, r2, r3
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	019b      	lsls	r3, r3, #6
 8001422:	429a      	cmp	r2, r3
 8001424:	dd04      	ble.n	8001430 <transmit_tcp_packet+0x34>
		printf("\nInvalid Buffer Size. Buffer exceeds valid address range.\n");
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <transmit_tcp_packet+0xa8>)
 8001428:	0018      	movs	r0, r3
 800142a:	f001 fad7 	bl	80029dc <puts>
		return;
 800142e:	e036      	b.n	800149e <transmit_tcp_packet+0xa2>
	}
	uint16_t end_address = start_address + packet_size - 1;
 8001430:	210e      	movs	r1, #14
 8001432:	187a      	adds	r2, r7, r1
 8001434:	1cbb      	adds	r3, r7, #2
 8001436:	8812      	ldrh	r2, [r2, #0]
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	b29a      	uxth	r2, r3
 800143e:	250c      	movs	r5, #12
 8001440:	197b      	adds	r3, r7, r5
 8001442:	3a01      	subs	r2, #1
 8001444:	801a      	strh	r2, [r3, #0]
	enc_buffer_write(packet_size, start_address, packet);
 8001446:	1cbb      	adds	r3, r7, #2
 8001448:	8818      	ldrh	r0, [r3, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	000c      	movs	r4, r1
 800144e:	187b      	adds	r3, r7, r1
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	0019      	movs	r1, r3
 8001454:	f7ff f9d0 	bl	80007f8 <enc_buffer_write>

	// Set transmit pointers
	enc28j60_set_transmit_pointers(start_address, end_address);
 8001458:	197b      	adds	r3, r7, r5
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	193b      	adds	r3, r7, r4
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	0011      	movs	r1, r2
 8001462:	0018      	movs	r0, r3
 8001464:	f7fe ff26 	bl	80002b4 <enc28j60_set_transmit_pointers>

	// Start transmission
	enc28j60_start_transmission();
 8001468:	f7fe ff09 	bl	800027e <enc28j60_start_transmission>

	// Wait for transmission to complete
	if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
 800146c:	23fa      	movs	r3, #250	@ 0xfa
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	0018      	movs	r0, r3
 8001472:	f7fe ff50 	bl	8000316 <wait_for_transmission_complete>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d00d      	beq.n	8001496 <transmit_tcp_packet+0x9a>
		// Check if transmission was successful
		if (enc28j60_transmission_successful()) {
 800147a:	f7fe ff7b 	bl	8000374 <enc28j60_transmission_successful>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d004      	beq.n	800148c <transmit_tcp_packet+0x90>
			printf("TCP request sent successfully.\n\r");
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <transmit_tcp_packet+0xac>)
 8001484:	0018      	movs	r0, r3
 8001486:	f001 fa43 	bl	8002910 <iprintf>
 800148a:	e008      	b.n	800149e <transmit_tcp_packet+0xa2>
		} else {
			printf("TCP transmission failed. Check error flags.\n\r");
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <transmit_tcp_packet+0xb0>)
 800148e:	0018      	movs	r0, r3
 8001490:	f001 fa3e 	bl	8002910 <iprintf>
 8001494:	e003      	b.n	800149e <transmit_tcp_packet+0xa2>
		}
	} else {
		printf(
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <transmit_tcp_packet+0xb4>)
 8001498:	0018      	movs	r0, r3
 800149a:	f001 fa39 	bl	8002910 <iprintf>
				"Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
	}
}
 800149e:	46bd      	mov	sp, r7
 80014a0:	b004      	add	sp, #16
 80014a2:	bdb0      	pop	{r4, r5, r7, pc}
 80014a4:	08003b1c 	.word	0x08003b1c
 80014a8:	08003b58 	.word	0x08003b58
 80014ac:	08003b7c 	.word	0x08003b7c
 80014b0:	08003bac 	.word	0x08003bac

080014b4 <packetReceive>:
void refreshArp(void);
void trial_arp_request(void);
uint32_t getSystemTick(void);

// Function implementations
uint16_t packetReceive() {
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
	static uint16_t gNextPacketPtr = RX_BUFFER_START;
	static bool unreleasedPacket = false;
	uint16_t len = 0;
 80014ba:	230e      	movs	r3, #14
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	2200      	movs	r2, #0
 80014c0:	801a      	strh	r2, [r3, #0]

	// Release the last packet if necessary
	if (unreleasedPacket) {
 80014c2:	4b54      	ldr	r3, [pc, #336]	@ (8001614 <packetReceive+0x160>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d031      	beq.n	800152e <packetReceive+0x7a>
		if (gNextPacketPtr == 0) {
 80014ca:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <packetReceive+0x164>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d116      	bne.n	8001500 <packetReceive+0x4c>
			uint16_t RX_END = RX_BUFFER_END;
 80014d2:	240c      	movs	r4, #12
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	4a51      	ldr	r2, [pc, #324]	@ (800161c <packetReceive+0x168>)
 80014d8:	801a      	strh	r2, [r3, #0]
			enc_control_write(0, 0x0C, (uint8_t) (RX_END & 0xFF)); // Low byte
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	001a      	movs	r2, r3
 80014e2:	210c      	movs	r1, #12
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff f8cf 	bl	8000688 <enc_control_write>
			enc_control_write(0, 0x0D, (uint8_t) ((RX_END >> 8) & 0xFF)); // High byte
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	001a      	movs	r2, r3
 80014f6:	210d      	movs	r1, #13
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff f8c5 	bl	8000688 <enc_control_write>
 80014fe:	e013      	b.n	8001528 <packetReceive+0x74>
		} else {
			enc_control_write(0, 0x0C, (uint8_t) ((gNextPacketPtr - 1) & 0xFF)); // Low byte
 8001500:	4b45      	ldr	r3, [pc, #276]	@ (8001618 <packetReceive+0x164>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	001a      	movs	r2, r3
 800150c:	210c      	movs	r1, #12
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff f8ba 	bl	8000688 <enc_control_write>
			enc_control_write(0, 0x0D,
					(uint8_t) (((gNextPacketPtr - 1) >> 8) & 0xFF)); // High byte
 8001514:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <packetReceive+0x164>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	3b01      	subs	r3, #1
 800151a:	121b      	asrs	r3, r3, #8
			enc_control_write(0, 0x0D,
 800151c:	b2db      	uxtb	r3, r3
 800151e:	001a      	movs	r2, r3
 8001520:	210d      	movs	r1, #13
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff f8b0 	bl	8000688 <enc_control_write>
		}
		unreleasedPacket = false;
 8001528:	4b3a      	ldr	r3, [pc, #232]	@ (8001614 <packetReceive+0x160>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t EPKTCNT = enc_eth_read(0x19, 1);
 800152e:	250b      	movs	r5, #11
 8001530:	197c      	adds	r4, r7, r5
 8001532:	2101      	movs	r1, #1
 8001534:	2019      	movs	r0, #25
 8001536:	f7ff faf5 	bl	8000b24 <enc_eth_read>
 800153a:	0003      	movs	r3, r0
 800153c:	7023      	strb	r3, [r4, #0]
	if (EPKTCNT > 0) {
 800153e:	197b      	adds	r3, r7, r5
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d05f      	beq.n	8001606 <packetReceive+0x152>
		enc_control_write(0, 0x00, (uint8_t) (gNextPacketPtr & 0xFF)); // Low byte
 8001546:	4b34      	ldr	r3, [pc, #208]	@ (8001618 <packetReceive+0x164>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	001a      	movs	r2, r3
 800154e:	2100      	movs	r1, #0
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff f899 	bl	8000688 <enc_control_write>
		enc_control_write(0, 0x01, (uint8_t) ((gNextPacketPtr >> 8) & 0xFF)); // High byte
 8001556:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <packetReceive+0x164>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b29b      	uxth	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	001a      	movs	r2, r3
 8001562:	2101      	movs	r1, #1
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff f88f 	bl	8000688 <enc_control_write>
			uint16_t byteCount;
			uint16_t status;
		} PacketHeader;

		PacketHeader header;
		enc_buffer_read(sizeof(PacketHeader), gNextPacketPtr,
 800156a:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <packetReceive+0x164>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	003a      	movs	r2, r7
 8001570:	0019      	movs	r1, r3
 8001572:	2006      	movs	r0, #6
 8001574:	f7ff f9d0 	bl	8000918 <enc_buffer_read>
				(uint8_t*) &header);

		uint16_t start = gNextPacketPtr + sizeof(PacketHeader);
 8001578:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <packetReceive+0x164>)
 800157a:	881a      	ldrh	r2, [r3, #0]
 800157c:	2308      	movs	r3, #8
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	3206      	adds	r2, #6
 8001582:	801a      	strh	r2, [r3, #0]
		gNextPacketPtr = header.nextPacket;
 8001584:	003b      	movs	r3, r7
 8001586:	881a      	ldrh	r2, [r3, #0]
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <packetReceive+0x164>)
 800158a:	801a      	strh	r2, [r3, #0]

		len = header.byteCount - 4; // Exclude CRC
 800158c:	003b      	movs	r3, r7
 800158e:	885a      	ldrh	r2, [r3, #2]
 8001590:	210e      	movs	r1, #14
 8001592:	187b      	adds	r3, r7, r1
 8001594:	3a04      	subs	r2, #4
 8001596:	801a      	strh	r2, [r3, #0]
		if (len > BUFFER_SIZE - 1)
 8001598:	187b      	adds	r3, r7, r1
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	4a20      	ldr	r2, [pc, #128]	@ (8001620 <packetReceive+0x16c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d902      	bls.n	80015a8 <packetReceive+0xf4>
			len = BUFFER_SIZE - 1;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <packetReceive+0x16c>)
 80015a6:	801a      	strh	r2, [r3, #0]

		if ((header.status & 0x80) == 0)
 80015a8:	003b      	movs	r3, r7
 80015aa:	889b      	ldrh	r3, [r3, #4]
 80015ac:	001a      	movs	r2, r3
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	4013      	ands	r3, r2
 80015b2:	d104      	bne.n	80015be <packetReceive+0x10a>
			len = 0; // Invalid packet
 80015b4:	230e      	movs	r3, #14
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	2200      	movs	r2, #0
 80015ba:	801a      	strh	r2, [r3, #0]
 80015bc:	e009      	b.n	80015d2 <packetReceive+0x11e>
		else
			enc_buffer_read(len, start, buffer);
 80015be:	230e      	movs	r3, #14
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	8818      	ldrh	r0, [r3, #0]
 80015c4:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <packetReceive+0x170>)
 80015c6:	2308      	movs	r3, #8
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	0019      	movs	r1, r3
 80015ce:	f7ff f9a3 	bl	8000918 <enc_buffer_read>

		buffer[len] = 0; // Null-terminate
 80015d2:	230e      	movs	r3, #14
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <packetReceive+0x170>)
 80015da:	2100      	movs	r1, #0
 80015dc:	54d1      	strb	r1, [r2, r3]
		unreleasedPacket = true;
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <packetReceive+0x160>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]

		uint8_t ECON2 = enc_eth_read(0x1E, 0);
 80015e4:	1dfc      	adds	r4, r7, #7
 80015e6:	2100      	movs	r1, #0
 80015e8:	201e      	movs	r0, #30
 80015ea:	f7ff fa9b 	bl	8000b24 <enc_eth_read>
 80015ee:	0003      	movs	r3, r0
 80015f0:	7023      	strb	r3, [r4, #0]
		enc_control_write(0, 0x1E, (ECON2 | (1 << 6))); // Enable MAC reception
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2240      	movs	r2, #64	@ 0x40
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	001a      	movs	r2, r3
 80015fe:	211e      	movs	r1, #30
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff f841 	bl	8000688 <enc_control_write>
	}

	return len;
 8001606:	230e      	movs	r3, #14
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	881b      	ldrh	r3, [r3, #0]
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b004      	add	sp, #16
 8001612:	bdb0      	pop	{r4, r5, r7, pc}
 8001614:	2000078d 	.word	0x2000078d
 8001618:	2000078e 	.word	0x2000078e
 800161c:	00001bff 	.word	0x00001bff
 8001620:	000005db 	.word	0x000005db
 8001624:	200001a8 	.word	0x200001a8

08001628 <makeArpReply>:
 memcpy(&buffer[1 + 32], &buffer[1 + 22], 6); // Target MAC = Original Sender MAC
 memcpy(&buffer[1 + 38], &buffer[1 + 28], 4); // Target IP = Original Sender IP    // Send ARP reply (size: 43 bytes)
 transmit_tcp_packet(buffer, 1 + 42);
 }
 */
void makeArpReply() {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	printf("trialarpreply\n\r");
 800162c:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <makeArpReply+0x88>)
 800162e:	0018      	movs	r0, r3
 8001630:	f001 f96e 	bl	8002910 <iprintf>
	// Adjust buffer starting at index 1 for the correct shift
	memmove(&buffer[1], &buffer[0], 42);
 8001634:	491f      	ldr	r1, [pc, #124]	@ (80016b4 <makeArpReply+0x8c>)
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <makeArpReply+0x90>)
 8001638:	222a      	movs	r2, #42	@ 0x2a
 800163a:	0018      	movs	r0, r3
 800163c:	f001 fb7a 	bl	8002d34 <memmove>

	// Set the 0th value to 0x0E
	buffer[0] = 0x0E;
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <makeArpReply+0x8c>)
 8001642:	220e      	movs	r2, #14
 8001644:	701a      	strb	r2, [r3, #0]

	// Copy sender MAC to destination MAC in the shifted buffer
	memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6); // Destination MAC
 8001646:	491d      	ldr	r1, [pc, #116]	@ (80016bc <makeArpReply+0x94>)
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <makeArpReply+0x90>)
 800164a:	2206      	movs	r2, #6
 800164c:	0018      	movs	r0, r3
 800164e:	f001 fc1a 	bl	8002e86 <memcpy>

	// Set source MAC to device MAC
	memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6); // Source MAC
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <makeArpReply+0x8c>)
 8001654:	2207      	movs	r2, #7
 8001656:	491a      	ldr	r1, [pc, #104]	@ (80016c0 <makeArpReply+0x98>)
 8001658:	189b      	adds	r3, r3, r2
 800165a:	2206      	movs	r2, #6
 800165c:	0018      	movs	r0, r3
 800165e:	f001 fc12 	bl	8002e86 <memcpy>

	// Set ARP reply opcode
	buffer[1 + 21] = 0x02; // ARP Reply opcode
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <makeArpReply+0x8c>)
 8001664:	2202      	movs	r2, #2
 8001666:	759a      	strb	r2, [r3, #22]

	// Copy the target MAC and IP (from the request) to the appropriate fields
	memcpy(&buffer[1 + 32], &buffer[1 + 22], 6); // Target MAC = Sender MAC from request
 8001668:	4916      	ldr	r1, [pc, #88]	@ (80016c4 <makeArpReply+0x9c>)
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <makeArpReply+0xa0>)
 800166c:	2206      	movs	r2, #6
 800166e:	0018      	movs	r0, r3
 8001670:	f001 fc09 	bl	8002e86 <memcpy>
	memcpy(&buffer[1 + 38], &buffer[1 + 28], 4); // Target IP = Sender IP from request
 8001674:	4915      	ldr	r1, [pc, #84]	@ (80016cc <makeArpReply+0xa4>)
 8001676:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <makeArpReply+0xa8>)
 8001678:	2204      	movs	r2, #4
 800167a:	0018      	movs	r0, r3
 800167c:	f001 fc03 	bl	8002e86 <memcpy>

	// Set sender MAC to device MAC and sender IP to device IP
	memcpy(&buffer[1 + 22], device_mac, 6); // Sender MAC = device MAC
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <makeArpReply+0x8c>)
 8001682:	2217      	movs	r2, #23
 8001684:	490e      	ldr	r1, [pc, #56]	@ (80016c0 <makeArpReply+0x98>)
 8001686:	189b      	adds	r3, r3, r2
 8001688:	2206      	movs	r2, #6
 800168a:	0018      	movs	r0, r3
 800168c:	f001 fbfb 	bl	8002e86 <memcpy>
	memcpy(&buffer[1 + 28], device_ip, 4);  // Sender IP = device IP
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <makeArpReply+0x8c>)
 8001692:	221d      	movs	r2, #29
 8001694:	490f      	ldr	r1, [pc, #60]	@ (80016d4 <makeArpReply+0xac>)
 8001696:	189b      	adds	r3, r3, r2
 8001698:	2204      	movs	r2, #4
 800169a:	0018      	movs	r0, r3
 800169c:	f001 fbf3 	bl	8002e86 <memcpy>

	// Send ARP reply with new size of 43 bytes
	transmit_tcp_packet(buffer, 43);
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <makeArpReply+0x8c>)
 80016a2:	212b      	movs	r1, #43	@ 0x2b
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fea9 	bl	80013fc <transmit_tcp_packet>
}
 80016aa:	46c0      	nop			@ (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	08003bf0 	.word	0x08003bf0
 80016b4:	200001a8 	.word	0x200001a8
 80016b8:	200001a9 	.word	0x200001a9
 80016bc:	200001af 	.word	0x200001af
 80016c0:	20000000 	.word	0x20000000
 80016c4:	200001bf 	.word	0x200001bf
 80016c8:	200001c9 	.word	0x200001c9
 80016cc:	200001c5 	.word	0x200001c5
 80016d0:	200001cf 	.word	0x200001cf
 80016d4:	20000008 	.word	0x20000008

080016d8 <calculateIPChecksum>:

 buffer[1+TCP_FLAGS_P] = TCP_FLAG_SYN | TCP_FLAG_ACK;
 transmit_tcp_packet(buffer, 1+TCP_DATA_START_P);
 connectionState = SYN_RECEIVED;
 }*/
void calculateIPChecksum(uint8_t *buffer) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	// Reset the checksum field
	buffer[IP_CHECKSUM_P] = 0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3318      	adds	r3, #24
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
	buffer[IP_CHECKSUM_P + 1] = 0;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3319      	adds	r3, #25
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]

	// Calculate checksum for a fixed IP header length (20 bytes)
	uint16_t length = IP_HEADER_LEN;
 80016f0:	2310      	movs	r3, #16
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	2214      	movs	r2, #20
 80016f6:	801a      	strh	r2, [r3, #0]
	uint32_t sum = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

	// Sum the 16-bit words in the header
	for (uint16_t i = IP_P; i < IP_P + length; i += 2) {
 80016fc:	2312      	movs	r3, #18
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	220e      	movs	r2, #14
 8001702:	801a      	strh	r2, [r3, #0]
 8001704:	e01d      	b.n	8001742 <calculateIPChecksum+0x6a>
		uint16_t word = (buffer[i] << 8) | buffer[i + 1];
 8001706:	2012      	movs	r0, #18
 8001708:	183b      	adds	r3, r7, r0
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	183b      	adds	r3, r7, r0
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	18cb      	adds	r3, r1, r3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21a      	sxth	r2, r3
 8001728:	210c      	movs	r1, #12
 800172a:	187b      	adds	r3, r7, r1
 800172c:	801a      	strh	r2, [r3, #0]
		sum += word;
 800172e:	187b      	adds	r3, r7, r1
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	18d3      	adds	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
	for (uint16_t i = IP_P; i < IP_P + length; i += 2) {
 8001738:	183b      	adds	r3, r7, r0
 800173a:	183a      	adds	r2, r7, r0
 800173c:	8812      	ldrh	r2, [r2, #0]
 800173e:	3202      	adds	r2, #2
 8001740:	801a      	strh	r2, [r3, #0]
 8001742:	2310      	movs	r3, #16
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	330d      	adds	r3, #13
 800174a:	001a      	movs	r2, r3
 800174c:	2312      	movs	r3, #18
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	dad7      	bge.n	8001706 <calculateIPChecksum+0x2e>
	}

	// Add carry bits until the sum fits in 16 bits
	while (sum >> 16) {
 8001756:	e006      	b.n	8001766 <calculateIPChecksum+0x8e>
		sum = (sum & 0xFFFF) + (sum >> 16);
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	041b      	lsls	r3, r3, #16
 800175c:	0c1a      	lsrs	r2, r3, #16
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	0c1b      	lsrs	r3, r3, #16
 8001762:	18d3      	adds	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
	while (sum >> 16) {
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	0c1b      	lsrs	r3, r3, #16
 800176a:	d1f5      	bne.n	8001758 <calculateIPChecksum+0x80>
	}

	// Compute one's complement and store it in the checksum field
	uint16_t checksum = ~((uint16_t) sum);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	b29a      	uxth	r2, r3
 8001770:	210e      	movs	r1, #14
 8001772:	187b      	adds	r3, r7, r1
 8001774:	43d2      	mvns	r2, r2
 8001776:	801a      	strh	r2, [r3, #0]
	buffer[IP_CHECKSUM_P] = (checksum >> 8) & 0xFF;
 8001778:	187b      	adds	r3, r7, r1
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3318      	adds	r3, #24
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
	buffer[IP_CHECKSUM_P + 1] = checksum & 0xFF;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3319      	adds	r3, #25
 800178c:	187a      	adds	r2, r7, r1
 800178e:	8812      	ldrh	r2, [r2, #0]
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	701a      	strb	r2, [r3, #0]
}
 8001794:	46c0      	nop			@ (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b006      	add	sp, #24
 800179a:	bd80      	pop	{r7, pc}

0800179c <calculateTcpChecksum>:

void calculateTcpChecksum(uint8_t *buffer) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	// Reset the checksum field
	buffer[TCP_CHECKSUM_H_P] = 0;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3332      	adds	r3, #50	@ 0x32
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
	buffer[TCP_CHECKSUM_L_P] = 0;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3333      	adds	r3, #51	@ 0x33
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]

	// Extract TCP length (Total Length - IP Header Length)
	uint16_t tcpLength = (((buffer[IP_TOTLEN_H_P] << 8) | buffer[IP_TOTLEN_L_P])
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3310      	adds	r3, #16
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3311      	adds	r3, #17
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	230e      	movs	r3, #14
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	3a14      	subs	r2, #20
 80017d2:	801a      	strh	r2, [r3, #0]
			- IP_HEADER_LEN);
	uint32_t sum = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

	// Pseudo-header: Source IP
	for (uint8_t i = 0; i < 4; i++) {
 80017d8:	2313      	movs	r3, #19
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e01d      	b.n	800181e <calculateTcpChecksum+0x82>
		sum += (buffer[IP_SRC_P + i] << 8) | buffer[IP_SRC_P + i + 1];
 80017e2:	2013      	movs	r0, #19
 80017e4:	183b      	adds	r3, r7, r0
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	331a      	adds	r3, #26
 80017ea:	001a      	movs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	189b      	adds	r3, r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	183a      	adds	r2, r7, r0
 80017f6:	7812      	ldrb	r2, [r2, #0]
 80017f8:	321b      	adds	r2, #27
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	188a      	adds	r2, r1, r2
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	4313      	orrs	r3, r2
 8001802:	001a      	movs	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	189b      	adds	r3, r3, r2
 8001808:	617b      	str	r3, [r7, #20]
		i++;
 800180a:	183b      	adds	r3, r7, r0
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	183b      	adds	r3, r7, r0
 8001810:	3201      	adds	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8001814:	183b      	adds	r3, r7, r0
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	183b      	adds	r3, r7, r0
 800181a:	3201      	adds	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	2313      	movs	r3, #19
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d9dc      	bls.n	80017e2 <calculateTcpChecksum+0x46>
	}

	// Pseudo-header: Destination IP
	for (uint8_t i = 0; i < 4; i++) {
 8001828:	2312      	movs	r3, #18
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e01d      	b.n	800186e <calculateTcpChecksum+0xd2>
		sum += (buffer[IP_DST_P + i] << 8) | buffer[IP_DST_P + i + 1];
 8001832:	2012      	movs	r0, #18
 8001834:	183b      	adds	r3, r7, r0
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	331e      	adds	r3, #30
 800183a:	001a      	movs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	189b      	adds	r3, r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	183a      	adds	r2, r7, r0
 8001846:	7812      	ldrb	r2, [r2, #0]
 8001848:	321f      	adds	r2, #31
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	188a      	adds	r2, r1, r2
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	4313      	orrs	r3, r2
 8001852:	001a      	movs	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	189b      	adds	r3, r3, r2
 8001858:	617b      	str	r3, [r7, #20]
		i++;
 800185a:	183b      	adds	r3, r7, r0
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	183b      	adds	r3, r7, r0
 8001860:	3201      	adds	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8001864:	183b      	adds	r3, r7, r0
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	183b      	adds	r3, r7, r0
 800186a:	3201      	adds	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	2312      	movs	r3, #18
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d9dc      	bls.n	8001832 <calculateTcpChecksum+0x96>
	}

	// Pseudo-header: Protocol and TCP length
	sum += (uint16_t) IP_PROTO_TCP;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3306      	adds	r3, #6
 800187c:	617b      	str	r3, [r7, #20]
	sum += tcpLength;
 800187e:	230e      	movs	r3, #14
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	18d3      	adds	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]

	// TCP Header and Payload
	for (uint16_t i = TCP_SRC_PORT_H_P; i < TCP_SRC_PORT_H_P + tcpLength; i +=
 800188a:	2310      	movs	r3, #16
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	2222      	movs	r2, #34	@ 0x22
 8001890:	801a      	strh	r2, [r3, #0]
 8001892:	e01d      	b.n	80018d0 <calculateTcpChecksum+0x134>
			2) {
		uint16_t word = (buffer[i] << 8) | buffer[i + 1];
 8001894:	2010      	movs	r0, #16
 8001896:	183b      	adds	r3, r7, r0
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	18d3      	adds	r3, r2, r3
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	183b      	adds	r3, r7, r0
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	18cb      	adds	r3, r1, r3
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	210a      	movs	r1, #10
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	801a      	strh	r2, [r3, #0]
		sum += word;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	18d3      	adds	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
	for (uint16_t i = TCP_SRC_PORT_H_P; i < TCP_SRC_PORT_H_P + tcpLength; i +=
 80018c6:	183b      	adds	r3, r7, r0
 80018c8:	183a      	adds	r2, r7, r0
 80018ca:	8812      	ldrh	r2, [r2, #0]
 80018cc:	3202      	adds	r2, #2
 80018ce:	801a      	strh	r2, [r3, #0]
 80018d0:	230e      	movs	r3, #14
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	3321      	adds	r3, #33	@ 0x21
 80018d8:	001a      	movs	r2, r3
 80018da:	2310      	movs	r3, #16
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dad7      	bge.n	8001894 <calculateTcpChecksum+0xf8>
	}

	// Add carry bits
	while (sum >> 16) {
 80018e4:	e006      	b.n	80018f4 <calculateTcpChecksum+0x158>
		sum = (sum & 0xFFFF) + (sum >> 16);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	0c1a      	lsrs	r2, r3, #16
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	18d3      	adds	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
	while (sum >> 16) {
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	0c1b      	lsrs	r3, r3, #16
 80018f8:	d1f5      	bne.n	80018e6 <calculateTcpChecksum+0x14a>
	}

	// Compute one's complement and store in the checksum field
	uint16_t checksum = ~((uint16_t) sum);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	210c      	movs	r1, #12
 8001900:	187b      	adds	r3, r7, r1
 8001902:	43d2      	mvns	r2, r2
 8001904:	801a      	strh	r2, [r3, #0]
	buffer[TCP_CHECKSUM_H_P] = (checksum >> 8) & 0xFF;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3332      	adds	r3, #50	@ 0x32
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]
	buffer[TCP_CHECKSUM_L_P] = checksum & 0xFF;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3333      	adds	r3, #51	@ 0x33
 800191a:	187a      	adds	r2, r7, r1
 800191c:	8812      	ldrh	r2, [r2, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]
}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b006      	add	sp, #24
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <makeTcpFinPshAck>:



void makeTcpFinPshAck() {
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
    printf("makeTcpFinPshAck\n\r");
 8001932:	4b6f      	ldr	r3, [pc, #444]	@ (8001af0 <makeTcpFinPshAck+0x1c4>)
 8001934:	0018      	movs	r0, r3
 8001936:	f000 ffeb 	bl	8002910 <iprintf>

    // Shift buffer for alignment
    memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 800193a:	496e      	ldr	r1, [pc, #440]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 800193c:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <makeTcpFinPshAck+0x1cc>)
 800193e:	2236      	movs	r2, #54	@ 0x36
 8001940:	0018      	movs	r0, r3
 8001942:	f001 f9f7 	bl	8002d34 <memmove>
    buffer[0] = 0x0E;
 8001946:	4b6b      	ldr	r3, [pc, #428]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001948:	220e      	movs	r2, #14
 800194a:	701a      	strb	r2, [r3, #0]

    // Ethernet MAC addresses
    memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6);
 800194c:	496b      	ldr	r1, [pc, #428]	@ (8001afc <makeTcpFinPshAck+0x1d0>)
 800194e:	4b6a      	ldr	r3, [pc, #424]	@ (8001af8 <makeTcpFinPshAck+0x1cc>)
 8001950:	2206      	movs	r2, #6
 8001952:	0018      	movs	r0, r3
 8001954:	f001 fa97 	bl	8002e86 <memcpy>
    memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6);
 8001958:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 800195a:	2207      	movs	r2, #7
 800195c:	4968      	ldr	r1, [pc, #416]	@ (8001b00 <makeTcpFinPshAck+0x1d4>)
 800195e:	189b      	adds	r3, r3, r2
 8001960:	2206      	movs	r2, #6
 8001962:	0018      	movs	r0, r3
 8001964:	f001 fa8f 	bl	8002e86 <memcpy>

    // IP source and destination addresses
    memcpy(&buffer[1 + IP_DST_P], &buffer[1 + IP_SRC_P], 4);
 8001968:	4966      	ldr	r1, [pc, #408]	@ (8001b04 <makeTcpFinPshAck+0x1d8>)
 800196a:	4b67      	ldr	r3, [pc, #412]	@ (8001b08 <makeTcpFinPshAck+0x1dc>)
 800196c:	2204      	movs	r2, #4
 800196e:	0018      	movs	r0, r3
 8001970:	f001 fa89 	bl	8002e86 <memcpy>
    memcpy(&buffer[1 + IP_SRC_P], device_ip, 4);
 8001974:	4b5f      	ldr	r3, [pc, #380]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001976:	221b      	movs	r2, #27
 8001978:	4964      	ldr	r1, [pc, #400]	@ (8001b0c <makeTcpFinPshAck+0x1e0>)
 800197a:	189b      	adds	r3, r3, r2
 800197c:	2204      	movs	r2, #4
 800197e:	0018      	movs	r0, r3
 8001980:	f001 fa81 	bl	8002e86 <memcpy>

    // TCP source and destination ports
    uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001984:	4b5b      	ldr	r3, [pc, #364]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001986:	2223      	movs	r2, #35	@ 0x23
 8001988:	5c9b      	ldrb	r3, [r3, r2]
 800198a:	021b      	lsls	r3, r3, #8
            | buffer[1 + TCP_SRC_PORT_L_P];
 800198c:	b21a      	sxth	r2, r3
 800198e:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001990:	2124      	movs	r1, #36	@ 0x24
 8001992:	5c5b      	ldrb	r3, [r3, r1]
 8001994:	b21b      	sxth	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	b21a      	sxth	r2, r3
    uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 800199a:	2016      	movs	r0, #22
 800199c:	183b      	adds	r3, r7, r0
 800199e:	801a      	strh	r2, [r3, #0]
    uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 80019a0:	4b54      	ldr	r3, [pc, #336]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 80019a2:	2225      	movs	r2, #37	@ 0x25
 80019a4:	5c9b      	ldrb	r3, [r3, r2]
 80019a6:	021b      	lsls	r3, r3, #8
            | buffer[1 + TCP_DST_PORT_L_P];
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	4b52      	ldr	r3, [pc, #328]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 80019ac:	2126      	movs	r1, #38	@ 0x26
 80019ae:	5c5b      	ldrb	r3, [r3, r1]
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b21a      	sxth	r2, r3
    uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 80019b6:	2414      	movs	r4, #20
 80019b8:	193b      	adds	r3, r7, r4
 80019ba:	801a      	strh	r2, [r3, #0]
    buffer[1 + TCP_SRC_PORT_H_P] = dstPort >> 8;
 80019bc:	193b      	adds	r3, r7, r4
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b2d9      	uxtb	r1, r3
 80019c6:	4b4b      	ldr	r3, [pc, #300]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 80019c8:	2223      	movs	r2, #35	@ 0x23
 80019ca:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SRC_PORT_L_P] = dstPort & 0xFF;
 80019cc:	193b      	adds	r3, r7, r4
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b2d9      	uxtb	r1, r3
 80019d2:	4b48      	ldr	r3, [pc, #288]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 80019d4:	2224      	movs	r2, #36	@ 0x24
 80019d6:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_DST_PORT_H_P] = srcPort >> 8;
 80019d8:	183b      	adds	r3, r7, r0
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b2d9      	uxtb	r1, r3
 80019e2:	4b44      	ldr	r3, [pc, #272]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 80019e4:	2225      	movs	r2, #37	@ 0x25
 80019e6:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_DST_PORT_L_P] = srcPort & 0xFF;
 80019e8:	183b      	adds	r3, r7, r0
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	b2d9      	uxtb	r1, r3
 80019ee:	4b41      	ldr	r3, [pc, #260]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 80019f0:	2226      	movs	r2, #38	@ 0x26
 80019f2:	5499      	strb	r1, [r3, r2]

    // Sequence and acknowledgment numbers
    uint32_t serverSeqNum = prevSeq;
 80019f4:	4b46      	ldr	r3, [pc, #280]	@ (8001b10 <makeTcpFinPshAck+0x1e4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	613b      	str	r3, [r7, #16]
    uint32_t ackNum = prevAck;
 80019fa:	4b46      	ldr	r3, [pc, #280]	@ (8001b14 <makeTcpFinPshAck+0x1e8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60fb      	str	r3, [r7, #12]

    buffer[1 + TCP_SEQ_H_P] = (serverSeqNum >> 24) & 0xFF;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	0e1b      	lsrs	r3, r3, #24
 8001a04:	b2d9      	uxtb	r1, r3
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a08:	2227      	movs	r2, #39	@ 0x27
 8001a0a:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 1] = (serverSeqNum >> 16) & 0xFF;
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	b2d9      	uxtb	r1, r3
 8001a12:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a14:	2228      	movs	r2, #40	@ 0x28
 8001a16:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 2] = (serverSeqNum >> 8) & 0xFF;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	b2d9      	uxtb	r1, r3
 8001a1e:	4b35      	ldr	r3, [pc, #212]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a20:	2229      	movs	r2, #41	@ 0x29
 8001a22:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 3] = serverSeqNum & 0xFF;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	b2d9      	uxtb	r1, r3
 8001a28:	4b32      	ldr	r3, [pc, #200]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a2a:	222a      	movs	r2, #42	@ 0x2a
 8001a2c:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 4] = (ackNum >> 24) & 0xFF;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	0e1b      	lsrs	r3, r3, #24
 8001a32:	b2d9      	uxtb	r1, r3
 8001a34:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a36:	222b      	movs	r2, #43	@ 0x2b
 8001a38:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 5] = (ackNum >> 16) & 0xFF;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	b2d9      	uxtb	r1, r3
 8001a40:	4b2c      	ldr	r3, [pc, #176]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a42:	222c      	movs	r2, #44	@ 0x2c
 8001a44:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 6] = (ackNum >> 8) & 0xFF;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b2d9      	uxtb	r1, r3
 8001a4c:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a4e:	222d      	movs	r2, #45	@ 0x2d
 8001a50:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 7] = ackNum & 0xFF;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	b2d9      	uxtb	r1, r3
 8001a56:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a58:	222e      	movs	r2, #46	@ 0x2e
 8001a5a:	5499      	strb	r1, [r3, r2]

    // HTML payload (use payload from `makeHttpResponse`)
    const char *html_payload =
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b18 <makeTcpFinPshAck+0x1ec>)
 8001a5e:	60bb      	str	r3, [r7, #8]
    		    "<h1>ESD FALL 2024</h1>"
    		    "<p>Ethernet based Web Server for Embedded Systems - NADGIR and KOPPA made itttt, lessgoooo!!! This web server showcases the power of microcontrollers and Ethernet communication. By leveraging the AT89C51RC2 microcontroller and the ENC28J60 Ethernet controller, we can serve dynamic web pages and control embedded devices remotely. The server allows seamless communication between hardware and software, enabling real-time data exchange across the network.</p>"
    		    "</body>"
    		    "</html>";

    uint16_t dataLength = strlen(html_payload);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7fe fb50 	bl	8000108 <strlen>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	1dbb      	adds	r3, r7, #6
 8001a6c:	801a      	strh	r2, [r3, #0]

    // IP total length
    uint16_t totalLength = IP_HEADER_LEN + TCP_HEADER_LEN + dataLength;
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	1dba      	adds	r2, r7, #6
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	3228      	adds	r2, #40	@ 0x28
 8001a76:	801a      	strh	r2, [r3, #0]
    buffer[1 + IP_TOTLEN_H_P] = (totalLength >> 8) & 0xFF;
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a84:	745a      	strb	r2, [r3, #17]
    buffer[1 + IP_TOTLEN_L_P] = totalLength & 0xFF;
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a8e:	749a      	strb	r2, [r3, #18]

    // TCP flags, window size, and header length
    buffer[1 + TCP_FLAGS_P] = TCP_FLAG_FIN | TCP_FLAG_PUSH | TCP_FLAG_ACK;
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a92:	2230      	movs	r2, #48	@ 0x30
 8001a94:	2119      	movs	r1, #25
 8001a96:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_WIN_SIZE_H_P] = 0xFF;
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001a9a:	2231      	movs	r2, #49	@ 0x31
 8001a9c:	21ff      	movs	r1, #255	@ 0xff
 8001a9e:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_WIN_SIZE_L_P] = 0xFF;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001aa2:	2232      	movs	r2, #50	@ 0x32
 8001aa4:	21ff      	movs	r1, #255	@ 0xff
 8001aa6:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_HEADER_LEN_P] = 0x50; // 20 bytes (5 words)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001aaa:	222f      	movs	r2, #47	@ 0x2f
 8001aac:	2150      	movs	r1, #80	@ 0x50
 8001aae:	5499      	strb	r1, [r3, r2]

    // Copy the HTML payload into the buffer
    memcpy(&buffer[1 + TCP_DATA_START_P], html_payload, dataLength);
 8001ab0:	1dbb      	adds	r3, r7, #6
 8001ab2:	881a      	ldrh	r2, [r3, #0]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <makeTcpFinPshAck+0x1f0>)
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f001 f9e4 	bl	8002e86 <memcpy>

    // IP and TCP checksums
    calculateIPChecksum(&buffer[1]); // Pass the buffer to calculate the IP checksum
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <makeTcpFinPshAck+0x1cc>)
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f7ff fe09 	bl	80016d8 <calculateIPChecksum>
    calculateTcpChecksum(&buffer[1]); // Pass the buffer to calculate the TCP checksum
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <makeTcpFinPshAck+0x1cc>)
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7ff fe67 	bl	800179c <calculateTcpChecksum>

    // Transmit the packet
    transmit_tcp_packet(buffer, 1 + TCP_DATA_START_P + dataLength);
 8001ace:	1dbb      	adds	r3, r7, #6
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	3337      	adds	r3, #55	@ 0x37
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <makeTcpFinPshAck+0x1c8>)
 8001ad8:	0011      	movs	r1, r2
 8001ada:	0018      	movs	r0, r3
 8001adc:	f7ff fc8e 	bl	80013fc <transmit_tcp_packet>

    // Update connection state
    connectionState = FIN_WAIT;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <makeTcpFinPshAck+0x1f4>)
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	701a      	strb	r2, [r3, #0]
}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b007      	add	sp, #28
 8001aec:	bd90      	pop	{r4, r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	08003c00 	.word	0x08003c00
 8001af4:	200001a8 	.word	0x200001a8
 8001af8:	200001a9 	.word	0x200001a9
 8001afc:	200001af 	.word	0x200001af
 8001b00:	20000000 	.word	0x20000000
 8001b04:	200001c3 	.word	0x200001c3
 8001b08:	200001c7 	.word	0x200001c7
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000784 	.word	0x20000784
 8001b14:	20000788 	.word	0x20000788
 8001b18:	08003c14 	.word	0x08003c14
 8001b1c:	200001df 	.word	0x200001df
 8001b20:	2000078c 	.word	0x2000078c

08001b24 <makeTcpAck3>:


void makeTcpAck3() {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
    printf("makeTcpAck\n\r");
 8001b2a:	4b79      	ldr	r3, [pc, #484]	@ (8001d10 <makeTcpAck3+0x1ec>)
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 feef 	bl	8002910 <iprintf>

    // Shift buffer for alignment
    memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 8001b32:	4978      	ldr	r1, [pc, #480]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001b34:	4b78      	ldr	r3, [pc, #480]	@ (8001d18 <makeTcpAck3+0x1f4>)
 8001b36:	2236      	movs	r2, #54	@ 0x36
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f001 f8fb 	bl	8002d34 <memmove>
    buffer[0] = 0x0E;
 8001b3e:	4b75      	ldr	r3, [pc, #468]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001b40:	220e      	movs	r2, #14
 8001b42:	701a      	strb	r2, [r3, #0]

    // Ethernet MAC addresses
    memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6);
 8001b44:	4975      	ldr	r1, [pc, #468]	@ (8001d1c <makeTcpAck3+0x1f8>)
 8001b46:	4b74      	ldr	r3, [pc, #464]	@ (8001d18 <makeTcpAck3+0x1f4>)
 8001b48:	2206      	movs	r2, #6
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f001 f99b 	bl	8002e86 <memcpy>
    memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6);
 8001b50:	4b70      	ldr	r3, [pc, #448]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001b52:	2207      	movs	r2, #7
 8001b54:	4972      	ldr	r1, [pc, #456]	@ (8001d20 <makeTcpAck3+0x1fc>)
 8001b56:	189b      	adds	r3, r3, r2
 8001b58:	2206      	movs	r2, #6
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f001 f993 	bl	8002e86 <memcpy>

    // IP source and destination addresses
    memcpy(&buffer[1 + IP_DST_P], &buffer[1 + IP_SRC_P], 4);
 8001b60:	4970      	ldr	r1, [pc, #448]	@ (8001d24 <makeTcpAck3+0x200>)
 8001b62:	4b71      	ldr	r3, [pc, #452]	@ (8001d28 <makeTcpAck3+0x204>)
 8001b64:	2204      	movs	r2, #4
 8001b66:	0018      	movs	r0, r3
 8001b68:	f001 f98d 	bl	8002e86 <memcpy>
    memcpy(&buffer[1 + IP_SRC_P], device_ip, 4);
 8001b6c:	4b69      	ldr	r3, [pc, #420]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001b6e:	221b      	movs	r2, #27
 8001b70:	496e      	ldr	r1, [pc, #440]	@ (8001d2c <makeTcpAck3+0x208>)
 8001b72:	189b      	adds	r3, r3, r2
 8001b74:	2204      	movs	r2, #4
 8001b76:	0018      	movs	r0, r3
 8001b78:	f001 f985 	bl	8002e86 <memcpy>

    // TCP source and destination ports
    uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001b7c:	4b65      	ldr	r3, [pc, #404]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001b7e:	2223      	movs	r2, #35	@ 0x23
 8001b80:	5c9b      	ldrb	r3, [r3, r2]
 8001b82:	021b      	lsls	r3, r3, #8
            | buffer[1 + TCP_SRC_PORT_L_P];
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	4b63      	ldr	r3, [pc, #396]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001b88:	2124      	movs	r1, #36	@ 0x24
 8001b8a:	5c5b      	ldrb	r3, [r3, r1]
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b21a      	sxth	r2, r3
    uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001b92:	2016      	movs	r0, #22
 8001b94:	183b      	adds	r3, r7, r0
 8001b96:	801a      	strh	r2, [r3, #0]
    uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001b98:	4b5e      	ldr	r3, [pc, #376]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001b9a:	2225      	movs	r2, #37	@ 0x25
 8001b9c:	5c9b      	ldrb	r3, [r3, r2]
 8001b9e:	021b      	lsls	r3, r3, #8
            | buffer[1 + TCP_DST_PORT_L_P];
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001ba4:	2126      	movs	r1, #38	@ 0x26
 8001ba6:	5c5b      	ldrb	r3, [r3, r1]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b21a      	sxth	r2, r3
    uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001bae:	2414      	movs	r4, #20
 8001bb0:	193b      	adds	r3, r7, r4
 8001bb2:	801a      	strh	r2, [r3, #0]
    buffer[1 + TCP_SRC_PORT_H_P] = dstPort >> 8;
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2d9      	uxtb	r1, r3
 8001bbe:	4b55      	ldr	r3, [pc, #340]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001bc0:	2223      	movs	r2, #35	@ 0x23
 8001bc2:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SRC_PORT_L_P] = dstPort & 0xFF;
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b2d9      	uxtb	r1, r3
 8001bca:	4b52      	ldr	r3, [pc, #328]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001bcc:	2224      	movs	r2, #36	@ 0x24
 8001bce:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_DST_PORT_H_P] = srcPort >> 8;
 8001bd0:	183b      	adds	r3, r7, r0
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2d9      	uxtb	r1, r3
 8001bda:	4b4e      	ldr	r3, [pc, #312]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001bdc:	2225      	movs	r2, #37	@ 0x25
 8001bde:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_DST_PORT_L_P] = srcPort & 0xFF;
 8001be0:	183b      	adds	r3, r7, r0
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b2d9      	uxtb	r1, r3
 8001be6:	4b4b      	ldr	r3, [pc, #300]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001be8:	2226      	movs	r2, #38	@ 0x26
 8001bea:	5499      	strb	r1, [r3, r2]

    // TCP sequence and acknowledgment numbers
    uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 8001bec:	4b49      	ldr	r3, [pc, #292]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001bee:	2227      	movs	r2, #39	@ 0x27
 8001bf0:	5c9b      	ldrb	r3, [r3, r2]
 8001bf2:	061a      	lsls	r2, r3, #24
            | (buffer[1 + TCP_SEQ_H_P + 1] << 16)
 8001bf4:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001bf6:	2128      	movs	r1, #40	@ 0x28
 8001bf8:	5c5b      	ldrb	r3, [r3, r1]
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	431a      	orrs	r2, r3
            | (buffer[1 + TCP_SEQ_H_P + 2] << 8) | buffer[1 + TCP_SEQ_H_P + 3];
 8001bfe:	4b45      	ldr	r3, [pc, #276]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c00:	2129      	movs	r1, #41	@ 0x29
 8001c02:	5c5b      	ldrb	r3, [r3, r1]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	4313      	orrs	r3, r2
 8001c08:	4a42      	ldr	r2, [pc, #264]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c0a:	212a      	movs	r1, #42	@ 0x2a
 8001c0c:	5c52      	ldrb	r2, [r2, r1]
 8001c0e:	4313      	orrs	r3, r2
    uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 8001c10:	613b      	str	r3, [r7, #16]
    uint32_t clientAckNum = (buffer[1 + TCP_ACK_H_P] << 24)
 8001c12:	4b40      	ldr	r3, [pc, #256]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c14:	222b      	movs	r2, #43	@ 0x2b
 8001c16:	5c9b      	ldrb	r3, [r3, r2]
 8001c18:	061a      	lsls	r2, r3, #24
                | (buffer[1 + TCP_ACK_H_P + 1] << 16)
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c1c:	212c      	movs	r1, #44	@ 0x2c
 8001c1e:	5c5b      	ldrb	r3, [r3, r1]
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	431a      	orrs	r2, r3
                | (buffer[1 + TCP_ACK_H_P + 2] << 8) | buffer[1 + TCP_ACK_H_P + 3];
 8001c24:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c26:	212d      	movs	r1, #45	@ 0x2d
 8001c28:	5c5b      	ldrb	r3, [r3, r1]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	4a39      	ldr	r2, [pc, #228]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c30:	212e      	movs	r1, #46	@ 0x2e
 8001c32:	5c52      	ldrb	r2, [r2, r1]
 8001c34:	4313      	orrs	r3, r2
    uint32_t clientAckNum = (buffer[1 + TCP_ACK_H_P] << 24)
 8001c36:	60fb      	str	r3, [r7, #12]
    uint32_t serverSeqNum = clientAckNum;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	60bb      	str	r3, [r7, #8]
    uint32_t ackNum = clientSeqNum + 1;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
    prevSeq = serverSeqNum;
 8001c42:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <makeTcpAck3+0x20c>)
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	601a      	str	r2, [r3, #0]
    prevAck = ackNum;
 8001c48:	4b3a      	ldr	r3, [pc, #232]	@ (8001d34 <makeTcpAck3+0x210>)
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]

    // Set sequence and acknowledgment numbers
    buffer[1 + TCP_SEQ_H_P] = (serverSeqNum >> 24) & 0xFF;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	0e1b      	lsrs	r3, r3, #24
 8001c52:	b2d9      	uxtb	r1, r3
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c56:	2227      	movs	r2, #39	@ 0x27
 8001c58:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 1] = (serverSeqNum >> 16) & 0xFF;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	b2d9      	uxtb	r1, r3
 8001c60:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c62:	2228      	movs	r2, #40	@ 0x28
 8001c64:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 2] = (serverSeqNum >> 8) & 0xFF;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	b2d9      	uxtb	r1, r3
 8001c6c:	4b29      	ldr	r3, [pc, #164]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c6e:	2229      	movs	r2, #41	@ 0x29
 8001c70:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 3] = serverSeqNum & 0xFF;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	b2d9      	uxtb	r1, r3
 8001c76:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c78:	222a      	movs	r2, #42	@ 0x2a
 8001c7a:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_ACK_H_P] = (ackNum >> 24) & 0xFF;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	0e1b      	lsrs	r3, r3, #24
 8001c80:	b2d9      	uxtb	r1, r3
 8001c82:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c84:	222b      	movs	r2, #43	@ 0x2b
 8001c86:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_ACK_H_P + 1] = (ackNum >> 16) & 0xFF;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0c1b      	lsrs	r3, r3, #16
 8001c8c:	b2d9      	uxtb	r1, r3
 8001c8e:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c90:	222c      	movs	r2, #44	@ 0x2c
 8001c92:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_ACK_H_P + 2] = (ackNum >> 8) & 0xFF;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	b2d9      	uxtb	r1, r3
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001c9c:	222d      	movs	r2, #45	@ 0x2d
 8001c9e:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_ACK_H_P + 3] = ackNum & 0xFF;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	b2d9      	uxtb	r1, r3
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001ca6:	222e      	movs	r2, #46	@ 0x2e
 8001ca8:	5499      	strb	r1, [r3, r2]

    // IP total length
    uint16_t totalLength = IP_HEADER_LEN + TCP_HEADER_LEN;
 8001caa:	1cbb      	adds	r3, r7, #2
 8001cac:	2228      	movs	r2, #40	@ 0x28
 8001cae:	801a      	strh	r2, [r3, #0]
    buffer[1 + IP_TOTLEN_H_P] = (totalLength >> 8) & 0xFF;
 8001cb0:	1cbb      	adds	r3, r7, #2
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001cbc:	745a      	strb	r2, [r3, #17]
    buffer[1 + IP_TOTLEN_L_P] = totalLength & 0xFF;
 8001cbe:	1cbb      	adds	r3, r7, #2
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001cc6:	749a      	strb	r2, [r3, #18]

    // TCP flags, window size, and header length
    buffer[1 + TCP_FLAGS_P] = TCP_FLAG_ACK;  // Only the ACK flag is set
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001cca:	2230      	movs	r2, #48	@ 0x30
 8001ccc:	2110      	movs	r1, #16
 8001cce:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_WIN_SIZE_H_P] = 0xFF; // Maximum window size
 8001cd0:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001cd2:	2231      	movs	r2, #49	@ 0x31
 8001cd4:	21ff      	movs	r1, #255	@ 0xff
 8001cd6:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_WIN_SIZE_L_P] = 0xFF;
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001cda:	2232      	movs	r2, #50	@ 0x32
 8001cdc:	21ff      	movs	r1, #255	@ 0xff
 8001cde:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_HEADER_LEN_P] = 0x50; // 20 bytes (5 words)
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001ce2:	222f      	movs	r2, #47	@ 0x2f
 8001ce4:	2150      	movs	r1, #80	@ 0x50
 8001ce6:	5499      	strb	r1, [r3, r2]

    // IP and TCP checksums
    calculateIPChecksum(&buffer[1]); // Pass the buffer to calculate the IP checksum
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <makeTcpAck3+0x1f4>)
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff fcf4 	bl	80016d8 <calculateIPChecksum>
    calculateTcpChecksum(&buffer[1]); // Pass the buffer to calculate the TCP checksum
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <makeTcpAck3+0x1f4>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff fd52 	bl	800179c <calculateTcpChecksum>

    // Padding to meet minimum Ethernet size
    // Transmit the packet
    transmit_tcp_packet(buffer, 1 + 54);
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <makeTcpAck3+0x1f0>)
 8001cfa:	2137      	movs	r1, #55	@ 0x37
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fb7d 	bl	80013fc <transmit_tcp_packet>

    // Update connection state
    connectionState = ACK_SENT;
 8001d02:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <makeTcpAck3+0x214>)
 8001d04:	2205      	movs	r2, #5
 8001d06:	701a      	strb	r2, [r3, #0]
}
 8001d08:	46c0      	nop			@ (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b007      	add	sp, #28
 8001d0e:	bd90      	pop	{r4, r7, pc}
 8001d10:	08003f90 	.word	0x08003f90
 8001d14:	200001a8 	.word	0x200001a8
 8001d18:	200001a9 	.word	0x200001a9
 8001d1c:	200001af 	.word	0x200001af
 8001d20:	20000000 	.word	0x20000000
 8001d24:	200001c3 	.word	0x200001c3
 8001d28:	200001c7 	.word	0x200001c7
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	20000784 	.word	0x20000784
 8001d34:	20000788 	.word	0x20000788
 8001d38:	2000078c 	.word	0x2000078c

08001d3c <makeTcpAck2>:

void makeTcpAck2() {
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
    printf("makeTcpAck\n\r");
 8001d42:	4b7a      	ldr	r3, [pc, #488]	@ (8001f2c <makeTcpAck2+0x1f0>)
 8001d44:	0018      	movs	r0, r3
 8001d46:	f000 fde3 	bl	8002910 <iprintf>

    // Shift buffer for alignment
    memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 8001d4a:	4979      	ldr	r1, [pc, #484]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001d4c:	4b79      	ldr	r3, [pc, #484]	@ (8001f34 <makeTcpAck2+0x1f8>)
 8001d4e:	2236      	movs	r2, #54	@ 0x36
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 ffef 	bl	8002d34 <memmove>
    buffer[0] = 0x0E;
 8001d56:	4b76      	ldr	r3, [pc, #472]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001d58:	220e      	movs	r2, #14
 8001d5a:	701a      	strb	r2, [r3, #0]

    // Ethernet MAC addresses
    memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6);
 8001d5c:	4976      	ldr	r1, [pc, #472]	@ (8001f38 <makeTcpAck2+0x1fc>)
 8001d5e:	4b75      	ldr	r3, [pc, #468]	@ (8001f34 <makeTcpAck2+0x1f8>)
 8001d60:	2206      	movs	r2, #6
 8001d62:	0018      	movs	r0, r3
 8001d64:	f001 f88f 	bl	8002e86 <memcpy>
    memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6);
 8001d68:	4b71      	ldr	r3, [pc, #452]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4973      	ldr	r1, [pc, #460]	@ (8001f3c <makeTcpAck2+0x200>)
 8001d6e:	189b      	adds	r3, r3, r2
 8001d70:	2206      	movs	r2, #6
 8001d72:	0018      	movs	r0, r3
 8001d74:	f001 f887 	bl	8002e86 <memcpy>

    // IP source and destination addresses
    memcpy(&buffer[1 + IP_DST_P], &buffer[1 + IP_SRC_P], 4);
 8001d78:	4971      	ldr	r1, [pc, #452]	@ (8001f40 <makeTcpAck2+0x204>)
 8001d7a:	4b72      	ldr	r3, [pc, #456]	@ (8001f44 <makeTcpAck2+0x208>)
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f001 f881 	bl	8002e86 <memcpy>
    memcpy(&buffer[1 + IP_SRC_P], device_ip, 4);
 8001d84:	4b6a      	ldr	r3, [pc, #424]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001d86:	221b      	movs	r2, #27
 8001d88:	496f      	ldr	r1, [pc, #444]	@ (8001f48 <makeTcpAck2+0x20c>)
 8001d8a:	189b      	adds	r3, r3, r2
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f001 f879 	bl	8002e86 <memcpy>

    // TCP source and destination ports
    uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001d94:	4b66      	ldr	r3, [pc, #408]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001d96:	2223      	movs	r2, #35	@ 0x23
 8001d98:	5c9b      	ldrb	r3, [r3, r2]
 8001d9a:	021b      	lsls	r3, r3, #8
            | buffer[1 + TCP_SRC_PORT_L_P];
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	4b64      	ldr	r3, [pc, #400]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001da0:	2124      	movs	r1, #36	@ 0x24
 8001da2:	5c5b      	ldrb	r3, [r3, r1]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b21a      	sxth	r2, r3
    uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001daa:	2016      	movs	r0, #22
 8001dac:	183b      	adds	r3, r7, r0
 8001dae:	801a      	strh	r2, [r3, #0]
    uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001db0:	4b5f      	ldr	r3, [pc, #380]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001db2:	2225      	movs	r2, #37	@ 0x25
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	021b      	lsls	r3, r3, #8
            | buffer[1 + TCP_DST_PORT_L_P];
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	4b5d      	ldr	r3, [pc, #372]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001dbc:	2126      	movs	r1, #38	@ 0x26
 8001dbe:	5c5b      	ldrb	r3, [r3, r1]
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b21a      	sxth	r2, r3
    uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001dc6:	2414      	movs	r4, #20
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	801a      	strh	r2, [r3, #0]
    buffer[1 + TCP_SRC_PORT_H_P] = dstPort >> 8;
 8001dcc:	193b      	adds	r3, r7, r4
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	b2d9      	uxtb	r1, r3
 8001dd6:	4b56      	ldr	r3, [pc, #344]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001dd8:	2223      	movs	r2, #35	@ 0x23
 8001dda:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SRC_PORT_L_P] = dstPort & 0xFF;
 8001ddc:	193b      	adds	r3, r7, r4
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b2d9      	uxtb	r1, r3
 8001de2:	4b53      	ldr	r3, [pc, #332]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001de4:	2224      	movs	r2, #36	@ 0x24
 8001de6:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_DST_PORT_H_P] = srcPort >> 8;
 8001de8:	183b      	adds	r3, r7, r0
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	b2d9      	uxtb	r1, r3
 8001df2:	4b4f      	ldr	r3, [pc, #316]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001df4:	2225      	movs	r2, #37	@ 0x25
 8001df6:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_DST_PORT_L_P] = srcPort & 0xFF;
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	b2d9      	uxtb	r1, r3
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e00:	2226      	movs	r2, #38	@ 0x26
 8001e02:	5499      	strb	r1, [r3, r2]

    // TCP sequence and acknowledgment numbers
    uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 8001e04:	4b4a      	ldr	r3, [pc, #296]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e06:	2227      	movs	r2, #39	@ 0x27
 8001e08:	5c9b      	ldrb	r3, [r3, r2]
 8001e0a:	061a      	lsls	r2, r3, #24
            | (buffer[1 + TCP_SEQ_H_P + 1] << 16)
 8001e0c:	4b48      	ldr	r3, [pc, #288]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e0e:	2128      	movs	r1, #40	@ 0x28
 8001e10:	5c5b      	ldrb	r3, [r3, r1]
 8001e12:	041b      	lsls	r3, r3, #16
 8001e14:	431a      	orrs	r2, r3
            | (buffer[1 + TCP_SEQ_H_P + 2] << 8) | buffer[1 + TCP_SEQ_H_P + 3];
 8001e16:	4b46      	ldr	r3, [pc, #280]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e18:	2129      	movs	r1, #41	@ 0x29
 8001e1a:	5c5b      	ldrb	r3, [r3, r1]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	4a43      	ldr	r2, [pc, #268]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e22:	212a      	movs	r1, #42	@ 0x2a
 8001e24:	5c52      	ldrb	r2, [r2, r1]
 8001e26:	4313      	orrs	r3, r2
    uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 8001e28:	613b      	str	r3, [r7, #16]
    uint32_t clientAckNum = (buffer[1 + TCP_ACK_H_P] << 24)
 8001e2a:	4b41      	ldr	r3, [pc, #260]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e2c:	222b      	movs	r2, #43	@ 0x2b
 8001e2e:	5c9b      	ldrb	r3, [r3, r2]
 8001e30:	061a      	lsls	r2, r3, #24
                | (buffer[1 + TCP_ACK_H_P + 1] << 16)
 8001e32:	4b3f      	ldr	r3, [pc, #252]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e34:	212c      	movs	r1, #44	@ 0x2c
 8001e36:	5c5b      	ldrb	r3, [r3, r1]
 8001e38:	041b      	lsls	r3, r3, #16
 8001e3a:	431a      	orrs	r2, r3
                | (buffer[1 + TCP_ACK_H_P + 2] << 8) | buffer[1 + TCP_ACK_H_P + 3];
 8001e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e3e:	212d      	movs	r1, #45	@ 0x2d
 8001e40:	5c5b      	ldrb	r3, [r3, r1]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	4313      	orrs	r3, r2
 8001e46:	4a3a      	ldr	r2, [pc, #232]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e48:	212e      	movs	r1, #46	@ 0x2e
 8001e4a:	5c52      	ldrb	r2, [r2, r1]
 8001e4c:	4313      	orrs	r3, r2
    uint32_t clientAckNum = (buffer[1 + TCP_ACK_H_P] << 24)
 8001e4e:	60fb      	str	r3, [r7, #12]
    uint32_t serverSeqNum = clientAckNum;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	60bb      	str	r3, [r7, #8]
    uint32_t ackNum = clientSeqNum + 454;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	33c7      	adds	r3, #199	@ 0xc7
 8001e58:	33ff      	adds	r3, #255	@ 0xff
 8001e5a:	607b      	str	r3, [r7, #4]
    prevSeq = serverSeqNum;
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <makeTcpAck2+0x210>)
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	601a      	str	r2, [r3, #0]
    prevAck = ackNum;
 8001e62:	4b3b      	ldr	r3, [pc, #236]	@ (8001f50 <makeTcpAck2+0x214>)
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	601a      	str	r2, [r3, #0]

    // Set sequence and acknowledgment numbers
    buffer[1 + TCP_SEQ_H_P] = (serverSeqNum >> 24) & 0xFF;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	0e1b      	lsrs	r3, r3, #24
 8001e6c:	b2d9      	uxtb	r1, r3
 8001e6e:	4b30      	ldr	r3, [pc, #192]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e70:	2227      	movs	r2, #39	@ 0x27
 8001e72:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 1] = (serverSeqNum >> 16) & 0xFF;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	b2d9      	uxtb	r1, r3
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e7c:	2228      	movs	r2, #40	@ 0x28
 8001e7e:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 2] = (serverSeqNum >> 8) & 0xFF;
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	b2d9      	uxtb	r1, r3
 8001e86:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e88:	2229      	movs	r2, #41	@ 0x29
 8001e8a:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_SEQ_H_P + 3] = serverSeqNum & 0xFF;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	b2d9      	uxtb	r1, r3
 8001e90:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e92:	222a      	movs	r2, #42	@ 0x2a
 8001e94:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_ACK_H_P] = (ackNum >> 24) & 0xFF;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0e1b      	lsrs	r3, r3, #24
 8001e9a:	b2d9      	uxtb	r1, r3
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001e9e:	222b      	movs	r2, #43	@ 0x2b
 8001ea0:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_ACK_H_P + 1] = (ackNum >> 16) & 0xFF;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	b2d9      	uxtb	r1, r3
 8001ea8:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001eaa:	222c      	movs	r2, #44	@ 0x2c
 8001eac:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_ACK_H_P + 2] = (ackNum >> 8) & 0xFF;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b2d9      	uxtb	r1, r3
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001eb6:	222d      	movs	r2, #45	@ 0x2d
 8001eb8:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_ACK_H_P + 3] = ackNum & 0xFF;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	b2d9      	uxtb	r1, r3
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001ec0:	222e      	movs	r2, #46	@ 0x2e
 8001ec2:	5499      	strb	r1, [r3, r2]

    // IP total length
    uint16_t totalLength = IP_HEADER_LEN + TCP_HEADER_LEN;
 8001ec4:	1cbb      	adds	r3, r7, #2
 8001ec6:	2228      	movs	r2, #40	@ 0x28
 8001ec8:	801a      	strh	r2, [r3, #0]
    buffer[1 + IP_TOTLEN_H_P] = (totalLength >> 8) & 0xFF;
 8001eca:	1cbb      	adds	r3, r7, #2
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001ed6:	745a      	strb	r2, [r3, #17]
    buffer[1 + IP_TOTLEN_L_P] = totalLength & 0xFF;
 8001ed8:	1cbb      	adds	r3, r7, #2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001ee0:	749a      	strb	r2, [r3, #18]

    // TCP flags, window size, and header length
    buffer[1 + TCP_FLAGS_P] = TCP_FLAG_ACK;  // Only the ACK flag is set
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001ee4:	2230      	movs	r2, #48	@ 0x30
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_WIN_SIZE_H_P] = 0xFF; // Maximum window size
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001eec:	2231      	movs	r2, #49	@ 0x31
 8001eee:	21ff      	movs	r1, #255	@ 0xff
 8001ef0:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_WIN_SIZE_L_P] = 0xFF;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001ef4:	2232      	movs	r2, #50	@ 0x32
 8001ef6:	21ff      	movs	r1, #255	@ 0xff
 8001ef8:	5499      	strb	r1, [r3, r2]
    buffer[1 + TCP_HEADER_LEN_P] = 0x50; // 20 bytes (5 words)
 8001efa:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001efc:	222f      	movs	r2, #47	@ 0x2f
 8001efe:	2150      	movs	r1, #80	@ 0x50
 8001f00:	5499      	strb	r1, [r3, r2]

    // IP and TCP checksums
    calculateIPChecksum(&buffer[1]); // Pass the buffer to calculate the IP checksum
 8001f02:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <makeTcpAck2+0x1f8>)
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7ff fbe7 	bl	80016d8 <calculateIPChecksum>
    calculateTcpChecksum(&buffer[1]); // Pass the buffer to calculate the TCP checksum
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <makeTcpAck2+0x1f8>)
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff fc45 	bl	800179c <calculateTcpChecksum>

    // Padding to meet minimum Ethernet size
    // Transmit the packet
    transmit_tcp_packet(buffer, 1 + 54);
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <makeTcpAck2+0x1f4>)
 8001f14:	2137      	movs	r1, #55	@ 0x37
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7ff fa70 	bl	80013fc <transmit_tcp_packet>

    // Update connection state
    connectionState = ACK_SENT;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <makeTcpAck2+0x218>)
 8001f1e:	2205      	movs	r2, #5
 8001f20:	701a      	strb	r2, [r3, #0]
}
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b007      	add	sp, #28
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	08003f90 	.word	0x08003f90
 8001f30:	200001a8 	.word	0x200001a8
 8001f34:	200001a9 	.word	0x200001a9
 8001f38:	200001af 	.word	0x200001af
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	200001c3 	.word	0x200001c3
 8001f44:	200001c7 	.word	0x200001c7
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	20000784 	.word	0x20000784
 8001f50:	20000788 	.word	0x20000788
 8001f54:	2000078c 	.word	0x2000078c

08001f58 <makeTcpSynAck>:

void makeTcpSynAck() {
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
	printf("makeTcpSynAck\n\r");
 8001f5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002114 <makeTcpSynAck+0x1bc>)
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 fcd5 	bl	8002910 <iprintf>

	// Shift buffer for alignment
	memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 8001f66:	496c      	ldr	r1, [pc, #432]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8001f68:	4b6c      	ldr	r3, [pc, #432]	@ (800211c <makeTcpSynAck+0x1c4>)
 8001f6a:	2236      	movs	r2, #54	@ 0x36
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 fee1 	bl	8002d34 <memmove>
	buffer[0] = 0x0E;
 8001f72:	4b69      	ldr	r3, [pc, #420]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8001f74:	220e      	movs	r2, #14
 8001f76:	701a      	strb	r2, [r3, #0]
	// Ethernet MAC addresses
	memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6);
 8001f78:	4969      	ldr	r1, [pc, #420]	@ (8002120 <makeTcpSynAck+0x1c8>)
 8001f7a:	4b68      	ldr	r3, [pc, #416]	@ (800211c <makeTcpSynAck+0x1c4>)
 8001f7c:	2206      	movs	r2, #6
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 ff81 	bl	8002e86 <memcpy>
	memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6);
 8001f84:	4b64      	ldr	r3, [pc, #400]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8001f86:	2207      	movs	r2, #7
 8001f88:	4966      	ldr	r1, [pc, #408]	@ (8002124 <makeTcpSynAck+0x1cc>)
 8001f8a:	189b      	adds	r3, r3, r2
 8001f8c:	2206      	movs	r2, #6
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 ff79 	bl	8002e86 <memcpy>

	// IP source and destination addresses
	memcpy(&buffer[1 + IP_DST_P], &buffer[1 + IP_SRC_P], 4);
 8001f94:	4964      	ldr	r1, [pc, #400]	@ (8002128 <makeTcpSynAck+0x1d0>)
 8001f96:	4b65      	ldr	r3, [pc, #404]	@ (800212c <makeTcpSynAck+0x1d4>)
 8001f98:	2204      	movs	r2, #4
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 ff73 	bl	8002e86 <memcpy>
	memcpy(&buffer[1 + IP_SRC_P], device_ip, 4);
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8001fa2:	221b      	movs	r2, #27
 8001fa4:	4962      	ldr	r1, [pc, #392]	@ (8002130 <makeTcpSynAck+0x1d8>)
 8001fa6:	189b      	adds	r3, r3, r2
 8001fa8:	2204      	movs	r2, #4
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 ff6b 	bl	8002e86 <memcpy>

	// TCP source and destination ports
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001fb0:	4b59      	ldr	r3, [pc, #356]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8001fb2:	2223      	movs	r2, #35	@ 0x23
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_SRC_PORT_L_P];
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	4b57      	ldr	r3, [pc, #348]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8001fbc:	2124      	movs	r1, #36	@ 0x24
 8001fbe:	5c5b      	ldrb	r3, [r3, r1]
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b21a      	sxth	r2, r3
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001fc6:	2016      	movs	r0, #22
 8001fc8:	183b      	adds	r3, r7, r0
 8001fca:	801a      	strh	r2, [r3, #0]
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001fcc:	4b52      	ldr	r3, [pc, #328]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8001fce:	2225      	movs	r2, #37	@ 0x25
 8001fd0:	5c9b      	ldrb	r3, [r3, r2]
 8001fd2:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_DST_PORT_L_P];
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	4b50      	ldr	r3, [pc, #320]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8001fd8:	2126      	movs	r1, #38	@ 0x26
 8001fda:	5c5b      	ldrb	r3, [r3, r1]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b21a      	sxth	r2, r3
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001fe2:	2414      	movs	r4, #20
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	801a      	strh	r2, [r3, #0]
	buffer[1 + TCP_SRC_PORT_H_P] = dstPort >> 8;
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	b2d9      	uxtb	r1, r3
 8001ff2:	4b49      	ldr	r3, [pc, #292]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8001ff4:	2223      	movs	r2, #35	@ 0x23
 8001ff6:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SRC_PORT_L_P] = dstPort & 0xFF;
 8001ff8:	193b      	adds	r3, r7, r4
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b2d9      	uxtb	r1, r3
 8001ffe:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8002000:	2224      	movs	r2, #36	@ 0x24
 8002002:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_H_P] = srcPort >> 8;
 8002004:	183b      	adds	r3, r7, r0
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	b29b      	uxth	r3, r3
 800200c:	b2d9      	uxtb	r1, r3
 800200e:	4b42      	ldr	r3, [pc, #264]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8002010:	2225      	movs	r2, #37	@ 0x25
 8002012:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_L_P] = srcPort & 0xFF;
 8002014:	183b      	adds	r3, r7, r0
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b2d9      	uxtb	r1, r3
 800201a:	4b3f      	ldr	r3, [pc, #252]	@ (8002118 <makeTcpSynAck+0x1c0>)
 800201c:	2226      	movs	r2, #38	@ 0x26
 800201e:	5499      	strb	r1, [r3, r2]

	// TCP sequence and acknowledgment numbers
	uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 8002020:	4b3d      	ldr	r3, [pc, #244]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8002022:	2227      	movs	r2, #39	@ 0x27
 8002024:	5c9b      	ldrb	r3, [r3, r2]
 8002026:	061a      	lsls	r2, r3, #24
			| (buffer[1 + TCP_SEQ_H_P + 1] << 16)
 8002028:	4b3b      	ldr	r3, [pc, #236]	@ (8002118 <makeTcpSynAck+0x1c0>)
 800202a:	2128      	movs	r1, #40	@ 0x28
 800202c:	5c5b      	ldrb	r3, [r3, r1]
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	431a      	orrs	r2, r3
			| (buffer[1 + TCP_SEQ_H_P + 2] << 8) | buffer[1 + TCP_SEQ_H_P + 3];
 8002032:	4b39      	ldr	r3, [pc, #228]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8002034:	2129      	movs	r1, #41	@ 0x29
 8002036:	5c5b      	ldrb	r3, [r3, r1]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	4313      	orrs	r3, r2
 800203c:	4a36      	ldr	r2, [pc, #216]	@ (8002118 <makeTcpSynAck+0x1c0>)
 800203e:	212a      	movs	r1, #42	@ 0x2a
 8002040:	5c52      	ldrb	r2, [r2, r1]
 8002042:	4313      	orrs	r3, r2
	uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 8002044:	613b      	str	r3, [r7, #16]
	uint32_t serverSeqNum = 1000;
 8002046:	23fa      	movs	r3, #250	@ 0xfa
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	60fb      	str	r3, [r7, #12]
	uint32_t ackNum = clientSeqNum + 1;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	3301      	adds	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]

	buffer[1 + TCP_SEQ_H_P] = (serverSeqNum >> 24) & 0xFF;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	0e1b      	lsrs	r3, r3, #24
 8002056:	b2d9      	uxtb	r1, r3
 8002058:	4b2f      	ldr	r3, [pc, #188]	@ (8002118 <makeTcpSynAck+0x1c0>)
 800205a:	2227      	movs	r2, #39	@ 0x27
 800205c:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 1] = (serverSeqNum >> 16) & 0xFF;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	b2d9      	uxtb	r1, r3
 8002064:	4b2c      	ldr	r3, [pc, #176]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8002066:	2228      	movs	r2, #40	@ 0x28
 8002068:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 2] = (serverSeqNum >> 8) & 0xFF;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b2d9      	uxtb	r1, r3
 8002070:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8002072:	2229      	movs	r2, #41	@ 0x29
 8002074:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 3] = serverSeqNum & 0xFF;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	b2d9      	uxtb	r1, r3
 800207a:	4b27      	ldr	r3, [pc, #156]	@ (8002118 <makeTcpSynAck+0x1c0>)
 800207c:	222a      	movs	r2, #42	@ 0x2a
 800207e:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 4] = (ackNum >> 24) & 0xFF;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	0e1b      	lsrs	r3, r3, #24
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	4b24      	ldr	r3, [pc, #144]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8002088:	222b      	movs	r2, #43	@ 0x2b
 800208a:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 5] = (ackNum >> 16) & 0xFF;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	0c1b      	lsrs	r3, r3, #16
 8002090:	b2d9      	uxtb	r1, r3
 8002092:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <makeTcpSynAck+0x1c0>)
 8002094:	222c      	movs	r2, #44	@ 0x2c
 8002096:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 6] = (ackNum >> 8) & 0xFF;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	b2d9      	uxtb	r1, r3
 800209e:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <makeTcpSynAck+0x1c0>)
 80020a0:	222d      	movs	r2, #45	@ 0x2d
 80020a2:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 7] = ackNum & 0xFF;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	b2d9      	uxtb	r1, r3
 80020a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <makeTcpSynAck+0x1c0>)
 80020aa:	222e      	movs	r2, #46	@ 0x2e
 80020ac:	5499      	strb	r1, [r3, r2]

	// IP total length
	uint16_t totalLength = IP_HEADER_LEN + TCP_HEADER_LEN;
 80020ae:	1dbb      	adds	r3, r7, #6
 80020b0:	2228      	movs	r2, #40	@ 0x28
 80020b2:	801a      	strh	r2, [r3, #0]
	buffer[1 + IP_TOTLEN_H_P] = (totalLength >> 8) & 0xFF;
 80020b4:	1dbb      	adds	r3, r7, #6
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <makeTcpSynAck+0x1c0>)
 80020c0:	745a      	strb	r2, [r3, #17]
	buffer[1 + IP_TOTLEN_L_P] = totalLength & 0xFF;
 80020c2:	1dbb      	adds	r3, r7, #6
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <makeTcpSynAck+0x1c0>)
 80020ca:	749a      	strb	r2, [r3, #18]

	// TCP flags, window size, and header length
	buffer[1 + TCP_FLAGS_P] = TCP_FLAG_SYN | TCP_FLAG_ACK;
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <makeTcpSynAck+0x1c0>)
 80020ce:	2230      	movs	r2, #48	@ 0x30
 80020d0:	2112      	movs	r1, #18
 80020d2:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_H_P] = 0xFF; // Maximum window size
 80020d4:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <makeTcpSynAck+0x1c0>)
 80020d6:	2231      	movs	r2, #49	@ 0x31
 80020d8:	21ff      	movs	r1, #255	@ 0xff
 80020da:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_L_P] = 0xFF;
 80020dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <makeTcpSynAck+0x1c0>)
 80020de:	2232      	movs	r2, #50	@ 0x32
 80020e0:	21ff      	movs	r1, #255	@ 0xff
 80020e2:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_HEADER_LEN_P] = 0x50; // 20 bytes (5 words)
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <makeTcpSynAck+0x1c0>)
 80020e6:	222f      	movs	r2, #47	@ 0x2f
 80020e8:	2150      	movs	r1, #80	@ 0x50
 80020ea:	5499      	strb	r1, [r3, r2]

	// IP and TCP checksums
	calculateIPChecksum(&buffer[1]); // Pass the buffer to calculate the IP checksum
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <makeTcpSynAck+0x1c4>)
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff faf2 	bl	80016d8 <calculateIPChecksum>
	calculateTcpChecksum(&buffer[1]); // Pass the buffer to calculate the TCP checksum
 80020f4:	4b09      	ldr	r3, [pc, #36]	@ (800211c <makeTcpSynAck+0x1c4>)
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7ff fb50 	bl	800179c <calculateTcpChecksum>

	// Padding to meet minimum Ethernet size
	// Transmit the packet
	transmit_tcp_packet(buffer, 1 + 54);
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <makeTcpSynAck+0x1c0>)
 80020fe:	2137      	movs	r1, #55	@ 0x37
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff f97b 	bl	80013fc <transmit_tcp_packet>

	// Update connection state
	connectionState = SYN_RECEIVED;
 8002106:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <makeTcpSynAck+0x1dc>)
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
}
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b007      	add	sp, #28
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	08003fa0 	.word	0x08003fa0
 8002118:	200001a8 	.word	0x200001a8
 800211c:	200001a9 	.word	0x200001a9
 8002120:	200001af 	.word	0x200001af
 8002124:	20000000 	.word	0x20000000
 8002128:	200001c3 	.word	0x200001c3
 800212c:	200001c7 	.word	0x200001c7
 8002130:	20000008 	.word	0x20000008
 8002134:	2000078c 	.word	0x2000078c

08002138 <makeTcpAck>:

	// Transmit the packet
	transmit_tcp_packet(buffer, 1 + headerSize + responseLen);
}

void makeTcpAck() {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	printf("tcpack\n\r");
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <makeTcpAck+0x38>)
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fbe6 	bl	8002910 <iprintf>
	memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 8002144:	490b      	ldr	r1, [pc, #44]	@ (8002174 <makeTcpAck+0x3c>)
 8002146:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <makeTcpAck+0x40>)
 8002148:	2236      	movs	r2, #54	@ 0x36
 800214a:	0018      	movs	r0, r3
 800214c:	f000 fdf2 	bl	8002d34 <memmove>

	// Set the 0th value to 0x0E
	buffer[0] = 0x0E;
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <makeTcpAck+0x3c>)
 8002152:	220e      	movs	r2, #14
 8002154:	701a      	strb	r2, [r3, #0]
	buffer[1 + TCP_FLAGS_P] = TCP_FLAG_ACK;
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <makeTcpAck+0x3c>)
 8002158:	2230      	movs	r2, #48	@ 0x30
 800215a:	2110      	movs	r1, #16
 800215c:	5499      	strb	r1, [r3, r2]
	transmit_tcp_packet(buffer, 1 + TCP_DATA_START_P);
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <makeTcpAck+0x3c>)
 8002160:	2137      	movs	r1, #55	@ 0x37
 8002162:	0018      	movs	r0, r3
 8002164:	f7ff f94a 	bl	80013fc <transmit_tcp_packet>
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	0800421c 	.word	0x0800421c
 8002174:	200001a8 	.word	0x200001a8
 8002178:	200001a9 	.word	0x200001a9

0800217c <packetLoop>:
		trial_arp_request(); // Trigger ARP request
		lastArpTime = currentTime;
	}
}

void packetLoop() {
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
	uint16_t plen = packetReceive();
 8002182:	1dbc      	adds	r4, r7, #6
 8002184:	f7ff f996 	bl	80014b4 <packetReceive>
 8002188:	0003      	movs	r3, r0
 800218a:	8023      	strh	r3, [r4, #0]

	// Process received packets
	if (plen > 0) {
 800218c:	1dbb      	adds	r3, r7, #6
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d100      	bne.n	8002196 <packetLoop+0x1a>
 8002194:	e0a2      	b.n	80022dc <packetLoop+0x160>
		uint16_t ethType = (buffer[ETH_TYPE_H_P] << 8) | buffer[ETH_TYPE_L_P];
 8002196:	4b53      	ldr	r3, [pc, #332]	@ (80022e4 <packetLoop+0x168>)
 8002198:	7b1b      	ldrb	r3, [r3, #12]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21a      	sxth	r2, r3
 800219e:	4b51      	ldr	r3, [pc, #324]	@ (80022e4 <packetLoop+0x168>)
 80021a0:	7b5b      	ldrb	r3, [r3, #13]
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	801a      	strh	r2, [r3, #0]
		if (ethType == ETH_TYPE_ARP) {
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	4a4d      	ldr	r2, [pc, #308]	@ (80022e8 <packetLoop+0x16c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d107      	bne.n	80021c6 <packetLoop+0x4a>
			if (buffer[21] == 0x01) {
 80021b6:	4b4b      	ldr	r3, [pc, #300]	@ (80022e4 <packetLoop+0x168>)
 80021b8:	7d5b      	ldrb	r3, [r3, #21]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d000      	beq.n	80021c0 <packetLoop+0x44>
 80021be:	e082      	b.n	80022c6 <packetLoop+0x14a>
				makeArpReply();
 80021c0:	f7ff fa32 	bl	8001628 <makeArpReply>
			}
			return;
 80021c4:	e07f      	b.n	80022c6 <packetLoop+0x14a>
		}

		if (ethType == ETH_TYPE_IP && buffer[IP_PROTO_P] == IP_PROTO_TCP) {
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	881a      	ldrh	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d000      	beq.n	80021d4 <packetLoop+0x58>
 80021d2:	e083      	b.n	80022dc <packetLoop+0x160>
 80021d4:	4b43      	ldr	r3, [pc, #268]	@ (80022e4 <packetLoop+0x168>)
 80021d6:	7ddb      	ldrb	r3, [r3, #23]
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d000      	beq.n	80021de <packetLoop+0x62>
 80021dc:	e07e      	b.n	80022dc <packetLoop+0x160>
			uint8_t tcpFlags = buffer[TCP_FLAGS_P];
 80021de:	1cfb      	adds	r3, r7, #3
 80021e0:	4a40      	ldr	r2, [pc, #256]	@ (80022e4 <packetLoop+0x168>)
 80021e2:	212f      	movs	r1, #47	@ 0x2f
 80021e4:	5c52      	ldrb	r2, [r2, r1]
 80021e6:	701a      	strb	r2, [r3, #0]

			// Check for TCP(ACK_FIN)
						if ((tcpFlags & TCP_FLAG_ACK) && (tcpFlags & TCP_FLAG_FIN)) {
 80021e8:	1cfb      	adds	r3, r7, #3
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2210      	movs	r2, #16
 80021ee:	4013      	ands	r3, r2
 80021f0:	d012      	beq.n	8002218 <packetLoop+0x9c>
 80021f2:	1cfb      	adds	r3, r7, #3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2201      	movs	r2, #1
 80021f8:	4013      	ands	r3, r2
 80021fa:	d00d      	beq.n	8002218 <packetLoop+0x9c>
							printf("TCP(ACK_FIN) packet detected\n\r");
 80021fc:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <packetLoop+0x170>)
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 fb86 	bl	8002910 <iprintf>
							makeTcpAck3(); // Send an acknowledgment
 8002204:	f7ff fc8e 	bl	8001b24 <makeTcpAck3>
							connectionState = CLOSED;
 8002208:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <packetLoop+0x174>)
 800220a:	2204      	movs	r2, #4
 800220c:	701a      	strb	r2, [r3, #0]
							enc_init(device_mac);
 800220e:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <packetLoop+0x178>)
 8002210:	0018      	movs	r0, r3
 8002212:	f7fe fcdb 	bl	8000bcc <enc_init>
							return;
 8002216:	e061      	b.n	80022dc <packetLoop+0x160>
						}
						if ((tcpFlags & TCP_FLAG_SYN)) {
 8002218:	1cfb      	adds	r3, r7, #3
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d006      	beq.n	8002230 <packetLoop+0xb4>
													printf("TCP(SYN) packet detected\n\r");
 8002222:	4b35      	ldr	r3, [pc, #212]	@ (80022f8 <packetLoop+0x17c>)
 8002224:	0018      	movs	r0, r3
 8002226:	f000 fb73 	bl	8002910 <iprintf>
													//makeTcpAck3(); // Send an acknowledgment
													connectionState = LISTEN;
 800222a:	4b31      	ldr	r3, [pc, #196]	@ (80022f0 <packetLoop+0x174>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
													//enc_init(device_mac);
												}
			switch (connectionState) {
 8002230:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <packetLoop+0x174>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d848      	bhi.n	80022ca <packetLoop+0x14e>
 8002238:	009a      	lsls	r2, r3, #2
 800223a:	4b30      	ldr	r3, [pc, #192]	@ (80022fc <packetLoop+0x180>)
 800223c:	18d3      	adds	r3, r2, r3
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	469f      	mov	pc, r3
			case LISTEN:
				printf("listen\n\r");
 8002242:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <packetLoop+0x184>)
 8002244:	0018      	movs	r0, r3
 8002246:	f000 fb63 	bl	8002910 <iprintf>
				if (tcpFlags & TCP_FLAG_SYN)
 800224a:	1cfb      	adds	r3, r7, #3
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d03c      	beq.n	80022ce <packetLoop+0x152>
					makeTcpSynAck();
 8002254:	f7ff fe80 	bl	8001f58 <makeTcpSynAck>
				break;
 8002258:	e039      	b.n	80022ce <packetLoop+0x152>
			case SYN_RECEIVED:
				printf("syn received\n\r");
 800225a:	4b2a      	ldr	r3, [pc, #168]	@ (8002304 <packetLoop+0x188>)
 800225c:	0018      	movs	r0, r3
 800225e:	f000 fb57 	bl	8002910 <iprintf>
				if (tcpFlags & TCP_FLAG_ACK)
 8002262:	1cfb      	adds	r3, r7, #3
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2210      	movs	r2, #16
 8002268:	4013      	ands	r3, r2
 800226a:	d032      	beq.n	80022d2 <packetLoop+0x156>
					connectionState = ESTABLISHED;
 800226c:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <packetLoop+0x174>)
 800226e:	2202      	movs	r2, #2
 8002270:	701a      	strb	r2, [r3, #0]
				break;
 8002272:	e02e      	b.n	80022d2 <packetLoop+0x156>
			case ESTABLISHED:
				printf("established\n\r");
 8002274:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <packetLoop+0x18c>)
 8002276:	0018      	movs	r0, r3
 8002278:	f000 fb4a 	bl	8002910 <iprintf>
				if (tcpFlags & TCP_FLAG_FIN) {
 800227c:	1cfb      	adds	r3, r7, #3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	d005      	beq.n	8002292 <packetLoop+0x116>
					makeTcpAck();
 8002286:	f7ff ff57 	bl	8002138 <makeTcpAck>
					connectionState = FIN_WAIT;
 800228a:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <packetLoop+0x174>)
 800228c:	2203      	movs	r2, #3
 800228e:	701a      	strb	r2, [r3, #0]
				} else if (plen > TCP_DATA_START_P) {
					makeTcpAck2();

				}
				break;
 8002290:	e021      	b.n	80022d6 <packetLoop+0x15a>
				} else if (plen > TCP_DATA_START_P) {
 8002292:	1dbb      	adds	r3, r7, #6
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	2b36      	cmp	r3, #54	@ 0x36
 8002298:	d91d      	bls.n	80022d6 <packetLoop+0x15a>
					makeTcpAck2();
 800229a:	f7ff fd4f 	bl	8001d3c <makeTcpAck2>
				break;
 800229e:	e01a      	b.n	80022d6 <packetLoop+0x15a>
			case FIN_WAIT:
				printf("fin wait\n\r");
 80022a0:	4b1a      	ldr	r3, [pc, #104]	@ (800230c <packetLoop+0x190>)
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 fb34 	bl	8002910 <iprintf>
				if (tcpFlags & TCP_FLAG_ACK)
 80022a8:	1cfb      	adds	r3, r7, #3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2210      	movs	r2, #16
 80022ae:	4013      	ands	r3, r2
 80022b0:	d013      	beq.n	80022da <packetLoop+0x15e>
					connectionState = CLOSED;
 80022b2:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <packetLoop+0x174>)
 80022b4:	2204      	movs	r2, #4
 80022b6:	701a      	strb	r2, [r3, #0]
				break;
 80022b8:	e00f      	b.n	80022da <packetLoop+0x15e>
			case ACK_SENT:
				makeTcpFinPshAck();
 80022ba:	f7ff fb37 	bl	800192c <makeTcpFinPshAck>
				connectionState = CLOSED;
 80022be:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <packetLoop+0x174>)
 80022c0:	2204      	movs	r2, #4
 80022c2:	701a      	strb	r2, [r3, #0]
				break;
 80022c4:	e00a      	b.n	80022dc <packetLoop+0x160>
			return;
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	e008      	b.n	80022dc <packetLoop+0x160>
			default:
				break;
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	e006      	b.n	80022dc <packetLoop+0x160>
				break;
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	e004      	b.n	80022dc <packetLoop+0x160>
				break;
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	e002      	b.n	80022dc <packetLoop+0x160>
				break;
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	e000      	b.n	80022dc <packetLoop+0x160>
				break;
 80022da:	46c0      	nop			@ (mov r8, r8)
		}
	}

	// Call ARP refresh periodically
	//refreshArp();
}
 80022dc:	46bd      	mov	sp, r7
 80022de:	b003      	add	sp, #12
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	200001a8 	.word	0x200001a8
 80022e8:	00000806 	.word	0x00000806
 80022ec:	08004254 	.word	0x08004254
 80022f0:	2000078c 	.word	0x2000078c
 80022f4:	20000000 	.word	0x20000000
 80022f8:	08004274 	.word	0x08004274
 80022fc:	080042c8 	.word	0x080042c8
 8002300:	08004290 	.word	0x08004290
 8002304:	0800429c 	.word	0x0800429c
 8002308:	080042ac 	.word	0x080042ac
 800230c:	080042bc 	.word	0x080042bc

08002310 <__io_getchar>:
 *
 * Returns:
 * either received char or -1 if not
 */
int __io_getchar(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
	char ch;
	if(cbfifo_dequeue(&fiforx, &ch, 1)==1)
 8002316:	1df9      	adds	r1, r7, #7
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <__io_getchar+0x2c>)
 800231a:	2201      	movs	r2, #1
 800231c:	0018      	movs	r0, r3
 800231e:	f7fe f8a4 	bl	800046a <cbfifo_dequeue>
 8002322:	0003      	movs	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d102      	bne.n	800232e <__io_getchar+0x1e>
	{
		return ch;
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	e001      	b.n	8002332 <__io_getchar+0x22>
	}
	else
	{
		return -1;
 800232e:	2301      	movs	r3, #1
 8002330:	425b      	negs	r3, r3
	}
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	20000118 	.word	0x20000118

08002340 <__io_putchar>:
 *
 * Returns:
 *  either received 1 or -1(if transmission not successful)
 */
int __io_putchar(int ch)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	while (cbfifo_length(&fifotx) >= 127);
 8002348:	46c0      	nop			@ (mov r8, r8)
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <__io_putchar+0x48>)
 800234c:	0018      	movs	r0, r3
 800234e:	f7fe f8d4 	bl	80004fa <cbfifo_length>
 8002352:	0003      	movs	r3, r0
 8002354:	2b7e      	cmp	r3, #126	@ 0x7e
 8002356:	d8f8      	bhi.n	800234a <__io_putchar+0xa>
	if(cbfifo_enqueue(&fifotx,&ch,1)==1)
 8002358:	1d39      	adds	r1, r7, #4
 800235a:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <__io_putchar+0x48>)
 800235c:	2201      	movs	r2, #1
 800235e:	0018      	movs	r0, r3
 8002360:	f7fe f834 	bl	80003cc <cbfifo_enqueue>
 8002364:	0003      	movs	r3, r0
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <__io_putchar+0x3a>
	{
		USART2->CR1 |= USART_CR1_TXEIE;
 800236a:	4b08      	ldr	r3, [pc, #32]	@ (800238c <__io_putchar+0x4c>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4b07      	ldr	r3, [pc, #28]	@ (800238c <__io_putchar+0x4c>)
 8002370:	2180      	movs	r1, #128	@ 0x80
 8002372:	430a      	orrs	r2, r1
 8002374:	601a      	str	r2, [r3, #0]
		return 1;
 8002376:	2301      	movs	r3, #1
 8002378:	e001      	b.n	800237e <__io_putchar+0x3e>
	}
	else
	{
		return -1;
 800237a:	2301      	movs	r3, #1
 800237c:	425b      	negs	r3, r3
	}
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	2000008c 	.word	0x2000008c
 800238c:	40004400 	.word	0x40004400

08002390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002390:	480e      	ldr	r0, [pc, #56]	@ (80023cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002394:	f000 f866 	bl	8002464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002398:	480d      	ldr	r0, [pc, #52]	@ (80023d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800239a:	490e      	ldr	r1, [pc, #56]	@ (80023d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800239c:	4a0e      	ldr	r2, [pc, #56]	@ (80023d8 <LoopForever+0xe>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a0:	e002      	b.n	80023a8 <LoopCopyDataInit>

080023a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a6:	3304      	adds	r3, #4

080023a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ac:	d3f9      	bcc.n	80023a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ae:	4a0b      	ldr	r2, [pc, #44]	@ (80023dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023b0:	4c0b      	ldr	r4, [pc, #44]	@ (80023e0 <LoopForever+0x16>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b4:	e001      	b.n	80023ba <LoopFillZerobss>

080023b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b8:	3204      	adds	r2, #4

080023ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023bc:	d3fb      	bcc.n	80023b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023be:	f000 fd3b 	bl	8002e38 <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 80023c2:	f000 f895 	bl	80024f0 <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 80023c6:	f7fe fe6f 	bl	80010a8 <main>

080023ca <LoopForever>:

LoopForever:
  b LoopForever
 80023ca:	e7fe      	b.n	80023ca <LoopForever>
  ldr   r0, =_estack
 80023cc:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80023d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80023d8:	0800432c 	.word	0x0800432c
  ldr r2, =_sbss
 80023dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80023e0:	200008dc 	.word	0x200008dc

080023e4 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC_COMP_IRQHandler>
	...

080023e8 <Set_Clocks_To_48MHz>:
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <Set_Clocks_To_48MHz+0x70>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b19      	ldr	r3, [pc, #100]	@ (8002458 <Set_Clocks_To_48MHz+0x70>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	4b18      	ldr	r3, [pc, #96]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 80023fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023fc:	4b17      	ldr	r3, [pc, #92]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 80023fe:	2180      	movs	r1, #128	@ 0x80
 8002400:	0249      	lsls	r1, r1, #9
 8002402:	430a      	orrs	r2, r1
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 800240a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	029b      	lsls	r3, r3, #10
 8002410:	4013      	ands	r3, r2
 8002412:	d0f9      	beq.n	8002408 <Set_Clocks_To_48MHz+0x20>
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 800241a:	21f0      	movs	r1, #240	@ 0xf0
 800241c:	438a      	bics	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 8002426:	2103      	movs	r1, #3
 8002428:	430a      	orrs	r2, r1
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	46c0      	nop			@ (mov r8, r8)
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	089a      	lsrs	r2, r3, #2
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4053      	eors	r3, r2
 800243a:	2203      	movs	r2, #3
 800243c:	4013      	ands	r3, r2
 800243e:	d1f6      	bne.n	800242e <Set_Clocks_To_48MHz+0x46>
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a06      	ldr	r2, [pc, #24]	@ (8002460 <Set_Clocks_To_48MHz+0x78>)
 8002446:	401a      	ands	r2, r3
 8002448:	4b04      	ldr	r3, [pc, #16]	@ (800245c <Set_Clocks_To_48MHz+0x74>)
 800244a:	2180      	movs	r1, #128	@ 0x80
 800244c:	00c9      	lsls	r1, r1, #3
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40022000 	.word	0x40022000
 800245c:	40021000 	.word	0x40021000
 8002460:	fffff8ff 	.word	0xfffff8ff

08002464 <SystemInit>:
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <SystemInit+0x74>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <SystemInit+0x74>)
 800246e:	2101      	movs	r1, #1
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <SystemInit+0x74>)
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <SystemInit+0x74>)
 800247a:	4918      	ldr	r1, [pc, #96]	@ (80024dc <SystemInit+0x78>)
 800247c:	400a      	ands	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <SystemInit+0x74>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <SystemInit+0x74>)
 8002486:	4916      	ldr	r1, [pc, #88]	@ (80024e0 <SystemInit+0x7c>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <SystemInit+0x74>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <SystemInit+0x74>)
 8002492:	4914      	ldr	r1, [pc, #80]	@ (80024e4 <SystemInit+0x80>)
 8002494:	400a      	ands	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <SystemInit+0x74>)
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <SystemInit+0x74>)
 800249e:	4912      	ldr	r1, [pc, #72]	@ (80024e8 <SystemInit+0x84>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <SystemInit+0x74>)
 80024a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a8:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <SystemInit+0x74>)
 80024aa:	210f      	movs	r1, #15
 80024ac:	438a      	bics	r2, r1
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <SystemInit+0x74>)
 80024b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b4:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <SystemInit+0x74>)
 80024b6:	490d      	ldr	r1, [pc, #52]	@ (80024ec <SystemInit+0x88>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <SystemInit+0x74>)
 80024be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <SystemInit+0x74>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	438a      	bics	r2, r1
 80024c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <SystemInit+0x74>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	f7ff ff8b 	bl	80023e8 <Set_Clocks_To_48MHz>
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08ffb80c 	.word	0x08ffb80c
 80024e0:	fef6ffff 	.word	0xfef6ffff
 80024e4:	fffbffff 	.word	0xfffbffff
 80024e8:	ffc0ffff 	.word	0xffc0ffff
 80024ec:	fff0feac 	.word	0xfff0feac

080024f0 <SystemCoreClockUpdate>:
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	2300      	movs	r3, #0
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	4b3d      	ldr	r3, [pc, #244]	@ (80025fc <SystemCoreClockUpdate+0x10c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	220c      	movs	r2, #12
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d00f      	beq.n	8002536 <SystemCoreClockUpdate+0x46>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b0c      	cmp	r3, #12
 800251a:	d859      	bhi.n	80025d0 <SystemCoreClockUpdate+0xe0>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b08      	cmp	r3, #8
 8002520:	d015      	beq.n	800254e <SystemCoreClockUpdate+0x5e>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d853      	bhi.n	80025d0 <SystemCoreClockUpdate+0xe0>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <SystemCoreClockUpdate+0x4e>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b04      	cmp	r3, #4
 8002532:	d008      	beq.n	8002546 <SystemCoreClockUpdate+0x56>
 8002534:	e04c      	b.n	80025d0 <SystemCoreClockUpdate+0xe0>
 8002536:	4b32      	ldr	r3, [pc, #200]	@ (8002600 <SystemCoreClockUpdate+0x110>)
 8002538:	4a32      	ldr	r2, [pc, #200]	@ (8002604 <SystemCoreClockUpdate+0x114>)
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e04c      	b.n	80025d8 <SystemCoreClockUpdate+0xe8>
 800253e:	4b30      	ldr	r3, [pc, #192]	@ (8002600 <SystemCoreClockUpdate+0x110>)
 8002540:	4a31      	ldr	r2, [pc, #196]	@ (8002608 <SystemCoreClockUpdate+0x118>)
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e048      	b.n	80025d8 <SystemCoreClockUpdate+0xe8>
 8002546:	4b2e      	ldr	r3, [pc, #184]	@ (8002600 <SystemCoreClockUpdate+0x110>)
 8002548:	4a2f      	ldr	r2, [pc, #188]	@ (8002608 <SystemCoreClockUpdate+0x118>)
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e044      	b.n	80025d8 <SystemCoreClockUpdate+0xe8>
 800254e:	4b2b      	ldr	r3, [pc, #172]	@ (80025fc <SystemCoreClockUpdate+0x10c>)
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	23f0      	movs	r3, #240	@ 0xf0
 8002554:	039b      	lsls	r3, r3, #14
 8002556:	4013      	ands	r3, r2
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <SystemCoreClockUpdate+0x10c>)
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	23c0      	movs	r3, #192	@ 0xc0
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	4013      	ands	r3, r2
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	0c9b      	lsrs	r3, r3, #18
 800256a:	3302      	adds	r3, #2
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <SystemCoreClockUpdate+0x10c>)
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	220f      	movs	r2, #15
 8002574:	4013      	ands	r3, r2
 8002576:	3301      	adds	r3, #1
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	2380      	movs	r3, #128	@ 0x80
 800257e:	025b      	lsls	r3, r3, #9
 8002580:	429a      	cmp	r2, r3
 8002582:	d10a      	bne.n	800259a <SystemCoreClockUpdate+0xaa>
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	4820      	ldr	r0, [pc, #128]	@ (8002608 <SystemCoreClockUpdate+0x118>)
 8002588:	f7fd fdd0 	bl	800012c <__udivsi3>
 800258c:	0003      	movs	r3, r0
 800258e:	001a      	movs	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	435a      	muls	r2, r3
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <SystemCoreClockUpdate+0x110>)
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e01e      	b.n	80025d8 <SystemCoreClockUpdate+0xe8>
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	23c0      	movs	r3, #192	@ 0xc0
 800259e:	025b      	lsls	r3, r3, #9
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10a      	bne.n	80025ba <SystemCoreClockUpdate+0xca>
 80025a4:	6839      	ldr	r1, [r7, #0]
 80025a6:	4817      	ldr	r0, [pc, #92]	@ (8002604 <SystemCoreClockUpdate+0x114>)
 80025a8:	f7fd fdc0 	bl	800012c <__udivsi3>
 80025ac:	0003      	movs	r3, r0
 80025ae:	001a      	movs	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	435a      	muls	r2, r3
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <SystemCoreClockUpdate+0x110>)
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e00e      	b.n	80025d8 <SystemCoreClockUpdate+0xe8>
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	4812      	ldr	r0, [pc, #72]	@ (8002608 <SystemCoreClockUpdate+0x118>)
 80025be:	f7fd fdb5 	bl	800012c <__udivsi3>
 80025c2:	0003      	movs	r3, r0
 80025c4:	001a      	movs	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	435a      	muls	r2, r3
 80025ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <SystemCoreClockUpdate+0x110>)
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e003      	b.n	80025d8 <SystemCoreClockUpdate+0xe8>
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <SystemCoreClockUpdate+0x110>)
 80025d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002608 <SystemCoreClockUpdate+0x118>)
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <SystemCoreClockUpdate+0x10c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	220f      	movs	r2, #15
 80025e0:	4013      	ands	r3, r2
 80025e2:	4a0a      	ldr	r2, [pc, #40]	@ (800260c <SystemCoreClockUpdate+0x11c>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <SystemCoreClockUpdate+0x110>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	40da      	lsrs	r2, r3
 80025f0:	4b03      	ldr	r3, [pc, #12]	@ (8002600 <SystemCoreClockUpdate+0x110>)
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	46c0      	nop			@ (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	2000000c 	.word	0x2000000c
 8002604:	02dc6c00 	.word	0x02dc6c00
 8002608:	007a1200 	.word	0x007a1200
 800260c:	080042e0 	.word	0x080042e0

08002610 <malloc>:
 8002610:	b510      	push	{r4, lr}
 8002612:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <malloc+0x10>)
 8002614:	0001      	movs	r1, r0
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	f000 f826 	bl	8002668 <_malloc_r>
 800261c:	bd10      	pop	{r4, pc}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	2000001c 	.word	0x2000001c

08002624 <sbrk_aligned>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	4e0f      	ldr	r6, [pc, #60]	@ (8002664 <sbrk_aligned+0x40>)
 8002628:	000d      	movs	r5, r1
 800262a:	6831      	ldr	r1, [r6, #0]
 800262c:	0004      	movs	r4, r0
 800262e:	2900      	cmp	r1, #0
 8002630:	d102      	bne.n	8002638 <sbrk_aligned+0x14>
 8002632:	f000 fbd5 	bl	8002de0 <_sbrk_r>
 8002636:	6030      	str	r0, [r6, #0]
 8002638:	0029      	movs	r1, r5
 800263a:	0020      	movs	r0, r4
 800263c:	f000 fbd0 	bl	8002de0 <_sbrk_r>
 8002640:	1c43      	adds	r3, r0, #1
 8002642:	d103      	bne.n	800264c <sbrk_aligned+0x28>
 8002644:	2501      	movs	r5, #1
 8002646:	426d      	negs	r5, r5
 8002648:	0028      	movs	r0, r5
 800264a:	bd70      	pop	{r4, r5, r6, pc}
 800264c:	2303      	movs	r3, #3
 800264e:	1cc5      	adds	r5, r0, #3
 8002650:	439d      	bics	r5, r3
 8002652:	42a8      	cmp	r0, r5
 8002654:	d0f8      	beq.n	8002648 <sbrk_aligned+0x24>
 8002656:	1a29      	subs	r1, r5, r0
 8002658:	0020      	movs	r0, r4
 800265a:	f000 fbc1 	bl	8002de0 <_sbrk_r>
 800265e:	3001      	adds	r0, #1
 8002660:	d1f2      	bne.n	8002648 <sbrk_aligned+0x24>
 8002662:	e7ef      	b.n	8002644 <sbrk_aligned+0x20>
 8002664:	20000790 	.word	0x20000790

08002668 <_malloc_r>:
 8002668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800266a:	2203      	movs	r2, #3
 800266c:	1ccb      	adds	r3, r1, #3
 800266e:	4393      	bics	r3, r2
 8002670:	3308      	adds	r3, #8
 8002672:	0005      	movs	r5, r0
 8002674:	001f      	movs	r7, r3
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d234      	bcs.n	80026e4 <_malloc_r+0x7c>
 800267a:	270c      	movs	r7, #12
 800267c:	42b9      	cmp	r1, r7
 800267e:	d833      	bhi.n	80026e8 <_malloc_r+0x80>
 8002680:	0028      	movs	r0, r5
 8002682:	f000 f871 	bl	8002768 <__malloc_lock>
 8002686:	4e37      	ldr	r6, [pc, #220]	@ (8002764 <_malloc_r+0xfc>)
 8002688:	6833      	ldr	r3, [r6, #0]
 800268a:	001c      	movs	r4, r3
 800268c:	2c00      	cmp	r4, #0
 800268e:	d12f      	bne.n	80026f0 <_malloc_r+0x88>
 8002690:	0039      	movs	r1, r7
 8002692:	0028      	movs	r0, r5
 8002694:	f7ff ffc6 	bl	8002624 <sbrk_aligned>
 8002698:	0004      	movs	r4, r0
 800269a:	1c43      	adds	r3, r0, #1
 800269c:	d15f      	bne.n	800275e <_malloc_r+0xf6>
 800269e:	6834      	ldr	r4, [r6, #0]
 80026a0:	9400      	str	r4, [sp, #0]
 80026a2:	9b00      	ldr	r3, [sp, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d14a      	bne.n	800273e <_malloc_r+0xd6>
 80026a8:	2c00      	cmp	r4, #0
 80026aa:	d052      	beq.n	8002752 <_malloc_r+0xea>
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	0028      	movs	r0, r5
 80026b0:	18e3      	adds	r3, r4, r3
 80026b2:	9900      	ldr	r1, [sp, #0]
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	f000 fb93 	bl	8002de0 <_sbrk_r>
 80026ba:	9b01      	ldr	r3, [sp, #4]
 80026bc:	4283      	cmp	r3, r0
 80026be:	d148      	bne.n	8002752 <_malloc_r+0xea>
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	0028      	movs	r0, r5
 80026c4:	1aff      	subs	r7, r7, r3
 80026c6:	0039      	movs	r1, r7
 80026c8:	f7ff ffac 	bl	8002624 <sbrk_aligned>
 80026cc:	3001      	adds	r0, #1
 80026ce:	d040      	beq.n	8002752 <_malloc_r+0xea>
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	19db      	adds	r3, r3, r7
 80026d4:	6023      	str	r3, [r4, #0]
 80026d6:	6833      	ldr	r3, [r6, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d133      	bne.n	8002746 <_malloc_r+0xde>
 80026de:	9b00      	ldr	r3, [sp, #0]
 80026e0:	6033      	str	r3, [r6, #0]
 80026e2:	e019      	b.n	8002718 <_malloc_r+0xb0>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	dac9      	bge.n	800267c <_malloc_r+0x14>
 80026e8:	230c      	movs	r3, #12
 80026ea:	602b      	str	r3, [r5, #0]
 80026ec:	2000      	movs	r0, #0
 80026ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026f0:	6821      	ldr	r1, [r4, #0]
 80026f2:	1bc9      	subs	r1, r1, r7
 80026f4:	d420      	bmi.n	8002738 <_malloc_r+0xd0>
 80026f6:	290b      	cmp	r1, #11
 80026f8:	d90a      	bls.n	8002710 <_malloc_r+0xa8>
 80026fa:	19e2      	adds	r2, r4, r7
 80026fc:	6027      	str	r7, [r4, #0]
 80026fe:	42a3      	cmp	r3, r4
 8002700:	d104      	bne.n	800270c <_malloc_r+0xa4>
 8002702:	6032      	str	r2, [r6, #0]
 8002704:	6863      	ldr	r3, [r4, #4]
 8002706:	6011      	str	r1, [r2, #0]
 8002708:	6053      	str	r3, [r2, #4]
 800270a:	e005      	b.n	8002718 <_malloc_r+0xb0>
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	e7f9      	b.n	8002704 <_malloc_r+0x9c>
 8002710:	6862      	ldr	r2, [r4, #4]
 8002712:	42a3      	cmp	r3, r4
 8002714:	d10e      	bne.n	8002734 <_malloc_r+0xcc>
 8002716:	6032      	str	r2, [r6, #0]
 8002718:	0028      	movs	r0, r5
 800271a:	f000 f82d 	bl	8002778 <__malloc_unlock>
 800271e:	0020      	movs	r0, r4
 8002720:	2207      	movs	r2, #7
 8002722:	300b      	adds	r0, #11
 8002724:	1d23      	adds	r3, r4, #4
 8002726:	4390      	bics	r0, r2
 8002728:	1ac2      	subs	r2, r0, r3
 800272a:	4298      	cmp	r0, r3
 800272c:	d0df      	beq.n	80026ee <_malloc_r+0x86>
 800272e:	1a1b      	subs	r3, r3, r0
 8002730:	50a3      	str	r3, [r4, r2]
 8002732:	e7dc      	b.n	80026ee <_malloc_r+0x86>
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	e7ef      	b.n	8002718 <_malloc_r+0xb0>
 8002738:	0023      	movs	r3, r4
 800273a:	6864      	ldr	r4, [r4, #4]
 800273c:	e7a6      	b.n	800268c <_malloc_r+0x24>
 800273e:	9c00      	ldr	r4, [sp, #0]
 8002740:	6863      	ldr	r3, [r4, #4]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	e7ad      	b.n	80026a2 <_malloc_r+0x3a>
 8002746:	001a      	movs	r2, r3
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	42a3      	cmp	r3, r4
 800274c:	d1fb      	bne.n	8002746 <_malloc_r+0xde>
 800274e:	2300      	movs	r3, #0
 8002750:	e7da      	b.n	8002708 <_malloc_r+0xa0>
 8002752:	230c      	movs	r3, #12
 8002754:	0028      	movs	r0, r5
 8002756:	602b      	str	r3, [r5, #0]
 8002758:	f000 f80e 	bl	8002778 <__malloc_unlock>
 800275c:	e7c6      	b.n	80026ec <_malloc_r+0x84>
 800275e:	6007      	str	r7, [r0, #0]
 8002760:	e7da      	b.n	8002718 <_malloc_r+0xb0>
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	20000794 	.word	0x20000794

08002768 <__malloc_lock>:
 8002768:	b510      	push	{r4, lr}
 800276a:	4802      	ldr	r0, [pc, #8]	@ (8002774 <__malloc_lock+0xc>)
 800276c:	f000 fb89 	bl	8002e82 <__retarget_lock_acquire_recursive>
 8002770:	bd10      	pop	{r4, pc}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	200008d8 	.word	0x200008d8

08002778 <__malloc_unlock>:
 8002778:	b510      	push	{r4, lr}
 800277a:	4802      	ldr	r0, [pc, #8]	@ (8002784 <__malloc_unlock+0xc>)
 800277c:	f000 fb82 	bl	8002e84 <__retarget_lock_release_recursive>
 8002780:	bd10      	pop	{r4, pc}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	200008d8 	.word	0x200008d8

08002788 <std>:
 8002788:	2300      	movs	r3, #0
 800278a:	b510      	push	{r4, lr}
 800278c:	0004      	movs	r4, r0
 800278e:	6003      	str	r3, [r0, #0]
 8002790:	6043      	str	r3, [r0, #4]
 8002792:	6083      	str	r3, [r0, #8]
 8002794:	8181      	strh	r1, [r0, #12]
 8002796:	6643      	str	r3, [r0, #100]	@ 0x64
 8002798:	81c2      	strh	r2, [r0, #14]
 800279a:	6103      	str	r3, [r0, #16]
 800279c:	6143      	str	r3, [r0, #20]
 800279e:	6183      	str	r3, [r0, #24]
 80027a0:	0019      	movs	r1, r3
 80027a2:	2208      	movs	r2, #8
 80027a4:	305c      	adds	r0, #92	@ 0x5c
 80027a6:	f000 fad8 	bl	8002d5a <memset>
 80027aa:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <std+0x50>)
 80027ac:	6224      	str	r4, [r4, #32]
 80027ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80027b0:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <std+0x54>)
 80027b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80027b4:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <std+0x58>)
 80027b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80027b8:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <std+0x5c>)
 80027ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <std+0x60>)
 80027be:	429c      	cmp	r4, r3
 80027c0:	d005      	beq.n	80027ce <std+0x46>
 80027c2:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <std+0x64>)
 80027c4:	429c      	cmp	r4, r3
 80027c6:	d002      	beq.n	80027ce <std+0x46>
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <std+0x68>)
 80027ca:	429c      	cmp	r4, r3
 80027cc:	d103      	bne.n	80027d6 <std+0x4e>
 80027ce:	0020      	movs	r0, r4
 80027d0:	3058      	adds	r0, #88	@ 0x58
 80027d2:	f000 fb55 	bl	8002e80 <__retarget_lock_init_recursive>
 80027d6:	bd10      	pop	{r4, pc}
 80027d8:	08002b5d 	.word	0x08002b5d
 80027dc:	08002b85 	.word	0x08002b85
 80027e0:	08002bbd 	.word	0x08002bbd
 80027e4:	08002be9 	.word	0x08002be9
 80027e8:	20000798 	.word	0x20000798
 80027ec:	20000800 	.word	0x20000800
 80027f0:	20000868 	.word	0x20000868

080027f4 <stdio_exit_handler>:
 80027f4:	b510      	push	{r4, lr}
 80027f6:	4a03      	ldr	r2, [pc, #12]	@ (8002804 <stdio_exit_handler+0x10>)
 80027f8:	4903      	ldr	r1, [pc, #12]	@ (8002808 <stdio_exit_handler+0x14>)
 80027fa:	4804      	ldr	r0, [pc, #16]	@ (800280c <stdio_exit_handler+0x18>)
 80027fc:	f000 f86c 	bl	80028d8 <_fwalk_sglue>
 8002800:	bd10      	pop	{r4, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	20000010 	.word	0x20000010
 8002808:	080035bd 	.word	0x080035bd
 800280c:	20000020 	.word	0x20000020

08002810 <cleanup_stdio>:
 8002810:	6841      	ldr	r1, [r0, #4]
 8002812:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <cleanup_stdio+0x30>)
 8002814:	b510      	push	{r4, lr}
 8002816:	0004      	movs	r4, r0
 8002818:	4299      	cmp	r1, r3
 800281a:	d001      	beq.n	8002820 <cleanup_stdio+0x10>
 800281c:	f000 fece 	bl	80035bc <_fflush_r>
 8002820:	68a1      	ldr	r1, [r4, #8]
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <cleanup_stdio+0x34>)
 8002824:	4299      	cmp	r1, r3
 8002826:	d002      	beq.n	800282e <cleanup_stdio+0x1e>
 8002828:	0020      	movs	r0, r4
 800282a:	f000 fec7 	bl	80035bc <_fflush_r>
 800282e:	68e1      	ldr	r1, [r4, #12]
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <cleanup_stdio+0x38>)
 8002832:	4299      	cmp	r1, r3
 8002834:	d002      	beq.n	800283c <cleanup_stdio+0x2c>
 8002836:	0020      	movs	r0, r4
 8002838:	f000 fec0 	bl	80035bc <_fflush_r>
 800283c:	bd10      	pop	{r4, pc}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	20000798 	.word	0x20000798
 8002844:	20000800 	.word	0x20000800
 8002848:	20000868 	.word	0x20000868

0800284c <global_stdio_init.part.0>:
 800284c:	b510      	push	{r4, lr}
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <global_stdio_init.part.0+0x28>)
 8002850:	4a09      	ldr	r2, [pc, #36]	@ (8002878 <global_stdio_init.part.0+0x2c>)
 8002852:	2104      	movs	r1, #4
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	4809      	ldr	r0, [pc, #36]	@ (800287c <global_stdio_init.part.0+0x30>)
 8002858:	2200      	movs	r2, #0
 800285a:	f7ff ff95 	bl	8002788 <std>
 800285e:	2201      	movs	r2, #1
 8002860:	2109      	movs	r1, #9
 8002862:	4807      	ldr	r0, [pc, #28]	@ (8002880 <global_stdio_init.part.0+0x34>)
 8002864:	f7ff ff90 	bl	8002788 <std>
 8002868:	2202      	movs	r2, #2
 800286a:	2112      	movs	r1, #18
 800286c:	4805      	ldr	r0, [pc, #20]	@ (8002884 <global_stdio_init.part.0+0x38>)
 800286e:	f7ff ff8b 	bl	8002788 <std>
 8002872:	bd10      	pop	{r4, pc}
 8002874:	200008d0 	.word	0x200008d0
 8002878:	080027f5 	.word	0x080027f5
 800287c:	20000798 	.word	0x20000798
 8002880:	20000800 	.word	0x20000800
 8002884:	20000868 	.word	0x20000868

08002888 <__sfp_lock_acquire>:
 8002888:	b510      	push	{r4, lr}
 800288a:	4802      	ldr	r0, [pc, #8]	@ (8002894 <__sfp_lock_acquire+0xc>)
 800288c:	f000 faf9 	bl	8002e82 <__retarget_lock_acquire_recursive>
 8002890:	bd10      	pop	{r4, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	200008d9 	.word	0x200008d9

08002898 <__sfp_lock_release>:
 8002898:	b510      	push	{r4, lr}
 800289a:	4802      	ldr	r0, [pc, #8]	@ (80028a4 <__sfp_lock_release+0xc>)
 800289c:	f000 faf2 	bl	8002e84 <__retarget_lock_release_recursive>
 80028a0:	bd10      	pop	{r4, pc}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	200008d9 	.word	0x200008d9

080028a8 <__sinit>:
 80028a8:	b510      	push	{r4, lr}
 80028aa:	0004      	movs	r4, r0
 80028ac:	f7ff ffec 	bl	8002888 <__sfp_lock_acquire>
 80028b0:	6a23      	ldr	r3, [r4, #32]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <__sinit+0x14>
 80028b6:	f7ff ffef 	bl	8002898 <__sfp_lock_release>
 80028ba:	bd10      	pop	{r4, pc}
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <__sinit+0x28>)
 80028be:	6223      	str	r3, [r4, #32]
 80028c0:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <__sinit+0x2c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f6      	bne.n	80028b6 <__sinit+0xe>
 80028c8:	f7ff ffc0 	bl	800284c <global_stdio_init.part.0>
 80028cc:	e7f3      	b.n	80028b6 <__sinit+0xe>
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	08002811 	.word	0x08002811
 80028d4:	200008d0 	.word	0x200008d0

080028d8 <_fwalk_sglue>:
 80028d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028da:	0014      	movs	r4, r2
 80028dc:	2600      	movs	r6, #0
 80028de:	9000      	str	r0, [sp, #0]
 80028e0:	9101      	str	r1, [sp, #4]
 80028e2:	68a5      	ldr	r5, [r4, #8]
 80028e4:	6867      	ldr	r7, [r4, #4]
 80028e6:	3f01      	subs	r7, #1
 80028e8:	d504      	bpl.n	80028f4 <_fwalk_sglue+0x1c>
 80028ea:	6824      	ldr	r4, [r4, #0]
 80028ec:	2c00      	cmp	r4, #0
 80028ee:	d1f8      	bne.n	80028e2 <_fwalk_sglue+0xa>
 80028f0:	0030      	movs	r0, r6
 80028f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028f4:	89ab      	ldrh	r3, [r5, #12]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d908      	bls.n	800290c <_fwalk_sglue+0x34>
 80028fa:	220e      	movs	r2, #14
 80028fc:	5eab      	ldrsh	r3, [r5, r2]
 80028fe:	3301      	adds	r3, #1
 8002900:	d004      	beq.n	800290c <_fwalk_sglue+0x34>
 8002902:	0029      	movs	r1, r5
 8002904:	9800      	ldr	r0, [sp, #0]
 8002906:	9b01      	ldr	r3, [sp, #4]
 8002908:	4798      	blx	r3
 800290a:	4306      	orrs	r6, r0
 800290c:	3568      	adds	r5, #104	@ 0x68
 800290e:	e7ea      	b.n	80028e6 <_fwalk_sglue+0xe>

08002910 <iprintf>:
 8002910:	b40f      	push	{r0, r1, r2, r3}
 8002912:	b507      	push	{r0, r1, r2, lr}
 8002914:	4905      	ldr	r1, [pc, #20]	@ (800292c <iprintf+0x1c>)
 8002916:	ab04      	add	r3, sp, #16
 8002918:	6808      	ldr	r0, [r1, #0]
 800291a:	cb04      	ldmia	r3!, {r2}
 800291c:	6881      	ldr	r1, [r0, #8]
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	f000 fb2c 	bl	8002f7c <_vfiprintf_r>
 8002924:	b003      	add	sp, #12
 8002926:	bc08      	pop	{r3}
 8002928:	b004      	add	sp, #16
 800292a:	4718      	bx	r3
 800292c:	2000001c 	.word	0x2000001c

08002930 <_puts_r>:
 8002930:	6a03      	ldr	r3, [r0, #32]
 8002932:	b570      	push	{r4, r5, r6, lr}
 8002934:	0005      	movs	r5, r0
 8002936:	000e      	movs	r6, r1
 8002938:	6884      	ldr	r4, [r0, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <_puts_r+0x12>
 800293e:	f7ff ffb3 	bl	80028a8 <__sinit>
 8002942:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002944:	07db      	lsls	r3, r3, #31
 8002946:	d405      	bmi.n	8002954 <_puts_r+0x24>
 8002948:	89a3      	ldrh	r3, [r4, #12]
 800294a:	059b      	lsls	r3, r3, #22
 800294c:	d402      	bmi.n	8002954 <_puts_r+0x24>
 800294e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002950:	f000 fa97 	bl	8002e82 <__retarget_lock_acquire_recursive>
 8002954:	89a3      	ldrh	r3, [r4, #12]
 8002956:	071b      	lsls	r3, r3, #28
 8002958:	d502      	bpl.n	8002960 <_puts_r+0x30>
 800295a:	6923      	ldr	r3, [r4, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11f      	bne.n	80029a0 <_puts_r+0x70>
 8002960:	0021      	movs	r1, r4
 8002962:	0028      	movs	r0, r5
 8002964:	f000 f988 	bl	8002c78 <__swsetup_r>
 8002968:	2800      	cmp	r0, #0
 800296a:	d019      	beq.n	80029a0 <_puts_r+0x70>
 800296c:	2501      	movs	r5, #1
 800296e:	426d      	negs	r5, r5
 8002970:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002972:	07db      	lsls	r3, r3, #31
 8002974:	d405      	bmi.n	8002982 <_puts_r+0x52>
 8002976:	89a3      	ldrh	r3, [r4, #12]
 8002978:	059b      	lsls	r3, r3, #22
 800297a:	d402      	bmi.n	8002982 <_puts_r+0x52>
 800297c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800297e:	f000 fa81 	bl	8002e84 <__retarget_lock_release_recursive>
 8002982:	0028      	movs	r0, r5
 8002984:	bd70      	pop	{r4, r5, r6, pc}
 8002986:	3601      	adds	r6, #1
 8002988:	60a3      	str	r3, [r4, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	da04      	bge.n	8002998 <_puts_r+0x68>
 800298e:	69a2      	ldr	r2, [r4, #24]
 8002990:	429a      	cmp	r2, r3
 8002992:	dc16      	bgt.n	80029c2 <_puts_r+0x92>
 8002994:	290a      	cmp	r1, #10
 8002996:	d014      	beq.n	80029c2 <_puts_r+0x92>
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	6022      	str	r2, [r4, #0]
 800299e:	7019      	strb	r1, [r3, #0]
 80029a0:	68a3      	ldr	r3, [r4, #8]
 80029a2:	7831      	ldrb	r1, [r6, #0]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	2900      	cmp	r1, #0
 80029a8:	d1ed      	bne.n	8002986 <_puts_r+0x56>
 80029aa:	60a3      	str	r3, [r4, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	da0f      	bge.n	80029d0 <_puts_r+0xa0>
 80029b0:	0022      	movs	r2, r4
 80029b2:	0028      	movs	r0, r5
 80029b4:	310a      	adds	r1, #10
 80029b6:	f000 f91d 	bl	8002bf4 <__swbuf_r>
 80029ba:	3001      	adds	r0, #1
 80029bc:	d0d6      	beq.n	800296c <_puts_r+0x3c>
 80029be:	250a      	movs	r5, #10
 80029c0:	e7d6      	b.n	8002970 <_puts_r+0x40>
 80029c2:	0022      	movs	r2, r4
 80029c4:	0028      	movs	r0, r5
 80029c6:	f000 f915 	bl	8002bf4 <__swbuf_r>
 80029ca:	3001      	adds	r0, #1
 80029cc:	d1e8      	bne.n	80029a0 <_puts_r+0x70>
 80029ce:	e7cd      	b.n	800296c <_puts_r+0x3c>
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	6022      	str	r2, [r4, #0]
 80029d6:	220a      	movs	r2, #10
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e7f0      	b.n	80029be <_puts_r+0x8e>

080029dc <puts>:
 80029dc:	b510      	push	{r4, lr}
 80029de:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <puts+0x10>)
 80029e0:	0001      	movs	r1, r0
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	f7ff ffa4 	bl	8002930 <_puts_r>
 80029e8:	bd10      	pop	{r4, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	2000001c 	.word	0x2000001c

080029f0 <setvbuf>:
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	001d      	movs	r5, r3
 80029f4:	4b57      	ldr	r3, [pc, #348]	@ (8002b54 <setvbuf+0x164>)
 80029f6:	b085      	sub	sp, #20
 80029f8:	681e      	ldr	r6, [r3, #0]
 80029fa:	0004      	movs	r4, r0
 80029fc:	000f      	movs	r7, r1
 80029fe:	9200      	str	r2, [sp, #0]
 8002a00:	2e00      	cmp	r6, #0
 8002a02:	d005      	beq.n	8002a10 <setvbuf+0x20>
 8002a04:	6a33      	ldr	r3, [r6, #32]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <setvbuf+0x20>
 8002a0a:	0030      	movs	r0, r6
 8002a0c:	f7ff ff4c 	bl	80028a8 <__sinit>
 8002a10:	9b00      	ldr	r3, [sp, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d005      	beq.n	8002a22 <setvbuf+0x32>
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d900      	bls.n	8002a1c <setvbuf+0x2c>
 8002a1a:	e097      	b.n	8002b4c <setvbuf+0x15c>
 8002a1c:	2d00      	cmp	r5, #0
 8002a1e:	da00      	bge.n	8002a22 <setvbuf+0x32>
 8002a20:	e094      	b.n	8002b4c <setvbuf+0x15c>
 8002a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a24:	07db      	lsls	r3, r3, #31
 8002a26:	d405      	bmi.n	8002a34 <setvbuf+0x44>
 8002a28:	89a3      	ldrh	r3, [r4, #12]
 8002a2a:	059b      	lsls	r3, r3, #22
 8002a2c:	d402      	bmi.n	8002a34 <setvbuf+0x44>
 8002a2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a30:	f000 fa27 	bl	8002e82 <__retarget_lock_acquire_recursive>
 8002a34:	0021      	movs	r1, r4
 8002a36:	0030      	movs	r0, r6
 8002a38:	f000 fdc0 	bl	80035bc <_fflush_r>
 8002a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a3e:	2900      	cmp	r1, #0
 8002a40:	d008      	beq.n	8002a54 <setvbuf+0x64>
 8002a42:	0023      	movs	r3, r4
 8002a44:	3344      	adds	r3, #68	@ 0x44
 8002a46:	4299      	cmp	r1, r3
 8002a48:	d002      	beq.n	8002a50 <setvbuf+0x60>
 8002a4a:	0030      	movs	r0, r6
 8002a4c:	f000 fa24 	bl	8002e98 <_free_r>
 8002a50:	2300      	movs	r3, #0
 8002a52:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a54:	2300      	movs	r3, #0
 8002a56:	61a3      	str	r3, [r4, #24]
 8002a58:	6063      	str	r3, [r4, #4]
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	d503      	bpl.n	8002a68 <setvbuf+0x78>
 8002a60:	0030      	movs	r0, r6
 8002a62:	6921      	ldr	r1, [r4, #16]
 8002a64:	f000 fa18 	bl	8002e98 <_free_r>
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b58 <setvbuf+0x168>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	81a3      	strh	r3, [r4, #12]
 8002a70:	9b00      	ldr	r3, [sp, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d060      	beq.n	8002b38 <setvbuf+0x148>
 8002a76:	ab03      	add	r3, sp, #12
 8002a78:	0021      	movs	r1, r4
 8002a7a:	0030      	movs	r0, r6
 8002a7c:	aa02      	add	r2, sp, #8
 8002a7e:	f000 fdc9 	bl	8003614 <__swhatbuf_r>
 8002a82:	89a3      	ldrh	r3, [r4, #12]
 8002a84:	4303      	orrs	r3, r0
 8002a86:	81a3      	strh	r3, [r4, #12]
 8002a88:	2d00      	cmp	r5, #0
 8002a8a:	d124      	bne.n	8002ad6 <setvbuf+0xe6>
 8002a8c:	9d02      	ldr	r5, [sp, #8]
 8002a8e:	0028      	movs	r0, r5
 8002a90:	f7ff fdbe 	bl	8002610 <malloc>
 8002a94:	9501      	str	r5, [sp, #4]
 8002a96:	1e07      	subs	r7, r0, #0
 8002a98:	d148      	bne.n	8002b2c <setvbuf+0x13c>
 8002a9a:	9b02      	ldr	r3, [sp, #8]
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	42ab      	cmp	r3, r5
 8002aa0:	d13f      	bne.n	8002b22 <setvbuf+0x132>
 8002aa2:	2501      	movs	r5, #1
 8002aa4:	426d      	negs	r5, r5
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	5ea3      	ldrsh	r3, [r4, r2]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	431a      	orrs	r2, r3
 8002aae:	81a2      	strh	r2, [r4, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60a2      	str	r2, [r4, #8]
 8002ab4:	0022      	movs	r2, r4
 8002ab6:	3247      	adds	r2, #71	@ 0x47
 8002ab8:	6022      	str	r2, [r4, #0]
 8002aba:	6122      	str	r2, [r4, #16]
 8002abc:	2201      	movs	r2, #1
 8002abe:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002ac0:	6162      	str	r2, [r4, #20]
 8002ac2:	4211      	tst	r1, r2
 8002ac4:	d104      	bne.n	8002ad0 <setvbuf+0xe0>
 8002ac6:	059b      	lsls	r3, r3, #22
 8002ac8:	d402      	bmi.n	8002ad0 <setvbuf+0xe0>
 8002aca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002acc:	f000 f9da 	bl	8002e84 <__retarget_lock_release_recursive>
 8002ad0:	0028      	movs	r0, r5
 8002ad2:	b005      	add	sp, #20
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	2f00      	cmp	r7, #0
 8002ad8:	d0d9      	beq.n	8002a8e <setvbuf+0x9e>
 8002ada:	6a33      	ldr	r3, [r6, #32]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <setvbuf+0xf6>
 8002ae0:	0030      	movs	r0, r6
 8002ae2:	f7ff fee1 	bl	80028a8 <__sinit>
 8002ae6:	9b00      	ldr	r3, [sp, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d103      	bne.n	8002af4 <setvbuf+0x104>
 8002aec:	89a3      	ldrh	r3, [r4, #12]
 8002aee:	9a00      	ldr	r2, [sp, #0]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	81a2      	strh	r2, [r4, #12]
 8002af4:	220c      	movs	r2, #12
 8002af6:	5ea3      	ldrsh	r3, [r4, r2]
 8002af8:	2208      	movs	r2, #8
 8002afa:	0019      	movs	r1, r3
 8002afc:	6027      	str	r7, [r4, #0]
 8002afe:	6127      	str	r7, [r4, #16]
 8002b00:	6165      	str	r5, [r4, #20]
 8002b02:	4011      	ands	r1, r2
 8002b04:	4213      	tst	r3, r2
 8002b06:	d01b      	beq.n	8002b40 <setvbuf+0x150>
 8002b08:	07da      	lsls	r2, r3, #31
 8002b0a:	d517      	bpl.n	8002b3c <setvbuf+0x14c>
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	426d      	negs	r5, r5
 8002b10:	60a2      	str	r2, [r4, #8]
 8002b12:	61a5      	str	r5, [r4, #24]
 8002b14:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b16:	07d2      	lsls	r2, r2, #31
 8002b18:	d401      	bmi.n	8002b1e <setvbuf+0x12e>
 8002b1a:	059b      	lsls	r3, r3, #22
 8002b1c:	d512      	bpl.n	8002b44 <setvbuf+0x154>
 8002b1e:	2500      	movs	r5, #0
 8002b20:	e7d6      	b.n	8002ad0 <setvbuf+0xe0>
 8002b22:	9801      	ldr	r0, [sp, #4]
 8002b24:	f7ff fd74 	bl	8002610 <malloc>
 8002b28:	1e07      	subs	r7, r0, #0
 8002b2a:	d0ba      	beq.n	8002aa2 <setvbuf+0xb2>
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	89a2      	ldrh	r2, [r4, #12]
 8002b30:	9d01      	ldr	r5, [sp, #4]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	81a3      	strh	r3, [r4, #12]
 8002b36:	e7d0      	b.n	8002ada <setvbuf+0xea>
 8002b38:	2500      	movs	r5, #0
 8002b3a:	e7b4      	b.n	8002aa6 <setvbuf+0xb6>
 8002b3c:	60a5      	str	r5, [r4, #8]
 8002b3e:	e7e9      	b.n	8002b14 <setvbuf+0x124>
 8002b40:	60a1      	str	r1, [r4, #8]
 8002b42:	e7e7      	b.n	8002b14 <setvbuf+0x124>
 8002b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b46:	f000 f99d 	bl	8002e84 <__retarget_lock_release_recursive>
 8002b4a:	e7e8      	b.n	8002b1e <setvbuf+0x12e>
 8002b4c:	2501      	movs	r5, #1
 8002b4e:	426d      	negs	r5, r5
 8002b50:	e7be      	b.n	8002ad0 <setvbuf+0xe0>
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	2000001c 	.word	0x2000001c
 8002b58:	fffff35c 	.word	0xfffff35c

08002b5c <__sread>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	000c      	movs	r4, r1
 8002b60:	250e      	movs	r5, #14
 8002b62:	5f49      	ldrsh	r1, [r1, r5]
 8002b64:	f000 f928 	bl	8002db8 <_read_r>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	db03      	blt.n	8002b74 <__sread+0x18>
 8002b6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b6e:	181b      	adds	r3, r3, r0
 8002b70:	6563      	str	r3, [r4, #84]	@ 0x54
 8002b72:	bd70      	pop	{r4, r5, r6, pc}
 8002b74:	89a3      	ldrh	r3, [r4, #12]
 8002b76:	4a02      	ldr	r2, [pc, #8]	@ (8002b80 <__sread+0x24>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	81a3      	strh	r3, [r4, #12]
 8002b7c:	e7f9      	b.n	8002b72 <__sread+0x16>
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	ffffefff 	.word	0xffffefff

08002b84 <__swrite>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	001f      	movs	r7, r3
 8002b88:	898b      	ldrh	r3, [r1, #12]
 8002b8a:	0005      	movs	r5, r0
 8002b8c:	000c      	movs	r4, r1
 8002b8e:	0016      	movs	r6, r2
 8002b90:	05db      	lsls	r3, r3, #23
 8002b92:	d505      	bpl.n	8002ba0 <__swrite+0x1c>
 8002b94:	230e      	movs	r3, #14
 8002b96:	5ec9      	ldrsh	r1, [r1, r3]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f000 f8f8 	bl	8002d90 <_lseek_r>
 8002ba0:	89a3      	ldrh	r3, [r4, #12]
 8002ba2:	4a05      	ldr	r2, [pc, #20]	@ (8002bb8 <__swrite+0x34>)
 8002ba4:	0028      	movs	r0, r5
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	81a3      	strh	r3, [r4, #12]
 8002baa:	0032      	movs	r2, r6
 8002bac:	230e      	movs	r3, #14
 8002bae:	5ee1      	ldrsh	r1, [r4, r3]
 8002bb0:	003b      	movs	r3, r7
 8002bb2:	f000 f927 	bl	8002e04 <_write_r>
 8002bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb8:	ffffefff 	.word	0xffffefff

08002bbc <__sseek>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	000c      	movs	r4, r1
 8002bc0:	250e      	movs	r5, #14
 8002bc2:	5f49      	ldrsh	r1, [r1, r5]
 8002bc4:	f000 f8e4 	bl	8002d90 <_lseek_r>
 8002bc8:	89a3      	ldrh	r3, [r4, #12]
 8002bca:	1c42      	adds	r2, r0, #1
 8002bcc:	d103      	bne.n	8002bd6 <__sseek+0x1a>
 8002bce:	4a05      	ldr	r2, [pc, #20]	@ (8002be4 <__sseek+0x28>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	81a3      	strh	r3, [r4, #12]
 8002bd4:	bd70      	pop	{r4, r5, r6, pc}
 8002bd6:	2280      	movs	r2, #128	@ 0x80
 8002bd8:	0152      	lsls	r2, r2, #5
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	81a3      	strh	r3, [r4, #12]
 8002bde:	6560      	str	r0, [r4, #84]	@ 0x54
 8002be0:	e7f8      	b.n	8002bd4 <__sseek+0x18>
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	ffffefff 	.word	0xffffefff

08002be8 <__sclose>:
 8002be8:	b510      	push	{r4, lr}
 8002bea:	230e      	movs	r3, #14
 8002bec:	5ec9      	ldrsh	r1, [r1, r3]
 8002bee:	f000 f8bd 	bl	8002d6c <_close_r>
 8002bf2:	bd10      	pop	{r4, pc}

08002bf4 <__swbuf_r>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	0006      	movs	r6, r0
 8002bf8:	000d      	movs	r5, r1
 8002bfa:	0014      	movs	r4, r2
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d004      	beq.n	8002c0a <__swbuf_r+0x16>
 8002c00:	6a03      	ldr	r3, [r0, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <__swbuf_r+0x16>
 8002c06:	f7ff fe4f 	bl	80028a8 <__sinit>
 8002c0a:	69a3      	ldr	r3, [r4, #24]
 8002c0c:	60a3      	str	r3, [r4, #8]
 8002c0e:	89a3      	ldrh	r3, [r4, #12]
 8002c10:	071b      	lsls	r3, r3, #28
 8002c12:	d502      	bpl.n	8002c1a <__swbuf_r+0x26>
 8002c14:	6923      	ldr	r3, [r4, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <__swbuf_r+0x3a>
 8002c1a:	0021      	movs	r1, r4
 8002c1c:	0030      	movs	r0, r6
 8002c1e:	f000 f82b 	bl	8002c78 <__swsetup_r>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d003      	beq.n	8002c2e <__swbuf_r+0x3a>
 8002c26:	2501      	movs	r5, #1
 8002c28:	426d      	negs	r5, r5
 8002c2a:	0028      	movs	r0, r5
 8002c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c2e:	6923      	ldr	r3, [r4, #16]
 8002c30:	6820      	ldr	r0, [r4, #0]
 8002c32:	b2ef      	uxtb	r7, r5
 8002c34:	1ac0      	subs	r0, r0, r3
 8002c36:	6963      	ldr	r3, [r4, #20]
 8002c38:	b2ed      	uxtb	r5, r5
 8002c3a:	4283      	cmp	r3, r0
 8002c3c:	dc05      	bgt.n	8002c4a <__swbuf_r+0x56>
 8002c3e:	0021      	movs	r1, r4
 8002c40:	0030      	movs	r0, r6
 8002c42:	f000 fcbb 	bl	80035bc <_fflush_r>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d1ed      	bne.n	8002c26 <__swbuf_r+0x32>
 8002c4a:	68a3      	ldr	r3, [r4, #8]
 8002c4c:	3001      	adds	r0, #1
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	60a3      	str	r3, [r4, #8]
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	6022      	str	r2, [r4, #0]
 8002c58:	701f      	strb	r7, [r3, #0]
 8002c5a:	6963      	ldr	r3, [r4, #20]
 8002c5c:	4283      	cmp	r3, r0
 8002c5e:	d004      	beq.n	8002c6a <__swbuf_r+0x76>
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	07db      	lsls	r3, r3, #31
 8002c64:	d5e1      	bpl.n	8002c2a <__swbuf_r+0x36>
 8002c66:	2d0a      	cmp	r5, #10
 8002c68:	d1df      	bne.n	8002c2a <__swbuf_r+0x36>
 8002c6a:	0021      	movs	r1, r4
 8002c6c:	0030      	movs	r0, r6
 8002c6e:	f000 fca5 	bl	80035bc <_fflush_r>
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d0d9      	beq.n	8002c2a <__swbuf_r+0x36>
 8002c76:	e7d6      	b.n	8002c26 <__swbuf_r+0x32>

08002c78 <__swsetup_r>:
 8002c78:	4b2d      	ldr	r3, [pc, #180]	@ (8002d30 <__swsetup_r+0xb8>)
 8002c7a:	b570      	push	{r4, r5, r6, lr}
 8002c7c:	0005      	movs	r5, r0
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	000c      	movs	r4, r1
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d004      	beq.n	8002c90 <__swsetup_r+0x18>
 8002c86:	6a03      	ldr	r3, [r0, #32]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <__swsetup_r+0x18>
 8002c8c:	f7ff fe0c 	bl	80028a8 <__sinit>
 8002c90:	230c      	movs	r3, #12
 8002c92:	5ee2      	ldrsh	r2, [r4, r3]
 8002c94:	0713      	lsls	r3, r2, #28
 8002c96:	d423      	bmi.n	8002ce0 <__swsetup_r+0x68>
 8002c98:	06d3      	lsls	r3, r2, #27
 8002c9a:	d407      	bmi.n	8002cac <__swsetup_r+0x34>
 8002c9c:	2309      	movs	r3, #9
 8002c9e:	602b      	str	r3, [r5, #0]
 8002ca0:	2340      	movs	r3, #64	@ 0x40
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	81a3      	strh	r3, [r4, #12]
 8002ca8:	4240      	negs	r0, r0
 8002caa:	e03a      	b.n	8002d22 <__swsetup_r+0xaa>
 8002cac:	0752      	lsls	r2, r2, #29
 8002cae:	d513      	bpl.n	8002cd8 <__swsetup_r+0x60>
 8002cb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002cb2:	2900      	cmp	r1, #0
 8002cb4:	d008      	beq.n	8002cc8 <__swsetup_r+0x50>
 8002cb6:	0023      	movs	r3, r4
 8002cb8:	3344      	adds	r3, #68	@ 0x44
 8002cba:	4299      	cmp	r1, r3
 8002cbc:	d002      	beq.n	8002cc4 <__swsetup_r+0x4c>
 8002cbe:	0028      	movs	r0, r5
 8002cc0:	f000 f8ea 	bl	8002e98 <_free_r>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cc8:	2224      	movs	r2, #36	@ 0x24
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	4393      	bics	r3, r2
 8002cce:	81a3      	strh	r3, [r4, #12]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	6063      	str	r3, [r4, #4]
 8002cd4:	6923      	ldr	r3, [r4, #16]
 8002cd6:	6023      	str	r3, [r4, #0]
 8002cd8:	2308      	movs	r3, #8
 8002cda:	89a2      	ldrh	r2, [r4, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	81a3      	strh	r3, [r4, #12]
 8002ce0:	6923      	ldr	r3, [r4, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <__swsetup_r+0x86>
 8002ce6:	21a0      	movs	r1, #160	@ 0xa0
 8002ce8:	2280      	movs	r2, #128	@ 0x80
 8002cea:	89a3      	ldrh	r3, [r4, #12]
 8002cec:	0089      	lsls	r1, r1, #2
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <__swsetup_r+0x86>
 8002cf6:	0021      	movs	r1, r4
 8002cf8:	0028      	movs	r0, r5
 8002cfa:	f000 fcb5 	bl	8003668 <__smakebuf_r>
 8002cfe:	230c      	movs	r3, #12
 8002d00:	5ee2      	ldrsh	r2, [r4, r3]
 8002d02:	2101      	movs	r1, #1
 8002d04:	0013      	movs	r3, r2
 8002d06:	400b      	ands	r3, r1
 8002d08:	420a      	tst	r2, r1
 8002d0a:	d00b      	beq.n	8002d24 <__swsetup_r+0xac>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60a3      	str	r3, [r4, #8]
 8002d10:	6963      	ldr	r3, [r4, #20]
 8002d12:	425b      	negs	r3, r3
 8002d14:	61a3      	str	r3, [r4, #24]
 8002d16:	2000      	movs	r0, #0
 8002d18:	6923      	ldr	r3, [r4, #16]
 8002d1a:	4283      	cmp	r3, r0
 8002d1c:	d101      	bne.n	8002d22 <__swsetup_r+0xaa>
 8002d1e:	0613      	lsls	r3, r2, #24
 8002d20:	d4be      	bmi.n	8002ca0 <__swsetup_r+0x28>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	0791      	lsls	r1, r2, #30
 8002d26:	d400      	bmi.n	8002d2a <__swsetup_r+0xb2>
 8002d28:	6963      	ldr	r3, [r4, #20]
 8002d2a:	60a3      	str	r3, [r4, #8]
 8002d2c:	e7f3      	b.n	8002d16 <__swsetup_r+0x9e>
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	2000001c 	.word	0x2000001c

08002d34 <memmove>:
 8002d34:	b510      	push	{r4, lr}
 8002d36:	4288      	cmp	r0, r1
 8002d38:	d806      	bhi.n	8002d48 <memmove+0x14>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d008      	beq.n	8002d52 <memmove+0x1e>
 8002d40:	5ccc      	ldrb	r4, [r1, r3]
 8002d42:	54c4      	strb	r4, [r0, r3]
 8002d44:	3301      	adds	r3, #1
 8002d46:	e7f9      	b.n	8002d3c <memmove+0x8>
 8002d48:	188b      	adds	r3, r1, r2
 8002d4a:	4298      	cmp	r0, r3
 8002d4c:	d2f5      	bcs.n	8002d3a <memmove+0x6>
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	d200      	bcs.n	8002d54 <memmove+0x20>
 8002d52:	bd10      	pop	{r4, pc}
 8002d54:	5c8b      	ldrb	r3, [r1, r2]
 8002d56:	5483      	strb	r3, [r0, r2]
 8002d58:	e7f9      	b.n	8002d4e <memmove+0x1a>

08002d5a <memset>:
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	1882      	adds	r2, r0, r2
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d100      	bne.n	8002d64 <memset+0xa>
 8002d62:	4770      	bx	lr
 8002d64:	7019      	strb	r1, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	e7f9      	b.n	8002d5e <memset+0x4>
	...

08002d6c <_close_r>:
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	b570      	push	{r4, r5, r6, lr}
 8002d70:	4d06      	ldr	r5, [pc, #24]	@ (8002d8c <_close_r+0x20>)
 8002d72:	0004      	movs	r4, r0
 8002d74:	0008      	movs	r0, r1
 8002d76:	602b      	str	r3, [r5, #0]
 8002d78:	f7fe fadd 	bl	8001336 <_close>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d103      	bne.n	8002d88 <_close_r+0x1c>
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d000      	beq.n	8002d88 <_close_r+0x1c>
 8002d86:	6023      	str	r3, [r4, #0]
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	200008d4 	.word	0x200008d4

08002d90 <_lseek_r>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	0004      	movs	r4, r0
 8002d94:	0008      	movs	r0, r1
 8002d96:	0011      	movs	r1, r2
 8002d98:	001a      	movs	r2, r3
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	4d05      	ldr	r5, [pc, #20]	@ (8002db4 <_lseek_r+0x24>)
 8002d9e:	602b      	str	r3, [r5, #0]
 8002da0:	f7fe faea 	bl	8001378 <_lseek>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d103      	bne.n	8002db0 <_lseek_r+0x20>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d000      	beq.n	8002db0 <_lseek_r+0x20>
 8002dae:	6023      	str	r3, [r4, #0]
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	200008d4 	.word	0x200008d4

08002db8 <_read_r>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	0004      	movs	r4, r0
 8002dbc:	0008      	movs	r0, r1
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4d05      	ldr	r5, [pc, #20]	@ (8002ddc <_read_r+0x24>)
 8002dc6:	602b      	str	r3, [r5, #0]
 8002dc8:	f7fe fa7c 	bl	80012c4 <_read>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	d103      	bne.n	8002dd8 <_read_r+0x20>
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d000      	beq.n	8002dd8 <_read_r+0x20>
 8002dd6:	6023      	str	r3, [r4, #0]
 8002dd8:	bd70      	pop	{r4, r5, r6, pc}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	200008d4 	.word	0x200008d4

08002de0 <_sbrk_r>:
 8002de0:	2300      	movs	r3, #0
 8002de2:	b570      	push	{r4, r5, r6, lr}
 8002de4:	4d06      	ldr	r5, [pc, #24]	@ (8002e00 <_sbrk_r+0x20>)
 8002de6:	0004      	movs	r4, r0
 8002de8:	0008      	movs	r0, r1
 8002dea:	602b      	str	r3, [r5, #0]
 8002dec:	f7fe fad0 	bl	8001390 <_sbrk>
 8002df0:	1c43      	adds	r3, r0, #1
 8002df2:	d103      	bne.n	8002dfc <_sbrk_r+0x1c>
 8002df4:	682b      	ldr	r3, [r5, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d000      	beq.n	8002dfc <_sbrk_r+0x1c>
 8002dfa:	6023      	str	r3, [r4, #0]
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	200008d4 	.word	0x200008d4

08002e04 <_write_r>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	0004      	movs	r4, r0
 8002e08:	0008      	movs	r0, r1
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2300      	movs	r3, #0
 8002e10:	4d05      	ldr	r5, [pc, #20]	@ (8002e28 <_write_r+0x24>)
 8002e12:	602b      	str	r3, [r5, #0]
 8002e14:	f7fe fa73 	bl	80012fe <_write>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d103      	bne.n	8002e24 <_write_r+0x20>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d000      	beq.n	8002e24 <_write_r+0x20>
 8002e22:	6023      	str	r3, [r4, #0]
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	200008d4 	.word	0x200008d4

08002e2c <__errno>:
 8002e2c:	4b01      	ldr	r3, [pc, #4]	@ (8002e34 <__errno+0x8>)
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	4770      	bx	lr
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	2000001c 	.word	0x2000001c

08002e38 <__libc_init_array>:
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	2600      	movs	r6, #0
 8002e3c:	4c0c      	ldr	r4, [pc, #48]	@ (8002e70 <__libc_init_array+0x38>)
 8002e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8002e74 <__libc_init_array+0x3c>)
 8002e40:	1b64      	subs	r4, r4, r5
 8002e42:	10a4      	asrs	r4, r4, #2
 8002e44:	42a6      	cmp	r6, r4
 8002e46:	d109      	bne.n	8002e5c <__libc_init_array+0x24>
 8002e48:	2600      	movs	r6, #0
 8002e4a:	f000 fc7f 	bl	800374c <_init>
 8002e4e:	4c0a      	ldr	r4, [pc, #40]	@ (8002e78 <__libc_init_array+0x40>)
 8002e50:	4d0a      	ldr	r5, [pc, #40]	@ (8002e7c <__libc_init_array+0x44>)
 8002e52:	1b64      	subs	r4, r4, r5
 8002e54:	10a4      	asrs	r4, r4, #2
 8002e56:	42a6      	cmp	r6, r4
 8002e58:	d105      	bne.n	8002e66 <__libc_init_array+0x2e>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	00b3      	lsls	r3, r6, #2
 8002e5e:	58eb      	ldr	r3, [r5, r3]
 8002e60:	4798      	blx	r3
 8002e62:	3601      	adds	r6, #1
 8002e64:	e7ee      	b.n	8002e44 <__libc_init_array+0xc>
 8002e66:	00b3      	lsls	r3, r6, #2
 8002e68:	58eb      	ldr	r3, [r5, r3]
 8002e6a:	4798      	blx	r3
 8002e6c:	3601      	adds	r6, #1
 8002e6e:	e7f2      	b.n	8002e56 <__libc_init_array+0x1e>
 8002e70:	08004324 	.word	0x08004324
 8002e74:	08004324 	.word	0x08004324
 8002e78:	08004328 	.word	0x08004328
 8002e7c:	08004324 	.word	0x08004324

08002e80 <__retarget_lock_init_recursive>:
 8002e80:	4770      	bx	lr

08002e82 <__retarget_lock_acquire_recursive>:
 8002e82:	4770      	bx	lr

08002e84 <__retarget_lock_release_recursive>:
 8002e84:	4770      	bx	lr

08002e86 <memcpy>:
 8002e86:	2300      	movs	r3, #0
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d100      	bne.n	8002e90 <memcpy+0xa>
 8002e8e:	bd10      	pop	{r4, pc}
 8002e90:	5ccc      	ldrb	r4, [r1, r3]
 8002e92:	54c4      	strb	r4, [r0, r3]
 8002e94:	3301      	adds	r3, #1
 8002e96:	e7f8      	b.n	8002e8a <memcpy+0x4>

08002e98 <_free_r>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	0005      	movs	r5, r0
 8002e9c:	1e0c      	subs	r4, r1, #0
 8002e9e:	d010      	beq.n	8002ec2 <_free_r+0x2a>
 8002ea0:	3c04      	subs	r4, #4
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da00      	bge.n	8002eaa <_free_r+0x12>
 8002ea8:	18e4      	adds	r4, r4, r3
 8002eaa:	0028      	movs	r0, r5
 8002eac:	f7ff fc5c 	bl	8002768 <__malloc_lock>
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <_free_r+0x90>)
 8002eb2:	6813      	ldr	r3, [r2, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <_free_r+0x2c>
 8002eb8:	6063      	str	r3, [r4, #4]
 8002eba:	6014      	str	r4, [r2, #0]
 8002ebc:	0028      	movs	r0, r5
 8002ebe:	f7ff fc5b 	bl	8002778 <__malloc_unlock>
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	42a3      	cmp	r3, r4
 8002ec6:	d908      	bls.n	8002eda <_free_r+0x42>
 8002ec8:	6820      	ldr	r0, [r4, #0]
 8002eca:	1821      	adds	r1, r4, r0
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d1f3      	bne.n	8002eb8 <_free_r+0x20>
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	1809      	adds	r1, r1, r0
 8002ed6:	6021      	str	r1, [r4, #0]
 8002ed8:	e7ee      	b.n	8002eb8 <_free_r+0x20>
 8002eda:	001a      	movs	r2, r3
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <_free_r+0x4e>
 8002ee2:	42a3      	cmp	r3, r4
 8002ee4:	d9f9      	bls.n	8002eda <_free_r+0x42>
 8002ee6:	6811      	ldr	r1, [r2, #0]
 8002ee8:	1850      	adds	r0, r2, r1
 8002eea:	42a0      	cmp	r0, r4
 8002eec:	d10b      	bne.n	8002f06 <_free_r+0x6e>
 8002eee:	6820      	ldr	r0, [r4, #0]
 8002ef0:	1809      	adds	r1, r1, r0
 8002ef2:	1850      	adds	r0, r2, r1
 8002ef4:	6011      	str	r1, [r2, #0]
 8002ef6:	4283      	cmp	r3, r0
 8002ef8:	d1e0      	bne.n	8002ebc <_free_r+0x24>
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	1841      	adds	r1, r0, r1
 8002f00:	6011      	str	r1, [r2, #0]
 8002f02:	6053      	str	r3, [r2, #4]
 8002f04:	e7da      	b.n	8002ebc <_free_r+0x24>
 8002f06:	42a0      	cmp	r0, r4
 8002f08:	d902      	bls.n	8002f10 <_free_r+0x78>
 8002f0a:	230c      	movs	r3, #12
 8002f0c:	602b      	str	r3, [r5, #0]
 8002f0e:	e7d5      	b.n	8002ebc <_free_r+0x24>
 8002f10:	6820      	ldr	r0, [r4, #0]
 8002f12:	1821      	adds	r1, r4, r0
 8002f14:	428b      	cmp	r3, r1
 8002f16:	d103      	bne.n	8002f20 <_free_r+0x88>
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	1809      	adds	r1, r1, r0
 8002f1e:	6021      	str	r1, [r4, #0]
 8002f20:	6063      	str	r3, [r4, #4]
 8002f22:	6054      	str	r4, [r2, #4]
 8002f24:	e7ca      	b.n	8002ebc <_free_r+0x24>
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	20000794 	.word	0x20000794

08002f2c <__sfputc_r>:
 8002f2c:	6893      	ldr	r3, [r2, #8]
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	3b01      	subs	r3, #1
 8002f32:	6093      	str	r3, [r2, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da04      	bge.n	8002f42 <__sfputc_r+0x16>
 8002f38:	6994      	ldr	r4, [r2, #24]
 8002f3a:	42a3      	cmp	r3, r4
 8002f3c:	db07      	blt.n	8002f4e <__sfputc_r+0x22>
 8002f3e:	290a      	cmp	r1, #10
 8002f40:	d005      	beq.n	8002f4e <__sfputc_r+0x22>
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	1c58      	adds	r0, r3, #1
 8002f46:	6010      	str	r0, [r2, #0]
 8002f48:	7019      	strb	r1, [r3, #0]
 8002f4a:	0008      	movs	r0, r1
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	f7ff fe51 	bl	8002bf4 <__swbuf_r>
 8002f52:	0001      	movs	r1, r0
 8002f54:	e7f9      	b.n	8002f4a <__sfputc_r+0x1e>

08002f56 <__sfputs_r>:
 8002f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f58:	0006      	movs	r6, r0
 8002f5a:	000f      	movs	r7, r1
 8002f5c:	0014      	movs	r4, r2
 8002f5e:	18d5      	adds	r5, r2, r3
 8002f60:	42ac      	cmp	r4, r5
 8002f62:	d101      	bne.n	8002f68 <__sfputs_r+0x12>
 8002f64:	2000      	movs	r0, #0
 8002f66:	e007      	b.n	8002f78 <__sfputs_r+0x22>
 8002f68:	7821      	ldrb	r1, [r4, #0]
 8002f6a:	003a      	movs	r2, r7
 8002f6c:	0030      	movs	r0, r6
 8002f6e:	f7ff ffdd 	bl	8002f2c <__sfputc_r>
 8002f72:	3401      	adds	r4, #1
 8002f74:	1c43      	adds	r3, r0, #1
 8002f76:	d1f3      	bne.n	8002f60 <__sfputs_r+0xa>
 8002f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f7c <_vfiprintf_r>:
 8002f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7e:	b0a1      	sub	sp, #132	@ 0x84
 8002f80:	000f      	movs	r7, r1
 8002f82:	0015      	movs	r5, r2
 8002f84:	001e      	movs	r6, r3
 8002f86:	9003      	str	r0, [sp, #12]
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d004      	beq.n	8002f96 <_vfiprintf_r+0x1a>
 8002f8c:	6a03      	ldr	r3, [r0, #32]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <_vfiprintf_r+0x1a>
 8002f92:	f7ff fc89 	bl	80028a8 <__sinit>
 8002f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f98:	07db      	lsls	r3, r3, #31
 8002f9a:	d405      	bmi.n	8002fa8 <_vfiprintf_r+0x2c>
 8002f9c:	89bb      	ldrh	r3, [r7, #12]
 8002f9e:	059b      	lsls	r3, r3, #22
 8002fa0:	d402      	bmi.n	8002fa8 <_vfiprintf_r+0x2c>
 8002fa2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002fa4:	f7ff ff6d 	bl	8002e82 <__retarget_lock_acquire_recursive>
 8002fa8:	89bb      	ldrh	r3, [r7, #12]
 8002faa:	071b      	lsls	r3, r3, #28
 8002fac:	d502      	bpl.n	8002fb4 <_vfiprintf_r+0x38>
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d113      	bne.n	8002fdc <_vfiprintf_r+0x60>
 8002fb4:	0039      	movs	r1, r7
 8002fb6:	9803      	ldr	r0, [sp, #12]
 8002fb8:	f7ff fe5e 	bl	8002c78 <__swsetup_r>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d00d      	beq.n	8002fdc <_vfiprintf_r+0x60>
 8002fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fc2:	07db      	lsls	r3, r3, #31
 8002fc4:	d503      	bpl.n	8002fce <_vfiprintf_r+0x52>
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	4240      	negs	r0, r0
 8002fca:	b021      	add	sp, #132	@ 0x84
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fce:	89bb      	ldrh	r3, [r7, #12]
 8002fd0:	059b      	lsls	r3, r3, #22
 8002fd2:	d4f8      	bmi.n	8002fc6 <_vfiprintf_r+0x4a>
 8002fd4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002fd6:	f7ff ff55 	bl	8002e84 <__retarget_lock_release_recursive>
 8002fda:	e7f4      	b.n	8002fc6 <_vfiprintf_r+0x4a>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	ac08      	add	r4, sp, #32
 8002fe0:	6163      	str	r3, [r4, #20]
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	7663      	strb	r3, [r4, #25]
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	76a3      	strb	r3, [r4, #26]
 8002fea:	9607      	str	r6, [sp, #28]
 8002fec:	002e      	movs	r6, r5
 8002fee:	7833      	ldrb	r3, [r6, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <_vfiprintf_r+0x7c>
 8002ff4:	2b25      	cmp	r3, #37	@ 0x25
 8002ff6:	d148      	bne.n	800308a <_vfiprintf_r+0x10e>
 8002ff8:	1b73      	subs	r3, r6, r5
 8002ffa:	9305      	str	r3, [sp, #20]
 8002ffc:	42ae      	cmp	r6, r5
 8002ffe:	d00b      	beq.n	8003018 <_vfiprintf_r+0x9c>
 8003000:	002a      	movs	r2, r5
 8003002:	0039      	movs	r1, r7
 8003004:	9803      	ldr	r0, [sp, #12]
 8003006:	f7ff ffa6 	bl	8002f56 <__sfputs_r>
 800300a:	3001      	adds	r0, #1
 800300c:	d100      	bne.n	8003010 <_vfiprintf_r+0x94>
 800300e:	e0ae      	b.n	800316e <_vfiprintf_r+0x1f2>
 8003010:	6963      	ldr	r3, [r4, #20]
 8003012:	9a05      	ldr	r2, [sp, #20]
 8003014:	189b      	adds	r3, r3, r2
 8003016:	6163      	str	r3, [r4, #20]
 8003018:	7833      	ldrb	r3, [r6, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d100      	bne.n	8003020 <_vfiprintf_r+0xa4>
 800301e:	e0a6      	b.n	800316e <_vfiprintf_r+0x1f2>
 8003020:	2201      	movs	r2, #1
 8003022:	2300      	movs	r3, #0
 8003024:	4252      	negs	r2, r2
 8003026:	6062      	str	r2, [r4, #4]
 8003028:	a904      	add	r1, sp, #16
 800302a:	3254      	adds	r2, #84	@ 0x54
 800302c:	1852      	adds	r2, r2, r1
 800302e:	1c75      	adds	r5, r6, #1
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	60e3      	str	r3, [r4, #12]
 8003034:	60a3      	str	r3, [r4, #8]
 8003036:	7013      	strb	r3, [r2, #0]
 8003038:	65a3      	str	r3, [r4, #88]	@ 0x58
 800303a:	4b59      	ldr	r3, [pc, #356]	@ (80031a0 <_vfiprintf_r+0x224>)
 800303c:	2205      	movs	r2, #5
 800303e:	0018      	movs	r0, r3
 8003040:	7829      	ldrb	r1, [r5, #0]
 8003042:	9305      	str	r3, [sp, #20]
 8003044:	f000 fb76 	bl	8003734 <memchr>
 8003048:	1c6e      	adds	r6, r5, #1
 800304a:	2800      	cmp	r0, #0
 800304c:	d11f      	bne.n	800308e <_vfiprintf_r+0x112>
 800304e:	6822      	ldr	r2, [r4, #0]
 8003050:	06d3      	lsls	r3, r2, #27
 8003052:	d504      	bpl.n	800305e <_vfiprintf_r+0xe2>
 8003054:	2353      	movs	r3, #83	@ 0x53
 8003056:	a904      	add	r1, sp, #16
 8003058:	185b      	adds	r3, r3, r1
 800305a:	2120      	movs	r1, #32
 800305c:	7019      	strb	r1, [r3, #0]
 800305e:	0713      	lsls	r3, r2, #28
 8003060:	d504      	bpl.n	800306c <_vfiprintf_r+0xf0>
 8003062:	2353      	movs	r3, #83	@ 0x53
 8003064:	a904      	add	r1, sp, #16
 8003066:	185b      	adds	r3, r3, r1
 8003068:	212b      	movs	r1, #43	@ 0x2b
 800306a:	7019      	strb	r1, [r3, #0]
 800306c:	782b      	ldrb	r3, [r5, #0]
 800306e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003070:	d016      	beq.n	80030a0 <_vfiprintf_r+0x124>
 8003072:	002e      	movs	r6, r5
 8003074:	2100      	movs	r1, #0
 8003076:	200a      	movs	r0, #10
 8003078:	68e3      	ldr	r3, [r4, #12]
 800307a:	7832      	ldrb	r2, [r6, #0]
 800307c:	1c75      	adds	r5, r6, #1
 800307e:	3a30      	subs	r2, #48	@ 0x30
 8003080:	2a09      	cmp	r2, #9
 8003082:	d950      	bls.n	8003126 <_vfiprintf_r+0x1aa>
 8003084:	2900      	cmp	r1, #0
 8003086:	d111      	bne.n	80030ac <_vfiprintf_r+0x130>
 8003088:	e017      	b.n	80030ba <_vfiprintf_r+0x13e>
 800308a:	3601      	adds	r6, #1
 800308c:	e7af      	b.n	8002fee <_vfiprintf_r+0x72>
 800308e:	9b05      	ldr	r3, [sp, #20]
 8003090:	6822      	ldr	r2, [r4, #0]
 8003092:	1ac0      	subs	r0, r0, r3
 8003094:	2301      	movs	r3, #1
 8003096:	4083      	lsls	r3, r0
 8003098:	4313      	orrs	r3, r2
 800309a:	0035      	movs	r5, r6
 800309c:	6023      	str	r3, [r4, #0]
 800309e:	e7cc      	b.n	800303a <_vfiprintf_r+0xbe>
 80030a0:	9b07      	ldr	r3, [sp, #28]
 80030a2:	1d19      	adds	r1, r3, #4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	9107      	str	r1, [sp, #28]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	db01      	blt.n	80030b0 <_vfiprintf_r+0x134>
 80030ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030ae:	e004      	b.n	80030ba <_vfiprintf_r+0x13e>
 80030b0:	425b      	negs	r3, r3
 80030b2:	60e3      	str	r3, [r4, #12]
 80030b4:	2302      	movs	r3, #2
 80030b6:	4313      	orrs	r3, r2
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	7833      	ldrb	r3, [r6, #0]
 80030bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80030be:	d10c      	bne.n	80030da <_vfiprintf_r+0x15e>
 80030c0:	7873      	ldrb	r3, [r6, #1]
 80030c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80030c4:	d134      	bne.n	8003130 <_vfiprintf_r+0x1b4>
 80030c6:	9b07      	ldr	r3, [sp, #28]
 80030c8:	3602      	adds	r6, #2
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	9207      	str	r2, [sp, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da01      	bge.n	80030d8 <_vfiprintf_r+0x15c>
 80030d4:	2301      	movs	r3, #1
 80030d6:	425b      	negs	r3, r3
 80030d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80030da:	4d32      	ldr	r5, [pc, #200]	@ (80031a4 <_vfiprintf_r+0x228>)
 80030dc:	2203      	movs	r2, #3
 80030de:	0028      	movs	r0, r5
 80030e0:	7831      	ldrb	r1, [r6, #0]
 80030e2:	f000 fb27 	bl	8003734 <memchr>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d006      	beq.n	80030f8 <_vfiprintf_r+0x17c>
 80030ea:	2340      	movs	r3, #64	@ 0x40
 80030ec:	1b40      	subs	r0, r0, r5
 80030ee:	4083      	lsls	r3, r0
 80030f0:	6822      	ldr	r2, [r4, #0]
 80030f2:	3601      	adds	r6, #1
 80030f4:	4313      	orrs	r3, r2
 80030f6:	6023      	str	r3, [r4, #0]
 80030f8:	7831      	ldrb	r1, [r6, #0]
 80030fa:	2206      	movs	r2, #6
 80030fc:	482a      	ldr	r0, [pc, #168]	@ (80031a8 <_vfiprintf_r+0x22c>)
 80030fe:	1c75      	adds	r5, r6, #1
 8003100:	7621      	strb	r1, [r4, #24]
 8003102:	f000 fb17 	bl	8003734 <memchr>
 8003106:	2800      	cmp	r0, #0
 8003108:	d040      	beq.n	800318c <_vfiprintf_r+0x210>
 800310a:	4b28      	ldr	r3, [pc, #160]	@ (80031ac <_vfiprintf_r+0x230>)
 800310c:	2b00      	cmp	r3, #0
 800310e:	d122      	bne.n	8003156 <_vfiprintf_r+0x1da>
 8003110:	2207      	movs	r2, #7
 8003112:	9b07      	ldr	r3, [sp, #28]
 8003114:	3307      	adds	r3, #7
 8003116:	4393      	bics	r3, r2
 8003118:	3308      	adds	r3, #8
 800311a:	9307      	str	r3, [sp, #28]
 800311c:	6963      	ldr	r3, [r4, #20]
 800311e:	9a04      	ldr	r2, [sp, #16]
 8003120:	189b      	adds	r3, r3, r2
 8003122:	6163      	str	r3, [r4, #20]
 8003124:	e762      	b.n	8002fec <_vfiprintf_r+0x70>
 8003126:	4343      	muls	r3, r0
 8003128:	002e      	movs	r6, r5
 800312a:	2101      	movs	r1, #1
 800312c:	189b      	adds	r3, r3, r2
 800312e:	e7a4      	b.n	800307a <_vfiprintf_r+0xfe>
 8003130:	2300      	movs	r3, #0
 8003132:	200a      	movs	r0, #10
 8003134:	0019      	movs	r1, r3
 8003136:	3601      	adds	r6, #1
 8003138:	6063      	str	r3, [r4, #4]
 800313a:	7832      	ldrb	r2, [r6, #0]
 800313c:	1c75      	adds	r5, r6, #1
 800313e:	3a30      	subs	r2, #48	@ 0x30
 8003140:	2a09      	cmp	r2, #9
 8003142:	d903      	bls.n	800314c <_vfiprintf_r+0x1d0>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0c8      	beq.n	80030da <_vfiprintf_r+0x15e>
 8003148:	9109      	str	r1, [sp, #36]	@ 0x24
 800314a:	e7c6      	b.n	80030da <_vfiprintf_r+0x15e>
 800314c:	4341      	muls	r1, r0
 800314e:	002e      	movs	r6, r5
 8003150:	2301      	movs	r3, #1
 8003152:	1889      	adds	r1, r1, r2
 8003154:	e7f1      	b.n	800313a <_vfiprintf_r+0x1be>
 8003156:	aa07      	add	r2, sp, #28
 8003158:	9200      	str	r2, [sp, #0]
 800315a:	0021      	movs	r1, r4
 800315c:	003a      	movs	r2, r7
 800315e:	4b14      	ldr	r3, [pc, #80]	@ (80031b0 <_vfiprintf_r+0x234>)
 8003160:	9803      	ldr	r0, [sp, #12]
 8003162:	e000      	b.n	8003166 <_vfiprintf_r+0x1ea>
 8003164:	bf00      	nop
 8003166:	9004      	str	r0, [sp, #16]
 8003168:	9b04      	ldr	r3, [sp, #16]
 800316a:	3301      	adds	r3, #1
 800316c:	d1d6      	bne.n	800311c <_vfiprintf_r+0x1a0>
 800316e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003170:	07db      	lsls	r3, r3, #31
 8003172:	d405      	bmi.n	8003180 <_vfiprintf_r+0x204>
 8003174:	89bb      	ldrh	r3, [r7, #12]
 8003176:	059b      	lsls	r3, r3, #22
 8003178:	d402      	bmi.n	8003180 <_vfiprintf_r+0x204>
 800317a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800317c:	f7ff fe82 	bl	8002e84 <__retarget_lock_release_recursive>
 8003180:	89bb      	ldrh	r3, [r7, #12]
 8003182:	065b      	lsls	r3, r3, #25
 8003184:	d500      	bpl.n	8003188 <_vfiprintf_r+0x20c>
 8003186:	e71e      	b.n	8002fc6 <_vfiprintf_r+0x4a>
 8003188:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800318a:	e71e      	b.n	8002fca <_vfiprintf_r+0x4e>
 800318c:	aa07      	add	r2, sp, #28
 800318e:	9200      	str	r2, [sp, #0]
 8003190:	0021      	movs	r1, r4
 8003192:	003a      	movs	r2, r7
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <_vfiprintf_r+0x234>)
 8003196:	9803      	ldr	r0, [sp, #12]
 8003198:	f000 f87c 	bl	8003294 <_printf_i>
 800319c:	e7e3      	b.n	8003166 <_vfiprintf_r+0x1ea>
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	080042f0 	.word	0x080042f0
 80031a4:	080042f6 	.word	0x080042f6
 80031a8:	080042fa 	.word	0x080042fa
 80031ac:	00000000 	.word	0x00000000
 80031b0:	08002f57 	.word	0x08002f57

080031b4 <_printf_common>:
 80031b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031b6:	0016      	movs	r6, r2
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	688a      	ldr	r2, [r1, #8]
 80031bc:	690b      	ldr	r3, [r1, #16]
 80031be:	000c      	movs	r4, r1
 80031c0:	9000      	str	r0, [sp, #0]
 80031c2:	4293      	cmp	r3, r2
 80031c4:	da00      	bge.n	80031c8 <_printf_common+0x14>
 80031c6:	0013      	movs	r3, r2
 80031c8:	0022      	movs	r2, r4
 80031ca:	6033      	str	r3, [r6, #0]
 80031cc:	3243      	adds	r2, #67	@ 0x43
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	2a00      	cmp	r2, #0
 80031d2:	d001      	beq.n	80031d8 <_printf_common+0x24>
 80031d4:	3301      	adds	r3, #1
 80031d6:	6033      	str	r3, [r6, #0]
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	069b      	lsls	r3, r3, #26
 80031dc:	d502      	bpl.n	80031e4 <_printf_common+0x30>
 80031de:	6833      	ldr	r3, [r6, #0]
 80031e0:	3302      	adds	r3, #2
 80031e2:	6033      	str	r3, [r6, #0]
 80031e4:	6822      	ldr	r2, [r4, #0]
 80031e6:	2306      	movs	r3, #6
 80031e8:	0015      	movs	r5, r2
 80031ea:	401d      	ands	r5, r3
 80031ec:	421a      	tst	r2, r3
 80031ee:	d027      	beq.n	8003240 <_printf_common+0x8c>
 80031f0:	0023      	movs	r3, r4
 80031f2:	3343      	adds	r3, #67	@ 0x43
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	4193      	sbcs	r3, r2
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	0692      	lsls	r2, r2, #26
 80031fe:	d430      	bmi.n	8003262 <_printf_common+0xae>
 8003200:	0022      	movs	r2, r4
 8003202:	9901      	ldr	r1, [sp, #4]
 8003204:	9800      	ldr	r0, [sp, #0]
 8003206:	9d08      	ldr	r5, [sp, #32]
 8003208:	3243      	adds	r2, #67	@ 0x43
 800320a:	47a8      	blx	r5
 800320c:	3001      	adds	r0, #1
 800320e:	d025      	beq.n	800325c <_printf_common+0xa8>
 8003210:	2206      	movs	r2, #6
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	2500      	movs	r5, #0
 8003216:	4013      	ands	r3, r2
 8003218:	2b04      	cmp	r3, #4
 800321a:	d105      	bne.n	8003228 <_printf_common+0x74>
 800321c:	6833      	ldr	r3, [r6, #0]
 800321e:	68e5      	ldr	r5, [r4, #12]
 8003220:	1aed      	subs	r5, r5, r3
 8003222:	43eb      	mvns	r3, r5
 8003224:	17db      	asrs	r3, r3, #31
 8003226:	401d      	ands	r5, r3
 8003228:	68a3      	ldr	r3, [r4, #8]
 800322a:	6922      	ldr	r2, [r4, #16]
 800322c:	4293      	cmp	r3, r2
 800322e:	dd01      	ble.n	8003234 <_printf_common+0x80>
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	18ed      	adds	r5, r5, r3
 8003234:	2600      	movs	r6, #0
 8003236:	42b5      	cmp	r5, r6
 8003238:	d120      	bne.n	800327c <_printf_common+0xc8>
 800323a:	2000      	movs	r0, #0
 800323c:	e010      	b.n	8003260 <_printf_common+0xac>
 800323e:	3501      	adds	r5, #1
 8003240:	68e3      	ldr	r3, [r4, #12]
 8003242:	6832      	ldr	r2, [r6, #0]
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	42ab      	cmp	r3, r5
 8003248:	ddd2      	ble.n	80031f0 <_printf_common+0x3c>
 800324a:	0022      	movs	r2, r4
 800324c:	2301      	movs	r3, #1
 800324e:	9901      	ldr	r1, [sp, #4]
 8003250:	9800      	ldr	r0, [sp, #0]
 8003252:	9f08      	ldr	r7, [sp, #32]
 8003254:	3219      	adds	r2, #25
 8003256:	47b8      	blx	r7
 8003258:	3001      	adds	r0, #1
 800325a:	d1f0      	bne.n	800323e <_printf_common+0x8a>
 800325c:	2001      	movs	r0, #1
 800325e:	4240      	negs	r0, r0
 8003260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003262:	2030      	movs	r0, #48	@ 0x30
 8003264:	18e1      	adds	r1, r4, r3
 8003266:	3143      	adds	r1, #67	@ 0x43
 8003268:	7008      	strb	r0, [r1, #0]
 800326a:	0021      	movs	r1, r4
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	3145      	adds	r1, #69	@ 0x45
 8003270:	7809      	ldrb	r1, [r1, #0]
 8003272:	18a2      	adds	r2, r4, r2
 8003274:	3243      	adds	r2, #67	@ 0x43
 8003276:	3302      	adds	r3, #2
 8003278:	7011      	strb	r1, [r2, #0]
 800327a:	e7c1      	b.n	8003200 <_printf_common+0x4c>
 800327c:	0022      	movs	r2, r4
 800327e:	2301      	movs	r3, #1
 8003280:	9901      	ldr	r1, [sp, #4]
 8003282:	9800      	ldr	r0, [sp, #0]
 8003284:	9f08      	ldr	r7, [sp, #32]
 8003286:	321a      	adds	r2, #26
 8003288:	47b8      	blx	r7
 800328a:	3001      	adds	r0, #1
 800328c:	d0e6      	beq.n	800325c <_printf_common+0xa8>
 800328e:	3601      	adds	r6, #1
 8003290:	e7d1      	b.n	8003236 <_printf_common+0x82>
	...

08003294 <_printf_i>:
 8003294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003296:	b08b      	sub	sp, #44	@ 0x2c
 8003298:	9206      	str	r2, [sp, #24]
 800329a:	000a      	movs	r2, r1
 800329c:	3243      	adds	r2, #67	@ 0x43
 800329e:	9307      	str	r3, [sp, #28]
 80032a0:	9005      	str	r0, [sp, #20]
 80032a2:	9203      	str	r2, [sp, #12]
 80032a4:	7e0a      	ldrb	r2, [r1, #24]
 80032a6:	000c      	movs	r4, r1
 80032a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80032aa:	2a78      	cmp	r2, #120	@ 0x78
 80032ac:	d809      	bhi.n	80032c2 <_printf_i+0x2e>
 80032ae:	2a62      	cmp	r2, #98	@ 0x62
 80032b0:	d80b      	bhi.n	80032ca <_printf_i+0x36>
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d100      	bne.n	80032b8 <_printf_i+0x24>
 80032b6:	e0bc      	b.n	8003432 <_printf_i+0x19e>
 80032b8:	497b      	ldr	r1, [pc, #492]	@ (80034a8 <_printf_i+0x214>)
 80032ba:	9104      	str	r1, [sp, #16]
 80032bc:	2a58      	cmp	r2, #88	@ 0x58
 80032be:	d100      	bne.n	80032c2 <_printf_i+0x2e>
 80032c0:	e090      	b.n	80033e4 <_printf_i+0x150>
 80032c2:	0025      	movs	r5, r4
 80032c4:	3542      	adds	r5, #66	@ 0x42
 80032c6:	702a      	strb	r2, [r5, #0]
 80032c8:	e022      	b.n	8003310 <_printf_i+0x7c>
 80032ca:	0010      	movs	r0, r2
 80032cc:	3863      	subs	r0, #99	@ 0x63
 80032ce:	2815      	cmp	r0, #21
 80032d0:	d8f7      	bhi.n	80032c2 <_printf_i+0x2e>
 80032d2:	f7fc ff21 	bl	8000118 <__gnu_thumb1_case_shi>
 80032d6:	0016      	.short	0x0016
 80032d8:	fff6001f 	.word	0xfff6001f
 80032dc:	fff6fff6 	.word	0xfff6fff6
 80032e0:	001ffff6 	.word	0x001ffff6
 80032e4:	fff6fff6 	.word	0xfff6fff6
 80032e8:	fff6fff6 	.word	0xfff6fff6
 80032ec:	003600a1 	.word	0x003600a1
 80032f0:	fff60080 	.word	0xfff60080
 80032f4:	00b2fff6 	.word	0x00b2fff6
 80032f8:	0036fff6 	.word	0x0036fff6
 80032fc:	fff6fff6 	.word	0xfff6fff6
 8003300:	0084      	.short	0x0084
 8003302:	0025      	movs	r5, r4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	3542      	adds	r5, #66	@ 0x42
 8003308:	1d11      	adds	r1, r2, #4
 800330a:	6019      	str	r1, [r3, #0]
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	702b      	strb	r3, [r5, #0]
 8003310:	2301      	movs	r3, #1
 8003312:	e0a0      	b.n	8003456 <_printf_i+0x1c2>
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	6809      	ldr	r1, [r1, #0]
 8003318:	1d02      	adds	r2, r0, #4
 800331a:	060d      	lsls	r5, r1, #24
 800331c:	d50b      	bpl.n	8003336 <_printf_i+0xa2>
 800331e:	6806      	ldr	r6, [r0, #0]
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	2e00      	cmp	r6, #0
 8003324:	da03      	bge.n	800332e <_printf_i+0x9a>
 8003326:	232d      	movs	r3, #45	@ 0x2d
 8003328:	9a03      	ldr	r2, [sp, #12]
 800332a:	4276      	negs	r6, r6
 800332c:	7013      	strb	r3, [r2, #0]
 800332e:	4b5e      	ldr	r3, [pc, #376]	@ (80034a8 <_printf_i+0x214>)
 8003330:	270a      	movs	r7, #10
 8003332:	9304      	str	r3, [sp, #16]
 8003334:	e018      	b.n	8003368 <_printf_i+0xd4>
 8003336:	6806      	ldr	r6, [r0, #0]
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	0649      	lsls	r1, r1, #25
 800333c:	d5f1      	bpl.n	8003322 <_printf_i+0x8e>
 800333e:	b236      	sxth	r6, r6
 8003340:	e7ef      	b.n	8003322 <_printf_i+0x8e>
 8003342:	6808      	ldr	r0, [r1, #0]
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	c940      	ldmia	r1!, {r6}
 8003348:	0605      	lsls	r5, r0, #24
 800334a:	d402      	bmi.n	8003352 <_printf_i+0xbe>
 800334c:	0640      	lsls	r0, r0, #25
 800334e:	d500      	bpl.n	8003352 <_printf_i+0xbe>
 8003350:	b2b6      	uxth	r6, r6
 8003352:	6019      	str	r1, [r3, #0]
 8003354:	4b54      	ldr	r3, [pc, #336]	@ (80034a8 <_printf_i+0x214>)
 8003356:	270a      	movs	r7, #10
 8003358:	9304      	str	r3, [sp, #16]
 800335a:	2a6f      	cmp	r2, #111	@ 0x6f
 800335c:	d100      	bne.n	8003360 <_printf_i+0xcc>
 800335e:	3f02      	subs	r7, #2
 8003360:	0023      	movs	r3, r4
 8003362:	2200      	movs	r2, #0
 8003364:	3343      	adds	r3, #67	@ 0x43
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	60a3      	str	r3, [r4, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db03      	blt.n	8003378 <_printf_i+0xe4>
 8003370:	2104      	movs	r1, #4
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	438a      	bics	r2, r1
 8003376:	6022      	str	r2, [r4, #0]
 8003378:	2e00      	cmp	r6, #0
 800337a:	d102      	bne.n	8003382 <_printf_i+0xee>
 800337c:	9d03      	ldr	r5, [sp, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00c      	beq.n	800339c <_printf_i+0x108>
 8003382:	9d03      	ldr	r5, [sp, #12]
 8003384:	0030      	movs	r0, r6
 8003386:	0039      	movs	r1, r7
 8003388:	f7fc ff56 	bl	8000238 <__aeabi_uidivmod>
 800338c:	9b04      	ldr	r3, [sp, #16]
 800338e:	3d01      	subs	r5, #1
 8003390:	5c5b      	ldrb	r3, [r3, r1]
 8003392:	702b      	strb	r3, [r5, #0]
 8003394:	0033      	movs	r3, r6
 8003396:	0006      	movs	r6, r0
 8003398:	429f      	cmp	r7, r3
 800339a:	d9f3      	bls.n	8003384 <_printf_i+0xf0>
 800339c:	2f08      	cmp	r7, #8
 800339e:	d109      	bne.n	80033b4 <_printf_i+0x120>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	07db      	lsls	r3, r3, #31
 80033a4:	d506      	bpl.n	80033b4 <_printf_i+0x120>
 80033a6:	6862      	ldr	r2, [r4, #4]
 80033a8:	6923      	ldr	r3, [r4, #16]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	dc02      	bgt.n	80033b4 <_printf_i+0x120>
 80033ae:	2330      	movs	r3, #48	@ 0x30
 80033b0:	3d01      	subs	r5, #1
 80033b2:	702b      	strb	r3, [r5, #0]
 80033b4:	9b03      	ldr	r3, [sp, #12]
 80033b6:	1b5b      	subs	r3, r3, r5
 80033b8:	6123      	str	r3, [r4, #16]
 80033ba:	9b07      	ldr	r3, [sp, #28]
 80033bc:	0021      	movs	r1, r4
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	9805      	ldr	r0, [sp, #20]
 80033c2:	9b06      	ldr	r3, [sp, #24]
 80033c4:	aa09      	add	r2, sp, #36	@ 0x24
 80033c6:	f7ff fef5 	bl	80031b4 <_printf_common>
 80033ca:	3001      	adds	r0, #1
 80033cc:	d148      	bne.n	8003460 <_printf_i+0x1cc>
 80033ce:	2001      	movs	r0, #1
 80033d0:	4240      	negs	r0, r0
 80033d2:	b00b      	add	sp, #44	@ 0x2c
 80033d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033d6:	2220      	movs	r2, #32
 80033d8:	6809      	ldr	r1, [r1, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	6022      	str	r2, [r4, #0]
 80033de:	2278      	movs	r2, #120	@ 0x78
 80033e0:	4932      	ldr	r1, [pc, #200]	@ (80034ac <_printf_i+0x218>)
 80033e2:	9104      	str	r1, [sp, #16]
 80033e4:	0021      	movs	r1, r4
 80033e6:	3145      	adds	r1, #69	@ 0x45
 80033e8:	700a      	strb	r2, [r1, #0]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	6822      	ldr	r2, [r4, #0]
 80033ee:	c940      	ldmia	r1!, {r6}
 80033f0:	0610      	lsls	r0, r2, #24
 80033f2:	d402      	bmi.n	80033fa <_printf_i+0x166>
 80033f4:	0650      	lsls	r0, r2, #25
 80033f6:	d500      	bpl.n	80033fa <_printf_i+0x166>
 80033f8:	b2b6      	uxth	r6, r6
 80033fa:	6019      	str	r1, [r3, #0]
 80033fc:	07d3      	lsls	r3, r2, #31
 80033fe:	d502      	bpl.n	8003406 <_printf_i+0x172>
 8003400:	2320      	movs	r3, #32
 8003402:	4313      	orrs	r3, r2
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	2e00      	cmp	r6, #0
 8003408:	d001      	beq.n	800340e <_printf_i+0x17a>
 800340a:	2710      	movs	r7, #16
 800340c:	e7a8      	b.n	8003360 <_printf_i+0xcc>
 800340e:	2220      	movs	r2, #32
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	4393      	bics	r3, r2
 8003414:	6023      	str	r3, [r4, #0]
 8003416:	e7f8      	b.n	800340a <_printf_i+0x176>
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	680d      	ldr	r5, [r1, #0]
 800341c:	1d10      	adds	r0, r2, #4
 800341e:	6949      	ldr	r1, [r1, #20]
 8003420:	6018      	str	r0, [r3, #0]
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	062e      	lsls	r6, r5, #24
 8003426:	d501      	bpl.n	800342c <_printf_i+0x198>
 8003428:	6019      	str	r1, [r3, #0]
 800342a:	e002      	b.n	8003432 <_printf_i+0x19e>
 800342c:	066d      	lsls	r5, r5, #25
 800342e:	d5fb      	bpl.n	8003428 <_printf_i+0x194>
 8003430:	8019      	strh	r1, [r3, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	9d03      	ldr	r5, [sp, #12]
 8003436:	6123      	str	r3, [r4, #16]
 8003438:	e7bf      	b.n	80033ba <_printf_i+0x126>
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	1d11      	adds	r1, r2, #4
 800343e:	6019      	str	r1, [r3, #0]
 8003440:	6815      	ldr	r5, [r2, #0]
 8003442:	2100      	movs	r1, #0
 8003444:	0028      	movs	r0, r5
 8003446:	6862      	ldr	r2, [r4, #4]
 8003448:	f000 f974 	bl	8003734 <memchr>
 800344c:	2800      	cmp	r0, #0
 800344e:	d001      	beq.n	8003454 <_printf_i+0x1c0>
 8003450:	1b40      	subs	r0, r0, r5
 8003452:	6060      	str	r0, [r4, #4]
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	6123      	str	r3, [r4, #16]
 8003458:	2300      	movs	r3, #0
 800345a:	9a03      	ldr	r2, [sp, #12]
 800345c:	7013      	strb	r3, [r2, #0]
 800345e:	e7ac      	b.n	80033ba <_printf_i+0x126>
 8003460:	002a      	movs	r2, r5
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	9906      	ldr	r1, [sp, #24]
 8003466:	9805      	ldr	r0, [sp, #20]
 8003468:	9d07      	ldr	r5, [sp, #28]
 800346a:	47a8      	blx	r5
 800346c:	3001      	adds	r0, #1
 800346e:	d0ae      	beq.n	80033ce <_printf_i+0x13a>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	079b      	lsls	r3, r3, #30
 8003474:	d415      	bmi.n	80034a2 <_printf_i+0x20e>
 8003476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003478:	68e0      	ldr	r0, [r4, #12]
 800347a:	4298      	cmp	r0, r3
 800347c:	daa9      	bge.n	80033d2 <_printf_i+0x13e>
 800347e:	0018      	movs	r0, r3
 8003480:	e7a7      	b.n	80033d2 <_printf_i+0x13e>
 8003482:	0022      	movs	r2, r4
 8003484:	2301      	movs	r3, #1
 8003486:	9906      	ldr	r1, [sp, #24]
 8003488:	9805      	ldr	r0, [sp, #20]
 800348a:	9e07      	ldr	r6, [sp, #28]
 800348c:	3219      	adds	r2, #25
 800348e:	47b0      	blx	r6
 8003490:	3001      	adds	r0, #1
 8003492:	d09c      	beq.n	80033ce <_printf_i+0x13a>
 8003494:	3501      	adds	r5, #1
 8003496:	68e3      	ldr	r3, [r4, #12]
 8003498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	42ab      	cmp	r3, r5
 800349e:	dcf0      	bgt.n	8003482 <_printf_i+0x1ee>
 80034a0:	e7e9      	b.n	8003476 <_printf_i+0x1e2>
 80034a2:	2500      	movs	r5, #0
 80034a4:	e7f7      	b.n	8003496 <_printf_i+0x202>
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	08004301 	.word	0x08004301
 80034ac:	08004312 	.word	0x08004312

080034b0 <__sflush_r>:
 80034b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034b2:	220c      	movs	r2, #12
 80034b4:	5e8b      	ldrsh	r3, [r1, r2]
 80034b6:	0005      	movs	r5, r0
 80034b8:	000c      	movs	r4, r1
 80034ba:	071a      	lsls	r2, r3, #28
 80034bc:	d456      	bmi.n	800356c <__sflush_r+0xbc>
 80034be:	684a      	ldr	r2, [r1, #4]
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	dc02      	bgt.n	80034ca <__sflush_r+0x1a>
 80034c4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80034c6:	2a00      	cmp	r2, #0
 80034c8:	dd4e      	ble.n	8003568 <__sflush_r+0xb8>
 80034ca:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80034cc:	2f00      	cmp	r7, #0
 80034ce:	d04b      	beq.n	8003568 <__sflush_r+0xb8>
 80034d0:	2200      	movs	r2, #0
 80034d2:	2080      	movs	r0, #128	@ 0x80
 80034d4:	682e      	ldr	r6, [r5, #0]
 80034d6:	602a      	str	r2, [r5, #0]
 80034d8:	001a      	movs	r2, r3
 80034da:	0140      	lsls	r0, r0, #5
 80034dc:	6a21      	ldr	r1, [r4, #32]
 80034de:	4002      	ands	r2, r0
 80034e0:	4203      	tst	r3, r0
 80034e2:	d033      	beq.n	800354c <__sflush_r+0x9c>
 80034e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	075b      	lsls	r3, r3, #29
 80034ea:	d506      	bpl.n	80034fa <__sflush_r+0x4a>
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	1ad2      	subs	r2, r2, r3
 80034f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <__sflush_r+0x4a>
 80034f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034f8:	1ad2      	subs	r2, r2, r3
 80034fa:	2300      	movs	r3, #0
 80034fc:	0028      	movs	r0, r5
 80034fe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003500:	6a21      	ldr	r1, [r4, #32]
 8003502:	47b8      	blx	r7
 8003504:	89a2      	ldrh	r2, [r4, #12]
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	d106      	bne.n	8003518 <__sflush_r+0x68>
 800350a:	6829      	ldr	r1, [r5, #0]
 800350c:	291d      	cmp	r1, #29
 800350e:	d846      	bhi.n	800359e <__sflush_r+0xee>
 8003510:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <__sflush_r+0x108>)
 8003512:	410b      	asrs	r3, r1
 8003514:	07db      	lsls	r3, r3, #31
 8003516:	d442      	bmi.n	800359e <__sflush_r+0xee>
 8003518:	2300      	movs	r3, #0
 800351a:	6063      	str	r3, [r4, #4]
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	04d2      	lsls	r2, r2, #19
 8003522:	d505      	bpl.n	8003530 <__sflush_r+0x80>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d102      	bne.n	800352e <__sflush_r+0x7e>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d100      	bne.n	8003530 <__sflush_r+0x80>
 800352e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003532:	602e      	str	r6, [r5, #0]
 8003534:	2900      	cmp	r1, #0
 8003536:	d017      	beq.n	8003568 <__sflush_r+0xb8>
 8003538:	0023      	movs	r3, r4
 800353a:	3344      	adds	r3, #68	@ 0x44
 800353c:	4299      	cmp	r1, r3
 800353e:	d002      	beq.n	8003546 <__sflush_r+0x96>
 8003540:	0028      	movs	r0, r5
 8003542:	f7ff fca9 	bl	8002e98 <_free_r>
 8003546:	2300      	movs	r3, #0
 8003548:	6363      	str	r3, [r4, #52]	@ 0x34
 800354a:	e00d      	b.n	8003568 <__sflush_r+0xb8>
 800354c:	2301      	movs	r3, #1
 800354e:	0028      	movs	r0, r5
 8003550:	47b8      	blx	r7
 8003552:	0002      	movs	r2, r0
 8003554:	1c43      	adds	r3, r0, #1
 8003556:	d1c6      	bne.n	80034e6 <__sflush_r+0x36>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0c3      	beq.n	80034e6 <__sflush_r+0x36>
 800355e:	2b1d      	cmp	r3, #29
 8003560:	d001      	beq.n	8003566 <__sflush_r+0xb6>
 8003562:	2b16      	cmp	r3, #22
 8003564:	d11a      	bne.n	800359c <__sflush_r+0xec>
 8003566:	602e      	str	r6, [r5, #0]
 8003568:	2000      	movs	r0, #0
 800356a:	e01e      	b.n	80035aa <__sflush_r+0xfa>
 800356c:	690e      	ldr	r6, [r1, #16]
 800356e:	2e00      	cmp	r6, #0
 8003570:	d0fa      	beq.n	8003568 <__sflush_r+0xb8>
 8003572:	680f      	ldr	r7, [r1, #0]
 8003574:	600e      	str	r6, [r1, #0]
 8003576:	1bba      	subs	r2, r7, r6
 8003578:	9201      	str	r2, [sp, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	079b      	lsls	r3, r3, #30
 800357e:	d100      	bne.n	8003582 <__sflush_r+0xd2>
 8003580:	694a      	ldr	r2, [r1, #20]
 8003582:	60a2      	str	r2, [r4, #8]
 8003584:	9b01      	ldr	r3, [sp, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	ddee      	ble.n	8003568 <__sflush_r+0xb8>
 800358a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800358c:	0032      	movs	r2, r6
 800358e:	001f      	movs	r7, r3
 8003590:	0028      	movs	r0, r5
 8003592:	9b01      	ldr	r3, [sp, #4]
 8003594:	6a21      	ldr	r1, [r4, #32]
 8003596:	47b8      	blx	r7
 8003598:	2800      	cmp	r0, #0
 800359a:	dc07      	bgt.n	80035ac <__sflush_r+0xfc>
 800359c:	89a2      	ldrh	r2, [r4, #12]
 800359e:	2340      	movs	r3, #64	@ 0x40
 80035a0:	2001      	movs	r0, #1
 80035a2:	4313      	orrs	r3, r2
 80035a4:	b21b      	sxth	r3, r3
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	4240      	negs	r0, r0
 80035aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035ac:	9b01      	ldr	r3, [sp, #4]
 80035ae:	1836      	adds	r6, r6, r0
 80035b0:	1a1b      	subs	r3, r3, r0
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	e7e6      	b.n	8003584 <__sflush_r+0xd4>
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	dfbffffe 	.word	0xdfbffffe

080035bc <_fflush_r>:
 80035bc:	690b      	ldr	r3, [r1, #16]
 80035be:	b570      	push	{r4, r5, r6, lr}
 80035c0:	0005      	movs	r5, r0
 80035c2:	000c      	movs	r4, r1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <_fflush_r+0x12>
 80035c8:	2500      	movs	r5, #0
 80035ca:	0028      	movs	r0, r5
 80035cc:	bd70      	pop	{r4, r5, r6, pc}
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d004      	beq.n	80035dc <_fflush_r+0x20>
 80035d2:	6a03      	ldr	r3, [r0, #32]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <_fflush_r+0x20>
 80035d8:	f7ff f966 	bl	80028a8 <__sinit>
 80035dc:	220c      	movs	r2, #12
 80035de:	5ea3      	ldrsh	r3, [r4, r2]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f1      	beq.n	80035c8 <_fflush_r+0xc>
 80035e4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035e6:	07d2      	lsls	r2, r2, #31
 80035e8:	d404      	bmi.n	80035f4 <_fflush_r+0x38>
 80035ea:	059b      	lsls	r3, r3, #22
 80035ec:	d402      	bmi.n	80035f4 <_fflush_r+0x38>
 80035ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035f0:	f7ff fc47 	bl	8002e82 <__retarget_lock_acquire_recursive>
 80035f4:	0028      	movs	r0, r5
 80035f6:	0021      	movs	r1, r4
 80035f8:	f7ff ff5a 	bl	80034b0 <__sflush_r>
 80035fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035fe:	0005      	movs	r5, r0
 8003600:	07db      	lsls	r3, r3, #31
 8003602:	d4e2      	bmi.n	80035ca <_fflush_r+0xe>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	059b      	lsls	r3, r3, #22
 8003608:	d4df      	bmi.n	80035ca <_fflush_r+0xe>
 800360a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800360c:	f7ff fc3a 	bl	8002e84 <__retarget_lock_release_recursive>
 8003610:	e7db      	b.n	80035ca <_fflush_r+0xe>
	...

08003614 <__swhatbuf_r>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	000e      	movs	r6, r1
 8003618:	001d      	movs	r5, r3
 800361a:	230e      	movs	r3, #14
 800361c:	5ec9      	ldrsh	r1, [r1, r3]
 800361e:	0014      	movs	r4, r2
 8003620:	b096      	sub	sp, #88	@ 0x58
 8003622:	2900      	cmp	r1, #0
 8003624:	da0c      	bge.n	8003640 <__swhatbuf_r+0x2c>
 8003626:	89b2      	ldrh	r2, [r6, #12]
 8003628:	2380      	movs	r3, #128	@ 0x80
 800362a:	0011      	movs	r1, r2
 800362c:	4019      	ands	r1, r3
 800362e:	421a      	tst	r2, r3
 8003630:	d114      	bne.n	800365c <__swhatbuf_r+0x48>
 8003632:	2380      	movs	r3, #128	@ 0x80
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	2000      	movs	r0, #0
 8003638:	6029      	str	r1, [r5, #0]
 800363a:	6023      	str	r3, [r4, #0]
 800363c:	b016      	add	sp, #88	@ 0x58
 800363e:	bd70      	pop	{r4, r5, r6, pc}
 8003640:	466a      	mov	r2, sp
 8003642:	f000 f853 	bl	80036ec <_fstat_r>
 8003646:	2800      	cmp	r0, #0
 8003648:	dbed      	blt.n	8003626 <__swhatbuf_r+0x12>
 800364a:	23f0      	movs	r3, #240	@ 0xf0
 800364c:	9901      	ldr	r1, [sp, #4]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	4019      	ands	r1, r3
 8003652:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <__swhatbuf_r+0x50>)
 8003654:	18c9      	adds	r1, r1, r3
 8003656:	424b      	negs	r3, r1
 8003658:	4159      	adcs	r1, r3
 800365a:	e7ea      	b.n	8003632 <__swhatbuf_r+0x1e>
 800365c:	2100      	movs	r1, #0
 800365e:	2340      	movs	r3, #64	@ 0x40
 8003660:	e7e9      	b.n	8003636 <__swhatbuf_r+0x22>
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	ffffe000 	.word	0xffffe000

08003668 <__smakebuf_r>:
 8003668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366a:	2602      	movs	r6, #2
 800366c:	898b      	ldrh	r3, [r1, #12]
 800366e:	0005      	movs	r5, r0
 8003670:	000c      	movs	r4, r1
 8003672:	b085      	sub	sp, #20
 8003674:	4233      	tst	r3, r6
 8003676:	d007      	beq.n	8003688 <__smakebuf_r+0x20>
 8003678:	0023      	movs	r3, r4
 800367a:	3347      	adds	r3, #71	@ 0x47
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	6123      	str	r3, [r4, #16]
 8003680:	2301      	movs	r3, #1
 8003682:	6163      	str	r3, [r4, #20]
 8003684:	b005      	add	sp, #20
 8003686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003688:	ab03      	add	r3, sp, #12
 800368a:	aa02      	add	r2, sp, #8
 800368c:	f7ff ffc2 	bl	8003614 <__swhatbuf_r>
 8003690:	9f02      	ldr	r7, [sp, #8]
 8003692:	9001      	str	r0, [sp, #4]
 8003694:	0039      	movs	r1, r7
 8003696:	0028      	movs	r0, r5
 8003698:	f7fe ffe6 	bl	8002668 <_malloc_r>
 800369c:	2800      	cmp	r0, #0
 800369e:	d108      	bne.n	80036b2 <__smakebuf_r+0x4a>
 80036a0:	220c      	movs	r2, #12
 80036a2:	5ea3      	ldrsh	r3, [r4, r2]
 80036a4:	059a      	lsls	r2, r3, #22
 80036a6:	d4ed      	bmi.n	8003684 <__smakebuf_r+0x1c>
 80036a8:	2203      	movs	r2, #3
 80036aa:	4393      	bics	r3, r2
 80036ac:	431e      	orrs	r6, r3
 80036ae:	81a6      	strh	r6, [r4, #12]
 80036b0:	e7e2      	b.n	8003678 <__smakebuf_r+0x10>
 80036b2:	2380      	movs	r3, #128	@ 0x80
 80036b4:	89a2      	ldrh	r2, [r4, #12]
 80036b6:	6020      	str	r0, [r4, #0]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	81a3      	strh	r3, [r4, #12]
 80036bc:	9b03      	ldr	r3, [sp, #12]
 80036be:	6120      	str	r0, [r4, #16]
 80036c0:	6167      	str	r7, [r4, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <__smakebuf_r+0x78>
 80036c6:	0028      	movs	r0, r5
 80036c8:	230e      	movs	r3, #14
 80036ca:	5ee1      	ldrsh	r1, [r4, r3]
 80036cc:	f000 f820 	bl	8003710 <_isatty_r>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d005      	beq.n	80036e0 <__smakebuf_r+0x78>
 80036d4:	2303      	movs	r3, #3
 80036d6:	89a2      	ldrh	r2, [r4, #12]
 80036d8:	439a      	bics	r2, r3
 80036da:	3b02      	subs	r3, #2
 80036dc:	4313      	orrs	r3, r2
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	9a01      	ldr	r2, [sp, #4]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	81a3      	strh	r3, [r4, #12]
 80036e8:	e7cc      	b.n	8003684 <__smakebuf_r+0x1c>
	...

080036ec <_fstat_r>:
 80036ec:	2300      	movs	r3, #0
 80036ee:	b570      	push	{r4, r5, r6, lr}
 80036f0:	4d06      	ldr	r5, [pc, #24]	@ (800370c <_fstat_r+0x20>)
 80036f2:	0004      	movs	r4, r0
 80036f4:	0008      	movs	r0, r1
 80036f6:	0011      	movs	r1, r2
 80036f8:	602b      	str	r3, [r5, #0]
 80036fa:	f7fd fe26 	bl	800134a <_fstat>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	d103      	bne.n	800370a <_fstat_r+0x1e>
 8003702:	682b      	ldr	r3, [r5, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d000      	beq.n	800370a <_fstat_r+0x1e>
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	bd70      	pop	{r4, r5, r6, pc}
 800370c:	200008d4 	.word	0x200008d4

08003710 <_isatty_r>:
 8003710:	2300      	movs	r3, #0
 8003712:	b570      	push	{r4, r5, r6, lr}
 8003714:	4d06      	ldr	r5, [pc, #24]	@ (8003730 <_isatty_r+0x20>)
 8003716:	0004      	movs	r4, r0
 8003718:	0008      	movs	r0, r1
 800371a:	602b      	str	r3, [r5, #0]
 800371c:	f7fd fe23 	bl	8001366 <_isatty>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d103      	bne.n	800372c <_isatty_r+0x1c>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d000      	beq.n	800372c <_isatty_r+0x1c>
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	bd70      	pop	{r4, r5, r6, pc}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	200008d4 	.word	0x200008d4

08003734 <memchr>:
 8003734:	b2c9      	uxtb	r1, r1
 8003736:	1882      	adds	r2, r0, r2
 8003738:	4290      	cmp	r0, r2
 800373a:	d101      	bne.n	8003740 <memchr+0xc>
 800373c:	2000      	movs	r0, #0
 800373e:	4770      	bx	lr
 8003740:	7803      	ldrb	r3, [r0, #0]
 8003742:	428b      	cmp	r3, r1
 8003744:	d0fb      	beq.n	800373e <memchr+0xa>
 8003746:	3001      	adds	r0, #1
 8003748:	e7f6      	b.n	8003738 <memchr+0x4>
	...

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
