
Assignment6_SerialIO_Answer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  08003884  08003884  00004884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800441c  0800441c  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  0800441c  0800441c  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800441c  0800441c  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800441c  0800441c  0000541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004420  08004420  00005420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004424  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000060  08004484  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08004484  000062e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a1e  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000135e  00000000  00000000  00009aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d8  00000000  00000000  0000ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c7  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b06  00000000  00000000  0000b4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a25  00000000  00000000  00020fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000699ec  00000000  00000000  000279d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000913be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001868  00000000  00000000  00091404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b3  00000000  00000000  00092c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800386c 	.word	0x0800386c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	0800386c 	.word	0x0800386c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <enc28j60_set_transmit_pointers>:

#include "Eth.h"
#include "stdbool.h"

void enc28j60_set_transmit_pointers(uint16_t start_address, uint16_t end_address)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	0002      	movs	r2, r0
 800024c:	1dbb      	adds	r3, r7, #6
 800024e:	801a      	strh	r2, [r3, #0]
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	1c0a      	adds	r2, r1, #0
 8000254:	801a      	strh	r2, [r3, #0]
    // Write to ETXST (Transmit Start Pointer)
    spi_control_write(0, 0x04, (uint8_t)(start_address & 0xFF)); // Low byte
 8000256:	1dbb      	adds	r3, r7, #6
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	001a      	movs	r2, r3
 800025e:	2104      	movs	r1, #4
 8000260:	2000      	movs	r0, #0
 8000262:	f001 fa8b 	bl	800177c <spi_control_write>
    spi_control_write(0, 0x05, (uint8_t)((start_address >> 8) & 0xFF)); // High byte
 8000266:	1dbb      	adds	r3, r7, #6
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	0a1b      	lsrs	r3, r3, #8
 800026c:	b29b      	uxth	r3, r3
 800026e:	b2db      	uxtb	r3, r3
 8000270:	001a      	movs	r2, r3
 8000272:	2105      	movs	r1, #5
 8000274:	2000      	movs	r0, #0
 8000276:	f001 fa81 	bl	800177c <spi_control_write>

    // Write to ETXND (Transmit End Pointer)
    spi_control_write(0, 0x06, (uint8_t)(end_address & 0xFF)); // Low byte
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	001a      	movs	r2, r3
 8000282:	2106      	movs	r1, #6
 8000284:	2000      	movs	r0, #0
 8000286:	f001 fa79 	bl	800177c <spi_control_write>
    spi_control_write(0, 0x07, (uint8_t)((end_address >> 8) & 0xFF)); // High byte
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	0a1b      	lsrs	r3, r3, #8
 8000290:	b29b      	uxth	r3, r3
 8000292:	b2db      	uxtb	r3, r3
 8000294:	001a      	movs	r2, r3
 8000296:	2107      	movs	r1, #7
 8000298:	2000      	movs	r0, #0
 800029a:	f001 fa6f 	bl	800177c <spi_control_write>
}
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b002      	add	sp, #8
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <delay_ms>:

void delay_ms(uint16_t ms)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b084      	sub	sp, #16
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	0002      	movs	r2, r0
 80002ae:	1dbb      	adds	r3, r7, #6
 80002b0:	801a      	strh	r2, [r3, #0]
    for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	e002      	b.n	80002be <delay_ms+0x18>
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	1dbb      	adds	r3, r7, #6
 80002c0:	881a      	ldrh	r2, [r3, #0]
 80002c2:	0013      	movs	r3, r2
 80002c4:	015b      	lsls	r3, r3, #5
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	001a      	movs	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d8f0      	bhi.n	80002b8 <delay_ms+0x12>
        // Simple loop for delay; adjust the multiplier based on clock speed
    }
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46c0      	nop			@ (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b004      	add	sp, #16
 80002de:	bd80      	pop	{r7, pc}

080002e0 <enc28j60_start_transmission>:

void enc28j60_start_transmission(void)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
    uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
 80002e6:	1dfc      	adds	r4, r7, #7
 80002e8:	2100      	movs	r1, #0
 80002ea:	201f      	movs	r0, #31
 80002ec:	f001 fc36 	bl	8001b5c <mac_spi_read>
 80002f0:	0003      	movs	r3, r0
 80002f2:	7023      	strb	r3, [r4, #0]
    econ1 |= 0x08; // Set TXRTS (bit 3)
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	1dfa      	adds	r2, r7, #7
 80002f8:	7812      	ldrb	r2, [r2, #0]
 80002fa:	2108      	movs	r1, #8
 80002fc:	430a      	orrs	r2, r1
 80002fe:	701a      	strb	r2, [r3, #0]
    spi_control_write(0, 0x1F, econ1); // Write back to ECON1
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	001a      	movs	r2, r3
 8000306:	211f      	movs	r1, #31
 8000308:	2000      	movs	r0, #0
 800030a:	f001 fa37 	bl	800177c <spi_control_write>
}
 800030e:	46c0      	nop			@ (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b003      	add	sp, #12
 8000314:	bd90      	pop	{r4, r7, pc}

08000316 <wait_for_transmission_complete>:


bool wait_for_transmission_complete(uint16_t timeout_ms)
{
 8000316:	b5b0      	push	{r4, r5, r7, lr}
 8000318:	b084      	sub	sp, #16
 800031a:	af00      	add	r7, sp, #0
 800031c:	0002      	movs	r2, r0
 800031e:	1dbb      	adds	r3, r7, #6
 8000320:	801a      	strh	r2, [r3, #0]
    uint16_t elapsed = 0;
 8000322:	230e      	movs	r3, #14
 8000324:	18fb      	adds	r3, r7, r3
 8000326:	2200      	movs	r2, #0
 8000328:	801a      	strh	r2, [r3, #0]

    while (elapsed < timeout_ms) {
 800032a:	e017      	b.n	800035c <wait_for_transmission_complete+0x46>
        uint8_t econ1 = mac_spi_read(0x1F, 0); // Read ECON1
 800032c:	250d      	movs	r5, #13
 800032e:	197c      	adds	r4, r7, r5
 8000330:	2100      	movs	r1, #0
 8000332:	201f      	movs	r0, #31
 8000334:	f001 fc12 	bl	8001b5c <mac_spi_read>
 8000338:	0003      	movs	r3, r0
 800033a:	7023      	strb	r3, [r4, #0]
        if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
 800033c:	197b      	adds	r3, r7, r5
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2208      	movs	r2, #8
 8000342:	4013      	ands	r3, r2
 8000344:	d101      	bne.n	800034a <wait_for_transmission_complete+0x34>
            return true;  // Transmission completed
 8000346:	2301      	movs	r3, #1
 8000348:	e010      	b.n	800036c <wait_for_transmission_complete+0x56>
        }

        delay_ms(1);  // Wait 1 ms
 800034a:	2001      	movs	r0, #1
 800034c:	f7ff ffab 	bl	80002a6 <delay_ms>
        elapsed++;
 8000350:	210e      	movs	r1, #14
 8000352:	187b      	adds	r3, r7, r1
 8000354:	881a      	ldrh	r2, [r3, #0]
 8000356:	187b      	adds	r3, r7, r1
 8000358:	3201      	adds	r2, #1
 800035a:	801a      	strh	r2, [r3, #0]
    while (elapsed < timeout_ms) {
 800035c:	230e      	movs	r3, #14
 800035e:	18fa      	adds	r2, r7, r3
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	8812      	ldrh	r2, [r2, #0]
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d3e0      	bcc.n	800032c <wait_for_transmission_complete+0x16>
    }

    return false;  // Timed out
 800036a:	2300      	movs	r3, #0
}
 800036c:	0018      	movs	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	b004      	add	sp, #16
 8000372:	bdb0      	pop	{r4, r5, r7, pc}

08000374 <enc28j60_transmission_successful>:

bool enc28j60_transmission_successful()
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
    uint8_t estat = mac_spi_read(0x1D, 0); // Read ESTAT
 800037a:	1dfc      	adds	r4, r7, #7
 800037c:	2100      	movs	r1, #0
 800037e:	201d      	movs	r0, #29
 8000380:	f001 fbec 	bl	8001b5c <mac_spi_read>
 8000384:	0003      	movs	r3, r0
 8000386:	7023      	strb	r3, [r4, #0]
    return !(estat & 0x01); // Check if TXABRT (bit 0) is not set
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2201      	movs	r2, #1
 800038e:	4013      	ands	r3, r2
 8000390:	425a      	negs	r2, r3
 8000392:	4153      	adcs	r3, r2
 8000394:	b2db      	uxtb	r3, r3
}
 8000396:	0018      	movs	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	b003      	add	sp, #12
 800039c:	bd90      	pop	{r4, r7, pc}
	...

080003a0 <send_simple_packet>:


void send_simple_packet(int argc, char *argv[]) {
 80003a0:	b5b0      	push	{r4, r5, r7, lr}
 80003a2:	b09e      	sub	sp, #120	@ 0x78
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
    uint8_t ethernet_frame[64];  // Minimum Ethernet frame size
    uint8_t *frame_ptr = ethernet_frame;
 80003aa:	232c      	movs	r3, #44	@ 0x2c
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	677b      	str	r3, [r7, #116]	@ 0x74

    // Ethernet header (14 bytes)
    uint8_t dest_mac[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}; // Broadcast
 80003b0:	2024      	movs	r0, #36	@ 0x24
 80003b2:	183b      	adds	r3, r7, r0
 80003b4:	4a58      	ldr	r2, [pc, #352]	@ (8000518 <send_simple_packet+0x178>)
 80003b6:	6811      	ldr	r1, [r2, #0]
 80003b8:	6019      	str	r1, [r3, #0]
 80003ba:	8892      	ldrh	r2, [r2, #4]
 80003bc:	809a      	strh	r2, [r3, #4]
    uint8_t source_mac[] = {0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E}; // STM32 MAC
 80003be:	251c      	movs	r5, #28
 80003c0:	197b      	adds	r3, r7, r5
 80003c2:	4a56      	ldr	r2, [pc, #344]	@ (800051c <send_simple_packet+0x17c>)
 80003c4:	6811      	ldr	r1, [r2, #0]
 80003c6:	6019      	str	r1, [r3, #0]
 80003c8:	8892      	ldrh	r2, [r2, #4]
 80003ca:	809a      	strh	r2, [r3, #4]
    uint16_t eth_type = 0x0800; // IPv4 (big endian)
 80003cc:	2472      	movs	r4, #114	@ 0x72
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	2280      	movs	r2, #128	@ 0x80
 80003d2:	0112      	lsls	r2, r2, #4
 80003d4:	801a      	strh	r2, [r3, #0]

    memcpy(frame_ptr, dest_mac, 6);  // Destination MAC
 80003d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80003d8:	183b      	adds	r3, r7, r0
 80003da:	0010      	movs	r0, r2
 80003dc:	0019      	movs	r1, r3
 80003de:	2306      	movs	r3, #6
 80003e0:	001a      	movs	r2, r3
 80003e2:	f002 fc60 	bl	8002ca6 <memcpy>
    frame_ptr += 6;
 80003e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80003e8:	3306      	adds	r3, #6
 80003ea:	677b      	str	r3, [r7, #116]	@ 0x74
    memcpy(frame_ptr, source_mac, 6); // Source MAC
 80003ec:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80003ee:	197b      	adds	r3, r7, r5
 80003f0:	0010      	movs	r0, r2
 80003f2:	0019      	movs	r1, r3
 80003f4:	2306      	movs	r3, #6
 80003f6:	001a      	movs	r2, r3
 80003f8:	f002 fc55 	bl	8002ca6 <memcpy>
    frame_ptr += 6;
 80003fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80003fe:	3306      	adds	r3, #6
 8000400:	677b      	str	r3, [r7, #116]	@ 0x74
    frame_ptr[0] = (eth_type >> 8) & 0xFF; // Ethernet type high byte
 8000402:	193b      	adds	r3, r7, r4
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	0a1b      	lsrs	r3, r3, #8
 8000408:	b29b      	uxth	r3, r3
 800040a:	b2da      	uxtb	r2, r3
 800040c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800040e:	701a      	strb	r2, [r3, #0]
    frame_ptr[1] = eth_type & 0xFF;        // Ethernet type low byte
 8000410:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000412:	3301      	adds	r3, #1
 8000414:	193a      	adds	r2, r7, r4
 8000416:	8812      	ldrh	r2, [r2, #0]
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	701a      	strb	r2, [r3, #0]
    frame_ptr += 2;
 800041c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800041e:	3302      	adds	r3, #2
 8000420:	677b      	str	r3, [r7, #116]	@ 0x74

    // Add payload
    char payload[] = "Hello from STM32!";
 8000422:	2508      	movs	r5, #8
 8000424:	197b      	adds	r3, r7, r5
 8000426:	4a3e      	ldr	r2, [pc, #248]	@ (8000520 <send_simple_packet+0x180>)
 8000428:	ca13      	ldmia	r2!, {r0, r1, r4}
 800042a:	c313      	stmia	r3!, {r0, r1, r4}
 800042c:	6811      	ldr	r1, [r2, #0]
 800042e:	6019      	str	r1, [r3, #0]
 8000430:	8892      	ldrh	r2, [r2, #4]
 8000432:	809a      	strh	r2, [r3, #4]
    memcpy(frame_ptr, payload, strlen(payload));
 8000434:	197b      	adds	r3, r7, r5
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff fe66 	bl	8000108 <strlen>
 800043c:	0002      	movs	r2, r0
 800043e:	1979      	adds	r1, r7, r5
 8000440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000442:	0018      	movs	r0, r3
 8000444:	f002 fc2f 	bl	8002ca6 <memcpy>
    frame_ptr += strlen(payload);
 8000448:	197b      	adds	r3, r7, r5
 800044a:	0018      	movs	r0, r3
 800044c:	f7ff fe5c 	bl	8000108 <strlen>
 8000450:	0002      	movs	r2, r0
 8000452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000454:	189b      	adds	r3, r3, r2
 8000456:	677b      	str	r3, [r7, #116]	@ 0x74

    // Pad to meet minimum Ethernet frame size
    while ((frame_ptr - ethernet_frame) < 64) {
 8000458:	e004      	b.n	8000464 <send_simple_packet+0xc4>
        *frame_ptr++ = 0x00;
 800045a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800045c:	1c5a      	adds	r2, r3, #1
 800045e:	677a      	str	r2, [r7, #116]	@ 0x74
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
    while ((frame_ptr - ethernet_frame) < 64) {
 8000464:	212c      	movs	r1, #44	@ 0x2c
 8000466:	187b      	adds	r3, r7, r1
 8000468:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800046a:	1ad3      	subs	r3, r2, r3
 800046c:	2b3f      	cmp	r3, #63	@ 0x3f
 800046e:	ddf4      	ble.n	800045a <send_simple_packet+0xba>
    }

    uint16_t frame_size = frame_ptr - ethernet_frame;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000474:	1ad2      	subs	r2, r2, r3
 8000476:	2170      	movs	r1, #112	@ 0x70
 8000478:	187b      	adds	r3, r7, r1
 800047a:	801a      	strh	r2, [r3, #0]

    // Ensure the frame size does not exceed buffer memory size (0x1FFF)
    uint16_t start_address = 0x000A;
 800047c:	206e      	movs	r0, #110	@ 0x6e
 800047e:	183b      	adds	r3, r7, r0
 8000480:	220a      	movs	r2, #10
 8000482:	801a      	strh	r2, [r3, #0]
    if ((start_address + frame_size - 1) > 0x1FFF) {
 8000484:	183b      	adds	r3, r7, r0
 8000486:	881a      	ldrh	r2, [r3, #0]
 8000488:	187b      	adds	r3, r7, r1
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	18d2      	adds	r2, r2, r3
 800048e:	2380      	movs	r3, #128	@ 0x80
 8000490:	019b      	lsls	r3, r3, #6
 8000492:	429a      	cmp	r2, r3
 8000494:	dd04      	ble.n	80004a0 <send_simple_packet+0x100>
        printf("\nInvalid Buffer Size. Buffer exceeds valid address range.\n");
 8000496:	4b23      	ldr	r3, [pc, #140]	@ (8000524 <send_simple_packet+0x184>)
 8000498:	0018      	movs	r0, r3
 800049a:	f002 f937 	bl	800270c <puts>
 800049e:	e038      	b.n	8000512 <send_simple_packet+0x172>
        return;
    }

    uint16_t end_address = start_address + frame_size - 1;
 80004a0:	216e      	movs	r1, #110	@ 0x6e
 80004a2:	187a      	adds	r2, r7, r1
 80004a4:	2070      	movs	r0, #112	@ 0x70
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	8812      	ldrh	r2, [r2, #0]
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	18d3      	adds	r3, r2, r3
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	256c      	movs	r5, #108	@ 0x6c
 80004b2:	197b      	adds	r3, r7, r5
 80004b4:	3a01      	subs	r2, #1
 80004b6:	801a      	strh	r2, [r3, #0]

    // Write the frame to ENC28J60 buffer
    spi_buffer_write(frame_size, start_address, ethernet_frame);
 80004b8:	183b      	adds	r3, r7, r0
 80004ba:	8818      	ldrh	r0, [r3, #0]
 80004bc:	232c      	movs	r3, #44	@ 0x2c
 80004be:	18fa      	adds	r2, r7, r3
 80004c0:	000c      	movs	r4, r1
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	0019      	movs	r1, r3
 80004c8:	f001 f9fc 	bl	80018c4 <spi_buffer_write>

    // Set transmit pointers
    enc28j60_set_transmit_pointers(start_address, end_address);
 80004cc:	197b      	adds	r3, r7, r5
 80004ce:	881a      	ldrh	r2, [r3, #0]
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	0011      	movs	r1, r2
 80004d6:	0018      	movs	r0, r3
 80004d8:	f7ff feb4 	bl	8000244 <enc28j60_set_transmit_pointers>

    // Start transmission
    enc28j60_start_transmission();
 80004dc:	f7ff ff00 	bl	80002e0 <enc28j60_start_transmission>

    if (wait_for_transmission_complete(500)) {  // Wait up to 50 ms
 80004e0:	23fa      	movs	r3, #250	@ 0xfa
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff ff16 	bl	8000316 <wait_for_transmission_complete>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d00d      	beq.n	800050a <send_simple_packet+0x16a>
        if (enc28j60_transmission_successful()) {
 80004ee:	f7ff ff41 	bl	8000374 <enc28j60_transmission_successful>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d004      	beq.n	8000500 <send_simple_packet+0x160>
            printf("Packet transmitted successfully.\n");
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <send_simple_packet+0x188>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 f907 	bl	800270c <puts>
 80004fe:	e008      	b.n	8000512 <send_simple_packet+0x172>
        } else {
            printf("Transmission failed. Check error flags.\n");
 8000500:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <send_simple_packet+0x18c>)
 8000502:	0018      	movs	r0, r3
 8000504:	f002 f902 	bl	800270c <puts>
 8000508:	e003      	b.n	8000512 <send_simple_packet+0x172>
        }
    } else {
        printf("Transmission timeout. ENC28J60 may not be functioning correctly.\n");
 800050a:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <send_simple_packet+0x190>)
 800050c:	0018      	movs	r0, r3
 800050e:	f002 f8fd 	bl	800270c <puts>
    }
}
 8000512:	46bd      	mov	sp, r7
 8000514:	b01e      	add	sp, #120	@ 0x78
 8000516:	bdb0      	pop	{r4, r5, r7, pc}
 8000518:	08003950 	.word	0x08003950
 800051c:	08003958 	.word	0x08003958
 8000520:	08003960 	.word	0x08003960
 8000524:	08003884 	.word	0x08003884
 8000528:	080038c0 	.word	0x080038c0
 800052c:	080038e4 	.word	0x080038e4
 8000530:	0800390c 	.word	0x0800390c

08000534 <cbfifo_init>:


/*
 * Initialize the FIFO structure.
 */
void cbfifo_init(cbfifo_t *fifo) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d00b      	beq.n	800055a <cbfifo_init+0x26>
        fifo->write = 0;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2280      	movs	r2, #128	@ 0x80
 8000546:	2100      	movs	r1, #0
 8000548:	5099      	str	r1, [r3, r2]
        fifo->read = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2284      	movs	r2, #132	@ 0x84
 800054e:	2100      	movs	r1, #0
 8000550:	5099      	str	r1, [r3, r2]
        fifo->length = 0;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2288      	movs	r2, #136	@ 0x88
 8000556:	2100      	movs	r1, #0
 8000558:	5099      	str	r1, [r3, r2]
    }
}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}

08000562 <cbfifo_enqueue>:
 *
 * Returns:
 *   The number of bytes actually enqueued, which could be 0.
 *   In case of an error, returns (size_t) -1.
 */
size_t cbfifo_enqueue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 8000562:	b580      	push	{r7, lr}
 8000564:	b088      	sub	sp, #32
 8000566:	af00      	add	r7, sp, #0
 8000568:	60f8      	str	r0, [r7, #12]
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL) {
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d002      	beq.n	800057a <cbfifo_enqueue+0x18>
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d102      	bne.n	8000580 <cbfifo_enqueue+0x1e>
        return FIFO_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	425b      	negs	r3, r3
 800057e:	e03b      	b.n	80005f8 <cbfifo_enqueue+0x96>
    }
    if (nbyte == 0) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d101      	bne.n	800058a <cbfifo_enqueue+0x28>
        return 0;
 8000586:	2300      	movs	r3, #0
 8000588:	e036      	b.n	80005f8 <cbfifo_enqueue+0x96>
    }
    size_t blank = (MAX_FIFO_SIZE - (fifo->length));
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2288      	movs	r2, #136	@ 0x88
 800058e:	589b      	ldr	r3, [r3, r2]
 8000590:	2280      	movs	r2, #128	@ 0x80
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	61bb      	str	r3, [r7, #24]
    if (blank == 0) {
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <cbfifo_enqueue+0x3e>
        return 0;
 800059c:	2300      	movs	r3, #0
 800059e:	e02b      	b.n	80005f8 <cbfifo_enqueue+0x96>
    }
    size_t endq = (nbyte <= blank) ? nbyte : blank;
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d900      	bls.n	80005aa <cbfifo_enqueue+0x48>
 80005a8:	0013      	movs	r3, r2
 80005aa:	617b      	str	r3, [r7, #20]
    uint8_t *temp = (uint8_t*)buf;
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < endq; i++) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
 80005b4:	e01b      	b.n	80005ee <cbfifo_enqueue+0x8c>
        fifo->buffer[fifo->write] = temp[i];
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	18d2      	adds	r2, r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	585b      	ldr	r3, [r3, r1]
 80005c2:	7811      	ldrb	r1, [r2, #0]
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	54d1      	strb	r1, [r2, r3]
        fifo->length++;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2288      	movs	r2, #136	@ 0x88
 80005cc:	589b      	ldr	r3, [r3, r2]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2188      	movs	r1, #136	@ 0x88
 80005d4:	505a      	str	r2, [r3, r1]
        fifo->write = ((fifo->write + 1) & (MAX_FIFO_SIZE-1)); // Increment write pointer with wrap-around
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	589b      	ldr	r3, [r3, r2]
 80005dc:	3301      	adds	r3, #1
 80005de:	227f      	movs	r2, #127	@ 0x7f
 80005e0:	401a      	ands	r2, r3
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2180      	movs	r1, #128	@ 0x80
 80005e6:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	3301      	adds	r3, #1
 80005ec:	61fb      	str	r3, [r7, #28]
 80005ee:	69fa      	ldr	r2, [r7, #28]
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d3df      	bcc.n	80005b6 <cbfifo_enqueue+0x54>
    }
    return endq;
 80005f6:	697b      	ldr	r3, [r7, #20]
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b008      	add	sp, #32
 80005fe:	bd80      	pop	{r7, pc}

08000600 <cbfifo_dequeue>:
 *   nbyte   Bytes of data requested
 *
 * Returns:
 *   The number of bytes actually removed.
 */
size_t cbfifo_dequeue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL || nbyte == 0 || fifo->length == 0) {
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00a      	beq.n	8000628 <cbfifo_dequeue+0x28>
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d007      	beq.n	8000628 <cbfifo_dequeue+0x28>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d004      	beq.n	8000628 <cbfifo_dequeue+0x28>
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2288      	movs	r2, #136	@ 0x88
 8000622:	589b      	ldr	r3, [r3, r2]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <cbfifo_dequeue+0x2c>
        return 0;
 8000628:	2300      	movs	r3, #0
 800062a:	e02d      	b.n	8000688 <cbfifo_dequeue+0x88>
    }
    size_t endq = (nbyte <= fifo->length) ? nbyte : fifo->length;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2288      	movs	r2, #136	@ 0x88
 8000630:	589a      	ldr	r2, [r3, r2]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4293      	cmp	r3, r2
 8000636:	d900      	bls.n	800063a <cbfifo_dequeue+0x3a>
 8000638:	0013      	movs	r3, r2
 800063a:	61bb      	str	r3, [r7, #24]
    uint8_t *temp = (uint8_t*)buf;
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < endq; i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
 8000644:	e01b      	b.n	800067e <cbfifo_dequeue+0x7e>
        temp[i] = fifo->buffer[fifo->read];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2284      	movs	r2, #132	@ 0x84
 800064a:	589a      	ldr	r2, [r3, r2]
 800064c:	6979      	ldr	r1, [r7, #20]
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	18cb      	adds	r3, r1, r3
 8000652:	68f9      	ldr	r1, [r7, #12]
 8000654:	5c8a      	ldrb	r2, [r1, r2]
 8000656:	701a      	strb	r2, [r3, #0]
        fifo->length--;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2288      	movs	r2, #136	@ 0x88
 800065c:	589b      	ldr	r3, [r3, r2]
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2188      	movs	r1, #136	@ 0x88
 8000664:	505a      	str	r2, [r3, r1]
        fifo->read = ((fifo->read + 1) & (MAX_FIFO_SIZE-1)); // Increment read pointer with wrap-around
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2284      	movs	r2, #132	@ 0x84
 800066a:	589b      	ldr	r3, [r3, r2]
 800066c:	3301      	adds	r3, #1
 800066e:	227f      	movs	r2, #127	@ 0x7f
 8000670:	401a      	ands	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2184      	movs	r1, #132	@ 0x84
 8000676:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	3301      	adds	r3, #1
 800067c:	61fb      	str	r3, [r7, #28]
 800067e:	69fa      	ldr	r2, [r7, #28]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	429a      	cmp	r2, r3
 8000684:	d3df      	bcc.n	8000646 <cbfifo_dequeue+0x46>
    }
    return endq;
 8000686:	69bb      	ldr	r3, [r7, #24]
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b008      	add	sp, #32
 800068e:	bd80      	pop	{r7, pc}

08000690 <cbfifo_length>:
 *   fifo    Pointer to the FIFO structure
 *
 * Returns:
 *   Number of bytes currently available to be dequeued from the FIFO.
 */
size_t cbfifo_length(cbfifo_t *fifo) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
    return (fifo != NULL) ? fifo->length : 0; // Return length or 0 if fifo is NULL
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d003      	beq.n	80006a6 <cbfifo_length+0x16>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2288      	movs	r2, #136	@ 0x88
 80006a2:	589b      	ldr	r3, [r3, r2]
 80006a4:	e000      	b.n	80006a8 <cbfifo_length+0x18>
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b002      	add	sp, #8
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <ULED_ON>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_ON() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_ON_MASK;
 80006b4:	2390      	movs	r3, #144	@ 0x90
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	2390      	movs	r3, #144	@ 0x90
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2120      	movs	r1, #32
 80006c0:	430a      	orrs	r2, r1
 80006c2:	619a      	str	r2, [r3, #24]
}
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <ULED_OFF>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_OFF() {
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_OFF_MASK;
 80006ce:	2390      	movs	r3, #144	@ 0x90
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	699a      	ldr	r2, [r3, #24]
 80006d4:	2390      	movs	r3, #144	@ 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2180      	movs	r1, #128	@ 0x80
 80006da:	0389      	lsls	r1, r1, #14
 80006dc:	430a      	orrs	r2, r1
 80006de:	619a      	str	r2, [r3, #24]
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <cmd_led>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_led(int argc, char *argv[]) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
	if (argc != 2) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d004      	beq.n	8000702 <cmd_led+0x1a>
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <cmd_led+0x6c>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 f806 	bl	800270c <puts>
		return;
 8000700:	e025      	b.n	800074e <cmd_led+0x66>
	}
	if (strcasecmp(argv[1], "ON") == 0) {
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	3304      	adds	r3, #4
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <cmd_led+0x70>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f002 f9b1 	bl	8002a74 <strcasecmp>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d106      	bne.n	8000724 <cmd_led+0x3c>
		ULED_ON();
 8000716:	f7ff ffcb 	bl	80006b0 <ULED_ON>
		printf("\nLED turned ON\n");
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <cmd_led+0x74>)
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fff5 	bl	800270c <puts>
 8000722:	e014      	b.n	800074e <cmd_led+0x66>
	} else if (strcasecmp(argv[1], "OFF") == 0) {
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	3304      	adds	r3, #4
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a0d      	ldr	r2, [pc, #52]	@ (8000760 <cmd_led+0x78>)
 800072c:	0011      	movs	r1, r2
 800072e:	0018      	movs	r0, r3
 8000730:	f002 f9a0 	bl	8002a74 <strcasecmp>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d106      	bne.n	8000746 <cmd_led+0x5e>
		ULED_OFF();
 8000738:	f7ff ffc7 	bl	80006ca <ULED_OFF>
		printf("\nLED turned OFF\n");
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <cmd_led+0x7c>)
 800073e:	0018      	movs	r0, r3
 8000740:	f001 ffe4 	bl	800270c <puts>
 8000744:	e003      	b.n	800074e <cmd_led+0x66>
	} else {
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 8000746:	4b03      	ldr	r3, [pc, #12]	@ (8000754 <cmd_led+0x6c>)
 8000748:	0018      	movs	r0, r3
 800074a:	f001 ffdf 	bl	800270c <puts>
	}
}
 800074e:	46bd      	mov	sp, r7
 8000750:	b002      	add	sp, #8
 8000752:	bd80      	pop	{r7, pc}
 8000754:	080039f4 	.word	0x080039f4
 8000758:	08003a24 	.word	0x08003a24
 800075c:	08003a28 	.word	0x08003a28
 8000760:	08003a38 	.word	0x08003a38
 8000764:	08003a3c 	.word	0x08003a3c

08000768 <cmd_echo>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_echo(int argc, char *argv[]) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	printf("\n");
 8000772:	200a      	movs	r0, #10
 8000774:	f001 ff6a 	bl	800264c <putchar>
	for (int i = 1; i < argc; i++) {
 8000778:	2301      	movs	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e00c      	b.n	8000798 <cmd_echo+0x30>
		printf("%s ", argv[i]);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	18d3      	adds	r3, r2, r3
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <cmd_echo+0x48>)
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f001 ff4d 	bl	800262c <iprintf>
	for (int i = 1; i < argc; i++) {
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	dbee      	blt.n	800077e <cmd_echo+0x16>
	}
	printf("\n");
 80007a0:	200a      	movs	r0, #10
 80007a2:	f001 ff53 	bl	800264c <putchar>
}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b004      	add	sp, #16
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	08003a4c 	.word	0x08003a4c

080007b4 <cmd_hexdump>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_hexdump(int argc, char *argv[]) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	if (argc != 3) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d004      	beq.n	80007ce <cmd_hexdump+0x1a>
		printf(
 80007c4:	4b5b      	ldr	r3, [pc, #364]	@ (8000934 <cmd_hexdump+0x180>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 ffa0 	bl	800270c <puts>
				"\nInvalid command: HEXDUMP requires start and stop addresses\n");
		return;
 80007cc:	e0ae      	b.n	800092c <cmd_hexdump+0x178>
	}

	char *start_address_str = argv[1];
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	613b      	str	r3, [r7, #16]
	if (strlen(start_address_str) < 1 || strlen(start_address_str) > 8) {
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d006      	beq.n	80007ea <cmd_hexdump+0x36>
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff fc92 	bl	8000108 <strlen>
 80007e4:	0003      	movs	r3, r0
 80007e6:	2b08      	cmp	r3, #8
 80007e8:	d904      	bls.n	80007f4 <cmd_hexdump+0x40>
		printf("\nInvalid address\n");
 80007ea:	4b53      	ldr	r3, [pc, #332]	@ (8000938 <cmd_hexdump+0x184>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 ff8d 	bl	800270c <puts>
		return;
 80007f2:	e09b      	b.n	800092c <cmd_hexdump+0x178>
	}

	for (int i = 0; i < strlen(start_address_str); i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
 80007f8:	e01f      	b.n	800083a <cmd_hexdump+0x86>
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	18d3      	adds	r3, r2, r3
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b2f      	cmp	r3, #47	@ 0x2f
 8000804:	d905      	bls.n	8000812 <cmd_hexdump+0x5e>
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	18d3      	adds	r3, r2, r3
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b39      	cmp	r3, #57	@ 0x39
 8000810:	d910      	bls.n	8000834 <cmd_hexdump+0x80>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	781b      	ldrb	r3, [r3, #0]
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 800081a:	2b40      	cmp	r3, #64	@ 0x40
 800081c:	d905      	bls.n	800082a <cmd_hexdump+0x76>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	18d3      	adds	r3, r2, r3
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b46      	cmp	r3, #70	@ 0x46
 8000828:	d904      	bls.n	8000834 <cmd_hexdump+0x80>
			printf("\nInvalid address\n");
 800082a:	4b43      	ldr	r3, [pc, #268]	@ (8000938 <cmd_hexdump+0x184>)
 800082c:	0018      	movs	r0, r3
 800082e:	f001 ff6d 	bl	800270c <puts>
			return;
 8000832:	e07b      	b.n	800092c <cmd_hexdump+0x178>
	for (int i = 0; i < strlen(start_address_str); i++) {
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	3301      	adds	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff fc63 	bl	8000108 <strlen>
 8000842:	0002      	movs	r2, r0
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	429a      	cmp	r2, r3
 8000848:	d8d7      	bhi.n	80007fa <cmd_hexdump+0x46>
		}
	}
	unsigned int start = (unsigned int) strtol(argv[1], NULL, 16);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	3304      	adds	r3, #4
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2210      	movs	r2, #16
 8000852:	2100      	movs	r1, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f001 fe0f 	bl	8002478 <strtol>
 800085a:	0003      	movs	r3, r0
 800085c:	60fb      	str	r3, [r7, #12]
	unsigned int length;

	switch (strncmp(argv[2], "0X", 2) == 0) {
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	3308      	adds	r3, #8
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4935      	ldr	r1, [pc, #212]	@ (800093c <cmd_hexdump+0x188>)
 8000866:	2202      	movs	r2, #2
 8000868:	0018      	movs	r0, r3
 800086a:	f002 f91d 	bl	8002aa8 <strncmp>
 800086e:	0003      	movs	r3, r0
 8000870:	425a      	negs	r2, r3
 8000872:	4153      	adcs	r3, r2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00c      	beq.n	8000894 <cmd_hexdump+0xe0>
 800087a:	2b01      	cmp	r3, #1
 800087c:	d115      	bne.n	80008aa <cmd_hexdump+0xf6>
	case 1:
		length = (unsigned int) strtol(argv[2], NULL, 16);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3308      	adds	r3, #8
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2210      	movs	r2, #16
 8000886:	2100      	movs	r1, #0
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fdf5 	bl	8002478 <strtol>
 800088e:	0003      	movs	r3, r0
 8000890:	61bb      	str	r3, [r7, #24]
		break;
 8000892:	e00a      	b.n	80008aa <cmd_hexdump+0xf6>
	case 0:
		length = (unsigned int) strtol(argv[2], NULL, 10);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	3308      	adds	r3, #8
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	220a      	movs	r2, #10
 800089c:	2100      	movs	r1, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fdea 	bl	8002478 <strtol>
 80008a4:	0003      	movs	r3, r0
 80008a6:	61bb      	str	r3, [r7, #24]
		break;
 80008a8:	46c0      	nop			@ (mov r8, r8)
	}

	if (length == 0 || length >= 640) {
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d004      	beq.n	80008ba <cmd_hexdump+0x106>
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	23a0      	movs	r3, #160	@ 0xa0
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d304      	bcc.n	80008c4 <cmd_hexdump+0x110>
		printf("\nInvalid length\n");
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <cmd_hexdump+0x18c>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 ff25 	bl	800270c <puts>
		return;
 80008c2:	e033      	b.n	800092c <cmd_hexdump+0x178>
	}

	printf("\nHexdump from %08X to %08X\n", start, start + length - 1);
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	68f9      	ldr	r1, [r7, #12]
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <cmd_hexdump+0x190>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 feab 	bl	800262c <iprintf>

	char *buff = (char*) start;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < length; i++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	e01e      	b.n	800091e <cmd_hexdump+0x16a>
		if ((i % 8) == 0) {
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	2207      	movs	r2, #7
 80008e4:	4013      	ands	r3, r2
 80008e6:	d10d      	bne.n	8000904 <cmd_hexdump+0x150>
			if (i != 0) {
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <cmd_hexdump+0x140>
				printf("\n");
 80008ee:	200a      	movs	r0, #10
 80008f0:	f001 feac 	bl	800264c <putchar>
			}
			printf("%08X ", start + i);  // Address with underscores
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	18d2      	adds	r2, r2, r3
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <cmd_hexdump+0x194>)
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fe94 	bl	800262c <iprintf>
		}
		printf("%02X ", (unsigned char) buff[i]);
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	001a      	movs	r2, r3
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <cmd_hexdump+0x198>)
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fe8a 	bl	800262c <iprintf>
	for (int i = 0; i < length; i++) {
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	429a      	cmp	r2, r3
 8000924:	d8dc      	bhi.n	80008e0 <cmd_hexdump+0x12c>
	}

	printf("\n");
 8000926:	200a      	movs	r0, #10
 8000928:	f001 fe90 	bl	800264c <putchar>
}
 800092c:	46bd      	mov	sp, r7
 800092e:	b008      	add	sp, #32
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	08003a50 	.word	0x08003a50
 8000938:	08003a8c 	.word	0x08003a8c
 800093c:	08003aa0 	.word	0x08003aa0
 8000940:	08003aa4 	.word	0x08003aa4
 8000944:	08003ab4 	.word	0x08003ab4
 8000948:	08003ad0 	.word	0x08003ad0
 800094c:	08003ad8 	.word	0x08003ad8

08000950 <cmd_spi_write>:



void cmd_spi_write(int argc, char *argv[]) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
    if (argc < 3) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b02      	cmp	r3, #2
 800095e:	dc04      	bgt.n	800096a <cmd_spi_write+0x1a>
        printf("\nInvalid command: WRITE requires number of bytes and data\n");
 8000960:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <cmd_spi_write+0xe0>)
 8000962:	0018      	movs	r0, r3
 8000964:	f001 fed2 	bl	800270c <puts>
        return;
 8000968:	e05e      	b.n	8000a28 <cmd_spi_write+0xd8>
    }

    int num_bytes = atoi(argv[1]);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	3304      	adds	r3, #4
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fc35 	bl	80021e0 <atoi>
 8000976:	0003      	movs	r3, r0
 8000978:	613b      	str	r3, [r7, #16]
    if (num_bytes <= 0 || argc != (num_bytes + 2)) {
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	2b00      	cmp	r3, #0
 800097e:	dd04      	ble.n	800098a <cmd_spi_write+0x3a>
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	3302      	adds	r3, #2
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	429a      	cmp	r2, r3
 8000988:	d004      	beq.n	8000994 <cmd_spi_write+0x44>
        printf("\nInvalid command: Incorrect number of data arguments\n");
 800098a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a34 <cmd_spi_write+0xe4>)
 800098c:	0018      	movs	r0, r3
 800098e:	f001 febd 	bl	800270c <puts>
        return;
 8000992:	e049      	b.n	8000a28 <cmd_spi_write+0xd8>
    }

    // Pull CS Low
    GPIOB->ODR &= ~SPI2_CS_PIN;
 8000994:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <cmd_spi_write+0xe8>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	4b27      	ldr	r3, [pc, #156]	@ (8000a38 <cmd_spi_write+0xe8>)
 800099a:	4928      	ldr	r1, [pc, #160]	@ (8000a3c <cmd_spi_write+0xec>)
 800099c:	400a      	ands	r2, r1
 800099e:	615a      	str	r2, [r3, #20]

    // Write each byte
    for (int i = 0; i < num_bytes; i++) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e02f      	b.n	8000a06 <cmd_spi_write+0xb6>
        char *endptr;
        uint8_t data = (uint8_t)strtol(argv[i + 2], &endptr, 16);
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3302      	adds	r3, #2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	18d3      	adds	r3, r2, r3
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2208      	movs	r2, #8
 80009b4:	18b9      	adds	r1, r7, r2
 80009b6:	2210      	movs	r2, #16
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 fd5d 	bl	8002478 <strtol>
 80009be:	0002      	movs	r2, r0
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	701a      	strb	r2, [r3, #0]
        if (*endptr != '\0') {
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d012      	beq.n	80009f4 <cmd_spi_write+0xa4>
            printf("\nInvalid data: %s\n", argv[i + 2]);
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3302      	adds	r3, #2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	18d3      	adds	r3, r2, r3
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <cmd_spi_write+0xf0>)
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 fe24 	bl	800262c <iprintf>
            GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <cmd_spi_write+0xe8>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <cmd_spi_write+0xe8>)
 80009ea:	2180      	movs	r1, #128	@ 0x80
 80009ec:	0149      	lsls	r1, r1, #5
 80009ee:	430a      	orrs	r2, r1
 80009f0:	615a      	str	r2, [r3, #20]
 80009f2:	e019      	b.n	8000a28 <cmd_spi_write+0xd8>
            return;
        }
        SPI_WriteByte(data);
 80009f4:	230f      	movs	r3, #15
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fe28 	bl	8001650 <SPI_WriteByte>
    for (int i = 0; i < num_bytes; i++) {
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbcb      	blt.n	80009a6 <cmd_spi_write+0x56>
    }

    // Pull CS High
    GPIOB->ODR |= SPI2_CS_PIN;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <cmd_spi_write+0xe8>)
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <cmd_spi_write+0xe8>)
 8000a14:	2180      	movs	r1, #128	@ 0x80
 8000a16:	0149      	lsls	r1, r1, #5
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	615a      	str	r2, [r3, #20]

    printf("\nSPI Write Completed: Sent %d bytes\n", num_bytes);
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <cmd_spi_write+0xf4>)
 8000a20:	0011      	movs	r1, r2
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fe02 	bl	800262c <iprintf>
}
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b006      	add	sp, #24
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	08003ae0 	.word	0x08003ae0
 8000a34:	08003b1c 	.word	0x08003b1c
 8000a38:	48000400 	.word	0x48000400
 8000a3c:	ffffefff 	.word	0xffffefff
 8000a40:	08003b54 	.word	0x08003b54
 8000a44:	08003b68 	.word	0x08003b68

08000a48 <cmd_control_spi_write>:


void cmd_control_spi_write(int argc, char *argv[])
{
 8000a48:	b5b0      	push	{r4, r5, r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	dc04      	bgt.n	8000a62 <cmd_control_spi_write+0x1a>
	        printf("\nInvalid command: WRITECONTROL requires register bank, address and data\n");
 8000a58:	4b2e      	ldr	r3, [pc, #184]	@ (8000b14 <cmd_control_spi_write+0xcc>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f001 fe56 	bl	800270c <puts>
	        return;
 8000a60:	e055      	b.n	8000b0e <cmd_control_spi_write+0xc6>
	    }

	int reg_bank = atoi(argv[1]);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	3304      	adds	r3, #4
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 fbb9 	bl	80021e0 <atoi>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	617b      	str	r3, [r7, #20]
	if(reg_bank > 3)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	dd04      	ble.n	8000a82 <cmd_control_spi_write+0x3a>
	{
		printf("\nInvalid Register Bank: Choose between [0, 3]\n");
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <cmd_control_spi_write+0xd0>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 fe46 	bl	800270c <puts>
	  return;
 8000a80:	e045      	b.n	8000b0e <cmd_control_spi_write+0xc6>
	}
	char *endptr;
	    uint8_t addr = (uint8_t)strtol(argv[2], &endptr, 16);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	3308      	adds	r3, #8
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	220c      	movs	r2, #12
 8000a8a:	18b9      	adds	r1, r7, r2
 8000a8c:	2210      	movs	r2, #16
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 fcf2 	bl	8002478 <strtol>
 8000a94:	0002      	movs	r2, r0
 8000a96:	2313      	movs	r3, #19
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	701a      	strb	r2, [r3, #0]

	    if (*endptr != '\0') {
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d008      	beq.n	8000ab6 <cmd_control_spi_write+0x6e>
	                printf("\nInvalid address: %s\n", argv[2]);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	3308      	adds	r3, #8
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <cmd_control_spi_write+0xd4>)
 8000aac:	0011      	movs	r1, r2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 fdbc 	bl	800262c <iprintf>
	                //GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
	                return;
 8000ab4:	e02b      	b.n	8000b0e <cmd_control_spi_write+0xc6>
	            }
	    uint8_t  data= (uint8_t)strtol(argv[3], &endptr, 16);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	330c      	adds	r3, #12
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	220c      	movs	r2, #12
 8000abe:	18b9      	adds	r1, r7, r2
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f001 fcd8 	bl	8002478 <strtol>
 8000ac8:	0002      	movs	r2, r0
 8000aca:	2312      	movs	r3, #18
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	701a      	strb	r2, [r3, #0]
	    if (*endptr != '\0') {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d008      	beq.n	8000aea <cmd_control_spi_write+0xa2>
	                printf("\nInvalid data: %s\n", argv[3]);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	330c      	adds	r3, #12
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <cmd_control_spi_write+0xd8>)
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f001 fda2 	bl	800262c <iprintf>
	                //GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
	                return;
 8000ae8:	e011      	b.n	8000b0e <cmd_control_spi_write+0xc6>
	            }

	    spi_control_write(reg_bank,addr,data);
 8000aea:	2412      	movs	r4, #18
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	2513      	movs	r5, #19
 8000af2:	197b      	adds	r3, r7, r5
 8000af4:	7819      	ldrb	r1, [r3, #0]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 fe3f 	bl	800177c <spi_control_write>
	    printf("\nSPI Write Completed: Sent %x data to %x address in %dnd register bank\n", data, addr, reg_bank);
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	7819      	ldrb	r1, [r3, #0]
 8000b02:	197b      	adds	r3, r7, r5
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	4806      	ldr	r0, [pc, #24]	@ (8000b24 <cmd_control_spi_write+0xdc>)
 8000b0a:	f001 fd8f 	bl	800262c <iprintf>

}
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b006      	add	sp, #24
 8000b12:	bdb0      	pop	{r4, r5, r7, pc}
 8000b14:	08003b90 	.word	0x08003b90
 8000b18:	08003bd8 	.word	0x08003bd8
 8000b1c:	08003c08 	.word	0x08003c08
 8000b20:	08003b54 	.word	0x08003b54
 8000b24:	08003c20 	.word	0x08003c20

08000b28 <cmd_buffer_spi_write>:



void cmd_buffer_spi_write(int argc, char *argv[])
{
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	b091      	sub	sp, #68	@ 0x44
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	61f8      	str	r0, [r7, #28]
 8000b30:	61b9      	str	r1, [r7, #24]
 8000b32:	466b      	mov	r3, sp
 8000b34:	001e      	movs	r6, r3
	if (argc < 4) {
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	dc04      	bgt.n	8000b46 <cmd_buffer_spi_write+0x1e>
		printf("\nInvalid command: WRITEBUFFER requires number of bytes, start address and data\n");
 8000b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb8 <cmd_buffer_spi_write+0x190>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 fde4 	bl	800270c <puts>
		        return;
 8000b44:	e0b3      	b.n	8000cae <cmd_buffer_spi_write+0x186>
		    }
	int num_bytes = atoi(argv[1]);
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f001 fb47 	bl	80021e0 <atoi>
 8000b52:	0003      	movs	r3, r0
 8000b54:	63bb      	str	r3, [r7, #56]	@ 0x38
	if(num_bytes < 1)
 8000b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dc06      	bgt.n	8000b6a <cmd_buffer_spi_write+0x42>
	{
		printf("\nInvalid number of bytes: %d\n",num_bytes);
 8000b5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b5e:	4b57      	ldr	r3, [pc, #348]	@ (8000cbc <cmd_buffer_spi_write+0x194>)
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f001 fd62 	bl	800262c <iprintf>
		return;
 8000b68:	e0a1      	b.n	8000cae <cmd_buffer_spi_write+0x186>
	}
	char *endptr;
	uint16_t start_address = (uint16_t)strtol(argv[2], &endptr, 16);
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	3308      	adds	r3, #8
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2210      	movs	r2, #16
 8000b72:	2118      	movs	r1, #24
 8000b74:	1852      	adds	r2, r2, r1
 8000b76:	19d1      	adds	r1, r2, r7
 8000b78:	2210      	movs	r2, #16
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fc7c 	bl	8002478 <strtol>
 8000b80:	0002      	movs	r2, r0
 8000b82:	231e      	movs	r3, #30
 8000b84:	2118      	movs	r1, #24
 8000b86:	185b      	adds	r3, r3, r1
 8000b88:	19db      	adds	r3, r3, r7
 8000b8a:	801a      	strh	r2, [r3, #0]
	if (*endptr != '\0') {
 8000b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d008      	beq.n	8000ba6 <cmd_buffer_spi_write+0x7e>
	        printf("\nInvalid address: %s\n", argv[2]);
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	3308      	adds	r3, #8
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b49      	ldr	r3, [pc, #292]	@ (8000cc0 <cmd_buffer_spi_write+0x198>)
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 fd44 	bl	800262c <iprintf>
	        return;
 8000ba4:	e083      	b.n	8000cae <cmd_buffer_spi_write+0x186>
	    }
	if(start_address > 0x1FFF)
 8000ba6:	231e      	movs	r3, #30
 8000ba8:	2218      	movs	r2, #24
 8000baa:	189b      	adds	r3, r3, r2
 8000bac:	19db      	adds	r3, r3, r7
 8000bae:	881a      	ldrh	r2, [r3, #0]
 8000bb0:	2380      	movs	r3, #128	@ 0x80
 8000bb2:	019b      	lsls	r3, r3, #6
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d308      	bcc.n	8000bca <cmd_buffer_spi_write+0xa2>
		{
			printf("\nInvalid address: %s\n", argv[2]);
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	3308      	adds	r3, #8
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b40      	ldr	r3, [pc, #256]	@ (8000cc0 <cmd_buffer_spi_write+0x198>)
 8000bc0:	0011      	movs	r1, r2
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f001 fd32 	bl	800262c <iprintf>
		  return;
 8000bc8:	e071      	b.n	8000cae <cmd_buffer_spi_write+0x186>
		}
    uint8_t data_array[num_bytes]; // Array to store data
 8000bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bcc:	1e5a      	subs	r2, r3, #1
 8000bce:	633a      	str	r2, [r7, #48]	@ 0x30
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	0014      	movs	r4, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	0015      	movs	r5, r2
 8000bd8:	0020      	movs	r0, r4
 8000bda:	0029      	movs	r1, r5
 8000bdc:	0002      	movs	r2, r0
 8000bde:	0f52      	lsrs	r2, r2, #29
 8000be0:	000c      	movs	r4, r1
 8000be2:	00e4      	lsls	r4, r4, #3
 8000be4:	617c      	str	r4, [r7, #20]
 8000be6:	697c      	ldr	r4, [r7, #20]
 8000be8:	4314      	orrs	r4, r2
 8000bea:	617c      	str	r4, [r7, #20]
 8000bec:	0002      	movs	r2, r0
 8000bee:	00d2      	lsls	r2, r2, #3
 8000bf0:	613a      	str	r2, [r7, #16]
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	603a      	str	r2, [r7, #0]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	6838      	ldr	r0, [r7, #0]
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	0002      	movs	r2, r0
 8000c00:	0f52      	lsrs	r2, r2, #29
 8000c02:	000c      	movs	r4, r1
 8000c04:	00e4      	lsls	r4, r4, #3
 8000c06:	60fc      	str	r4, [r7, #12]
 8000c08:	68fc      	ldr	r4, [r7, #12]
 8000c0a:	4314      	orrs	r4, r2
 8000c0c:	60fc      	str	r4, [r7, #12]
 8000c0e:	0002      	movs	r2, r0
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	60ba      	str	r2, [r7, #8]
 8000c14:	3307      	adds	r3, #7
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	466a      	mov	r2, sp
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	469d      	mov	sp, r3
 8000c20:	466b      	mov	r3, sp
 8000c22:	3300      	adds	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < num_bytes; i++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c2a:	e027      	b.n	8000c7c <cmd_buffer_spi_write+0x154>
        char *endptr;
        data_array[i] = (uint8_t)strtol(argv[i + 3], &endptr, 16);
 8000c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c2e:	3303      	adds	r3, #3
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	220c      	movs	r2, #12
 8000c3a:	2118      	movs	r1, #24
 8000c3c:	1852      	adds	r2, r2, r1
 8000c3e:	19d1      	adds	r1, r2, r7
 8000c40:	2210      	movs	r2, #16
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 fc18 	bl	8002478 <strtol>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	b2d9      	uxtb	r1, r3
 8000c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c50:	18d3      	adds	r3, r2, r3
 8000c52:	1c0a      	adds	r2, r1, #0
 8000c54:	701a      	strb	r2, [r3, #0]
        if (*endptr != '\0') {
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00b      	beq.n	8000c76 <cmd_buffer_spi_write+0x14e>
            printf("\nInvalid data: %s\n", argv[i + 3]);
 8000c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c60:	3303      	adds	r3, #3
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	18d3      	adds	r3, r2, r3
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <cmd_buffer_spi_write+0x19c>)
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f001 fcdc 	bl	800262c <iprintf>
 8000c74:	e01b      	b.n	8000cae <cmd_buffer_spi_write+0x186>
    for (int i = 0; i < num_bytes; i++) {
 8000c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c78:	3301      	adds	r3, #1
 8000c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbd3      	blt.n	8000c2c <cmd_buffer_spi_write+0x104>
            return ;
        }
    }
    spi_buffer_write(num_bytes,start_address,data_array);
 8000c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c86:	241e      	movs	r4, #30
 8000c88:	2318      	movs	r3, #24
 8000c8a:	18e3      	adds	r3, r4, r3
 8000c8c:	19db      	adds	r3, r3, r7
 8000c8e:	8819      	ldrh	r1, [r3, #0]
 8000c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fe16 	bl	80018c4 <spi_buffer_write>
	printf("\nSPI BUFFER Write Completed: Sent %d bytes starting address %04X\n", num_bytes, start_address);
 8000c98:	2318      	movs	r3, #24
 8000c9a:	18e3      	adds	r3, r4, r3
 8000c9c:	19db      	adds	r3, r3, r7
 8000c9e:	881a      	ldrh	r2, [r3, #0]
 8000ca0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <cmd_buffer_spi_write+0x1a0>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f001 fcc1 	bl	800262c <iprintf>
 8000caa:	46b5      	mov	sp, r6
 8000cac:	e000      	b.n	8000cb0 <cmd_buffer_spi_write+0x188>
		        return;
 8000cae:	46b5      	mov	sp, r6
}
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b011      	add	sp, #68	@ 0x44
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	08003c68 	.word	0x08003c68
 8000cbc:	08003cb8 	.word	0x08003cb8
 8000cc0:	08003c08 	.word	0x08003c08
 8000cc4:	08003b54 	.word	0x08003b54
 8000cc8:	08003cd8 	.word	0x08003cd8

08000ccc <cmd_buffer_spi_read>:


void cmd_buffer_spi_read(int argc, char *argv[])
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b089      	sub	sp, #36	@ 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
    if (argc < 3) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	dc03      	bgt.n	8000ce4 <cmd_buffer_spi_read+0x18>
        printf("\nInvalid command: Buffer READ requires number of bytes and start address\n");
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc8 <cmd_buffer_spi_read+0xfc>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f001 fd14 	bl	800270c <puts>
        //return NULL; // Return NULL to indicate an error
    }

    int num_bytes = atoi(argv[1]); // Parse number of bytes
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	0018      	movs	r0, r3
 8000cec:	f001 fa78 	bl	80021e0 <atoi>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	61bb      	str	r3, [r7, #24]
    if (num_bytes <= 0) {
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	dc03      	bgt.n	8000d02 <cmd_buffer_spi_read+0x36>
        printf("\nInvalid number of bytes: Must be greater than 0\n");
 8000cfa:	4b34      	ldr	r3, [pc, #208]	@ (8000dcc <cmd_buffer_spi_read+0x100>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f001 fd05 	bl	800270c <puts>
        //return NULL; // Return NULL to indicate an error
    }

    char *endptr;
    uint16_t start_address = (uint16_t)strtol(argv[2], &endptr, 16);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	3308      	adds	r3, #8
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	220c      	movs	r2, #12
 8000d0a:	18b9      	adds	r1, r7, r2
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 fbb2 	bl	8002478 <strtol>
 8000d14:	0002      	movs	r2, r0
 8000d16:	2316      	movs	r3, #22
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	801a      	strh	r2, [r3, #0]
    if (*endptr != '\0') {
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d007      	beq.n	8000d34 <cmd_buffer_spi_read+0x68>
            printf("\nInvalid address: %s\n", argv[1]);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	3304      	adds	r3, #4
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <cmd_buffer_spi_read+0x104>)
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 fc7c 	bl	800262c <iprintf>
            //return NULL;
        }
    if (start_address > 0x1FFF) {
 8000d34:	2316      	movs	r3, #22
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	881a      	ldrh	r2, [r3, #0]
 8000d3a:	2380      	movs	r3, #128	@ 0x80
 8000d3c:	019b      	lsls	r3, r3, #6
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d303      	bcc.n	8000d4a <cmd_buffer_spi_read+0x7e>
        printf("\nInvalid Buffer Address: Choose between [0, 0x1FFF]\n");
 8000d42:	4b24      	ldr	r3, [pc, #144]	@ (8000dd4 <cmd_buffer_spi_read+0x108>)
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 fce1 	bl	800270c <puts>
        //return NULL; // Return NULL to indicate an error
    }
    uint8_t *data_buffer = (uint8_t *)malloc(num_bytes);
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 fa4d 	bl	80021ec <malloc>
 8000d52:	0003      	movs	r3, r0
 8000d54:	613b      	str	r3, [r7, #16]
    if (!data_buffer) {
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d103      	bne.n	8000d64 <cmd_buffer_spi_read+0x98>
        printf("\nMemory allocation failed\n");
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <cmd_buffer_spi_read+0x10c>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f001 fcd4 	bl	800270c <puts>
        //return NULL; // Return NULL to indicate an error
    }

	if(num_bytes < 1)
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	dc05      	bgt.n	8000d76 <cmd_buffer_spi_read+0xaa>
		{
			printf("\nInvalid number of bytes: %d\n",num_bytes);
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <cmd_buffer_spi_read+0x110>)
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f001 fc5b 	bl	800262c <iprintf>
			//return NULL;
		}
	spi_buffer_read(num_bytes,start_address,data_buffer);
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	2416      	movs	r4, #22
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	8819      	ldrh	r1, [r3, #0]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 fe6b 	bl	8001a5c <spi_buffer_read>
    printf("\nSPI Read Completed: Address 0x%02X\n", start_address);
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	881a      	ldrh	r2, [r3, #0]
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <cmd_buffer_spi_read+0x114>)
 8000d8c:	0011      	movs	r1, r2
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f001 fc4c 	bl	800262c <iprintf>
    for (int i = 0; i < num_bytes; i++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e00c      	b.n	8000db4 <cmd_buffer_spi_read+0xe8>
        printf("Data[%d]: 0x%02X\n", i, data_buffer[i]);
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	18d3      	adds	r3, r2, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	001a      	movs	r2, r3
 8000da4:	69f9      	ldr	r1, [r7, #28]
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <cmd_buffer_spi_read+0x118>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 fc3f 	bl	800262c <iprintf>
    for (int i = 0; i < num_bytes; i++) {
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3301      	adds	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbee      	blt.n	8000d9a <cmd_buffer_spi_read+0xce>
    }

    //return data_buffer; // Return the pointer to the data buffer
}
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b009      	add	sp, #36	@ 0x24
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	08003d1c 	.word	0x08003d1c
 8000dcc:	08003d68 	.word	0x08003d68
 8000dd0:	08003c08 	.word	0x08003c08
 8000dd4:	08003d9c 	.word	0x08003d9c
 8000dd8:	08003dd0 	.word	0x08003dd0
 8000ddc:	08003cb8 	.word	0x08003cb8
 8000de0:	08003dec 	.word	0x08003dec
 8000de4:	08003e14 	.word	0x08003e14

08000de8 <cmd_spi_read>:


void cmd_spi_read(int argc, char *argv[]) {
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
    if (argc < 2) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	dc04      	bgt.n	8000e02 <cmd_spi_read+0x1a>
        printf("\nInvalid command: READ requires address\n");
 8000df8:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <cmd_spi_read+0x98>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f001 fc86 	bl	800270c <puts>
        return;
 8000e00:	e03a      	b.n	8000e78 <cmd_spi_read+0x90>
    }

    // Parse the address
    char *endptr;
    uint8_t addr = (uint8_t)strtol(argv[1], &endptr, 16);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3304      	adds	r3, #4
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2208      	movs	r2, #8
 8000e0a:	18b9      	adds	r1, r7, r2
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 fb32 	bl	8002478 <strtol>
 8000e14:	0002      	movs	r2, r0
 8000e16:	230f      	movs	r3, #15
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	701a      	strb	r2, [r3, #0]
    if (*endptr != '\0') {
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d008      	beq.n	8000e36 <cmd_spi_read+0x4e>
        printf("\nInvalid address: %s\n", argv[1]);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	3304      	adds	r3, #4
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <cmd_spi_read+0x9c>)
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f001 fbfc 	bl	800262c <iprintf>
        return;
 8000e34:	e020      	b.n	8000e78 <cmd_spi_read+0x90>
    }

    // Pull CS Low
    GPIOB->ODR &= ~SPI2_CS_PIN;
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <cmd_spi_read+0xa0>)
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <cmd_spi_read+0xa0>)
 8000e3c:	4913      	ldr	r1, [pc, #76]	@ (8000e8c <cmd_spi_read+0xa4>)
 8000e3e:	400a      	ands	r2, r1
 8000e40:	615a      	str	r2, [r3, #20]

    // Send address and read data
    SPI_WriteByte(addr);           // Send the address
 8000e42:	250f      	movs	r5, #15
 8000e44:	197b      	adds	r3, r7, r5
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 fc01 	bl	8001650 <SPI_WriteByte>
    uint8_t data = SPI_ReadByte(); // Read the data
 8000e4e:	260e      	movs	r6, #14
 8000e50:	19bc      	adds	r4, r7, r6
 8000e52:	f000 fdb5 	bl	80019c0 <SPI_ReadByte>
 8000e56:	0003      	movs	r3, r0
 8000e58:	7023      	strb	r3, [r4, #0]

    // Pull CS High
    GPIOB->ODR |= SPI2_CS_PIN;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <cmd_spi_read+0xa0>)
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <cmd_spi_read+0xa0>)
 8000e60:	2180      	movs	r1, #128	@ 0x80
 8000e62:	0149      	lsls	r1, r1, #5
 8000e64:	430a      	orrs	r2, r1
 8000e66:	615a      	str	r2, [r3, #20]

    // Print the received data
    printf("\nSPI Read Completed: Address 0x%02X, Data 0x%02X\n", addr, data);
 8000e68:	197b      	adds	r3, r7, r5
 8000e6a:	7819      	ldrb	r1, [r3, #0]
 8000e6c:	19bb      	adds	r3, r7, r6
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <cmd_spi_read+0xa8>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f001 fbda 	bl	800262c <iprintf>
}
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b005      	add	sp, #20
 8000e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	08003e28 	.word	0x08003e28
 8000e84:	08003c08 	.word	0x08003c08
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	ffffefff 	.word	0xffffefff
 8000e90:	08003e50 	.word	0x08003e50

08000e94 <cmd_phy_spi_read>:


void cmd_phy_spi_read(int argc, char *argv[])
{
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	if (argc < 2)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	dc04      	bgt.n	8000eae <cmd_phy_spi_read+0x1a>
	{
		  printf("\nInvalid command: PHY Read requires address\n");
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <cmd_phy_spi_read+0x78>)
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 fc30 	bl	800270c <puts>
		  return;
 8000eac:	e02b      	b.n	8000f06 <cmd_phy_spi_read+0x72>
	}

	char *endptr;
	uint8_t addr = (uint8_t)strtol(argv[1], &endptr, 16);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	18b9      	adds	r1, r7, r2
 8000eb8:	2210      	movs	r2, #16
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f001 fadc 	bl	8002478 <strtol>
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	701a      	strb	r2, [r3, #0]

  if (*endptr != '\0')
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d008      	beq.n	8000ee2 <cmd_phy_spi_read+0x4e>
  {
		printf("\nInvalid address: %s\n", argv[2]);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <cmd_phy_spi_read+0x7c>)
 8000ed8:	0011      	movs	r1, r2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 fba6 	bl	800262c <iprintf>
			                //GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
		return;
 8000ee0:	e011      	b.n	8000f06 <cmd_phy_spi_read+0x72>
	}

  uint16_t data = phy_spi_read(addr);
 8000ee2:	250c      	movs	r5, #12
 8000ee4:	197c      	adds	r4, r7, r5
 8000ee6:	260f      	movs	r6, #15
 8000ee8:	19bb      	adds	r3, r7, r6
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	0018      	movs	r0, r3
 8000eee:	f000 fe84 	bl	8001bfa <phy_spi_read>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	8023      	strh	r3, [r4, #0]
  printf("\nSPI PHY Read Completed: Address 0x%02X, Data 0x%04X\n", addr, data);
 8000ef6:	19bb      	adds	r3, r7, r6
 8000ef8:	7819      	ldrb	r1, [r3, #0]
 8000efa:	197b      	adds	r3, r7, r5
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <cmd_phy_spi_read+0x80>)
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 fb93 	bl	800262c <iprintf>

}
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b005      	add	sp, #20
 8000f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0c:	08003e84 	.word	0x08003e84
 8000f10:	08003c08 	.word	0x08003c08
 8000f14:	08003eb0 	.word	0x08003eb0

08000f18 <cmd_phy_spi_write>:


void cmd_phy_spi_write(int argc, char *argv[])
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	if (argc < 3)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	dc04      	bgt.n	8000f32 <cmd_phy_spi_write+0x1a>
	{
	  printf("\nInvalid command: PHY WRITE requires address and data\n");
 8000f28:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <cmd_phy_spi_write+0xbc>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 fbee 	bl	800270c <puts>
	  return;
 8000f30:	e04d      	b.n	8000fce <cmd_phy_spi_write+0xb6>
	 }

	char *endptr;
  uint8_t addr = (uint8_t)strtol(argv[1], &endptr, 16);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	3304      	adds	r3, #4
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2208      	movs	r2, #8
 8000f3a:	18b9      	adds	r1, r7, r2
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f001 fa9a 	bl	8002478 <strtol>
 8000f44:	0002      	movs	r2, r0
 8000f46:	230f      	movs	r3, #15
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	701a      	strb	r2, [r3, #0]

	if (*endptr != '\0')
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <cmd_phy_spi_write+0x4e>
	{
		printf("\nInvalid address: %s\n", argv[2]);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	3308      	adds	r3, #8
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <cmd_phy_spi_write+0xc0>)
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 fb64 	bl	800262c <iprintf>
		                //GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
		return;
 8000f64:	e033      	b.n	8000fce <cmd_phy_spi_write+0xb6>
  }

	uint16_t data= (uint16_t)strtol(argv[2], &endptr, 16);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	18b9      	adds	r1, r7, r2
 8000f70:	2210      	movs	r2, #16
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fa80 	bl	8002478 <strtol>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	801a      	strh	r2, [r3, #0]
	printf("data = %x\n\r", data);
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	881a      	ldrh	r2, [r3, #0]
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <cmd_phy_spi_write+0xc4>)
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f001 fb4f 	bl	800262c <iprintf>
	if (*endptr != '\0')
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <cmd_phy_spi_write+0x90>
	{
		 printf("\nInvalid data: %s\n", argv[3]);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	330c      	adds	r3, #12
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <cmd_phy_spi_write+0xc8>)
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f001 fb43 	bl	800262c <iprintf>
		                //GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
		 return;
 8000fa6:	e012      	b.n	8000fce <cmd_phy_spi_write+0xb6>
	}

	phy_spi_write(addr, data);
 8000fa8:	240c      	movs	r4, #12
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	250f      	movs	r5, #15
 8000fb2:	197b      	adds	r3, r7, r5
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f000 fe59 	bl	8001c70 <phy_spi_write>

	printf("\nSPI PHY Write Completed: Address 0x%02X, Data 0x%04X\n", addr, data);
 8000fbe:	197b      	adds	r3, r7, r5
 8000fc0:	7819      	ldrb	r1, [r3, #0]
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <cmd_phy_spi_write+0xcc>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f001 fb2f 	bl	800262c <iprintf>

}
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd4:	08003ee8 	.word	0x08003ee8
 8000fd8:	08003c08 	.word	0x08003c08
 8000fdc:	08003f20 	.word	0x08003f20
 8000fe0:	08003b54 	.word	0x08003b54
 8000fe4:	08003f2c 	.word	0x08003f2c

08000fe8 <cmd_eth_spi_read>:


void cmd_eth_spi_read(int argc, char *argv[])
{
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	if (argc < 3)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	dc04      	bgt.n	8001002 <cmd_eth_spi_read+0x1a>
	{
		 printf("\nInvalid command: MAC READ requires reg_bank and address\n");
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <cmd_eth_spi_read+0xa0>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f001 fb86 	bl	800270c <puts>
		 return;
 8001000:	e03e      	b.n	8001080 <cmd_eth_spi_read+0x98>
	}

	int reg_bank = atoi(argv[1]);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3304      	adds	r3, #4
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	0018      	movs	r0, r3
 800100a:	f001 f8e9 	bl	80021e0 <atoi>
 800100e:	0003      	movs	r3, r0
 8001010:	617b      	str	r3, [r7, #20]
	if(reg_bank > 3)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2b03      	cmp	r3, #3
 8001016:	dd04      	ble.n	8001022 <cmd_eth_spi_read+0x3a>
	{
		printf("\nInvalid Register Bank: Choose between [0, 3]\n");
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <cmd_eth_spi_read+0xa4>)
 800101a:	0018      	movs	r0, r3
 800101c:	f001 fb76 	bl	800270c <puts>
		return;
 8001020:	e02e      	b.n	8001080 <cmd_eth_spi_read+0x98>
	}


	char *endptr;
	uint8_t addr = (uint8_t)strtol(argv[2], &endptr, 16);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	3308      	adds	r3, #8
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	220c      	movs	r2, #12
 800102a:	18b9      	adds	r1, r7, r2
 800102c:	2210      	movs	r2, #16
 800102e:	0018      	movs	r0, r3
 8001030:	f001 fa22 	bl	8002478 <strtol>
 8001034:	0002      	movs	r2, r0
 8001036:	2313      	movs	r3, #19
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	701a      	strb	r2, [r3, #0]
	if (*endptr != '\0')
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <cmd_eth_spi_read+0x6e>
	{
		printf("\nInvalid address: %s\n", argv[2]);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	3308      	adds	r3, #8
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <cmd_eth_spi_read+0xa8>)
 800104c:	0011      	movs	r1, r2
 800104e:	0018      	movs	r0, r3
 8001050:	f001 faec 	bl	800262c <iprintf>
		return;
 8001054:	e014      	b.n	8001080 <cmd_eth_spi_read+0x98>
	}

	uint8_t data = eth_spi_read(addr, reg_bank);
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	2512      	movs	r5, #18
 800105c:	197c      	adds	r4, r7, r5
 800105e:	2613      	movs	r6, #19
 8001060:	19bb      	adds	r3, r7, r6
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	0011      	movs	r1, r2
 8001066:	0018      	movs	r0, r3
 8001068:	f000 fe28 	bl	8001cbc <eth_spi_read>
 800106c:	0003      	movs	r3, r0
 800106e:	7023      	strb	r3, [r4, #0]

						    	            // Print the received data
	printf("\nSPI ETH Read Completed: Address 0x%02X, Data 0x%02X\n", addr, data);
 8001070:	19bb      	adds	r3, r7, r6
 8001072:	7819      	ldrb	r1, [r3, #0]
 8001074:	197b      	adds	r3, r7, r5
 8001076:	781a      	ldrb	r2, [r3, #0]
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <cmd_eth_spi_read+0xac>)
 800107a:	0018      	movs	r0, r3
 800107c:	f001 fad6 	bl	800262c <iprintf>

}
 8001080:	46bd      	mov	sp, r7
 8001082:	b007      	add	sp, #28
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	08003f64 	.word	0x08003f64
 800108c:	08003bd8 	.word	0x08003bd8
 8001090:	08003c08 	.word	0x08003c08
 8001094:	08003fa0 	.word	0x08003fa0

08001098 <cmd_mac_spi_read>:


void cmd_mac_spi_read(int argc, char *argv[])
{
 8001098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
			if (argc < 3)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	dc04      	bgt.n	80010b2 <cmd_mac_spi_read+0x1a>
			{
	        printf("\nInvalid command: MAC READ requires reg_bank and address\n");
 80010a8:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <cmd_mac_spi_read+0xa0>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 fb2e 	bl	800270c <puts>
	        return;
 80010b0:	e03e      	b.n	8001130 <cmd_mac_spi_read+0x98>
	    }

			int reg_bank = atoi(argv[1]);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	3304      	adds	r3, #4
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f001 f891 	bl	80021e0 <atoi>
 80010be:	0003      	movs	r3, r0
 80010c0:	617b      	str	r3, [r7, #20]
			if(reg_bank > 3)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	dd04      	ble.n	80010d2 <cmd_mac_spi_read+0x3a>
			{
					printf("\nInvalid Register Bank: Choose between [0, 3]\n");
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <cmd_mac_spi_read+0xa4>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f001 fb1e 	bl	800270c <puts>
				  return;
 80010d0:	e02e      	b.n	8001130 <cmd_mac_spi_read+0x98>
			}


	    char *endptr;
	    uint8_t addr = (uint8_t)strtol(argv[2], &endptr, 16);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	3308      	adds	r3, #8
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	220c      	movs	r2, #12
 80010da:	18b9      	adds	r1, r7, r2
 80010dc:	2210      	movs	r2, #16
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 f9ca 	bl	8002478 <strtol>
 80010e4:	0002      	movs	r2, r0
 80010e6:	2313      	movs	r3, #19
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	701a      	strb	r2, [r3, #0]
	    if (*endptr != '\0')
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d008      	beq.n	8001106 <cmd_mac_spi_read+0x6e>
	    {
	        printf("\nInvalid address: %s\n", argv[2]);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3308      	adds	r3, #8
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <cmd_mac_spi_read+0xa8>)
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f001 fa94 	bl	800262c <iprintf>
	        return;
 8001104:	e014      	b.n	8001130 <cmd_mac_spi_read+0x98>
	    }

	    uint8_t data = mac_spi_read(addr, reg_bank);
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	2512      	movs	r5, #18
 800110c:	197c      	adds	r4, r7, r5
 800110e:	2613      	movs	r6, #19
 8001110:	19bb      	adds	r3, r7, r6
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fd20 	bl	8001b5c <mac_spi_read>
 800111c:	0003      	movs	r3, r0
 800111e:	7023      	strb	r3, [r4, #0]

	            // Print the received data
	    printf("\nSPI MAC Read Completed: Address 0x%02X, Data 0x%02X\n", addr, data);
 8001120:	19bb      	adds	r3, r7, r6
 8001122:	7819      	ldrb	r1, [r3, #0]
 8001124:	197b      	adds	r3, r7, r5
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <cmd_mac_spi_read+0xac>)
 800112a:	0018      	movs	r0, r3
 800112c:	f001 fa7e 	bl	800262c <iprintf>
}
 8001130:	46bd      	mov	sp, r7
 8001132:	b007      	add	sp, #28
 8001134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	08003f64 	.word	0x08003f64
 800113c:	08003bd8 	.word	0x08003bd8
 8001140:	08003c08 	.word	0x08003c08
 8001144:	08003fd8 	.word	0x08003fd8

08001148 <cmd_enc_reset>:


void cmd_enc_reset(int argc, char *argv[])
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
			if (argc != 1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d004      	beq.n	8001162 <cmd_enc_reset+0x1a>
			{
	        printf("\nInvalid command: Reset \n");
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <cmd_enc_reset+0x2c>)
 800115a:	0018      	movs	r0, r3
 800115c:	f001 fad6 	bl	800270c <puts>
	        return;
 8001160:	e005      	b.n	800116e <cmd_enc_reset+0x26>
	    }

		enc_reset();
 8001162:	f000 fde5 	bl	8001d30 <enc_reset>
			// Print the received data
	    printf("\n System Reset");
 8001166:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <cmd_enc_reset+0x30>)
 8001168:	0018      	movs	r0, r3
 800116a:	f001 fa5f 	bl	800262c <iprintf>
}
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08004010 	.word	0x08004010
 8001178:	0800402c 	.word	0x0800402c

0800117c <accumulate_line>:
 * Parameters:
 * Buffer and Buffer Size
 *
 * Returns:
 */
void accumulate_line(char *buffer, int max_size) {
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
	char ch;

	while (1) {
		ch = getchar();
 800118a:	f001 fa45 	bl	8002618 <getchar>
 800118e:	0002      	movs	r2, r0
 8001190:	210b      	movs	r1, #11
 8001192:	187b      	adds	r3, r7, r1
 8001194:	701a      	strb	r2, [r3, #0]
		if ((ch != 255)) {
 8001196:	000a      	movs	r2, r1
 8001198:	18bb      	adds	r3, r7, r2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2bff      	cmp	r3, #255	@ 0xff
 800119e:	d0f4      	beq.n	800118a <accumulate_line+0xe>
			switch (ch) {
 80011a0:	18bb      	adds	r3, r7, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80011a6:	d018      	beq.n	80011da <accumulate_line+0x5e>
 80011a8:	dc32      	bgt.n	8001210 <accumulate_line+0x94>
 80011aa:	2b20      	cmp	r3, #32
 80011ac:	d020      	beq.n	80011f0 <accumulate_line+0x74>
 80011ae:	dc2f      	bgt.n	8001210 <accumulate_line+0x94>
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d007      	beq.n	80011c4 <accumulate_line+0x48>
 80011b4:	2b0d      	cmp	r3, #13
 80011b6:	d12b      	bne.n	8001210 <accumulate_line+0x94>
			case '\r':
				buffer[index] = '\0';
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	18d3      	adds	r3, r2, r3
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
				return;
 80011c2:	e04f      	b.n	8001264 <accumulate_line+0xe8>
			case '\b':
				if (index > 0) {
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	dd48      	ble.n	800125c <accumulate_line+0xe0>
					index--;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
					printf("\b \b");
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <accumulate_line+0xf0>)
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 fa2a 	bl	800262c <iprintf>
				}
				break;
 80011d8:	e040      	b.n	800125c <accumulate_line+0xe0>
			case '\177':
				if (index > 0) {
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	dd3f      	ble.n	8001260 <accumulate_line+0xe4>
					index--;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
					printf("\177 \177");
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <accumulate_line+0xf4>)
 80011e8:	0018      	movs	r0, r3
 80011ea:	f001 fa1f 	bl	800262c <iprintf>
				}
				break;
 80011ee:	e037      	b.n	8001260 <accumulate_line+0xe4>
			case ' ':
				printf("%c", ch);
 80011f0:	240b      	movs	r4, #11
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	0018      	movs	r0, r3
 80011f8:	f001 fa28 	bl	800264c <putchar>
				buffer[index] = ch;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	18d3      	adds	r3, r2, r3
 8001202:	193a      	adds	r2, r7, r4
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	701a      	strb	r2, [r3, #0]
				index++;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
				break;
 800120e:	e028      	b.n	8001262 <accumulate_line+0xe6>
			default:
				printf("%c", ch);
 8001210:	240b      	movs	r4, #11
 8001212:	193b      	adds	r3, r7, r4
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	0018      	movs	r0, r3
 8001218:	f001 fa18 	bl	800264c <putchar>
				buffer[index] = toupper((unsigned char )ch);
 800121c:	210a      	movs	r1, #10
 800121e:	187b      	adds	r3, r7, r1
 8001220:	193a      	adds	r2, r7, r4
 8001222:	7812      	ldrb	r2, [r2, #0]
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	187b      	adds	r3, r7, r1
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <accumulate_line+0xf8>)
 800122e:	18d3      	adds	r3, r2, r3
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	001a      	movs	r2, r3
 8001234:	2303      	movs	r3, #3
 8001236:	4013      	ands	r3, r2
 8001238:	2b02      	cmp	r3, #2
 800123a:	d103      	bne.n	8001244 <accumulate_line+0xc8>
 800123c:	187b      	adds	r3, r7, r1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3b20      	subs	r3, #32
 8001242:	e002      	b.n	800124a <accumulate_line+0xce>
 8001244:	230a      	movs	r3, #10
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	188a      	adds	r2, r1, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	7013      	strb	r3, [r2, #0]
				index++;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
				break;
 800125a:	e002      	b.n	8001262 <accumulate_line+0xe6>
				break;
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	e794      	b.n	800118a <accumulate_line+0xe>
				break;
 8001260:	46c0      	nop			@ (mov r8, r8)
		ch = getchar();
 8001262:	e792      	b.n	800118a <accumulate_line+0xe>
			}
		}
	}
}
 8001264:	46bd      	mov	sp, r7
 8001266:	b005      	add	sp, #20
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	0800403c 	.word	0x0800403c
 8001270:	08004040 	.word	0x08004040
 8001274:	08004238 	.word	0x08004238

08001278 <tokenize_line>:
 *   max capacity of argument count buffer
 *
 * Returns:
 *   None.
 */
int tokenize_line(char *line, char *argv[], int max_tokens) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
	int argc = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
	char *token = strtok(line, " ");
 8001288:	4a11      	ldr	r2, [pc, #68]	@ (80012d0 <tokenize_line+0x58>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	0011      	movs	r1, r2
 800128e:	0018      	movs	r0, r3
 8001290:	f001 fc1c 	bl	8002acc <strtok>
 8001294:	0003      	movs	r3, r0
 8001296:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 8001298:	e00e      	b.n	80012b8 <tokenize_line+0x40>
		argv[argc++] = token;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	617a      	str	r2, [r7, #20]
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	601a      	str	r2, [r3, #0]
		token = strtok(NULL, " ");
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <tokenize_line+0x58>)
 80012ac:	0019      	movs	r1, r3
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fc0c 	bl	8002acc <strtok>
 80012b4:	0003      	movs	r3, r0
 80012b6:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <tokenize_line+0x4e>
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbe9      	blt.n	800129a <tokenize_line+0x22>
	}
	return argc;
 80012c6:	697b      	ldr	r3, [r7, #20]
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b006      	add	sp, #24
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08004044 	.word	0x08004044

080012d4 <process_command>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void process_command(int argc, char *argv[]) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	if (argc == 0) {
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d104      	bne.n	80012ee <process_command+0x1a>
		printf("\nNo command provided\n");
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <process_command+0x70>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f001 fa10 	bl	800270c <puts>
		return;
 80012ec:	e027      	b.n	800133e <process_command+0x6a>
	}
	for (int i = 0; i < num_commands; i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e018      	b.n	8001326 <process_command+0x52>
		if (strcasecmp(argv[0], commands[i].name) == 0) {
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <process_command+0x74>)
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	58d3      	ldr	r3, [r2, r3]
 8001300:	0019      	movs	r1, r3
 8001302:	f001 fbb7 	bl	8002a74 <strcasecmp>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d10a      	bne.n	8001320 <process_command+0x4c>
			commands[i].handler(argc, argv);
 800130a:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <process_command+0x74>)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	18d3      	adds	r3, r2, r3
 8001312:	3304      	adds	r3, #4
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6839      	ldr	r1, [r7, #0]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	0010      	movs	r0, r2
 800131c:	4798      	blx	r3
			return;
 800131e:	e00e      	b.n	800133e <process_command+0x6a>
	for (int i = 0; i < num_commands; i++) {
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <process_command+0x78>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbe1      	blt.n	80012f4 <process_command+0x20>
		}
	}
	printf("\nUnknown command: %s\n", argv[0]);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <process_command+0x7c>)
 8001336:	0011      	movs	r1, r2
 8001338:	0018      	movs	r0, r3
 800133a:	f001 f977 	bl	800262c <iprintf>
}
 800133e:	46bd      	mov	sp, r7
 8001340:	b004      	add	sp, #16
 8001342:	bd80      	pop	{r7, pc}
 8001344:	08004048 	.word	0x08004048
 8001348:	080041b4 	.word	0x080041b4
 800134c:	08004224 	.word	0x08004224
 8001350:	08004060 	.word	0x08004060

08001354 <USART2_IRQHandler>:

#include "global.h"
#include <stdbool.h>

void USART2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
	// Check if RXNE flag is set (data received)
	if (USART2->ISR & USART_ISR_RXNE)
 800135a:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <USART2_IRQHandler+0x84>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	2220      	movs	r2, #32
 8001360:	4013      	ands	r3, r2
 8001362:	d00b      	beq.n	800137c <USART2_IRQHandler+0x28>
	{
		char newval = USART2->RDR; // Read the received character
 8001364:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <USART2_IRQHandler+0x84>)
 8001366:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001368:	b29b      	uxth	r3, r3
 800136a:	b2da      	uxtb	r2, r3
 800136c:	1dfb      	adds	r3, r7, #7
 800136e:	701a      	strb	r2, [r3, #0]
		cbfifo_enqueue(&fiforx,&newval,sizeof(newval));
 8001370:	1df9      	adds	r1, r7, #7
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <USART2_IRQHandler+0x88>)
 8001374:	2201      	movs	r2, #1
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff f8f3 	bl	8000562 <cbfifo_enqueue>
	}
	if (USART2->ISR & USART_ISR_TXE)
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <USART2_IRQHandler+0x84>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2280      	movs	r2, #128	@ 0x80
 8001382:	4013      	ands	r3, r2
 8001384:	d023      	beq.n	80013ce <USART2_IRQHandler+0x7a>
	{
		char newval; // Read the received character
		if(cbfifo_dequeue(&fifotx,&newval,sizeof(newval))>0)
 8001386:	1db9      	adds	r1, r7, #6
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <USART2_IRQHandler+0x8c>)
 800138a:	2201      	movs	r2, #1
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff f937 	bl	8000600 <cbfifo_dequeue>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d015      	beq.n	80013c2 <USART2_IRQHandler+0x6e>
		{
			 if (newval == '\n')
 8001396:	1dbb      	adds	r3, r7, #6
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d10c      	bne.n	80013b8 <USART2_IRQHandler+0x64>
			 {
	                USART2->TDR = '\r';
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <USART2_IRQHandler+0x84>)
 80013a0:	220d      	movs	r2, #13
 80013a2:	851a      	strh	r2, [r3, #40]	@ 0x28
	                while (!(USART2->ISR & USART_ISR_TXE));
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <USART2_IRQHandler+0x84>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2280      	movs	r2, #128	@ 0x80
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0fa      	beq.n	80013a6 <USART2_IRQHandler+0x52>
	                USART2->TDR = '\n';
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <USART2_IRQHandler+0x84>)
 80013b2:	220a      	movs	r2, #10
 80013b4:	851a      	strh	r2, [r3, #40]	@ 0x28
		else
		{
			USART2->CR1 &= (~(USART_CR1_TXEIE));
		}
	}
}
 80013b6:	e00a      	b.n	80013ce <USART2_IRQHandler+0x7a>
				 USART2->TDR = newval; // Send the character
 80013b8:	1dbb      	adds	r3, r7, #6
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <USART2_IRQHandler+0x84>)
 80013be:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80013c0:	e005      	b.n	80013ce <USART2_IRQHandler+0x7a>
			USART2->CR1 &= (~(USART_CR1_TXEIE));
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <USART2_IRQHandler+0x84>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <USART2_IRQHandler+0x84>)
 80013c8:	2180      	movs	r1, #128	@ 0x80
 80013ca:	438a      	bics	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b002      	add	sp, #8
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	40004400 	.word	0x40004400
 80013dc:	20000108 	.word	0x20000108
 80013e0:	2000007c 	.word	0x2000007c

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	0002      	movs	r2, r0
 80013ec:	1dfb      	adds	r3, r7, #7
 80013ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80013f6:	d809      	bhi.n	800140c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	001a      	movs	r2, r3
 80013fe:	231f      	movs	r3, #31
 8001400:	401a      	ands	r2, r3
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <__NVIC_EnableIRQ+0x30>)
 8001404:	2101      	movs	r1, #1
 8001406:	4091      	lsls	r1, r2
 8001408:	000a      	movs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800140c:	46c0      	nop			@ (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}
 8001414:	e000e100 	.word	0xe000e100

08001418 <uart_init>:
 *      Author: Abhishek Nadgir
 */

#include "init_functions.h"

void uart_init(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 800141c:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <uart_init+0xb0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6898      	ldr	r0, [r3, #8]
 8001422:	2300      	movs	r3, #0
 8001424:	2202      	movs	r2, #2
 8001426:	2100      	movs	r1, #0
 8001428:	f001 f97a 	bl	8002720 <setvbuf>
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable GPIOA clock
 800142c:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <uart_init+0xb4>)
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <uart_init+0xb4>)
 8001432:	2180      	movs	r1, #128	@ 0x80
 8001434:	0289      	lsls	r1, r1, #10
 8001436:	430a      	orrs	r2, r1
 8001438:	615a      	str	r2, [r3, #20]
	// Set PA2 (TX) and PA3 (RX) to alternate function mode (AF7 for USART2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);			// Clear
 800143a:	2390      	movs	r3, #144	@ 0x90
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2390      	movs	r3, #144	@ 0x90
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	21f0      	movs	r1, #240	@ 0xf0
 8001446:	438a      	bics	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);// Set AF mode
 800144a:	2390      	movs	r3, #144	@ 0x90
 800144c:	05db      	lsls	r3, r3, #23
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2390      	movs	r3, #144	@ 0x90
 8001452:	05db      	lsls	r3, r3, #23
 8001454:	21a0      	movs	r1, #160	@ 0xa0
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos) | (1 << GPIO_AFRL_AFSEL3_Pos); // AF7 (USART2) for PA2 and PA3
 800145a:	2390      	movs	r3, #144	@ 0x90
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	6a1a      	ldr	r2, [r3, #32]
 8001460:	2390      	movs	r3, #144	@ 0x90
 8001462:	05db      	lsls	r3, r3, #23
 8001464:	2188      	movs	r1, #136	@ 0x88
 8001466:	0149      	lsls	r1, r1, #5
 8001468:	430a      	orrs	r2, r1
 800146a:	621a      	str	r2, [r3, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;				// Enable USART2 clock
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <uart_init+0xb4>)
 800146e:	69da      	ldr	r2, [r3, #28]
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <uart_init+0xb4>)
 8001472:	2180      	movs	r1, #128	@ 0x80
 8001474:	0289      	lsls	r1, r1, #10
 8001476:	430a      	orrs	r2, r1
 8001478:	61da      	str	r2, [r3, #28]
	USART2->BRR = USART_BRR_VALUE;// Configure baud rate (assuming 24MHz APB1 clock and 19200 baud rate)
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <uart_init+0xb8>)
 800147c:	4a15      	ldr	r2, [pc, #84]	@ (80014d4 <uart_init+0xbc>)
 800147e:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE; // Enable TX, RX, and RX interrupt
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <uart_init+0xb8>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <uart_init+0xb8>)
 8001486:	212c      	movs	r1, #44	@ 0x2c
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_PARITY_CONFIG;
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <uart_init+0xb8>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <uart_init+0xb8>)
 8001492:	21c0      	movs	r1, #192	@ 0xc0
 8001494:	00c9      	lsls	r1, r1, #3
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_WORD_LENGTH;
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <uart_init+0xb8>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <uart_init+0xb8>)
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	0149      	lsls	r1, r1, #5
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
	USART2->CR2 |= USART_STOP_BITS;
 80014a8:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <uart_init+0xb8>)
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <uart_init+0xb8>)
 80014ac:	6852      	ldr	r2, [r2, #4]
 80014ae:	605a      	str	r2, [r3, #4]
	USART2->CR1 |= USART_CR1_UE;								// Enable USART
 80014b0:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <uart_init+0xb8>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <uart_init+0xb8>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);			// Enable USART2 interrupt in NVIC
 80014bc:	201c      	movs	r0, #28
 80014be:	f7ff ff91 	bl	80013e4 <__NVIC_EnableIRQ>
}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000010 	.word	0x20000010
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40004400 	.word	0x40004400
 80014d4:	000004e2 	.word	0x000004e2

080014d8 <main>:
 ******************************************************************************
 */
// Reference USed: Lecture Presentation Slides utilised for Command table and Command processing
#include "main.h"
#include "spi.h"
int main(void) {
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	4c30      	ldr	r4, [pc, #192]	@ (800159c <main+0xc4>)
 80014dc:	44a5      	add	sp, r4
 80014de:	af00      	add	r7, sp, #0
	/*
	 * Clocks: Processor = 48 Mhz. AHB = 48 MHz. APB = 24 MHz.
	 *
	 */
	//init_uled(); //On board LED Initialisation
	uart_init(); //UART 2 Initialisation for Serial COmmunication
 80014e0:	f7ff ff9a 	bl	8001418 <uart_init>
	cbfifo_init(&fiforx); // Initialising RX Buffer
 80014e4:	4b2e      	ldr	r3, [pc, #184]	@ (80015a0 <main+0xc8>)
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff f824 	bl	8000534 <cbfifo_init>
	cbfifo_init(&fifotx); // Initialising TX buffer
 80014ec:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <main+0xcc>)
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7ff f820 	bl	8000534 <cbfifo_init>
	char inputval[INPUT_BUFFER_SIZE]; // Defining a buffer to accept the command and Process
	char *argv[ARGUMENT_BUFFER_SIZE]; // Defining a buffer to store Argument Vectors after tokenization
	int argc; //TO store Argument COunt
	printf("\nWelcome to SerialIO!\n");
 80014f4:	4b2c      	ldr	r3, [pc, #176]	@ (80015a8 <main+0xd0>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f001 f908 	bl	800270c <puts>
	//IO_Init();
	SPI_Init();
 80014fc:	f000 f862 	bl	80015c4 <SPI_Init>
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3); // Clear
 8001500:	2390      	movs	r3, #144	@ 0x90
 8001502:	05db      	lsls	r3, r3, #23
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2390      	movs	r3, #144	@ 0x90
 8001508:	05db      	lsls	r3, r3, #23
 800150a:	21f0      	movs	r1, #240	@ 0xf0
 800150c:	438a      	bics	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1); // Set to AF mode
 8001510:	2390      	movs	r3, #144	@ 0x90
 8001512:	05db      	lsls	r3, r3, #23
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	2390      	movs	r3, #144	@ 0x90
 8001518:	05db      	lsls	r3, r3, #23
 800151a:	21a0      	movs	r1, #160	@ 0xa0
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos) | (1 << GPIO_AFRL_AFSEL3_Pos); // AF7
 8001520:	2390      	movs	r3, #144	@ 0x90
 8001522:	05db      	lsls	r3, r3, #23
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	2390      	movs	r3, #144	@ 0x90
 8001528:	05db      	lsls	r3, r3, #23
 800152a:	2188      	movs	r1, #136	@ 0x88
 800152c:	0149      	lsls	r1, r1, #5
 800152e:	430a      	orrs	r2, r1
 8001530:	621a      	str	r2, [r3, #32]

	printf("SPI2->CR1: 0x%08lX\n", SPI2->CR1);
 8001532:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <main+0xd4>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <main+0xd8>)
 8001538:	0011      	movs	r1, r2
 800153a:	0018      	movs	r0, r3
 800153c:	f001 f876 	bl	800262c <iprintf>
	printf("SPI2->CR2: 0x%08lX\n", SPI2->CR2);
 8001540:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <main+0xd4>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <main+0xdc>)
 8001546:	0011      	movs	r1, r2
 8001548:	0018      	movs	r0, r3
 800154a:	f001 f86f 	bl	800262c <iprintf>
	printf("GPIOB->AFR[1]: 0x%08lX\n", GPIOB->AFR[1]);
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <main+0xe0>)
 8001550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001552:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <main+0xe4>)
 8001554:	0011      	movs	r1, r2
 8001556:	0018      	movs	r0, r3
 8001558:	f001 f868 	bl	800262c <iprintf>
	while (1) {
		printf("\n$$ ");
 800155c:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <main+0xe8>)
 800155e:	0018      	movs	r0, r3
 8001560:	f001 f864 	bl	800262c <iprintf>
		accumulate_line(inputval, INPUT_BUFFER_SIZE); //Takes character from Serial Terminal
 8001564:	2481      	movs	r4, #129	@ 0x81
 8001566:	00a4      	lsls	r4, r4, #2
 8001568:	193b      	adds	r3, r7, r4
 800156a:	2180      	movs	r1, #128	@ 0x80
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff fe05 	bl	800117c <accumulate_line>
		argc = tokenize_line(inputval, argv, ARGUMENT_BUFFER_SIZE); // Takes array of string as input and returs Number of Arguments and buffer of argument vector
 8001572:	1d39      	adds	r1, r7, #4
 8001574:	193b      	adds	r3, r7, r4
 8001576:	2280      	movs	r2, #128	@ 0x80
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff fe7d 	bl	8001278 <tokenize_line>
 800157e:	0003      	movs	r3, r0
 8001580:	21a1      	movs	r1, #161	@ 0xa1
 8001582:	0089      	lsls	r1, r1, #2
 8001584:	187a      	adds	r2, r7, r1
 8001586:	6013      	str	r3, [r2, #0]
		process_command(argc, argv); // Takes argument count and vector as input and processes the command accordingly
 8001588:	1d3a      	adds	r2, r7, #4
 800158a:	187b      	adds	r3, r7, r1
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0011      	movs	r1, r2
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff fe9f 	bl	80012d4 <process_command>
		printf("\n$$ ");
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	e7e0      	b.n	800155c <main+0x84>
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	fffffd74 	.word	0xfffffd74
 80015a0:	20000108 	.word	0x20000108
 80015a4:	2000007c 	.word	0x2000007c
 80015a8:	08004078 	.word	0x08004078
 80015ac:	40003800 	.word	0x40003800
 80015b0:	08004090 	.word	0x08004090
 80015b4:	080040a4 	.word	0x080040a4
 80015b8:	48000400 	.word	0x48000400
 80015bc:	080040b8 	.word	0x080040b8
 80015c0:	080040d0 	.word	0x080040d0

080015c4 <SPI_Init>:
#define SPI2_CS_PORT   GPIOB
#define SPI2_SCK_PORT  GPIOB
#define SPI2_MISO_PORT GPIOB
#define SPI2_MOSI_PORT GPIOB

void SPI_Init(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <SPI_Init+0x74>)
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <SPI_Init+0x74>)
 80015ce:	2180      	movs	r1, #128	@ 0x80
 80015d0:	02c9      	lsls	r1, r1, #11
 80015d2:	430a      	orrs	r2, r1
 80015d4:	615a      	str	r2, [r3, #20]

    // Configure CS, SCK, and MOSI as output
    GPIOB->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER13 | GPIO_MODER_MODER15); // Clear MODER bits
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <SPI_Init+0x78>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <SPI_Init+0x78>)
 80015dc:	4918      	ldr	r1, [pc, #96]	@ (8001640 <SPI_Init+0x7c>)
 80015de:	400a      	ands	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER15_0); // Set as output
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <SPI_Init+0x78>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <SPI_Init+0x78>)
 80015e8:	218a      	movs	r1, #138	@ 0x8a
 80015ea:	05c9      	lsls	r1, r1, #23
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]

    // Configure MISO as input
    GPIOB->MODER &= ~GPIO_MODER_MODER14; // Set as input
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <SPI_Init+0x78>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <SPI_Init+0x78>)
 80015f6:	4913      	ldr	r1, [pc, #76]	@ (8001644 <SPI_Init+0x80>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

    // Set all pins to high-speed mode
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR12 | GPIO_OSPEEDR_OSPEEDR13 | GPIO_OSPEEDR_OSPEEDR14 | GPIO_OSPEEDR_OSPEEDR15);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <SPI_Init+0x78>)
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <SPI_Init+0x78>)
 8001602:	21ff      	movs	r1, #255	@ 0xff
 8001604:	0609      	lsls	r1, r1, #24
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]

    // Set default states
    GPIOB->ODR |= SPI2_CS_PIN;    // CS High (inactive)
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <SPI_Init+0x78>)
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <SPI_Init+0x78>)
 8001610:	2180      	movs	r1, #128	@ 0x80
 8001612:	0149      	lsls	r1, r1, #5
 8001614:	430a      	orrs	r2, r1
 8001616:	615a      	str	r2, [r3, #20]
    GPIOB->ODR &= ~SPI2_SCK_PIN;  // SCK Low (idle)
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <SPI_Init+0x78>)
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	4b07      	ldr	r3, [pc, #28]	@ (800163c <SPI_Init+0x78>)
 800161e:	490a      	ldr	r1, [pc, #40]	@ (8001648 <SPI_Init+0x84>)
 8001620:	400a      	ands	r2, r1
 8001622:	615a      	str	r2, [r3, #20]
    GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <SPI_Init+0x78>)
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <SPI_Init+0x78>)
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <SPI_Init+0x88>)
 800162c:	400a      	ands	r2, r1
 800162e:	615a      	str	r2, [r3, #20]
}
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400
 8001640:	30ffffff 	.word	0x30ffffff
 8001644:	cfffffff 	.word	0xcfffffff
 8001648:	ffffdfff 	.word	0xffffdfff
 800164c:	ffff7fff 	.word	0xffff7fff

08001650 <SPI_WriteByte>:


void SPI_WriteByte(uint8_t data)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	0002      	movs	r2, r0
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e039      	b.n	80016d6 <SPI_WriteByte+0x86>
        // Write the MSB to MOSI
        if (data & 0x80) {
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	da07      	bge.n	800167c <SPI_WriteByte+0x2c>
            GPIOB->ODR |= SPI2_MOSI_PIN; // Set MOSI High
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <SPI_WriteByte+0xa0>)
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <SPI_WriteByte+0xa0>)
 8001672:	2180      	movs	r1, #128	@ 0x80
 8001674:	0209      	lsls	r1, r1, #8
 8001676:	430a      	orrs	r2, r1
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	e005      	b.n	8001688 <SPI_WriteByte+0x38>
        } else {
            GPIOB->ODR &= ~SPI2_MOSI_PIN; // Set MOSI Low
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <SPI_WriteByte+0xa0>)
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <SPI_WriteByte+0xa0>)
 8001682:	491c      	ldr	r1, [pc, #112]	@ (80016f4 <SPI_WriteByte+0xa4>)
 8001684:	400a      	ands	r2, r1
 8001686:	615a      	str	r2, [r3, #20]
        }
        data <<= 1; // Shift to the next bit
 8001688:	1dfa      	adds	r2, r7, #7
 800168a:	1dfb      	adds	r3, r7, #7
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	18db      	adds	r3, r3, r3
 8001690:	7013      	strb	r3, [r2, #0]

        // Toggle SCK to clock the bit
        GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <SPI_WriteByte+0xa0>)
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <SPI_WriteByte+0xa0>)
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	0189      	lsls	r1, r1, #6
 800169c:	430a      	orrs	r2, r1
 800169e:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	e002      	b.n	80016ac <SPI_WriteByte+0x5c>
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	3301      	adds	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	ddf9      	ble.n	80016a6 <SPI_WriteByte+0x56>
        GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <SPI_WriteByte+0xa0>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <SPI_WriteByte+0xa0>)
 80016b8:	490f      	ldr	r1, [pc, #60]	@ (80016f8 <SPI_WriteByte+0xa8>)
 80016ba:	400a      	ands	r2, r1
 80016bc:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	e002      	b.n	80016ca <SPI_WriteByte+0x7a>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3301      	adds	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	ddf9      	ble.n	80016c4 <SPI_WriteByte+0x74>
    for (int i = 0; i < 8; i++) {
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b07      	cmp	r3, #7
 80016da:	ddc2      	ble.n	8001662 <SPI_WriteByte+0x12>
    }
    GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <SPI_WriteByte+0xa0>)
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <SPI_WriteByte+0xa0>)
 80016e2:	4904      	ldr	r1, [pc, #16]	@ (80016f4 <SPI_WriteByte+0xa4>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	615a      	str	r2, [r3, #20]
}
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b006      	add	sp, #24
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	48000400 	.word	0x48000400
 80016f4:	ffff7fff 	.word	0xffff7fff
 80016f8:	ffffdfff 	.word	0xffffdfff

080016fc <spi_set_autoinc>:


void spi_set_autoinc(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <spi_set_autoinc+0x30>)
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <spi_set_autoinc+0x30>)
 8001706:	490a      	ldr	r1, [pc, #40]	@ (8001730 <spi_set_autoinc+0x34>)
 8001708:	400a      	ands	r2, r1
 800170a:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x5E);			//ECON2
 800170c:	205e      	movs	r0, #94	@ 0x5e
 800170e:	f7ff ff9f 	bl	8001650 <SPI_WriteByte>
	SPI_WriteByte(0x80);			//AUTOINC bit set
 8001712:	2080      	movs	r0, #128	@ 0x80
 8001714:	f7ff ff9c 	bl	8001650 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <spi_set_autoinc+0x30>)
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <spi_set_autoinc+0x30>)
 800171e:	2180      	movs	r1, #128	@ 0x80
 8001720:	0149      	lsls	r1, r1, #5
 8001722:	430a      	orrs	r2, r1
 8001724:	615a      	str	r2, [r3, #20]
}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	48000400 	.word	0x48000400
 8001730:	ffffefff 	.word	0xffffefff

08001734 <select_reg_bank>:
void select_reg_bank(uint8_t bank)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	0002      	movs	r2, r0
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <select_reg_bank+0x40>)
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <select_reg_bank+0x40>)
 8001746:	490c      	ldr	r1, [pc, #48]	@ (8001778 <select_reg_bank+0x44>)
 8001748:	400a      	ands	r2, r1
 800174a:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x5F);
 800174c:	205f      	movs	r0, #95	@ 0x5f
 800174e:	f7ff ff7f 	bl	8001650 <SPI_WriteByte>
	SPI_WriteByte(bank);
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff ff7a 	bl	8001650 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <select_reg_bank+0x40>)
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <select_reg_bank+0x40>)
 8001762:	2180      	movs	r1, #128	@ 0x80
 8001764:	0149      	lsls	r1, r1, #5
 8001766:	430a      	orrs	r2, r1
 8001768:	615a      	str	r2, [r3, #20]
}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	48000400 	.word	0x48000400
 8001778:	ffffefff 	.word	0xffffefff

0800177c <spi_control_write>:



void spi_control_write(int reg_bank,uint8_t addr,uint8_t data)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	0008      	movs	r0, r1
 8001786:	0011      	movs	r1, r2
 8001788:	1cfb      	adds	r3, r7, #3
 800178a:	1c02      	adds	r2, r0, #0
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	1cbb      	adds	r3, r7, #2
 8001790:	1c0a      	adds	r2, r1, #0
 8001792:	701a      	strb	r2, [r3, #0]
    uint8_t opcode = 0x40;
 8001794:	200f      	movs	r0, #15
 8001796:	183b      	adds	r3, r7, r0
 8001798:	2240      	movs	r2, #64	@ 0x40
 800179a:	701a      	strb	r2, [r3, #0]
    addr = addr + opcode;
 800179c:	1cfb      	adds	r3, r7, #3
 800179e:	1cf9      	adds	r1, r7, #3
 80017a0:	183a      	adds	r2, r7, r0
 80017a2:	7809      	ldrb	r1, [r1, #0]
 80017a4:	7812      	ldrb	r2, [r2, #0]
 80017a6:	188a      	adds	r2, r1, r2
 80017a8:	701a      	strb	r2, [r3, #0]
	select_reg_bank(reg_bank);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7ff ffc0 	bl	8001734 <select_reg_bank>
	GPIOB->ODR &= ~SPI2_CS_PIN;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <spi_control_write+0x70>)
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <spi_control_write+0x70>)
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <spi_control_write+0x74>)
 80017bc:	400a      	ands	r2, r1
 80017be:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(addr);
 80017c0:	1cfb      	adds	r3, r7, #3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff ff43 	bl	8001650 <SPI_WriteByte>
    SPI_WriteByte(data);
 80017ca:	1cbb      	adds	r3, r7, #2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff ff3e 	bl	8001650 <SPI_WriteByte>
    GPIOB->ODR |= SPI2_CS_PIN;
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <spi_control_write+0x70>)
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <spi_control_write+0x70>)
 80017da:	2180      	movs	r1, #128	@ 0x80
 80017dc:	0149      	lsls	r1, r1, #5
 80017de:	430a      	orrs	r2, r1
 80017e0:	615a      	str	r2, [r3, #20]
}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b004      	add	sp, #16
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	48000400 	.word	0x48000400
 80017f0:	ffffefff 	.word	0xffffefff

080017f4 <buffer_init>:

void buffer_init(uint16_t start_address, uint16_t size) {
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	0002      	movs	r2, r0
 80017fc:	1dbb      	adds	r3, r7, #6
 80017fe:	801a      	strh	r2, [r3, #0]
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	1c0a      	adds	r2, r1, #0
 8001804:	801a      	strh	r2, [r3, #0]
    if (start_address > 0x1FFF || (start_address + size) > 0x1FFF) {
 8001806:	1dbb      	adds	r3, r7, #6
 8001808:	881a      	ldrh	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	429a      	cmp	r2, r3
 8001810:	d208      	bcs.n	8001824 <buffer_init+0x30>
 8001812:	1dbb      	adds	r3, r7, #6
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	18d2      	adds	r2, r2, r3
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	019b      	lsls	r3, r3, #6
 8001820:	429a      	cmp	r2, r3
 8001822:	db08      	blt.n	8001836 <buffer_init+0x42>
        printf("\nInvalid Buffer Address or Size: Start 0x%04X, Size 0x%04X\n", start_address, size);
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	8819      	ldrh	r1, [r3, #0]
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <buffer_init+0xc8>)
 800182e:	0018      	movs	r0, r3
 8001830:	f000 fefc 	bl	800262c <iprintf>
        return;
 8001834:	e03f      	b.n	80018b6 <buffer_init+0xc2>
    }

    // Ensure start and end addresses are even
    uint16_t erxst = start_address & ~1; // Make sure ERXST is even
 8001836:	240e      	movs	r4, #14
 8001838:	193b      	adds	r3, r7, r4
 800183a:	1dba      	adds	r2, r7, #6
 800183c:	8812      	ldrh	r2, [r2, #0]
 800183e:	2101      	movs	r1, #1
 8001840:	438a      	bics	r2, r1
 8001842:	801a      	strh	r2, [r3, #0]
    uint16_t erxnd = (start_address + size - 1) & ~1; // Make sure ERXND is even
 8001844:	1dba      	adds	r2, r7, #6
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	18d3      	adds	r3, r2, r3
 800184e:	b29b      	uxth	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	250c      	movs	r5, #12
 8001856:	197b      	adds	r3, r7, r5
 8001858:	2101      	movs	r1, #1
 800185a:	438a      	bics	r2, r1
 800185c:	801a      	strh	r2, [r3, #0]

    // Write ERXST
    spi_control_write(0, 0x08, (uint8_t)(erxst >> 8)); // High byte of ERXST
 800185e:	193b      	adds	r3, r7, r4
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	b29b      	uxth	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	001a      	movs	r2, r3
 800186a:	2108      	movs	r1, #8
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff ff85 	bl	800177c <spi_control_write>
    spi_control_write(0, 0x09, (uint8_t)(erxst & 0xFF)); // Low byte of ERXST
 8001872:	193b      	adds	r3, r7, r4
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	001a      	movs	r2, r3
 800187a:	2109      	movs	r1, #9
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff ff7d 	bl	800177c <spi_control_write>

    // Write ERXND
    spi_control_write(0, 0x0A, (uint8_t)(erxnd >> 8)); // High byte of ERXND
 8001882:	197b      	adds	r3, r7, r5
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	001a      	movs	r2, r3
 800188e:	210a      	movs	r1, #10
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff ff73 	bl	800177c <spi_control_write>
    spi_control_write(0, 0x0B, (uint8_t)(erxnd & 0xFF)); // Low byte of ERXND
 8001896:	197b      	adds	r3, r7, r5
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	001a      	movs	r2, r3
 800189e:	210b      	movs	r1, #11
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff6b 	bl	800177c <spi_control_write>

    printf("\nBuffer Initialized: Start 0x%04X, End 0x%04X\n", erxst, erxnd);
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	8819      	ldrh	r1, [r3, #0]
 80018aa:	197b      	adds	r3, r7, r5
 80018ac:	881a      	ldrh	r2, [r3, #0]
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <buffer_init+0xcc>)
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 febb 	bl	800262c <iprintf>
}
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b004      	add	sp, #16
 80018ba:	bdb0      	pop	{r4, r5, r7, pc}
 80018bc:	080040d8 	.word	0x080040d8
 80018c0:	08004114 	.word	0x08004114

080018c4 <spi_buffer_write>:


void spi_buffer_write(int num_bytes,uint16_t start_address,uint8_t *data_ptr)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	230a      	movs	r3, #10
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	1c0a      	adds	r2, r1, #0
 80018d4:	801a      	strh	r2, [r3, #0]
	if(num_bytes < 1)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dc06      	bgt.n	80018ea <spi_buffer_write+0x26>
		{
			printf("\nInvalid number of bytes: %d\n",num_bytes);
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4b34      	ldr	r3, [pc, #208]	@ (80019b0 <spi_buffer_write+0xec>)
 80018e0:	0011      	movs	r1, r2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fea2 	bl	800262c <iprintf>
			return;
 80018e8:	e05f      	b.n	80019aa <spi_buffer_write+0xe6>
		}
	if(start_address > 0x1FFF)
 80018ea:	210a      	movs	r1, #10
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	881a      	ldrh	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	019b      	lsls	r3, r3, #6
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d307      	bcc.n	8001908 <spi_buffer_write+0x44>
		{
			printf("\nInvalid address: %04Xn",start_address);
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	881a      	ldrh	r2, [r3, #0]
 80018fc:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <spi_buffer_write+0xf0>)
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f000 fe93 	bl	800262c <iprintf>
		  return;
 8001906:	e050      	b.n	80019aa <spi_buffer_write+0xe6>
		}
	buffer_init(0x0000, start_address - 1);
 8001908:	230a      	movs	r3, #10
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	3b01      	subs	r3, #1
 8001910:	b29b      	uxth	r3, r3
 8001912:	0019      	movs	r1, r3
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff ff6d 	bl	80017f4 <buffer_init>
	if(num_bytes > 1)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b01      	cmp	r3, #1
 800191e:	dd01      	ble.n	8001924 <spi_buffer_write+0x60>
		{
			spi_set_autoinc();
 8001920:	f7ff feec 	bl	80016fc <spi_set_autoinc>
		}
	uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
 8001924:	210a      	movs	r1, #10
 8001926:	187b      	adds	r3, r7, r1
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	b29a      	uxth	r2, r3
 800192e:	2013      	movs	r0, #19
 8001930:	183b      	adds	r3, r7, r0
 8001932:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
 8001934:	2412      	movs	r4, #18
 8001936:	193b      	adds	r3, r7, r4
 8001938:	187a      	adds	r2, r7, r1
 800193a:	8812      	ldrh	r2, [r2, #0]
 800193c:	701a      	strb	r2, [r3, #0]
	spi_control_write(0, 0X03, higher_byte); // High byte
 800193e:	183b      	adds	r3, r7, r0
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	001a      	movs	r2, r3
 8001944:	2103      	movs	r1, #3
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff ff18 	bl	800177c <spi_control_write>
	spi_control_write(0, 0X02, lower_byte); // Low byte
 800194c:	193b      	adds	r3, r7, r4
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	001a      	movs	r2, r3
 8001952:	2102      	movs	r1, #2
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff ff11 	bl	800177c <spi_control_write>
	uint8_t opcode = 0x7A;
 800195a:	2011      	movs	r0, #17
 800195c:	183b      	adds	r3, r7, r0
 800195e:	227a      	movs	r2, #122	@ 0x7a
 8001960:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <spi_buffer_write+0xf4>)
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <spi_buffer_write+0xf4>)
 8001968:	4914      	ldr	r1, [pc, #80]	@ (80019bc <spi_buffer_write+0xf8>)
 800196a:	400a      	ands	r2, r1
 800196c:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 800196e:	183b      	adds	r3, r7, r0
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	0018      	movs	r0, r3
 8001974:	f7ff fe6c 	bl	8001650 <SPI_WriteByte>
	for (int i = 0; i < num_bytes; i++) {
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e00a      	b.n	8001994 <spi_buffer_write+0xd0>
	        SPI_WriteByte(*data_ptr);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0018      	movs	r0, r3
 8001984:	f7ff fe64 	bl	8001650 <SPI_WriteByte>
	        data_ptr++;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3301      	adds	r3, #1
 800198c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf0      	blt.n	800197e <spi_buffer_write+0xba>
	    }
	GPIOB->ODR |= SPI2_CS_PIN;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <spi_buffer_write+0xf4>)
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <spi_buffer_write+0xf4>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	0149      	lsls	r1, r1, #5
 80019a6:	430a      	orrs	r2, r1
 80019a8:	615a      	str	r2, [r3, #20]
}
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b007      	add	sp, #28
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	08004144 	.word	0x08004144
 80019b4:	08004164 	.word	0x08004164
 80019b8:	48000400 	.word	0x48000400
 80019bc:	ffffefff 	.word	0xffffefff

080019c0 <SPI_ReadByte>:



uint8_t SPI_ReadByte(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
    uint8_t received_data = 0;
 80019c6:	230f      	movs	r3, #15
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 8; i++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	e034      	b.n	8001a3e <SPI_ReadByte+0x7e>
        received_data <<= 1; // Make room for the next bit
 80019d4:	230f      	movs	r3, #15
 80019d6:	18fa      	adds	r2, r7, r3
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	18db      	adds	r3, r3, r3
 80019de:	7013      	strb	r3, [r2, #0]

        // Toggle SCK to clock the bit
        GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 80019e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <SPI_ReadByte+0x94>)
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <SPI_ReadByte+0x94>)
 80019e6:	2180      	movs	r1, #128	@ 0x80
 80019e8:	0189      	lsls	r1, r1, #6
 80019ea:	430a      	orrs	r2, r1
 80019ec:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	e002      	b.n	80019fa <SPI_ReadByte+0x3a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	ddf9      	ble.n	80019f4 <SPI_ReadByte+0x34>

        // Read the bit from MISO
        if (GPIOB->IDR & SPI2_MISO_PIN) {
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <SPI_ReadByte+0x94>)
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d006      	beq.n	8001a1a <SPI_ReadByte+0x5a>
            received_data |= 0x01; // Set the LSB
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	18bb      	adds	r3, r7, r2
 8001a10:	18ba      	adds	r2, r7, r2
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	430a      	orrs	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
        }

        GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <SPI_ReadByte+0x94>)
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <SPI_ReadByte+0x94>)
 8001a20:	490d      	ldr	r1, [pc, #52]	@ (8001a58 <SPI_ReadByte+0x98>)
 8001a22:	400a      	ands	r2, r1
 8001a24:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	e002      	b.n	8001a32 <SPI_ReadByte+0x72>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	ddf9      	ble.n	8001a2c <SPI_ReadByte+0x6c>
    for (int i = 0; i < 8; i++) {
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	ddc7      	ble.n	80019d4 <SPI_ReadByte+0x14>
    }

    return received_data;
 8001a44:	230f      	movs	r3, #15
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	781b      	ldrb	r3, [r3, #0]
}
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b004      	add	sp, #16
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	48000400 	.word	0x48000400
 8001a58:	ffffdfff 	.word	0xffffdfff

08001a5c <spi_buffer_read>:
void spi_buffer_read(int num_bytes,uint16_t start_address,uint8_t *data_ptr)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	230a      	movs	r3, #10
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	1c0a      	adds	r2, r1, #0
 8001a6c:	801a      	strh	r2, [r3, #0]
	if(num_bytes < 1)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	dc06      	bgt.n	8001a82 <spi_buffer_read+0x26>
		{
			printf("\nInvalid number of bytes: %d\n",num_bytes);
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4b35      	ldr	r3, [pc, #212]	@ (8001b4c <spi_buffer_read+0xf0>)
 8001a78:	0011      	movs	r1, r2
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f000 fdd6 	bl	800262c <iprintf>
			return;
 8001a80:	e060      	b.n	8001b44 <spi_buffer_read+0xe8>
		}
	if(start_address > 0x1FFF)
 8001a82:	210a      	movs	r1, #10
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	881a      	ldrh	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	019b      	lsls	r3, r3, #6
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d307      	bcc.n	8001aa0 <spi_buffer_read+0x44>
		{
			printf("\nInvalid address: %04Xn",start_address);
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	881a      	ldrh	r2, [r3, #0]
 8001a94:	4b2e      	ldr	r3, [pc, #184]	@ (8001b50 <spi_buffer_read+0xf4>)
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 fdc7 	bl	800262c <iprintf>
		  return;
 8001a9e:	e051      	b.n	8001b44 <spi_buffer_read+0xe8>
		}

	if(num_bytes > 1)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	dd01      	ble.n	8001aaa <spi_buffer_read+0x4e>
		{
			spi_set_autoinc();
 8001aa6:	f7ff fe29 	bl	80016fc <spi_set_autoinc>
		}
	buffer_init(start_address, num_bytes);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	240a      	movs	r4, #10
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	0011      	movs	r1, r2
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff fe9c 	bl	80017f4 <buffer_init>
	uint8_t higher_byte = (uint8_t)(((start_address) >> 8) & 0xFF);
 8001abc:	0021      	movs	r1, r4
 8001abe:	187b      	adds	r3, r7, r1
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	2013      	movs	r0, #19
 8001ac8:	183b      	adds	r3, r7, r0
 8001aca:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t)((start_address) & 0xFF);
 8001acc:	2412      	movs	r4, #18
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	187a      	adds	r2, r7, r1
 8001ad2:	8812      	ldrh	r2, [r2, #0]
 8001ad4:	701a      	strb	r2, [r3, #0]
	spi_control_write(0, 0X01, higher_byte); // High byte
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	001a      	movs	r2, r3
 8001adc:	2101      	movs	r1, #1
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff fe4c 	bl	800177c <spi_control_write>
	spi_control_write(0, 0X00, lower_byte); // Low byte
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	001a      	movs	r2, r3
 8001aea:	2100      	movs	r1, #0
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fe45 	bl	800177c <spi_control_write>
	uint8_t opcode = 0x3A;
 8001af2:	2011      	movs	r0, #17
 8001af4:	183b      	adds	r3, r7, r0
 8001af6:	223a      	movs	r2, #58	@ 0x3a
 8001af8:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001afa:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <spi_buffer_read+0xf8>)
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <spi_buffer_read+0xf8>)
 8001b00:	4915      	ldr	r1, [pc, #84]	@ (8001b58 <spi_buffer_read+0xfc>)
 8001b02:	400a      	ands	r2, r1
 8001b04:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 8001b06:	183b      	adds	r3, r7, r0
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff fda0 	bl	8001650 <SPI_WriteByte>
	for (int i = 0; i < num_bytes; i++) {
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00b      	b.n	8001b2e <spi_buffer_read+0xd2>
		  *data_ptr=SPI_ReadByte();
 8001b16:	f7ff ff53 	bl	80019c0 <SPI_ReadByte>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	701a      	strb	r2, [r3, #0]
	       data_ptr++;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3301      	adds	r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbef      	blt.n	8001b16 <spi_buffer_read+0xba>
	    }
	GPIOB->ODR |= SPI2_CS_PIN;
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <spi_buffer_read+0xf8>)
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <spi_buffer_read+0xf8>)
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	0149      	lsls	r1, r1, #5
 8001b40:	430a      	orrs	r2, r1
 8001b42:	615a      	str	r2, [r3, #20]
}
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b007      	add	sp, #28
 8001b48:	bd90      	pop	{r4, r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	08004144 	.word	0x08004144
 8001b50:	08004164 	.word	0x08004164
 8001b54:	48000400 	.word	0x48000400
 8001b58:	ffffefff 	.word	0xffffefff

08001b5c <mac_spi_read>:




uint8_t mac_spi_read(uint8_t addr, uint8_t bank)
{
 8001b5c:	b5b0      	push	{r4, r5, r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	0002      	movs	r2, r0
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	1c0a      	adds	r2, r1, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
	if(addr > 0x1F)
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b1f      	cmp	r3, #31
 8001b74:	d903      	bls.n	8001b7e <mac_spi_read+0x22>
	{
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <mac_spi_read+0x68>)
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 fdc7 	bl	800270c <puts>
	}

	select_reg_bank(bank);
 8001b7e:	1dbb      	adds	r3, r7, #6
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff fdd6 	bl	8001734 <select_reg_bank>
				// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <mac_spi_read+0x6c>)
 8001b8a:	695a      	ldr	r2, [r3, #20]
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <mac_spi_read+0x6c>)
 8001b8e:	490f      	ldr	r1, [pc, #60]	@ (8001bcc <mac_spi_read+0x70>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	615a      	str	r2, [r3, #20]

		        // Send address and read data
	SPI_WriteByte(addr);           // Send the address
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff fd59 	bl	8001650 <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 8001b9e:	250f      	movs	r5, #15
 8001ba0:	197c      	adds	r4, r7, r5
 8001ba2:	f7ff ff0d 	bl	80019c0 <SPI_ReadByte>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	7023      	strb	r3, [r4, #0]

		        // Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <mac_spi_read+0x6c>)
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <mac_spi_read+0x6c>)
 8001bb0:	2180      	movs	r1, #128	@ 0x80
 8001bb2:	0149      	lsls	r1, r1, #5
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	615a      	str	r2, [r3, #20]

	return data;
 8001bb8:	197b      	adds	r3, r7, r5
 8001bba:	781b      	ldrb	r3, [r3, #0]
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b004      	add	sp, #16
 8001bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc4:	0800417c 	.word	0x0800417c
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	ffffefff 	.word	0xffffefff

08001bd0 <busy_wait>:

void busy_wait(void)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
	uint8_t data = mac_spi_read(0x0A, 3);
 8001bd6:	1dfc      	adds	r4, r7, #7
 8001bd8:	2103      	movs	r1, #3
 8001bda:	200a      	movs	r0, #10
 8001bdc:	f7ff ffbe 	bl	8001b5c <mac_spi_read>
 8001be0:	0003      	movs	r3, r0
 8001be2:	7023      	strb	r3, [r4, #0]
	while(data & 0x01);
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4013      	ands	r3, r2
 8001bee:	d1fa      	bne.n	8001be6 <busy_wait+0x16>
}
 8001bf0:	46c0      	nop			@ (mov r8, r8)
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b003      	add	sp, #12
 8001bf8:	bd90      	pop	{r4, r7, pc}

08001bfa <phy_spi_read>:


uint16_t phy_spi_read(uint8_t addr)
{
 8001bfa:	b590      	push	{r4, r7, lr}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	0002      	movs	r2, r0
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	701a      	strb	r2, [r3, #0]
	spi_control_write(2, 0x14, addr);
 8001c06:	1dfb      	adds	r3, r7, #7
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	2114      	movs	r1, #20
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7ff fdb4 	bl	800177c <spi_control_write>
	spi_control_write(2, 0x12, 1);				//MICMD.MIIRD bit set
 8001c14:	2201      	movs	r2, #1
 8001c16:	2112      	movs	r1, #18
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f7ff fdaf 	bl	800177c <spi_control_write>

	busy_wait();
 8001c1e:	f7ff ffd7 	bl	8001bd0 <busy_wait>

	spi_control_write(2, 0x12, 0);				//MICMD.MIIRD bit cleared
 8001c22:	2200      	movs	r2, #0
 8001c24:	2112      	movs	r1, #18
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7ff fda8 	bl	800177c <spi_control_write>

	uint16_t data_LSB = mac_spi_read(0x18, 2);
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	2018      	movs	r0, #24
 8001c30:	f7ff ff94 	bl	8001b5c <mac_spi_read>
 8001c34:	0003      	movs	r3, r0
 8001c36:	001a      	movs	r2, r3
 8001c38:	240e      	movs	r4, #14
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	801a      	strh	r2, [r3, #0]
	uint16_t data_MSB = mac_spi_read(0x19, 2);
 8001c3e:	2102      	movs	r1, #2
 8001c40:	2019      	movs	r0, #25
 8001c42:	f7ff ff8b 	bl	8001b5c <mac_spi_read>
 8001c46:	0003      	movs	r3, r0
 8001c48:	001a      	movs	r2, r3
 8001c4a:	210c      	movs	r1, #12
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	801a      	strh	r2, [r3, #0]

	uint16_t data = (data_MSB << 8) + data_LSB;
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	b299      	uxth	r1, r3
 8001c58:	200a      	movs	r0, #10
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	193a      	adds	r2, r7, r4
 8001c5e:	8812      	ldrh	r2, [r2, #0]
 8001c60:	188a      	adds	r2, r1, r2
 8001c62:	801a      	strh	r2, [r3, #0]

	return data;
 8001c64:	183b      	adds	r3, r7, r0
 8001c66:	881b      	ldrh	r3, [r3, #0]

}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b005      	add	sp, #20
 8001c6e:	bd90      	pop	{r4, r7, pc}

08001c70 <phy_spi_write>:



void phy_spi_write(uint8_t addr, uint16_t data)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	0002      	movs	r2, r0
 8001c78:	1dfb      	adds	r3, r7, #7
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	1c0a      	adds	r2, r1, #0
 8001c80:	801a      	strh	r2, [r3, #0]
	spi_control_write(2,0x14,addr);
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	001a      	movs	r2, r3
 8001c88:	2114      	movs	r1, #20
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	f7ff fd76 	bl	800177c <spi_control_write>
	spi_control_write(2,0x16, (uint8_t)(data&0xFF));
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	001a      	movs	r2, r3
 8001c98:	2116      	movs	r1, #22
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f7ff fd6e 	bl	800177c <spi_control_write>
	spi_control_write(2, 0x17, (uint8_t)((data>>8)&0xFF));
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	001a      	movs	r2, r3
 8001cac:	2117      	movs	r1, #23
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f7ff fd64 	bl	800177c <spi_control_write>
}
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <eth_spi_read>:




uint8_t eth_spi_read(uint8_t addr, uint8_t bank)
{
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	1dbb      	adds	r3, r7, #6
 8001cca:	1c0a      	adds	r2, r1, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
	if(addr > 0x1F)
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b1f      	cmp	r3, #31
 8001cd4:	d903      	bls.n	8001cde <eth_spi_read+0x22>
	{
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <eth_spi_read+0x68>)
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f000 fd17 	bl	800270c <puts>
	}

	select_reg_bank(bank);
 8001cde:	1dbb      	adds	r3, r7, #6
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff fd26 	bl	8001734 <select_reg_bank>
				// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <eth_spi_read+0x6c>)
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <eth_spi_read+0x6c>)
 8001cee:	490f      	ldr	r1, [pc, #60]	@ (8001d2c <eth_spi_read+0x70>)
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	615a      	str	r2, [r3, #20]

		        // Send address and read data
	SPI_WriteByte(addr);           // Send the address
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff fca9 	bl	8001650 <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 8001cfe:	250f      	movs	r5, #15
 8001d00:	197c      	adds	r4, r7, r5
 8001d02:	f7ff fe5d 	bl	80019c0 <SPI_ReadByte>
 8001d06:	0003      	movs	r3, r0
 8001d08:	7023      	strb	r3, [r4, #0]

		        // Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <eth_spi_read+0x6c>)
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <eth_spi_read+0x6c>)
 8001d10:	2180      	movs	r1, #128	@ 0x80
 8001d12:	0149      	lsls	r1, r1, #5
 8001d14:	430a      	orrs	r2, r1
 8001d16:	615a      	str	r2, [r3, #20]

	return data;
 8001d18:	197b      	adds	r3, r7, r5
 8001d1a:	781b      	ldrb	r3, [r3, #0]
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b004      	add	sp, #16
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}
 8001d24:	0800417c 	.word	0x0800417c
 8001d28:	48000400 	.word	0x48000400
 8001d2c:	ffffefff 	.word	0xffffefff

08001d30 <enc_reset>:




void enc_reset(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <enc_reset+0x2c>)
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <enc_reset+0x2c>)
 8001d3a:	4909      	ldr	r1, [pc, #36]	@ (8001d60 <enc_reset+0x30>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	615a      	str	r2, [r3, #20]

	SPI_WriteByte(0XFF);
 8001d40:	20ff      	movs	r0, #255	@ 0xff
 8001d42:	f7ff fc85 	bl	8001650 <SPI_WriteByte>

	GPIOB->ODR |= SPI2_CS_PIN;
 8001d46:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <enc_reset+0x2c>)
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <enc_reset+0x2c>)
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	0149      	lsls	r1, r1, #5
 8001d50:	430a      	orrs	r2, r1
 8001d52:	615a      	str	r2, [r3, #20]

}
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	ffffefff 	.word	0xffffefff

08001d64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_kill>:

int _kill(int pid, int sig)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d7a:	f000 ff67 	bl	8002c4c <__errno>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	2216      	movs	r2, #22
 8001d82:	601a      	str	r2, [r3, #0]
  return -1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	425b      	negs	r3, r3
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_exit>:

void _exit (int status)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d98:	2301      	movs	r3, #1
 8001d9a:	425a      	negs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	0011      	movs	r1, r2
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff ffe5 	bl	8001d70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	e7fd      	b.n	8001da6 <_exit+0x16>

08001daa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e00a      	b.n	8001dd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dbc:	f000 f890 	bl	8001ee0 <__io_getchar>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	60ba      	str	r2, [r7, #8]
 8001dc8:	b2ca      	uxtb	r2, r1
 8001dca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbf0      	blt.n	8001dbc <_read+0x12>
  }

  return len;
 8001dda:	687b      	ldr	r3, [r7, #4]
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b006      	add	sp, #24
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e009      	b.n	8001e0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	60ba      	str	r2, [r7, #8]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 f886 	bl	8001f10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dbf1      	blt.n	8001df6 <_write+0x12>
  }
  return len;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b006      	add	sp, #24
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_close>:

int _close(int file)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	425b      	negs	r3, r3
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	0192      	lsls	r2, r2, #6
 8001e40:	605a      	str	r2, [r3, #4]
  return 0;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_isatty>:

int _isatty(int file)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b004      	add	sp, #16
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <_sbrk+0x5c>)
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <_sbrk+0x60>)
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e90:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <_sbrk+0x64>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <_sbrk+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	18d3      	adds	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d207      	bcs.n	8001eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea4:	f000 fed2 	bl	8002c4c <__errno>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	220c      	movs	r2, #12
 8001eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	e009      	b.n	8001ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	18d2      	adds	r2, r2, r3
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <_sbrk+0x64>)
 8001ec4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b006      	add	sp, #24
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20008000 	.word	0x20008000
 8001ed4:	00000400 	.word	0x00000400
 8001ed8:	20000194 	.word	0x20000194
 8001edc:	200002e8 	.word	0x200002e8

08001ee0 <__io_getchar>:
 *
 * Returns:
 * either received char or -1 if not
 */
int __io_getchar(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
	char ch;
	if(cbfifo_dequeue(&fiforx, &ch, 1)==1)
 8001ee6:	1df9      	adds	r1, r7, #7
 8001ee8:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <__io_getchar+0x2c>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7fe fb87 	bl	8000600 <cbfifo_dequeue>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <__io_getchar+0x1e>
	{
		return ch;
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	e001      	b.n	8001f02 <__io_getchar+0x22>
	}
	else
	{
		return -1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	425b      	negs	r3, r3
	}
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b002      	add	sp, #8
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	20000108 	.word	0x20000108

08001f10 <__io_putchar>:
 *
 * Returns:
 *  either received 1 or -1(if transmission not successful)
 */
int __io_putchar(int ch)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	while (cbfifo_length(&fifotx) >= 127);
 8001f18:	46c0      	nop			@ (mov r8, r8)
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <__io_putchar+0x48>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7fe fbb7 	bl	8000690 <cbfifo_length>
 8001f22:	0003      	movs	r3, r0
 8001f24:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f26:	d8f8      	bhi.n	8001f1a <__io_putchar+0xa>
	if(cbfifo_enqueue(&fifotx,&ch,1)==1)
 8001f28:	1d39      	adds	r1, r7, #4
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <__io_putchar+0x48>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7fe fb17 	bl	8000562 <cbfifo_enqueue>
 8001f34:	0003      	movs	r3, r0
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <__io_putchar+0x3a>
	{
		USART2->CR1 |= USART_CR1_TXEIE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <__io_putchar+0x4c>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <__io_putchar+0x4c>)
 8001f40:	2180      	movs	r1, #128	@ 0x80
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
		return 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e001      	b.n	8001f4e <__io_putchar+0x3e>
	}
	else
	{
		return -1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	425b      	negs	r3, r3
	}
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	2000007c 	.word	0x2000007c
 8001f5c:	40004400 	.word	0x40004400

08001f60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f60:	480e      	ldr	r0, [pc, #56]	@ (8001f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f64:	f000 f866 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001f68:	480d      	ldr	r0, [pc, #52]	@ (8001fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490e      	ldr	r1, [pc, #56]	@ (8001fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa8 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0b      	ldr	r4, [pc, #44]	@ (8001fb0 <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f8e:	f000 fe63 	bl	8002c58 <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 8001f92:	f000 f895 	bl	80020c0 <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 8001f96:	f7ff fa9f 	bl	80014d8 <main>

08001f9a <LoopForever>:

LoopForever:
  b LoopForever
 8001f9a:	e7fe      	b.n	8001f9a <LoopForever>
  ldr   r0, =_estack
 8001f9c:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001fa8:	08004424 	.word	0x08004424
  ldr r2, =_sbss
 8001fac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001fb0:	200002e4 	.word	0x200002e4

08001fb4 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC_COMP_IRQHandler>
	...

08001fb8 <Set_Clocks_To_48MHz>:
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <Set_Clocks_To_48MHz+0x70>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <Set_Clocks_To_48MHz+0x70>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	4b18      	ldr	r3, [pc, #96]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8001fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fcc:	4b17      	ldr	r3, [pc, #92]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8001fce:	2180      	movs	r1, #128	@ 0x80
 8001fd0:	0249      	lsls	r1, r1, #9
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	4b14      	ldr	r3, [pc, #80]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8001fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fdc:	2380      	movs	r3, #128	@ 0x80
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d0f9      	beq.n	8001fd8 <Set_Clocks_To_48MHz+0x20>
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4b10      	ldr	r3, [pc, #64]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8001fea:	21f0      	movs	r1, #240	@ 0xf0
 8001fec:	438a      	bics	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8001ff6:	2103      	movs	r1, #3
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	46c0      	nop			@ (mov r8, r8)
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	089a      	lsrs	r2, r3, #2
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4053      	eors	r3, r2
 800200a:	2203      	movs	r2, #3
 800200c:	4013      	ands	r3, r2
 800200e:	d1f6      	bne.n	8001ffe <Set_Clocks_To_48MHz+0x46>
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a06      	ldr	r2, [pc, #24]	@ (8002030 <Set_Clocks_To_48MHz+0x78>)
 8002016:	401a      	ands	r2, r3
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <Set_Clocks_To_48MHz+0x74>)
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	00c9      	lsls	r1, r1, #3
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40022000 	.word	0x40022000
 800202c:	40021000 	.word	0x40021000
 8002030:	fffff8ff 	.word	0xfffff8ff

08002034 <SystemInit>:
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
 8002038:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <SystemInit+0x74>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <SystemInit+0x74>)
 800203e:	2101      	movs	r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <SystemInit+0x74>)
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <SystemInit+0x74>)
 800204a:	4918      	ldr	r1, [pc, #96]	@ (80020ac <SystemInit+0x78>)
 800204c:	400a      	ands	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <SystemInit+0x74>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <SystemInit+0x74>)
 8002056:	4916      	ldr	r1, [pc, #88]	@ (80020b0 <SystemInit+0x7c>)
 8002058:	400a      	ands	r2, r1
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <SystemInit+0x74>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <SystemInit+0x74>)
 8002062:	4914      	ldr	r1, [pc, #80]	@ (80020b4 <SystemInit+0x80>)
 8002064:	400a      	ands	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <SystemInit+0x74>)
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <SystemInit+0x74>)
 800206e:	4912      	ldr	r1, [pc, #72]	@ (80020b8 <SystemInit+0x84>)
 8002070:	400a      	ands	r2, r1
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <SystemInit+0x74>)
 8002076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <SystemInit+0x74>)
 800207a:	210f      	movs	r1, #15
 800207c:	438a      	bics	r2, r1
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <SystemInit+0x74>)
 8002082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <SystemInit+0x74>)
 8002086:	490d      	ldr	r1, [pc, #52]	@ (80020bc <SystemInit+0x88>)
 8002088:	400a      	ands	r2, r1
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <SystemInit+0x74>)
 800208e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002090:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <SystemInit+0x74>)
 8002092:	2101      	movs	r1, #1
 8002094:	438a      	bics	r2, r1
 8002096:	635a      	str	r2, [r3, #52]	@ 0x34
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <SystemInit+0x74>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	f7ff ff8b 	bl	8001fb8 <Set_Clocks_To_48MHz>
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08ffb80c 	.word	0x08ffb80c
 80020b0:	fef6ffff 	.word	0xfef6ffff
 80020b4:	fffbffff 	.word	0xfffbffff
 80020b8:	ffc0ffff 	.word	0xffc0ffff
 80020bc:	fff0feac 	.word	0xfff0feac

080020c0 <SystemCoreClockUpdate>:
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <SystemCoreClockUpdate+0x10c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	220c      	movs	r2, #12
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d00f      	beq.n	8002106 <SystemCoreClockUpdate+0x46>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d859      	bhi.n	80021a0 <SystemCoreClockUpdate+0xe0>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d015      	beq.n	800211e <SystemCoreClockUpdate+0x5e>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d853      	bhi.n	80021a0 <SystemCoreClockUpdate+0xe0>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <SystemCoreClockUpdate+0x4e>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d008      	beq.n	8002116 <SystemCoreClockUpdate+0x56>
 8002104:	e04c      	b.n	80021a0 <SystemCoreClockUpdate+0xe0>
 8002106:	4b32      	ldr	r3, [pc, #200]	@ (80021d0 <SystemCoreClockUpdate+0x110>)
 8002108:	4a32      	ldr	r2, [pc, #200]	@ (80021d4 <SystemCoreClockUpdate+0x114>)
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e04c      	b.n	80021a8 <SystemCoreClockUpdate+0xe8>
 800210e:	4b30      	ldr	r3, [pc, #192]	@ (80021d0 <SystemCoreClockUpdate+0x110>)
 8002110:	4a31      	ldr	r2, [pc, #196]	@ (80021d8 <SystemCoreClockUpdate+0x118>)
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e048      	b.n	80021a8 <SystemCoreClockUpdate+0xe8>
 8002116:	4b2e      	ldr	r3, [pc, #184]	@ (80021d0 <SystemCoreClockUpdate+0x110>)
 8002118:	4a2f      	ldr	r2, [pc, #188]	@ (80021d8 <SystemCoreClockUpdate+0x118>)
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e044      	b.n	80021a8 <SystemCoreClockUpdate+0xe8>
 800211e:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <SystemCoreClockUpdate+0x10c>)
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	23f0      	movs	r3, #240	@ 0xf0
 8002124:	039b      	lsls	r3, r3, #14
 8002126:	4013      	ands	r3, r2
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <SystemCoreClockUpdate+0x10c>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	23c0      	movs	r3, #192	@ 0xc0
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	4013      	ands	r3, r2
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	0c9b      	lsrs	r3, r3, #18
 800213a:	3302      	adds	r3, #2
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b23      	ldr	r3, [pc, #140]	@ (80021cc <SystemCoreClockUpdate+0x10c>)
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	220f      	movs	r2, #15
 8002144:	4013      	ands	r3, r2
 8002146:	3301      	adds	r3, #1
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	429a      	cmp	r2, r3
 8002152:	d10a      	bne.n	800216a <SystemCoreClockUpdate+0xaa>
 8002154:	6839      	ldr	r1, [r7, #0]
 8002156:	4820      	ldr	r0, [pc, #128]	@ (80021d8 <SystemCoreClockUpdate+0x118>)
 8002158:	f7fd ffe8 	bl	800012c <__udivsi3>
 800215c:	0003      	movs	r3, r0
 800215e:	001a      	movs	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	435a      	muls	r2, r3
 8002164:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <SystemCoreClockUpdate+0x110>)
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e01e      	b.n	80021a8 <SystemCoreClockUpdate+0xe8>
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	23c0      	movs	r3, #192	@ 0xc0
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	429a      	cmp	r2, r3
 8002172:	d10a      	bne.n	800218a <SystemCoreClockUpdate+0xca>
 8002174:	6839      	ldr	r1, [r7, #0]
 8002176:	4817      	ldr	r0, [pc, #92]	@ (80021d4 <SystemCoreClockUpdate+0x114>)
 8002178:	f7fd ffd8 	bl	800012c <__udivsi3>
 800217c:	0003      	movs	r3, r0
 800217e:	001a      	movs	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	435a      	muls	r2, r3
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <SystemCoreClockUpdate+0x110>)
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e00e      	b.n	80021a8 <SystemCoreClockUpdate+0xe8>
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	4812      	ldr	r0, [pc, #72]	@ (80021d8 <SystemCoreClockUpdate+0x118>)
 800218e:	f7fd ffcd 	bl	800012c <__udivsi3>
 8002192:	0003      	movs	r3, r0
 8002194:	001a      	movs	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	435a      	muls	r2, r3
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <SystemCoreClockUpdate+0x110>)
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e003      	b.n	80021a8 <SystemCoreClockUpdate+0xe8>
 80021a0:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <SystemCoreClockUpdate+0x110>)
 80021a2:	4a0d      	ldr	r2, [pc, #52]	@ (80021d8 <SystemCoreClockUpdate+0x118>)
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <SystemCoreClockUpdate+0x10c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	220f      	movs	r2, #15
 80021b0:	4013      	ands	r3, r2
 80021b2:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <SystemCoreClockUpdate+0x11c>)
 80021b4:	5cd3      	ldrb	r3, [r2, r3]
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <SystemCoreClockUpdate+0x110>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	40da      	lsrs	r2, r3
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <SystemCoreClockUpdate+0x110>)
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	46c0      	nop			@ (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b004      	add	sp, #16
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	20000000 	.word	0x20000000
 80021d4:	02dc6c00 	.word	0x02dc6c00
 80021d8:	007a1200 	.word	0x007a1200
 80021dc:	08004228 	.word	0x08004228

080021e0 <atoi>:
 80021e0:	b510      	push	{r4, lr}
 80021e2:	220a      	movs	r2, #10
 80021e4:	2100      	movs	r1, #0
 80021e6:	f000 f947 	bl	8002478 <strtol>
 80021ea:	bd10      	pop	{r4, pc}

080021ec <malloc>:
 80021ec:	b510      	push	{r4, lr}
 80021ee:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <malloc+0x10>)
 80021f0:	0001      	movs	r1, r0
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	f000 f826 	bl	8002244 <_malloc_r>
 80021f8:	bd10      	pop	{r4, pc}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	20000010 	.word	0x20000010

08002200 <sbrk_aligned>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	4e0f      	ldr	r6, [pc, #60]	@ (8002240 <sbrk_aligned+0x40>)
 8002204:	000d      	movs	r5, r1
 8002206:	6831      	ldr	r1, [r6, #0]
 8002208:	0004      	movs	r4, r0
 800220a:	2900      	cmp	r1, #0
 800220c:	d102      	bne.n	8002214 <sbrk_aligned+0x14>
 800220e:	f000 fcf7 	bl	8002c00 <_sbrk_r>
 8002212:	6030      	str	r0, [r6, #0]
 8002214:	0029      	movs	r1, r5
 8002216:	0020      	movs	r0, r4
 8002218:	f000 fcf2 	bl	8002c00 <_sbrk_r>
 800221c:	1c43      	adds	r3, r0, #1
 800221e:	d103      	bne.n	8002228 <sbrk_aligned+0x28>
 8002220:	2501      	movs	r5, #1
 8002222:	426d      	negs	r5, r5
 8002224:	0028      	movs	r0, r5
 8002226:	bd70      	pop	{r4, r5, r6, pc}
 8002228:	2303      	movs	r3, #3
 800222a:	1cc5      	adds	r5, r0, #3
 800222c:	439d      	bics	r5, r3
 800222e:	42a8      	cmp	r0, r5
 8002230:	d0f8      	beq.n	8002224 <sbrk_aligned+0x24>
 8002232:	1a29      	subs	r1, r5, r0
 8002234:	0020      	movs	r0, r4
 8002236:	f000 fce3 	bl	8002c00 <_sbrk_r>
 800223a:	3001      	adds	r0, #1
 800223c:	d1f2      	bne.n	8002224 <sbrk_aligned+0x24>
 800223e:	e7ef      	b.n	8002220 <sbrk_aligned+0x20>
 8002240:	20000198 	.word	0x20000198

08002244 <_malloc_r>:
 8002244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002246:	2203      	movs	r2, #3
 8002248:	1ccb      	adds	r3, r1, #3
 800224a:	4393      	bics	r3, r2
 800224c:	3308      	adds	r3, #8
 800224e:	0005      	movs	r5, r0
 8002250:	001f      	movs	r7, r3
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d234      	bcs.n	80022c0 <_malloc_r+0x7c>
 8002256:	270c      	movs	r7, #12
 8002258:	42b9      	cmp	r1, r7
 800225a:	d833      	bhi.n	80022c4 <_malloc_r+0x80>
 800225c:	0028      	movs	r0, r5
 800225e:	f000 f871 	bl	8002344 <__malloc_lock>
 8002262:	4e37      	ldr	r6, [pc, #220]	@ (8002340 <_malloc_r+0xfc>)
 8002264:	6833      	ldr	r3, [r6, #0]
 8002266:	001c      	movs	r4, r3
 8002268:	2c00      	cmp	r4, #0
 800226a:	d12f      	bne.n	80022cc <_malloc_r+0x88>
 800226c:	0039      	movs	r1, r7
 800226e:	0028      	movs	r0, r5
 8002270:	f7ff ffc6 	bl	8002200 <sbrk_aligned>
 8002274:	0004      	movs	r4, r0
 8002276:	1c43      	adds	r3, r0, #1
 8002278:	d15f      	bne.n	800233a <_malloc_r+0xf6>
 800227a:	6834      	ldr	r4, [r6, #0]
 800227c:	9400      	str	r4, [sp, #0]
 800227e:	9b00      	ldr	r3, [sp, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d14a      	bne.n	800231a <_malloc_r+0xd6>
 8002284:	2c00      	cmp	r4, #0
 8002286:	d052      	beq.n	800232e <_malloc_r+0xea>
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	0028      	movs	r0, r5
 800228c:	18e3      	adds	r3, r4, r3
 800228e:	9900      	ldr	r1, [sp, #0]
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	f000 fcb5 	bl	8002c00 <_sbrk_r>
 8002296:	9b01      	ldr	r3, [sp, #4]
 8002298:	4283      	cmp	r3, r0
 800229a:	d148      	bne.n	800232e <_malloc_r+0xea>
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	0028      	movs	r0, r5
 80022a0:	1aff      	subs	r7, r7, r3
 80022a2:	0039      	movs	r1, r7
 80022a4:	f7ff ffac 	bl	8002200 <sbrk_aligned>
 80022a8:	3001      	adds	r0, #1
 80022aa:	d040      	beq.n	800232e <_malloc_r+0xea>
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	19db      	adds	r3, r3, r7
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	6833      	ldr	r3, [r6, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	d133      	bne.n	8002322 <_malloc_r+0xde>
 80022ba:	9b00      	ldr	r3, [sp, #0]
 80022bc:	6033      	str	r3, [r6, #0]
 80022be:	e019      	b.n	80022f4 <_malloc_r+0xb0>
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	dac9      	bge.n	8002258 <_malloc_r+0x14>
 80022c4:	230c      	movs	r3, #12
 80022c6:	602b      	str	r3, [r5, #0]
 80022c8:	2000      	movs	r0, #0
 80022ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80022cc:	6821      	ldr	r1, [r4, #0]
 80022ce:	1bc9      	subs	r1, r1, r7
 80022d0:	d420      	bmi.n	8002314 <_malloc_r+0xd0>
 80022d2:	290b      	cmp	r1, #11
 80022d4:	d90a      	bls.n	80022ec <_malloc_r+0xa8>
 80022d6:	19e2      	adds	r2, r4, r7
 80022d8:	6027      	str	r7, [r4, #0]
 80022da:	42a3      	cmp	r3, r4
 80022dc:	d104      	bne.n	80022e8 <_malloc_r+0xa4>
 80022de:	6032      	str	r2, [r6, #0]
 80022e0:	6863      	ldr	r3, [r4, #4]
 80022e2:	6011      	str	r1, [r2, #0]
 80022e4:	6053      	str	r3, [r2, #4]
 80022e6:	e005      	b.n	80022f4 <_malloc_r+0xb0>
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	e7f9      	b.n	80022e0 <_malloc_r+0x9c>
 80022ec:	6862      	ldr	r2, [r4, #4]
 80022ee:	42a3      	cmp	r3, r4
 80022f0:	d10e      	bne.n	8002310 <_malloc_r+0xcc>
 80022f2:	6032      	str	r2, [r6, #0]
 80022f4:	0028      	movs	r0, r5
 80022f6:	f000 f82d 	bl	8002354 <__malloc_unlock>
 80022fa:	0020      	movs	r0, r4
 80022fc:	2207      	movs	r2, #7
 80022fe:	300b      	adds	r0, #11
 8002300:	1d23      	adds	r3, r4, #4
 8002302:	4390      	bics	r0, r2
 8002304:	1ac2      	subs	r2, r0, r3
 8002306:	4298      	cmp	r0, r3
 8002308:	d0df      	beq.n	80022ca <_malloc_r+0x86>
 800230a:	1a1b      	subs	r3, r3, r0
 800230c:	50a3      	str	r3, [r4, r2]
 800230e:	e7dc      	b.n	80022ca <_malloc_r+0x86>
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	e7ef      	b.n	80022f4 <_malloc_r+0xb0>
 8002314:	0023      	movs	r3, r4
 8002316:	6864      	ldr	r4, [r4, #4]
 8002318:	e7a6      	b.n	8002268 <_malloc_r+0x24>
 800231a:	9c00      	ldr	r4, [sp, #0]
 800231c:	6863      	ldr	r3, [r4, #4]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	e7ad      	b.n	800227e <_malloc_r+0x3a>
 8002322:	001a      	movs	r2, r3
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	42a3      	cmp	r3, r4
 8002328:	d1fb      	bne.n	8002322 <_malloc_r+0xde>
 800232a:	2300      	movs	r3, #0
 800232c:	e7da      	b.n	80022e4 <_malloc_r+0xa0>
 800232e:	230c      	movs	r3, #12
 8002330:	0028      	movs	r0, r5
 8002332:	602b      	str	r3, [r5, #0]
 8002334:	f000 f80e 	bl	8002354 <__malloc_unlock>
 8002338:	e7c6      	b.n	80022c8 <_malloc_r+0x84>
 800233a:	6007      	str	r7, [r0, #0]
 800233c:	e7da      	b.n	80022f4 <_malloc_r+0xb0>
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	2000019c 	.word	0x2000019c

08002344 <__malloc_lock>:
 8002344:	b510      	push	{r4, lr}
 8002346:	4802      	ldr	r0, [pc, #8]	@ (8002350 <__malloc_lock+0xc>)
 8002348:	f000 fcab 	bl	8002ca2 <__retarget_lock_acquire_recursive>
 800234c:	bd10      	pop	{r4, pc}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	200002e0 	.word	0x200002e0

08002354 <__malloc_unlock>:
 8002354:	b510      	push	{r4, lr}
 8002356:	4802      	ldr	r0, [pc, #8]	@ (8002360 <__malloc_unlock+0xc>)
 8002358:	f000 fca4 	bl	8002ca4 <__retarget_lock_release_recursive>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	200002e0 	.word	0x200002e0

08002364 <_strtol_l.constprop.0>:
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	0017      	movs	r7, r2
 800236a:	001e      	movs	r6, r3
 800236c:	9003      	str	r0, [sp, #12]
 800236e:	9101      	str	r1, [sp, #4]
 8002370:	2b24      	cmp	r3, #36	@ 0x24
 8002372:	d844      	bhi.n	80023fe <_strtol_l.constprop.0+0x9a>
 8002374:	000c      	movs	r4, r1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d041      	beq.n	80023fe <_strtol_l.constprop.0+0x9a>
 800237a:	4b3d      	ldr	r3, [pc, #244]	@ (8002470 <_strtol_l.constprop.0+0x10c>)
 800237c:	2208      	movs	r2, #8
 800237e:	469c      	mov	ip, r3
 8002380:	0023      	movs	r3, r4
 8002382:	4661      	mov	r1, ip
 8002384:	781d      	ldrb	r5, [r3, #0]
 8002386:	3401      	adds	r4, #1
 8002388:	5d48      	ldrb	r0, [r1, r5]
 800238a:	0001      	movs	r1, r0
 800238c:	4011      	ands	r1, r2
 800238e:	4210      	tst	r0, r2
 8002390:	d1f6      	bne.n	8002380 <_strtol_l.constprop.0+0x1c>
 8002392:	2d2d      	cmp	r5, #45	@ 0x2d
 8002394:	d13a      	bne.n	800240c <_strtol_l.constprop.0+0xa8>
 8002396:	7825      	ldrb	r5, [r4, #0]
 8002398:	1c9c      	adds	r4, r3, #2
 800239a:	2301      	movs	r3, #1
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2210      	movs	r2, #16
 80023a0:	0033      	movs	r3, r6
 80023a2:	4393      	bics	r3, r2
 80023a4:	d109      	bne.n	80023ba <_strtol_l.constprop.0+0x56>
 80023a6:	2d30      	cmp	r5, #48	@ 0x30
 80023a8:	d136      	bne.n	8002418 <_strtol_l.constprop.0+0xb4>
 80023aa:	2120      	movs	r1, #32
 80023ac:	7823      	ldrb	r3, [r4, #0]
 80023ae:	438b      	bics	r3, r1
 80023b0:	2b58      	cmp	r3, #88	@ 0x58
 80023b2:	d131      	bne.n	8002418 <_strtol_l.constprop.0+0xb4>
 80023b4:	0016      	movs	r6, r2
 80023b6:	7865      	ldrb	r5, [r4, #1]
 80023b8:	3402      	adds	r4, #2
 80023ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002474 <_strtol_l.constprop.0+0x110>)
 80023bc:	9b00      	ldr	r3, [sp, #0]
 80023be:	4694      	mov	ip, r2
 80023c0:	4463      	add	r3, ip
 80023c2:	0031      	movs	r1, r6
 80023c4:	0018      	movs	r0, r3
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	f7fd ff36 	bl	8000238 <__aeabi_uidivmod>
 80023cc:	2200      	movs	r2, #0
 80023ce:	4684      	mov	ip, r0
 80023d0:	0010      	movs	r0, r2
 80023d2:	002b      	movs	r3, r5
 80023d4:	3b30      	subs	r3, #48	@ 0x30
 80023d6:	2b09      	cmp	r3, #9
 80023d8:	d825      	bhi.n	8002426 <_strtol_l.constprop.0+0xc2>
 80023da:	001d      	movs	r5, r3
 80023dc:	42ae      	cmp	r6, r5
 80023de:	dd31      	ble.n	8002444 <_strtol_l.constprop.0+0xe0>
 80023e0:	1c53      	adds	r3, r2, #1
 80023e2:	d009      	beq.n	80023f8 <_strtol_l.constprop.0+0x94>
 80023e4:	2201      	movs	r2, #1
 80023e6:	4252      	negs	r2, r2
 80023e8:	4584      	cmp	ip, r0
 80023ea:	d305      	bcc.n	80023f8 <_strtol_l.constprop.0+0x94>
 80023ec:	d101      	bne.n	80023f2 <_strtol_l.constprop.0+0x8e>
 80023ee:	42a9      	cmp	r1, r5
 80023f0:	db25      	blt.n	800243e <_strtol_l.constprop.0+0xda>
 80023f2:	2201      	movs	r2, #1
 80023f4:	4370      	muls	r0, r6
 80023f6:	1828      	adds	r0, r5, r0
 80023f8:	7825      	ldrb	r5, [r4, #0]
 80023fa:	3401      	adds	r4, #1
 80023fc:	e7e9      	b.n	80023d2 <_strtol_l.constprop.0+0x6e>
 80023fe:	f000 fc25 	bl	8002c4c <__errno>
 8002402:	2316      	movs	r3, #22
 8002404:	6003      	str	r3, [r0, #0]
 8002406:	2000      	movs	r0, #0
 8002408:	b005      	add	sp, #20
 800240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800240c:	9100      	str	r1, [sp, #0]
 800240e:	2d2b      	cmp	r5, #43	@ 0x2b
 8002410:	d1c5      	bne.n	800239e <_strtol_l.constprop.0+0x3a>
 8002412:	7825      	ldrb	r5, [r4, #0]
 8002414:	1c9c      	adds	r4, r3, #2
 8002416:	e7c2      	b.n	800239e <_strtol_l.constprop.0+0x3a>
 8002418:	2e00      	cmp	r6, #0
 800241a:	d1ce      	bne.n	80023ba <_strtol_l.constprop.0+0x56>
 800241c:	3608      	adds	r6, #8
 800241e:	2d30      	cmp	r5, #48	@ 0x30
 8002420:	d0cb      	beq.n	80023ba <_strtol_l.constprop.0+0x56>
 8002422:	3602      	adds	r6, #2
 8002424:	e7c9      	b.n	80023ba <_strtol_l.constprop.0+0x56>
 8002426:	002b      	movs	r3, r5
 8002428:	3b41      	subs	r3, #65	@ 0x41
 800242a:	2b19      	cmp	r3, #25
 800242c:	d801      	bhi.n	8002432 <_strtol_l.constprop.0+0xce>
 800242e:	3d37      	subs	r5, #55	@ 0x37
 8002430:	e7d4      	b.n	80023dc <_strtol_l.constprop.0+0x78>
 8002432:	002b      	movs	r3, r5
 8002434:	3b61      	subs	r3, #97	@ 0x61
 8002436:	2b19      	cmp	r3, #25
 8002438:	d804      	bhi.n	8002444 <_strtol_l.constprop.0+0xe0>
 800243a:	3d57      	subs	r5, #87	@ 0x57
 800243c:	e7ce      	b.n	80023dc <_strtol_l.constprop.0+0x78>
 800243e:	2201      	movs	r2, #1
 8002440:	4252      	negs	r2, r2
 8002442:	e7d9      	b.n	80023f8 <_strtol_l.constprop.0+0x94>
 8002444:	1c53      	adds	r3, r2, #1
 8002446:	d108      	bne.n	800245a <_strtol_l.constprop.0+0xf6>
 8002448:	2322      	movs	r3, #34	@ 0x22
 800244a:	9a03      	ldr	r2, [sp, #12]
 800244c:	9802      	ldr	r0, [sp, #8]
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	2f00      	cmp	r7, #0
 8002452:	d0d9      	beq.n	8002408 <_strtol_l.constprop.0+0xa4>
 8002454:	1e63      	subs	r3, r4, #1
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	e007      	b.n	800246a <_strtol_l.constprop.0+0x106>
 800245a:	9b00      	ldr	r3, [sp, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d000      	beq.n	8002462 <_strtol_l.constprop.0+0xfe>
 8002460:	4240      	negs	r0, r0
 8002462:	2f00      	cmp	r7, #0
 8002464:	d0d0      	beq.n	8002408 <_strtol_l.constprop.0+0xa4>
 8002466:	2a00      	cmp	r2, #0
 8002468:	d1f4      	bne.n	8002454 <_strtol_l.constprop.0+0xf0>
 800246a:	9b01      	ldr	r3, [sp, #4]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	e7cb      	b.n	8002408 <_strtol_l.constprop.0+0xa4>
 8002470:	08004239 	.word	0x08004239
 8002474:	7fffffff 	.word	0x7fffffff

08002478 <strtol>:
 8002478:	b510      	push	{r4, lr}
 800247a:	4c04      	ldr	r4, [pc, #16]	@ (800248c <strtol+0x14>)
 800247c:	0013      	movs	r3, r2
 800247e:	000a      	movs	r2, r1
 8002480:	0001      	movs	r1, r0
 8002482:	6820      	ldr	r0, [r4, #0]
 8002484:	f7ff ff6e 	bl	8002364 <_strtol_l.constprop.0>
 8002488:	bd10      	pop	{r4, pc}
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	20000010 	.word	0x20000010

08002490 <std>:
 8002490:	2300      	movs	r3, #0
 8002492:	b510      	push	{r4, lr}
 8002494:	0004      	movs	r4, r0
 8002496:	6003      	str	r3, [r0, #0]
 8002498:	6043      	str	r3, [r0, #4]
 800249a:	6083      	str	r3, [r0, #8]
 800249c:	8181      	strh	r1, [r0, #12]
 800249e:	6643      	str	r3, [r0, #100]	@ 0x64
 80024a0:	81c2      	strh	r2, [r0, #14]
 80024a2:	6103      	str	r3, [r0, #16]
 80024a4:	6143      	str	r3, [r0, #20]
 80024a6:	6183      	str	r3, [r0, #24]
 80024a8:	0019      	movs	r1, r3
 80024aa:	2208      	movs	r2, #8
 80024ac:	305c      	adds	r0, #92	@ 0x5c
 80024ae:	f000 fad9 	bl	8002a64 <memset>
 80024b2:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <std+0x50>)
 80024b4:	6224      	str	r4, [r4, #32]
 80024b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80024b8:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <std+0x54>)
 80024ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <std+0x58>)
 80024be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <std+0x5c>)
 80024c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80024c4:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <std+0x60>)
 80024c6:	429c      	cmp	r4, r3
 80024c8:	d005      	beq.n	80024d6 <std+0x46>
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <std+0x64>)
 80024cc:	429c      	cmp	r4, r3
 80024ce:	d002      	beq.n	80024d6 <std+0x46>
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <std+0x68>)
 80024d2:	429c      	cmp	r4, r3
 80024d4:	d103      	bne.n	80024de <std+0x4e>
 80024d6:	0020      	movs	r0, r4
 80024d8:	3058      	adds	r0, #88	@ 0x58
 80024da:	f000 fbe1 	bl	8002ca0 <__retarget_lock_init_recursive>
 80024de:	bd10      	pop	{r4, pc}
 80024e0:	0800288d 	.word	0x0800288d
 80024e4:	080028b5 	.word	0x080028b5
 80024e8:	080028ed 	.word	0x080028ed
 80024ec:	08002919 	.word	0x08002919
 80024f0:	200001a0 	.word	0x200001a0
 80024f4:	20000208 	.word	0x20000208
 80024f8:	20000270 	.word	0x20000270

080024fc <stdio_exit_handler>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	4a03      	ldr	r2, [pc, #12]	@ (800250c <stdio_exit_handler+0x10>)
 8002500:	4903      	ldr	r1, [pc, #12]	@ (8002510 <stdio_exit_handler+0x14>)
 8002502:	4804      	ldr	r0, [pc, #16]	@ (8002514 <stdio_exit_handler+0x18>)
 8002504:	f000 f86c 	bl	80025e0 <_fwalk_sglue>
 8002508:	bd10      	pop	{r4, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	20000004 	.word	0x20000004
 8002510:	08003419 	.word	0x08003419
 8002514:	20000014 	.word	0x20000014

08002518 <cleanup_stdio>:
 8002518:	6841      	ldr	r1, [r0, #4]
 800251a:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <cleanup_stdio+0x30>)
 800251c:	b510      	push	{r4, lr}
 800251e:	0004      	movs	r4, r0
 8002520:	4299      	cmp	r1, r3
 8002522:	d001      	beq.n	8002528 <cleanup_stdio+0x10>
 8002524:	f000 ff78 	bl	8003418 <_fflush_r>
 8002528:	68a1      	ldr	r1, [r4, #8]
 800252a:	4b08      	ldr	r3, [pc, #32]	@ (800254c <cleanup_stdio+0x34>)
 800252c:	4299      	cmp	r1, r3
 800252e:	d002      	beq.n	8002536 <cleanup_stdio+0x1e>
 8002530:	0020      	movs	r0, r4
 8002532:	f000 ff71 	bl	8003418 <_fflush_r>
 8002536:	68e1      	ldr	r1, [r4, #12]
 8002538:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <cleanup_stdio+0x38>)
 800253a:	4299      	cmp	r1, r3
 800253c:	d002      	beq.n	8002544 <cleanup_stdio+0x2c>
 800253e:	0020      	movs	r0, r4
 8002540:	f000 ff6a 	bl	8003418 <_fflush_r>
 8002544:	bd10      	pop	{r4, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	200001a0 	.word	0x200001a0
 800254c:	20000208 	.word	0x20000208
 8002550:	20000270 	.word	0x20000270

08002554 <global_stdio_init.part.0>:
 8002554:	b510      	push	{r4, lr}
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <global_stdio_init.part.0+0x28>)
 8002558:	4a09      	ldr	r2, [pc, #36]	@ (8002580 <global_stdio_init.part.0+0x2c>)
 800255a:	2104      	movs	r1, #4
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	4809      	ldr	r0, [pc, #36]	@ (8002584 <global_stdio_init.part.0+0x30>)
 8002560:	2200      	movs	r2, #0
 8002562:	f7ff ff95 	bl	8002490 <std>
 8002566:	2201      	movs	r2, #1
 8002568:	2109      	movs	r1, #9
 800256a:	4807      	ldr	r0, [pc, #28]	@ (8002588 <global_stdio_init.part.0+0x34>)
 800256c:	f7ff ff90 	bl	8002490 <std>
 8002570:	2202      	movs	r2, #2
 8002572:	2112      	movs	r1, #18
 8002574:	4805      	ldr	r0, [pc, #20]	@ (800258c <global_stdio_init.part.0+0x38>)
 8002576:	f7ff ff8b 	bl	8002490 <std>
 800257a:	bd10      	pop	{r4, pc}
 800257c:	200002d8 	.word	0x200002d8
 8002580:	080024fd 	.word	0x080024fd
 8002584:	200001a0 	.word	0x200001a0
 8002588:	20000208 	.word	0x20000208
 800258c:	20000270 	.word	0x20000270

08002590 <__sfp_lock_acquire>:
 8002590:	b510      	push	{r4, lr}
 8002592:	4802      	ldr	r0, [pc, #8]	@ (800259c <__sfp_lock_acquire+0xc>)
 8002594:	f000 fb85 	bl	8002ca2 <__retarget_lock_acquire_recursive>
 8002598:	bd10      	pop	{r4, pc}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	200002e1 	.word	0x200002e1

080025a0 <__sfp_lock_release>:
 80025a0:	b510      	push	{r4, lr}
 80025a2:	4802      	ldr	r0, [pc, #8]	@ (80025ac <__sfp_lock_release+0xc>)
 80025a4:	f000 fb7e 	bl	8002ca4 <__retarget_lock_release_recursive>
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	200002e1 	.word	0x200002e1

080025b0 <__sinit>:
 80025b0:	b510      	push	{r4, lr}
 80025b2:	0004      	movs	r4, r0
 80025b4:	f7ff ffec 	bl	8002590 <__sfp_lock_acquire>
 80025b8:	6a23      	ldr	r3, [r4, #32]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <__sinit+0x14>
 80025be:	f7ff ffef 	bl	80025a0 <__sfp_lock_release>
 80025c2:	bd10      	pop	{r4, pc}
 80025c4:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <__sinit+0x28>)
 80025c6:	6223      	str	r3, [r4, #32]
 80025c8:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <__sinit+0x2c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f6      	bne.n	80025be <__sinit+0xe>
 80025d0:	f7ff ffc0 	bl	8002554 <global_stdio_init.part.0>
 80025d4:	e7f3      	b.n	80025be <__sinit+0xe>
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	08002519 	.word	0x08002519
 80025dc:	200002d8 	.word	0x200002d8

080025e0 <_fwalk_sglue>:
 80025e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025e2:	0014      	movs	r4, r2
 80025e4:	2600      	movs	r6, #0
 80025e6:	9000      	str	r0, [sp, #0]
 80025e8:	9101      	str	r1, [sp, #4]
 80025ea:	68a5      	ldr	r5, [r4, #8]
 80025ec:	6867      	ldr	r7, [r4, #4]
 80025ee:	3f01      	subs	r7, #1
 80025f0:	d504      	bpl.n	80025fc <_fwalk_sglue+0x1c>
 80025f2:	6824      	ldr	r4, [r4, #0]
 80025f4:	2c00      	cmp	r4, #0
 80025f6:	d1f8      	bne.n	80025ea <_fwalk_sglue+0xa>
 80025f8:	0030      	movs	r0, r6
 80025fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80025fc:	89ab      	ldrh	r3, [r5, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d908      	bls.n	8002614 <_fwalk_sglue+0x34>
 8002602:	220e      	movs	r2, #14
 8002604:	5eab      	ldrsh	r3, [r5, r2]
 8002606:	3301      	adds	r3, #1
 8002608:	d004      	beq.n	8002614 <_fwalk_sglue+0x34>
 800260a:	0029      	movs	r1, r5
 800260c:	9800      	ldr	r0, [sp, #0]
 800260e:	9b01      	ldr	r3, [sp, #4]
 8002610:	4798      	blx	r3
 8002612:	4306      	orrs	r6, r0
 8002614:	3568      	adds	r5, #104	@ 0x68
 8002616:	e7ea      	b.n	80025ee <_fwalk_sglue+0xe>

08002618 <getchar>:
 8002618:	b510      	push	{r4, lr}
 800261a:	4b03      	ldr	r3, [pc, #12]	@ (8002628 <getchar+0x10>)
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	6841      	ldr	r1, [r0, #4]
 8002620:	f000 ff36 	bl	8003490 <_getc_r>
 8002624:	bd10      	pop	{r4, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	20000010 	.word	0x20000010

0800262c <iprintf>:
 800262c:	b40f      	push	{r0, r1, r2, r3}
 800262e:	b507      	push	{r0, r1, r2, lr}
 8002630:	4905      	ldr	r1, [pc, #20]	@ (8002648 <iprintf+0x1c>)
 8002632:	ab04      	add	r3, sp, #16
 8002634:	6808      	ldr	r0, [r1, #0]
 8002636:	cb04      	ldmia	r3!, {r2}
 8002638:	6881      	ldr	r1, [r0, #8]
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	f000 fbcc 	bl	8002dd8 <_vfiprintf_r>
 8002640:	b003      	add	sp, #12
 8002642:	bc08      	pop	{r3}
 8002644:	b004      	add	sp, #16
 8002646:	4718      	bx	r3
 8002648:	20000010 	.word	0x20000010

0800264c <putchar>:
 800264c:	b510      	push	{r4, lr}
 800264e:	4b03      	ldr	r3, [pc, #12]	@ (800265c <putchar+0x10>)
 8002650:	0001      	movs	r1, r0
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	6882      	ldr	r2, [r0, #8]
 8002656:	f000 ffb4 	bl	80035c2 <_putc_r>
 800265a:	bd10      	pop	{r4, pc}
 800265c:	20000010 	.word	0x20000010

08002660 <_puts_r>:
 8002660:	6a03      	ldr	r3, [r0, #32]
 8002662:	b570      	push	{r4, r5, r6, lr}
 8002664:	0005      	movs	r5, r0
 8002666:	000e      	movs	r6, r1
 8002668:	6884      	ldr	r4, [r0, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <_puts_r+0x12>
 800266e:	f7ff ff9f 	bl	80025b0 <__sinit>
 8002672:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002674:	07db      	lsls	r3, r3, #31
 8002676:	d405      	bmi.n	8002684 <_puts_r+0x24>
 8002678:	89a3      	ldrh	r3, [r4, #12]
 800267a:	059b      	lsls	r3, r3, #22
 800267c:	d402      	bmi.n	8002684 <_puts_r+0x24>
 800267e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002680:	f000 fb0f 	bl	8002ca2 <__retarget_lock_acquire_recursive>
 8002684:	89a3      	ldrh	r3, [r4, #12]
 8002686:	071b      	lsls	r3, r3, #28
 8002688:	d502      	bpl.n	8002690 <_puts_r+0x30>
 800268a:	6923      	ldr	r3, [r4, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d11f      	bne.n	80026d0 <_puts_r+0x70>
 8002690:	0021      	movs	r1, r4
 8002692:	0028      	movs	r0, r5
 8002694:	f000 f988 	bl	80029a8 <__swsetup_r>
 8002698:	2800      	cmp	r0, #0
 800269a:	d019      	beq.n	80026d0 <_puts_r+0x70>
 800269c:	2501      	movs	r5, #1
 800269e:	426d      	negs	r5, r5
 80026a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80026a2:	07db      	lsls	r3, r3, #31
 80026a4:	d405      	bmi.n	80026b2 <_puts_r+0x52>
 80026a6:	89a3      	ldrh	r3, [r4, #12]
 80026a8:	059b      	lsls	r3, r3, #22
 80026aa:	d402      	bmi.n	80026b2 <_puts_r+0x52>
 80026ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026ae:	f000 faf9 	bl	8002ca4 <__retarget_lock_release_recursive>
 80026b2:	0028      	movs	r0, r5
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
 80026b6:	3601      	adds	r6, #1
 80026b8:	60a3      	str	r3, [r4, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	da04      	bge.n	80026c8 <_puts_r+0x68>
 80026be:	69a2      	ldr	r2, [r4, #24]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dc16      	bgt.n	80026f2 <_puts_r+0x92>
 80026c4:	290a      	cmp	r1, #10
 80026c6:	d014      	beq.n	80026f2 <_puts_r+0x92>
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	6022      	str	r2, [r4, #0]
 80026ce:	7019      	strb	r1, [r3, #0]
 80026d0:	68a3      	ldr	r3, [r4, #8]
 80026d2:	7831      	ldrb	r1, [r6, #0]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d1ed      	bne.n	80026b6 <_puts_r+0x56>
 80026da:	60a3      	str	r3, [r4, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da0f      	bge.n	8002700 <_puts_r+0xa0>
 80026e0:	0022      	movs	r2, r4
 80026e2:	0028      	movs	r0, r5
 80026e4:	310a      	adds	r1, #10
 80026e6:	f000 f91d 	bl	8002924 <__swbuf_r>
 80026ea:	3001      	adds	r0, #1
 80026ec:	d0d6      	beq.n	800269c <_puts_r+0x3c>
 80026ee:	250a      	movs	r5, #10
 80026f0:	e7d6      	b.n	80026a0 <_puts_r+0x40>
 80026f2:	0022      	movs	r2, r4
 80026f4:	0028      	movs	r0, r5
 80026f6:	f000 f915 	bl	8002924 <__swbuf_r>
 80026fa:	3001      	adds	r0, #1
 80026fc:	d1e8      	bne.n	80026d0 <_puts_r+0x70>
 80026fe:	e7cd      	b.n	800269c <_puts_r+0x3c>
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	6022      	str	r2, [r4, #0]
 8002706:	220a      	movs	r2, #10
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	e7f0      	b.n	80026ee <_puts_r+0x8e>

0800270c <puts>:
 800270c:	b510      	push	{r4, lr}
 800270e:	4b03      	ldr	r3, [pc, #12]	@ (800271c <puts+0x10>)
 8002710:	0001      	movs	r1, r0
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	f7ff ffa4 	bl	8002660 <_puts_r>
 8002718:	bd10      	pop	{r4, pc}
 800271a:	46c0      	nop			@ (mov r8, r8)
 800271c:	20000010 	.word	0x20000010

08002720 <setvbuf>:
 8002720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002722:	001d      	movs	r5, r3
 8002724:	4b57      	ldr	r3, [pc, #348]	@ (8002884 <setvbuf+0x164>)
 8002726:	b085      	sub	sp, #20
 8002728:	681e      	ldr	r6, [r3, #0]
 800272a:	0004      	movs	r4, r0
 800272c:	000f      	movs	r7, r1
 800272e:	9200      	str	r2, [sp, #0]
 8002730:	2e00      	cmp	r6, #0
 8002732:	d005      	beq.n	8002740 <setvbuf+0x20>
 8002734:	6a33      	ldr	r3, [r6, #32]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <setvbuf+0x20>
 800273a:	0030      	movs	r0, r6
 800273c:	f7ff ff38 	bl	80025b0 <__sinit>
 8002740:	9b00      	ldr	r3, [sp, #0]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d005      	beq.n	8002752 <setvbuf+0x32>
 8002746:	2b01      	cmp	r3, #1
 8002748:	d900      	bls.n	800274c <setvbuf+0x2c>
 800274a:	e097      	b.n	800287c <setvbuf+0x15c>
 800274c:	2d00      	cmp	r5, #0
 800274e:	da00      	bge.n	8002752 <setvbuf+0x32>
 8002750:	e094      	b.n	800287c <setvbuf+0x15c>
 8002752:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002754:	07db      	lsls	r3, r3, #31
 8002756:	d405      	bmi.n	8002764 <setvbuf+0x44>
 8002758:	89a3      	ldrh	r3, [r4, #12]
 800275a:	059b      	lsls	r3, r3, #22
 800275c:	d402      	bmi.n	8002764 <setvbuf+0x44>
 800275e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002760:	f000 fa9f 	bl	8002ca2 <__retarget_lock_acquire_recursive>
 8002764:	0021      	movs	r1, r4
 8002766:	0030      	movs	r0, r6
 8002768:	f000 fe56 	bl	8003418 <_fflush_r>
 800276c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800276e:	2900      	cmp	r1, #0
 8002770:	d008      	beq.n	8002784 <setvbuf+0x64>
 8002772:	0023      	movs	r3, r4
 8002774:	3344      	adds	r3, #68	@ 0x44
 8002776:	4299      	cmp	r1, r3
 8002778:	d002      	beq.n	8002780 <setvbuf+0x60>
 800277a:	0030      	movs	r0, r6
 800277c:	f000 faba 	bl	8002cf4 <_free_r>
 8002780:	2300      	movs	r3, #0
 8002782:	6363      	str	r3, [r4, #52]	@ 0x34
 8002784:	2300      	movs	r3, #0
 8002786:	61a3      	str	r3, [r4, #24]
 8002788:	6063      	str	r3, [r4, #4]
 800278a:	89a3      	ldrh	r3, [r4, #12]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	d503      	bpl.n	8002798 <setvbuf+0x78>
 8002790:	0030      	movs	r0, r6
 8002792:	6921      	ldr	r1, [r4, #16]
 8002794:	f000 faae 	bl	8002cf4 <_free_r>
 8002798:	89a3      	ldrh	r3, [r4, #12]
 800279a:	4a3b      	ldr	r2, [pc, #236]	@ (8002888 <setvbuf+0x168>)
 800279c:	4013      	ands	r3, r2
 800279e:	81a3      	strh	r3, [r4, #12]
 80027a0:	9b00      	ldr	r3, [sp, #0]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d060      	beq.n	8002868 <setvbuf+0x148>
 80027a6:	ab03      	add	r3, sp, #12
 80027a8:	0021      	movs	r1, r4
 80027aa:	0030      	movs	r0, r6
 80027ac:	aa02      	add	r2, sp, #8
 80027ae:	f000 fe9d 	bl	80034ec <__swhatbuf_r>
 80027b2:	89a3      	ldrh	r3, [r4, #12]
 80027b4:	4303      	orrs	r3, r0
 80027b6:	81a3      	strh	r3, [r4, #12]
 80027b8:	2d00      	cmp	r5, #0
 80027ba:	d124      	bne.n	8002806 <setvbuf+0xe6>
 80027bc:	9d02      	ldr	r5, [sp, #8]
 80027be:	0028      	movs	r0, r5
 80027c0:	f7ff fd14 	bl	80021ec <malloc>
 80027c4:	9501      	str	r5, [sp, #4]
 80027c6:	1e07      	subs	r7, r0, #0
 80027c8:	d148      	bne.n	800285c <setvbuf+0x13c>
 80027ca:	9b02      	ldr	r3, [sp, #8]
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	42ab      	cmp	r3, r5
 80027d0:	d13f      	bne.n	8002852 <setvbuf+0x132>
 80027d2:	2501      	movs	r5, #1
 80027d4:	426d      	negs	r5, r5
 80027d6:	220c      	movs	r2, #12
 80027d8:	5ea3      	ldrsh	r3, [r4, r2]
 80027da:	2202      	movs	r2, #2
 80027dc:	431a      	orrs	r2, r3
 80027de:	81a2      	strh	r2, [r4, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	60a2      	str	r2, [r4, #8]
 80027e4:	0022      	movs	r2, r4
 80027e6:	3247      	adds	r2, #71	@ 0x47
 80027e8:	6022      	str	r2, [r4, #0]
 80027ea:	6122      	str	r2, [r4, #16]
 80027ec:	2201      	movs	r2, #1
 80027ee:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80027f0:	6162      	str	r2, [r4, #20]
 80027f2:	4211      	tst	r1, r2
 80027f4:	d104      	bne.n	8002800 <setvbuf+0xe0>
 80027f6:	059b      	lsls	r3, r3, #22
 80027f8:	d402      	bmi.n	8002800 <setvbuf+0xe0>
 80027fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027fc:	f000 fa52 	bl	8002ca4 <__retarget_lock_release_recursive>
 8002800:	0028      	movs	r0, r5
 8002802:	b005      	add	sp, #20
 8002804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002806:	2f00      	cmp	r7, #0
 8002808:	d0d9      	beq.n	80027be <setvbuf+0x9e>
 800280a:	6a33      	ldr	r3, [r6, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <setvbuf+0xf6>
 8002810:	0030      	movs	r0, r6
 8002812:	f7ff fecd 	bl	80025b0 <__sinit>
 8002816:	9b00      	ldr	r3, [sp, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d103      	bne.n	8002824 <setvbuf+0x104>
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	9a00      	ldr	r2, [sp, #0]
 8002820:	431a      	orrs	r2, r3
 8002822:	81a2      	strh	r2, [r4, #12]
 8002824:	220c      	movs	r2, #12
 8002826:	5ea3      	ldrsh	r3, [r4, r2]
 8002828:	2208      	movs	r2, #8
 800282a:	0019      	movs	r1, r3
 800282c:	6027      	str	r7, [r4, #0]
 800282e:	6127      	str	r7, [r4, #16]
 8002830:	6165      	str	r5, [r4, #20]
 8002832:	4011      	ands	r1, r2
 8002834:	4213      	tst	r3, r2
 8002836:	d01b      	beq.n	8002870 <setvbuf+0x150>
 8002838:	07da      	lsls	r2, r3, #31
 800283a:	d517      	bpl.n	800286c <setvbuf+0x14c>
 800283c:	2200      	movs	r2, #0
 800283e:	426d      	negs	r5, r5
 8002840:	60a2      	str	r2, [r4, #8]
 8002842:	61a5      	str	r5, [r4, #24]
 8002844:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002846:	07d2      	lsls	r2, r2, #31
 8002848:	d401      	bmi.n	800284e <setvbuf+0x12e>
 800284a:	059b      	lsls	r3, r3, #22
 800284c:	d512      	bpl.n	8002874 <setvbuf+0x154>
 800284e:	2500      	movs	r5, #0
 8002850:	e7d6      	b.n	8002800 <setvbuf+0xe0>
 8002852:	9801      	ldr	r0, [sp, #4]
 8002854:	f7ff fcca 	bl	80021ec <malloc>
 8002858:	1e07      	subs	r7, r0, #0
 800285a:	d0ba      	beq.n	80027d2 <setvbuf+0xb2>
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	89a2      	ldrh	r2, [r4, #12]
 8002860:	9d01      	ldr	r5, [sp, #4]
 8002862:	4313      	orrs	r3, r2
 8002864:	81a3      	strh	r3, [r4, #12]
 8002866:	e7d0      	b.n	800280a <setvbuf+0xea>
 8002868:	2500      	movs	r5, #0
 800286a:	e7b4      	b.n	80027d6 <setvbuf+0xb6>
 800286c:	60a5      	str	r5, [r4, #8]
 800286e:	e7e9      	b.n	8002844 <setvbuf+0x124>
 8002870:	60a1      	str	r1, [r4, #8]
 8002872:	e7e7      	b.n	8002844 <setvbuf+0x124>
 8002874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002876:	f000 fa15 	bl	8002ca4 <__retarget_lock_release_recursive>
 800287a:	e7e8      	b.n	800284e <setvbuf+0x12e>
 800287c:	2501      	movs	r5, #1
 800287e:	426d      	negs	r5, r5
 8002880:	e7be      	b.n	8002800 <setvbuf+0xe0>
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	20000010 	.word	0x20000010
 8002888:	fffff35c 	.word	0xfffff35c

0800288c <__sread>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	000c      	movs	r4, r1
 8002890:	250e      	movs	r5, #14
 8002892:	5f49      	ldrsh	r1, [r1, r5]
 8002894:	f000 f9a0 	bl	8002bd8 <_read_r>
 8002898:	2800      	cmp	r0, #0
 800289a:	db03      	blt.n	80028a4 <__sread+0x18>
 800289c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800289e:	181b      	adds	r3, r3, r0
 80028a0:	6563      	str	r3, [r4, #84]	@ 0x54
 80028a2:	bd70      	pop	{r4, r5, r6, pc}
 80028a4:	89a3      	ldrh	r3, [r4, #12]
 80028a6:	4a02      	ldr	r2, [pc, #8]	@ (80028b0 <__sread+0x24>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	81a3      	strh	r3, [r4, #12]
 80028ac:	e7f9      	b.n	80028a2 <__sread+0x16>
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	ffffefff 	.word	0xffffefff

080028b4 <__swrite>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	001f      	movs	r7, r3
 80028b8:	898b      	ldrh	r3, [r1, #12]
 80028ba:	0005      	movs	r5, r0
 80028bc:	000c      	movs	r4, r1
 80028be:	0016      	movs	r6, r2
 80028c0:	05db      	lsls	r3, r3, #23
 80028c2:	d505      	bpl.n	80028d0 <__swrite+0x1c>
 80028c4:	230e      	movs	r3, #14
 80028c6:	5ec9      	ldrsh	r1, [r1, r3]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2302      	movs	r3, #2
 80028cc:	f000 f970 	bl	8002bb0 <_lseek_r>
 80028d0:	89a3      	ldrh	r3, [r4, #12]
 80028d2:	4a05      	ldr	r2, [pc, #20]	@ (80028e8 <__swrite+0x34>)
 80028d4:	0028      	movs	r0, r5
 80028d6:	4013      	ands	r3, r2
 80028d8:	81a3      	strh	r3, [r4, #12]
 80028da:	0032      	movs	r2, r6
 80028dc:	230e      	movs	r3, #14
 80028de:	5ee1      	ldrsh	r1, [r4, r3]
 80028e0:	003b      	movs	r3, r7
 80028e2:	f000 f99f 	bl	8002c24 <_write_r>
 80028e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e8:	ffffefff 	.word	0xffffefff

080028ec <__sseek>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	000c      	movs	r4, r1
 80028f0:	250e      	movs	r5, #14
 80028f2:	5f49      	ldrsh	r1, [r1, r5]
 80028f4:	f000 f95c 	bl	8002bb0 <_lseek_r>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	1c42      	adds	r2, r0, #1
 80028fc:	d103      	bne.n	8002906 <__sseek+0x1a>
 80028fe:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <__sseek+0x28>)
 8002900:	4013      	ands	r3, r2
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	bd70      	pop	{r4, r5, r6, pc}
 8002906:	2280      	movs	r2, #128	@ 0x80
 8002908:	0152      	lsls	r2, r2, #5
 800290a:	4313      	orrs	r3, r2
 800290c:	81a3      	strh	r3, [r4, #12]
 800290e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002910:	e7f8      	b.n	8002904 <__sseek+0x18>
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	ffffefff 	.word	0xffffefff

08002918 <__sclose>:
 8002918:	b510      	push	{r4, lr}
 800291a:	230e      	movs	r3, #14
 800291c:	5ec9      	ldrsh	r1, [r1, r3]
 800291e:	f000 f935 	bl	8002b8c <_close_r>
 8002922:	bd10      	pop	{r4, pc}

08002924 <__swbuf_r>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	0006      	movs	r6, r0
 8002928:	000d      	movs	r5, r1
 800292a:	0014      	movs	r4, r2
 800292c:	2800      	cmp	r0, #0
 800292e:	d004      	beq.n	800293a <__swbuf_r+0x16>
 8002930:	6a03      	ldr	r3, [r0, #32]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <__swbuf_r+0x16>
 8002936:	f7ff fe3b 	bl	80025b0 <__sinit>
 800293a:	69a3      	ldr	r3, [r4, #24]
 800293c:	60a3      	str	r3, [r4, #8]
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	071b      	lsls	r3, r3, #28
 8002942:	d502      	bpl.n	800294a <__swbuf_r+0x26>
 8002944:	6923      	ldr	r3, [r4, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <__swbuf_r+0x3a>
 800294a:	0021      	movs	r1, r4
 800294c:	0030      	movs	r0, r6
 800294e:	f000 f82b 	bl	80029a8 <__swsetup_r>
 8002952:	2800      	cmp	r0, #0
 8002954:	d003      	beq.n	800295e <__swbuf_r+0x3a>
 8002956:	2501      	movs	r5, #1
 8002958:	426d      	negs	r5, r5
 800295a:	0028      	movs	r0, r5
 800295c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800295e:	6923      	ldr	r3, [r4, #16]
 8002960:	6820      	ldr	r0, [r4, #0]
 8002962:	b2ef      	uxtb	r7, r5
 8002964:	1ac0      	subs	r0, r0, r3
 8002966:	6963      	ldr	r3, [r4, #20]
 8002968:	b2ed      	uxtb	r5, r5
 800296a:	4283      	cmp	r3, r0
 800296c:	dc05      	bgt.n	800297a <__swbuf_r+0x56>
 800296e:	0021      	movs	r1, r4
 8002970:	0030      	movs	r0, r6
 8002972:	f000 fd51 	bl	8003418 <_fflush_r>
 8002976:	2800      	cmp	r0, #0
 8002978:	d1ed      	bne.n	8002956 <__swbuf_r+0x32>
 800297a:	68a3      	ldr	r3, [r4, #8]
 800297c:	3001      	adds	r0, #1
 800297e:	3b01      	subs	r3, #1
 8002980:	60a3      	str	r3, [r4, #8]
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	6022      	str	r2, [r4, #0]
 8002988:	701f      	strb	r7, [r3, #0]
 800298a:	6963      	ldr	r3, [r4, #20]
 800298c:	4283      	cmp	r3, r0
 800298e:	d004      	beq.n	800299a <__swbuf_r+0x76>
 8002990:	89a3      	ldrh	r3, [r4, #12]
 8002992:	07db      	lsls	r3, r3, #31
 8002994:	d5e1      	bpl.n	800295a <__swbuf_r+0x36>
 8002996:	2d0a      	cmp	r5, #10
 8002998:	d1df      	bne.n	800295a <__swbuf_r+0x36>
 800299a:	0021      	movs	r1, r4
 800299c:	0030      	movs	r0, r6
 800299e:	f000 fd3b 	bl	8003418 <_fflush_r>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d0d9      	beq.n	800295a <__swbuf_r+0x36>
 80029a6:	e7d6      	b.n	8002956 <__swbuf_r+0x32>

080029a8 <__swsetup_r>:
 80029a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a60 <__swsetup_r+0xb8>)
 80029aa:	b570      	push	{r4, r5, r6, lr}
 80029ac:	0005      	movs	r5, r0
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	000c      	movs	r4, r1
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d004      	beq.n	80029c0 <__swsetup_r+0x18>
 80029b6:	6a03      	ldr	r3, [r0, #32]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <__swsetup_r+0x18>
 80029bc:	f7ff fdf8 	bl	80025b0 <__sinit>
 80029c0:	230c      	movs	r3, #12
 80029c2:	5ee2      	ldrsh	r2, [r4, r3]
 80029c4:	0713      	lsls	r3, r2, #28
 80029c6:	d423      	bmi.n	8002a10 <__swsetup_r+0x68>
 80029c8:	06d3      	lsls	r3, r2, #27
 80029ca:	d407      	bmi.n	80029dc <__swsetup_r+0x34>
 80029cc:	2309      	movs	r3, #9
 80029ce:	602b      	str	r3, [r5, #0]
 80029d0:	2340      	movs	r3, #64	@ 0x40
 80029d2:	2001      	movs	r0, #1
 80029d4:	4313      	orrs	r3, r2
 80029d6:	81a3      	strh	r3, [r4, #12]
 80029d8:	4240      	negs	r0, r0
 80029da:	e03a      	b.n	8002a52 <__swsetup_r+0xaa>
 80029dc:	0752      	lsls	r2, r2, #29
 80029de:	d513      	bpl.n	8002a08 <__swsetup_r+0x60>
 80029e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80029e2:	2900      	cmp	r1, #0
 80029e4:	d008      	beq.n	80029f8 <__swsetup_r+0x50>
 80029e6:	0023      	movs	r3, r4
 80029e8:	3344      	adds	r3, #68	@ 0x44
 80029ea:	4299      	cmp	r1, r3
 80029ec:	d002      	beq.n	80029f4 <__swsetup_r+0x4c>
 80029ee:	0028      	movs	r0, r5
 80029f0:	f000 f980 	bl	8002cf4 <_free_r>
 80029f4:	2300      	movs	r3, #0
 80029f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80029f8:	2224      	movs	r2, #36	@ 0x24
 80029fa:	89a3      	ldrh	r3, [r4, #12]
 80029fc:	4393      	bics	r3, r2
 80029fe:	81a3      	strh	r3, [r4, #12]
 8002a00:	2300      	movs	r3, #0
 8002a02:	6063      	str	r3, [r4, #4]
 8002a04:	6923      	ldr	r3, [r4, #16]
 8002a06:	6023      	str	r3, [r4, #0]
 8002a08:	2308      	movs	r3, #8
 8002a0a:	89a2      	ldrh	r2, [r4, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	81a3      	strh	r3, [r4, #12]
 8002a10:	6923      	ldr	r3, [r4, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10b      	bne.n	8002a2e <__swsetup_r+0x86>
 8002a16:	21a0      	movs	r1, #160	@ 0xa0
 8002a18:	2280      	movs	r2, #128	@ 0x80
 8002a1a:	89a3      	ldrh	r3, [r4, #12]
 8002a1c:	0089      	lsls	r1, r1, #2
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	400b      	ands	r3, r1
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <__swsetup_r+0x86>
 8002a26:	0021      	movs	r1, r4
 8002a28:	0028      	movs	r0, r5
 8002a2a:	f000 fd89 	bl	8003540 <__smakebuf_r>
 8002a2e:	230c      	movs	r3, #12
 8002a30:	5ee2      	ldrsh	r2, [r4, r3]
 8002a32:	2101      	movs	r1, #1
 8002a34:	0013      	movs	r3, r2
 8002a36:	400b      	ands	r3, r1
 8002a38:	420a      	tst	r2, r1
 8002a3a:	d00b      	beq.n	8002a54 <__swsetup_r+0xac>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60a3      	str	r3, [r4, #8]
 8002a40:	6963      	ldr	r3, [r4, #20]
 8002a42:	425b      	negs	r3, r3
 8002a44:	61a3      	str	r3, [r4, #24]
 8002a46:	2000      	movs	r0, #0
 8002a48:	6923      	ldr	r3, [r4, #16]
 8002a4a:	4283      	cmp	r3, r0
 8002a4c:	d101      	bne.n	8002a52 <__swsetup_r+0xaa>
 8002a4e:	0613      	lsls	r3, r2, #24
 8002a50:	d4be      	bmi.n	80029d0 <__swsetup_r+0x28>
 8002a52:	bd70      	pop	{r4, r5, r6, pc}
 8002a54:	0791      	lsls	r1, r2, #30
 8002a56:	d400      	bmi.n	8002a5a <__swsetup_r+0xb2>
 8002a58:	6963      	ldr	r3, [r4, #20]
 8002a5a:	60a3      	str	r3, [r4, #8]
 8002a5c:	e7f3      	b.n	8002a46 <__swsetup_r+0x9e>
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	20000010 	.word	0x20000010

08002a64 <memset>:
 8002a64:	0003      	movs	r3, r0
 8002a66:	1882      	adds	r2, r0, r2
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d100      	bne.n	8002a6e <memset+0xa>
 8002a6c:	4770      	bx	lr
 8002a6e:	7019      	strb	r1, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	e7f9      	b.n	8002a68 <memset+0x4>

08002a74 <strcasecmp>:
 8002a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a76:	0005      	movs	r5, r0
 8002a78:	2400      	movs	r4, #0
 8002a7a:	2703      	movs	r7, #3
 8002a7c:	4e09      	ldr	r6, [pc, #36]	@ (8002aa4 <strcasecmp+0x30>)
 8002a7e:	5d2a      	ldrb	r2, [r5, r4]
 8002a80:	5cb3      	ldrb	r3, [r6, r2]
 8002a82:	403b      	ands	r3, r7
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d100      	bne.n	8002a8a <strcasecmp+0x16>
 8002a88:	3220      	adds	r2, #32
 8002a8a:	5d0b      	ldrb	r3, [r1, r4]
 8002a8c:	5cf0      	ldrb	r0, [r6, r3]
 8002a8e:	4038      	ands	r0, r7
 8002a90:	2801      	cmp	r0, #1
 8002a92:	d100      	bne.n	8002a96 <strcasecmp+0x22>
 8002a94:	3320      	adds	r3, #32
 8002a96:	1ad0      	subs	r0, r2, r3
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d102      	bne.n	8002aa2 <strcasecmp+0x2e>
 8002a9c:	3401      	adds	r4, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1ed      	bne.n	8002a7e <strcasecmp+0xa>
 8002aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aa4:	08004239 	.word	0x08004239

08002aa8 <strncmp>:
 8002aa8:	b530      	push	{r4, r5, lr}
 8002aaa:	0005      	movs	r5, r0
 8002aac:	1e10      	subs	r0, r2, #0
 8002aae:	d00b      	beq.n	8002ac8 <strncmp+0x20>
 8002ab0:	2400      	movs	r4, #0
 8002ab2:	3a01      	subs	r2, #1
 8002ab4:	5d2b      	ldrb	r3, [r5, r4]
 8002ab6:	5d08      	ldrb	r0, [r1, r4]
 8002ab8:	4283      	cmp	r3, r0
 8002aba:	d104      	bne.n	8002ac6 <strncmp+0x1e>
 8002abc:	42a2      	cmp	r2, r4
 8002abe:	d002      	beq.n	8002ac6 <strncmp+0x1e>
 8002ac0:	3401      	adds	r4, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f6      	bne.n	8002ab4 <strncmp+0xc>
 8002ac6:	1a18      	subs	r0, r3, r0
 8002ac8:	bd30      	pop	{r4, r5, pc}
	...

08002acc <strtok>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	4b16      	ldr	r3, [pc, #88]	@ (8002b28 <strtok+0x5c>)
 8002ad0:	0005      	movs	r5, r0
 8002ad2:	681f      	ldr	r7, [r3, #0]
 8002ad4:	000e      	movs	r6, r1
 8002ad6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002ad8:	2c00      	cmp	r4, #0
 8002ada:	d11d      	bne.n	8002b18 <strtok+0x4c>
 8002adc:	2050      	movs	r0, #80	@ 0x50
 8002ade:	f7ff fb85 	bl	80021ec <malloc>
 8002ae2:	1e02      	subs	r2, r0, #0
 8002ae4:	6478      	str	r0, [r7, #68]	@ 0x44
 8002ae6:	d104      	bne.n	8002af2 <strtok+0x26>
 8002ae8:	215b      	movs	r1, #91	@ 0x5b
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <strtok+0x60>)
 8002aec:	4810      	ldr	r0, [pc, #64]	@ (8002b30 <strtok+0x64>)
 8002aee:	f000 f8e3 	bl	8002cb8 <__assert_func>
 8002af2:	6004      	str	r4, [r0, #0]
 8002af4:	6044      	str	r4, [r0, #4]
 8002af6:	6084      	str	r4, [r0, #8]
 8002af8:	60c4      	str	r4, [r0, #12]
 8002afa:	6104      	str	r4, [r0, #16]
 8002afc:	6144      	str	r4, [r0, #20]
 8002afe:	6184      	str	r4, [r0, #24]
 8002b00:	6284      	str	r4, [r0, #40]	@ 0x28
 8002b02:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8002b04:	6304      	str	r4, [r0, #48]	@ 0x30
 8002b06:	6344      	str	r4, [r0, #52]	@ 0x34
 8002b08:	6384      	str	r4, [r0, #56]	@ 0x38
 8002b0a:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8002b0c:	6404      	str	r4, [r0, #64]	@ 0x40
 8002b0e:	6444      	str	r4, [r0, #68]	@ 0x44
 8002b10:	6484      	str	r4, [r0, #72]	@ 0x48
 8002b12:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8002b14:	7704      	strb	r4, [r0, #28]
 8002b16:	6244      	str	r4, [r0, #36]	@ 0x24
 8002b18:	0031      	movs	r1, r6
 8002b1a:	0028      	movs	r0, r5
 8002b1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f000 f808 	bl	8002b34 <__strtok_r>
 8002b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	20000010 	.word	0x20000010
 8002b2c:	08004339 	.word	0x08004339
 8002b30:	08004350 	.word	0x08004350

08002b34 <__strtok_r>:
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	1e04      	subs	r4, r0, #0
 8002b38:	d102      	bne.n	8002b40 <__strtok_r+0xc>
 8002b3a:	6814      	ldr	r4, [r2, #0]
 8002b3c:	2c00      	cmp	r4, #0
 8002b3e:	d009      	beq.n	8002b54 <__strtok_r+0x20>
 8002b40:	0020      	movs	r0, r4
 8002b42:	000e      	movs	r6, r1
 8002b44:	7805      	ldrb	r5, [r0, #0]
 8002b46:	3401      	adds	r4, #1
 8002b48:	7837      	ldrb	r7, [r6, #0]
 8002b4a:	2f00      	cmp	r7, #0
 8002b4c:	d104      	bne.n	8002b58 <__strtok_r+0x24>
 8002b4e:	2d00      	cmp	r5, #0
 8002b50:	d10d      	bne.n	8002b6e <__strtok_r+0x3a>
 8002b52:	6015      	str	r5, [r2, #0]
 8002b54:	2000      	movs	r0, #0
 8002b56:	e006      	b.n	8002b66 <__strtok_r+0x32>
 8002b58:	3601      	adds	r6, #1
 8002b5a:	42bd      	cmp	r5, r7
 8002b5c:	d1f4      	bne.n	8002b48 <__strtok_r+0x14>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ee      	bne.n	8002b40 <__strtok_r+0xc>
 8002b62:	6014      	str	r4, [r2, #0]
 8002b64:	7003      	strb	r3, [r0, #0]
 8002b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b68:	3301      	adds	r3, #1
 8002b6a:	2d00      	cmp	r5, #0
 8002b6c:	d102      	bne.n	8002b74 <__strtok_r+0x40>
 8002b6e:	000b      	movs	r3, r1
 8002b70:	7826      	ldrb	r6, [r4, #0]
 8002b72:	3401      	adds	r4, #1
 8002b74:	781d      	ldrb	r5, [r3, #0]
 8002b76:	42ae      	cmp	r6, r5
 8002b78:	d1f6      	bne.n	8002b68 <__strtok_r+0x34>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	001d      	movs	r5, r3
 8002b7e:	429e      	cmp	r6, r3
 8002b80:	d002      	beq.n	8002b88 <__strtok_r+0x54>
 8002b82:	0023      	movs	r3, r4
 8002b84:	1e61      	subs	r1, r4, #1
 8002b86:	700d      	strb	r5, [r1, #0]
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e7ec      	b.n	8002b66 <__strtok_r+0x32>

08002b8c <_close_r>:
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	b570      	push	{r4, r5, r6, lr}
 8002b90:	4d06      	ldr	r5, [pc, #24]	@ (8002bac <_close_r+0x20>)
 8002b92:	0004      	movs	r4, r0
 8002b94:	0008      	movs	r0, r1
 8002b96:	602b      	str	r3, [r5, #0]
 8002b98:	f7ff f940 	bl	8001e1c <_close>
 8002b9c:	1c43      	adds	r3, r0, #1
 8002b9e:	d103      	bne.n	8002ba8 <_close_r+0x1c>
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d000      	beq.n	8002ba8 <_close_r+0x1c>
 8002ba6:	6023      	str	r3, [r4, #0]
 8002ba8:	bd70      	pop	{r4, r5, r6, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	200002dc 	.word	0x200002dc

08002bb0 <_lseek_r>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	0004      	movs	r4, r0
 8002bb4:	0008      	movs	r0, r1
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	001a      	movs	r2, r3
 8002bba:	2300      	movs	r3, #0
 8002bbc:	4d05      	ldr	r5, [pc, #20]	@ (8002bd4 <_lseek_r+0x24>)
 8002bbe:	602b      	str	r3, [r5, #0]
 8002bc0:	f7ff f94d 	bl	8001e5e <_lseek>
 8002bc4:	1c43      	adds	r3, r0, #1
 8002bc6:	d103      	bne.n	8002bd0 <_lseek_r+0x20>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d000      	beq.n	8002bd0 <_lseek_r+0x20>
 8002bce:	6023      	str	r3, [r4, #0]
 8002bd0:	bd70      	pop	{r4, r5, r6, pc}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	200002dc 	.word	0x200002dc

08002bd8 <_read_r>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	0004      	movs	r4, r0
 8002bdc:	0008      	movs	r0, r1
 8002bde:	0011      	movs	r1, r2
 8002be0:	001a      	movs	r2, r3
 8002be2:	2300      	movs	r3, #0
 8002be4:	4d05      	ldr	r5, [pc, #20]	@ (8002bfc <_read_r+0x24>)
 8002be6:	602b      	str	r3, [r5, #0]
 8002be8:	f7ff f8df 	bl	8001daa <_read>
 8002bec:	1c43      	adds	r3, r0, #1
 8002bee:	d103      	bne.n	8002bf8 <_read_r+0x20>
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d000      	beq.n	8002bf8 <_read_r+0x20>
 8002bf6:	6023      	str	r3, [r4, #0]
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	200002dc 	.word	0x200002dc

08002c00 <_sbrk_r>:
 8002c00:	2300      	movs	r3, #0
 8002c02:	b570      	push	{r4, r5, r6, lr}
 8002c04:	4d06      	ldr	r5, [pc, #24]	@ (8002c20 <_sbrk_r+0x20>)
 8002c06:	0004      	movs	r4, r0
 8002c08:	0008      	movs	r0, r1
 8002c0a:	602b      	str	r3, [r5, #0]
 8002c0c:	f7ff f932 	bl	8001e74 <_sbrk>
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	d103      	bne.n	8002c1c <_sbrk_r+0x1c>
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d000      	beq.n	8002c1c <_sbrk_r+0x1c>
 8002c1a:	6023      	str	r3, [r4, #0]
 8002c1c:	bd70      	pop	{r4, r5, r6, pc}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	200002dc 	.word	0x200002dc

08002c24 <_write_r>:
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	0004      	movs	r4, r0
 8002c28:	0008      	movs	r0, r1
 8002c2a:	0011      	movs	r1, r2
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	2300      	movs	r3, #0
 8002c30:	4d05      	ldr	r5, [pc, #20]	@ (8002c48 <_write_r+0x24>)
 8002c32:	602b      	str	r3, [r5, #0]
 8002c34:	f7ff f8d6 	bl	8001de4 <_write>
 8002c38:	1c43      	adds	r3, r0, #1
 8002c3a:	d103      	bne.n	8002c44 <_write_r+0x20>
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d000      	beq.n	8002c44 <_write_r+0x20>
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	bd70      	pop	{r4, r5, r6, pc}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	200002dc 	.word	0x200002dc

08002c4c <__errno>:
 8002c4c:	4b01      	ldr	r3, [pc, #4]	@ (8002c54 <__errno+0x8>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	4770      	bx	lr
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	20000010 	.word	0x20000010

08002c58 <__libc_init_array>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	2600      	movs	r6, #0
 8002c5c:	4c0c      	ldr	r4, [pc, #48]	@ (8002c90 <__libc_init_array+0x38>)
 8002c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8002c94 <__libc_init_array+0x3c>)
 8002c60:	1b64      	subs	r4, r4, r5
 8002c62:	10a4      	asrs	r4, r4, #2
 8002c64:	42a6      	cmp	r6, r4
 8002c66:	d109      	bne.n	8002c7c <__libc_init_array+0x24>
 8002c68:	2600      	movs	r6, #0
 8002c6a:	f000 fdff 	bl	800386c <_init>
 8002c6e:	4c0a      	ldr	r4, [pc, #40]	@ (8002c98 <__libc_init_array+0x40>)
 8002c70:	4d0a      	ldr	r5, [pc, #40]	@ (8002c9c <__libc_init_array+0x44>)
 8002c72:	1b64      	subs	r4, r4, r5
 8002c74:	10a4      	asrs	r4, r4, #2
 8002c76:	42a6      	cmp	r6, r4
 8002c78:	d105      	bne.n	8002c86 <__libc_init_array+0x2e>
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
 8002c7c:	00b3      	lsls	r3, r6, #2
 8002c7e:	58eb      	ldr	r3, [r5, r3]
 8002c80:	4798      	blx	r3
 8002c82:	3601      	adds	r6, #1
 8002c84:	e7ee      	b.n	8002c64 <__libc_init_array+0xc>
 8002c86:	00b3      	lsls	r3, r6, #2
 8002c88:	58eb      	ldr	r3, [r5, r3]
 8002c8a:	4798      	blx	r3
 8002c8c:	3601      	adds	r6, #1
 8002c8e:	e7f2      	b.n	8002c76 <__libc_init_array+0x1e>
 8002c90:	0800441c 	.word	0x0800441c
 8002c94:	0800441c 	.word	0x0800441c
 8002c98:	08004420 	.word	0x08004420
 8002c9c:	0800441c 	.word	0x0800441c

08002ca0 <__retarget_lock_init_recursive>:
 8002ca0:	4770      	bx	lr

08002ca2 <__retarget_lock_acquire_recursive>:
 8002ca2:	4770      	bx	lr

08002ca4 <__retarget_lock_release_recursive>:
 8002ca4:	4770      	bx	lr

08002ca6 <memcpy>:
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	b510      	push	{r4, lr}
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d100      	bne.n	8002cb0 <memcpy+0xa>
 8002cae:	bd10      	pop	{r4, pc}
 8002cb0:	5ccc      	ldrb	r4, [r1, r3]
 8002cb2:	54c4      	strb	r4, [r0, r3]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e7f8      	b.n	8002caa <memcpy+0x4>

08002cb8 <__assert_func>:
 8002cb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002cba:	0014      	movs	r4, r2
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <__assert_func+0x2c>)
 8002cc0:	0005      	movs	r5, r0
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	000e      	movs	r6, r1
 8002cc6:	68d8      	ldr	r0, [r3, #12]
 8002cc8:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <__assert_func+0x30>)
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d101      	bne.n	8002cd2 <__assert_func+0x1a>
 8002cce:	4b07      	ldr	r3, [pc, #28]	@ (8002cec <__assert_func+0x34>)
 8002cd0:	001c      	movs	r4, r3
 8002cd2:	4907      	ldr	r1, [pc, #28]	@ (8002cf0 <__assert_func+0x38>)
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	9402      	str	r4, [sp, #8]
 8002cd8:	002b      	movs	r3, r5
 8002cda:	9600      	str	r6, [sp, #0]
 8002cdc:	f000 fbc8 	bl	8003470 <fiprintf>
 8002ce0:	f000 fcef 	bl	80036c2 <abort>
 8002ce4:	20000010 	.word	0x20000010
 8002ce8:	080043aa 	.word	0x080043aa
 8002cec:	080043e5 	.word	0x080043e5
 8002cf0:	080043b7 	.word	0x080043b7

08002cf4 <_free_r>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	0005      	movs	r5, r0
 8002cf8:	1e0c      	subs	r4, r1, #0
 8002cfa:	d010      	beq.n	8002d1e <_free_r+0x2a>
 8002cfc:	3c04      	subs	r4, #4
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	da00      	bge.n	8002d06 <_free_r+0x12>
 8002d04:	18e4      	adds	r4, r4, r3
 8002d06:	0028      	movs	r0, r5
 8002d08:	f7ff fb1c 	bl	8002344 <__malloc_lock>
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d84 <_free_r+0x90>)
 8002d0e:	6813      	ldr	r3, [r2, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <_free_r+0x2c>
 8002d14:	6063      	str	r3, [r4, #4]
 8002d16:	6014      	str	r4, [r2, #0]
 8002d18:	0028      	movs	r0, r5
 8002d1a:	f7ff fb1b 	bl	8002354 <__malloc_unlock>
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
 8002d20:	42a3      	cmp	r3, r4
 8002d22:	d908      	bls.n	8002d36 <_free_r+0x42>
 8002d24:	6820      	ldr	r0, [r4, #0]
 8002d26:	1821      	adds	r1, r4, r0
 8002d28:	428b      	cmp	r3, r1
 8002d2a:	d1f3      	bne.n	8002d14 <_free_r+0x20>
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	1809      	adds	r1, r1, r0
 8002d32:	6021      	str	r1, [r4, #0]
 8002d34:	e7ee      	b.n	8002d14 <_free_r+0x20>
 8002d36:	001a      	movs	r2, r3
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <_free_r+0x4e>
 8002d3e:	42a3      	cmp	r3, r4
 8002d40:	d9f9      	bls.n	8002d36 <_free_r+0x42>
 8002d42:	6811      	ldr	r1, [r2, #0]
 8002d44:	1850      	adds	r0, r2, r1
 8002d46:	42a0      	cmp	r0, r4
 8002d48:	d10b      	bne.n	8002d62 <_free_r+0x6e>
 8002d4a:	6820      	ldr	r0, [r4, #0]
 8002d4c:	1809      	adds	r1, r1, r0
 8002d4e:	1850      	adds	r0, r2, r1
 8002d50:	6011      	str	r1, [r2, #0]
 8002d52:	4283      	cmp	r3, r0
 8002d54:	d1e0      	bne.n	8002d18 <_free_r+0x24>
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	1841      	adds	r1, r0, r1
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	6053      	str	r3, [r2, #4]
 8002d60:	e7da      	b.n	8002d18 <_free_r+0x24>
 8002d62:	42a0      	cmp	r0, r4
 8002d64:	d902      	bls.n	8002d6c <_free_r+0x78>
 8002d66:	230c      	movs	r3, #12
 8002d68:	602b      	str	r3, [r5, #0]
 8002d6a:	e7d5      	b.n	8002d18 <_free_r+0x24>
 8002d6c:	6820      	ldr	r0, [r4, #0]
 8002d6e:	1821      	adds	r1, r4, r0
 8002d70:	428b      	cmp	r3, r1
 8002d72:	d103      	bne.n	8002d7c <_free_r+0x88>
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	1809      	adds	r1, r1, r0
 8002d7a:	6021      	str	r1, [r4, #0]
 8002d7c:	6063      	str	r3, [r4, #4]
 8002d7e:	6054      	str	r4, [r2, #4]
 8002d80:	e7ca      	b.n	8002d18 <_free_r+0x24>
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	2000019c 	.word	0x2000019c

08002d88 <__sfputc_r>:
 8002d88:	6893      	ldr	r3, [r2, #8]
 8002d8a:	b510      	push	{r4, lr}
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	6093      	str	r3, [r2, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	da04      	bge.n	8002d9e <__sfputc_r+0x16>
 8002d94:	6994      	ldr	r4, [r2, #24]
 8002d96:	42a3      	cmp	r3, r4
 8002d98:	db07      	blt.n	8002daa <__sfputc_r+0x22>
 8002d9a:	290a      	cmp	r1, #10
 8002d9c:	d005      	beq.n	8002daa <__sfputc_r+0x22>
 8002d9e:	6813      	ldr	r3, [r2, #0]
 8002da0:	1c58      	adds	r0, r3, #1
 8002da2:	6010      	str	r0, [r2, #0]
 8002da4:	7019      	strb	r1, [r3, #0]
 8002da6:	0008      	movs	r0, r1
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	f7ff fdbb 	bl	8002924 <__swbuf_r>
 8002dae:	0001      	movs	r1, r0
 8002db0:	e7f9      	b.n	8002da6 <__sfputc_r+0x1e>

08002db2 <__sfputs_r>:
 8002db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db4:	0006      	movs	r6, r0
 8002db6:	000f      	movs	r7, r1
 8002db8:	0014      	movs	r4, r2
 8002dba:	18d5      	adds	r5, r2, r3
 8002dbc:	42ac      	cmp	r4, r5
 8002dbe:	d101      	bne.n	8002dc4 <__sfputs_r+0x12>
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	e007      	b.n	8002dd4 <__sfputs_r+0x22>
 8002dc4:	7821      	ldrb	r1, [r4, #0]
 8002dc6:	003a      	movs	r2, r7
 8002dc8:	0030      	movs	r0, r6
 8002dca:	f7ff ffdd 	bl	8002d88 <__sfputc_r>
 8002dce:	3401      	adds	r4, #1
 8002dd0:	1c43      	adds	r3, r0, #1
 8002dd2:	d1f3      	bne.n	8002dbc <__sfputs_r+0xa>
 8002dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002dd8 <_vfiprintf_r>:
 8002dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dda:	b0a1      	sub	sp, #132	@ 0x84
 8002ddc:	000f      	movs	r7, r1
 8002dde:	0015      	movs	r5, r2
 8002de0:	001e      	movs	r6, r3
 8002de2:	9003      	str	r0, [sp, #12]
 8002de4:	2800      	cmp	r0, #0
 8002de6:	d004      	beq.n	8002df2 <_vfiprintf_r+0x1a>
 8002de8:	6a03      	ldr	r3, [r0, #32]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <_vfiprintf_r+0x1a>
 8002dee:	f7ff fbdf 	bl	80025b0 <__sinit>
 8002df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002df4:	07db      	lsls	r3, r3, #31
 8002df6:	d405      	bmi.n	8002e04 <_vfiprintf_r+0x2c>
 8002df8:	89bb      	ldrh	r3, [r7, #12]
 8002dfa:	059b      	lsls	r3, r3, #22
 8002dfc:	d402      	bmi.n	8002e04 <_vfiprintf_r+0x2c>
 8002dfe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e00:	f7ff ff4f 	bl	8002ca2 <__retarget_lock_acquire_recursive>
 8002e04:	89bb      	ldrh	r3, [r7, #12]
 8002e06:	071b      	lsls	r3, r3, #28
 8002e08:	d502      	bpl.n	8002e10 <_vfiprintf_r+0x38>
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d113      	bne.n	8002e38 <_vfiprintf_r+0x60>
 8002e10:	0039      	movs	r1, r7
 8002e12:	9803      	ldr	r0, [sp, #12]
 8002e14:	f7ff fdc8 	bl	80029a8 <__swsetup_r>
 8002e18:	2800      	cmp	r0, #0
 8002e1a:	d00d      	beq.n	8002e38 <_vfiprintf_r+0x60>
 8002e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e1e:	07db      	lsls	r3, r3, #31
 8002e20:	d503      	bpl.n	8002e2a <_vfiprintf_r+0x52>
 8002e22:	2001      	movs	r0, #1
 8002e24:	4240      	negs	r0, r0
 8002e26:	b021      	add	sp, #132	@ 0x84
 8002e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e2a:	89bb      	ldrh	r3, [r7, #12]
 8002e2c:	059b      	lsls	r3, r3, #22
 8002e2e:	d4f8      	bmi.n	8002e22 <_vfiprintf_r+0x4a>
 8002e30:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e32:	f7ff ff37 	bl	8002ca4 <__retarget_lock_release_recursive>
 8002e36:	e7f4      	b.n	8002e22 <_vfiprintf_r+0x4a>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	ac08      	add	r4, sp, #32
 8002e3c:	6163      	str	r3, [r4, #20]
 8002e3e:	3320      	adds	r3, #32
 8002e40:	7663      	strb	r3, [r4, #25]
 8002e42:	3310      	adds	r3, #16
 8002e44:	76a3      	strb	r3, [r4, #26]
 8002e46:	9607      	str	r6, [sp, #28]
 8002e48:	002e      	movs	r6, r5
 8002e4a:	7833      	ldrb	r3, [r6, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <_vfiprintf_r+0x7c>
 8002e50:	2b25      	cmp	r3, #37	@ 0x25
 8002e52:	d148      	bne.n	8002ee6 <_vfiprintf_r+0x10e>
 8002e54:	1b73      	subs	r3, r6, r5
 8002e56:	9305      	str	r3, [sp, #20]
 8002e58:	42ae      	cmp	r6, r5
 8002e5a:	d00b      	beq.n	8002e74 <_vfiprintf_r+0x9c>
 8002e5c:	002a      	movs	r2, r5
 8002e5e:	0039      	movs	r1, r7
 8002e60:	9803      	ldr	r0, [sp, #12]
 8002e62:	f7ff ffa6 	bl	8002db2 <__sfputs_r>
 8002e66:	3001      	adds	r0, #1
 8002e68:	d100      	bne.n	8002e6c <_vfiprintf_r+0x94>
 8002e6a:	e0ae      	b.n	8002fca <_vfiprintf_r+0x1f2>
 8002e6c:	6963      	ldr	r3, [r4, #20]
 8002e6e:	9a05      	ldr	r2, [sp, #20]
 8002e70:	189b      	adds	r3, r3, r2
 8002e72:	6163      	str	r3, [r4, #20]
 8002e74:	7833      	ldrb	r3, [r6, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d100      	bne.n	8002e7c <_vfiprintf_r+0xa4>
 8002e7a:	e0a6      	b.n	8002fca <_vfiprintf_r+0x1f2>
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2300      	movs	r3, #0
 8002e80:	4252      	negs	r2, r2
 8002e82:	6062      	str	r2, [r4, #4]
 8002e84:	a904      	add	r1, sp, #16
 8002e86:	3254      	adds	r2, #84	@ 0x54
 8002e88:	1852      	adds	r2, r2, r1
 8002e8a:	1c75      	adds	r5, r6, #1
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	60e3      	str	r3, [r4, #12]
 8002e90:	60a3      	str	r3, [r4, #8]
 8002e92:	7013      	strb	r3, [r2, #0]
 8002e94:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002e96:	4b59      	ldr	r3, [pc, #356]	@ (8002ffc <_vfiprintf_r+0x224>)
 8002e98:	2205      	movs	r2, #5
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	7829      	ldrb	r1, [r5, #0]
 8002e9e:	9305      	str	r3, [sp, #20]
 8002ea0:	f000 fc04 	bl	80036ac <memchr>
 8002ea4:	1c6e      	adds	r6, r5, #1
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d11f      	bne.n	8002eea <_vfiprintf_r+0x112>
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	06d3      	lsls	r3, r2, #27
 8002eae:	d504      	bpl.n	8002eba <_vfiprintf_r+0xe2>
 8002eb0:	2353      	movs	r3, #83	@ 0x53
 8002eb2:	a904      	add	r1, sp, #16
 8002eb4:	185b      	adds	r3, r3, r1
 8002eb6:	2120      	movs	r1, #32
 8002eb8:	7019      	strb	r1, [r3, #0]
 8002eba:	0713      	lsls	r3, r2, #28
 8002ebc:	d504      	bpl.n	8002ec8 <_vfiprintf_r+0xf0>
 8002ebe:	2353      	movs	r3, #83	@ 0x53
 8002ec0:	a904      	add	r1, sp, #16
 8002ec2:	185b      	adds	r3, r3, r1
 8002ec4:	212b      	movs	r1, #43	@ 0x2b
 8002ec6:	7019      	strb	r1, [r3, #0]
 8002ec8:	782b      	ldrb	r3, [r5, #0]
 8002eca:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ecc:	d016      	beq.n	8002efc <_vfiprintf_r+0x124>
 8002ece:	002e      	movs	r6, r5
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	200a      	movs	r0, #10
 8002ed4:	68e3      	ldr	r3, [r4, #12]
 8002ed6:	7832      	ldrb	r2, [r6, #0]
 8002ed8:	1c75      	adds	r5, r6, #1
 8002eda:	3a30      	subs	r2, #48	@ 0x30
 8002edc:	2a09      	cmp	r2, #9
 8002ede:	d950      	bls.n	8002f82 <_vfiprintf_r+0x1aa>
 8002ee0:	2900      	cmp	r1, #0
 8002ee2:	d111      	bne.n	8002f08 <_vfiprintf_r+0x130>
 8002ee4:	e017      	b.n	8002f16 <_vfiprintf_r+0x13e>
 8002ee6:	3601      	adds	r6, #1
 8002ee8:	e7af      	b.n	8002e4a <_vfiprintf_r+0x72>
 8002eea:	9b05      	ldr	r3, [sp, #20]
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	1ac0      	subs	r0, r0, r3
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4083      	lsls	r3, r0
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	0035      	movs	r5, r6
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	e7cc      	b.n	8002e96 <_vfiprintf_r+0xbe>
 8002efc:	9b07      	ldr	r3, [sp, #28]
 8002efe:	1d19      	adds	r1, r3, #4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	9107      	str	r1, [sp, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	db01      	blt.n	8002f0c <_vfiprintf_r+0x134>
 8002f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f0a:	e004      	b.n	8002f16 <_vfiprintf_r+0x13e>
 8002f0c:	425b      	negs	r3, r3
 8002f0e:	60e3      	str	r3, [r4, #12]
 8002f10:	2302      	movs	r3, #2
 8002f12:	4313      	orrs	r3, r2
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	7833      	ldrb	r3, [r6, #0]
 8002f18:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f1a:	d10c      	bne.n	8002f36 <_vfiprintf_r+0x15e>
 8002f1c:	7873      	ldrb	r3, [r6, #1]
 8002f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f20:	d134      	bne.n	8002f8c <_vfiprintf_r+0x1b4>
 8002f22:	9b07      	ldr	r3, [sp, #28]
 8002f24:	3602      	adds	r6, #2
 8002f26:	1d1a      	adds	r2, r3, #4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	9207      	str	r2, [sp, #28]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	da01      	bge.n	8002f34 <_vfiprintf_r+0x15c>
 8002f30:	2301      	movs	r3, #1
 8002f32:	425b      	negs	r3, r3
 8002f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f36:	4d32      	ldr	r5, [pc, #200]	@ (8003000 <_vfiprintf_r+0x228>)
 8002f38:	2203      	movs	r2, #3
 8002f3a:	0028      	movs	r0, r5
 8002f3c:	7831      	ldrb	r1, [r6, #0]
 8002f3e:	f000 fbb5 	bl	80036ac <memchr>
 8002f42:	2800      	cmp	r0, #0
 8002f44:	d006      	beq.n	8002f54 <_vfiprintf_r+0x17c>
 8002f46:	2340      	movs	r3, #64	@ 0x40
 8002f48:	1b40      	subs	r0, r0, r5
 8002f4a:	4083      	lsls	r3, r0
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	3601      	adds	r6, #1
 8002f50:	4313      	orrs	r3, r2
 8002f52:	6023      	str	r3, [r4, #0]
 8002f54:	7831      	ldrb	r1, [r6, #0]
 8002f56:	2206      	movs	r2, #6
 8002f58:	482a      	ldr	r0, [pc, #168]	@ (8003004 <_vfiprintf_r+0x22c>)
 8002f5a:	1c75      	adds	r5, r6, #1
 8002f5c:	7621      	strb	r1, [r4, #24]
 8002f5e:	f000 fba5 	bl	80036ac <memchr>
 8002f62:	2800      	cmp	r0, #0
 8002f64:	d040      	beq.n	8002fe8 <_vfiprintf_r+0x210>
 8002f66:	4b28      	ldr	r3, [pc, #160]	@ (8003008 <_vfiprintf_r+0x230>)
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d122      	bne.n	8002fb2 <_vfiprintf_r+0x1da>
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	9b07      	ldr	r3, [sp, #28]
 8002f70:	3307      	adds	r3, #7
 8002f72:	4393      	bics	r3, r2
 8002f74:	3308      	adds	r3, #8
 8002f76:	9307      	str	r3, [sp, #28]
 8002f78:	6963      	ldr	r3, [r4, #20]
 8002f7a:	9a04      	ldr	r2, [sp, #16]
 8002f7c:	189b      	adds	r3, r3, r2
 8002f7e:	6163      	str	r3, [r4, #20]
 8002f80:	e762      	b.n	8002e48 <_vfiprintf_r+0x70>
 8002f82:	4343      	muls	r3, r0
 8002f84:	002e      	movs	r6, r5
 8002f86:	2101      	movs	r1, #1
 8002f88:	189b      	adds	r3, r3, r2
 8002f8a:	e7a4      	b.n	8002ed6 <_vfiprintf_r+0xfe>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	200a      	movs	r0, #10
 8002f90:	0019      	movs	r1, r3
 8002f92:	3601      	adds	r6, #1
 8002f94:	6063      	str	r3, [r4, #4]
 8002f96:	7832      	ldrb	r2, [r6, #0]
 8002f98:	1c75      	adds	r5, r6, #1
 8002f9a:	3a30      	subs	r2, #48	@ 0x30
 8002f9c:	2a09      	cmp	r2, #9
 8002f9e:	d903      	bls.n	8002fa8 <_vfiprintf_r+0x1d0>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0c8      	beq.n	8002f36 <_vfiprintf_r+0x15e>
 8002fa4:	9109      	str	r1, [sp, #36]	@ 0x24
 8002fa6:	e7c6      	b.n	8002f36 <_vfiprintf_r+0x15e>
 8002fa8:	4341      	muls	r1, r0
 8002faa:	002e      	movs	r6, r5
 8002fac:	2301      	movs	r3, #1
 8002fae:	1889      	adds	r1, r1, r2
 8002fb0:	e7f1      	b.n	8002f96 <_vfiprintf_r+0x1be>
 8002fb2:	aa07      	add	r2, sp, #28
 8002fb4:	9200      	str	r2, [sp, #0]
 8002fb6:	0021      	movs	r1, r4
 8002fb8:	003a      	movs	r2, r7
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <_vfiprintf_r+0x234>)
 8002fbc:	9803      	ldr	r0, [sp, #12]
 8002fbe:	e000      	b.n	8002fc2 <_vfiprintf_r+0x1ea>
 8002fc0:	bf00      	nop
 8002fc2:	9004      	str	r0, [sp, #16]
 8002fc4:	9b04      	ldr	r3, [sp, #16]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	d1d6      	bne.n	8002f78 <_vfiprintf_r+0x1a0>
 8002fca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fcc:	07db      	lsls	r3, r3, #31
 8002fce:	d405      	bmi.n	8002fdc <_vfiprintf_r+0x204>
 8002fd0:	89bb      	ldrh	r3, [r7, #12]
 8002fd2:	059b      	lsls	r3, r3, #22
 8002fd4:	d402      	bmi.n	8002fdc <_vfiprintf_r+0x204>
 8002fd6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002fd8:	f7ff fe64 	bl	8002ca4 <__retarget_lock_release_recursive>
 8002fdc:	89bb      	ldrh	r3, [r7, #12]
 8002fde:	065b      	lsls	r3, r3, #25
 8002fe0:	d500      	bpl.n	8002fe4 <_vfiprintf_r+0x20c>
 8002fe2:	e71e      	b.n	8002e22 <_vfiprintf_r+0x4a>
 8002fe4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002fe6:	e71e      	b.n	8002e26 <_vfiprintf_r+0x4e>
 8002fe8:	aa07      	add	r2, sp, #28
 8002fea:	9200      	str	r2, [sp, #0]
 8002fec:	0021      	movs	r1, r4
 8002fee:	003a      	movs	r2, r7
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <_vfiprintf_r+0x234>)
 8002ff2:	9803      	ldr	r0, [sp, #12]
 8002ff4:	f000 f87c 	bl	80030f0 <_printf_i>
 8002ff8:	e7e3      	b.n	8002fc2 <_vfiprintf_r+0x1ea>
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	080043e6 	.word	0x080043e6
 8003000:	080043ec 	.word	0x080043ec
 8003004:	080043f0 	.word	0x080043f0
 8003008:	00000000 	.word	0x00000000
 800300c:	08002db3 	.word	0x08002db3

08003010 <_printf_common>:
 8003010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003012:	0016      	movs	r6, r2
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	688a      	ldr	r2, [r1, #8]
 8003018:	690b      	ldr	r3, [r1, #16]
 800301a:	000c      	movs	r4, r1
 800301c:	9000      	str	r0, [sp, #0]
 800301e:	4293      	cmp	r3, r2
 8003020:	da00      	bge.n	8003024 <_printf_common+0x14>
 8003022:	0013      	movs	r3, r2
 8003024:	0022      	movs	r2, r4
 8003026:	6033      	str	r3, [r6, #0]
 8003028:	3243      	adds	r2, #67	@ 0x43
 800302a:	7812      	ldrb	r2, [r2, #0]
 800302c:	2a00      	cmp	r2, #0
 800302e:	d001      	beq.n	8003034 <_printf_common+0x24>
 8003030:	3301      	adds	r3, #1
 8003032:	6033      	str	r3, [r6, #0]
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	069b      	lsls	r3, r3, #26
 8003038:	d502      	bpl.n	8003040 <_printf_common+0x30>
 800303a:	6833      	ldr	r3, [r6, #0]
 800303c:	3302      	adds	r3, #2
 800303e:	6033      	str	r3, [r6, #0]
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	2306      	movs	r3, #6
 8003044:	0015      	movs	r5, r2
 8003046:	401d      	ands	r5, r3
 8003048:	421a      	tst	r2, r3
 800304a:	d027      	beq.n	800309c <_printf_common+0x8c>
 800304c:	0023      	movs	r3, r4
 800304e:	3343      	adds	r3, #67	@ 0x43
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	1e5a      	subs	r2, r3, #1
 8003054:	4193      	sbcs	r3, r2
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	0692      	lsls	r2, r2, #26
 800305a:	d430      	bmi.n	80030be <_printf_common+0xae>
 800305c:	0022      	movs	r2, r4
 800305e:	9901      	ldr	r1, [sp, #4]
 8003060:	9800      	ldr	r0, [sp, #0]
 8003062:	9d08      	ldr	r5, [sp, #32]
 8003064:	3243      	adds	r2, #67	@ 0x43
 8003066:	47a8      	blx	r5
 8003068:	3001      	adds	r0, #1
 800306a:	d025      	beq.n	80030b8 <_printf_common+0xa8>
 800306c:	2206      	movs	r2, #6
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	2500      	movs	r5, #0
 8003072:	4013      	ands	r3, r2
 8003074:	2b04      	cmp	r3, #4
 8003076:	d105      	bne.n	8003084 <_printf_common+0x74>
 8003078:	6833      	ldr	r3, [r6, #0]
 800307a:	68e5      	ldr	r5, [r4, #12]
 800307c:	1aed      	subs	r5, r5, r3
 800307e:	43eb      	mvns	r3, r5
 8003080:	17db      	asrs	r3, r3, #31
 8003082:	401d      	ands	r5, r3
 8003084:	68a3      	ldr	r3, [r4, #8]
 8003086:	6922      	ldr	r2, [r4, #16]
 8003088:	4293      	cmp	r3, r2
 800308a:	dd01      	ble.n	8003090 <_printf_common+0x80>
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	18ed      	adds	r5, r5, r3
 8003090:	2600      	movs	r6, #0
 8003092:	42b5      	cmp	r5, r6
 8003094:	d120      	bne.n	80030d8 <_printf_common+0xc8>
 8003096:	2000      	movs	r0, #0
 8003098:	e010      	b.n	80030bc <_printf_common+0xac>
 800309a:	3501      	adds	r5, #1
 800309c:	68e3      	ldr	r3, [r4, #12]
 800309e:	6832      	ldr	r2, [r6, #0]
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	42ab      	cmp	r3, r5
 80030a4:	ddd2      	ble.n	800304c <_printf_common+0x3c>
 80030a6:	0022      	movs	r2, r4
 80030a8:	2301      	movs	r3, #1
 80030aa:	9901      	ldr	r1, [sp, #4]
 80030ac:	9800      	ldr	r0, [sp, #0]
 80030ae:	9f08      	ldr	r7, [sp, #32]
 80030b0:	3219      	adds	r2, #25
 80030b2:	47b8      	blx	r7
 80030b4:	3001      	adds	r0, #1
 80030b6:	d1f0      	bne.n	800309a <_printf_common+0x8a>
 80030b8:	2001      	movs	r0, #1
 80030ba:	4240      	negs	r0, r0
 80030bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030be:	2030      	movs	r0, #48	@ 0x30
 80030c0:	18e1      	adds	r1, r4, r3
 80030c2:	3143      	adds	r1, #67	@ 0x43
 80030c4:	7008      	strb	r0, [r1, #0]
 80030c6:	0021      	movs	r1, r4
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	3145      	adds	r1, #69	@ 0x45
 80030cc:	7809      	ldrb	r1, [r1, #0]
 80030ce:	18a2      	adds	r2, r4, r2
 80030d0:	3243      	adds	r2, #67	@ 0x43
 80030d2:	3302      	adds	r3, #2
 80030d4:	7011      	strb	r1, [r2, #0]
 80030d6:	e7c1      	b.n	800305c <_printf_common+0x4c>
 80030d8:	0022      	movs	r2, r4
 80030da:	2301      	movs	r3, #1
 80030dc:	9901      	ldr	r1, [sp, #4]
 80030de:	9800      	ldr	r0, [sp, #0]
 80030e0:	9f08      	ldr	r7, [sp, #32]
 80030e2:	321a      	adds	r2, #26
 80030e4:	47b8      	blx	r7
 80030e6:	3001      	adds	r0, #1
 80030e8:	d0e6      	beq.n	80030b8 <_printf_common+0xa8>
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7d1      	b.n	8003092 <_printf_common+0x82>
	...

080030f0 <_printf_i>:
 80030f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f2:	b08b      	sub	sp, #44	@ 0x2c
 80030f4:	9206      	str	r2, [sp, #24]
 80030f6:	000a      	movs	r2, r1
 80030f8:	3243      	adds	r2, #67	@ 0x43
 80030fa:	9307      	str	r3, [sp, #28]
 80030fc:	9005      	str	r0, [sp, #20]
 80030fe:	9203      	str	r2, [sp, #12]
 8003100:	7e0a      	ldrb	r2, [r1, #24]
 8003102:	000c      	movs	r4, r1
 8003104:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003106:	2a78      	cmp	r2, #120	@ 0x78
 8003108:	d809      	bhi.n	800311e <_printf_i+0x2e>
 800310a:	2a62      	cmp	r2, #98	@ 0x62
 800310c:	d80b      	bhi.n	8003126 <_printf_i+0x36>
 800310e:	2a00      	cmp	r2, #0
 8003110:	d100      	bne.n	8003114 <_printf_i+0x24>
 8003112:	e0bc      	b.n	800328e <_printf_i+0x19e>
 8003114:	497b      	ldr	r1, [pc, #492]	@ (8003304 <_printf_i+0x214>)
 8003116:	9104      	str	r1, [sp, #16]
 8003118:	2a58      	cmp	r2, #88	@ 0x58
 800311a:	d100      	bne.n	800311e <_printf_i+0x2e>
 800311c:	e090      	b.n	8003240 <_printf_i+0x150>
 800311e:	0025      	movs	r5, r4
 8003120:	3542      	adds	r5, #66	@ 0x42
 8003122:	702a      	strb	r2, [r5, #0]
 8003124:	e022      	b.n	800316c <_printf_i+0x7c>
 8003126:	0010      	movs	r0, r2
 8003128:	3863      	subs	r0, #99	@ 0x63
 800312a:	2815      	cmp	r0, #21
 800312c:	d8f7      	bhi.n	800311e <_printf_i+0x2e>
 800312e:	f7fc fff3 	bl	8000118 <__gnu_thumb1_case_shi>
 8003132:	0016      	.short	0x0016
 8003134:	fff6001f 	.word	0xfff6001f
 8003138:	fff6fff6 	.word	0xfff6fff6
 800313c:	001ffff6 	.word	0x001ffff6
 8003140:	fff6fff6 	.word	0xfff6fff6
 8003144:	fff6fff6 	.word	0xfff6fff6
 8003148:	003600a1 	.word	0x003600a1
 800314c:	fff60080 	.word	0xfff60080
 8003150:	00b2fff6 	.word	0x00b2fff6
 8003154:	0036fff6 	.word	0x0036fff6
 8003158:	fff6fff6 	.word	0xfff6fff6
 800315c:	0084      	.short	0x0084
 800315e:	0025      	movs	r5, r4
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	3542      	adds	r5, #66	@ 0x42
 8003164:	1d11      	adds	r1, r2, #4
 8003166:	6019      	str	r1, [r3, #0]
 8003168:	6813      	ldr	r3, [r2, #0]
 800316a:	702b      	strb	r3, [r5, #0]
 800316c:	2301      	movs	r3, #1
 800316e:	e0a0      	b.n	80032b2 <_printf_i+0x1c2>
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	6809      	ldr	r1, [r1, #0]
 8003174:	1d02      	adds	r2, r0, #4
 8003176:	060d      	lsls	r5, r1, #24
 8003178:	d50b      	bpl.n	8003192 <_printf_i+0xa2>
 800317a:	6806      	ldr	r6, [r0, #0]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	2e00      	cmp	r6, #0
 8003180:	da03      	bge.n	800318a <_printf_i+0x9a>
 8003182:	232d      	movs	r3, #45	@ 0x2d
 8003184:	9a03      	ldr	r2, [sp, #12]
 8003186:	4276      	negs	r6, r6
 8003188:	7013      	strb	r3, [r2, #0]
 800318a:	4b5e      	ldr	r3, [pc, #376]	@ (8003304 <_printf_i+0x214>)
 800318c:	270a      	movs	r7, #10
 800318e:	9304      	str	r3, [sp, #16]
 8003190:	e018      	b.n	80031c4 <_printf_i+0xd4>
 8003192:	6806      	ldr	r6, [r0, #0]
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	0649      	lsls	r1, r1, #25
 8003198:	d5f1      	bpl.n	800317e <_printf_i+0x8e>
 800319a:	b236      	sxth	r6, r6
 800319c:	e7ef      	b.n	800317e <_printf_i+0x8e>
 800319e:	6808      	ldr	r0, [r1, #0]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	c940      	ldmia	r1!, {r6}
 80031a4:	0605      	lsls	r5, r0, #24
 80031a6:	d402      	bmi.n	80031ae <_printf_i+0xbe>
 80031a8:	0640      	lsls	r0, r0, #25
 80031aa:	d500      	bpl.n	80031ae <_printf_i+0xbe>
 80031ac:	b2b6      	uxth	r6, r6
 80031ae:	6019      	str	r1, [r3, #0]
 80031b0:	4b54      	ldr	r3, [pc, #336]	@ (8003304 <_printf_i+0x214>)
 80031b2:	270a      	movs	r7, #10
 80031b4:	9304      	str	r3, [sp, #16]
 80031b6:	2a6f      	cmp	r2, #111	@ 0x6f
 80031b8:	d100      	bne.n	80031bc <_printf_i+0xcc>
 80031ba:	3f02      	subs	r7, #2
 80031bc:	0023      	movs	r3, r4
 80031be:	2200      	movs	r2, #0
 80031c0:	3343      	adds	r3, #67	@ 0x43
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	6863      	ldr	r3, [r4, #4]
 80031c6:	60a3      	str	r3, [r4, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db03      	blt.n	80031d4 <_printf_i+0xe4>
 80031cc:	2104      	movs	r1, #4
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	438a      	bics	r2, r1
 80031d2:	6022      	str	r2, [r4, #0]
 80031d4:	2e00      	cmp	r6, #0
 80031d6:	d102      	bne.n	80031de <_printf_i+0xee>
 80031d8:	9d03      	ldr	r5, [sp, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <_printf_i+0x108>
 80031de:	9d03      	ldr	r5, [sp, #12]
 80031e0:	0030      	movs	r0, r6
 80031e2:	0039      	movs	r1, r7
 80031e4:	f7fd f828 	bl	8000238 <__aeabi_uidivmod>
 80031e8:	9b04      	ldr	r3, [sp, #16]
 80031ea:	3d01      	subs	r5, #1
 80031ec:	5c5b      	ldrb	r3, [r3, r1]
 80031ee:	702b      	strb	r3, [r5, #0]
 80031f0:	0033      	movs	r3, r6
 80031f2:	0006      	movs	r6, r0
 80031f4:	429f      	cmp	r7, r3
 80031f6:	d9f3      	bls.n	80031e0 <_printf_i+0xf0>
 80031f8:	2f08      	cmp	r7, #8
 80031fa:	d109      	bne.n	8003210 <_printf_i+0x120>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	07db      	lsls	r3, r3, #31
 8003200:	d506      	bpl.n	8003210 <_printf_i+0x120>
 8003202:	6862      	ldr	r2, [r4, #4]
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	dc02      	bgt.n	8003210 <_printf_i+0x120>
 800320a:	2330      	movs	r3, #48	@ 0x30
 800320c:	3d01      	subs	r5, #1
 800320e:	702b      	strb	r3, [r5, #0]
 8003210:	9b03      	ldr	r3, [sp, #12]
 8003212:	1b5b      	subs	r3, r3, r5
 8003214:	6123      	str	r3, [r4, #16]
 8003216:	9b07      	ldr	r3, [sp, #28]
 8003218:	0021      	movs	r1, r4
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	9805      	ldr	r0, [sp, #20]
 800321e:	9b06      	ldr	r3, [sp, #24]
 8003220:	aa09      	add	r2, sp, #36	@ 0x24
 8003222:	f7ff fef5 	bl	8003010 <_printf_common>
 8003226:	3001      	adds	r0, #1
 8003228:	d148      	bne.n	80032bc <_printf_i+0x1cc>
 800322a:	2001      	movs	r0, #1
 800322c:	4240      	negs	r0, r0
 800322e:	b00b      	add	sp, #44	@ 0x2c
 8003230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003232:	2220      	movs	r2, #32
 8003234:	6809      	ldr	r1, [r1, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	6022      	str	r2, [r4, #0]
 800323a:	2278      	movs	r2, #120	@ 0x78
 800323c:	4932      	ldr	r1, [pc, #200]	@ (8003308 <_printf_i+0x218>)
 800323e:	9104      	str	r1, [sp, #16]
 8003240:	0021      	movs	r1, r4
 8003242:	3145      	adds	r1, #69	@ 0x45
 8003244:	700a      	strb	r2, [r1, #0]
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	6822      	ldr	r2, [r4, #0]
 800324a:	c940      	ldmia	r1!, {r6}
 800324c:	0610      	lsls	r0, r2, #24
 800324e:	d402      	bmi.n	8003256 <_printf_i+0x166>
 8003250:	0650      	lsls	r0, r2, #25
 8003252:	d500      	bpl.n	8003256 <_printf_i+0x166>
 8003254:	b2b6      	uxth	r6, r6
 8003256:	6019      	str	r1, [r3, #0]
 8003258:	07d3      	lsls	r3, r2, #31
 800325a:	d502      	bpl.n	8003262 <_printf_i+0x172>
 800325c:	2320      	movs	r3, #32
 800325e:	4313      	orrs	r3, r2
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	2e00      	cmp	r6, #0
 8003264:	d001      	beq.n	800326a <_printf_i+0x17a>
 8003266:	2710      	movs	r7, #16
 8003268:	e7a8      	b.n	80031bc <_printf_i+0xcc>
 800326a:	2220      	movs	r2, #32
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	4393      	bics	r3, r2
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	e7f8      	b.n	8003266 <_printf_i+0x176>
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	680d      	ldr	r5, [r1, #0]
 8003278:	1d10      	adds	r0, r2, #4
 800327a:	6949      	ldr	r1, [r1, #20]
 800327c:	6018      	str	r0, [r3, #0]
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	062e      	lsls	r6, r5, #24
 8003282:	d501      	bpl.n	8003288 <_printf_i+0x198>
 8003284:	6019      	str	r1, [r3, #0]
 8003286:	e002      	b.n	800328e <_printf_i+0x19e>
 8003288:	066d      	lsls	r5, r5, #25
 800328a:	d5fb      	bpl.n	8003284 <_printf_i+0x194>
 800328c:	8019      	strh	r1, [r3, #0]
 800328e:	2300      	movs	r3, #0
 8003290:	9d03      	ldr	r5, [sp, #12]
 8003292:	6123      	str	r3, [r4, #16]
 8003294:	e7bf      	b.n	8003216 <_printf_i+0x126>
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	1d11      	adds	r1, r2, #4
 800329a:	6019      	str	r1, [r3, #0]
 800329c:	6815      	ldr	r5, [r2, #0]
 800329e:	2100      	movs	r1, #0
 80032a0:	0028      	movs	r0, r5
 80032a2:	6862      	ldr	r2, [r4, #4]
 80032a4:	f000 fa02 	bl	80036ac <memchr>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d001      	beq.n	80032b0 <_printf_i+0x1c0>
 80032ac:	1b40      	subs	r0, r0, r5
 80032ae:	6060      	str	r0, [r4, #4]
 80032b0:	6863      	ldr	r3, [r4, #4]
 80032b2:	6123      	str	r3, [r4, #16]
 80032b4:	2300      	movs	r3, #0
 80032b6:	9a03      	ldr	r2, [sp, #12]
 80032b8:	7013      	strb	r3, [r2, #0]
 80032ba:	e7ac      	b.n	8003216 <_printf_i+0x126>
 80032bc:	002a      	movs	r2, r5
 80032be:	6923      	ldr	r3, [r4, #16]
 80032c0:	9906      	ldr	r1, [sp, #24]
 80032c2:	9805      	ldr	r0, [sp, #20]
 80032c4:	9d07      	ldr	r5, [sp, #28]
 80032c6:	47a8      	blx	r5
 80032c8:	3001      	adds	r0, #1
 80032ca:	d0ae      	beq.n	800322a <_printf_i+0x13a>
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	079b      	lsls	r3, r3, #30
 80032d0:	d415      	bmi.n	80032fe <_printf_i+0x20e>
 80032d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032d4:	68e0      	ldr	r0, [r4, #12]
 80032d6:	4298      	cmp	r0, r3
 80032d8:	daa9      	bge.n	800322e <_printf_i+0x13e>
 80032da:	0018      	movs	r0, r3
 80032dc:	e7a7      	b.n	800322e <_printf_i+0x13e>
 80032de:	0022      	movs	r2, r4
 80032e0:	2301      	movs	r3, #1
 80032e2:	9906      	ldr	r1, [sp, #24]
 80032e4:	9805      	ldr	r0, [sp, #20]
 80032e6:	9e07      	ldr	r6, [sp, #28]
 80032e8:	3219      	adds	r2, #25
 80032ea:	47b0      	blx	r6
 80032ec:	3001      	adds	r0, #1
 80032ee:	d09c      	beq.n	800322a <_printf_i+0x13a>
 80032f0:	3501      	adds	r5, #1
 80032f2:	68e3      	ldr	r3, [r4, #12]
 80032f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	42ab      	cmp	r3, r5
 80032fa:	dcf0      	bgt.n	80032de <_printf_i+0x1ee>
 80032fc:	e7e9      	b.n	80032d2 <_printf_i+0x1e2>
 80032fe:	2500      	movs	r5, #0
 8003300:	e7f7      	b.n	80032f2 <_printf_i+0x202>
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	080043f7 	.word	0x080043f7
 8003308:	08004408 	.word	0x08004408

0800330c <__sflush_r>:
 800330c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800330e:	220c      	movs	r2, #12
 8003310:	5e8b      	ldrsh	r3, [r1, r2]
 8003312:	0005      	movs	r5, r0
 8003314:	000c      	movs	r4, r1
 8003316:	071a      	lsls	r2, r3, #28
 8003318:	d456      	bmi.n	80033c8 <__sflush_r+0xbc>
 800331a:	684a      	ldr	r2, [r1, #4]
 800331c:	2a00      	cmp	r2, #0
 800331e:	dc02      	bgt.n	8003326 <__sflush_r+0x1a>
 8003320:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003322:	2a00      	cmp	r2, #0
 8003324:	dd4e      	ble.n	80033c4 <__sflush_r+0xb8>
 8003326:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003328:	2f00      	cmp	r7, #0
 800332a:	d04b      	beq.n	80033c4 <__sflush_r+0xb8>
 800332c:	2200      	movs	r2, #0
 800332e:	2080      	movs	r0, #128	@ 0x80
 8003330:	682e      	ldr	r6, [r5, #0]
 8003332:	602a      	str	r2, [r5, #0]
 8003334:	001a      	movs	r2, r3
 8003336:	0140      	lsls	r0, r0, #5
 8003338:	6a21      	ldr	r1, [r4, #32]
 800333a:	4002      	ands	r2, r0
 800333c:	4203      	tst	r3, r0
 800333e:	d033      	beq.n	80033a8 <__sflush_r+0x9c>
 8003340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	075b      	lsls	r3, r3, #29
 8003346:	d506      	bpl.n	8003356 <__sflush_r+0x4a>
 8003348:	6863      	ldr	r3, [r4, #4]
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <__sflush_r+0x4a>
 8003352:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003354:	1ad2      	subs	r2, r2, r3
 8003356:	2300      	movs	r3, #0
 8003358:	0028      	movs	r0, r5
 800335a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800335c:	6a21      	ldr	r1, [r4, #32]
 800335e:	47b8      	blx	r7
 8003360:	89a2      	ldrh	r2, [r4, #12]
 8003362:	1c43      	adds	r3, r0, #1
 8003364:	d106      	bne.n	8003374 <__sflush_r+0x68>
 8003366:	6829      	ldr	r1, [r5, #0]
 8003368:	291d      	cmp	r1, #29
 800336a:	d846      	bhi.n	80033fa <__sflush_r+0xee>
 800336c:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <__sflush_r+0x108>)
 800336e:	410b      	asrs	r3, r1
 8003370:	07db      	lsls	r3, r3, #31
 8003372:	d442      	bmi.n	80033fa <__sflush_r+0xee>
 8003374:	2300      	movs	r3, #0
 8003376:	6063      	str	r3, [r4, #4]
 8003378:	6923      	ldr	r3, [r4, #16]
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	04d2      	lsls	r2, r2, #19
 800337e:	d505      	bpl.n	800338c <__sflush_r+0x80>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <__sflush_r+0x7e>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d100      	bne.n	800338c <__sflush_r+0x80>
 800338a:	6560      	str	r0, [r4, #84]	@ 0x54
 800338c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800338e:	602e      	str	r6, [r5, #0]
 8003390:	2900      	cmp	r1, #0
 8003392:	d017      	beq.n	80033c4 <__sflush_r+0xb8>
 8003394:	0023      	movs	r3, r4
 8003396:	3344      	adds	r3, #68	@ 0x44
 8003398:	4299      	cmp	r1, r3
 800339a:	d002      	beq.n	80033a2 <__sflush_r+0x96>
 800339c:	0028      	movs	r0, r5
 800339e:	f7ff fca9 	bl	8002cf4 <_free_r>
 80033a2:	2300      	movs	r3, #0
 80033a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80033a6:	e00d      	b.n	80033c4 <__sflush_r+0xb8>
 80033a8:	2301      	movs	r3, #1
 80033aa:	0028      	movs	r0, r5
 80033ac:	47b8      	blx	r7
 80033ae:	0002      	movs	r2, r0
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	d1c6      	bne.n	8003342 <__sflush_r+0x36>
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0c3      	beq.n	8003342 <__sflush_r+0x36>
 80033ba:	2b1d      	cmp	r3, #29
 80033bc:	d001      	beq.n	80033c2 <__sflush_r+0xb6>
 80033be:	2b16      	cmp	r3, #22
 80033c0:	d11a      	bne.n	80033f8 <__sflush_r+0xec>
 80033c2:	602e      	str	r6, [r5, #0]
 80033c4:	2000      	movs	r0, #0
 80033c6:	e01e      	b.n	8003406 <__sflush_r+0xfa>
 80033c8:	690e      	ldr	r6, [r1, #16]
 80033ca:	2e00      	cmp	r6, #0
 80033cc:	d0fa      	beq.n	80033c4 <__sflush_r+0xb8>
 80033ce:	680f      	ldr	r7, [r1, #0]
 80033d0:	600e      	str	r6, [r1, #0]
 80033d2:	1bba      	subs	r2, r7, r6
 80033d4:	9201      	str	r2, [sp, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	079b      	lsls	r3, r3, #30
 80033da:	d100      	bne.n	80033de <__sflush_r+0xd2>
 80033dc:	694a      	ldr	r2, [r1, #20]
 80033de:	60a2      	str	r2, [r4, #8]
 80033e0:	9b01      	ldr	r3, [sp, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	ddee      	ble.n	80033c4 <__sflush_r+0xb8>
 80033e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80033e8:	0032      	movs	r2, r6
 80033ea:	001f      	movs	r7, r3
 80033ec:	0028      	movs	r0, r5
 80033ee:	9b01      	ldr	r3, [sp, #4]
 80033f0:	6a21      	ldr	r1, [r4, #32]
 80033f2:	47b8      	blx	r7
 80033f4:	2800      	cmp	r0, #0
 80033f6:	dc07      	bgt.n	8003408 <__sflush_r+0xfc>
 80033f8:	89a2      	ldrh	r2, [r4, #12]
 80033fa:	2340      	movs	r3, #64	@ 0x40
 80033fc:	2001      	movs	r0, #1
 80033fe:	4313      	orrs	r3, r2
 8003400:	b21b      	sxth	r3, r3
 8003402:	81a3      	strh	r3, [r4, #12]
 8003404:	4240      	negs	r0, r0
 8003406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003408:	9b01      	ldr	r3, [sp, #4]
 800340a:	1836      	adds	r6, r6, r0
 800340c:	1a1b      	subs	r3, r3, r0
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	e7e6      	b.n	80033e0 <__sflush_r+0xd4>
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	dfbffffe 	.word	0xdfbffffe

08003418 <_fflush_r>:
 8003418:	690b      	ldr	r3, [r1, #16]
 800341a:	b570      	push	{r4, r5, r6, lr}
 800341c:	0005      	movs	r5, r0
 800341e:	000c      	movs	r4, r1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <_fflush_r+0x12>
 8003424:	2500      	movs	r5, #0
 8003426:	0028      	movs	r0, r5
 8003428:	bd70      	pop	{r4, r5, r6, pc}
 800342a:	2800      	cmp	r0, #0
 800342c:	d004      	beq.n	8003438 <_fflush_r+0x20>
 800342e:	6a03      	ldr	r3, [r0, #32]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <_fflush_r+0x20>
 8003434:	f7ff f8bc 	bl	80025b0 <__sinit>
 8003438:	220c      	movs	r2, #12
 800343a:	5ea3      	ldrsh	r3, [r4, r2]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f1      	beq.n	8003424 <_fflush_r+0xc>
 8003440:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003442:	07d2      	lsls	r2, r2, #31
 8003444:	d404      	bmi.n	8003450 <_fflush_r+0x38>
 8003446:	059b      	lsls	r3, r3, #22
 8003448:	d402      	bmi.n	8003450 <_fflush_r+0x38>
 800344a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800344c:	f7ff fc29 	bl	8002ca2 <__retarget_lock_acquire_recursive>
 8003450:	0028      	movs	r0, r5
 8003452:	0021      	movs	r1, r4
 8003454:	f7ff ff5a 	bl	800330c <__sflush_r>
 8003458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800345a:	0005      	movs	r5, r0
 800345c:	07db      	lsls	r3, r3, #31
 800345e:	d4e2      	bmi.n	8003426 <_fflush_r+0xe>
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	059b      	lsls	r3, r3, #22
 8003464:	d4df      	bmi.n	8003426 <_fflush_r+0xe>
 8003466:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003468:	f7ff fc1c 	bl	8002ca4 <__retarget_lock_release_recursive>
 800346c:	e7db      	b.n	8003426 <_fflush_r+0xe>
	...

08003470 <fiprintf>:
 8003470:	b40e      	push	{r1, r2, r3}
 8003472:	b517      	push	{r0, r1, r2, r4, lr}
 8003474:	4c05      	ldr	r4, [pc, #20]	@ (800348c <fiprintf+0x1c>)
 8003476:	ab05      	add	r3, sp, #20
 8003478:	cb04      	ldmia	r3!, {r2}
 800347a:	0001      	movs	r1, r0
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	f7ff fcaa 	bl	8002dd8 <_vfiprintf_r>
 8003484:	bc1e      	pop	{r1, r2, r3, r4}
 8003486:	bc08      	pop	{r3}
 8003488:	b003      	add	sp, #12
 800348a:	4718      	bx	r3
 800348c:	20000010 	.word	0x20000010

08003490 <_getc_r>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	0005      	movs	r5, r0
 8003494:	000c      	movs	r4, r1
 8003496:	2800      	cmp	r0, #0
 8003498:	d004      	beq.n	80034a4 <_getc_r+0x14>
 800349a:	6a03      	ldr	r3, [r0, #32]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <_getc_r+0x14>
 80034a0:	f7ff f886 	bl	80025b0 <__sinit>
 80034a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034a6:	07db      	lsls	r3, r3, #31
 80034a8:	d405      	bmi.n	80034b6 <_getc_r+0x26>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	059b      	lsls	r3, r3, #22
 80034ae:	d402      	bmi.n	80034b6 <_getc_r+0x26>
 80034b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034b2:	f7ff fbf6 	bl	8002ca2 <__retarget_lock_acquire_recursive>
 80034b6:	6863      	ldr	r3, [r4, #4]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	6063      	str	r3, [r4, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	da0f      	bge.n	80034e0 <_getc_r+0x50>
 80034c0:	0028      	movs	r0, r5
 80034c2:	0021      	movs	r1, r4
 80034c4:	f000 f8b3 	bl	800362e <__srget_r>
 80034c8:	0005      	movs	r5, r0
 80034ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034cc:	07db      	lsls	r3, r3, #31
 80034ce:	d405      	bmi.n	80034dc <_getc_r+0x4c>
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	059b      	lsls	r3, r3, #22
 80034d4:	d402      	bmi.n	80034dc <_getc_r+0x4c>
 80034d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034d8:	f7ff fbe4 	bl	8002ca4 <__retarget_lock_release_recursive>
 80034dc:	0028      	movs	r0, r5
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	6022      	str	r2, [r4, #0]
 80034e6:	781d      	ldrb	r5, [r3, #0]
 80034e8:	e7ef      	b.n	80034ca <_getc_r+0x3a>
	...

080034ec <__swhatbuf_r>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	000e      	movs	r6, r1
 80034f0:	001d      	movs	r5, r3
 80034f2:	230e      	movs	r3, #14
 80034f4:	5ec9      	ldrsh	r1, [r1, r3]
 80034f6:	0014      	movs	r4, r2
 80034f8:	b096      	sub	sp, #88	@ 0x58
 80034fa:	2900      	cmp	r1, #0
 80034fc:	da0c      	bge.n	8003518 <__swhatbuf_r+0x2c>
 80034fe:	89b2      	ldrh	r2, [r6, #12]
 8003500:	2380      	movs	r3, #128	@ 0x80
 8003502:	0011      	movs	r1, r2
 8003504:	4019      	ands	r1, r3
 8003506:	421a      	tst	r2, r3
 8003508:	d114      	bne.n	8003534 <__swhatbuf_r+0x48>
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	2000      	movs	r0, #0
 8003510:	6029      	str	r1, [r5, #0]
 8003512:	6023      	str	r3, [r4, #0]
 8003514:	b016      	add	sp, #88	@ 0x58
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	466a      	mov	r2, sp
 800351a:	f000 f8a3 	bl	8003664 <_fstat_r>
 800351e:	2800      	cmp	r0, #0
 8003520:	dbed      	blt.n	80034fe <__swhatbuf_r+0x12>
 8003522:	23f0      	movs	r3, #240	@ 0xf0
 8003524:	9901      	ldr	r1, [sp, #4]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	4019      	ands	r1, r3
 800352a:	4b04      	ldr	r3, [pc, #16]	@ (800353c <__swhatbuf_r+0x50>)
 800352c:	18c9      	adds	r1, r1, r3
 800352e:	424b      	negs	r3, r1
 8003530:	4159      	adcs	r1, r3
 8003532:	e7ea      	b.n	800350a <__swhatbuf_r+0x1e>
 8003534:	2100      	movs	r1, #0
 8003536:	2340      	movs	r3, #64	@ 0x40
 8003538:	e7e9      	b.n	800350e <__swhatbuf_r+0x22>
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	ffffe000 	.word	0xffffe000

08003540 <__smakebuf_r>:
 8003540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003542:	2602      	movs	r6, #2
 8003544:	898b      	ldrh	r3, [r1, #12]
 8003546:	0005      	movs	r5, r0
 8003548:	000c      	movs	r4, r1
 800354a:	b085      	sub	sp, #20
 800354c:	4233      	tst	r3, r6
 800354e:	d007      	beq.n	8003560 <__smakebuf_r+0x20>
 8003550:	0023      	movs	r3, r4
 8003552:	3347      	adds	r3, #71	@ 0x47
 8003554:	6023      	str	r3, [r4, #0]
 8003556:	6123      	str	r3, [r4, #16]
 8003558:	2301      	movs	r3, #1
 800355a:	6163      	str	r3, [r4, #20]
 800355c:	b005      	add	sp, #20
 800355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003560:	ab03      	add	r3, sp, #12
 8003562:	aa02      	add	r2, sp, #8
 8003564:	f7ff ffc2 	bl	80034ec <__swhatbuf_r>
 8003568:	9f02      	ldr	r7, [sp, #8]
 800356a:	9001      	str	r0, [sp, #4]
 800356c:	0039      	movs	r1, r7
 800356e:	0028      	movs	r0, r5
 8003570:	f7fe fe68 	bl	8002244 <_malloc_r>
 8003574:	2800      	cmp	r0, #0
 8003576:	d108      	bne.n	800358a <__smakebuf_r+0x4a>
 8003578:	220c      	movs	r2, #12
 800357a:	5ea3      	ldrsh	r3, [r4, r2]
 800357c:	059a      	lsls	r2, r3, #22
 800357e:	d4ed      	bmi.n	800355c <__smakebuf_r+0x1c>
 8003580:	2203      	movs	r2, #3
 8003582:	4393      	bics	r3, r2
 8003584:	431e      	orrs	r6, r3
 8003586:	81a6      	strh	r6, [r4, #12]
 8003588:	e7e2      	b.n	8003550 <__smakebuf_r+0x10>
 800358a:	2380      	movs	r3, #128	@ 0x80
 800358c:	89a2      	ldrh	r2, [r4, #12]
 800358e:	6020      	str	r0, [r4, #0]
 8003590:	4313      	orrs	r3, r2
 8003592:	81a3      	strh	r3, [r4, #12]
 8003594:	9b03      	ldr	r3, [sp, #12]
 8003596:	6120      	str	r0, [r4, #16]
 8003598:	6167      	str	r7, [r4, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00c      	beq.n	80035b8 <__smakebuf_r+0x78>
 800359e:	0028      	movs	r0, r5
 80035a0:	230e      	movs	r3, #14
 80035a2:	5ee1      	ldrsh	r1, [r4, r3]
 80035a4:	f000 f870 	bl	8003688 <_isatty_r>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d005      	beq.n	80035b8 <__smakebuf_r+0x78>
 80035ac:	2303      	movs	r3, #3
 80035ae:	89a2      	ldrh	r2, [r4, #12]
 80035b0:	439a      	bics	r2, r3
 80035b2:	3b02      	subs	r3, #2
 80035b4:	4313      	orrs	r3, r2
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	9a01      	ldr	r2, [sp, #4]
 80035bc:	4313      	orrs	r3, r2
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	e7cc      	b.n	800355c <__smakebuf_r+0x1c>

080035c2 <_putc_r>:
 80035c2:	b570      	push	{r4, r5, r6, lr}
 80035c4:	0006      	movs	r6, r0
 80035c6:	000d      	movs	r5, r1
 80035c8:	0014      	movs	r4, r2
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d004      	beq.n	80035d8 <_putc_r+0x16>
 80035ce:	6a03      	ldr	r3, [r0, #32]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <_putc_r+0x16>
 80035d4:	f7fe ffec 	bl	80025b0 <__sinit>
 80035d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035da:	07db      	lsls	r3, r3, #31
 80035dc:	d405      	bmi.n	80035ea <_putc_r+0x28>
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	059b      	lsls	r3, r3, #22
 80035e2:	d402      	bmi.n	80035ea <_putc_r+0x28>
 80035e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035e6:	f7ff fb5c 	bl	8002ca2 <__retarget_lock_acquire_recursive>
 80035ea:	68a3      	ldr	r3, [r4, #8]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	60a3      	str	r3, [r4, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da05      	bge.n	8003600 <_putc_r+0x3e>
 80035f4:	69a2      	ldr	r2, [r4, #24]
 80035f6:	4293      	cmp	r3, r2
 80035f8:	db12      	blt.n	8003620 <_putc_r+0x5e>
 80035fa:	b2eb      	uxtb	r3, r5
 80035fc:	2b0a      	cmp	r3, #10
 80035fe:	d00f      	beq.n	8003620 <_putc_r+0x5e>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	6022      	str	r2, [r4, #0]
 8003606:	701d      	strb	r5, [r3, #0]
 8003608:	b2ed      	uxtb	r5, r5
 800360a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800360c:	07db      	lsls	r3, r3, #31
 800360e:	d405      	bmi.n	800361c <_putc_r+0x5a>
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	059b      	lsls	r3, r3, #22
 8003614:	d402      	bmi.n	800361c <_putc_r+0x5a>
 8003616:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003618:	f7ff fb44 	bl	8002ca4 <__retarget_lock_release_recursive>
 800361c:	0028      	movs	r0, r5
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	0029      	movs	r1, r5
 8003622:	0022      	movs	r2, r4
 8003624:	0030      	movs	r0, r6
 8003626:	f7ff f97d 	bl	8002924 <__swbuf_r>
 800362a:	0005      	movs	r5, r0
 800362c:	e7ed      	b.n	800360a <_putc_r+0x48>

0800362e <__srget_r>:
 800362e:	b570      	push	{r4, r5, r6, lr}
 8003630:	0005      	movs	r5, r0
 8003632:	000c      	movs	r4, r1
 8003634:	2800      	cmp	r0, #0
 8003636:	d004      	beq.n	8003642 <__srget_r+0x14>
 8003638:	6a03      	ldr	r3, [r0, #32]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <__srget_r+0x14>
 800363e:	f7fe ffb7 	bl	80025b0 <__sinit>
 8003642:	0021      	movs	r1, r4
 8003644:	0028      	movs	r0, r5
 8003646:	f000 f851 	bl	80036ec <__srefill_r>
 800364a:	2800      	cmp	r0, #0
 800364c:	d107      	bne.n	800365e <__srget_r+0x30>
 800364e:	6863      	ldr	r3, [r4, #4]
 8003650:	3b01      	subs	r3, #1
 8003652:	6063      	str	r3, [r4, #4]
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	6022      	str	r2, [r4, #0]
 800365a:	7818      	ldrb	r0, [r3, #0]
 800365c:	bd70      	pop	{r4, r5, r6, pc}
 800365e:	2001      	movs	r0, #1
 8003660:	4240      	negs	r0, r0
 8003662:	e7fb      	b.n	800365c <__srget_r+0x2e>

08003664 <_fstat_r>:
 8003664:	2300      	movs	r3, #0
 8003666:	b570      	push	{r4, r5, r6, lr}
 8003668:	4d06      	ldr	r5, [pc, #24]	@ (8003684 <_fstat_r+0x20>)
 800366a:	0004      	movs	r4, r0
 800366c:	0008      	movs	r0, r1
 800366e:	0011      	movs	r1, r2
 8003670:	602b      	str	r3, [r5, #0]
 8003672:	f7fe fbdd 	bl	8001e30 <_fstat>
 8003676:	1c43      	adds	r3, r0, #1
 8003678:	d103      	bne.n	8003682 <_fstat_r+0x1e>
 800367a:	682b      	ldr	r3, [r5, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d000      	beq.n	8003682 <_fstat_r+0x1e>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	200002dc 	.word	0x200002dc

08003688 <_isatty_r>:
 8003688:	2300      	movs	r3, #0
 800368a:	b570      	push	{r4, r5, r6, lr}
 800368c:	4d06      	ldr	r5, [pc, #24]	@ (80036a8 <_isatty_r+0x20>)
 800368e:	0004      	movs	r4, r0
 8003690:	0008      	movs	r0, r1
 8003692:	602b      	str	r3, [r5, #0]
 8003694:	f7fe fbda 	bl	8001e4c <_isatty>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d103      	bne.n	80036a4 <_isatty_r+0x1c>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d000      	beq.n	80036a4 <_isatty_r+0x1c>
 80036a2:	6023      	str	r3, [r4, #0]
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	200002dc 	.word	0x200002dc

080036ac <memchr>:
 80036ac:	b2c9      	uxtb	r1, r1
 80036ae:	1882      	adds	r2, r0, r2
 80036b0:	4290      	cmp	r0, r2
 80036b2:	d101      	bne.n	80036b8 <memchr+0xc>
 80036b4:	2000      	movs	r0, #0
 80036b6:	4770      	bx	lr
 80036b8:	7803      	ldrb	r3, [r0, #0]
 80036ba:	428b      	cmp	r3, r1
 80036bc:	d0fb      	beq.n	80036b6 <memchr+0xa>
 80036be:	3001      	adds	r0, #1
 80036c0:	e7f6      	b.n	80036b0 <memchr+0x4>

080036c2 <abort>:
 80036c2:	2006      	movs	r0, #6
 80036c4:	b510      	push	{r4, lr}
 80036c6:	f000 f8b1 	bl	800382c <raise>
 80036ca:	2001      	movs	r0, #1
 80036cc:	f7fe fb60 	bl	8001d90 <_exit>

080036d0 <lflush>:
 80036d0:	2209      	movs	r2, #9
 80036d2:	898b      	ldrh	r3, [r1, #12]
 80036d4:	2000      	movs	r0, #0
 80036d6:	b510      	push	{r4, lr}
 80036d8:	4013      	ands	r3, r2
 80036da:	4293      	cmp	r3, r2
 80036dc:	d103      	bne.n	80036e6 <lflush+0x16>
 80036de:	4b02      	ldr	r3, [pc, #8]	@ (80036e8 <lflush+0x18>)
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	f7ff fe99 	bl	8003418 <_fflush_r>
 80036e6:	bd10      	pop	{r4, pc}
 80036e8:	20000010 	.word	0x20000010

080036ec <__srefill_r>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	0005      	movs	r5, r0
 80036f0:	000c      	movs	r4, r1
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d004      	beq.n	8003700 <__srefill_r+0x14>
 80036f6:	6a03      	ldr	r3, [r0, #32]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <__srefill_r+0x14>
 80036fc:	f7fe ff58 	bl	80025b0 <__sinit>
 8003700:	2300      	movs	r3, #0
 8003702:	6063      	str	r3, [r4, #4]
 8003704:	220c      	movs	r2, #12
 8003706:	5ea3      	ldrsh	r3, [r4, r2]
 8003708:	069a      	lsls	r2, r3, #26
 800370a:	d408      	bmi.n	800371e <__srefill_r+0x32>
 800370c:	075a      	lsls	r2, r3, #29
 800370e:	d449      	bmi.n	80037a4 <__srefill_r+0xb8>
 8003710:	06da      	lsls	r2, r3, #27
 8003712:	d407      	bmi.n	8003724 <__srefill_r+0x38>
 8003714:	2209      	movs	r2, #9
 8003716:	602a      	str	r2, [r5, #0]
 8003718:	3237      	adds	r2, #55	@ 0x37
 800371a:	4313      	orrs	r3, r2
 800371c:	81a3      	strh	r3, [r4, #12]
 800371e:	2001      	movs	r0, #1
 8003720:	4240      	negs	r0, r0
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	2608      	movs	r6, #8
 8003726:	4233      	tst	r3, r6
 8003728:	d00a      	beq.n	8003740 <__srefill_r+0x54>
 800372a:	0021      	movs	r1, r4
 800372c:	0028      	movs	r0, r5
 800372e:	f7ff fe73 	bl	8003418 <_fflush_r>
 8003732:	2800      	cmp	r0, #0
 8003734:	d1f3      	bne.n	800371e <__srefill_r+0x32>
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	60a0      	str	r0, [r4, #8]
 800373a:	43b3      	bics	r3, r6
 800373c:	81a3      	strh	r3, [r4, #12]
 800373e:	61a0      	str	r0, [r4, #24]
 8003740:	2304      	movs	r3, #4
 8003742:	89a2      	ldrh	r2, [r4, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	81a3      	strh	r3, [r4, #12]
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <__srefill_r+0x6a>
 800374e:	0021      	movs	r1, r4
 8003750:	0028      	movs	r0, r5
 8003752:	f7ff fef5 	bl	8003540 <__smakebuf_r>
 8003756:	230c      	movs	r3, #12
 8003758:	5ee6      	ldrsh	r6, [r4, r3]
 800375a:	07b3      	lsls	r3, r6, #30
 800375c:	d00f      	beq.n	800377e <__srefill_r+0x92>
 800375e:	2301      	movs	r3, #1
 8003760:	4a1a      	ldr	r2, [pc, #104]	@ (80037cc <__srefill_r+0xe0>)
 8003762:	81a3      	strh	r3, [r4, #12]
 8003764:	491a      	ldr	r1, [pc, #104]	@ (80037d0 <__srefill_r+0xe4>)
 8003766:	481b      	ldr	r0, [pc, #108]	@ (80037d4 <__srefill_r+0xe8>)
 8003768:	f7fe ff3a 	bl	80025e0 <_fwalk_sglue>
 800376c:	2309      	movs	r3, #9
 800376e:	81a6      	strh	r6, [r4, #12]
 8003770:	401e      	ands	r6, r3
 8003772:	429e      	cmp	r6, r3
 8003774:	d103      	bne.n	800377e <__srefill_r+0x92>
 8003776:	0021      	movs	r1, r4
 8003778:	0028      	movs	r0, r5
 800377a:	f7ff fdc7 	bl	800330c <__sflush_r>
 800377e:	6922      	ldr	r2, [r4, #16]
 8003780:	0028      	movs	r0, r5
 8003782:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8003784:	6963      	ldr	r3, [r4, #20]
 8003786:	6a21      	ldr	r1, [r4, #32]
 8003788:	6022      	str	r2, [r4, #0]
 800378a:	47b0      	blx	r6
 800378c:	6060      	str	r0, [r4, #4]
 800378e:	2800      	cmp	r0, #0
 8003790:	dc1a      	bgt.n	80037c8 <__srefill_r+0xdc>
 8003792:	230c      	movs	r3, #12
 8003794:	5ee2      	ldrsh	r2, [r4, r3]
 8003796:	2320      	movs	r3, #32
 8003798:	2800      	cmp	r0, #0
 800379a:	d0be      	beq.n	800371a <__srefill_r+0x2e>
 800379c:	2300      	movs	r3, #0
 800379e:	6063      	str	r3, [r4, #4]
 80037a0:	3340      	adds	r3, #64	@ 0x40
 80037a2:	e7ba      	b.n	800371a <__srefill_r+0x2e>
 80037a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d0ce      	beq.n	8003748 <__srefill_r+0x5c>
 80037aa:	0023      	movs	r3, r4
 80037ac:	3344      	adds	r3, #68	@ 0x44
 80037ae:	4299      	cmp	r1, r3
 80037b0:	d002      	beq.n	80037b8 <__srefill_r+0xcc>
 80037b2:	0028      	movs	r0, r5
 80037b4:	f7ff fa9e 	bl	8002cf4 <_free_r>
 80037b8:	2300      	movs	r3, #0
 80037ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80037bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037be:	6063      	str	r3, [r4, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0c1      	beq.n	8003748 <__srefill_r+0x5c>
 80037c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80037c6:	6023      	str	r3, [r4, #0]
 80037c8:	2000      	movs	r0, #0
 80037ca:	e7aa      	b.n	8003722 <__srefill_r+0x36>
 80037cc:	20000004 	.word	0x20000004
 80037d0:	080036d1 	.word	0x080036d1
 80037d4:	20000014 	.word	0x20000014

080037d8 <_raise_r>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	0004      	movs	r4, r0
 80037dc:	000d      	movs	r5, r1
 80037de:	291f      	cmp	r1, #31
 80037e0:	d904      	bls.n	80037ec <_raise_r+0x14>
 80037e2:	2316      	movs	r3, #22
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	2001      	movs	r0, #1
 80037e8:	4240      	negs	r0, r0
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <_raise_r+0x24>
 80037f2:	008a      	lsls	r2, r1, #2
 80037f4:	189b      	adds	r3, r3, r2
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2a00      	cmp	r2, #0
 80037fa:	d108      	bne.n	800380e <_raise_r+0x36>
 80037fc:	0020      	movs	r0, r4
 80037fe:	f000 f831 	bl	8003864 <_getpid_r>
 8003802:	002a      	movs	r2, r5
 8003804:	0001      	movs	r1, r0
 8003806:	0020      	movs	r0, r4
 8003808:	f000 f81a 	bl	8003840 <_kill_r>
 800380c:	e7ed      	b.n	80037ea <_raise_r+0x12>
 800380e:	2a01      	cmp	r2, #1
 8003810:	d009      	beq.n	8003826 <_raise_r+0x4e>
 8003812:	1c51      	adds	r1, r2, #1
 8003814:	d103      	bne.n	800381e <_raise_r+0x46>
 8003816:	2316      	movs	r3, #22
 8003818:	6003      	str	r3, [r0, #0]
 800381a:	2001      	movs	r0, #1
 800381c:	e7e5      	b.n	80037ea <_raise_r+0x12>
 800381e:	2100      	movs	r1, #0
 8003820:	0028      	movs	r0, r5
 8003822:	6019      	str	r1, [r3, #0]
 8003824:	4790      	blx	r2
 8003826:	2000      	movs	r0, #0
 8003828:	e7df      	b.n	80037ea <_raise_r+0x12>
	...

0800382c <raise>:
 800382c:	b510      	push	{r4, lr}
 800382e:	4b03      	ldr	r3, [pc, #12]	@ (800383c <raise+0x10>)
 8003830:	0001      	movs	r1, r0
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	f7ff ffd0 	bl	80037d8 <_raise_r>
 8003838:	bd10      	pop	{r4, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	20000010 	.word	0x20000010

08003840 <_kill_r>:
 8003840:	2300      	movs	r3, #0
 8003842:	b570      	push	{r4, r5, r6, lr}
 8003844:	4d06      	ldr	r5, [pc, #24]	@ (8003860 <_kill_r+0x20>)
 8003846:	0004      	movs	r4, r0
 8003848:	0008      	movs	r0, r1
 800384a:	0011      	movs	r1, r2
 800384c:	602b      	str	r3, [r5, #0]
 800384e:	f7fe fa8f 	bl	8001d70 <_kill>
 8003852:	1c43      	adds	r3, r0, #1
 8003854:	d103      	bne.n	800385e <_kill_r+0x1e>
 8003856:	682b      	ldr	r3, [r5, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d000      	beq.n	800385e <_kill_r+0x1e>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	200002dc 	.word	0x200002dc

08003864 <_getpid_r>:
 8003864:	b510      	push	{r4, lr}
 8003866:	f7fe fa7d 	bl	8001d64 <_getpid>
 800386a:	bd10      	pop	{r4, pc}

0800386c <_init>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr

08003878 <_fini>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr
