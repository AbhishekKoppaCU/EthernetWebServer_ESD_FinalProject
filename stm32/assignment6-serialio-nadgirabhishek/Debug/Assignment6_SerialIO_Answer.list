
Assignment6_SerialIO_Answer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08002b6c  08002b6c  00003b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003078  08003078  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  08003078  08003078  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003078  08003078  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003078  08003078  00004078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800307c  0800307c  0000407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003080  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000060  080030e0  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  080030e0  000052e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f40  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001052  00000000  00000000  00007fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  00009020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000225  00000000  00000000  00009328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001583e  00000000  00000000  0000954d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b57  00000000  00000000  0001ed8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000696ad  00000000  00000000  000248e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0008df8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001524  00000000  00000000  0008e018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0008f53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b54 	.word	0x08002b54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08002b54 	.word	0x08002b54

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <cbfifo_init>:


/*
 * Initialize the FIFO structure.
 */
void cbfifo_init(cbfifo_t *fifo) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d00b      	beq.n	800026a <cbfifo_init+0x26>
        fifo->write = 0;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2280      	movs	r2, #128	@ 0x80
 8000256:	2100      	movs	r1, #0
 8000258:	5099      	str	r1, [r3, r2]
        fifo->read = 0;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2284      	movs	r2, #132	@ 0x84
 800025e:	2100      	movs	r1, #0
 8000260:	5099      	str	r1, [r3, r2]
        fifo->length = 0;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2288      	movs	r2, #136	@ 0x88
 8000266:	2100      	movs	r1, #0
 8000268:	5099      	str	r1, [r3, r2]
    }
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <cbfifo_enqueue>:
 *
 * Returns:
 *   The number of bytes actually enqueued, which could be 0.
 *   In case of an error, returns (size_t) -1.
 */
size_t cbfifo_enqueue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 8000272:	b580      	push	{r7, lr}
 8000274:	b088      	sub	sp, #32
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL) {
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <cbfifo_enqueue+0x18>
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <cbfifo_enqueue+0x1e>
        return FIFO_ERROR;
 800028a:	2301      	movs	r3, #1
 800028c:	425b      	negs	r3, r3
 800028e:	e03b      	b.n	8000308 <cbfifo_enqueue+0x96>
    }
    if (nbyte == 0) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d101      	bne.n	800029a <cbfifo_enqueue+0x28>
        return 0;
 8000296:	2300      	movs	r3, #0
 8000298:	e036      	b.n	8000308 <cbfifo_enqueue+0x96>
    }
    size_t blank = (MAX_FIFO_SIZE - (fifo->length));
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	2288      	movs	r2, #136	@ 0x88
 800029e:	589b      	ldr	r3, [r3, r2]
 80002a0:	2280      	movs	r2, #128	@ 0x80
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	61bb      	str	r3, [r7, #24]
    if (blank == 0) {
 80002a6:	69bb      	ldr	r3, [r7, #24]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d101      	bne.n	80002b0 <cbfifo_enqueue+0x3e>
        return 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	e02b      	b.n	8000308 <cbfifo_enqueue+0x96>
    }
    size_t endq = (nbyte <= blank) ? nbyte : blank;
 80002b0:	69ba      	ldr	r2, [r7, #24]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d900      	bls.n	80002ba <cbfifo_enqueue+0x48>
 80002b8:	0013      	movs	r3, r2
 80002ba:	617b      	str	r3, [r7, #20]
    uint8_t *temp = (uint8_t*)buf;
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < endq; i++) {
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
 80002c4:	e01b      	b.n	80002fe <cbfifo_enqueue+0x8c>
        fifo->buffer[fifo->write] = temp[i];
 80002c6:	693a      	ldr	r2, [r7, #16]
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	18d2      	adds	r2, r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2180      	movs	r1, #128	@ 0x80
 80002d0:	585b      	ldr	r3, [r3, r1]
 80002d2:	7811      	ldrb	r1, [r2, #0]
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	54d1      	strb	r1, [r2, r3]
        fifo->length++;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2288      	movs	r2, #136	@ 0x88
 80002dc:	589b      	ldr	r3, [r3, r2]
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	2188      	movs	r1, #136	@ 0x88
 80002e4:	505a      	str	r2, [r3, r1]
        fifo->write = ((fifo->write + 1) & (MAX_FIFO_SIZE-1)); // Increment write pointer with wrap-around
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2280      	movs	r2, #128	@ 0x80
 80002ea:	589b      	ldr	r3, [r3, r2]
 80002ec:	3301      	adds	r3, #1
 80002ee:	227f      	movs	r2, #127	@ 0x7f
 80002f0:	401a      	ands	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2180      	movs	r1, #128	@ 0x80
 80002f6:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	3301      	adds	r3, #1
 80002fc:	61fb      	str	r3, [r7, #28]
 80002fe:	69fa      	ldr	r2, [r7, #28]
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3df      	bcc.n	80002c6 <cbfifo_enqueue+0x54>
    }
    return endq;
 8000306:	697b      	ldr	r3, [r7, #20]
}
 8000308:	0018      	movs	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	b008      	add	sp, #32
 800030e:	bd80      	pop	{r7, pc}

08000310 <cbfifo_dequeue>:
 *   nbyte   Bytes of data requested
 *
 * Returns:
 *   The number of bytes actually removed.
 */
size_t cbfifo_dequeue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL || nbyte == 0 || fifo->length == 0) {
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d00a      	beq.n	8000338 <cbfifo_dequeue+0x28>
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d007      	beq.n	8000338 <cbfifo_dequeue+0x28>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <cbfifo_dequeue+0x28>
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2288      	movs	r2, #136	@ 0x88
 8000332:	589b      	ldr	r3, [r3, r2]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d101      	bne.n	800033c <cbfifo_dequeue+0x2c>
        return 0;
 8000338:	2300      	movs	r3, #0
 800033a:	e02d      	b.n	8000398 <cbfifo_dequeue+0x88>
    }
    size_t endq = (nbyte <= fifo->length) ? nbyte : fifo->length;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	2288      	movs	r2, #136	@ 0x88
 8000340:	589a      	ldr	r2, [r3, r2]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4293      	cmp	r3, r2
 8000346:	d900      	bls.n	800034a <cbfifo_dequeue+0x3a>
 8000348:	0013      	movs	r3, r2
 800034a:	61bb      	str	r3, [r7, #24]
    uint8_t *temp = (uint8_t*)buf;
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < endq; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
 8000354:	e01b      	b.n	800038e <cbfifo_dequeue+0x7e>
        temp[i] = fifo->buffer[fifo->read];
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2284      	movs	r2, #132	@ 0x84
 800035a:	589a      	ldr	r2, [r3, r2]
 800035c:	6979      	ldr	r1, [r7, #20]
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	18cb      	adds	r3, r1, r3
 8000362:	68f9      	ldr	r1, [r7, #12]
 8000364:	5c8a      	ldrb	r2, [r1, r2]
 8000366:	701a      	strb	r2, [r3, #0]
        fifo->length--;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2288      	movs	r2, #136	@ 0x88
 800036c:	589b      	ldr	r3, [r3, r2]
 800036e:	1e5a      	subs	r2, r3, #1
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	2188      	movs	r1, #136	@ 0x88
 8000374:	505a      	str	r2, [r3, r1]
        fifo->read = ((fifo->read + 1) & (MAX_FIFO_SIZE-1)); // Increment read pointer with wrap-around
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2284      	movs	r2, #132	@ 0x84
 800037a:	589b      	ldr	r3, [r3, r2]
 800037c:	3301      	adds	r3, #1
 800037e:	227f      	movs	r2, #127	@ 0x7f
 8000380:	401a      	ands	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2184      	movs	r1, #132	@ 0x84
 8000386:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	3301      	adds	r3, #1
 800038c:	61fb      	str	r3, [r7, #28]
 800038e:	69fa      	ldr	r2, [r7, #28]
 8000390:	69bb      	ldr	r3, [r7, #24]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3df      	bcc.n	8000356 <cbfifo_dequeue+0x46>
    }
    return endq;
 8000396:	69bb      	ldr	r3, [r7, #24]
}
 8000398:	0018      	movs	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	b008      	add	sp, #32
 800039e:	bd80      	pop	{r7, pc}

080003a0 <cbfifo_length>:
 *   fifo    Pointer to the FIFO structure
 *
 * Returns:
 *   Number of bytes currently available to be dequeued from the FIFO.
 */
size_t cbfifo_length(cbfifo_t *fifo) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
    return (fifo != NULL) ? fifo->length : 0; // Return length or 0 if fifo is NULL
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d003      	beq.n	80003b6 <cbfifo_length+0x16>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2288      	movs	r2, #136	@ 0x88
 80003b2:	589b      	ldr	r3, [r3, r2]
 80003b4:	e000      	b.n	80003b8 <cbfifo_length+0x18>
 80003b6:	2300      	movs	r3, #0
}
 80003b8:	0018      	movs	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b002      	add	sp, #8
 80003be:	bd80      	pop	{r7, pc}

080003c0 <ULED_ON>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_ON() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_ON_MASK;
 80003c4:	2390      	movs	r3, #144	@ 0x90
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	699a      	ldr	r2, [r3, #24]
 80003ca:	2390      	movs	r3, #144	@ 0x90
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2120      	movs	r1, #32
 80003d0:	430a      	orrs	r2, r1
 80003d2:	619a      	str	r2, [r3, #24]
}
 80003d4:	46c0      	nop			@ (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <ULED_OFF>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_OFF() {
 80003da:	b580      	push	{r7, lr}
 80003dc:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_OFF_MASK;
 80003de:	2390      	movs	r3, #144	@ 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	699a      	ldr	r2, [r3, #24]
 80003e4:	2390      	movs	r3, #144	@ 0x90
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	2180      	movs	r1, #128	@ 0x80
 80003ea:	0389      	lsls	r1, r1, #14
 80003ec:	430a      	orrs	r2, r1
 80003ee:	619a      	str	r2, [r3, #24]
}
 80003f0:	46c0      	nop			@ (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <cmd_led>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_led(int argc, char *argv[]) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	if (argc != 2) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b02      	cmp	r3, #2
 8000406:	d004      	beq.n	8000412 <cmd_led+0x1a>
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 8000408:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <cmd_led+0x6c>)
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fa3e 	bl	800188c <puts>
		return;
 8000410:	e025      	b.n	800045e <cmd_led+0x66>
	}
	if (strcasecmp(argv[1], "ON") == 0) {
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	3304      	adds	r3, #4
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <cmd_led+0x70>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fbe9 	bl	8001bf4 <strcasecmp>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d106      	bne.n	8000434 <cmd_led+0x3c>
		ULED_ON();
 8000426:	f7ff ffcb 	bl	80003c0 <ULED_ON>
		printf("\nLED turned ON\n");
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <cmd_led+0x74>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fa2d 	bl	800188c <puts>
 8000432:	e014      	b.n	800045e <cmd_led+0x66>
	} else if (strcasecmp(argv[1], "OFF") == 0) {
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	3304      	adds	r3, #4
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <cmd_led+0x78>)
 800043c:	0011      	movs	r1, r2
 800043e:	0018      	movs	r0, r3
 8000440:	f001 fbd8 	bl	8001bf4 <strcasecmp>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d106      	bne.n	8000456 <cmd_led+0x5e>
		ULED_OFF();
 8000448:	f7ff ffc7 	bl	80003da <ULED_OFF>
		printf("\nLED turned OFF\n");
 800044c:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <cmd_led+0x7c>)
 800044e:	0018      	movs	r0, r3
 8000450:	f001 fa1c 	bl	800188c <puts>
 8000454:	e003      	b.n	800045e <cmd_led+0x66>
	} else {
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 8000456:	4b03      	ldr	r3, [pc, #12]	@ (8000464 <cmd_led+0x6c>)
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fa17 	bl	800188c <puts>
	}
}
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	08002b90 	.word	0x08002b90
 8000468:	08002bc0 	.word	0x08002bc0
 800046c:	08002bc4 	.word	0x08002bc4
 8000470:	08002bd4 	.word	0x08002bd4
 8000474:	08002bd8 	.word	0x08002bd8

08000478 <cmd_echo>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_echo(int argc, char *argv[]) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	printf("\n");
 8000482:	200a      	movs	r0, #10
 8000484:	f001 f9a2 	bl	80017cc <putchar>
	for (int i = 1; i < argc; i++) {
 8000488:	2301      	movs	r3, #1
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e00c      	b.n	80004a8 <cmd_echo+0x30>
		printf("%s ", argv[i]);
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	18d3      	adds	r3, r2, r3
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <cmd_echo+0x48>)
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f001 f985 	bl	80017ac <iprintf>
	for (int i = 1; i < argc; i++) {
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dbee      	blt.n	800048e <cmd_echo+0x16>
	}
	printf("\n");
 80004b0:	200a      	movs	r0, #10
 80004b2:	f001 f98b 	bl	80017cc <putchar>
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	08002be8 	.word	0x08002be8

080004c4 <cmd_hexdump>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_hexdump(int argc, char *argv[]) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	if (argc != 3) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d004      	beq.n	80004de <cmd_hexdump+0x1a>
		printf(
 80004d4:	4b5b      	ldr	r3, [pc, #364]	@ (8000644 <cmd_hexdump+0x180>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 f9d8 	bl	800188c <puts>
				"\nInvalid command: HEXDUMP requires start and stop addresses\n");
		return;
 80004dc:	e0ae      	b.n	800063c <cmd_hexdump+0x178>
	}

	char *start_address_str = argv[1];
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	613b      	str	r3, [r7, #16]
	if(strlen(start_address_str) < 1 || strlen(start_address_str) > 8) {
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d006      	beq.n	80004fa <cmd_hexdump+0x36>
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff fe0a 	bl	8000108 <strlen>
 80004f4:	0003      	movs	r3, r0
 80004f6:	2b08      	cmp	r3, #8
 80004f8:	d904      	bls.n	8000504 <cmd_hexdump+0x40>
		printf("\nInvalid address\n");
 80004fa:	4b53      	ldr	r3, [pc, #332]	@ (8000648 <cmd_hexdump+0x184>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 f9c5 	bl	800188c <puts>
		return;
 8000502:	e09b      	b.n	800063c <cmd_hexdump+0x178>
	}

	for (int i = 0; i < strlen(start_address_str); i++) {
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
 8000508:	e01f      	b.n	800054a <cmd_hexdump+0x86>
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	693a      	ldr	r2, [r7, #16]
 800050e:	18d3      	adds	r3, r2, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b2f      	cmp	r3, #47	@ 0x2f
 8000514:	d905      	bls.n	8000522 <cmd_hexdump+0x5e>
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	18d3      	adds	r3, r2, r3
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b39      	cmp	r3, #57	@ 0x39
 8000520:	d910      	bls.n	8000544 <cmd_hexdump+0x80>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	18d3      	adds	r3, r2, r3
 8000528:	781b      	ldrb	r3, [r3, #0]
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 800052a:	2b40      	cmp	r3, #64	@ 0x40
 800052c:	d905      	bls.n	800053a <cmd_hexdump+0x76>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	18d3      	adds	r3, r2, r3
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b46      	cmp	r3, #70	@ 0x46
 8000538:	d904      	bls.n	8000544 <cmd_hexdump+0x80>
			printf("\nInvalid address\n");
 800053a:	4b43      	ldr	r3, [pc, #268]	@ (8000648 <cmd_hexdump+0x184>)
 800053c:	0018      	movs	r0, r3
 800053e:	f001 f9a5 	bl	800188c <puts>
			return;
 8000542:	e07b      	b.n	800063c <cmd_hexdump+0x178>
	for (int i = 0; i < strlen(start_address_str); i++) {
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	3301      	adds	r3, #1
 8000548:	61fb      	str	r3, [r7, #28]
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	0018      	movs	r0, r3
 800054e:	f7ff fddb 	bl	8000108 <strlen>
 8000552:	0002      	movs	r2, r0
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	429a      	cmp	r2, r3
 8000558:	d8d7      	bhi.n	800050a <cmd_hexdump+0x46>
		}
	}
	unsigned int start = (unsigned int) strtol(argv[1], NULL, 16);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	3304      	adds	r3, #4
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2210      	movs	r2, #16
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f001 f847 	bl	80015f8 <strtol>
 800056a:	0003      	movs	r3, r0
 800056c:	60fb      	str	r3, [r7, #12]
	unsigned int length;

	switch (strncmp(argv[2], "0X", 2) == 0) {
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3308      	adds	r3, #8
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4935      	ldr	r1, [pc, #212]	@ (800064c <cmd_hexdump+0x188>)
 8000576:	2202      	movs	r2, #2
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fb55 	bl	8001c28 <strncmp>
 800057e:	0003      	movs	r3, r0
 8000580:	425a      	negs	r2, r3
 8000582:	4153      	adcs	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00c      	beq.n	80005a4 <cmd_hexdump+0xe0>
 800058a:	2b01      	cmp	r3, #1
 800058c:	d115      	bne.n	80005ba <cmd_hexdump+0xf6>
	case 1:
		length = (unsigned int) strtol(argv[2], NULL, 16);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	3308      	adds	r3, #8
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2210      	movs	r2, #16
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f001 f82d 	bl	80015f8 <strtol>
 800059e:	0003      	movs	r3, r0
 80005a0:	61bb      	str	r3, [r7, #24]
		break;
 80005a2:	e00a      	b.n	80005ba <cmd_hexdump+0xf6>
	case 0:
		length = (unsigned int) strtol(argv[2], NULL, 10);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	3308      	adds	r3, #8
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	220a      	movs	r2, #10
 80005ac:	2100      	movs	r1, #0
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 f822 	bl	80015f8 <strtol>
 80005b4:	0003      	movs	r3, r0
 80005b6:	61bb      	str	r3, [r7, #24]
		break;
 80005b8:	46c0      	nop			@ (mov r8, r8)
	}

	if (length == 0 || length >= 640) {
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d004      	beq.n	80005ca <cmd_hexdump+0x106>
 80005c0:	69ba      	ldr	r2, [r7, #24]
 80005c2:	23a0      	movs	r3, #160	@ 0xa0
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d304      	bcc.n	80005d4 <cmd_hexdump+0x110>
		printf("\nInvalid length\n");
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <cmd_hexdump+0x18c>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 f95d 	bl	800188c <puts>
		return;
 80005d2:	e033      	b.n	800063c <cmd_hexdump+0x178>
	}

	printf("\nHexdump from %08X to %08X\n", start, start + length - 1);
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	68f9      	ldr	r1, [r7, #12]
 80005de:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <cmd_hexdump+0x190>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 f8e3 	bl	80017ac <iprintf>

	char *buff = (char*) start;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < length; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e01e      	b.n	800062e <cmd_hexdump+0x16a>
		if ((i % 8) == 0) {
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	2207      	movs	r2, #7
 80005f4:	4013      	ands	r3, r2
 80005f6:	d10d      	bne.n	8000614 <cmd_hexdump+0x150>
			if (i != 0) {
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <cmd_hexdump+0x140>
				printf("\n");
 80005fe:	200a      	movs	r0, #10
 8000600:	f001 f8e4 	bl	80017cc <putchar>
			}
			printf("%08X ", start + i);  // Address with underscores
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	18d2      	adds	r2, r2, r3
 800060a:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <cmd_hexdump+0x194>)
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f001 f8cc 	bl	80017ac <iprintf>
		}
		printf("%02X ", (unsigned char) buff[i]);
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	001a      	movs	r2, r3
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <cmd_hexdump+0x198>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f8c2 	bl	80017ac <iprintf>
	for (int i = 0; i < length; i++) {
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	3301      	adds	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	69ba      	ldr	r2, [r7, #24]
 8000632:	429a      	cmp	r2, r3
 8000634:	d8dc      	bhi.n	80005f0 <cmd_hexdump+0x12c>
	}

	printf("\n");
 8000636:	200a      	movs	r0, #10
 8000638:	f001 f8c8 	bl	80017cc <putchar>
}
 800063c:	46bd      	mov	sp, r7
 800063e:	b008      	add	sp, #32
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	08002bec 	.word	0x08002bec
 8000648:	08002c28 	.word	0x08002c28
 800064c:	08002c3c 	.word	0x08002c3c
 8000650:	08002c40 	.word	0x08002c40
 8000654:	08002c50 	.word	0x08002c50
 8000658:	08002c6c 	.word	0x08002c6c
 800065c:	08002c74 	.word	0x08002c74

08000660 <accumulate_line>:
 * Parameters:
 * Buffer and Buffer Size
 *
 * Returns:
 */
void accumulate_line(char *buffer, int max_size) {
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	int index = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
	char ch;

	while (1) {
		ch = getchar();
 800066e:	f001 f893 	bl	8001798 <getchar>
 8000672:	0002      	movs	r2, r0
 8000674:	210b      	movs	r1, #11
 8000676:	187b      	adds	r3, r7, r1
 8000678:	701a      	strb	r2, [r3, #0]
		if ((ch != 255)) {
 800067a:	000a      	movs	r2, r1
 800067c:	18bb      	adds	r3, r7, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2bff      	cmp	r3, #255	@ 0xff
 8000682:	d0f4      	beq.n	800066e <accumulate_line+0xe>
			switch (ch) {
 8000684:	18bb      	adds	r3, r7, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b7f      	cmp	r3, #127	@ 0x7f
 800068a:	d018      	beq.n	80006be <accumulate_line+0x5e>
 800068c:	dc32      	bgt.n	80006f4 <accumulate_line+0x94>
 800068e:	2b20      	cmp	r3, #32
 8000690:	d020      	beq.n	80006d4 <accumulate_line+0x74>
 8000692:	dc2f      	bgt.n	80006f4 <accumulate_line+0x94>
 8000694:	2b08      	cmp	r3, #8
 8000696:	d007      	beq.n	80006a8 <accumulate_line+0x48>
 8000698:	2b0d      	cmp	r3, #13
 800069a:	d12b      	bne.n	80006f4 <accumulate_line+0x94>
			case '\r':
				buffer[index] = '\0';
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	18d3      	adds	r3, r2, r3
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
				return;
 80006a6:	e04f      	b.n	8000748 <accumulate_line+0xe8>
			case '\b':
				if (index > 0) {
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dd48      	ble.n	8000740 <accumulate_line+0xe0>
					index--;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
					printf("\b \b");
 80006b4:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <accumulate_line+0xf0>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 f878 	bl	80017ac <iprintf>
				}
				break;
 80006bc:	e040      	b.n	8000740 <accumulate_line+0xe0>
			case '\177':
				if (index > 0) {
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dd3f      	ble.n	8000744 <accumulate_line+0xe4>
					index--;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
					printf("\177 \177");
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <accumulate_line+0xf4>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f86d 	bl	80017ac <iprintf>
				}
				break;
 80006d2:	e037      	b.n	8000744 <accumulate_line+0xe4>
			case ' ':
				printf("%c", ch);
 80006d4:	240b      	movs	r4, #11
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 f876 	bl	80017cc <putchar>
				buffer[index] = ch;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	193a      	adds	r2, r7, r4
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	701a      	strb	r2, [r3, #0]
				index++;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
				break;
 80006f2:	e028      	b.n	8000746 <accumulate_line+0xe6>
			default:
				printf("%c", ch);
 80006f4:	240b      	movs	r4, #11
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 f866 	bl	80017cc <putchar>
				buffer[index] = toupper((unsigned char )ch);
 8000700:	210a      	movs	r1, #10
 8000702:	187b      	adds	r3, r7, r1
 8000704:	193a      	adds	r2, r7, r4
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	187b      	adds	r3, r7, r1
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <accumulate_line+0xf8>)
 8000712:	18d3      	adds	r3, r2, r3
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	001a      	movs	r2, r3
 8000718:	2303      	movs	r3, #3
 800071a:	4013      	ands	r3, r2
 800071c:	2b02      	cmp	r3, #2
 800071e:	d103      	bne.n	8000728 <accumulate_line+0xc8>
 8000720:	187b      	adds	r3, r7, r1
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3b20      	subs	r3, #32
 8000726:	e002      	b.n	800072e <accumulate_line+0xce>
 8000728:	230a      	movs	r3, #10
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	188a      	adds	r2, r1, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	7013      	strb	r3, [r2, #0]
				index++;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
				break;
 800073e:	e002      	b.n	8000746 <accumulate_line+0xe6>
				break;
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	e794      	b.n	800066e <accumulate_line+0xe>
				break;
 8000744:	46c0      	nop			@ (mov r8, r8)
		ch = getchar();
 8000746:	e792      	b.n	800066e <accumulate_line+0xe>
			}
		}
	}
}
 8000748:	46bd      	mov	sp, r7
 800074a:	b005      	add	sp, #20
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	08002c7c 	.word	0x08002c7c
 8000754:	08002c80 	.word	0x08002c80
 8000758:	08002e94 	.word	0x08002e94

0800075c <tokenize_line>:
 *   max capacity of argument count buffer
 *
 * Returns:
 *   None.
 */
int tokenize_line(char *line, char *argv[], int max_tokens) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	int argc = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
	char *token = strtok(line, " ");
 800076c:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <tokenize_line+0x58>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fa6a 	bl	8001c4c <strtok>
 8000778:	0003      	movs	r3, r0
 800077a:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 800077c:	e00e      	b.n	800079c <tokenize_line+0x40>
		argv[argc++] = token;
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	617a      	str	r2, [r7, #20]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	601a      	str	r2, [r3, #0]
		token = strtok(NULL, " ");
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <tokenize_line+0x58>)
 8000790:	0019      	movs	r1, r3
 8000792:	2000      	movs	r0, #0
 8000794:	f001 fa5a 	bl	8001c4c <strtok>
 8000798:	0003      	movs	r3, r0
 800079a:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d003      	beq.n	80007aa <tokenize_line+0x4e>
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dbe9      	blt.n	800077e <tokenize_line+0x22>
	}
	return argc;
 80007aa:	697b      	ldr	r3, [r7, #20]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b006      	add	sp, #24
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	08002c84 	.word	0x08002c84

080007b8 <process_command>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void process_command(int argc, char *argv[]) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	if (argc == 0) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d104      	bne.n	80007d2 <process_command+0x1a>
		printf("\nNo command provided\n");
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <process_command+0x70>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 f85e 	bl	800188c <puts>
		return;
 80007d0:	e027      	b.n	8000822 <process_command+0x6a>
	}
	for (int i = 0; i < num_commands; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e018      	b.n	800080a <process_command+0x52>
		if (strcasecmp(argv[0], commands[i].name) == 0) {
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <process_command+0x74>)
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	00d2      	lsls	r2, r2, #3
 80007e2:	58d3      	ldr	r3, [r2, r3]
 80007e4:	0019      	movs	r1, r3
 80007e6:	f001 fa05 	bl	8001bf4 <strcasecmp>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d10a      	bne.n	8000804 <process_command+0x4c>
			commands[i].handler(argc, argv);
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <process_command+0x74>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	3304      	adds	r3, #4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	0010      	movs	r0, r2
 8000800:	4798      	blx	r3
			return;
 8000802:	e00e      	b.n	8000822 <process_command+0x6a>
	for (int i = 0; i < num_commands; i++) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <process_command+0x78>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbe1      	blt.n	80007d8 <process_command+0x20>
		}
	}
	printf("\nUnknown command: %s\n", argv[0]);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <process_command+0x7c>)
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f000 ffc5 	bl	80017ac <iprintf>
}
 8000822:	46bd      	mov	sp, r7
 8000824:	b004      	add	sp, #16
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08002c88 	.word	0x08002c88
 800082c:	08002e58 	.word	0x08002e58
 8000830:	08002e80 	.word	0x08002e80
 8000834:	08002ca0 	.word	0x08002ca0

08000838 <USART2_IRQHandler>:

#include "global.h"
#include <stdbool.h>

void USART2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	// Check if RXNE flag is set (data received)
	if (USART2->ISR & USART_ISR_RXNE)
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	2220      	movs	r2, #32
 8000844:	4013      	ands	r3, r2
 8000846:	d00b      	beq.n	8000860 <USART2_IRQHandler+0x28>
	{
		char newval = USART2->RDR; // Read the received character
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <USART2_IRQHandler+0x84>)
 800084a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800084c:	b29b      	uxth	r3, r3
 800084e:	b2da      	uxtb	r2, r3
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	701a      	strb	r2, [r3, #0]
		cbfifo_enqueue(&fiforx,&newval,sizeof(newval));
 8000854:	1df9      	adds	r1, r7, #7
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <USART2_IRQHandler+0x88>)
 8000858:	2201      	movs	r2, #1
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff fd09 	bl	8000272 <cbfifo_enqueue>
	}
	if (USART2->ISR & USART_ISR_TXE)
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	4013      	ands	r3, r2
 8000868:	d023      	beq.n	80008b2 <USART2_IRQHandler+0x7a>
	{
		char newval; // Read the received character
		if(cbfifo_dequeue(&fifotx,&newval,sizeof(newval))>0)
 800086a:	1db9      	adds	r1, r7, #6
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <USART2_IRQHandler+0x8c>)
 800086e:	2201      	movs	r2, #1
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff fd4d 	bl	8000310 <cbfifo_dequeue>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d015      	beq.n	80008a6 <USART2_IRQHandler+0x6e>
		{
			 if (newval == '\n')
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b0a      	cmp	r3, #10
 8000880:	d10c      	bne.n	800089c <USART2_IRQHandler+0x64>
			 {
	                USART2->TDR = '\r';
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000884:	220d      	movs	r2, #13
 8000886:	851a      	strh	r2, [r3, #40]	@ 0x28
	                while (!(USART2->ISR & USART_ISR_TXE));
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <USART2_IRQHandler+0x84>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	4013      	ands	r3, r2
 8000892:	d0fa      	beq.n	800088a <USART2_IRQHandler+0x52>
	                USART2->TDR = '\n';
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000896:	220a      	movs	r2, #10
 8000898:	851a      	strh	r2, [r3, #40]	@ 0x28
		else
		{
			USART2->CR1 &= (~(USART_CR1_TXEIE));
		}
	}
}
 800089a:	e00a      	b.n	80008b2 <USART2_IRQHandler+0x7a>
				 USART2->TDR = newval; // Send the character
 800089c:	1dbb      	adds	r3, r7, #6
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <USART2_IRQHandler+0x84>)
 80008a2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80008a4:	e005      	b.n	80008b2 <USART2_IRQHandler+0x7a>
			USART2->CR1 &= (~(USART_CR1_TXEIE));
 80008a6:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <USART2_IRQHandler+0x84>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <USART2_IRQHandler+0x84>)
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	438a      	bics	r2, r1
 80008b0:	601a      	str	r2, [r3, #0]
}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	40004400 	.word	0x40004400
 80008c0:	20000108 	.word	0x20000108
 80008c4:	2000007c 	.word	0x2000007c

080008c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008da:	d809      	bhi.n	80008f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	001a      	movs	r2, r3
 80008e2:	231f      	movs	r3, #31
 80008e4:	401a      	ands	r2, r3
 80008e6:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <__NVIC_EnableIRQ+0x30>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	4091      	lsls	r1, r2
 80008ec:	000a      	movs	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	e000e100 	.word	0xe000e100

080008fc <uart_init>:
 *      Author: Abhishek Nadgir
 */

#include "init_functions.h"

void uart_init(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 8000900:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <uart_init+0xb0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6898      	ldr	r0, [r3, #8]
 8000906:	2300      	movs	r3, #0
 8000908:	2202      	movs	r2, #2
 800090a:	2100      	movs	r1, #0
 800090c:	f000 ffc8 	bl	80018a0 <setvbuf>
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable GPIOA clock
 8000910:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <uart_init+0xb4>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <uart_init+0xb4>)
 8000916:	2180      	movs	r1, #128	@ 0x80
 8000918:	0289      	lsls	r1, r1, #10
 800091a:	430a      	orrs	r2, r1
 800091c:	615a      	str	r2, [r3, #20]
	// Set PA2 (TX) and PA3 (RX) to alternate function mode (AF7 for USART2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);			// Clear
 800091e:	2390      	movs	r3, #144	@ 0x90
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	2390      	movs	r3, #144	@ 0x90
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	21f0      	movs	r1, #240	@ 0xf0
 800092a:	438a      	bics	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);// Set AF mode
 800092e:	2390      	movs	r3, #144	@ 0x90
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2390      	movs	r3, #144	@ 0x90
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	21a0      	movs	r1, #160	@ 0xa0
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos) | (1 << GPIO_AFRL_AFSEL3_Pos); // AF7 (USART2) for PA2 and PA3
 800093e:	2390      	movs	r3, #144	@ 0x90
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	6a1a      	ldr	r2, [r3, #32]
 8000944:	2390      	movs	r3, #144	@ 0x90
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	2188      	movs	r1, #136	@ 0x88
 800094a:	0149      	lsls	r1, r1, #5
 800094c:	430a      	orrs	r2, r1
 800094e:	621a      	str	r2, [r3, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;				// Enable USART2 clock
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <uart_init+0xb4>)
 8000952:	69da      	ldr	r2, [r3, #28]
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <uart_init+0xb4>)
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	0289      	lsls	r1, r1, #10
 800095a:	430a      	orrs	r2, r1
 800095c:	61da      	str	r2, [r3, #28]
	USART2->BRR = USART_BRR_VALUE;// Configure baud rate (assuming 24MHz APB1 clock and 19200 baud rate)
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <uart_init+0xb8>)
 8000960:	4a15      	ldr	r2, [pc, #84]	@ (80009b8 <uart_init+0xbc>)
 8000962:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE; // Enable TX, RX, and RX interrupt
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <uart_init+0xb8>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <uart_init+0xb8>)
 800096a:	212c      	movs	r1, #44	@ 0x2c
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_PARITY_CONFIG;
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <uart_init+0xb8>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <uart_init+0xb8>)
 8000976:	21c0      	movs	r1, #192	@ 0xc0
 8000978:	00c9      	lsls	r1, r1, #3
 800097a:	430a      	orrs	r2, r1
 800097c:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_WORD_LENGTH;
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <uart_init+0xb8>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <uart_init+0xb8>)
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	0149      	lsls	r1, r1, #5
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
	USART2->CR2 |= USART_STOP_BITS;
 800098c:	4a09      	ldr	r2, [pc, #36]	@ (80009b4 <uart_init+0xb8>)
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <uart_init+0xb8>)
 8000990:	6852      	ldr	r2, [r2, #4]
 8000992:	605a      	str	r2, [r3, #4]
	USART2->CR1 |= USART_CR1_UE;								// Enable USART
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <uart_init+0xb8>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <uart_init+0xb8>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);			// Enable USART2 interrupt in NVIC
 80009a0:	201c      	movs	r0, #28
 80009a2:	f7ff ff91 	bl	80008c8 <__NVIC_EnableIRQ>
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000010 	.word	0x20000010
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40004400 	.word	0x40004400
 80009b8:	000004e2 	.word	0x000004e2

080009bc <init_uled>:

void init_uled(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <init_uled+0x30>)
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <init_uled+0x30>)
 80009c6:	2180      	movs	r1, #128	@ 0x80
 80009c8:	0289      	lsls	r1, r1, #10
 80009ca:	430a      	orrs	r2, r1
 80009cc:	615a      	str	r2, [r3, #20]
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER5, ESF_GPIO_MODER_OUTPUT);
 80009ce:	2390      	movs	r3, #144	@ 0x90
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a06      	ldr	r2, [pc, #24]	@ (80009f0 <init_uled+0x34>)
 80009d6:	401a      	ands	r2, r3
 80009d8:	2390      	movs	r3, #144	@ 0x90
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	2180      	movs	r1, #128	@ 0x80
 80009de:	00c9      	lsls	r1, r1, #3
 80009e0:	430a      	orrs	r2, r1
 80009e2:	601a      	str	r2, [r3, #0]

}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	40021000 	.word	0x40021000
 80009f0:	fffff3ff 	.word	0xfffff3ff

080009f4 <main>:
 ******************************************************************************
 */
// Reference USed: Lecture Presentation Slides utilised for Command table and Command processing
#include "main.h"
#include "spi.h"
int main(void) {
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	4c1b      	ldr	r4, [pc, #108]	@ (8000a64 <main+0x70>)
 80009f8:	44a5      	add	sp, r4
 80009fa:	af00      	add	r7, sp, #0
	/*
	 * Clocks: Processor = 48 Mhz. AHB = 48 MHz. APB = 24 MHz.
	 *
	 */
	init_uled(); //On board LED Initialisation
 80009fc:	f7ff ffde 	bl	80009bc <init_uled>
	uart_init(); //UART 2 Initialisation for Serial COmmunication
 8000a00:	f7ff ff7c 	bl	80008fc <uart_init>
	cbfifo_init(&fiforx); // Initialising RX Buffer
 8000a04:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <main+0x74>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fc1c 	bl	8000244 <cbfifo_init>
	cbfifo_init(&fifotx); // Initialising TX buffer
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <main+0x78>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fc18 	bl	8000244 <cbfifo_init>
	char inputval[INPUT_BUFFER_SIZE]; // Defining a buffer to accept the command and Process
	char *argv[ARGUMENT_BUFFER_SIZE]; // Defining a buffer to store Argument Vectors after tokenization
	int argc; //TO store Argument COunt
	printf("\nWelcome to SerialIO!\n");
 8000a14:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <main+0x7c>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 ff38 	bl	800188c <puts>
	IO_Init();
 8000a1c:	f000 f82c 	bl	8000a78 <IO_Init>
	SPI_Init();
 8000a20:	f000 f894 	bl	8000b4c <SPI_Init>
	while (1) {
		printf("\n$$ ");
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <main+0x80>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fec0 	bl	80017ac <iprintf>
		accumulate_line(inputval, INPUT_BUFFER_SIZE); //Takes character from Serial Terminal
 8000a2c:	2481      	movs	r4, #129	@ 0x81
 8000a2e:	00a4      	lsls	r4, r4, #2
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2180      	movs	r1, #128	@ 0x80
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff fe13 	bl	8000660 <accumulate_line>
		argc = tokenize_line(inputval, argv, ARGUMENT_BUFFER_SIZE); // Takes array of string as input and returs Number of Arguments and buffer of argument vector
 8000a3a:	1d39      	adds	r1, r7, #4
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2280      	movs	r2, #128	@ 0x80
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fe8b 	bl	800075c <tokenize_line>
 8000a46:	0003      	movs	r3, r0
 8000a48:	21a1      	movs	r1, #161	@ 0xa1
 8000a4a:	0089      	lsls	r1, r1, #2
 8000a4c:	187a      	adds	r2, r7, r1
 8000a4e:	6013      	str	r3, [r2, #0]
		process_command(argc, argv); // Takes argument count and vector as input and processes the command accordingly
 8000a50:	1d3a      	adds	r2, r7, #4
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fead 	bl	80007b8 <process_command>
		printf("\n$$ ");
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	e7e0      	b.n	8000a24 <main+0x30>
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	fffffd74 	.word	0xfffffd74
 8000a68:	20000108 	.word	0x20000108
 8000a6c:	2000007c 	.word	0x2000007c
 8000a70:	08002cb8 	.word	0x08002cb8
 8000a74:	08002cd0 	.word	0x08002cd0

08000a78 <IO_Init>:
 *      Author: nadgi
 */

#include "spi.h"

void IO_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    // Enable GPIO clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable GPIOA clock
 8000a7c:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <IO_Init+0x90>)
 8000a7e:	695a      	ldr	r2, [r3, #20]
 8000a80:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <IO_Init+0x90>)
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	0289      	lsls	r1, r1, #10
 8000a86:	430a      	orrs	r2, r1
 8000a88:	615a      	str	r2, [r3, #20]

    // Configure GPIO pins for SPI (PA5: SCK, PA6: MISO, PA7: MOSI, PA9: CS)
    GPIOA->MODER &= ~(GPIO_MODER_MODER5 | GPIO_MODER_MODER6 | GPIO_MODER_MODER7 | GPIO_MODER_MODER9);
 8000a8a:	2390      	movs	r3, #144	@ 0x90
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	2390      	movs	r3, #144	@ 0x90
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	491d      	ldr	r1, [pc, #116]	@ (8000b0c <IO_Init+0x94>)
 8000a96:	400a      	ands	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1; // Alternate function mode for SPI
 8000a9a:	2390      	movs	r3, #144	@ 0x90
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	2390      	movs	r3, #144	@ 0x90
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	21a8      	movs	r1, #168	@ 0xa8
 8000aa6:	0209      	lsls	r1, r1, #8
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= GPIO_MODER_MODER9_0; // PA9 as output for CS
 8000aac:	2390      	movs	r3, #144	@ 0x90
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	2390      	movs	r3, #144	@ 0x90
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	2180      	movs	r1, #128	@ 0x80
 8000ab8:	02c9      	lsls	r1, r1, #11
 8000aba:	430a      	orrs	r2, r1
 8000abc:	601a      	str	r2, [r3, #0]

    GPIOA->AFR[0] |= (0x0 << GPIO_AFRL_AFSEL5_Pos) | // AF0 for SCK
 8000abe:	2390      	movs	r3, #144	@ 0x90
 8000ac0:	05da      	lsls	r2, r3, #23
 8000ac2:	2390      	movs	r3, #144	@ 0x90
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	6a12      	ldr	r2, [r2, #32]
 8000ac8:	621a      	str	r2, [r3, #32]
                     (0x0 << GPIO_AFRL_AFSEL6_Pos) | // AF0 for MISO
                     (0x0 << GPIO_AFRL_AFSEL7_Pos);  // AF0 for MOSI

    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR5 | GPIO_OSPEEDR_OSPEEDR6 | GPIO_OSPEEDR_OSPEEDR7; // High speed for SPI
 8000aca:	2390      	movs	r3, #144	@ 0x90
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	2390      	movs	r3, #144	@ 0x90
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	21fc      	movs	r1, #252	@ 0xfc
 8000ad6:	0209      	lsls	r1, r1, #8
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	609a      	str	r2, [r3, #8]
    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR9; // High speed for CS
 8000adc:	2390      	movs	r3, #144	@ 0x90
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	2390      	movs	r3, #144	@ 0x90
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	21c0      	movs	r1, #192	@ 0xc0
 8000ae8:	0309      	lsls	r1, r1, #12
 8000aea:	430a      	orrs	r2, r1
 8000aec:	609a      	str	r2, [r3, #8]

    GPIOA->ODR |= GPIO_ODR_9; // Default CS high
 8000aee:	2390      	movs	r3, #144	@ 0x90
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	2390      	movs	r3, #144	@ 0x90
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	0089      	lsls	r1, r1, #2
 8000afc:	430a      	orrs	r2, r1
 8000afe:	615a      	str	r2, [r3, #20]
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	fff303ff 	.word	0xfff303ff

08000b10 <CS_Select>:

void CS_Select(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~GPIO_ODR_9; // Set CS low
 8000b14:	2390      	movs	r3, #144	@ 0x90
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	2390      	movs	r3, #144	@ 0x90
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	4903      	ldr	r1, [pc, #12]	@ (8000b2c <CS_Select+0x1c>)
 8000b20:	400a      	ands	r2, r1
 8000b22:	615a      	str	r2, [r3, #20]
}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	fffffdff 	.word	0xfffffdff

08000b30 <CS_Deselect>:

void CS_Deselect(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    GPIOA->ODR |= GPIO_ODR_9; // Set CS high
 8000b34:	2390      	movs	r3, #144	@ 0x90
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	2390      	movs	r3, #144	@ 0x90
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	2180      	movs	r1, #128	@ 0x80
 8000b40:	0089      	lsls	r1, r1, #2
 8000b42:	430a      	orrs	r2, r1
 8000b44:	615a      	str	r2, [r3, #20]
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <SPI_Init>:


void SPI_Init(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    // Enable SPI clock
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <SPI_Init+0x40>)
 8000b52:	699a      	ldr	r2, [r3, #24]
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <SPI_Init+0x40>)
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	0149      	lsls	r1, r1, #5
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	619a      	str	r2, [r3, #24]
    SPI1->CR2 |= (1<<8)|(1<<9)|(1<<10)|(0<<11);
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <SPI_Init+0x44>)
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <SPI_Init+0x44>)
 8000b64:	21e0      	movs	r1, #224	@ 0xe0
 8000b66:	00c9      	lsls	r1, r1, #3
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	605a      	str	r2, [r3, #4]
    // Configure SPI1: Master mode, full-duplex
    SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BR_0; // Baud rate: fPCLK/4, software NSS
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <SPI_Init+0x44>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <SPI_Init+0x44>)
 8000b72:	21c3      	movs	r1, #195	@ 0xc3
 8000b74:	0089      	lsls	r1, r1, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_SPE; // Enable SPI
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <SPI_Init+0x44>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <SPI_Init+0x44>)
 8000b80:	2140      	movs	r1, #64	@ 0x40
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40013000 	.word	0x40013000

08000b94 <SPI_Write>:

void SPI_Write(uint8_t *data, uint16_t size) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	000a      	movs	r2, r1
 8000b9e:	1cbb      	adds	r3, r7, #2
 8000ba0:	801a      	strh	r2, [r3, #0]
    CS_Select(); // Activate the slave
 8000ba2:	f7ff ffb5 	bl	8000b10 <CS_Select>
    for (uint16_t i = 0; i < size; i++) {
 8000ba6:	230e      	movs	r3, #14
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	2200      	movs	r2, #0
 8000bac:	801a      	strh	r2, [r3, #0]
 8000bae:	e016      	b.n	8000bde <SPI_Write+0x4a>
//        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
//        SPI1->DR = data[i]; // Send data

        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8000ce4 <SPI_Write+0x150>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d0fa      	beq.n	8000bb2 <SPI_Write+0x1e>
        SPI1->DR = 0x025f; // Send data
 8000bbc:	4b49      	ldr	r3, [pc, #292]	@ (8000ce4 <SPI_Write+0x150>)
 8000bbe:	4a4a      	ldr	r2, [pc, #296]	@ (8000ce8 <SPI_Write+0x154>)
 8000bc0:	60da      	str	r2, [r3, #12]
        //while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
        //SPI1->DR = 0x02; // Send data

        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait for RX buffer
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	4b47      	ldr	r3, [pc, #284]	@ (8000ce4 <SPI_Write+0x150>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d0fa      	beq.n	8000bc4 <SPI_Write+0x30>
        (void)SPI1->DR; // Read and discard to clear RXNE
 8000bce:	4b45      	ldr	r3, [pc, #276]	@ (8000ce4 <SPI_Write+0x150>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
    for (uint16_t i = 0; i < size; i++) {
 8000bd2:	210e      	movs	r1, #14
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	881a      	ldrh	r2, [r3, #0]
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	3201      	adds	r2, #1
 8000bdc:	801a      	strh	r2, [r3, #0]
 8000bde:	230e      	movs	r3, #14
 8000be0:	18fa      	adds	r2, r7, r3
 8000be2:	1cbb      	adds	r3, r7, #2
 8000be4:	8812      	ldrh	r2, [r2, #0]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3e1      	bcc.n	8000bb0 <SPI_Write+0x1c>
    }
    CS_Deselect(); // Deactivate the slave
 8000bec:	f7ff ffa0 	bl	8000b30 <CS_Deselect>
    CS_Select(); // Activate the slave
 8000bf0:	f7ff ff8e 	bl	8000b10 <CS_Select>
    for (uint16_t i = 0; i < size; i++) {
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	801a      	strh	r2, [r3, #0]
 8000bfc:	e016      	b.n	8000c2c <SPI_Write+0x98>
//        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
//        SPI1->DR = data[i]; // Send data

        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	4b38      	ldr	r3, [pc, #224]	@ (8000ce4 <SPI_Write+0x150>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	2202      	movs	r2, #2
 8000c06:	4013      	ands	r3, r2
 8000c08:	d0fa      	beq.n	8000c00 <SPI_Write+0x6c>
        SPI1->DR = 0x1454; // Send data
 8000c0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ce4 <SPI_Write+0x150>)
 8000c0c:	4a37      	ldr	r2, [pc, #220]	@ (8000cec <SPI_Write+0x158>)
 8000c0e:	60da      	str	r2, [r3, #12]
        //while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
        //SPI1->DR = 0x02; // Send data

        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait for RX buffer
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	4b34      	ldr	r3, [pc, #208]	@ (8000ce4 <SPI_Write+0x150>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2201      	movs	r2, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d0fa      	beq.n	8000c12 <SPI_Write+0x7e>
        (void)SPI1->DR; // Read and discard to clear RXNE
 8000c1c:	4b31      	ldr	r3, [pc, #196]	@ (8000ce4 <SPI_Write+0x150>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
    for (uint16_t i = 0; i < size; i++) {
 8000c20:	210c      	movs	r1, #12
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	881a      	ldrh	r2, [r3, #0]
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	3201      	adds	r2, #1
 8000c2a:	801a      	strh	r2, [r3, #0]
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	18fa      	adds	r2, r7, r3
 8000c30:	1cbb      	adds	r3, r7, #2
 8000c32:	8812      	ldrh	r2, [r2, #0]
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d3e1      	bcc.n	8000bfe <SPI_Write+0x6a>
    }
    CS_Deselect(); // Deactivate the slave
 8000c3a:	f7ff ff79 	bl	8000b30 <CS_Deselect>
    CS_Select(); // Activate the slave
 8000c3e:	f7ff ff67 	bl	8000b10 <CS_Select>
    for (uint16_t i = 0; i < size; i++) {
 8000c42:	230a      	movs	r3, #10
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	2200      	movs	r2, #0
 8000c48:	801a      	strh	r2, [r3, #0]
 8000c4a:	e016      	b.n	8000c7a <SPI_Write+0xe6>
//        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
//        SPI1->DR = data[i]; // Send data

        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
 8000c4c:	46c0      	nop			@ (mov r8, r8)
 8000c4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ce4 <SPI_Write+0x150>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2202      	movs	r2, #2
 8000c54:	4013      	ands	r3, r2
 8000c56:	d0fa      	beq.n	8000c4e <SPI_Write+0xba>
        SPI1->DR = 0xA856; // Send data
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <SPI_Write+0x150>)
 8000c5a:	4a25      	ldr	r2, [pc, #148]	@ (8000cf0 <SPI_Write+0x15c>)
 8000c5c:	60da      	str	r2, [r3, #12]
        //while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
        //SPI1->DR = 0x02; // Send data

        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait for RX buffer
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <SPI_Write+0x150>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	2201      	movs	r2, #1
 8000c66:	4013      	ands	r3, r2
 8000c68:	d0fa      	beq.n	8000c60 <SPI_Write+0xcc>
        (void)SPI1->DR; // Read and discard to clear RXNE
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <SPI_Write+0x150>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
    for (uint16_t i = 0; i < size; i++) {
 8000c6e:	210a      	movs	r1, #10
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	881a      	ldrh	r2, [r3, #0]
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	3201      	adds	r2, #1
 8000c78:	801a      	strh	r2, [r3, #0]
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	18fa      	adds	r2, r7, r3
 8000c7e:	1cbb      	adds	r3, r7, #2
 8000c80:	8812      	ldrh	r2, [r2, #0]
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3e1      	bcc.n	8000c4c <SPI_Write+0xb8>
    }
    CS_Deselect(); // Deactivate the slave
 8000c88:	f7ff ff52 	bl	8000b30 <CS_Deselect>
    CS_Select(); // Activate the slave
 8000c8c:	f7ff ff40 	bl	8000b10 <CS_Select>
    for (uint16_t i = 0; i < size; i++) {
 8000c90:	2308      	movs	r3, #8
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	801a      	strh	r2, [r3, #0]
 8000c98:	e016      	b.n	8000cc8 <SPI_Write+0x134>
//        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
//        SPI1->DR = data[i]; // Send data

        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <SPI_Write+0x150>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	d0fa      	beq.n	8000c9c <SPI_Write+0x108>
        SPI1->DR = 0x3A57; // Send data
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <SPI_Write+0x150>)
 8000ca8:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <SPI_Write+0x160>)
 8000caa:	60da      	str	r2, [r3, #12]
        //while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
        //SPI1->DR = 0x02; // Send data

        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait for RX buffer
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <SPI_Write+0x150>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d0fa      	beq.n	8000cae <SPI_Write+0x11a>
        (void)SPI1->DR; // Read and discard to clear RXNE
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <SPI_Write+0x150>)
 8000cba:	68db      	ldr	r3, [r3, #12]
    for (uint16_t i = 0; i < size; i++) {
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	3201      	adds	r2, #1
 8000cc6:	801a      	strh	r2, [r3, #0]
 8000cc8:	2308      	movs	r3, #8
 8000cca:	18fa      	adds	r2, r7, r3
 8000ccc:	1cbb      	adds	r3, r7, #2
 8000cce:	8812      	ldrh	r2, [r2, #0]
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d3e1      	bcc.n	8000c9a <SPI_Write+0x106>
    }
    CS_Deselect(); // Deactivate the slave
 8000cd6:	f7ff ff2b 	bl	8000b30 <CS_Deselect>
}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	40013000 	.word	0x40013000
 8000ce8:	0000025f 	.word	0x0000025f
 8000cec:	00001454 	.word	0x00001454
 8000cf0:	0000a856 	.word	0x0000a856
 8000cf4:	00003a57 	.word	0x00003a57

08000cf8 <cmd_spi_write>:


void cmd_spi_write(int argc, char *argv[]) {
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	b08f      	sub	sp, #60	@ 0x3c
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	61f8      	str	r0, [r7, #28]
 8000d00:	61b9      	str	r1, [r7, #24]
 8000d02:	466b      	mov	r3, sp
 8000d04:	001e      	movs	r6, r3
    if (argc < 3) {
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	dc04      	bgt.n	8000d16 <cmd_spi_write+0x1e>
        printf("\nInvalid command: WRITE requires number of bytes and data\n");
 8000d0c:	4b44      	ldr	r3, [pc, #272]	@ (8000e20 <cmd_spi_write+0x128>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 fdbc 	bl	800188c <puts>
        return;
 8000d14:	e080      	b.n	8000e18 <cmd_spi_write+0x120>
    }

    // Parse the number of bytes to send
    int num_bytes = atoi(argv[1]);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 fbdb 	bl	80014d8 <atoi>
 8000d22:	0003      	movs	r3, r0
 8000d24:	633b      	str	r3, [r7, #48]	@ 0x30
    if (num_bytes <= 0 || argc != (num_bytes + 2)) {
 8000d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dd04      	ble.n	8000d36 <cmd_spi_write+0x3e>
 8000d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d2e:	3302      	adds	r3, #2
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d004      	beq.n	8000d40 <cmd_spi_write+0x48>
        printf("\nInvalid command: Incorrect number of data arguments\n");
 8000d36:	4b3b      	ldr	r3, [pc, #236]	@ (8000e24 <cmd_spi_write+0x12c>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fda7 	bl	800188c <puts>
        return;
 8000d3e:	e06b      	b.n	8000e18 <cmd_spi_write+0x120>
    }

    uint8_t data[num_bytes];
 8000d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000d46:	001a      	movs	r2, r3
 8000d48:	0014      	movs	r4, r2
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	0015      	movs	r5, r2
 8000d4e:	0020      	movs	r0, r4
 8000d50:	0029      	movs	r1, r5
 8000d52:	0002      	movs	r2, r0
 8000d54:	0f52      	lsrs	r2, r2, #29
 8000d56:	000c      	movs	r4, r1
 8000d58:	00e4      	lsls	r4, r4, #3
 8000d5a:	617c      	str	r4, [r7, #20]
 8000d5c:	697c      	ldr	r4, [r7, #20]
 8000d5e:	4314      	orrs	r4, r2
 8000d60:	617c      	str	r4, [r7, #20]
 8000d62:	0002      	movs	r2, r0
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	613a      	str	r2, [r7, #16]
 8000d68:	001a      	movs	r2, r3
 8000d6a:	603a      	str	r2, [r7, #0]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	0002      	movs	r2, r0
 8000d76:	0f52      	lsrs	r2, r2, #29
 8000d78:	000c      	movs	r4, r1
 8000d7a:	00e4      	lsls	r4, r4, #3
 8000d7c:	60fc      	str	r4, [r7, #12]
 8000d7e:	68fc      	ldr	r4, [r7, #12]
 8000d80:	4314      	orrs	r4, r2
 8000d82:	60fc      	str	r4, [r7, #12]
 8000d84:	0002      	movs	r2, r0
 8000d86:	00d2      	lsls	r2, r2, #3
 8000d88:	60ba      	str	r2, [r7, #8]
 8000d8a:	3307      	adds	r3, #7
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	466a      	mov	r2, sp
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	469d      	mov	sp, r3
 8000d96:	466b      	mov	r3, sp
 8000d98:	3300      	adds	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < num_bytes; i++) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000da0:	e027      	b.n	8000df2 <cmd_spi_write+0xfa>
        char *endptr;
        data[i] = (uint8_t)strtol(argv[i + 2], &endptr, 16); // Convert each byte to hex
 8000da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da4:	3302      	adds	r3, #2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	18d3      	adds	r3, r2, r3
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	220c      	movs	r2, #12
 8000db0:	2118      	movs	r1, #24
 8000db2:	1852      	adds	r2, r2, r1
 8000db4:	19d1      	adds	r1, r2, r7
 8000db6:	2210      	movs	r2, #16
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fc1d 	bl	80015f8 <strtol>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	b2d9      	uxtb	r1, r3
 8000dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dc6:	18d3      	adds	r3, r2, r3
 8000dc8:	1c0a      	adds	r2, r1, #0
 8000dca:	701a      	strb	r2, [r3, #0]
        if (*endptr != '\0') { // Check for invalid input
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00b      	beq.n	8000dec <cmd_spi_write+0xf4>
            printf("\nInvalid data: %s is not a valid hex value\n", argv[i + 2]);
 8000dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	18d3      	adds	r3, r2, r3
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <cmd_spi_write+0x130>)
 8000de2:	0011      	movs	r1, r2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 fce1 	bl	80017ac <iprintf>
 8000dea:	e015      	b.n	8000e18 <cmd_spi_write+0x120>
    for (int i = 0; i < num_bytes; i++) {
 8000dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dee:	3301      	adds	r3, #1
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000df2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000df6:	429a      	cmp	r2, r3
 8000df8:	dbd3      	blt.n	8000da2 <cmd_spi_write+0xaa>
            return;
        }
    }

    // Perform SPI write operation
    SPI_Write(data, num_bytes);
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fec6 	bl	8000b94 <SPI_Write>

    printf("\nSPI Write Completed: Sent %d bytes\n", num_bytes);
 8000e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <cmd_spi_write+0x134>)
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 fccc 	bl	80017ac <iprintf>
 8000e14:	46b5      	mov	sp, r6
 8000e16:	e000      	b.n	8000e1a <cmd_spi_write+0x122>
        return;
 8000e18:	46b5      	mov	sp, r6
}
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b00f      	add	sp, #60	@ 0x3c
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e20:	08002cd8 	.word	0x08002cd8
 8000e24:	08002d14 	.word	0x08002d14
 8000e28:	08002d4c 	.word	0x08002d4c
 8000e2c:	08002d78 	.word	0x08002d78

08000e30 <SPI_Read>:
        printf("%02X ", buffer[i]);
    }
    printf("\n");
}
*/
void SPI_Read(uint8_t *buffer, uint16_t size, uint8_t *dummy_bytes) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	1c0a      	adds	r2, r1, #0
 8000e40:	801a      	strh	r2, [r3, #0]
    CS_Select(); // Activate the slave
 8000e42:	f7ff fe65 	bl	8000b10 <CS_Select>
    for (uint16_t i = 0; i < size; i++) {
 8000e46:	2316      	movs	r3, #22
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	801a      	strh	r2, [r3, #0]
 8000e4e:	e021      	b.n	8000e94 <SPI_Read+0x64>
        // Use the dummy byte specified by the user
        while (!(SPI1->SR & SPI_SR_TXE)); // Wait until TX buffer is empty
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <SPI_Read+0x80>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2202      	movs	r2, #2
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d0fa      	beq.n	8000e52 <SPI_Read+0x22>
        SPI1->DR = dummy_bytes[i]; // Send the dummy byte from the user
 8000e5c:	2316      	movs	r3, #22
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	18d3      	adds	r3, r2, r3
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <SPI_Read+0x80>)
 8000e6a:	60da      	str	r2, [r3, #12]

        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until RX buffer is full
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <SPI_Read+0x80>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	2201      	movs	r2, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	d0fa      	beq.n	8000e6e <SPI_Read+0x3e>
        buffer[i] = SPI1->DR; // Read data
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <SPI_Read+0x80>)
 8000e7a:	68d9      	ldr	r1, [r3, #12]
 8000e7c:	2016      	movs	r0, #22
 8000e7e:	183b      	adds	r3, r7, r0
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	18d3      	adds	r3, r2, r3
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 8000e8a:	183b      	adds	r3, r7, r0
 8000e8c:	881a      	ldrh	r2, [r3, #0]
 8000e8e:	183b      	adds	r3, r7, r0
 8000e90:	3201      	adds	r2, #1
 8000e92:	801a      	strh	r2, [r3, #0]
 8000e94:	2316      	movs	r3, #22
 8000e96:	18fa      	adds	r2, r7, r3
 8000e98:	230a      	movs	r3, #10
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	8812      	ldrh	r2, [r2, #0]
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d3d5      	bcc.n	8000e50 <SPI_Read+0x20>
    }
    CS_Deselect(); // Deactivate the slave
 8000ea4:	f7ff fe44 	bl	8000b30 <CS_Deselect>
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b006      	add	sp, #24
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40013000 	.word	0x40013000

08000eb4 <cmd_spi_read>:
void cmd_spi_read(int argc, char *argv[]) {
 8000eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb6:	b099      	sub	sp, #100	@ 0x64
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000ebc:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000ebe:	466b      	mov	r3, sp
 8000ec0:	001e      	movs	r6, r3
    if (argc < 2) {
 8000ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	dc04      	bgt.n	8000ed2 <cmd_spi_read+0x1e>
        printf("\nInvalid command: READ requires number of bytes to read\n");
 8000ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8001048 <cmd_spi_read+0x194>)
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 fcde 	bl	800188c <puts>
        return;
 8000ed0:	e0b6      	b.n	8001040 <cmd_spi_read+0x18c>
    }

    // Parse the number of bytes to read
    int num_bytes = atoi(argv[1]);
 8000ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 fafd 	bl	80014d8 <atoi>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	657b      	str	r3, [r7, #84]	@ 0x54
    if (num_bytes <= 0) {
 8000ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dc04      	bgt.n	8000ef2 <cmd_spi_read+0x3e>
        printf("\nInvalid number of bytes to read\n");
 8000ee8:	4b58      	ldr	r3, [pc, #352]	@ (800104c <cmd_spi_read+0x198>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fcce 	bl	800188c <puts>
        return;
 8000ef0:	e0a6      	b.n	8001040 <cmd_spi_read+0x18c>
    }

    if (argc != num_bytes + 2) {
 8000ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ef4:	1c9a      	adds	r2, r3, #2
 8000ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d004      	beq.n	8000f06 <cmd_spi_read+0x52>
        printf("\nInvalid number of dummy bytes specified\n");
 8000efc:	4b54      	ldr	r3, [pc, #336]	@ (8001050 <cmd_spi_read+0x19c>)
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fcc4 	bl	800188c <puts>
        return;
 8000f04:	e09c      	b.n	8001040 <cmd_spi_read+0x18c>
    }

    // Parse the dummy bytes from user input
    uint8_t dummy_bytes[num_bytes];
 8000f06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000f08:	1e53      	subs	r3, r2, #1
 8000f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
 8000f14:	69b8      	ldr	r0, [r7, #24]
 8000f16:	69f9      	ldr	r1, [r7, #28]
 8000f18:	0003      	movs	r3, r0
 8000f1a:	0f5b      	lsrs	r3, r3, #29
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	000b      	movs	r3, r1
 8000f20:	00dd      	lsls	r5, r3, #3
 8000f22:	4663      	mov	r3, ip
 8000f24:	431d      	orrs	r5, r3
 8000f26:	0003      	movs	r3, r0
 8000f28:	00dc      	lsls	r4, r3, #3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	6938      	ldr	r0, [r7, #16]
 8000f34:	6979      	ldr	r1, [r7, #20]
 8000f36:	0003      	movs	r3, r0
 8000f38:	0f5b      	lsrs	r3, r3, #29
 8000f3a:	000c      	movs	r4, r1
 8000f3c:	00e4      	lsls	r4, r4, #3
 8000f3e:	637c      	str	r4, [r7, #52]	@ 0x34
 8000f40:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8000f42:	431c      	orrs	r4, r3
 8000f44:	637c      	str	r4, [r7, #52]	@ 0x34
 8000f46:	0003      	movs	r3, r0
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	3307      	adds	r3, #7
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	466a      	mov	r2, sp
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	469d      	mov	sp, r3
 8000f5a:	466b      	mov	r3, sp
 8000f5c:	3300      	adds	r3, #0
 8000f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 0; i < num_bytes; i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f64:	e014      	b.n	8000f90 <cmd_spi_read+0xdc>
        dummy_bytes[i] = (uint8_t) strtol(argv[i + 2], NULL, 16); // Convert to hex
 8000f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f68:	3302      	adds	r3, #2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f6e:	18d3      	adds	r3, r2, r3
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2210      	movs	r2, #16
 8000f74:	2100      	movs	r1, #0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 fb3e 	bl	80015f8 <strtol>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	b2d9      	uxtb	r1, r3
 8000f80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	1c0a      	adds	r2, r1, #0
 8000f88:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_bytes; i++) {
 8000f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbe6      	blt.n	8000f66 <cmd_spi_read+0xb2>
    }

    uint8_t buffer[num_bytes];
 8000f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f9a:	1e5a      	subs	r2, r3, #1
 8000f9c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60fa      	str	r2, [r7, #12]
 8000fa6:	68b8      	ldr	r0, [r7, #8]
 8000fa8:	68f9      	ldr	r1, [r7, #12]
 8000faa:	0002      	movs	r2, r0
 8000fac:	0f52      	lsrs	r2, r2, #29
 8000fae:	000c      	movs	r4, r1
 8000fb0:	00e4      	lsls	r4, r4, #3
 8000fb2:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8000fb4:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8000fb6:	4314      	orrs	r4, r2
 8000fb8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8000fba:	0002      	movs	r2, r0
 8000fbc:	00d2      	lsls	r2, r2, #3
 8000fbe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	603a      	str	r2, [r7, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	0002      	movs	r2, r0
 8000fce:	0f52      	lsrs	r2, r2, #29
 8000fd0:	000c      	movs	r4, r1
 8000fd2:	00e4      	lsls	r4, r4, #3
 8000fd4:	627c      	str	r4, [r7, #36]	@ 0x24
 8000fd6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8000fd8:	4314      	orrs	r4, r2
 8000fda:	627c      	str	r4, [r7, #36]	@ 0x24
 8000fdc:	0002      	movs	r2, r0
 8000fde:	00d2      	lsls	r2, r2, #3
 8000fe0:	623a      	str	r2, [r7, #32]
 8000fe2:	3307      	adds	r3, #7
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	466a      	mov	r2, sp
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	469d      	mov	sp, r3
 8000fee:	466b      	mov	r3, sp
 8000ff0:	3300      	adds	r3, #0
 8000ff2:	647b      	str	r3, [r7, #68]	@ 0x44
    SPI_Read(buffer, num_bytes, dummy_bytes);
 8000ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ff6:	b299      	uxth	r1, r3
 8000ff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff17 	bl	8000e30 <SPI_Read>

    // Display the read data
    printf("\nSPI Read Completed: Received %d bytes\n", num_bytes);
 8001002:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <cmd_spi_read+0x1a0>)
 8001006:	0011      	movs	r1, r2
 8001008:	0018      	movs	r0, r3
 800100a:	f000 fbcf 	bl	80017ac <iprintf>
    for (int i = 0; i < num_bytes; i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001012:	e00c      	b.n	800102e <cmd_spi_read+0x17a>
        printf("%02X ", buffer[i]);
 8001014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001018:	18d3      	adds	r3, r2, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	001a      	movs	r2, r3
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <cmd_spi_read+0x1a4>)
 8001020:	0011      	movs	r1, r2
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fbc2 	bl	80017ac <iprintf>
    for (int i = 0; i < num_bytes; i++) {
 8001028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800102a:	3301      	adds	r3, #1
 800102c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800102e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001032:	429a      	cmp	r2, r3
 8001034:	dbee      	blt.n	8001014 <cmd_spi_read+0x160>
    }
    printf("\n");
 8001036:	200a      	movs	r0, #10
 8001038:	f000 fbc8 	bl	80017cc <putchar>
 800103c:	46b5      	mov	sp, r6
 800103e:	e000      	b.n	8001042 <cmd_spi_read+0x18e>
        return;
 8001040:	46b5      	mov	sp, r6
}
 8001042:	46bd      	mov	sp, r7
 8001044:	b019      	add	sp, #100	@ 0x64
 8001046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001048:	08002da0 	.word	0x08002da0
 800104c:	08002dd8 	.word	0x08002dd8
 8001050:	08002dfc 	.word	0x08002dfc
 8001054:	08002e28 	.word	0x08002e28
 8001058:	08002e50 	.word	0x08002e50

0800105c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_kill>:

int _kill(int pid, int sig)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001072:	f000 fe99 	bl	8001da8 <__errno>
 8001076:	0003      	movs	r3, r0
 8001078:	2216      	movs	r2, #22
 800107a:	601a      	str	r2, [r3, #0]
  return -1;
 800107c:	2301      	movs	r3, #1
 800107e:	425b      	negs	r3, r3
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}

08001088 <_exit>:

void _exit (int status)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001090:	2301      	movs	r3, #1
 8001092:	425a      	negs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff ffe5 	bl	8001068 <_kill>
  while (1) {}    /* Make sure we hang here */
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	e7fd      	b.n	800109e <_exit+0x16>

080010a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	e00a      	b.n	80010ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b4:	f000 f890 	bl	80011d8 <__io_getchar>
 80010b8:	0001      	movs	r1, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	b2ca      	uxtb	r2, r1
 80010c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dbf0      	blt.n	80010b4 <_read+0x12>
  }

  return len;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b006      	add	sp, #24
 80010da:	bd80      	pop	{r7, pc}

080010dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e009      	b.n	8001102 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	60ba      	str	r2, [r7, #8]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 f886 	bl	8001208 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	dbf1      	blt.n	80010ee <_write+0x12>
  }
  return len;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b006      	add	sp, #24
 8001112:	bd80      	pop	{r7, pc}

08001114 <_close>:

int _close(int file)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800111c:	2301      	movs	r3, #1
 800111e:	425b      	negs	r3, r3
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}

08001128 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	0192      	lsls	r2, r2, #6
 8001138:	605a      	str	r2, [r3, #4]
  return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}

08001144 <_isatty>:

int _isatty(int file)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800114c:	2301      	movs	r3, #1
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}

08001156 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001162:	2300      	movs	r3, #0
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b004      	add	sp, #16
 800116a:	bd80      	pop	{r7, pc}

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	18d3      	adds	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f000 fe04 	bl	8001da8 <__errno>
 80011a0:	0003      	movs	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	425b      	negs	r3, r3
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	18d2      	adds	r2, r2, r3
 80011ba:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <_sbrk+0x64>)
 80011bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b006      	add	sp, #24
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20008000 	.word	0x20008000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	20000194 	.word	0x20000194
 80011d4:	200002e8 	.word	0x200002e8

080011d8 <__io_getchar>:
 *
 * Returns:
 * either received char or -1 if not
 */
int __io_getchar(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	char ch;
	if(cbfifo_dequeue(&fiforx, &ch, 1)==1)
 80011de:	1df9      	adds	r1, r7, #7
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <__io_getchar+0x2c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff f893 	bl	8000310 <cbfifo_dequeue>
 80011ea:	0003      	movs	r3, r0
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d102      	bne.n	80011f6 <__io_getchar+0x1e>
	{
		return ch;
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	e001      	b.n	80011fa <__io_getchar+0x22>
	}
	else
	{
		return -1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	425b      	negs	r3, r3
	}
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	20000108 	.word	0x20000108

08001208 <__io_putchar>:
 *
 * Returns:
 *  either received 1 or -1(if transmission not successful)
 */
int __io_putchar(int ch)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	while (cbfifo_length(&fifotx) >= 127);
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <__io_putchar+0x48>)
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff f8c3 	bl	80003a0 <cbfifo_length>
 800121a:	0003      	movs	r3, r0
 800121c:	2b7e      	cmp	r3, #126	@ 0x7e
 800121e:	d8f8      	bhi.n	8001212 <__io_putchar+0xa>
	if(cbfifo_enqueue(&fifotx,&ch,1)==1)
 8001220:	1d39      	adds	r1, r7, #4
 8001222:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <__io_putchar+0x48>)
 8001224:	2201      	movs	r2, #1
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff f823 	bl	8000272 <cbfifo_enqueue>
 800122c:	0003      	movs	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d107      	bne.n	8001242 <__io_putchar+0x3a>
	{
		USART2->CR1 |= USART_CR1_TXEIE;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <__io_putchar+0x4c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <__io_putchar+0x4c>)
 8001238:	2180      	movs	r1, #128	@ 0x80
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
		return 1;
 800123e:	2301      	movs	r3, #1
 8001240:	e001      	b.n	8001246 <__io_putchar+0x3e>
	}
	else
	{
		return -1;
 8001242:	2301      	movs	r3, #1
 8001244:	425b      	negs	r3, r3
	}
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	2000007c 	.word	0x2000007c
 8001254:	40004400 	.word	0x40004400

08001258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001258:	480e      	ldr	r0, [pc, #56]	@ (8001294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800125a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800125c:	f000 f866 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	@ (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	@ (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <LoopForever+0xe>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	@ (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001286:	f000 fd95 	bl	8001db4 <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 800128a:	f000 f895 	bl	80013b8 <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 800128e:	f7ff fbb1 	bl	80009f4 <main>

08001292 <LoopForever>:

LoopForever:
  b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   r0, =_estack
 8001294:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012a0:	08003080 	.word	0x08003080
  ldr r2, =_sbss
 80012a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012a8:	200002e4 	.word	0x200002e4

080012ac <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_COMP_IRQHandler>
	...

080012b0 <Set_Clocks_To_48MHz>:
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <Set_Clocks_To_48MHz+0x70>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <Set_Clocks_To_48MHz+0x70>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 80012c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	0249      	lsls	r1, r1, #9
 80012ca:	430a      	orrs	r2, r1
 80012cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 80012d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	029b      	lsls	r3, r3, #10
 80012d8:	4013      	ands	r3, r2
 80012da:	d0f9      	beq.n	80012d0 <Set_Clocks_To_48MHz+0x20>
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 80012e2:	21f0      	movs	r1, #240	@ 0xf0
 80012e4:	438a      	bics	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 80012ee:	2103      	movs	r1, #3
 80012f0:	430a      	orrs	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	089a      	lsrs	r2, r3, #2
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4053      	eors	r3, r2
 8001302:	2203      	movs	r2, #3
 8001304:	4013      	ands	r3, r2
 8001306:	d1f6      	bne.n	80012f6 <Set_Clocks_To_48MHz+0x46>
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a06      	ldr	r2, [pc, #24]	@ (8001328 <Set_Clocks_To_48MHz+0x78>)
 800130e:	401a      	ands	r2, r3
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <Set_Clocks_To_48MHz+0x74>)
 8001312:	2180      	movs	r1, #128	@ 0x80
 8001314:	00c9      	lsls	r1, r1, #3
 8001316:	430a      	orrs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40022000 	.word	0x40022000
 8001324:	40021000 	.word	0x40021000
 8001328:	fffff8ff 	.word	0xfffff8ff

0800132c <SystemInit>:
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <SystemInit+0x74>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <SystemInit+0x74>)
 8001336:	2101      	movs	r1, #1
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <SystemInit+0x74>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <SystemInit+0x74>)
 8001342:	4918      	ldr	r1, [pc, #96]	@ (80013a4 <SystemInit+0x78>)
 8001344:	400a      	ands	r2, r1
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <SystemInit+0x74>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <SystemInit+0x74>)
 800134e:	4916      	ldr	r1, [pc, #88]	@ (80013a8 <SystemInit+0x7c>)
 8001350:	400a      	ands	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <SystemInit+0x74>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <SystemInit+0x74>)
 800135a:	4914      	ldr	r1, [pc, #80]	@ (80013ac <SystemInit+0x80>)
 800135c:	400a      	ands	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <SystemInit+0x74>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <SystemInit+0x74>)
 8001366:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <SystemInit+0x84>)
 8001368:	400a      	ands	r2, r1
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <SystemInit+0x74>)
 800136e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <SystemInit+0x74>)
 8001372:	210f      	movs	r1, #15
 8001374:	438a      	bics	r2, r1
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <SystemInit+0x74>)
 800137a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <SystemInit+0x74>)
 800137e:	490d      	ldr	r1, [pc, #52]	@ (80013b4 <SystemInit+0x88>)
 8001380:	400a      	ands	r2, r1
 8001382:	631a      	str	r2, [r3, #48]	@ 0x30
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <SystemInit+0x74>)
 8001386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <SystemInit+0x74>)
 800138a:	2101      	movs	r1, #1
 800138c:	438a      	bics	r2, r1
 800138e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <SystemInit+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	f7ff ff8b 	bl	80012b0 <Set_Clocks_To_48MHz>
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	08ffb80c 	.word	0x08ffb80c
 80013a8:	fef6ffff 	.word	0xfef6ffff
 80013ac:	fffbffff 	.word	0xfffbffff
 80013b0:	ffc0ffff 	.word	0xffc0ffff
 80013b4:	fff0feac 	.word	0xfff0feac

080013b8 <SystemCoreClockUpdate>:
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <SystemCoreClockUpdate+0x10c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	220c      	movs	r2, #12
 80013d4:	4013      	ands	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d00f      	beq.n	80013fe <SystemCoreClockUpdate+0x46>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b0c      	cmp	r3, #12
 80013e2:	d859      	bhi.n	8001498 <SystemCoreClockUpdate+0xe0>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d015      	beq.n	8001416 <SystemCoreClockUpdate+0x5e>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d853      	bhi.n	8001498 <SystemCoreClockUpdate+0xe0>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <SystemCoreClockUpdate+0x4e>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d008      	beq.n	800140e <SystemCoreClockUpdate+0x56>
 80013fc:	e04c      	b.n	8001498 <SystemCoreClockUpdate+0xe0>
 80013fe:	4b32      	ldr	r3, [pc, #200]	@ (80014c8 <SystemCoreClockUpdate+0x110>)
 8001400:	4a32      	ldr	r2, [pc, #200]	@ (80014cc <SystemCoreClockUpdate+0x114>)
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e04c      	b.n	80014a0 <SystemCoreClockUpdate+0xe8>
 8001406:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <SystemCoreClockUpdate+0x110>)
 8001408:	4a31      	ldr	r2, [pc, #196]	@ (80014d0 <SystemCoreClockUpdate+0x118>)
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e048      	b.n	80014a0 <SystemCoreClockUpdate+0xe8>
 800140e:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <SystemCoreClockUpdate+0x110>)
 8001410:	4a2f      	ldr	r2, [pc, #188]	@ (80014d0 <SystemCoreClockUpdate+0x118>)
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e044      	b.n	80014a0 <SystemCoreClockUpdate+0xe8>
 8001416:	4b2b      	ldr	r3, [pc, #172]	@ (80014c4 <SystemCoreClockUpdate+0x10c>)
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	23f0      	movs	r3, #240	@ 0xf0
 800141c:	039b      	lsls	r3, r3, #14
 800141e:	4013      	ands	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <SystemCoreClockUpdate+0x10c>)
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	23c0      	movs	r3, #192	@ 0xc0
 8001428:	025b      	lsls	r3, r3, #9
 800142a:	4013      	ands	r3, r2
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	0c9b      	lsrs	r3, r3, #18
 8001432:	3302      	adds	r3, #2
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <SystemCoreClockUpdate+0x10c>)
 8001438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143a:	220f      	movs	r2, #15
 800143c:	4013      	ands	r3, r2
 800143e:	3301      	adds	r3, #1
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	2380      	movs	r3, #128	@ 0x80
 8001446:	025b      	lsls	r3, r3, #9
 8001448:	429a      	cmp	r2, r3
 800144a:	d10a      	bne.n	8001462 <SystemCoreClockUpdate+0xaa>
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	4820      	ldr	r0, [pc, #128]	@ (80014d0 <SystemCoreClockUpdate+0x118>)
 8001450:	f7fe fe6c 	bl	800012c <__udivsi3>
 8001454:	0003      	movs	r3, r0
 8001456:	001a      	movs	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	435a      	muls	r2, r3
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <SystemCoreClockUpdate+0x110>)
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e01e      	b.n	80014a0 <SystemCoreClockUpdate+0xe8>
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	23c0      	movs	r3, #192	@ 0xc0
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	429a      	cmp	r2, r3
 800146a:	d10a      	bne.n	8001482 <SystemCoreClockUpdate+0xca>
 800146c:	6839      	ldr	r1, [r7, #0]
 800146e:	4817      	ldr	r0, [pc, #92]	@ (80014cc <SystemCoreClockUpdate+0x114>)
 8001470:	f7fe fe5c 	bl	800012c <__udivsi3>
 8001474:	0003      	movs	r3, r0
 8001476:	001a      	movs	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	435a      	muls	r2, r3
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <SystemCoreClockUpdate+0x110>)
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e00e      	b.n	80014a0 <SystemCoreClockUpdate+0xe8>
 8001482:	6839      	ldr	r1, [r7, #0]
 8001484:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <SystemCoreClockUpdate+0x118>)
 8001486:	f7fe fe51 	bl	800012c <__udivsi3>
 800148a:	0003      	movs	r3, r0
 800148c:	001a      	movs	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	435a      	muls	r2, r3
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <SystemCoreClockUpdate+0x110>)
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e003      	b.n	80014a0 <SystemCoreClockUpdate+0xe8>
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <SystemCoreClockUpdate+0x110>)
 800149a:	4a0d      	ldr	r2, [pc, #52]	@ (80014d0 <SystemCoreClockUpdate+0x118>)
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <SystemCoreClockUpdate+0x10c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	220f      	movs	r2, #15
 80014a8:	4013      	ands	r3, r2
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <SystemCoreClockUpdate+0x11c>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <SystemCoreClockUpdate+0x110>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <SystemCoreClockUpdate+0x110>)
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	46c0      	nop			@ (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	20000000 	.word	0x20000000
 80014cc:	02dc6c00 	.word	0x02dc6c00
 80014d0:	007a1200 	.word	0x007a1200
 80014d4:	08002e84 	.word	0x08002e84

080014d8 <atoi>:
 80014d8:	b510      	push	{r4, lr}
 80014da:	220a      	movs	r2, #10
 80014dc:	2100      	movs	r1, #0
 80014de:	f000 f88b 	bl	80015f8 <strtol>
 80014e2:	bd10      	pop	{r4, pc}

080014e4 <_strtol_l.constprop.0>:
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	b085      	sub	sp, #20
 80014e8:	0017      	movs	r7, r2
 80014ea:	001e      	movs	r6, r3
 80014ec:	9003      	str	r0, [sp, #12]
 80014ee:	9101      	str	r1, [sp, #4]
 80014f0:	2b24      	cmp	r3, #36	@ 0x24
 80014f2:	d844      	bhi.n	800157e <_strtol_l.constprop.0+0x9a>
 80014f4:	000c      	movs	r4, r1
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d041      	beq.n	800157e <_strtol_l.constprop.0+0x9a>
 80014fa:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <_strtol_l.constprop.0+0x10c>)
 80014fc:	2208      	movs	r2, #8
 80014fe:	469c      	mov	ip, r3
 8001500:	0023      	movs	r3, r4
 8001502:	4661      	mov	r1, ip
 8001504:	781d      	ldrb	r5, [r3, #0]
 8001506:	3401      	adds	r4, #1
 8001508:	5d48      	ldrb	r0, [r1, r5]
 800150a:	0001      	movs	r1, r0
 800150c:	4011      	ands	r1, r2
 800150e:	4210      	tst	r0, r2
 8001510:	d1f6      	bne.n	8001500 <_strtol_l.constprop.0+0x1c>
 8001512:	2d2d      	cmp	r5, #45	@ 0x2d
 8001514:	d13a      	bne.n	800158c <_strtol_l.constprop.0+0xa8>
 8001516:	7825      	ldrb	r5, [r4, #0]
 8001518:	1c9c      	adds	r4, r3, #2
 800151a:	2301      	movs	r3, #1
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2210      	movs	r2, #16
 8001520:	0033      	movs	r3, r6
 8001522:	4393      	bics	r3, r2
 8001524:	d109      	bne.n	800153a <_strtol_l.constprop.0+0x56>
 8001526:	2d30      	cmp	r5, #48	@ 0x30
 8001528:	d136      	bne.n	8001598 <_strtol_l.constprop.0+0xb4>
 800152a:	2120      	movs	r1, #32
 800152c:	7823      	ldrb	r3, [r4, #0]
 800152e:	438b      	bics	r3, r1
 8001530:	2b58      	cmp	r3, #88	@ 0x58
 8001532:	d131      	bne.n	8001598 <_strtol_l.constprop.0+0xb4>
 8001534:	0016      	movs	r6, r2
 8001536:	7865      	ldrb	r5, [r4, #1]
 8001538:	3402      	adds	r4, #2
 800153a:	4a2e      	ldr	r2, [pc, #184]	@ (80015f4 <_strtol_l.constprop.0+0x110>)
 800153c:	9b00      	ldr	r3, [sp, #0]
 800153e:	4694      	mov	ip, r2
 8001540:	4463      	add	r3, ip
 8001542:	0031      	movs	r1, r6
 8001544:	0018      	movs	r0, r3
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	f7fe fe76 	bl	8000238 <__aeabi_uidivmod>
 800154c:	2200      	movs	r2, #0
 800154e:	4684      	mov	ip, r0
 8001550:	0010      	movs	r0, r2
 8001552:	002b      	movs	r3, r5
 8001554:	3b30      	subs	r3, #48	@ 0x30
 8001556:	2b09      	cmp	r3, #9
 8001558:	d825      	bhi.n	80015a6 <_strtol_l.constprop.0+0xc2>
 800155a:	001d      	movs	r5, r3
 800155c:	42ae      	cmp	r6, r5
 800155e:	dd31      	ble.n	80015c4 <_strtol_l.constprop.0+0xe0>
 8001560:	1c53      	adds	r3, r2, #1
 8001562:	d009      	beq.n	8001578 <_strtol_l.constprop.0+0x94>
 8001564:	2201      	movs	r2, #1
 8001566:	4252      	negs	r2, r2
 8001568:	4584      	cmp	ip, r0
 800156a:	d305      	bcc.n	8001578 <_strtol_l.constprop.0+0x94>
 800156c:	d101      	bne.n	8001572 <_strtol_l.constprop.0+0x8e>
 800156e:	42a9      	cmp	r1, r5
 8001570:	db25      	blt.n	80015be <_strtol_l.constprop.0+0xda>
 8001572:	2201      	movs	r2, #1
 8001574:	4370      	muls	r0, r6
 8001576:	1828      	adds	r0, r5, r0
 8001578:	7825      	ldrb	r5, [r4, #0]
 800157a:	3401      	adds	r4, #1
 800157c:	e7e9      	b.n	8001552 <_strtol_l.constprop.0+0x6e>
 800157e:	f000 fc13 	bl	8001da8 <__errno>
 8001582:	2316      	movs	r3, #22
 8001584:	6003      	str	r3, [r0, #0]
 8001586:	2000      	movs	r0, #0
 8001588:	b005      	add	sp, #20
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	9100      	str	r1, [sp, #0]
 800158e:	2d2b      	cmp	r5, #43	@ 0x2b
 8001590:	d1c5      	bne.n	800151e <_strtol_l.constprop.0+0x3a>
 8001592:	7825      	ldrb	r5, [r4, #0]
 8001594:	1c9c      	adds	r4, r3, #2
 8001596:	e7c2      	b.n	800151e <_strtol_l.constprop.0+0x3a>
 8001598:	2e00      	cmp	r6, #0
 800159a:	d1ce      	bne.n	800153a <_strtol_l.constprop.0+0x56>
 800159c:	3608      	adds	r6, #8
 800159e:	2d30      	cmp	r5, #48	@ 0x30
 80015a0:	d0cb      	beq.n	800153a <_strtol_l.constprop.0+0x56>
 80015a2:	3602      	adds	r6, #2
 80015a4:	e7c9      	b.n	800153a <_strtol_l.constprop.0+0x56>
 80015a6:	002b      	movs	r3, r5
 80015a8:	3b41      	subs	r3, #65	@ 0x41
 80015aa:	2b19      	cmp	r3, #25
 80015ac:	d801      	bhi.n	80015b2 <_strtol_l.constprop.0+0xce>
 80015ae:	3d37      	subs	r5, #55	@ 0x37
 80015b0:	e7d4      	b.n	800155c <_strtol_l.constprop.0+0x78>
 80015b2:	002b      	movs	r3, r5
 80015b4:	3b61      	subs	r3, #97	@ 0x61
 80015b6:	2b19      	cmp	r3, #25
 80015b8:	d804      	bhi.n	80015c4 <_strtol_l.constprop.0+0xe0>
 80015ba:	3d57      	subs	r5, #87	@ 0x57
 80015bc:	e7ce      	b.n	800155c <_strtol_l.constprop.0+0x78>
 80015be:	2201      	movs	r2, #1
 80015c0:	4252      	negs	r2, r2
 80015c2:	e7d9      	b.n	8001578 <_strtol_l.constprop.0+0x94>
 80015c4:	1c53      	adds	r3, r2, #1
 80015c6:	d108      	bne.n	80015da <_strtol_l.constprop.0+0xf6>
 80015c8:	2322      	movs	r3, #34	@ 0x22
 80015ca:	9a03      	ldr	r2, [sp, #12]
 80015cc:	9802      	ldr	r0, [sp, #8]
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	2f00      	cmp	r7, #0
 80015d2:	d0d9      	beq.n	8001588 <_strtol_l.constprop.0+0xa4>
 80015d4:	1e63      	subs	r3, r4, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	e007      	b.n	80015ea <_strtol_l.constprop.0+0x106>
 80015da:	9b00      	ldr	r3, [sp, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d000      	beq.n	80015e2 <_strtol_l.constprop.0+0xfe>
 80015e0:	4240      	negs	r0, r0
 80015e2:	2f00      	cmp	r7, #0
 80015e4:	d0d0      	beq.n	8001588 <_strtol_l.constprop.0+0xa4>
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d1f4      	bne.n	80015d4 <_strtol_l.constprop.0+0xf0>
 80015ea:	9b01      	ldr	r3, [sp, #4]
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	e7cb      	b.n	8001588 <_strtol_l.constprop.0+0xa4>
 80015f0:	08002e95 	.word	0x08002e95
 80015f4:	7fffffff 	.word	0x7fffffff

080015f8 <strtol>:
 80015f8:	b510      	push	{r4, lr}
 80015fa:	4c04      	ldr	r4, [pc, #16]	@ (800160c <strtol+0x14>)
 80015fc:	0013      	movs	r3, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	0001      	movs	r1, r0
 8001602:	6820      	ldr	r0, [r4, #0]
 8001604:	f7ff ff6e 	bl	80014e4 <_strtol_l.constprop.0>
 8001608:	bd10      	pop	{r4, pc}
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	20000010 	.word	0x20000010

08001610 <std>:
 8001610:	2300      	movs	r3, #0
 8001612:	b510      	push	{r4, lr}
 8001614:	0004      	movs	r4, r0
 8001616:	6003      	str	r3, [r0, #0]
 8001618:	6043      	str	r3, [r0, #4]
 800161a:	6083      	str	r3, [r0, #8]
 800161c:	8181      	strh	r1, [r0, #12]
 800161e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001620:	81c2      	strh	r2, [r0, #14]
 8001622:	6103      	str	r3, [r0, #16]
 8001624:	6143      	str	r3, [r0, #20]
 8001626:	6183      	str	r3, [r0, #24]
 8001628:	0019      	movs	r1, r3
 800162a:	2208      	movs	r2, #8
 800162c:	305c      	adds	r0, #92	@ 0x5c
 800162e:	f000 fad9 	bl	8001be4 <memset>
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <std+0x50>)
 8001634:	6224      	str	r4, [r4, #32]
 8001636:	6263      	str	r3, [r4, #36]	@ 0x24
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <std+0x54>)
 800163a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <std+0x58>)
 800163e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <std+0x5c>)
 8001642:	6323      	str	r3, [r4, #48]	@ 0x30
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <std+0x60>)
 8001646:	429c      	cmp	r4, r3
 8001648:	d005      	beq.n	8001656 <std+0x46>
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <std+0x64>)
 800164c:	429c      	cmp	r4, r3
 800164e:	d002      	beq.n	8001656 <std+0x46>
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <std+0x68>)
 8001652:	429c      	cmp	r4, r3
 8001654:	d103      	bne.n	800165e <std+0x4e>
 8001656:	0020      	movs	r0, r4
 8001658:	3058      	adds	r0, #88	@ 0x58
 800165a:	f000 fbcf 	bl	8001dfc <__retarget_lock_init_recursive>
 800165e:	bd10      	pop	{r4, pc}
 8001660:	08001a0d 	.word	0x08001a0d
 8001664:	08001a35 	.word	0x08001a35
 8001668:	08001a6d 	.word	0x08001a6d
 800166c:	08001a99 	.word	0x08001a99
 8001670:	20000198 	.word	0x20000198
 8001674:	20000200 	.word	0x20000200
 8001678:	20000268 	.word	0x20000268

0800167c <stdio_exit_handler>:
 800167c:	b510      	push	{r4, lr}
 800167e:	4a03      	ldr	r2, [pc, #12]	@ (800168c <stdio_exit_handler+0x10>)
 8001680:	4903      	ldr	r1, [pc, #12]	@ (8001690 <stdio_exit_handler+0x14>)
 8001682:	4804      	ldr	r0, [pc, #16]	@ (8001694 <stdio_exit_handler+0x18>)
 8001684:	f000 f86c 	bl	8001760 <_fwalk_sglue>
 8001688:	bd10      	pop	{r4, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	20000004 	.word	0x20000004
 8001690:	080026dd 	.word	0x080026dd
 8001694:	20000014 	.word	0x20000014

08001698 <cleanup_stdio>:
 8001698:	6841      	ldr	r1, [r0, #4]
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <cleanup_stdio+0x30>)
 800169c:	b510      	push	{r4, lr}
 800169e:	0004      	movs	r4, r0
 80016a0:	4299      	cmp	r1, r3
 80016a2:	d001      	beq.n	80016a8 <cleanup_stdio+0x10>
 80016a4:	f001 f81a 	bl	80026dc <_fflush_r>
 80016a8:	68a1      	ldr	r1, [r4, #8]
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <cleanup_stdio+0x34>)
 80016ac:	4299      	cmp	r1, r3
 80016ae:	d002      	beq.n	80016b6 <cleanup_stdio+0x1e>
 80016b0:	0020      	movs	r0, r4
 80016b2:	f001 f813 	bl	80026dc <_fflush_r>
 80016b6:	68e1      	ldr	r1, [r4, #12]
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <cleanup_stdio+0x38>)
 80016ba:	4299      	cmp	r1, r3
 80016bc:	d002      	beq.n	80016c4 <cleanup_stdio+0x2c>
 80016be:	0020      	movs	r0, r4
 80016c0:	f001 f80c 	bl	80026dc <_fflush_r>
 80016c4:	bd10      	pop	{r4, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	20000198 	.word	0x20000198
 80016cc:	20000200 	.word	0x20000200
 80016d0:	20000268 	.word	0x20000268

080016d4 <global_stdio_init.part.0>:
 80016d4:	b510      	push	{r4, lr}
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <global_stdio_init.part.0+0x28>)
 80016d8:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <global_stdio_init.part.0+0x2c>)
 80016da:	2104      	movs	r1, #4
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	4809      	ldr	r0, [pc, #36]	@ (8001704 <global_stdio_init.part.0+0x30>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	f7ff ff95 	bl	8001610 <std>
 80016e6:	2201      	movs	r2, #1
 80016e8:	2109      	movs	r1, #9
 80016ea:	4807      	ldr	r0, [pc, #28]	@ (8001708 <global_stdio_init.part.0+0x34>)
 80016ec:	f7ff ff90 	bl	8001610 <std>
 80016f0:	2202      	movs	r2, #2
 80016f2:	2112      	movs	r1, #18
 80016f4:	4805      	ldr	r0, [pc, #20]	@ (800170c <global_stdio_init.part.0+0x38>)
 80016f6:	f7ff ff8b 	bl	8001610 <std>
 80016fa:	bd10      	pop	{r4, pc}
 80016fc:	200002d0 	.word	0x200002d0
 8001700:	0800167d 	.word	0x0800167d
 8001704:	20000198 	.word	0x20000198
 8001708:	20000200 	.word	0x20000200
 800170c:	20000268 	.word	0x20000268

08001710 <__sfp_lock_acquire>:
 8001710:	b510      	push	{r4, lr}
 8001712:	4802      	ldr	r0, [pc, #8]	@ (800171c <__sfp_lock_acquire+0xc>)
 8001714:	f000 fb73 	bl	8001dfe <__retarget_lock_acquire_recursive>
 8001718:	bd10      	pop	{r4, pc}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	200002d9 	.word	0x200002d9

08001720 <__sfp_lock_release>:
 8001720:	b510      	push	{r4, lr}
 8001722:	4802      	ldr	r0, [pc, #8]	@ (800172c <__sfp_lock_release+0xc>)
 8001724:	f000 fb6c 	bl	8001e00 <__retarget_lock_release_recursive>
 8001728:	bd10      	pop	{r4, pc}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	200002d9 	.word	0x200002d9

08001730 <__sinit>:
 8001730:	b510      	push	{r4, lr}
 8001732:	0004      	movs	r4, r0
 8001734:	f7ff ffec 	bl	8001710 <__sfp_lock_acquire>
 8001738:	6a23      	ldr	r3, [r4, #32]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <__sinit+0x14>
 800173e:	f7ff ffef 	bl	8001720 <__sfp_lock_release>
 8001742:	bd10      	pop	{r4, pc}
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <__sinit+0x28>)
 8001746:	6223      	str	r3, [r4, #32]
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <__sinit+0x2c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f6      	bne.n	800173e <__sinit+0xe>
 8001750:	f7ff ffc0 	bl	80016d4 <global_stdio_init.part.0>
 8001754:	e7f3      	b.n	800173e <__sinit+0xe>
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	08001699 	.word	0x08001699
 800175c:	200002d0 	.word	0x200002d0

08001760 <_fwalk_sglue>:
 8001760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001762:	0014      	movs	r4, r2
 8001764:	2600      	movs	r6, #0
 8001766:	9000      	str	r0, [sp, #0]
 8001768:	9101      	str	r1, [sp, #4]
 800176a:	68a5      	ldr	r5, [r4, #8]
 800176c:	6867      	ldr	r7, [r4, #4]
 800176e:	3f01      	subs	r7, #1
 8001770:	d504      	bpl.n	800177c <_fwalk_sglue+0x1c>
 8001772:	6824      	ldr	r4, [r4, #0]
 8001774:	2c00      	cmp	r4, #0
 8001776:	d1f8      	bne.n	800176a <_fwalk_sglue+0xa>
 8001778:	0030      	movs	r0, r6
 800177a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800177c:	89ab      	ldrh	r3, [r5, #12]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d908      	bls.n	8001794 <_fwalk_sglue+0x34>
 8001782:	220e      	movs	r2, #14
 8001784:	5eab      	ldrsh	r3, [r5, r2]
 8001786:	3301      	adds	r3, #1
 8001788:	d004      	beq.n	8001794 <_fwalk_sglue+0x34>
 800178a:	0029      	movs	r1, r5
 800178c:	9800      	ldr	r0, [sp, #0]
 800178e:	9b01      	ldr	r3, [sp, #4]
 8001790:	4798      	blx	r3
 8001792:	4306      	orrs	r6, r0
 8001794:	3568      	adds	r5, #104	@ 0x68
 8001796:	e7ea      	b.n	800176e <_fwalk_sglue+0xe>

08001798 <getchar>:
 8001798:	b510      	push	{r4, lr}
 800179a:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <getchar+0x10>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	6841      	ldr	r1, [r0, #4]
 80017a0:	f000 ffd8 	bl	8002754 <_getc_r>
 80017a4:	bd10      	pop	{r4, pc}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	20000010 	.word	0x20000010

080017ac <iprintf>:
 80017ac:	b40f      	push	{r0, r1, r2, r3}
 80017ae:	b507      	push	{r0, r1, r2, lr}
 80017b0:	4905      	ldr	r1, [pc, #20]	@ (80017c8 <iprintf+0x1c>)
 80017b2:	ab04      	add	r3, sp, #16
 80017b4:	6808      	ldr	r0, [r1, #0]
 80017b6:	cb04      	ldmia	r3!, {r2}
 80017b8:	6881      	ldr	r1, [r0, #8]
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	f000 fc6e 	bl	800209c <_vfiprintf_r>
 80017c0:	b003      	add	sp, #12
 80017c2:	bc08      	pop	{r3}
 80017c4:	b004      	add	sp, #16
 80017c6:	4718      	bx	r3
 80017c8:	20000010 	.word	0x20000010

080017cc <putchar>:
 80017cc:	b510      	push	{r4, lr}
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <putchar+0x10>)
 80017d0:	0001      	movs	r1, r0
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	6882      	ldr	r2, [r0, #8]
 80017d6:	f001 f856 	bl	8002886 <_putc_r>
 80017da:	bd10      	pop	{r4, pc}
 80017dc:	20000010 	.word	0x20000010

080017e0 <_puts_r>:
 80017e0:	6a03      	ldr	r3, [r0, #32]
 80017e2:	b570      	push	{r4, r5, r6, lr}
 80017e4:	0005      	movs	r5, r0
 80017e6:	000e      	movs	r6, r1
 80017e8:	6884      	ldr	r4, [r0, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <_puts_r+0x12>
 80017ee:	f7ff ff9f 	bl	8001730 <__sinit>
 80017f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017f4:	07db      	lsls	r3, r3, #31
 80017f6:	d405      	bmi.n	8001804 <_puts_r+0x24>
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	059b      	lsls	r3, r3, #22
 80017fc:	d402      	bmi.n	8001804 <_puts_r+0x24>
 80017fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001800:	f000 fafd 	bl	8001dfe <__retarget_lock_acquire_recursive>
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	071b      	lsls	r3, r3, #28
 8001808:	d502      	bpl.n	8001810 <_puts_r+0x30>
 800180a:	6923      	ldr	r3, [r4, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d11f      	bne.n	8001850 <_puts_r+0x70>
 8001810:	0021      	movs	r1, r4
 8001812:	0028      	movs	r0, r5
 8001814:	f000 f988 	bl	8001b28 <__swsetup_r>
 8001818:	2800      	cmp	r0, #0
 800181a:	d019      	beq.n	8001850 <_puts_r+0x70>
 800181c:	2501      	movs	r5, #1
 800181e:	426d      	negs	r5, r5
 8001820:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001822:	07db      	lsls	r3, r3, #31
 8001824:	d405      	bmi.n	8001832 <_puts_r+0x52>
 8001826:	89a3      	ldrh	r3, [r4, #12]
 8001828:	059b      	lsls	r3, r3, #22
 800182a:	d402      	bmi.n	8001832 <_puts_r+0x52>
 800182c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800182e:	f000 fae7 	bl	8001e00 <__retarget_lock_release_recursive>
 8001832:	0028      	movs	r0, r5
 8001834:	bd70      	pop	{r4, r5, r6, pc}
 8001836:	3601      	adds	r6, #1
 8001838:	60a3      	str	r3, [r4, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da04      	bge.n	8001848 <_puts_r+0x68>
 800183e:	69a2      	ldr	r2, [r4, #24]
 8001840:	429a      	cmp	r2, r3
 8001842:	dc16      	bgt.n	8001872 <_puts_r+0x92>
 8001844:	290a      	cmp	r1, #10
 8001846:	d014      	beq.n	8001872 <_puts_r+0x92>
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	6022      	str	r2, [r4, #0]
 800184e:	7019      	strb	r1, [r3, #0]
 8001850:	68a3      	ldr	r3, [r4, #8]
 8001852:	7831      	ldrb	r1, [r6, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	2900      	cmp	r1, #0
 8001858:	d1ed      	bne.n	8001836 <_puts_r+0x56>
 800185a:	60a3      	str	r3, [r4, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	da0f      	bge.n	8001880 <_puts_r+0xa0>
 8001860:	0022      	movs	r2, r4
 8001862:	0028      	movs	r0, r5
 8001864:	310a      	adds	r1, #10
 8001866:	f000 f91d 	bl	8001aa4 <__swbuf_r>
 800186a:	3001      	adds	r0, #1
 800186c:	d0d6      	beq.n	800181c <_puts_r+0x3c>
 800186e:	250a      	movs	r5, #10
 8001870:	e7d6      	b.n	8001820 <_puts_r+0x40>
 8001872:	0022      	movs	r2, r4
 8001874:	0028      	movs	r0, r5
 8001876:	f000 f915 	bl	8001aa4 <__swbuf_r>
 800187a:	3001      	adds	r0, #1
 800187c:	d1e8      	bne.n	8001850 <_puts_r+0x70>
 800187e:	e7cd      	b.n	800181c <_puts_r+0x3c>
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	6022      	str	r2, [r4, #0]
 8001886:	220a      	movs	r2, #10
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e7f0      	b.n	800186e <_puts_r+0x8e>

0800188c <puts>:
 800188c:	b510      	push	{r4, lr}
 800188e:	4b03      	ldr	r3, [pc, #12]	@ (800189c <puts+0x10>)
 8001890:	0001      	movs	r1, r0
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	f7ff ffa4 	bl	80017e0 <_puts_r>
 8001898:	bd10      	pop	{r4, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	20000010 	.word	0x20000010

080018a0 <setvbuf>:
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	001d      	movs	r5, r3
 80018a4:	4b57      	ldr	r3, [pc, #348]	@ (8001a04 <setvbuf+0x164>)
 80018a6:	b085      	sub	sp, #20
 80018a8:	681e      	ldr	r6, [r3, #0]
 80018aa:	0004      	movs	r4, r0
 80018ac:	000f      	movs	r7, r1
 80018ae:	9200      	str	r2, [sp, #0]
 80018b0:	2e00      	cmp	r6, #0
 80018b2:	d005      	beq.n	80018c0 <setvbuf+0x20>
 80018b4:	6a33      	ldr	r3, [r6, #32]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <setvbuf+0x20>
 80018ba:	0030      	movs	r0, r6
 80018bc:	f7ff ff38 	bl	8001730 <__sinit>
 80018c0:	9b00      	ldr	r3, [sp, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d005      	beq.n	80018d2 <setvbuf+0x32>
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d900      	bls.n	80018cc <setvbuf+0x2c>
 80018ca:	e097      	b.n	80019fc <setvbuf+0x15c>
 80018cc:	2d00      	cmp	r5, #0
 80018ce:	da00      	bge.n	80018d2 <setvbuf+0x32>
 80018d0:	e094      	b.n	80019fc <setvbuf+0x15c>
 80018d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018d4:	07db      	lsls	r3, r3, #31
 80018d6:	d405      	bmi.n	80018e4 <setvbuf+0x44>
 80018d8:	89a3      	ldrh	r3, [r4, #12]
 80018da:	059b      	lsls	r3, r3, #22
 80018dc:	d402      	bmi.n	80018e4 <setvbuf+0x44>
 80018de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018e0:	f000 fa8d 	bl	8001dfe <__retarget_lock_acquire_recursive>
 80018e4:	0021      	movs	r1, r4
 80018e6:	0030      	movs	r0, r6
 80018e8:	f000 fef8 	bl	80026dc <_fflush_r>
 80018ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018ee:	2900      	cmp	r1, #0
 80018f0:	d008      	beq.n	8001904 <setvbuf+0x64>
 80018f2:	0023      	movs	r3, r4
 80018f4:	3344      	adds	r3, #68	@ 0x44
 80018f6:	4299      	cmp	r1, r3
 80018f8:	d002      	beq.n	8001900 <setvbuf+0x60>
 80018fa:	0030      	movs	r0, r6
 80018fc:	f000 faa0 	bl	8001e40 <_free_r>
 8001900:	2300      	movs	r3, #0
 8001902:	6363      	str	r3, [r4, #52]	@ 0x34
 8001904:	2300      	movs	r3, #0
 8001906:	61a3      	str	r3, [r4, #24]
 8001908:	6063      	str	r3, [r4, #4]
 800190a:	89a3      	ldrh	r3, [r4, #12]
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	d503      	bpl.n	8001918 <setvbuf+0x78>
 8001910:	0030      	movs	r0, r6
 8001912:	6921      	ldr	r1, [r4, #16]
 8001914:	f000 fa94 	bl	8001e40 <_free_r>
 8001918:	89a3      	ldrh	r3, [r4, #12]
 800191a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a08 <setvbuf+0x168>)
 800191c:	4013      	ands	r3, r2
 800191e:	81a3      	strh	r3, [r4, #12]
 8001920:	9b00      	ldr	r3, [sp, #0]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d060      	beq.n	80019e8 <setvbuf+0x148>
 8001926:	ab03      	add	r3, sp, #12
 8001928:	0021      	movs	r1, r4
 800192a:	0030      	movs	r0, r6
 800192c:	aa02      	add	r2, sp, #8
 800192e:	f000 ff3f 	bl	80027b0 <__swhatbuf_r>
 8001932:	89a3      	ldrh	r3, [r4, #12]
 8001934:	4303      	orrs	r3, r0
 8001936:	81a3      	strh	r3, [r4, #12]
 8001938:	2d00      	cmp	r5, #0
 800193a:	d124      	bne.n	8001986 <setvbuf+0xe6>
 800193c:	9d02      	ldr	r5, [sp, #8]
 800193e:	0028      	movs	r0, r5
 8001940:	f000 fac8 	bl	8001ed4 <malloc>
 8001944:	9501      	str	r5, [sp, #4]
 8001946:	1e07      	subs	r7, r0, #0
 8001948:	d148      	bne.n	80019dc <setvbuf+0x13c>
 800194a:	9b02      	ldr	r3, [sp, #8]
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	42ab      	cmp	r3, r5
 8001950:	d13f      	bne.n	80019d2 <setvbuf+0x132>
 8001952:	2501      	movs	r5, #1
 8001954:	426d      	negs	r5, r5
 8001956:	220c      	movs	r2, #12
 8001958:	5ea3      	ldrsh	r3, [r4, r2]
 800195a:	2202      	movs	r2, #2
 800195c:	431a      	orrs	r2, r3
 800195e:	81a2      	strh	r2, [r4, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	60a2      	str	r2, [r4, #8]
 8001964:	0022      	movs	r2, r4
 8001966:	3247      	adds	r2, #71	@ 0x47
 8001968:	6022      	str	r2, [r4, #0]
 800196a:	6122      	str	r2, [r4, #16]
 800196c:	2201      	movs	r2, #1
 800196e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8001970:	6162      	str	r2, [r4, #20]
 8001972:	4211      	tst	r1, r2
 8001974:	d104      	bne.n	8001980 <setvbuf+0xe0>
 8001976:	059b      	lsls	r3, r3, #22
 8001978:	d402      	bmi.n	8001980 <setvbuf+0xe0>
 800197a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800197c:	f000 fa40 	bl	8001e00 <__retarget_lock_release_recursive>
 8001980:	0028      	movs	r0, r5
 8001982:	b005      	add	sp, #20
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001986:	2f00      	cmp	r7, #0
 8001988:	d0d9      	beq.n	800193e <setvbuf+0x9e>
 800198a:	6a33      	ldr	r3, [r6, #32]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <setvbuf+0xf6>
 8001990:	0030      	movs	r0, r6
 8001992:	f7ff fecd 	bl	8001730 <__sinit>
 8001996:	9b00      	ldr	r3, [sp, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d103      	bne.n	80019a4 <setvbuf+0x104>
 800199c:	89a3      	ldrh	r3, [r4, #12]
 800199e:	9a00      	ldr	r2, [sp, #0]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	81a2      	strh	r2, [r4, #12]
 80019a4:	220c      	movs	r2, #12
 80019a6:	5ea3      	ldrsh	r3, [r4, r2]
 80019a8:	2208      	movs	r2, #8
 80019aa:	0019      	movs	r1, r3
 80019ac:	6027      	str	r7, [r4, #0]
 80019ae:	6127      	str	r7, [r4, #16]
 80019b0:	6165      	str	r5, [r4, #20]
 80019b2:	4011      	ands	r1, r2
 80019b4:	4213      	tst	r3, r2
 80019b6:	d01b      	beq.n	80019f0 <setvbuf+0x150>
 80019b8:	07da      	lsls	r2, r3, #31
 80019ba:	d517      	bpl.n	80019ec <setvbuf+0x14c>
 80019bc:	2200      	movs	r2, #0
 80019be:	426d      	negs	r5, r5
 80019c0:	60a2      	str	r2, [r4, #8]
 80019c2:	61a5      	str	r5, [r4, #24]
 80019c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80019c6:	07d2      	lsls	r2, r2, #31
 80019c8:	d401      	bmi.n	80019ce <setvbuf+0x12e>
 80019ca:	059b      	lsls	r3, r3, #22
 80019cc:	d512      	bpl.n	80019f4 <setvbuf+0x154>
 80019ce:	2500      	movs	r5, #0
 80019d0:	e7d6      	b.n	8001980 <setvbuf+0xe0>
 80019d2:	9801      	ldr	r0, [sp, #4]
 80019d4:	f000 fa7e 	bl	8001ed4 <malloc>
 80019d8:	1e07      	subs	r7, r0, #0
 80019da:	d0ba      	beq.n	8001952 <setvbuf+0xb2>
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	89a2      	ldrh	r2, [r4, #12]
 80019e0:	9d01      	ldr	r5, [sp, #4]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	81a3      	strh	r3, [r4, #12]
 80019e6:	e7d0      	b.n	800198a <setvbuf+0xea>
 80019e8:	2500      	movs	r5, #0
 80019ea:	e7b4      	b.n	8001956 <setvbuf+0xb6>
 80019ec:	60a5      	str	r5, [r4, #8]
 80019ee:	e7e9      	b.n	80019c4 <setvbuf+0x124>
 80019f0:	60a1      	str	r1, [r4, #8]
 80019f2:	e7e7      	b.n	80019c4 <setvbuf+0x124>
 80019f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019f6:	f000 fa03 	bl	8001e00 <__retarget_lock_release_recursive>
 80019fa:	e7e8      	b.n	80019ce <setvbuf+0x12e>
 80019fc:	2501      	movs	r5, #1
 80019fe:	426d      	negs	r5, r5
 8001a00:	e7be      	b.n	8001980 <setvbuf+0xe0>
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	20000010 	.word	0x20000010
 8001a08:	fffff35c 	.word	0xfffff35c

08001a0c <__sread>:
 8001a0c:	b570      	push	{r4, r5, r6, lr}
 8001a0e:	000c      	movs	r4, r1
 8001a10:	250e      	movs	r5, #14
 8001a12:	5f49      	ldrsh	r1, [r1, r5]
 8001a14:	f000 f9a0 	bl	8001d58 <_read_r>
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	db03      	blt.n	8001a24 <__sread+0x18>
 8001a1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a1e:	181b      	adds	r3, r3, r0
 8001a20:	6563      	str	r3, [r4, #84]	@ 0x54
 8001a22:	bd70      	pop	{r4, r5, r6, pc}
 8001a24:	89a3      	ldrh	r3, [r4, #12]
 8001a26:	4a02      	ldr	r2, [pc, #8]	@ (8001a30 <__sread+0x24>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	81a3      	strh	r3, [r4, #12]
 8001a2c:	e7f9      	b.n	8001a22 <__sread+0x16>
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	ffffefff 	.word	0xffffefff

08001a34 <__swrite>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	001f      	movs	r7, r3
 8001a38:	898b      	ldrh	r3, [r1, #12]
 8001a3a:	0005      	movs	r5, r0
 8001a3c:	000c      	movs	r4, r1
 8001a3e:	0016      	movs	r6, r2
 8001a40:	05db      	lsls	r3, r3, #23
 8001a42:	d505      	bpl.n	8001a50 <__swrite+0x1c>
 8001a44:	230e      	movs	r3, #14
 8001a46:	5ec9      	ldrsh	r1, [r1, r3]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f000 f970 	bl	8001d30 <_lseek_r>
 8001a50:	89a3      	ldrh	r3, [r4, #12]
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <__swrite+0x34>)
 8001a54:	0028      	movs	r0, r5
 8001a56:	4013      	ands	r3, r2
 8001a58:	81a3      	strh	r3, [r4, #12]
 8001a5a:	0032      	movs	r2, r6
 8001a5c:	230e      	movs	r3, #14
 8001a5e:	5ee1      	ldrsh	r1, [r4, r3]
 8001a60:	003b      	movs	r3, r7
 8001a62:	f000 f98d 	bl	8001d80 <_write_r>
 8001a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a68:	ffffefff 	.word	0xffffefff

08001a6c <__sseek>:
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	000c      	movs	r4, r1
 8001a70:	250e      	movs	r5, #14
 8001a72:	5f49      	ldrsh	r1, [r1, r5]
 8001a74:	f000 f95c 	bl	8001d30 <_lseek_r>
 8001a78:	89a3      	ldrh	r3, [r4, #12]
 8001a7a:	1c42      	adds	r2, r0, #1
 8001a7c:	d103      	bne.n	8001a86 <__sseek+0x1a>
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <__sseek+0x28>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	81a3      	strh	r3, [r4, #12]
 8001a84:	bd70      	pop	{r4, r5, r6, pc}
 8001a86:	2280      	movs	r2, #128	@ 0x80
 8001a88:	0152      	lsls	r2, r2, #5
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	81a3      	strh	r3, [r4, #12]
 8001a8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001a90:	e7f8      	b.n	8001a84 <__sseek+0x18>
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	ffffefff 	.word	0xffffefff

08001a98 <__sclose>:
 8001a98:	b510      	push	{r4, lr}
 8001a9a:	230e      	movs	r3, #14
 8001a9c:	5ec9      	ldrsh	r1, [r1, r3]
 8001a9e:	f000 f935 	bl	8001d0c <_close_r>
 8001aa2:	bd10      	pop	{r4, pc}

08001aa4 <__swbuf_r>:
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	000d      	movs	r5, r1
 8001aaa:	0014      	movs	r4, r2
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d004      	beq.n	8001aba <__swbuf_r+0x16>
 8001ab0:	6a03      	ldr	r3, [r0, #32]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <__swbuf_r+0x16>
 8001ab6:	f7ff fe3b 	bl	8001730 <__sinit>
 8001aba:	69a3      	ldr	r3, [r4, #24]
 8001abc:	60a3      	str	r3, [r4, #8]
 8001abe:	89a3      	ldrh	r3, [r4, #12]
 8001ac0:	071b      	lsls	r3, r3, #28
 8001ac2:	d502      	bpl.n	8001aca <__swbuf_r+0x26>
 8001ac4:	6923      	ldr	r3, [r4, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <__swbuf_r+0x3a>
 8001aca:	0021      	movs	r1, r4
 8001acc:	0030      	movs	r0, r6
 8001ace:	f000 f82b 	bl	8001b28 <__swsetup_r>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	d003      	beq.n	8001ade <__swbuf_r+0x3a>
 8001ad6:	2501      	movs	r5, #1
 8001ad8:	426d      	negs	r5, r5
 8001ada:	0028      	movs	r0, r5
 8001adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ade:	6923      	ldr	r3, [r4, #16]
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	b2ef      	uxtb	r7, r5
 8001ae4:	1ac0      	subs	r0, r0, r3
 8001ae6:	6963      	ldr	r3, [r4, #20]
 8001ae8:	b2ed      	uxtb	r5, r5
 8001aea:	4283      	cmp	r3, r0
 8001aec:	dc05      	bgt.n	8001afa <__swbuf_r+0x56>
 8001aee:	0021      	movs	r1, r4
 8001af0:	0030      	movs	r0, r6
 8001af2:	f000 fdf3 	bl	80026dc <_fflush_r>
 8001af6:	2800      	cmp	r0, #0
 8001af8:	d1ed      	bne.n	8001ad6 <__swbuf_r+0x32>
 8001afa:	68a3      	ldr	r3, [r4, #8]
 8001afc:	3001      	adds	r0, #1
 8001afe:	3b01      	subs	r3, #1
 8001b00:	60a3      	str	r3, [r4, #8]
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	6022      	str	r2, [r4, #0]
 8001b08:	701f      	strb	r7, [r3, #0]
 8001b0a:	6963      	ldr	r3, [r4, #20]
 8001b0c:	4283      	cmp	r3, r0
 8001b0e:	d004      	beq.n	8001b1a <__swbuf_r+0x76>
 8001b10:	89a3      	ldrh	r3, [r4, #12]
 8001b12:	07db      	lsls	r3, r3, #31
 8001b14:	d5e1      	bpl.n	8001ada <__swbuf_r+0x36>
 8001b16:	2d0a      	cmp	r5, #10
 8001b18:	d1df      	bne.n	8001ada <__swbuf_r+0x36>
 8001b1a:	0021      	movs	r1, r4
 8001b1c:	0030      	movs	r0, r6
 8001b1e:	f000 fddd 	bl	80026dc <_fflush_r>
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d0d9      	beq.n	8001ada <__swbuf_r+0x36>
 8001b26:	e7d6      	b.n	8001ad6 <__swbuf_r+0x32>

08001b28 <__swsetup_r>:
 8001b28:	4b2d      	ldr	r3, [pc, #180]	@ (8001be0 <__swsetup_r+0xb8>)
 8001b2a:	b570      	push	{r4, r5, r6, lr}
 8001b2c:	0005      	movs	r5, r0
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	000c      	movs	r4, r1
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d004      	beq.n	8001b40 <__swsetup_r+0x18>
 8001b36:	6a03      	ldr	r3, [r0, #32]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <__swsetup_r+0x18>
 8001b3c:	f7ff fdf8 	bl	8001730 <__sinit>
 8001b40:	230c      	movs	r3, #12
 8001b42:	5ee2      	ldrsh	r2, [r4, r3]
 8001b44:	0713      	lsls	r3, r2, #28
 8001b46:	d423      	bmi.n	8001b90 <__swsetup_r+0x68>
 8001b48:	06d3      	lsls	r3, r2, #27
 8001b4a:	d407      	bmi.n	8001b5c <__swsetup_r+0x34>
 8001b4c:	2309      	movs	r3, #9
 8001b4e:	602b      	str	r3, [r5, #0]
 8001b50:	2340      	movs	r3, #64	@ 0x40
 8001b52:	2001      	movs	r0, #1
 8001b54:	4313      	orrs	r3, r2
 8001b56:	81a3      	strh	r3, [r4, #12]
 8001b58:	4240      	negs	r0, r0
 8001b5a:	e03a      	b.n	8001bd2 <__swsetup_r+0xaa>
 8001b5c:	0752      	lsls	r2, r2, #29
 8001b5e:	d513      	bpl.n	8001b88 <__swsetup_r+0x60>
 8001b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b62:	2900      	cmp	r1, #0
 8001b64:	d008      	beq.n	8001b78 <__swsetup_r+0x50>
 8001b66:	0023      	movs	r3, r4
 8001b68:	3344      	adds	r3, #68	@ 0x44
 8001b6a:	4299      	cmp	r1, r3
 8001b6c:	d002      	beq.n	8001b74 <__swsetup_r+0x4c>
 8001b6e:	0028      	movs	r0, r5
 8001b70:	f000 f966 	bl	8001e40 <_free_r>
 8001b74:	2300      	movs	r3, #0
 8001b76:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b78:	2224      	movs	r2, #36	@ 0x24
 8001b7a:	89a3      	ldrh	r3, [r4, #12]
 8001b7c:	4393      	bics	r3, r2
 8001b7e:	81a3      	strh	r3, [r4, #12]
 8001b80:	2300      	movs	r3, #0
 8001b82:	6063      	str	r3, [r4, #4]
 8001b84:	6923      	ldr	r3, [r4, #16]
 8001b86:	6023      	str	r3, [r4, #0]
 8001b88:	2308      	movs	r3, #8
 8001b8a:	89a2      	ldrh	r2, [r4, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	81a3      	strh	r3, [r4, #12]
 8001b90:	6923      	ldr	r3, [r4, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10b      	bne.n	8001bae <__swsetup_r+0x86>
 8001b96:	21a0      	movs	r1, #160	@ 0xa0
 8001b98:	2280      	movs	r2, #128	@ 0x80
 8001b9a:	89a3      	ldrh	r3, [r4, #12]
 8001b9c:	0089      	lsls	r1, r1, #2
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d003      	beq.n	8001bae <__swsetup_r+0x86>
 8001ba6:	0021      	movs	r1, r4
 8001ba8:	0028      	movs	r0, r5
 8001baa:	f000 fe2b 	bl	8002804 <__smakebuf_r>
 8001bae:	230c      	movs	r3, #12
 8001bb0:	5ee2      	ldrsh	r2, [r4, r3]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	400b      	ands	r3, r1
 8001bb8:	420a      	tst	r2, r1
 8001bba:	d00b      	beq.n	8001bd4 <__swsetup_r+0xac>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60a3      	str	r3, [r4, #8]
 8001bc0:	6963      	ldr	r3, [r4, #20]
 8001bc2:	425b      	negs	r3, r3
 8001bc4:	61a3      	str	r3, [r4, #24]
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	6923      	ldr	r3, [r4, #16]
 8001bca:	4283      	cmp	r3, r0
 8001bcc:	d101      	bne.n	8001bd2 <__swsetup_r+0xaa>
 8001bce:	0613      	lsls	r3, r2, #24
 8001bd0:	d4be      	bmi.n	8001b50 <__swsetup_r+0x28>
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}
 8001bd4:	0791      	lsls	r1, r2, #30
 8001bd6:	d400      	bmi.n	8001bda <__swsetup_r+0xb2>
 8001bd8:	6963      	ldr	r3, [r4, #20]
 8001bda:	60a3      	str	r3, [r4, #8]
 8001bdc:	e7f3      	b.n	8001bc6 <__swsetup_r+0x9e>
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	20000010 	.word	0x20000010

08001be4 <memset>:
 8001be4:	0003      	movs	r3, r0
 8001be6:	1882      	adds	r2, r0, r2
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d100      	bne.n	8001bee <memset+0xa>
 8001bec:	4770      	bx	lr
 8001bee:	7019      	strb	r1, [r3, #0]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	e7f9      	b.n	8001be8 <memset+0x4>

08001bf4 <strcasecmp>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	0005      	movs	r5, r0
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	2703      	movs	r7, #3
 8001bfc:	4e09      	ldr	r6, [pc, #36]	@ (8001c24 <strcasecmp+0x30>)
 8001bfe:	5d2a      	ldrb	r2, [r5, r4]
 8001c00:	5cb3      	ldrb	r3, [r6, r2]
 8001c02:	403b      	ands	r3, r7
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d100      	bne.n	8001c0a <strcasecmp+0x16>
 8001c08:	3220      	adds	r2, #32
 8001c0a:	5d0b      	ldrb	r3, [r1, r4]
 8001c0c:	5cf0      	ldrb	r0, [r6, r3]
 8001c0e:	4038      	ands	r0, r7
 8001c10:	2801      	cmp	r0, #1
 8001c12:	d100      	bne.n	8001c16 <strcasecmp+0x22>
 8001c14:	3320      	adds	r3, #32
 8001c16:	1ad0      	subs	r0, r2, r3
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d102      	bne.n	8001c22 <strcasecmp+0x2e>
 8001c1c:	3401      	adds	r4, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ed      	bne.n	8001bfe <strcasecmp+0xa>
 8001c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c24:	08002e95 	.word	0x08002e95

08001c28 <strncmp>:
 8001c28:	b530      	push	{r4, r5, lr}
 8001c2a:	0005      	movs	r5, r0
 8001c2c:	1e10      	subs	r0, r2, #0
 8001c2e:	d00b      	beq.n	8001c48 <strncmp+0x20>
 8001c30:	2400      	movs	r4, #0
 8001c32:	3a01      	subs	r2, #1
 8001c34:	5d2b      	ldrb	r3, [r5, r4]
 8001c36:	5d08      	ldrb	r0, [r1, r4]
 8001c38:	4283      	cmp	r3, r0
 8001c3a:	d104      	bne.n	8001c46 <strncmp+0x1e>
 8001c3c:	42a2      	cmp	r2, r4
 8001c3e:	d002      	beq.n	8001c46 <strncmp+0x1e>
 8001c40:	3401      	adds	r4, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f6      	bne.n	8001c34 <strncmp+0xc>
 8001c46:	1a18      	subs	r0, r3, r0
 8001c48:	bd30      	pop	{r4, r5, pc}
	...

08001c4c <strtok>:
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <strtok+0x5c>)
 8001c50:	0005      	movs	r5, r0
 8001c52:	681f      	ldr	r7, [r3, #0]
 8001c54:	000e      	movs	r6, r1
 8001c56:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001c58:	2c00      	cmp	r4, #0
 8001c5a:	d11d      	bne.n	8001c98 <strtok+0x4c>
 8001c5c:	2050      	movs	r0, #80	@ 0x50
 8001c5e:	f000 f939 	bl	8001ed4 <malloc>
 8001c62:	1e02      	subs	r2, r0, #0
 8001c64:	6478      	str	r0, [r7, #68]	@ 0x44
 8001c66:	d104      	bne.n	8001c72 <strtok+0x26>
 8001c68:	215b      	movs	r1, #91	@ 0x5b
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <strtok+0x60>)
 8001c6c:	4810      	ldr	r0, [pc, #64]	@ (8001cb0 <strtok+0x64>)
 8001c6e:	f000 f8c9 	bl	8001e04 <__assert_func>
 8001c72:	6004      	str	r4, [r0, #0]
 8001c74:	6044      	str	r4, [r0, #4]
 8001c76:	6084      	str	r4, [r0, #8]
 8001c78:	60c4      	str	r4, [r0, #12]
 8001c7a:	6104      	str	r4, [r0, #16]
 8001c7c:	6144      	str	r4, [r0, #20]
 8001c7e:	6184      	str	r4, [r0, #24]
 8001c80:	6284      	str	r4, [r0, #40]	@ 0x28
 8001c82:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8001c84:	6304      	str	r4, [r0, #48]	@ 0x30
 8001c86:	6344      	str	r4, [r0, #52]	@ 0x34
 8001c88:	6384      	str	r4, [r0, #56]	@ 0x38
 8001c8a:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8001c8c:	6404      	str	r4, [r0, #64]	@ 0x40
 8001c8e:	6444      	str	r4, [r0, #68]	@ 0x44
 8001c90:	6484      	str	r4, [r0, #72]	@ 0x48
 8001c92:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8001c94:	7704      	strb	r4, [r0, #28]
 8001c96:	6244      	str	r4, [r0, #36]	@ 0x24
 8001c98:	0031      	movs	r1, r6
 8001c9a:	0028      	movs	r0, r5
 8001c9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f000 f808 	bl	8001cb4 <__strtok_r>
 8001ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	20000010 	.word	0x20000010
 8001cac:	08002f95 	.word	0x08002f95
 8001cb0:	08002fac 	.word	0x08002fac

08001cb4 <__strtok_r>:
 8001cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb6:	1e04      	subs	r4, r0, #0
 8001cb8:	d102      	bne.n	8001cc0 <__strtok_r+0xc>
 8001cba:	6814      	ldr	r4, [r2, #0]
 8001cbc:	2c00      	cmp	r4, #0
 8001cbe:	d009      	beq.n	8001cd4 <__strtok_r+0x20>
 8001cc0:	0020      	movs	r0, r4
 8001cc2:	000e      	movs	r6, r1
 8001cc4:	7805      	ldrb	r5, [r0, #0]
 8001cc6:	3401      	adds	r4, #1
 8001cc8:	7837      	ldrb	r7, [r6, #0]
 8001cca:	2f00      	cmp	r7, #0
 8001ccc:	d104      	bne.n	8001cd8 <__strtok_r+0x24>
 8001cce:	2d00      	cmp	r5, #0
 8001cd0:	d10d      	bne.n	8001cee <__strtok_r+0x3a>
 8001cd2:	6015      	str	r5, [r2, #0]
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	e006      	b.n	8001ce6 <__strtok_r+0x32>
 8001cd8:	3601      	adds	r6, #1
 8001cda:	42bd      	cmp	r5, r7
 8001cdc:	d1f4      	bne.n	8001cc8 <__strtok_r+0x14>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ee      	bne.n	8001cc0 <__strtok_r+0xc>
 8001ce2:	6014      	str	r4, [r2, #0]
 8001ce4:	7003      	strb	r3, [r0, #0]
 8001ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce8:	3301      	adds	r3, #1
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	d102      	bne.n	8001cf4 <__strtok_r+0x40>
 8001cee:	000b      	movs	r3, r1
 8001cf0:	7826      	ldrb	r6, [r4, #0]
 8001cf2:	3401      	adds	r4, #1
 8001cf4:	781d      	ldrb	r5, [r3, #0]
 8001cf6:	42ae      	cmp	r6, r5
 8001cf8:	d1f6      	bne.n	8001ce8 <__strtok_r+0x34>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	001d      	movs	r5, r3
 8001cfe:	429e      	cmp	r6, r3
 8001d00:	d002      	beq.n	8001d08 <__strtok_r+0x54>
 8001d02:	0023      	movs	r3, r4
 8001d04:	1e61      	subs	r1, r4, #1
 8001d06:	700d      	strb	r5, [r1, #0]
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e7ec      	b.n	8001ce6 <__strtok_r+0x32>

08001d0c <_close_r>:
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	b570      	push	{r4, r5, r6, lr}
 8001d10:	4d06      	ldr	r5, [pc, #24]	@ (8001d2c <_close_r+0x20>)
 8001d12:	0004      	movs	r4, r0
 8001d14:	0008      	movs	r0, r1
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	f7ff f9fc 	bl	8001114 <_close>
 8001d1c:	1c43      	adds	r3, r0, #1
 8001d1e:	d103      	bne.n	8001d28 <_close_r+0x1c>
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d000      	beq.n	8001d28 <_close_r+0x1c>
 8001d26:	6023      	str	r3, [r4, #0]
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	200002d4 	.word	0x200002d4

08001d30 <_lseek_r>:
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	0004      	movs	r4, r0
 8001d34:	0008      	movs	r0, r1
 8001d36:	0011      	movs	r1, r2
 8001d38:	001a      	movs	r2, r3
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	4d05      	ldr	r5, [pc, #20]	@ (8001d54 <_lseek_r+0x24>)
 8001d3e:	602b      	str	r3, [r5, #0]
 8001d40:	f7ff fa09 	bl	8001156 <_lseek>
 8001d44:	1c43      	adds	r3, r0, #1
 8001d46:	d103      	bne.n	8001d50 <_lseek_r+0x20>
 8001d48:	682b      	ldr	r3, [r5, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d000      	beq.n	8001d50 <_lseek_r+0x20>
 8001d4e:	6023      	str	r3, [r4, #0]
 8001d50:	bd70      	pop	{r4, r5, r6, pc}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	200002d4 	.word	0x200002d4

08001d58 <_read_r>:
 8001d58:	b570      	push	{r4, r5, r6, lr}
 8001d5a:	0004      	movs	r4, r0
 8001d5c:	0008      	movs	r0, r1
 8001d5e:	0011      	movs	r1, r2
 8001d60:	001a      	movs	r2, r3
 8001d62:	2300      	movs	r3, #0
 8001d64:	4d05      	ldr	r5, [pc, #20]	@ (8001d7c <_read_r+0x24>)
 8001d66:	602b      	str	r3, [r5, #0]
 8001d68:	f7ff f99b 	bl	80010a2 <_read>
 8001d6c:	1c43      	adds	r3, r0, #1
 8001d6e:	d103      	bne.n	8001d78 <_read_r+0x20>
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d000      	beq.n	8001d78 <_read_r+0x20>
 8001d76:	6023      	str	r3, [r4, #0]
 8001d78:	bd70      	pop	{r4, r5, r6, pc}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	200002d4 	.word	0x200002d4

08001d80 <_write_r>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	0004      	movs	r4, r0
 8001d84:	0008      	movs	r0, r1
 8001d86:	0011      	movs	r1, r2
 8001d88:	001a      	movs	r2, r3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	4d05      	ldr	r5, [pc, #20]	@ (8001da4 <_write_r+0x24>)
 8001d8e:	602b      	str	r3, [r5, #0]
 8001d90:	f7ff f9a4 	bl	80010dc <_write>
 8001d94:	1c43      	adds	r3, r0, #1
 8001d96:	d103      	bne.n	8001da0 <_write_r+0x20>
 8001d98:	682b      	ldr	r3, [r5, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d000      	beq.n	8001da0 <_write_r+0x20>
 8001d9e:	6023      	str	r3, [r4, #0]
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	200002d4 	.word	0x200002d4

08001da8 <__errno>:
 8001da8:	4b01      	ldr	r3, [pc, #4]	@ (8001db0 <__errno+0x8>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	4770      	bx	lr
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	20000010 	.word	0x20000010

08001db4 <__libc_init_array>:
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	2600      	movs	r6, #0
 8001db8:	4c0c      	ldr	r4, [pc, #48]	@ (8001dec <__libc_init_array+0x38>)
 8001dba:	4d0d      	ldr	r5, [pc, #52]	@ (8001df0 <__libc_init_array+0x3c>)
 8001dbc:	1b64      	subs	r4, r4, r5
 8001dbe:	10a4      	asrs	r4, r4, #2
 8001dc0:	42a6      	cmp	r6, r4
 8001dc2:	d109      	bne.n	8001dd8 <__libc_init_array+0x24>
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	f000 fec5 	bl	8002b54 <_init>
 8001dca:	4c0a      	ldr	r4, [pc, #40]	@ (8001df4 <__libc_init_array+0x40>)
 8001dcc:	4d0a      	ldr	r5, [pc, #40]	@ (8001df8 <__libc_init_array+0x44>)
 8001dce:	1b64      	subs	r4, r4, r5
 8001dd0:	10a4      	asrs	r4, r4, #2
 8001dd2:	42a6      	cmp	r6, r4
 8001dd4:	d105      	bne.n	8001de2 <__libc_init_array+0x2e>
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
 8001dd8:	00b3      	lsls	r3, r6, #2
 8001dda:	58eb      	ldr	r3, [r5, r3]
 8001ddc:	4798      	blx	r3
 8001dde:	3601      	adds	r6, #1
 8001de0:	e7ee      	b.n	8001dc0 <__libc_init_array+0xc>
 8001de2:	00b3      	lsls	r3, r6, #2
 8001de4:	58eb      	ldr	r3, [r5, r3]
 8001de6:	4798      	blx	r3
 8001de8:	3601      	adds	r6, #1
 8001dea:	e7f2      	b.n	8001dd2 <__libc_init_array+0x1e>
 8001dec:	08003078 	.word	0x08003078
 8001df0:	08003078 	.word	0x08003078
 8001df4:	0800307c 	.word	0x0800307c
 8001df8:	08003078 	.word	0x08003078

08001dfc <__retarget_lock_init_recursive>:
 8001dfc:	4770      	bx	lr

08001dfe <__retarget_lock_acquire_recursive>:
 8001dfe:	4770      	bx	lr

08001e00 <__retarget_lock_release_recursive>:
 8001e00:	4770      	bx	lr
	...

08001e04 <__assert_func>:
 8001e04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001e06:	0014      	movs	r4, r2
 8001e08:	001a      	movs	r2, r3
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <__assert_func+0x2c>)
 8001e0c:	0005      	movs	r5, r0
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	000e      	movs	r6, r1
 8001e12:	68d8      	ldr	r0, [r3, #12]
 8001e14:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <__assert_func+0x30>)
 8001e16:	2c00      	cmp	r4, #0
 8001e18:	d101      	bne.n	8001e1e <__assert_func+0x1a>
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <__assert_func+0x34>)
 8001e1c:	001c      	movs	r4, r3
 8001e1e:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <__assert_func+0x38>)
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	9402      	str	r4, [sp, #8]
 8001e24:	002b      	movs	r3, r5
 8001e26:	9600      	str	r6, [sp, #0]
 8001e28:	f000 fc84 	bl	8002734 <fiprintf>
 8001e2c:	f000 fdbd 	bl	80029aa <abort>
 8001e30:	20000010 	.word	0x20000010
 8001e34:	08003006 	.word	0x08003006
 8001e38:	08003041 	.word	0x08003041
 8001e3c:	08003013 	.word	0x08003013

08001e40 <_free_r>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	0005      	movs	r5, r0
 8001e44:	1e0c      	subs	r4, r1, #0
 8001e46:	d010      	beq.n	8001e6a <_free_r+0x2a>
 8001e48:	3c04      	subs	r4, #4
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	da00      	bge.n	8001e52 <_free_r+0x12>
 8001e50:	18e4      	adds	r4, r4, r3
 8001e52:	0028      	movs	r0, r5
 8001e54:	f000 f8ea 	bl	800202c <__malloc_lock>
 8001e58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <_free_r+0x90>)
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <_free_r+0x2c>
 8001e60:	6063      	str	r3, [r4, #4]
 8001e62:	6014      	str	r4, [r2, #0]
 8001e64:	0028      	movs	r0, r5
 8001e66:	f000 f8e9 	bl	800203c <__malloc_unlock>
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	42a3      	cmp	r3, r4
 8001e6e:	d908      	bls.n	8001e82 <_free_r+0x42>
 8001e70:	6820      	ldr	r0, [r4, #0]
 8001e72:	1821      	adds	r1, r4, r0
 8001e74:	428b      	cmp	r3, r1
 8001e76:	d1f3      	bne.n	8001e60 <_free_r+0x20>
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	1809      	adds	r1, r1, r0
 8001e7e:	6021      	str	r1, [r4, #0]
 8001e80:	e7ee      	b.n	8001e60 <_free_r+0x20>
 8001e82:	001a      	movs	r2, r3
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <_free_r+0x4e>
 8001e8a:	42a3      	cmp	r3, r4
 8001e8c:	d9f9      	bls.n	8001e82 <_free_r+0x42>
 8001e8e:	6811      	ldr	r1, [r2, #0]
 8001e90:	1850      	adds	r0, r2, r1
 8001e92:	42a0      	cmp	r0, r4
 8001e94:	d10b      	bne.n	8001eae <_free_r+0x6e>
 8001e96:	6820      	ldr	r0, [r4, #0]
 8001e98:	1809      	adds	r1, r1, r0
 8001e9a:	1850      	adds	r0, r2, r1
 8001e9c:	6011      	str	r1, [r2, #0]
 8001e9e:	4283      	cmp	r3, r0
 8001ea0:	d1e0      	bne.n	8001e64 <_free_r+0x24>
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	1841      	adds	r1, r0, r1
 8001ea8:	6011      	str	r1, [r2, #0]
 8001eaa:	6053      	str	r3, [r2, #4]
 8001eac:	e7da      	b.n	8001e64 <_free_r+0x24>
 8001eae:	42a0      	cmp	r0, r4
 8001eb0:	d902      	bls.n	8001eb8 <_free_r+0x78>
 8001eb2:	230c      	movs	r3, #12
 8001eb4:	602b      	str	r3, [r5, #0]
 8001eb6:	e7d5      	b.n	8001e64 <_free_r+0x24>
 8001eb8:	6820      	ldr	r0, [r4, #0]
 8001eba:	1821      	adds	r1, r4, r0
 8001ebc:	428b      	cmp	r3, r1
 8001ebe:	d103      	bne.n	8001ec8 <_free_r+0x88>
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	1809      	adds	r1, r1, r0
 8001ec6:	6021      	str	r1, [r4, #0]
 8001ec8:	6063      	str	r3, [r4, #4]
 8001eca:	6054      	str	r4, [r2, #4]
 8001ecc:	e7ca      	b.n	8001e64 <_free_r+0x24>
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	200002e0 	.word	0x200002e0

08001ed4 <malloc>:
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <malloc+0x10>)
 8001ed8:	0001      	movs	r1, r0
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f000 f826 	bl	8001f2c <_malloc_r>
 8001ee0:	bd10      	pop	{r4, pc}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	20000010 	.word	0x20000010

08001ee8 <sbrk_aligned>:
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	4e0f      	ldr	r6, [pc, #60]	@ (8001f28 <sbrk_aligned+0x40>)
 8001eec:	000d      	movs	r5, r1
 8001eee:	6831      	ldr	r1, [r6, #0]
 8001ef0:	0004      	movs	r4, r0
 8001ef2:	2900      	cmp	r1, #0
 8001ef4:	d102      	bne.n	8001efc <sbrk_aligned+0x14>
 8001ef6:	f000 fd3b 	bl	8002970 <_sbrk_r>
 8001efa:	6030      	str	r0, [r6, #0]
 8001efc:	0029      	movs	r1, r5
 8001efe:	0020      	movs	r0, r4
 8001f00:	f000 fd36 	bl	8002970 <_sbrk_r>
 8001f04:	1c43      	adds	r3, r0, #1
 8001f06:	d103      	bne.n	8001f10 <sbrk_aligned+0x28>
 8001f08:	2501      	movs	r5, #1
 8001f0a:	426d      	negs	r5, r5
 8001f0c:	0028      	movs	r0, r5
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}
 8001f10:	2303      	movs	r3, #3
 8001f12:	1cc5      	adds	r5, r0, #3
 8001f14:	439d      	bics	r5, r3
 8001f16:	42a8      	cmp	r0, r5
 8001f18:	d0f8      	beq.n	8001f0c <sbrk_aligned+0x24>
 8001f1a:	1a29      	subs	r1, r5, r0
 8001f1c:	0020      	movs	r0, r4
 8001f1e:	f000 fd27 	bl	8002970 <_sbrk_r>
 8001f22:	3001      	adds	r0, #1
 8001f24:	d1f2      	bne.n	8001f0c <sbrk_aligned+0x24>
 8001f26:	e7ef      	b.n	8001f08 <sbrk_aligned+0x20>
 8001f28:	200002dc 	.word	0x200002dc

08001f2c <_malloc_r>:
 8001f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f2e:	2203      	movs	r2, #3
 8001f30:	1ccb      	adds	r3, r1, #3
 8001f32:	4393      	bics	r3, r2
 8001f34:	3308      	adds	r3, #8
 8001f36:	0005      	movs	r5, r0
 8001f38:	001f      	movs	r7, r3
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d234      	bcs.n	8001fa8 <_malloc_r+0x7c>
 8001f3e:	270c      	movs	r7, #12
 8001f40:	42b9      	cmp	r1, r7
 8001f42:	d833      	bhi.n	8001fac <_malloc_r+0x80>
 8001f44:	0028      	movs	r0, r5
 8001f46:	f000 f871 	bl	800202c <__malloc_lock>
 8001f4a:	4e37      	ldr	r6, [pc, #220]	@ (8002028 <_malloc_r+0xfc>)
 8001f4c:	6833      	ldr	r3, [r6, #0]
 8001f4e:	001c      	movs	r4, r3
 8001f50:	2c00      	cmp	r4, #0
 8001f52:	d12f      	bne.n	8001fb4 <_malloc_r+0x88>
 8001f54:	0039      	movs	r1, r7
 8001f56:	0028      	movs	r0, r5
 8001f58:	f7ff ffc6 	bl	8001ee8 <sbrk_aligned>
 8001f5c:	0004      	movs	r4, r0
 8001f5e:	1c43      	adds	r3, r0, #1
 8001f60:	d15f      	bne.n	8002022 <_malloc_r+0xf6>
 8001f62:	6834      	ldr	r4, [r6, #0]
 8001f64:	9400      	str	r4, [sp, #0]
 8001f66:	9b00      	ldr	r3, [sp, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d14a      	bne.n	8002002 <_malloc_r+0xd6>
 8001f6c:	2c00      	cmp	r4, #0
 8001f6e:	d052      	beq.n	8002016 <_malloc_r+0xea>
 8001f70:	6823      	ldr	r3, [r4, #0]
 8001f72:	0028      	movs	r0, r5
 8001f74:	18e3      	adds	r3, r4, r3
 8001f76:	9900      	ldr	r1, [sp, #0]
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	f000 fcf9 	bl	8002970 <_sbrk_r>
 8001f7e:	9b01      	ldr	r3, [sp, #4]
 8001f80:	4283      	cmp	r3, r0
 8001f82:	d148      	bne.n	8002016 <_malloc_r+0xea>
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	0028      	movs	r0, r5
 8001f88:	1aff      	subs	r7, r7, r3
 8001f8a:	0039      	movs	r1, r7
 8001f8c:	f7ff ffac 	bl	8001ee8 <sbrk_aligned>
 8001f90:	3001      	adds	r0, #1
 8001f92:	d040      	beq.n	8002016 <_malloc_r+0xea>
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	19db      	adds	r3, r3, r7
 8001f98:	6023      	str	r3, [r4, #0]
 8001f9a:	6833      	ldr	r3, [r6, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d133      	bne.n	800200a <_malloc_r+0xde>
 8001fa2:	9b00      	ldr	r3, [sp, #0]
 8001fa4:	6033      	str	r3, [r6, #0]
 8001fa6:	e019      	b.n	8001fdc <_malloc_r+0xb0>
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	dac9      	bge.n	8001f40 <_malloc_r+0x14>
 8001fac:	230c      	movs	r3, #12
 8001fae:	602b      	str	r3, [r5, #0]
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fb4:	6821      	ldr	r1, [r4, #0]
 8001fb6:	1bc9      	subs	r1, r1, r7
 8001fb8:	d420      	bmi.n	8001ffc <_malloc_r+0xd0>
 8001fba:	290b      	cmp	r1, #11
 8001fbc:	d90a      	bls.n	8001fd4 <_malloc_r+0xa8>
 8001fbe:	19e2      	adds	r2, r4, r7
 8001fc0:	6027      	str	r7, [r4, #0]
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	d104      	bne.n	8001fd0 <_malloc_r+0xa4>
 8001fc6:	6032      	str	r2, [r6, #0]
 8001fc8:	6863      	ldr	r3, [r4, #4]
 8001fca:	6011      	str	r1, [r2, #0]
 8001fcc:	6053      	str	r3, [r2, #4]
 8001fce:	e005      	b.n	8001fdc <_malloc_r+0xb0>
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	e7f9      	b.n	8001fc8 <_malloc_r+0x9c>
 8001fd4:	6862      	ldr	r2, [r4, #4]
 8001fd6:	42a3      	cmp	r3, r4
 8001fd8:	d10e      	bne.n	8001ff8 <_malloc_r+0xcc>
 8001fda:	6032      	str	r2, [r6, #0]
 8001fdc:	0028      	movs	r0, r5
 8001fde:	f000 f82d 	bl	800203c <__malloc_unlock>
 8001fe2:	0020      	movs	r0, r4
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	300b      	adds	r0, #11
 8001fe8:	1d23      	adds	r3, r4, #4
 8001fea:	4390      	bics	r0, r2
 8001fec:	1ac2      	subs	r2, r0, r3
 8001fee:	4298      	cmp	r0, r3
 8001ff0:	d0df      	beq.n	8001fb2 <_malloc_r+0x86>
 8001ff2:	1a1b      	subs	r3, r3, r0
 8001ff4:	50a3      	str	r3, [r4, r2]
 8001ff6:	e7dc      	b.n	8001fb2 <_malloc_r+0x86>
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e7ef      	b.n	8001fdc <_malloc_r+0xb0>
 8001ffc:	0023      	movs	r3, r4
 8001ffe:	6864      	ldr	r4, [r4, #4]
 8002000:	e7a6      	b.n	8001f50 <_malloc_r+0x24>
 8002002:	9c00      	ldr	r4, [sp, #0]
 8002004:	6863      	ldr	r3, [r4, #4]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	e7ad      	b.n	8001f66 <_malloc_r+0x3a>
 800200a:	001a      	movs	r2, r3
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	42a3      	cmp	r3, r4
 8002010:	d1fb      	bne.n	800200a <_malloc_r+0xde>
 8002012:	2300      	movs	r3, #0
 8002014:	e7da      	b.n	8001fcc <_malloc_r+0xa0>
 8002016:	230c      	movs	r3, #12
 8002018:	0028      	movs	r0, r5
 800201a:	602b      	str	r3, [r5, #0]
 800201c:	f000 f80e 	bl	800203c <__malloc_unlock>
 8002020:	e7c6      	b.n	8001fb0 <_malloc_r+0x84>
 8002022:	6007      	str	r7, [r0, #0]
 8002024:	e7da      	b.n	8001fdc <_malloc_r+0xb0>
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	200002e0 	.word	0x200002e0

0800202c <__malloc_lock>:
 800202c:	b510      	push	{r4, lr}
 800202e:	4802      	ldr	r0, [pc, #8]	@ (8002038 <__malloc_lock+0xc>)
 8002030:	f7ff fee5 	bl	8001dfe <__retarget_lock_acquire_recursive>
 8002034:	bd10      	pop	{r4, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	200002d8 	.word	0x200002d8

0800203c <__malloc_unlock>:
 800203c:	b510      	push	{r4, lr}
 800203e:	4802      	ldr	r0, [pc, #8]	@ (8002048 <__malloc_unlock+0xc>)
 8002040:	f7ff fede 	bl	8001e00 <__retarget_lock_release_recursive>
 8002044:	bd10      	pop	{r4, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	200002d8 	.word	0x200002d8

0800204c <__sfputc_r>:
 800204c:	6893      	ldr	r3, [r2, #8]
 800204e:	b510      	push	{r4, lr}
 8002050:	3b01      	subs	r3, #1
 8002052:	6093      	str	r3, [r2, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	da04      	bge.n	8002062 <__sfputc_r+0x16>
 8002058:	6994      	ldr	r4, [r2, #24]
 800205a:	42a3      	cmp	r3, r4
 800205c:	db07      	blt.n	800206e <__sfputc_r+0x22>
 800205e:	290a      	cmp	r1, #10
 8002060:	d005      	beq.n	800206e <__sfputc_r+0x22>
 8002062:	6813      	ldr	r3, [r2, #0]
 8002064:	1c58      	adds	r0, r3, #1
 8002066:	6010      	str	r0, [r2, #0]
 8002068:	7019      	strb	r1, [r3, #0]
 800206a:	0008      	movs	r0, r1
 800206c:	bd10      	pop	{r4, pc}
 800206e:	f7ff fd19 	bl	8001aa4 <__swbuf_r>
 8002072:	0001      	movs	r1, r0
 8002074:	e7f9      	b.n	800206a <__sfputc_r+0x1e>

08002076 <__sfputs_r>:
 8002076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002078:	0006      	movs	r6, r0
 800207a:	000f      	movs	r7, r1
 800207c:	0014      	movs	r4, r2
 800207e:	18d5      	adds	r5, r2, r3
 8002080:	42ac      	cmp	r4, r5
 8002082:	d101      	bne.n	8002088 <__sfputs_r+0x12>
 8002084:	2000      	movs	r0, #0
 8002086:	e007      	b.n	8002098 <__sfputs_r+0x22>
 8002088:	7821      	ldrb	r1, [r4, #0]
 800208a:	003a      	movs	r2, r7
 800208c:	0030      	movs	r0, r6
 800208e:	f7ff ffdd 	bl	800204c <__sfputc_r>
 8002092:	3401      	adds	r4, #1
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d1f3      	bne.n	8002080 <__sfputs_r+0xa>
 8002098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800209c <_vfiprintf_r>:
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b0a1      	sub	sp, #132	@ 0x84
 80020a0:	000f      	movs	r7, r1
 80020a2:	0015      	movs	r5, r2
 80020a4:	001e      	movs	r6, r3
 80020a6:	9003      	str	r0, [sp, #12]
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d004      	beq.n	80020b6 <_vfiprintf_r+0x1a>
 80020ac:	6a03      	ldr	r3, [r0, #32]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <_vfiprintf_r+0x1a>
 80020b2:	f7ff fb3d 	bl	8001730 <__sinit>
 80020b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020b8:	07db      	lsls	r3, r3, #31
 80020ba:	d405      	bmi.n	80020c8 <_vfiprintf_r+0x2c>
 80020bc:	89bb      	ldrh	r3, [r7, #12]
 80020be:	059b      	lsls	r3, r3, #22
 80020c0:	d402      	bmi.n	80020c8 <_vfiprintf_r+0x2c>
 80020c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80020c4:	f7ff fe9b 	bl	8001dfe <__retarget_lock_acquire_recursive>
 80020c8:	89bb      	ldrh	r3, [r7, #12]
 80020ca:	071b      	lsls	r3, r3, #28
 80020cc:	d502      	bpl.n	80020d4 <_vfiprintf_r+0x38>
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d113      	bne.n	80020fc <_vfiprintf_r+0x60>
 80020d4:	0039      	movs	r1, r7
 80020d6:	9803      	ldr	r0, [sp, #12]
 80020d8:	f7ff fd26 	bl	8001b28 <__swsetup_r>
 80020dc:	2800      	cmp	r0, #0
 80020de:	d00d      	beq.n	80020fc <_vfiprintf_r+0x60>
 80020e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020e2:	07db      	lsls	r3, r3, #31
 80020e4:	d503      	bpl.n	80020ee <_vfiprintf_r+0x52>
 80020e6:	2001      	movs	r0, #1
 80020e8:	4240      	negs	r0, r0
 80020ea:	b021      	add	sp, #132	@ 0x84
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	89bb      	ldrh	r3, [r7, #12]
 80020f0:	059b      	lsls	r3, r3, #22
 80020f2:	d4f8      	bmi.n	80020e6 <_vfiprintf_r+0x4a>
 80020f4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80020f6:	f7ff fe83 	bl	8001e00 <__retarget_lock_release_recursive>
 80020fa:	e7f4      	b.n	80020e6 <_vfiprintf_r+0x4a>
 80020fc:	2300      	movs	r3, #0
 80020fe:	ac08      	add	r4, sp, #32
 8002100:	6163      	str	r3, [r4, #20]
 8002102:	3320      	adds	r3, #32
 8002104:	7663      	strb	r3, [r4, #25]
 8002106:	3310      	adds	r3, #16
 8002108:	76a3      	strb	r3, [r4, #26]
 800210a:	9607      	str	r6, [sp, #28]
 800210c:	002e      	movs	r6, r5
 800210e:	7833      	ldrb	r3, [r6, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <_vfiprintf_r+0x7c>
 8002114:	2b25      	cmp	r3, #37	@ 0x25
 8002116:	d148      	bne.n	80021aa <_vfiprintf_r+0x10e>
 8002118:	1b73      	subs	r3, r6, r5
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	42ae      	cmp	r6, r5
 800211e:	d00b      	beq.n	8002138 <_vfiprintf_r+0x9c>
 8002120:	002a      	movs	r2, r5
 8002122:	0039      	movs	r1, r7
 8002124:	9803      	ldr	r0, [sp, #12]
 8002126:	f7ff ffa6 	bl	8002076 <__sfputs_r>
 800212a:	3001      	adds	r0, #1
 800212c:	d100      	bne.n	8002130 <_vfiprintf_r+0x94>
 800212e:	e0ae      	b.n	800228e <_vfiprintf_r+0x1f2>
 8002130:	6963      	ldr	r3, [r4, #20]
 8002132:	9a05      	ldr	r2, [sp, #20]
 8002134:	189b      	adds	r3, r3, r2
 8002136:	6163      	str	r3, [r4, #20]
 8002138:	7833      	ldrb	r3, [r6, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d100      	bne.n	8002140 <_vfiprintf_r+0xa4>
 800213e:	e0a6      	b.n	800228e <_vfiprintf_r+0x1f2>
 8002140:	2201      	movs	r2, #1
 8002142:	2300      	movs	r3, #0
 8002144:	4252      	negs	r2, r2
 8002146:	6062      	str	r2, [r4, #4]
 8002148:	a904      	add	r1, sp, #16
 800214a:	3254      	adds	r2, #84	@ 0x54
 800214c:	1852      	adds	r2, r2, r1
 800214e:	1c75      	adds	r5, r6, #1
 8002150:	6023      	str	r3, [r4, #0]
 8002152:	60e3      	str	r3, [r4, #12]
 8002154:	60a3      	str	r3, [r4, #8]
 8002156:	7013      	strb	r3, [r2, #0]
 8002158:	65a3      	str	r3, [r4, #88]	@ 0x58
 800215a:	4b59      	ldr	r3, [pc, #356]	@ (80022c0 <_vfiprintf_r+0x224>)
 800215c:	2205      	movs	r2, #5
 800215e:	0018      	movs	r0, r3
 8002160:	7829      	ldrb	r1, [r5, #0]
 8002162:	9305      	str	r3, [sp, #20]
 8002164:	f000 fc16 	bl	8002994 <memchr>
 8002168:	1c6e      	adds	r6, r5, #1
 800216a:	2800      	cmp	r0, #0
 800216c:	d11f      	bne.n	80021ae <_vfiprintf_r+0x112>
 800216e:	6822      	ldr	r2, [r4, #0]
 8002170:	06d3      	lsls	r3, r2, #27
 8002172:	d504      	bpl.n	800217e <_vfiprintf_r+0xe2>
 8002174:	2353      	movs	r3, #83	@ 0x53
 8002176:	a904      	add	r1, sp, #16
 8002178:	185b      	adds	r3, r3, r1
 800217a:	2120      	movs	r1, #32
 800217c:	7019      	strb	r1, [r3, #0]
 800217e:	0713      	lsls	r3, r2, #28
 8002180:	d504      	bpl.n	800218c <_vfiprintf_r+0xf0>
 8002182:	2353      	movs	r3, #83	@ 0x53
 8002184:	a904      	add	r1, sp, #16
 8002186:	185b      	adds	r3, r3, r1
 8002188:	212b      	movs	r1, #43	@ 0x2b
 800218a:	7019      	strb	r1, [r3, #0]
 800218c:	782b      	ldrb	r3, [r5, #0]
 800218e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002190:	d016      	beq.n	80021c0 <_vfiprintf_r+0x124>
 8002192:	002e      	movs	r6, r5
 8002194:	2100      	movs	r1, #0
 8002196:	200a      	movs	r0, #10
 8002198:	68e3      	ldr	r3, [r4, #12]
 800219a:	7832      	ldrb	r2, [r6, #0]
 800219c:	1c75      	adds	r5, r6, #1
 800219e:	3a30      	subs	r2, #48	@ 0x30
 80021a0:	2a09      	cmp	r2, #9
 80021a2:	d950      	bls.n	8002246 <_vfiprintf_r+0x1aa>
 80021a4:	2900      	cmp	r1, #0
 80021a6:	d111      	bne.n	80021cc <_vfiprintf_r+0x130>
 80021a8:	e017      	b.n	80021da <_vfiprintf_r+0x13e>
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7af      	b.n	800210e <_vfiprintf_r+0x72>
 80021ae:	9b05      	ldr	r3, [sp, #20]
 80021b0:	6822      	ldr	r2, [r4, #0]
 80021b2:	1ac0      	subs	r0, r0, r3
 80021b4:	2301      	movs	r3, #1
 80021b6:	4083      	lsls	r3, r0
 80021b8:	4313      	orrs	r3, r2
 80021ba:	0035      	movs	r5, r6
 80021bc:	6023      	str	r3, [r4, #0]
 80021be:	e7cc      	b.n	800215a <_vfiprintf_r+0xbe>
 80021c0:	9b07      	ldr	r3, [sp, #28]
 80021c2:	1d19      	adds	r1, r3, #4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	9107      	str	r1, [sp, #28]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db01      	blt.n	80021d0 <_vfiprintf_r+0x134>
 80021cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80021ce:	e004      	b.n	80021da <_vfiprintf_r+0x13e>
 80021d0:	425b      	negs	r3, r3
 80021d2:	60e3      	str	r3, [r4, #12]
 80021d4:	2302      	movs	r3, #2
 80021d6:	4313      	orrs	r3, r2
 80021d8:	6023      	str	r3, [r4, #0]
 80021da:	7833      	ldrb	r3, [r6, #0]
 80021dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80021de:	d10c      	bne.n	80021fa <_vfiprintf_r+0x15e>
 80021e0:	7873      	ldrb	r3, [r6, #1]
 80021e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80021e4:	d134      	bne.n	8002250 <_vfiprintf_r+0x1b4>
 80021e6:	9b07      	ldr	r3, [sp, #28]
 80021e8:	3602      	adds	r6, #2
 80021ea:	1d1a      	adds	r2, r3, #4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	9207      	str	r2, [sp, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	da01      	bge.n	80021f8 <_vfiprintf_r+0x15c>
 80021f4:	2301      	movs	r3, #1
 80021f6:	425b      	negs	r3, r3
 80021f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80021fa:	4d32      	ldr	r5, [pc, #200]	@ (80022c4 <_vfiprintf_r+0x228>)
 80021fc:	2203      	movs	r2, #3
 80021fe:	0028      	movs	r0, r5
 8002200:	7831      	ldrb	r1, [r6, #0]
 8002202:	f000 fbc7 	bl	8002994 <memchr>
 8002206:	2800      	cmp	r0, #0
 8002208:	d006      	beq.n	8002218 <_vfiprintf_r+0x17c>
 800220a:	2340      	movs	r3, #64	@ 0x40
 800220c:	1b40      	subs	r0, r0, r5
 800220e:	4083      	lsls	r3, r0
 8002210:	6822      	ldr	r2, [r4, #0]
 8002212:	3601      	adds	r6, #1
 8002214:	4313      	orrs	r3, r2
 8002216:	6023      	str	r3, [r4, #0]
 8002218:	7831      	ldrb	r1, [r6, #0]
 800221a:	2206      	movs	r2, #6
 800221c:	482a      	ldr	r0, [pc, #168]	@ (80022c8 <_vfiprintf_r+0x22c>)
 800221e:	1c75      	adds	r5, r6, #1
 8002220:	7621      	strb	r1, [r4, #24]
 8002222:	f000 fbb7 	bl	8002994 <memchr>
 8002226:	2800      	cmp	r0, #0
 8002228:	d040      	beq.n	80022ac <_vfiprintf_r+0x210>
 800222a:	4b28      	ldr	r3, [pc, #160]	@ (80022cc <_vfiprintf_r+0x230>)
 800222c:	2b00      	cmp	r3, #0
 800222e:	d122      	bne.n	8002276 <_vfiprintf_r+0x1da>
 8002230:	2207      	movs	r2, #7
 8002232:	9b07      	ldr	r3, [sp, #28]
 8002234:	3307      	adds	r3, #7
 8002236:	4393      	bics	r3, r2
 8002238:	3308      	adds	r3, #8
 800223a:	9307      	str	r3, [sp, #28]
 800223c:	6963      	ldr	r3, [r4, #20]
 800223e:	9a04      	ldr	r2, [sp, #16]
 8002240:	189b      	adds	r3, r3, r2
 8002242:	6163      	str	r3, [r4, #20]
 8002244:	e762      	b.n	800210c <_vfiprintf_r+0x70>
 8002246:	4343      	muls	r3, r0
 8002248:	002e      	movs	r6, r5
 800224a:	2101      	movs	r1, #1
 800224c:	189b      	adds	r3, r3, r2
 800224e:	e7a4      	b.n	800219a <_vfiprintf_r+0xfe>
 8002250:	2300      	movs	r3, #0
 8002252:	200a      	movs	r0, #10
 8002254:	0019      	movs	r1, r3
 8002256:	3601      	adds	r6, #1
 8002258:	6063      	str	r3, [r4, #4]
 800225a:	7832      	ldrb	r2, [r6, #0]
 800225c:	1c75      	adds	r5, r6, #1
 800225e:	3a30      	subs	r2, #48	@ 0x30
 8002260:	2a09      	cmp	r2, #9
 8002262:	d903      	bls.n	800226c <_vfiprintf_r+0x1d0>
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0c8      	beq.n	80021fa <_vfiprintf_r+0x15e>
 8002268:	9109      	str	r1, [sp, #36]	@ 0x24
 800226a:	e7c6      	b.n	80021fa <_vfiprintf_r+0x15e>
 800226c:	4341      	muls	r1, r0
 800226e:	002e      	movs	r6, r5
 8002270:	2301      	movs	r3, #1
 8002272:	1889      	adds	r1, r1, r2
 8002274:	e7f1      	b.n	800225a <_vfiprintf_r+0x1be>
 8002276:	aa07      	add	r2, sp, #28
 8002278:	9200      	str	r2, [sp, #0]
 800227a:	0021      	movs	r1, r4
 800227c:	003a      	movs	r2, r7
 800227e:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <_vfiprintf_r+0x234>)
 8002280:	9803      	ldr	r0, [sp, #12]
 8002282:	e000      	b.n	8002286 <_vfiprintf_r+0x1ea>
 8002284:	bf00      	nop
 8002286:	9004      	str	r0, [sp, #16]
 8002288:	9b04      	ldr	r3, [sp, #16]
 800228a:	3301      	adds	r3, #1
 800228c:	d1d6      	bne.n	800223c <_vfiprintf_r+0x1a0>
 800228e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002290:	07db      	lsls	r3, r3, #31
 8002292:	d405      	bmi.n	80022a0 <_vfiprintf_r+0x204>
 8002294:	89bb      	ldrh	r3, [r7, #12]
 8002296:	059b      	lsls	r3, r3, #22
 8002298:	d402      	bmi.n	80022a0 <_vfiprintf_r+0x204>
 800229a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800229c:	f7ff fdb0 	bl	8001e00 <__retarget_lock_release_recursive>
 80022a0:	89bb      	ldrh	r3, [r7, #12]
 80022a2:	065b      	lsls	r3, r3, #25
 80022a4:	d500      	bpl.n	80022a8 <_vfiprintf_r+0x20c>
 80022a6:	e71e      	b.n	80020e6 <_vfiprintf_r+0x4a>
 80022a8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80022aa:	e71e      	b.n	80020ea <_vfiprintf_r+0x4e>
 80022ac:	aa07      	add	r2, sp, #28
 80022ae:	9200      	str	r2, [sp, #0]
 80022b0:	0021      	movs	r1, r4
 80022b2:	003a      	movs	r2, r7
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <_vfiprintf_r+0x234>)
 80022b6:	9803      	ldr	r0, [sp, #12]
 80022b8:	f000 f87c 	bl	80023b4 <_printf_i>
 80022bc:	e7e3      	b.n	8002286 <_vfiprintf_r+0x1ea>
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	08003042 	.word	0x08003042
 80022c4:	08003048 	.word	0x08003048
 80022c8:	0800304c 	.word	0x0800304c
 80022cc:	00000000 	.word	0x00000000
 80022d0:	08002077 	.word	0x08002077

080022d4 <_printf_common>:
 80022d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022d6:	0016      	movs	r6, r2
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	688a      	ldr	r2, [r1, #8]
 80022dc:	690b      	ldr	r3, [r1, #16]
 80022de:	000c      	movs	r4, r1
 80022e0:	9000      	str	r0, [sp, #0]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	da00      	bge.n	80022e8 <_printf_common+0x14>
 80022e6:	0013      	movs	r3, r2
 80022e8:	0022      	movs	r2, r4
 80022ea:	6033      	str	r3, [r6, #0]
 80022ec:	3243      	adds	r2, #67	@ 0x43
 80022ee:	7812      	ldrb	r2, [r2, #0]
 80022f0:	2a00      	cmp	r2, #0
 80022f2:	d001      	beq.n	80022f8 <_printf_common+0x24>
 80022f4:	3301      	adds	r3, #1
 80022f6:	6033      	str	r3, [r6, #0]
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	069b      	lsls	r3, r3, #26
 80022fc:	d502      	bpl.n	8002304 <_printf_common+0x30>
 80022fe:	6833      	ldr	r3, [r6, #0]
 8002300:	3302      	adds	r3, #2
 8002302:	6033      	str	r3, [r6, #0]
 8002304:	6822      	ldr	r2, [r4, #0]
 8002306:	2306      	movs	r3, #6
 8002308:	0015      	movs	r5, r2
 800230a:	401d      	ands	r5, r3
 800230c:	421a      	tst	r2, r3
 800230e:	d027      	beq.n	8002360 <_printf_common+0x8c>
 8002310:	0023      	movs	r3, r4
 8002312:	3343      	adds	r3, #67	@ 0x43
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	1e5a      	subs	r2, r3, #1
 8002318:	4193      	sbcs	r3, r2
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	0692      	lsls	r2, r2, #26
 800231e:	d430      	bmi.n	8002382 <_printf_common+0xae>
 8002320:	0022      	movs	r2, r4
 8002322:	9901      	ldr	r1, [sp, #4]
 8002324:	9800      	ldr	r0, [sp, #0]
 8002326:	9d08      	ldr	r5, [sp, #32]
 8002328:	3243      	adds	r2, #67	@ 0x43
 800232a:	47a8      	blx	r5
 800232c:	3001      	adds	r0, #1
 800232e:	d025      	beq.n	800237c <_printf_common+0xa8>
 8002330:	2206      	movs	r2, #6
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	2500      	movs	r5, #0
 8002336:	4013      	ands	r3, r2
 8002338:	2b04      	cmp	r3, #4
 800233a:	d105      	bne.n	8002348 <_printf_common+0x74>
 800233c:	6833      	ldr	r3, [r6, #0]
 800233e:	68e5      	ldr	r5, [r4, #12]
 8002340:	1aed      	subs	r5, r5, r3
 8002342:	43eb      	mvns	r3, r5
 8002344:	17db      	asrs	r3, r3, #31
 8002346:	401d      	ands	r5, r3
 8002348:	68a3      	ldr	r3, [r4, #8]
 800234a:	6922      	ldr	r2, [r4, #16]
 800234c:	4293      	cmp	r3, r2
 800234e:	dd01      	ble.n	8002354 <_printf_common+0x80>
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	18ed      	adds	r5, r5, r3
 8002354:	2600      	movs	r6, #0
 8002356:	42b5      	cmp	r5, r6
 8002358:	d120      	bne.n	800239c <_printf_common+0xc8>
 800235a:	2000      	movs	r0, #0
 800235c:	e010      	b.n	8002380 <_printf_common+0xac>
 800235e:	3501      	adds	r5, #1
 8002360:	68e3      	ldr	r3, [r4, #12]
 8002362:	6832      	ldr	r2, [r6, #0]
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	42ab      	cmp	r3, r5
 8002368:	ddd2      	ble.n	8002310 <_printf_common+0x3c>
 800236a:	0022      	movs	r2, r4
 800236c:	2301      	movs	r3, #1
 800236e:	9901      	ldr	r1, [sp, #4]
 8002370:	9800      	ldr	r0, [sp, #0]
 8002372:	9f08      	ldr	r7, [sp, #32]
 8002374:	3219      	adds	r2, #25
 8002376:	47b8      	blx	r7
 8002378:	3001      	adds	r0, #1
 800237a:	d1f0      	bne.n	800235e <_printf_common+0x8a>
 800237c:	2001      	movs	r0, #1
 800237e:	4240      	negs	r0, r0
 8002380:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002382:	2030      	movs	r0, #48	@ 0x30
 8002384:	18e1      	adds	r1, r4, r3
 8002386:	3143      	adds	r1, #67	@ 0x43
 8002388:	7008      	strb	r0, [r1, #0]
 800238a:	0021      	movs	r1, r4
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	3145      	adds	r1, #69	@ 0x45
 8002390:	7809      	ldrb	r1, [r1, #0]
 8002392:	18a2      	adds	r2, r4, r2
 8002394:	3243      	adds	r2, #67	@ 0x43
 8002396:	3302      	adds	r3, #2
 8002398:	7011      	strb	r1, [r2, #0]
 800239a:	e7c1      	b.n	8002320 <_printf_common+0x4c>
 800239c:	0022      	movs	r2, r4
 800239e:	2301      	movs	r3, #1
 80023a0:	9901      	ldr	r1, [sp, #4]
 80023a2:	9800      	ldr	r0, [sp, #0]
 80023a4:	9f08      	ldr	r7, [sp, #32]
 80023a6:	321a      	adds	r2, #26
 80023a8:	47b8      	blx	r7
 80023aa:	3001      	adds	r0, #1
 80023ac:	d0e6      	beq.n	800237c <_printf_common+0xa8>
 80023ae:	3601      	adds	r6, #1
 80023b0:	e7d1      	b.n	8002356 <_printf_common+0x82>
	...

080023b4 <_printf_i>:
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	b08b      	sub	sp, #44	@ 0x2c
 80023b8:	9206      	str	r2, [sp, #24]
 80023ba:	000a      	movs	r2, r1
 80023bc:	3243      	adds	r2, #67	@ 0x43
 80023be:	9307      	str	r3, [sp, #28]
 80023c0:	9005      	str	r0, [sp, #20]
 80023c2:	9203      	str	r2, [sp, #12]
 80023c4:	7e0a      	ldrb	r2, [r1, #24]
 80023c6:	000c      	movs	r4, r1
 80023c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80023ca:	2a78      	cmp	r2, #120	@ 0x78
 80023cc:	d809      	bhi.n	80023e2 <_printf_i+0x2e>
 80023ce:	2a62      	cmp	r2, #98	@ 0x62
 80023d0:	d80b      	bhi.n	80023ea <_printf_i+0x36>
 80023d2:	2a00      	cmp	r2, #0
 80023d4:	d100      	bne.n	80023d8 <_printf_i+0x24>
 80023d6:	e0bc      	b.n	8002552 <_printf_i+0x19e>
 80023d8:	497b      	ldr	r1, [pc, #492]	@ (80025c8 <_printf_i+0x214>)
 80023da:	9104      	str	r1, [sp, #16]
 80023dc:	2a58      	cmp	r2, #88	@ 0x58
 80023de:	d100      	bne.n	80023e2 <_printf_i+0x2e>
 80023e0:	e090      	b.n	8002504 <_printf_i+0x150>
 80023e2:	0025      	movs	r5, r4
 80023e4:	3542      	adds	r5, #66	@ 0x42
 80023e6:	702a      	strb	r2, [r5, #0]
 80023e8:	e022      	b.n	8002430 <_printf_i+0x7c>
 80023ea:	0010      	movs	r0, r2
 80023ec:	3863      	subs	r0, #99	@ 0x63
 80023ee:	2815      	cmp	r0, #21
 80023f0:	d8f7      	bhi.n	80023e2 <_printf_i+0x2e>
 80023f2:	f7fd fe91 	bl	8000118 <__gnu_thumb1_case_shi>
 80023f6:	0016      	.short	0x0016
 80023f8:	fff6001f 	.word	0xfff6001f
 80023fc:	fff6fff6 	.word	0xfff6fff6
 8002400:	001ffff6 	.word	0x001ffff6
 8002404:	fff6fff6 	.word	0xfff6fff6
 8002408:	fff6fff6 	.word	0xfff6fff6
 800240c:	003600a1 	.word	0x003600a1
 8002410:	fff60080 	.word	0xfff60080
 8002414:	00b2fff6 	.word	0x00b2fff6
 8002418:	0036fff6 	.word	0x0036fff6
 800241c:	fff6fff6 	.word	0xfff6fff6
 8002420:	0084      	.short	0x0084
 8002422:	0025      	movs	r5, r4
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	3542      	adds	r5, #66	@ 0x42
 8002428:	1d11      	adds	r1, r2, #4
 800242a:	6019      	str	r1, [r3, #0]
 800242c:	6813      	ldr	r3, [r2, #0]
 800242e:	702b      	strb	r3, [r5, #0]
 8002430:	2301      	movs	r3, #1
 8002432:	e0a0      	b.n	8002576 <_printf_i+0x1c2>
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	6809      	ldr	r1, [r1, #0]
 8002438:	1d02      	adds	r2, r0, #4
 800243a:	060d      	lsls	r5, r1, #24
 800243c:	d50b      	bpl.n	8002456 <_printf_i+0xa2>
 800243e:	6806      	ldr	r6, [r0, #0]
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	2e00      	cmp	r6, #0
 8002444:	da03      	bge.n	800244e <_printf_i+0x9a>
 8002446:	232d      	movs	r3, #45	@ 0x2d
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	4276      	negs	r6, r6
 800244c:	7013      	strb	r3, [r2, #0]
 800244e:	4b5e      	ldr	r3, [pc, #376]	@ (80025c8 <_printf_i+0x214>)
 8002450:	270a      	movs	r7, #10
 8002452:	9304      	str	r3, [sp, #16]
 8002454:	e018      	b.n	8002488 <_printf_i+0xd4>
 8002456:	6806      	ldr	r6, [r0, #0]
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	0649      	lsls	r1, r1, #25
 800245c:	d5f1      	bpl.n	8002442 <_printf_i+0x8e>
 800245e:	b236      	sxth	r6, r6
 8002460:	e7ef      	b.n	8002442 <_printf_i+0x8e>
 8002462:	6808      	ldr	r0, [r1, #0]
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	c940      	ldmia	r1!, {r6}
 8002468:	0605      	lsls	r5, r0, #24
 800246a:	d402      	bmi.n	8002472 <_printf_i+0xbe>
 800246c:	0640      	lsls	r0, r0, #25
 800246e:	d500      	bpl.n	8002472 <_printf_i+0xbe>
 8002470:	b2b6      	uxth	r6, r6
 8002472:	6019      	str	r1, [r3, #0]
 8002474:	4b54      	ldr	r3, [pc, #336]	@ (80025c8 <_printf_i+0x214>)
 8002476:	270a      	movs	r7, #10
 8002478:	9304      	str	r3, [sp, #16]
 800247a:	2a6f      	cmp	r2, #111	@ 0x6f
 800247c:	d100      	bne.n	8002480 <_printf_i+0xcc>
 800247e:	3f02      	subs	r7, #2
 8002480:	0023      	movs	r3, r4
 8002482:	2200      	movs	r2, #0
 8002484:	3343      	adds	r3, #67	@ 0x43
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	6863      	ldr	r3, [r4, #4]
 800248a:	60a3      	str	r3, [r4, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db03      	blt.n	8002498 <_printf_i+0xe4>
 8002490:	2104      	movs	r1, #4
 8002492:	6822      	ldr	r2, [r4, #0]
 8002494:	438a      	bics	r2, r1
 8002496:	6022      	str	r2, [r4, #0]
 8002498:	2e00      	cmp	r6, #0
 800249a:	d102      	bne.n	80024a2 <_printf_i+0xee>
 800249c:	9d03      	ldr	r5, [sp, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00c      	beq.n	80024bc <_printf_i+0x108>
 80024a2:	9d03      	ldr	r5, [sp, #12]
 80024a4:	0030      	movs	r0, r6
 80024a6:	0039      	movs	r1, r7
 80024a8:	f7fd fec6 	bl	8000238 <__aeabi_uidivmod>
 80024ac:	9b04      	ldr	r3, [sp, #16]
 80024ae:	3d01      	subs	r5, #1
 80024b0:	5c5b      	ldrb	r3, [r3, r1]
 80024b2:	702b      	strb	r3, [r5, #0]
 80024b4:	0033      	movs	r3, r6
 80024b6:	0006      	movs	r6, r0
 80024b8:	429f      	cmp	r7, r3
 80024ba:	d9f3      	bls.n	80024a4 <_printf_i+0xf0>
 80024bc:	2f08      	cmp	r7, #8
 80024be:	d109      	bne.n	80024d4 <_printf_i+0x120>
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	07db      	lsls	r3, r3, #31
 80024c4:	d506      	bpl.n	80024d4 <_printf_i+0x120>
 80024c6:	6862      	ldr	r2, [r4, #4]
 80024c8:	6923      	ldr	r3, [r4, #16]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	dc02      	bgt.n	80024d4 <_printf_i+0x120>
 80024ce:	2330      	movs	r3, #48	@ 0x30
 80024d0:	3d01      	subs	r5, #1
 80024d2:	702b      	strb	r3, [r5, #0]
 80024d4:	9b03      	ldr	r3, [sp, #12]
 80024d6:	1b5b      	subs	r3, r3, r5
 80024d8:	6123      	str	r3, [r4, #16]
 80024da:	9b07      	ldr	r3, [sp, #28]
 80024dc:	0021      	movs	r1, r4
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	9805      	ldr	r0, [sp, #20]
 80024e2:	9b06      	ldr	r3, [sp, #24]
 80024e4:	aa09      	add	r2, sp, #36	@ 0x24
 80024e6:	f7ff fef5 	bl	80022d4 <_printf_common>
 80024ea:	3001      	adds	r0, #1
 80024ec:	d148      	bne.n	8002580 <_printf_i+0x1cc>
 80024ee:	2001      	movs	r0, #1
 80024f0:	4240      	negs	r0, r0
 80024f2:	b00b      	add	sp, #44	@ 0x2c
 80024f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f6:	2220      	movs	r2, #32
 80024f8:	6809      	ldr	r1, [r1, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	6022      	str	r2, [r4, #0]
 80024fe:	2278      	movs	r2, #120	@ 0x78
 8002500:	4932      	ldr	r1, [pc, #200]	@ (80025cc <_printf_i+0x218>)
 8002502:	9104      	str	r1, [sp, #16]
 8002504:	0021      	movs	r1, r4
 8002506:	3145      	adds	r1, #69	@ 0x45
 8002508:	700a      	strb	r2, [r1, #0]
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	6822      	ldr	r2, [r4, #0]
 800250e:	c940      	ldmia	r1!, {r6}
 8002510:	0610      	lsls	r0, r2, #24
 8002512:	d402      	bmi.n	800251a <_printf_i+0x166>
 8002514:	0650      	lsls	r0, r2, #25
 8002516:	d500      	bpl.n	800251a <_printf_i+0x166>
 8002518:	b2b6      	uxth	r6, r6
 800251a:	6019      	str	r1, [r3, #0]
 800251c:	07d3      	lsls	r3, r2, #31
 800251e:	d502      	bpl.n	8002526 <_printf_i+0x172>
 8002520:	2320      	movs	r3, #32
 8002522:	4313      	orrs	r3, r2
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	2e00      	cmp	r6, #0
 8002528:	d001      	beq.n	800252e <_printf_i+0x17a>
 800252a:	2710      	movs	r7, #16
 800252c:	e7a8      	b.n	8002480 <_printf_i+0xcc>
 800252e:	2220      	movs	r2, #32
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	4393      	bics	r3, r2
 8002534:	6023      	str	r3, [r4, #0]
 8002536:	e7f8      	b.n	800252a <_printf_i+0x176>
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	680d      	ldr	r5, [r1, #0]
 800253c:	1d10      	adds	r0, r2, #4
 800253e:	6949      	ldr	r1, [r1, #20]
 8002540:	6018      	str	r0, [r3, #0]
 8002542:	6813      	ldr	r3, [r2, #0]
 8002544:	062e      	lsls	r6, r5, #24
 8002546:	d501      	bpl.n	800254c <_printf_i+0x198>
 8002548:	6019      	str	r1, [r3, #0]
 800254a:	e002      	b.n	8002552 <_printf_i+0x19e>
 800254c:	066d      	lsls	r5, r5, #25
 800254e:	d5fb      	bpl.n	8002548 <_printf_i+0x194>
 8002550:	8019      	strh	r1, [r3, #0]
 8002552:	2300      	movs	r3, #0
 8002554:	9d03      	ldr	r5, [sp, #12]
 8002556:	6123      	str	r3, [r4, #16]
 8002558:	e7bf      	b.n	80024da <_printf_i+0x126>
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	1d11      	adds	r1, r2, #4
 800255e:	6019      	str	r1, [r3, #0]
 8002560:	6815      	ldr	r5, [r2, #0]
 8002562:	2100      	movs	r1, #0
 8002564:	0028      	movs	r0, r5
 8002566:	6862      	ldr	r2, [r4, #4]
 8002568:	f000 fa14 	bl	8002994 <memchr>
 800256c:	2800      	cmp	r0, #0
 800256e:	d001      	beq.n	8002574 <_printf_i+0x1c0>
 8002570:	1b40      	subs	r0, r0, r5
 8002572:	6060      	str	r0, [r4, #4]
 8002574:	6863      	ldr	r3, [r4, #4]
 8002576:	6123      	str	r3, [r4, #16]
 8002578:	2300      	movs	r3, #0
 800257a:	9a03      	ldr	r2, [sp, #12]
 800257c:	7013      	strb	r3, [r2, #0]
 800257e:	e7ac      	b.n	80024da <_printf_i+0x126>
 8002580:	002a      	movs	r2, r5
 8002582:	6923      	ldr	r3, [r4, #16]
 8002584:	9906      	ldr	r1, [sp, #24]
 8002586:	9805      	ldr	r0, [sp, #20]
 8002588:	9d07      	ldr	r5, [sp, #28]
 800258a:	47a8      	blx	r5
 800258c:	3001      	adds	r0, #1
 800258e:	d0ae      	beq.n	80024ee <_printf_i+0x13a>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	079b      	lsls	r3, r3, #30
 8002594:	d415      	bmi.n	80025c2 <_printf_i+0x20e>
 8002596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002598:	68e0      	ldr	r0, [r4, #12]
 800259a:	4298      	cmp	r0, r3
 800259c:	daa9      	bge.n	80024f2 <_printf_i+0x13e>
 800259e:	0018      	movs	r0, r3
 80025a0:	e7a7      	b.n	80024f2 <_printf_i+0x13e>
 80025a2:	0022      	movs	r2, r4
 80025a4:	2301      	movs	r3, #1
 80025a6:	9906      	ldr	r1, [sp, #24]
 80025a8:	9805      	ldr	r0, [sp, #20]
 80025aa:	9e07      	ldr	r6, [sp, #28]
 80025ac:	3219      	adds	r2, #25
 80025ae:	47b0      	blx	r6
 80025b0:	3001      	adds	r0, #1
 80025b2:	d09c      	beq.n	80024ee <_printf_i+0x13a>
 80025b4:	3501      	adds	r5, #1
 80025b6:	68e3      	ldr	r3, [r4, #12]
 80025b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	42ab      	cmp	r3, r5
 80025be:	dcf0      	bgt.n	80025a2 <_printf_i+0x1ee>
 80025c0:	e7e9      	b.n	8002596 <_printf_i+0x1e2>
 80025c2:	2500      	movs	r5, #0
 80025c4:	e7f7      	b.n	80025b6 <_printf_i+0x202>
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	08003053 	.word	0x08003053
 80025cc:	08003064 	.word	0x08003064

080025d0 <__sflush_r>:
 80025d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025d2:	220c      	movs	r2, #12
 80025d4:	5e8b      	ldrsh	r3, [r1, r2]
 80025d6:	0005      	movs	r5, r0
 80025d8:	000c      	movs	r4, r1
 80025da:	071a      	lsls	r2, r3, #28
 80025dc:	d456      	bmi.n	800268c <__sflush_r+0xbc>
 80025de:	684a      	ldr	r2, [r1, #4]
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	dc02      	bgt.n	80025ea <__sflush_r+0x1a>
 80025e4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	dd4e      	ble.n	8002688 <__sflush_r+0xb8>
 80025ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80025ec:	2f00      	cmp	r7, #0
 80025ee:	d04b      	beq.n	8002688 <__sflush_r+0xb8>
 80025f0:	2200      	movs	r2, #0
 80025f2:	2080      	movs	r0, #128	@ 0x80
 80025f4:	682e      	ldr	r6, [r5, #0]
 80025f6:	602a      	str	r2, [r5, #0]
 80025f8:	001a      	movs	r2, r3
 80025fa:	0140      	lsls	r0, r0, #5
 80025fc:	6a21      	ldr	r1, [r4, #32]
 80025fe:	4002      	ands	r2, r0
 8002600:	4203      	tst	r3, r0
 8002602:	d033      	beq.n	800266c <__sflush_r+0x9c>
 8002604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002606:	89a3      	ldrh	r3, [r4, #12]
 8002608:	075b      	lsls	r3, r3, #29
 800260a:	d506      	bpl.n	800261a <__sflush_r+0x4a>
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	1ad2      	subs	r2, r2, r3
 8002610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <__sflush_r+0x4a>
 8002616:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002618:	1ad2      	subs	r2, r2, r3
 800261a:	2300      	movs	r3, #0
 800261c:	0028      	movs	r0, r5
 800261e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002620:	6a21      	ldr	r1, [r4, #32]
 8002622:	47b8      	blx	r7
 8002624:	89a2      	ldrh	r2, [r4, #12]
 8002626:	1c43      	adds	r3, r0, #1
 8002628:	d106      	bne.n	8002638 <__sflush_r+0x68>
 800262a:	6829      	ldr	r1, [r5, #0]
 800262c:	291d      	cmp	r1, #29
 800262e:	d846      	bhi.n	80026be <__sflush_r+0xee>
 8002630:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <__sflush_r+0x108>)
 8002632:	410b      	asrs	r3, r1
 8002634:	07db      	lsls	r3, r3, #31
 8002636:	d442      	bmi.n	80026be <__sflush_r+0xee>
 8002638:	2300      	movs	r3, #0
 800263a:	6063      	str	r3, [r4, #4]
 800263c:	6923      	ldr	r3, [r4, #16]
 800263e:	6023      	str	r3, [r4, #0]
 8002640:	04d2      	lsls	r2, r2, #19
 8002642:	d505      	bpl.n	8002650 <__sflush_r+0x80>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	d102      	bne.n	800264e <__sflush_r+0x7e>
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d100      	bne.n	8002650 <__sflush_r+0x80>
 800264e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002652:	602e      	str	r6, [r5, #0]
 8002654:	2900      	cmp	r1, #0
 8002656:	d017      	beq.n	8002688 <__sflush_r+0xb8>
 8002658:	0023      	movs	r3, r4
 800265a:	3344      	adds	r3, #68	@ 0x44
 800265c:	4299      	cmp	r1, r3
 800265e:	d002      	beq.n	8002666 <__sflush_r+0x96>
 8002660:	0028      	movs	r0, r5
 8002662:	f7ff fbed 	bl	8001e40 <_free_r>
 8002666:	2300      	movs	r3, #0
 8002668:	6363      	str	r3, [r4, #52]	@ 0x34
 800266a:	e00d      	b.n	8002688 <__sflush_r+0xb8>
 800266c:	2301      	movs	r3, #1
 800266e:	0028      	movs	r0, r5
 8002670:	47b8      	blx	r7
 8002672:	0002      	movs	r2, r0
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d1c6      	bne.n	8002606 <__sflush_r+0x36>
 8002678:	682b      	ldr	r3, [r5, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0c3      	beq.n	8002606 <__sflush_r+0x36>
 800267e:	2b1d      	cmp	r3, #29
 8002680:	d001      	beq.n	8002686 <__sflush_r+0xb6>
 8002682:	2b16      	cmp	r3, #22
 8002684:	d11a      	bne.n	80026bc <__sflush_r+0xec>
 8002686:	602e      	str	r6, [r5, #0]
 8002688:	2000      	movs	r0, #0
 800268a:	e01e      	b.n	80026ca <__sflush_r+0xfa>
 800268c:	690e      	ldr	r6, [r1, #16]
 800268e:	2e00      	cmp	r6, #0
 8002690:	d0fa      	beq.n	8002688 <__sflush_r+0xb8>
 8002692:	680f      	ldr	r7, [r1, #0]
 8002694:	600e      	str	r6, [r1, #0]
 8002696:	1bba      	subs	r2, r7, r6
 8002698:	9201      	str	r2, [sp, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	079b      	lsls	r3, r3, #30
 800269e:	d100      	bne.n	80026a2 <__sflush_r+0xd2>
 80026a0:	694a      	ldr	r2, [r1, #20]
 80026a2:	60a2      	str	r2, [r4, #8]
 80026a4:	9b01      	ldr	r3, [sp, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	ddee      	ble.n	8002688 <__sflush_r+0xb8>
 80026aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80026ac:	0032      	movs	r2, r6
 80026ae:	001f      	movs	r7, r3
 80026b0:	0028      	movs	r0, r5
 80026b2:	9b01      	ldr	r3, [sp, #4]
 80026b4:	6a21      	ldr	r1, [r4, #32]
 80026b6:	47b8      	blx	r7
 80026b8:	2800      	cmp	r0, #0
 80026ba:	dc07      	bgt.n	80026cc <__sflush_r+0xfc>
 80026bc:	89a2      	ldrh	r2, [r4, #12]
 80026be:	2340      	movs	r3, #64	@ 0x40
 80026c0:	2001      	movs	r0, #1
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	81a3      	strh	r3, [r4, #12]
 80026c8:	4240      	negs	r0, r0
 80026ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026cc:	9b01      	ldr	r3, [sp, #4]
 80026ce:	1836      	adds	r6, r6, r0
 80026d0:	1a1b      	subs	r3, r3, r0
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	e7e6      	b.n	80026a4 <__sflush_r+0xd4>
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	dfbffffe 	.word	0xdfbffffe

080026dc <_fflush_r>:
 80026dc:	690b      	ldr	r3, [r1, #16]
 80026de:	b570      	push	{r4, r5, r6, lr}
 80026e0:	0005      	movs	r5, r0
 80026e2:	000c      	movs	r4, r1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_fflush_r+0x12>
 80026e8:	2500      	movs	r5, #0
 80026ea:	0028      	movs	r0, r5
 80026ec:	bd70      	pop	{r4, r5, r6, pc}
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d004      	beq.n	80026fc <_fflush_r+0x20>
 80026f2:	6a03      	ldr	r3, [r0, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <_fflush_r+0x20>
 80026f8:	f7ff f81a 	bl	8001730 <__sinit>
 80026fc:	220c      	movs	r2, #12
 80026fe:	5ea3      	ldrsh	r3, [r4, r2]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f1      	beq.n	80026e8 <_fflush_r+0xc>
 8002704:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002706:	07d2      	lsls	r2, r2, #31
 8002708:	d404      	bmi.n	8002714 <_fflush_r+0x38>
 800270a:	059b      	lsls	r3, r3, #22
 800270c:	d402      	bmi.n	8002714 <_fflush_r+0x38>
 800270e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002710:	f7ff fb75 	bl	8001dfe <__retarget_lock_acquire_recursive>
 8002714:	0028      	movs	r0, r5
 8002716:	0021      	movs	r1, r4
 8002718:	f7ff ff5a 	bl	80025d0 <__sflush_r>
 800271c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800271e:	0005      	movs	r5, r0
 8002720:	07db      	lsls	r3, r3, #31
 8002722:	d4e2      	bmi.n	80026ea <_fflush_r+0xe>
 8002724:	89a3      	ldrh	r3, [r4, #12]
 8002726:	059b      	lsls	r3, r3, #22
 8002728:	d4df      	bmi.n	80026ea <_fflush_r+0xe>
 800272a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800272c:	f7ff fb68 	bl	8001e00 <__retarget_lock_release_recursive>
 8002730:	e7db      	b.n	80026ea <_fflush_r+0xe>
	...

08002734 <fiprintf>:
 8002734:	b40e      	push	{r1, r2, r3}
 8002736:	b517      	push	{r0, r1, r2, r4, lr}
 8002738:	4c05      	ldr	r4, [pc, #20]	@ (8002750 <fiprintf+0x1c>)
 800273a:	ab05      	add	r3, sp, #20
 800273c:	cb04      	ldmia	r3!, {r2}
 800273e:	0001      	movs	r1, r0
 8002740:	6820      	ldr	r0, [r4, #0]
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	f7ff fcaa 	bl	800209c <_vfiprintf_r>
 8002748:	bc1e      	pop	{r1, r2, r3, r4}
 800274a:	bc08      	pop	{r3}
 800274c:	b003      	add	sp, #12
 800274e:	4718      	bx	r3
 8002750:	20000010 	.word	0x20000010

08002754 <_getc_r>:
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	0005      	movs	r5, r0
 8002758:	000c      	movs	r4, r1
 800275a:	2800      	cmp	r0, #0
 800275c:	d004      	beq.n	8002768 <_getc_r+0x14>
 800275e:	6a03      	ldr	r3, [r0, #32]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <_getc_r+0x14>
 8002764:	f7fe ffe4 	bl	8001730 <__sinit>
 8002768:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800276a:	07db      	lsls	r3, r3, #31
 800276c:	d405      	bmi.n	800277a <_getc_r+0x26>
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	059b      	lsls	r3, r3, #22
 8002772:	d402      	bmi.n	800277a <_getc_r+0x26>
 8002774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002776:	f7ff fb42 	bl	8001dfe <__retarget_lock_acquire_recursive>
 800277a:	6863      	ldr	r3, [r4, #4]
 800277c:	3b01      	subs	r3, #1
 800277e:	6063      	str	r3, [r4, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	da0f      	bge.n	80027a4 <_getc_r+0x50>
 8002784:	0028      	movs	r0, r5
 8002786:	0021      	movs	r1, r4
 8002788:	f000 f8b3 	bl	80028f2 <__srget_r>
 800278c:	0005      	movs	r5, r0
 800278e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002790:	07db      	lsls	r3, r3, #31
 8002792:	d405      	bmi.n	80027a0 <_getc_r+0x4c>
 8002794:	89a3      	ldrh	r3, [r4, #12]
 8002796:	059b      	lsls	r3, r3, #22
 8002798:	d402      	bmi.n	80027a0 <_getc_r+0x4c>
 800279a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800279c:	f7ff fb30 	bl	8001e00 <__retarget_lock_release_recursive>
 80027a0:	0028      	movs	r0, r5
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	6022      	str	r2, [r4, #0]
 80027aa:	781d      	ldrb	r5, [r3, #0]
 80027ac:	e7ef      	b.n	800278e <_getc_r+0x3a>
	...

080027b0 <__swhatbuf_r>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	000e      	movs	r6, r1
 80027b4:	001d      	movs	r5, r3
 80027b6:	230e      	movs	r3, #14
 80027b8:	5ec9      	ldrsh	r1, [r1, r3]
 80027ba:	0014      	movs	r4, r2
 80027bc:	b096      	sub	sp, #88	@ 0x58
 80027be:	2900      	cmp	r1, #0
 80027c0:	da0c      	bge.n	80027dc <__swhatbuf_r+0x2c>
 80027c2:	89b2      	ldrh	r2, [r6, #12]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	0011      	movs	r1, r2
 80027c8:	4019      	ands	r1, r3
 80027ca:	421a      	tst	r2, r3
 80027cc:	d114      	bne.n	80027f8 <__swhatbuf_r+0x48>
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	2000      	movs	r0, #0
 80027d4:	6029      	str	r1, [r5, #0]
 80027d6:	6023      	str	r3, [r4, #0]
 80027d8:	b016      	add	sp, #88	@ 0x58
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	466a      	mov	r2, sp
 80027de:	f000 f8a3 	bl	8002928 <_fstat_r>
 80027e2:	2800      	cmp	r0, #0
 80027e4:	dbed      	blt.n	80027c2 <__swhatbuf_r+0x12>
 80027e6:	23f0      	movs	r3, #240	@ 0xf0
 80027e8:	9901      	ldr	r1, [sp, #4]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	4019      	ands	r1, r3
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <__swhatbuf_r+0x50>)
 80027f0:	18c9      	adds	r1, r1, r3
 80027f2:	424b      	negs	r3, r1
 80027f4:	4159      	adcs	r1, r3
 80027f6:	e7ea      	b.n	80027ce <__swhatbuf_r+0x1e>
 80027f8:	2100      	movs	r1, #0
 80027fa:	2340      	movs	r3, #64	@ 0x40
 80027fc:	e7e9      	b.n	80027d2 <__swhatbuf_r+0x22>
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	ffffe000 	.word	0xffffe000

08002804 <__smakebuf_r>:
 8002804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002806:	2602      	movs	r6, #2
 8002808:	898b      	ldrh	r3, [r1, #12]
 800280a:	0005      	movs	r5, r0
 800280c:	000c      	movs	r4, r1
 800280e:	b085      	sub	sp, #20
 8002810:	4233      	tst	r3, r6
 8002812:	d007      	beq.n	8002824 <__smakebuf_r+0x20>
 8002814:	0023      	movs	r3, r4
 8002816:	3347      	adds	r3, #71	@ 0x47
 8002818:	6023      	str	r3, [r4, #0]
 800281a:	6123      	str	r3, [r4, #16]
 800281c:	2301      	movs	r3, #1
 800281e:	6163      	str	r3, [r4, #20]
 8002820:	b005      	add	sp, #20
 8002822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002824:	ab03      	add	r3, sp, #12
 8002826:	aa02      	add	r2, sp, #8
 8002828:	f7ff ffc2 	bl	80027b0 <__swhatbuf_r>
 800282c:	9f02      	ldr	r7, [sp, #8]
 800282e:	9001      	str	r0, [sp, #4]
 8002830:	0039      	movs	r1, r7
 8002832:	0028      	movs	r0, r5
 8002834:	f7ff fb7a 	bl	8001f2c <_malloc_r>
 8002838:	2800      	cmp	r0, #0
 800283a:	d108      	bne.n	800284e <__smakebuf_r+0x4a>
 800283c:	220c      	movs	r2, #12
 800283e:	5ea3      	ldrsh	r3, [r4, r2]
 8002840:	059a      	lsls	r2, r3, #22
 8002842:	d4ed      	bmi.n	8002820 <__smakebuf_r+0x1c>
 8002844:	2203      	movs	r2, #3
 8002846:	4393      	bics	r3, r2
 8002848:	431e      	orrs	r6, r3
 800284a:	81a6      	strh	r6, [r4, #12]
 800284c:	e7e2      	b.n	8002814 <__smakebuf_r+0x10>
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	89a2      	ldrh	r2, [r4, #12]
 8002852:	6020      	str	r0, [r4, #0]
 8002854:	4313      	orrs	r3, r2
 8002856:	81a3      	strh	r3, [r4, #12]
 8002858:	9b03      	ldr	r3, [sp, #12]
 800285a:	6120      	str	r0, [r4, #16]
 800285c:	6167      	str	r7, [r4, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00c      	beq.n	800287c <__smakebuf_r+0x78>
 8002862:	0028      	movs	r0, r5
 8002864:	230e      	movs	r3, #14
 8002866:	5ee1      	ldrsh	r1, [r4, r3]
 8002868:	f000 f870 	bl	800294c <_isatty_r>
 800286c:	2800      	cmp	r0, #0
 800286e:	d005      	beq.n	800287c <__smakebuf_r+0x78>
 8002870:	2303      	movs	r3, #3
 8002872:	89a2      	ldrh	r2, [r4, #12]
 8002874:	439a      	bics	r2, r3
 8002876:	3b02      	subs	r3, #2
 8002878:	4313      	orrs	r3, r2
 800287a:	81a3      	strh	r3, [r4, #12]
 800287c:	89a3      	ldrh	r3, [r4, #12]
 800287e:	9a01      	ldr	r2, [sp, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	81a3      	strh	r3, [r4, #12]
 8002884:	e7cc      	b.n	8002820 <__smakebuf_r+0x1c>

08002886 <_putc_r>:
 8002886:	b570      	push	{r4, r5, r6, lr}
 8002888:	0006      	movs	r6, r0
 800288a:	000d      	movs	r5, r1
 800288c:	0014      	movs	r4, r2
 800288e:	2800      	cmp	r0, #0
 8002890:	d004      	beq.n	800289c <_putc_r+0x16>
 8002892:	6a03      	ldr	r3, [r0, #32]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <_putc_r+0x16>
 8002898:	f7fe ff4a 	bl	8001730 <__sinit>
 800289c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800289e:	07db      	lsls	r3, r3, #31
 80028a0:	d405      	bmi.n	80028ae <_putc_r+0x28>
 80028a2:	89a3      	ldrh	r3, [r4, #12]
 80028a4:	059b      	lsls	r3, r3, #22
 80028a6:	d402      	bmi.n	80028ae <_putc_r+0x28>
 80028a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028aa:	f7ff faa8 	bl	8001dfe <__retarget_lock_acquire_recursive>
 80028ae:	68a3      	ldr	r3, [r4, #8]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	60a3      	str	r3, [r4, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	da05      	bge.n	80028c4 <_putc_r+0x3e>
 80028b8:	69a2      	ldr	r2, [r4, #24]
 80028ba:	4293      	cmp	r3, r2
 80028bc:	db12      	blt.n	80028e4 <_putc_r+0x5e>
 80028be:	b2eb      	uxtb	r3, r5
 80028c0:	2b0a      	cmp	r3, #10
 80028c2:	d00f      	beq.n	80028e4 <_putc_r+0x5e>
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	6022      	str	r2, [r4, #0]
 80028ca:	701d      	strb	r5, [r3, #0]
 80028cc:	b2ed      	uxtb	r5, r5
 80028ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028d0:	07db      	lsls	r3, r3, #31
 80028d2:	d405      	bmi.n	80028e0 <_putc_r+0x5a>
 80028d4:	89a3      	ldrh	r3, [r4, #12]
 80028d6:	059b      	lsls	r3, r3, #22
 80028d8:	d402      	bmi.n	80028e0 <_putc_r+0x5a>
 80028da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028dc:	f7ff fa90 	bl	8001e00 <__retarget_lock_release_recursive>
 80028e0:	0028      	movs	r0, r5
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	0029      	movs	r1, r5
 80028e6:	0022      	movs	r2, r4
 80028e8:	0030      	movs	r0, r6
 80028ea:	f7ff f8db 	bl	8001aa4 <__swbuf_r>
 80028ee:	0005      	movs	r5, r0
 80028f0:	e7ed      	b.n	80028ce <_putc_r+0x48>

080028f2 <__srget_r>:
 80028f2:	b570      	push	{r4, r5, r6, lr}
 80028f4:	0005      	movs	r5, r0
 80028f6:	000c      	movs	r4, r1
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d004      	beq.n	8002906 <__srget_r+0x14>
 80028fc:	6a03      	ldr	r3, [r0, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <__srget_r+0x14>
 8002902:	f7fe ff15 	bl	8001730 <__sinit>
 8002906:	0021      	movs	r1, r4
 8002908:	0028      	movs	r0, r5
 800290a:	f000 f863 	bl	80029d4 <__srefill_r>
 800290e:	2800      	cmp	r0, #0
 8002910:	d107      	bne.n	8002922 <__srget_r+0x30>
 8002912:	6863      	ldr	r3, [r4, #4]
 8002914:	3b01      	subs	r3, #1
 8002916:	6063      	str	r3, [r4, #4]
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	6022      	str	r2, [r4, #0]
 800291e:	7818      	ldrb	r0, [r3, #0]
 8002920:	bd70      	pop	{r4, r5, r6, pc}
 8002922:	2001      	movs	r0, #1
 8002924:	4240      	negs	r0, r0
 8002926:	e7fb      	b.n	8002920 <__srget_r+0x2e>

08002928 <_fstat_r>:
 8002928:	2300      	movs	r3, #0
 800292a:	b570      	push	{r4, r5, r6, lr}
 800292c:	4d06      	ldr	r5, [pc, #24]	@ (8002948 <_fstat_r+0x20>)
 800292e:	0004      	movs	r4, r0
 8002930:	0008      	movs	r0, r1
 8002932:	0011      	movs	r1, r2
 8002934:	602b      	str	r3, [r5, #0]
 8002936:	f7fe fbf7 	bl	8001128 <_fstat>
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	d103      	bne.n	8002946 <_fstat_r+0x1e>
 800293e:	682b      	ldr	r3, [r5, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d000      	beq.n	8002946 <_fstat_r+0x1e>
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	bd70      	pop	{r4, r5, r6, pc}
 8002948:	200002d4 	.word	0x200002d4

0800294c <_isatty_r>:
 800294c:	2300      	movs	r3, #0
 800294e:	b570      	push	{r4, r5, r6, lr}
 8002950:	4d06      	ldr	r5, [pc, #24]	@ (800296c <_isatty_r+0x20>)
 8002952:	0004      	movs	r4, r0
 8002954:	0008      	movs	r0, r1
 8002956:	602b      	str	r3, [r5, #0]
 8002958:	f7fe fbf4 	bl	8001144 <_isatty>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	d103      	bne.n	8002968 <_isatty_r+0x1c>
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d000      	beq.n	8002968 <_isatty_r+0x1c>
 8002966:	6023      	str	r3, [r4, #0]
 8002968:	bd70      	pop	{r4, r5, r6, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	200002d4 	.word	0x200002d4

08002970 <_sbrk_r>:
 8002970:	2300      	movs	r3, #0
 8002972:	b570      	push	{r4, r5, r6, lr}
 8002974:	4d06      	ldr	r5, [pc, #24]	@ (8002990 <_sbrk_r+0x20>)
 8002976:	0004      	movs	r4, r0
 8002978:	0008      	movs	r0, r1
 800297a:	602b      	str	r3, [r5, #0]
 800297c:	f7fe fbf6 	bl	800116c <_sbrk>
 8002980:	1c43      	adds	r3, r0, #1
 8002982:	d103      	bne.n	800298c <_sbrk_r+0x1c>
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d000      	beq.n	800298c <_sbrk_r+0x1c>
 800298a:	6023      	str	r3, [r4, #0]
 800298c:	bd70      	pop	{r4, r5, r6, pc}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	200002d4 	.word	0x200002d4

08002994 <memchr>:
 8002994:	b2c9      	uxtb	r1, r1
 8002996:	1882      	adds	r2, r0, r2
 8002998:	4290      	cmp	r0, r2
 800299a:	d101      	bne.n	80029a0 <memchr+0xc>
 800299c:	2000      	movs	r0, #0
 800299e:	4770      	bx	lr
 80029a0:	7803      	ldrb	r3, [r0, #0]
 80029a2:	428b      	cmp	r3, r1
 80029a4:	d0fb      	beq.n	800299e <memchr+0xa>
 80029a6:	3001      	adds	r0, #1
 80029a8:	e7f6      	b.n	8002998 <memchr+0x4>

080029aa <abort>:
 80029aa:	2006      	movs	r0, #6
 80029ac:	b510      	push	{r4, lr}
 80029ae:	f000 f8b1 	bl	8002b14 <raise>
 80029b2:	2001      	movs	r0, #1
 80029b4:	f7fe fb68 	bl	8001088 <_exit>

080029b8 <lflush>:
 80029b8:	2209      	movs	r2, #9
 80029ba:	898b      	ldrh	r3, [r1, #12]
 80029bc:	2000      	movs	r0, #0
 80029be:	b510      	push	{r4, lr}
 80029c0:	4013      	ands	r3, r2
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d103      	bne.n	80029ce <lflush+0x16>
 80029c6:	4b02      	ldr	r3, [pc, #8]	@ (80029d0 <lflush+0x18>)
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f7ff fe87 	bl	80026dc <_fflush_r>
 80029ce:	bd10      	pop	{r4, pc}
 80029d0:	20000010 	.word	0x20000010

080029d4 <__srefill_r>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	0005      	movs	r5, r0
 80029d8:	000c      	movs	r4, r1
 80029da:	2800      	cmp	r0, #0
 80029dc:	d004      	beq.n	80029e8 <__srefill_r+0x14>
 80029de:	6a03      	ldr	r3, [r0, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <__srefill_r+0x14>
 80029e4:	f7fe fea4 	bl	8001730 <__sinit>
 80029e8:	2300      	movs	r3, #0
 80029ea:	6063      	str	r3, [r4, #4]
 80029ec:	220c      	movs	r2, #12
 80029ee:	5ea3      	ldrsh	r3, [r4, r2]
 80029f0:	069a      	lsls	r2, r3, #26
 80029f2:	d408      	bmi.n	8002a06 <__srefill_r+0x32>
 80029f4:	075a      	lsls	r2, r3, #29
 80029f6:	d449      	bmi.n	8002a8c <__srefill_r+0xb8>
 80029f8:	06da      	lsls	r2, r3, #27
 80029fa:	d407      	bmi.n	8002a0c <__srefill_r+0x38>
 80029fc:	2209      	movs	r2, #9
 80029fe:	602a      	str	r2, [r5, #0]
 8002a00:	3237      	adds	r2, #55	@ 0x37
 8002a02:	4313      	orrs	r3, r2
 8002a04:	81a3      	strh	r3, [r4, #12]
 8002a06:	2001      	movs	r0, #1
 8002a08:	4240      	negs	r0, r0
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	2608      	movs	r6, #8
 8002a0e:	4233      	tst	r3, r6
 8002a10:	d00a      	beq.n	8002a28 <__srefill_r+0x54>
 8002a12:	0021      	movs	r1, r4
 8002a14:	0028      	movs	r0, r5
 8002a16:	f7ff fe61 	bl	80026dc <_fflush_r>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d1f3      	bne.n	8002a06 <__srefill_r+0x32>
 8002a1e:	89a3      	ldrh	r3, [r4, #12]
 8002a20:	60a0      	str	r0, [r4, #8]
 8002a22:	43b3      	bics	r3, r6
 8002a24:	81a3      	strh	r3, [r4, #12]
 8002a26:	61a0      	str	r0, [r4, #24]
 8002a28:	2304      	movs	r3, #4
 8002a2a:	89a2      	ldrh	r2, [r4, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	81a3      	strh	r3, [r4, #12]
 8002a30:	6923      	ldr	r3, [r4, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <__srefill_r+0x6a>
 8002a36:	0021      	movs	r1, r4
 8002a38:	0028      	movs	r0, r5
 8002a3a:	f7ff fee3 	bl	8002804 <__smakebuf_r>
 8002a3e:	230c      	movs	r3, #12
 8002a40:	5ee6      	ldrsh	r6, [r4, r3]
 8002a42:	07b3      	lsls	r3, r6, #30
 8002a44:	d00f      	beq.n	8002a66 <__srefill_r+0x92>
 8002a46:	2301      	movs	r3, #1
 8002a48:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab4 <__srefill_r+0xe0>)
 8002a4a:	81a3      	strh	r3, [r4, #12]
 8002a4c:	491a      	ldr	r1, [pc, #104]	@ (8002ab8 <__srefill_r+0xe4>)
 8002a4e:	481b      	ldr	r0, [pc, #108]	@ (8002abc <__srefill_r+0xe8>)
 8002a50:	f7fe fe86 	bl	8001760 <_fwalk_sglue>
 8002a54:	2309      	movs	r3, #9
 8002a56:	81a6      	strh	r6, [r4, #12]
 8002a58:	401e      	ands	r6, r3
 8002a5a:	429e      	cmp	r6, r3
 8002a5c:	d103      	bne.n	8002a66 <__srefill_r+0x92>
 8002a5e:	0021      	movs	r1, r4
 8002a60:	0028      	movs	r0, r5
 8002a62:	f7ff fdb5 	bl	80025d0 <__sflush_r>
 8002a66:	6922      	ldr	r2, [r4, #16]
 8002a68:	0028      	movs	r0, r5
 8002a6a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8002a6c:	6963      	ldr	r3, [r4, #20]
 8002a6e:	6a21      	ldr	r1, [r4, #32]
 8002a70:	6022      	str	r2, [r4, #0]
 8002a72:	47b0      	blx	r6
 8002a74:	6060      	str	r0, [r4, #4]
 8002a76:	2800      	cmp	r0, #0
 8002a78:	dc1a      	bgt.n	8002ab0 <__srefill_r+0xdc>
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	5ee2      	ldrsh	r2, [r4, r3]
 8002a7e:	2320      	movs	r3, #32
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d0be      	beq.n	8002a02 <__srefill_r+0x2e>
 8002a84:	2300      	movs	r3, #0
 8002a86:	6063      	str	r3, [r4, #4]
 8002a88:	3340      	adds	r3, #64	@ 0x40
 8002a8a:	e7ba      	b.n	8002a02 <__srefill_r+0x2e>
 8002a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a8e:	2900      	cmp	r1, #0
 8002a90:	d0ce      	beq.n	8002a30 <__srefill_r+0x5c>
 8002a92:	0023      	movs	r3, r4
 8002a94:	3344      	adds	r3, #68	@ 0x44
 8002a96:	4299      	cmp	r1, r3
 8002a98:	d002      	beq.n	8002aa0 <__srefill_r+0xcc>
 8002a9a:	0028      	movs	r0, r5
 8002a9c:	f7ff f9d0 	bl	8001e40 <_free_r>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8002aa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002aa6:	6063      	str	r3, [r4, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0c1      	beq.n	8002a30 <__srefill_r+0x5c>
 8002aac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002aae:	6023      	str	r3, [r4, #0]
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	e7aa      	b.n	8002a0a <__srefill_r+0x36>
 8002ab4:	20000004 	.word	0x20000004
 8002ab8:	080029b9 	.word	0x080029b9
 8002abc:	20000014 	.word	0x20000014

08002ac0 <_raise_r>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	0004      	movs	r4, r0
 8002ac4:	000d      	movs	r5, r1
 8002ac6:	291f      	cmp	r1, #31
 8002ac8:	d904      	bls.n	8002ad4 <_raise_r+0x14>
 8002aca:	2316      	movs	r3, #22
 8002acc:	6003      	str	r3, [r0, #0]
 8002ace:	2001      	movs	r0, #1
 8002ad0:	4240      	negs	r0, r0
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
 8002ad4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <_raise_r+0x24>
 8002ada:	008a      	lsls	r2, r1, #2
 8002adc:	189b      	adds	r3, r3, r2
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d108      	bne.n	8002af6 <_raise_r+0x36>
 8002ae4:	0020      	movs	r0, r4
 8002ae6:	f000 f831 	bl	8002b4c <_getpid_r>
 8002aea:	002a      	movs	r2, r5
 8002aec:	0001      	movs	r1, r0
 8002aee:	0020      	movs	r0, r4
 8002af0:	f000 f81a 	bl	8002b28 <_kill_r>
 8002af4:	e7ed      	b.n	8002ad2 <_raise_r+0x12>
 8002af6:	2a01      	cmp	r2, #1
 8002af8:	d009      	beq.n	8002b0e <_raise_r+0x4e>
 8002afa:	1c51      	adds	r1, r2, #1
 8002afc:	d103      	bne.n	8002b06 <_raise_r+0x46>
 8002afe:	2316      	movs	r3, #22
 8002b00:	6003      	str	r3, [r0, #0]
 8002b02:	2001      	movs	r0, #1
 8002b04:	e7e5      	b.n	8002ad2 <_raise_r+0x12>
 8002b06:	2100      	movs	r1, #0
 8002b08:	0028      	movs	r0, r5
 8002b0a:	6019      	str	r1, [r3, #0]
 8002b0c:	4790      	blx	r2
 8002b0e:	2000      	movs	r0, #0
 8002b10:	e7df      	b.n	8002ad2 <_raise_r+0x12>
	...

08002b14 <raise>:
 8002b14:	b510      	push	{r4, lr}
 8002b16:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <raise+0x10>)
 8002b18:	0001      	movs	r1, r0
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	f7ff ffd0 	bl	8002ac0 <_raise_r>
 8002b20:	bd10      	pop	{r4, pc}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	20000010 	.word	0x20000010

08002b28 <_kill_r>:
 8002b28:	2300      	movs	r3, #0
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	4d06      	ldr	r5, [pc, #24]	@ (8002b48 <_kill_r+0x20>)
 8002b2e:	0004      	movs	r4, r0
 8002b30:	0008      	movs	r0, r1
 8002b32:	0011      	movs	r1, r2
 8002b34:	602b      	str	r3, [r5, #0]
 8002b36:	f7fe fa97 	bl	8001068 <_kill>
 8002b3a:	1c43      	adds	r3, r0, #1
 8002b3c:	d103      	bne.n	8002b46 <_kill_r+0x1e>
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d000      	beq.n	8002b46 <_kill_r+0x1e>
 8002b44:	6023      	str	r3, [r4, #0]
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	200002d4 	.word	0x200002d4

08002b4c <_getpid_r>:
 8002b4c:	b510      	push	{r4, lr}
 8002b4e:	f7fe fa85 	bl	800105c <_getpid>
 8002b52:	bd10      	pop	{r4, pc}

08002b54 <_init>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr

08002b60 <_fini>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr
