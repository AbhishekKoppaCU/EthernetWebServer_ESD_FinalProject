
Assignment6_SerialIO_Answer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001064  08004474  08004474  00005474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d8  080054d8  00007078  2**0
                  CONTENTS
  4 .ARM          00000000  080054d8  080054d8  00007078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054d8  080054d8  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d8  080054d8  000064d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054dc  080054dc  000064dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080054e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  20000078  08005558  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  08005558  000078dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000042ca  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ae  00000000  00000000  0000b36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  0000c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000033b  00000000  00000000  0000cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033c2  00000000  00000000  0000d0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bff  00000000  00000000  00010485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069d27  00000000  00000000  00018084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00081dab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a40  00000000  00000000  00081e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  00083874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800445c 	.word	0x0800445c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800445c 	.word	0x0800445c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <delay_ms>:
 *      Author: nadgi
 */

#include "arp.h"

void delay_ms(uint16_t ms) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	0002      	movs	r2, r0
 800024c:	1dbb      	adds	r3, r7, #6
 800024e:	801a      	strh	r2, [r3, #0]
	for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	e002      	b.n	800025c <delay_ms+0x18>
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	3301      	adds	r3, #1
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	1dbb      	adds	r3, r7, #6
 800025e:	881a      	ldrh	r2, [r3, #0]
 8000260:	0013      	movs	r3, r2
 8000262:	015b      	lsls	r3, r3, #5
 8000264:	1a9b      	subs	r3, r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	189b      	adds	r3, r3, r2
 800026a:	00db      	lsls	r3, r3, #3
 800026c:	001a      	movs	r2, r3
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	429a      	cmp	r2, r3
 8000272:	d8f0      	bhi.n	8000256 <delay_ms+0x12>
		// Simple loop for delay; adjust the multiplier based on clock speed
	}
}
 8000274:	46c0      	nop			@ (mov r8, r8)
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b004      	add	sp, #16
 800027c:	bd80      	pop	{r7, pc}

0800027e <enc28j60_start_transmission>:
void enc28j60_start_transmission(void) {
 800027e:	b590      	push	{r4, r7, lr}
 8000280:	b083      	sub	sp, #12
 8000282:	af00      	add	r7, sp, #0
	uint8_t econ1 = enc_mac_read(0x1F, 0); // Read ECON1
 8000284:	1dfc      	adds	r4, r7, #7
 8000286:	2100      	movs	r1, #0
 8000288:	201f      	movs	r0, #31
 800028a:	f001 faf1 	bl	8001870 <enc_mac_read>
 800028e:	0003      	movs	r3, r0
 8000290:	7023      	strb	r3, [r4, #0]
	econ1 |= 0x08; // Set TXRTS (bit 3)
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	1dfa      	adds	r2, r7, #7
 8000296:	7812      	ldrb	r2, [r2, #0]
 8000298:	2108      	movs	r1, #8
 800029a:	430a      	orrs	r2, r1
 800029c:	701a      	strb	r2, [r3, #0]
	enc_control_write(0, 0x1F, econ1); // Write back to ECON1
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	001a      	movs	r2, r3
 80002a4:	211f      	movs	r1, #31
 80002a6:	2000      	movs	r0, #0
 80002a8:	f001 f8e4 	bl	8001474 <enc_control_write>
}
 80002ac:	46c0      	nop			@ (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b003      	add	sp, #12
 80002b2:	bd90      	pop	{r4, r7, pc}

080002b4 <enc28j60_set_transmit_pointers>:
void enc28j60_set_transmit_pointers(uint16_t start_address,
		uint16_t end_address) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	0002      	movs	r2, r0
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	801a      	strh	r2, [r3, #0]
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	1c0a      	adds	r2, r1, #0
 80002c4:	801a      	strh	r2, [r3, #0]
	// Write to ETXST (Transmit Start Pointer)
	enc_control_write(0, 0x04, (uint8_t) (start_address & 0xFF)); // Low byte
 80002c6:	1dbb      	adds	r3, r7, #6
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	001a      	movs	r2, r3
 80002ce:	2104      	movs	r1, #4
 80002d0:	2000      	movs	r0, #0
 80002d2:	f001 f8cf 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x05, (uint8_t) ((start_address >> 8) & 0xFF)); // High byte
 80002d6:	1dbb      	adds	r3, r7, #6
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	0a1b      	lsrs	r3, r3, #8
 80002dc:	b29b      	uxth	r3, r3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	001a      	movs	r2, r3
 80002e2:	2105      	movs	r1, #5
 80002e4:	2000      	movs	r0, #0
 80002e6:	f001 f8c5 	bl	8001474 <enc_control_write>

	// Write to ETXND (Transmit End Pointer)
	enc_control_write(0, 0x06, (uint8_t) (end_address & 0xFF)); // Low byte
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	001a      	movs	r2, r3
 80002f2:	2106      	movs	r1, #6
 80002f4:	2000      	movs	r0, #0
 80002f6:	f001 f8bd 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x07, (uint8_t) ((end_address >> 8) & 0xFF)); // High byte
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	0a1b      	lsrs	r3, r3, #8
 8000300:	b29b      	uxth	r3, r3
 8000302:	b2db      	uxtb	r3, r3
 8000304:	001a      	movs	r2, r3
 8000306:	2107      	movs	r1, #7
 8000308:	2000      	movs	r0, #0
 800030a:	f001 f8b3 	bl	8001474 <enc_control_write>
}
 800030e:	46c0      	nop			@ (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b002      	add	sp, #8
 8000314:	bd80      	pop	{r7, pc}

08000316 <wait_for_transmission_complete>:

bool wait_for_transmission_complete(uint16_t timeout_ms) {
 8000316:	b5b0      	push	{r4, r5, r7, lr}
 8000318:	b084      	sub	sp, #16
 800031a:	af00      	add	r7, sp, #0
 800031c:	0002      	movs	r2, r0
 800031e:	1dbb      	adds	r3, r7, #6
 8000320:	801a      	strh	r2, [r3, #0]
	uint16_t elapsed = 0;
 8000322:	230e      	movs	r3, #14
 8000324:	18fb      	adds	r3, r7, r3
 8000326:	2200      	movs	r2, #0
 8000328:	801a      	strh	r2, [r3, #0]

	while (elapsed < timeout_ms) {
 800032a:	e017      	b.n	800035c <wait_for_transmission_complete+0x46>
		uint8_t econ1 = enc_mac_read(0x1F, 0); // Read ECON1
 800032c:	250d      	movs	r5, #13
 800032e:	197c      	adds	r4, r7, r5
 8000330:	2100      	movs	r1, #0
 8000332:	201f      	movs	r0, #31
 8000334:	f001 fa9c 	bl	8001870 <enc_mac_read>
 8000338:	0003      	movs	r3, r0
 800033a:	7023      	strb	r3, [r4, #0]
		if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
 800033c:	197b      	adds	r3, r7, r5
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2208      	movs	r2, #8
 8000342:	4013      	ands	r3, r2
 8000344:	d101      	bne.n	800034a <wait_for_transmission_complete+0x34>
			return true;  // Transmission completed
 8000346:	2301      	movs	r3, #1
 8000348:	e010      	b.n	800036c <wait_for_transmission_complete+0x56>
		}

		delay_ms(1);  // Wait 1 ms
 800034a:	2001      	movs	r0, #1
 800034c:	f7ff ff7a 	bl	8000244 <delay_ms>
		elapsed++;
 8000350:	210e      	movs	r1, #14
 8000352:	187b      	adds	r3, r7, r1
 8000354:	881a      	ldrh	r2, [r3, #0]
 8000356:	187b      	adds	r3, r7, r1
 8000358:	3201      	adds	r2, #1
 800035a:	801a      	strh	r2, [r3, #0]
	while (elapsed < timeout_ms) {
 800035c:	230e      	movs	r3, #14
 800035e:	18fa      	adds	r2, r7, r3
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	8812      	ldrh	r2, [r2, #0]
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d3e0      	bcc.n	800032c <wait_for_transmission_complete+0x16>
	}

	return false;  // Timed out
 800036a:	2300      	movs	r3, #0
}
 800036c:	0018      	movs	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	b004      	add	sp, #16
 8000372:	bdb0      	pop	{r4, r5, r7, pc}

08000374 <enc28j60_transmission_successful>:

bool enc28j60_transmission_successful() {
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
	uint8_t estat = enc_mac_read(0x1D, 0); // Read ESTAT
 800037a:	1dfc      	adds	r4, r7, #7
 800037c:	2100      	movs	r1, #0
 800037e:	201d      	movs	r0, #29
 8000380:	f001 fa76 	bl	8001870 <enc_mac_read>
 8000384:	0003      	movs	r3, r0
 8000386:	7023      	strb	r3, [r4, #0]
	return !(estat & 0x02); // Check if TXABRT (bit 1) is not set
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2202      	movs	r2, #2
 800038e:	4013      	ands	r3, r2
 8000390:	425a      	negs	r2, r3
 8000392:	4153      	adcs	r3, r2
 8000394:	b2db      	uxtb	r3, r3
}
 8000396:	0018      	movs	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	b003      	add	sp, #12
 800039c:	bd90      	pop	{r4, r7, pc}
	...

080003a0 <arp_request>:
	enc_control_write(3, 0x05, *mac_address++);  // MAADR2
	enc_control_write(3, 0x04, *mac_address);  // MAADR1
	//select_reg_bank(0);
}

void arp_request(void) {
 80003a0:	b5b0      	push	{r4, r5, r7, lr}
 80003a2:	b092      	sub	sp, #72	@ 0x48
 80003a4:	af00      	add	r7, sp, #0
	uint8_t arp_packet[43]; // Minimum ARP packet size for Ethernet

	// Set the first byte to 0x0E
	arp_packet[0] = 0x0E;
 80003a6:	003b      	movs	r3, r7
 80003a8:	220e      	movs	r2, #14
 80003aa:	701a      	strb	r2, [r3, #0]

	// Ethernet header
	// Set the MAC address
	//set_mac_address(device_mac);

	for (int i = 0; i < 6; i++) {
 80003ac:	2300      	movs	r3, #0
 80003ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80003b0:	e012      	b.n	80003d8 <arp_request+0x38>
		arp_packet[i + 1] = target_mac[i];  // Destination MAC address
 80003b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003b4:	3301      	adds	r3, #1
 80003b6:	4962      	ldr	r1, [pc, #392]	@ (8000540 <arp_request+0x1a0>)
 80003b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80003ba:	188a      	adds	r2, r1, r2
 80003bc:	7811      	ldrb	r1, [r2, #0]
 80003be:	003a      	movs	r2, r7
 80003c0:	54d1      	strb	r1, [r2, r3]
		arp_packet[i + 7] = device_mac[i];  // Source MAC address
 80003c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003c4:	3307      	adds	r3, #7
 80003c6:	495f      	ldr	r1, [pc, #380]	@ (8000544 <arp_request+0x1a4>)
 80003c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80003ca:	188a      	adds	r2, r1, r2
 80003cc:	7811      	ldrb	r1, [r2, #0]
 80003ce:	003a      	movs	r2, r7
 80003d0:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 6; i++) {
 80003d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003d4:	3301      	adds	r3, #1
 80003d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80003d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003da:	2b05      	cmp	r3, #5
 80003dc:	dde9      	ble.n	80003b2 <arp_request+0x12>
	}

	// Ethernet Type: ARP (0x0806)
	arp_packet[13] = (ETH_TYPE_ARP >> 8) & 0xFF;
 80003de:	003b      	movs	r3, r7
 80003e0:	2208      	movs	r2, #8
 80003e2:	735a      	strb	r2, [r3, #13]
	arp_packet[14] = ETH_TYPE_ARP & 0xFF;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2206      	movs	r2, #6
 80003e8:	739a      	strb	r2, [r3, #14]

	// ARP request fields
	// Hardware type: Ethernet (0x0001)
	arp_packet[15] = 0x00;
 80003ea:	003b      	movs	r3, r7
 80003ec:	2200      	movs	r2, #0
 80003ee:	73da      	strb	r2, [r3, #15]
	arp_packet[16] = 0x01;
 80003f0:	003b      	movs	r3, r7
 80003f2:	2201      	movs	r2, #1
 80003f4:	741a      	strb	r2, [r3, #16]

	// Protocol type: IPv4 (0x0800)
	arp_packet[17] = 0x08;
 80003f6:	003b      	movs	r3, r7
 80003f8:	2208      	movs	r2, #8
 80003fa:	745a      	strb	r2, [r3, #17]
	arp_packet[18] = 0x00;
 80003fc:	003b      	movs	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	749a      	strb	r2, [r3, #18]

	// Hardware size (MAC address = 6 bytes)
	arp_packet[19] = 0x06;
 8000402:	003b      	movs	r3, r7
 8000404:	2206      	movs	r2, #6
 8000406:	74da      	strb	r2, [r3, #19]

	// Protocol size (IPv4 = 4 bytes)
	arp_packet[20] = 0x04;
 8000408:	003b      	movs	r3, r7
 800040a:	2204      	movs	r2, #4
 800040c:	751a      	strb	r2, [r3, #20]

	// Operation: ARP request (0x0001)
	arp_packet[21] = 0x00;
 800040e:	003b      	movs	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	755a      	strb	r2, [r3, #21]
	arp_packet[22] = 0x01;
 8000414:	003b      	movs	r3, r7
 8000416:	2201      	movs	r2, #1
 8000418:	759a      	strb	r2, [r3, #22]

	// Sender MAC address
	for (int i = 0; i < 6; i++) {
 800041a:	2300      	movs	r3, #0
 800041c:	643b      	str	r3, [r7, #64]	@ 0x40
 800041e:	e00a      	b.n	8000436 <arp_request+0x96>
		arp_packet[23 + i] = device_mac[i];
 8000420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000422:	3317      	adds	r3, #23
 8000424:	4947      	ldr	r1, [pc, #284]	@ (8000544 <arp_request+0x1a4>)
 8000426:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000428:	188a      	adds	r2, r1, r2
 800042a:	7811      	ldrb	r1, [r2, #0]
 800042c:	003a      	movs	r2, r7
 800042e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 6; i++) {
 8000430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000432:	3301      	adds	r3, #1
 8000434:	643b      	str	r3, [r7, #64]	@ 0x40
 8000436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000438:	2b05      	cmp	r3, #5
 800043a:	ddf1      	ble.n	8000420 <arp_request+0x80>
	}

	// Sender IP address
	for (int i = 0; i < 4; i++) {
 800043c:	2300      	movs	r3, #0
 800043e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000440:	e00a      	b.n	8000458 <arp_request+0xb8>
		arp_packet[29 + i] = device_ip[i];
 8000442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000444:	331d      	adds	r3, #29
 8000446:	4940      	ldr	r1, [pc, #256]	@ (8000548 <arp_request+0x1a8>)
 8000448:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800044a:	188a      	adds	r2, r1, r2
 800044c:	7811      	ldrb	r1, [r2, #0]
 800044e:	003a      	movs	r2, r7
 8000450:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 4; i++) {
 8000452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000454:	3301      	adds	r3, #1
 8000456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800045a:	2b03      	cmp	r3, #3
 800045c:	ddf1      	ble.n	8000442 <arp_request+0xa2>
	}

	// Target MAC address (0x00 for ARP request)
	for (int i = 0; i < 6; i++) {
 800045e:	2300      	movs	r3, #0
 8000460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000462:	e007      	b.n	8000474 <arp_request+0xd4>
		arp_packet[33 + i] = 0x00;
 8000464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000466:	3321      	adds	r3, #33	@ 0x21
 8000468:	003a      	movs	r2, r7
 800046a:	2100      	movs	r1, #0
 800046c:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 6; i++) {
 800046e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000470:	3301      	adds	r3, #1
 8000472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000476:	2b05      	cmp	r3, #5
 8000478:	ddf4      	ble.n	8000464 <arp_request+0xc4>
	}

	// Target IP address
	for (int i = 0; i < 4; i++) {
 800047a:	2300      	movs	r3, #0
 800047c:	637b      	str	r3, [r7, #52]	@ 0x34
 800047e:	e00a      	b.n	8000496 <arp_request+0xf6>
		arp_packet[39 + i] = target_ip[i];
 8000480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000482:	3327      	adds	r3, #39	@ 0x27
 8000484:	4931      	ldr	r1, [pc, #196]	@ (800054c <arp_request+0x1ac>)
 8000486:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000488:	188a      	adds	r2, r1, r2
 800048a:	7811      	ldrb	r1, [r2, #0]
 800048c:	003a      	movs	r2, r7
 800048e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 4; i++) {
 8000490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000492:	3301      	adds	r3, #1
 8000494:	637b      	str	r3, [r7, #52]	@ 0x34
 8000496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000498:	2b03      	cmp	r3, #3
 800049a:	ddf1      	ble.n	8000480 <arp_request+0xe0>
	}

	// Write the ARP packet to the ENC28J60 buffer
	uint16_t frame_size = 43; // The total length is now exactly 42 bytes (without padding)
 800049c:	2132      	movs	r1, #50	@ 0x32
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	222b      	movs	r2, #43	@ 0x2b
 80004a2:	801a      	strh	r2, [r3, #0]
	uint16_t start_address = TX_BUFFER_START;
 80004a4:	2030      	movs	r0, #48	@ 0x30
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	2200      	movs	r2, #0
 80004aa:	801a      	strh	r2, [r3, #0]
	if ((start_address + frame_size - 1) > 0x1FFF) {
 80004ac:	183b      	adds	r3, r7, r0
 80004ae:	881a      	ldrh	r2, [r3, #0]
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	18d2      	adds	r2, r2, r3
 80004b6:	2380      	movs	r3, #128	@ 0x80
 80004b8:	019b      	lsls	r3, r3, #6
 80004ba:	429a      	cmp	r2, r3
 80004bc:	dd04      	ble.n	80004c8 <arp_request+0x128>
		printf("\nInvalid Buffer Size. Buffer exceeds valid address range.\n");
 80004be:	4b24      	ldr	r3, [pc, #144]	@ (8000550 <arp_request+0x1b0>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 ff1b 	bl	80032fc <puts>
 80004c6:	e037      	b.n	8000538 <arp_request+0x198>
		return;
	}

	uint16_t end_address = start_address + frame_size - 1;
 80004c8:	2130      	movs	r1, #48	@ 0x30
 80004ca:	187a      	adds	r2, r7, r1
 80004cc:	2032      	movs	r0, #50	@ 0x32
 80004ce:	183b      	adds	r3, r7, r0
 80004d0:	8812      	ldrh	r2, [r2, #0]
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	252e      	movs	r5, #46	@ 0x2e
 80004da:	197b      	adds	r3, r7, r5
 80004dc:	3a01      	subs	r2, #1
 80004de:	801a      	strh	r2, [r3, #0]
	enc_buffer_write(frame_size, start_address, arp_packet);
 80004e0:	183b      	adds	r3, r7, r0
 80004e2:	8818      	ldrh	r0, [r3, #0]
 80004e4:	003a      	movs	r2, r7
 80004e6:	000c      	movs	r4, r1
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	0019      	movs	r1, r3
 80004ee:	f001 f879 	bl	80015e4 <enc_buffer_write>

	// Set transmit pointers
	enc28j60_set_transmit_pointers(start_address, end_address);
 80004f2:	197b      	adds	r3, r7, r5
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f7ff fed9 	bl	80002b4 <enc28j60_set_transmit_pointers>

	// Start transmission
	enc28j60_start_transmission();
 8000502:	f7ff febc 	bl	800027e <enc28j60_start_transmission>

	// Wait for transmission to complete
	if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
 8000506:	23fa      	movs	r3, #250	@ 0xfa
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	0018      	movs	r0, r3
 800050c:	f7ff ff03 	bl	8000316 <wait_for_transmission_complete>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d00d      	beq.n	8000530 <arp_request+0x190>
		// Check if transmission was successful
		if (enc28j60_transmission_successful()) {
 8000514:	f7ff ff2e 	bl	8000374 <enc28j60_transmission_successful>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d004      	beq.n	8000526 <arp_request+0x186>
			printf("ARP request sent successfully.\n\r");
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <arp_request+0x1b4>)
 800051e:	0018      	movs	r0, r3
 8000520:	f002 fe7c 	bl	800321c <iprintf>
 8000524:	e008      	b.n	8000538 <arp_request+0x198>
		} else {
			printf("ARP transmission failed. Check error flags.\n\r");
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <arp_request+0x1b8>)
 8000528:	0018      	movs	r0, r3
 800052a:	f002 fe77 	bl	800321c <iprintf>
 800052e:	e003      	b.n	8000538 <arp_request+0x198>
		}
	} else {
		printf(
 8000530:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <arp_request+0x1bc>)
 8000532:	0018      	movs	r0, r3
 8000534:	f002 fe72 	bl	800321c <iprintf>
				"Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
	}
}
 8000538:	46bd      	mov	sp, r7
 800053a:	b012      	add	sp, #72	@ 0x48
 800053c:	bdb0      	pop	{r4, r5, r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	20000008 	.word	0x20000008
 8000544:	20000000 	.word	0x20000000
 8000548:	20000010 	.word	0x20000010
 800054c:	20000014 	.word	0x20000014
 8000550:	08004474 	.word	0x08004474
 8000554:	080044b0 	.word	0x080044b0
 8000558:	080044d4 	.word	0x080044d4
 800055c:	08004504 	.word	0x08004504

08000560 <cbfifo_init>:


/*
 * Initialize the FIFO structure.
 */
void cbfifo_init(cbfifo_t *fifo) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00b      	beq.n	8000586 <cbfifo_init+0x26>
        fifo->write = 0;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2280      	movs	r2, #128	@ 0x80
 8000572:	2100      	movs	r1, #0
 8000574:	5099      	str	r1, [r3, r2]
        fifo->read = 0;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2284      	movs	r2, #132	@ 0x84
 800057a:	2100      	movs	r1, #0
 800057c:	5099      	str	r1, [r3, r2]
        fifo->length = 0;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2288      	movs	r2, #136	@ 0x88
 8000582:	2100      	movs	r1, #0
 8000584:	5099      	str	r1, [r3, r2]
    }
}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}

0800058e <cbfifo_enqueue>:
 *
 * Returns:
 *   The number of bytes actually enqueued, which could be 0.
 *   In case of an error, returns (size_t) -1.
 */
size_t cbfifo_enqueue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b088      	sub	sp, #32
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL) {
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d002      	beq.n	80005a6 <cbfifo_enqueue+0x18>
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d102      	bne.n	80005ac <cbfifo_enqueue+0x1e>
        return FIFO_ERROR;
 80005a6:	2301      	movs	r3, #1
 80005a8:	425b      	negs	r3, r3
 80005aa:	e03b      	b.n	8000624 <cbfifo_enqueue+0x96>
    }
    if (nbyte == 0) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d101      	bne.n	80005b6 <cbfifo_enqueue+0x28>
        return 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e036      	b.n	8000624 <cbfifo_enqueue+0x96>
    }
    size_t blank = (MAX_FIFO_SIZE - (fifo->length));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2288      	movs	r2, #136	@ 0x88
 80005ba:	589b      	ldr	r3, [r3, r2]
 80005bc:	2280      	movs	r2, #128	@ 0x80
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	61bb      	str	r3, [r7, #24]
    if (blank == 0) {
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d101      	bne.n	80005cc <cbfifo_enqueue+0x3e>
        return 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	e02b      	b.n	8000624 <cbfifo_enqueue+0x96>
    }
    size_t endq = (nbyte <= blank) ? nbyte : blank;
 80005cc:	69ba      	ldr	r2, [r7, #24]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d900      	bls.n	80005d6 <cbfifo_enqueue+0x48>
 80005d4:	0013      	movs	r3, r2
 80005d6:	617b      	str	r3, [r7, #20]
    uint8_t *temp = (uint8_t*)buf;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < endq; i++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	e01b      	b.n	800061a <cbfifo_enqueue+0x8c>
        fifo->buffer[fifo->write] = temp[i];
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	18d2      	adds	r2, r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2180      	movs	r1, #128	@ 0x80
 80005ec:	585b      	ldr	r3, [r3, r1]
 80005ee:	7811      	ldrb	r1, [r2, #0]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	54d1      	strb	r1, [r2, r3]
        fifo->length++;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2288      	movs	r2, #136	@ 0x88
 80005f8:	589b      	ldr	r3, [r3, r2]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2188      	movs	r1, #136	@ 0x88
 8000600:	505a      	str	r2, [r3, r1]
        fifo->write = ((fifo->write + 1) & (MAX_FIFO_SIZE-1)); // Increment write pointer with wrap-around
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2280      	movs	r2, #128	@ 0x80
 8000606:	589b      	ldr	r3, [r3, r2]
 8000608:	3301      	adds	r3, #1
 800060a:	227f      	movs	r2, #127	@ 0x7f
 800060c:	401a      	ands	r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2180      	movs	r1, #128	@ 0x80
 8000612:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	3301      	adds	r3, #1
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	69fa      	ldr	r2, [r7, #28]
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	429a      	cmp	r2, r3
 8000620:	d3df      	bcc.n	80005e2 <cbfifo_enqueue+0x54>
    }
    return endq;
 8000622:	697b      	ldr	r3, [r7, #20]
}
 8000624:	0018      	movs	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	b008      	add	sp, #32
 800062a:	bd80      	pop	{r7, pc}

0800062c <cbfifo_dequeue>:
 *   nbyte   Bytes of data requested
 *
 * Returns:
 *   The number of bytes actually removed.
 */
size_t cbfifo_dequeue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL || nbyte == 0 || fifo->length == 0) {
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00a      	beq.n	8000654 <cbfifo_dequeue+0x28>
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d007      	beq.n	8000654 <cbfifo_dequeue+0x28>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d004      	beq.n	8000654 <cbfifo_dequeue+0x28>
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2288      	movs	r2, #136	@ 0x88
 800064e:	589b      	ldr	r3, [r3, r2]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <cbfifo_dequeue+0x2c>
        return 0;
 8000654:	2300      	movs	r3, #0
 8000656:	e02d      	b.n	80006b4 <cbfifo_dequeue+0x88>
    }
    size_t endq = (nbyte <= fifo->length) ? nbyte : fifo->length;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2288      	movs	r2, #136	@ 0x88
 800065c:	589a      	ldr	r2, [r3, r2]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4293      	cmp	r3, r2
 8000662:	d900      	bls.n	8000666 <cbfifo_dequeue+0x3a>
 8000664:	0013      	movs	r3, r2
 8000666:	61bb      	str	r3, [r7, #24]
    uint8_t *temp = (uint8_t*)buf;
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < endq; i++) {
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
 8000670:	e01b      	b.n	80006aa <cbfifo_dequeue+0x7e>
        temp[i] = fifo->buffer[fifo->read];
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2284      	movs	r2, #132	@ 0x84
 8000676:	589a      	ldr	r2, [r3, r2]
 8000678:	6979      	ldr	r1, [r7, #20]
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	18cb      	adds	r3, r1, r3
 800067e:	68f9      	ldr	r1, [r7, #12]
 8000680:	5c8a      	ldrb	r2, [r1, r2]
 8000682:	701a      	strb	r2, [r3, #0]
        fifo->length--;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2288      	movs	r2, #136	@ 0x88
 8000688:	589b      	ldr	r3, [r3, r2]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2188      	movs	r1, #136	@ 0x88
 8000690:	505a      	str	r2, [r3, r1]
        fifo->read = ((fifo->read + 1) & (MAX_FIFO_SIZE-1)); // Increment read pointer with wrap-around
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2284      	movs	r2, #132	@ 0x84
 8000696:	589b      	ldr	r3, [r3, r2]
 8000698:	3301      	adds	r3, #1
 800069a:	227f      	movs	r2, #127	@ 0x7f
 800069c:	401a      	ands	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2184      	movs	r1, #132	@ 0x84
 80006a2:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	3301      	adds	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
 80006aa:	69fa      	ldr	r2, [r7, #28]
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3df      	bcc.n	8000672 <cbfifo_dequeue+0x46>
    }
    return endq;
 80006b2:	69bb      	ldr	r3, [r7, #24]
}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b008      	add	sp, #32
 80006ba:	bd80      	pop	{r7, pc}

080006bc <cbfifo_length>:
 *   fifo    Pointer to the FIFO structure
 *
 * Returns:
 *   Number of bytes currently available to be dequeued from the FIFO.
 */
size_t cbfifo_length(cbfifo_t *fifo) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    return (fifo != NULL) ? fifo->length : 0; // Return length or 0 if fifo is NULL
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <cbfifo_length+0x16>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2288      	movs	r2, #136	@ 0x88
 80006ce:	589b      	ldr	r3, [r3, r2]
 80006d0:	e000      	b.n	80006d4 <cbfifo_length+0x18>
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}

080006dc <ULED_ON>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_ON() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_ON_MASK;
 80006e0:	2390      	movs	r3, #144	@ 0x90
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	699a      	ldr	r2, [r3, #24]
 80006e6:	2390      	movs	r3, #144	@ 0x90
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2120      	movs	r1, #32
 80006ec:	430a      	orrs	r2, r1
 80006ee:	619a      	str	r2, [r3, #24]
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <ULED_OFF>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_OFF() {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_OFF_MASK;
 80006fa:	2390      	movs	r3, #144	@ 0x90
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	699a      	ldr	r2, [r3, #24]
 8000700:	2390      	movs	r3, #144	@ 0x90
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2180      	movs	r1, #128	@ 0x80
 8000706:	0389      	lsls	r1, r1, #14
 8000708:	430a      	orrs	r2, r1
 800070a:	619a      	str	r2, [r3, #24]
}
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <cmd_led>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_led(int argc, char *argv[]) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	if (argc != 2) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d004      	beq.n	800072e <cmd_led+0x1a>
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <cmd_led+0x6c>)
 8000726:	0018      	movs	r0, r3
 8000728:	f002 fde8 	bl	80032fc <puts>
		return;
 800072c:	e025      	b.n	800077a <cmd_led+0x66>
	}
	if (strcasecmp(argv[1], "ON") == 0) {
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	3304      	adds	r3, #4
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <cmd_led+0x70>)
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f002 ff93 	bl	8003664 <strcasecmp>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d106      	bne.n	8000750 <cmd_led+0x3c>
		ULED_ON();
 8000742:	f7ff ffcb 	bl	80006dc <ULED_ON>
		printf("\nLED turned ON\n");
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <cmd_led+0x74>)
 8000748:	0018      	movs	r0, r3
 800074a:	f002 fdd7 	bl	80032fc <puts>
 800074e:	e014      	b.n	800077a <cmd_led+0x66>
	} else if (strcasecmp(argv[1], "OFF") == 0) {
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	3304      	adds	r3, #4
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <cmd_led+0x78>)
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f002 ff82 	bl	8003664 <strcasecmp>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d106      	bne.n	8000772 <cmd_led+0x5e>
		ULED_OFF();
 8000764:	f7ff ffc7 	bl	80006f6 <ULED_OFF>
		printf("\nLED turned OFF\n");
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <cmd_led+0x7c>)
 800076a:	0018      	movs	r0, r3
 800076c:	f002 fdc6 	bl	80032fc <puts>
 8000770:	e003      	b.n	800077a <cmd_led+0x66>
	} else {
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 8000772:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <cmd_led+0x6c>)
 8000774:	0018      	movs	r0, r3
 8000776:	f002 fdc1 	bl	80032fc <puts>
	}
}
 800077a:	46bd      	mov	sp, r7
 800077c:	b002      	add	sp, #8
 800077e:	bd80      	pop	{r7, pc}
 8000780:	080045d0 	.word	0x080045d0
 8000784:	08004600 	.word	0x08004600
 8000788:	08004604 	.word	0x08004604
 800078c:	08004614 	.word	0x08004614
 8000790:	08004618 	.word	0x08004618

08000794 <cmd_echo>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_echo(int argc, char *argv[]) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	printf("\n");
 800079e:	200a      	movs	r0, #10
 80007a0:	f002 fd4c 	bl	800323c <putchar>
	for (int i = 1; i < argc; i++) {
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	e00c      	b.n	80007c4 <cmd_echo+0x30>
		printf("%s ", argv[i]);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	18d3      	adds	r3, r2, r3
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <cmd_echo+0x48>)
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 fd2f 	bl	800321c <iprintf>
	for (int i = 1; i < argc; i++) {
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3301      	adds	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbee      	blt.n	80007aa <cmd_echo+0x16>
	}
	printf("\n");
 80007cc:	200a      	movs	r0, #10
 80007ce:	f002 fd35 	bl	800323c <putchar>
}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	08004628 	.word	0x08004628

080007e0 <cmd_hexdump>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_hexdump(int argc, char *argv[]) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	if (argc != 3) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d004      	beq.n	80007fa <cmd_hexdump+0x1a>
		printf(
 80007f0:	4b5b      	ldr	r3, [pc, #364]	@ (8000960 <cmd_hexdump+0x180>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f002 fd82 	bl	80032fc <puts>
				"\nInvalid command: HEXDUMP requires start and stop addresses\n");
		return;
 80007f8:	e0ae      	b.n	8000958 <cmd_hexdump+0x178>
	}

	char *start_address_str = argv[1];
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	613b      	str	r3, [r7, #16]
	if (strlen(start_address_str) < 1 || strlen(start_address_str) > 8) {
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d006      	beq.n	8000816 <cmd_hexdump+0x36>
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff fc7c 	bl	8000108 <strlen>
 8000810:	0003      	movs	r3, r0
 8000812:	2b08      	cmp	r3, #8
 8000814:	d904      	bls.n	8000820 <cmd_hexdump+0x40>
		printf("\nInvalid address\n");
 8000816:	4b53      	ldr	r3, [pc, #332]	@ (8000964 <cmd_hexdump+0x184>)
 8000818:	0018      	movs	r0, r3
 800081a:	f002 fd6f 	bl	80032fc <puts>
		return;
 800081e:	e09b      	b.n	8000958 <cmd_hexdump+0x178>
	}

	for (int i = 0; i < strlen(start_address_str); i++) {
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	e01f      	b.n	8000866 <cmd_hexdump+0x86>
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	18d3      	adds	r3, r2, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000830:	d905      	bls.n	800083e <cmd_hexdump+0x5e>
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	18d3      	adds	r3, r2, r3
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b39      	cmp	r3, #57	@ 0x39
 800083c:	d910      	bls.n	8000860 <cmd_hexdump+0x80>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	18d3      	adds	r3, r2, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 8000846:	2b40      	cmp	r3, #64	@ 0x40
 8000848:	d905      	bls.n	8000856 <cmd_hexdump+0x76>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	18d3      	adds	r3, r2, r3
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b46      	cmp	r3, #70	@ 0x46
 8000854:	d904      	bls.n	8000860 <cmd_hexdump+0x80>
			printf("\nInvalid address\n");
 8000856:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <cmd_hexdump+0x184>)
 8000858:	0018      	movs	r0, r3
 800085a:	f002 fd4f 	bl	80032fc <puts>
			return;
 800085e:	e07b      	b.n	8000958 <cmd_hexdump+0x178>
	for (int i = 0; i < strlen(start_address_str); i++) {
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	3301      	adds	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff fc4d 	bl	8000108 <strlen>
 800086e:	0002      	movs	r2, r0
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	429a      	cmp	r2, r3
 8000874:	d8d7      	bhi.n	8000826 <cmd_hexdump+0x46>
		}
	}
	unsigned int start = (unsigned int) strtol(argv[1], NULL, 16);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	3304      	adds	r3, #4
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2210      	movs	r2, #16
 800087e:	2100      	movs	r1, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f002 fbf1 	bl	8003068 <strtol>
 8000886:	0003      	movs	r3, r0
 8000888:	60fb      	str	r3, [r7, #12]
	unsigned int length;

	switch (strncmp(argv[2], "0X", 2) == 0) {
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	3308      	adds	r3, #8
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4935      	ldr	r1, [pc, #212]	@ (8000968 <cmd_hexdump+0x188>)
 8000892:	2202      	movs	r2, #2
 8000894:	0018      	movs	r0, r3
 8000896:	f002 feff 	bl	8003698 <strncmp>
 800089a:	0003      	movs	r3, r0
 800089c:	425a      	negs	r2, r3
 800089e:	4153      	adcs	r3, r2
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00c      	beq.n	80008c0 <cmd_hexdump+0xe0>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d115      	bne.n	80008d6 <cmd_hexdump+0xf6>
	case 1:
		length = (unsigned int) strtol(argv[2], NULL, 16);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	3308      	adds	r3, #8
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2210      	movs	r2, #16
 80008b2:	2100      	movs	r1, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f002 fbd7 	bl	8003068 <strtol>
 80008ba:	0003      	movs	r3, r0
 80008bc:	61bb      	str	r3, [r7, #24]
		break;
 80008be:	e00a      	b.n	80008d6 <cmd_hexdump+0xf6>
	case 0:
		length = (unsigned int) strtol(argv[2], NULL, 10);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	3308      	adds	r3, #8
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	220a      	movs	r2, #10
 80008c8:	2100      	movs	r1, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 fbcc 	bl	8003068 <strtol>
 80008d0:	0003      	movs	r3, r0
 80008d2:	61bb      	str	r3, [r7, #24]
		break;
 80008d4:	46c0      	nop			@ (mov r8, r8)
	}

	if (length == 0 || length >= 640) {
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d004      	beq.n	80008e6 <cmd_hexdump+0x106>
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	23a0      	movs	r3, #160	@ 0xa0
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d304      	bcc.n	80008f0 <cmd_hexdump+0x110>
		printf("\nInvalid length\n");
 80008e6:	4b21      	ldr	r3, [pc, #132]	@ (800096c <cmd_hexdump+0x18c>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 fd07 	bl	80032fc <puts>
		return;
 80008ee:	e033      	b.n	8000958 <cmd_hexdump+0x178>
	}

	printf("\nHexdump from %08X to %08X\n", start, start + length - 1);
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	68f9      	ldr	r1, [r7, #12]
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <cmd_hexdump+0x190>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f002 fc8d 	bl	800321c <iprintf>

	char *buff = (char*) start;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < length; i++) {
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	e01e      	b.n	800094a <cmd_hexdump+0x16a>
		if ((i % 8) == 0) {
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2207      	movs	r2, #7
 8000910:	4013      	ands	r3, r2
 8000912:	d10d      	bne.n	8000930 <cmd_hexdump+0x150>
			if (i != 0) {
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <cmd_hexdump+0x140>
				printf("\n");
 800091a:	200a      	movs	r0, #10
 800091c:	f002 fc8e 	bl	800323c <putchar>
			}
			printf("%08X ", start + i);  // Address with underscores
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	18d2      	adds	r2, r2, r3
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <cmd_hexdump+0x194>)
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f002 fc76 	bl	800321c <iprintf>
		}
		printf("%02X ", (unsigned char) buff[i]);
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	18d3      	adds	r3, r2, r3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	001a      	movs	r2, r3
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <cmd_hexdump+0x198>)
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f002 fc6c 	bl	800321c <iprintf>
	for (int i = 0; i < length; i++) {
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	429a      	cmp	r2, r3
 8000950:	d8dc      	bhi.n	800090c <cmd_hexdump+0x12c>
	}

	printf("\n");
 8000952:	200a      	movs	r0, #10
 8000954:	f002 fc72 	bl	800323c <putchar>
}
 8000958:	46bd      	mov	sp, r7
 800095a:	b008      	add	sp, #32
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	0800462c 	.word	0x0800462c
 8000964:	08004668 	.word	0x08004668
 8000968:	0800467c 	.word	0x0800467c
 800096c:	08004680 	.word	0x08004680
 8000970:	08004690 	.word	0x08004690
 8000974:	080046ac 	.word	0x080046ac
 8000978:	080046b4 	.word	0x080046b4

0800097c <cmd_spi_write>:

void cmd_spi_write(int argc, char *argv[]) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b02      	cmp	r3, #2
 800098a:	dc04      	bgt.n	8000996 <cmd_spi_write+0x1a>
		printf("\nInvalid command: WRITE requires number of bytes and data\n");
 800098c:	4b33      	ldr	r3, [pc, #204]	@ (8000a5c <cmd_spi_write+0xe0>)
 800098e:	0018      	movs	r0, r3
 8000990:	f002 fcb4 	bl	80032fc <puts>
		return;
 8000994:	e05e      	b.n	8000a54 <cmd_spi_write+0xd8>
	}

	int num_bytes = atoi(argv[1]);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	3304      	adds	r3, #4
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	0018      	movs	r0, r3
 800099e:	f002 fa0d 	bl	8002dbc <atoi>
 80009a2:	0003      	movs	r3, r0
 80009a4:	613b      	str	r3, [r7, #16]
	if (num_bytes <= 0 || argc != (num_bytes + 2)) {
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	dd04      	ble.n	80009b6 <cmd_spi_write+0x3a>
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	3302      	adds	r3, #2
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d004      	beq.n	80009c0 <cmd_spi_write+0x44>
		printf("\nInvalid command: Incorrect number of data arguments\n");
 80009b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <cmd_spi_write+0xe4>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 fc9f 	bl	80032fc <puts>
		return;
 80009be:	e049      	b.n	8000a54 <cmd_spi_write+0xd8>
	}

	// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 80009c0:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <cmd_spi_write+0xe8>)
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <cmd_spi_write+0xe8>)
 80009c6:	4928      	ldr	r1, [pc, #160]	@ (8000a68 <cmd_spi_write+0xec>)
 80009c8:	400a      	ands	r2, r1
 80009ca:	615a      	str	r2, [r3, #20]

	// Write each byte
	for (int i = 0; i < num_bytes; i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e02f      	b.n	8000a32 <cmd_spi_write+0xb6>
		char *endptr;
		uint8_t data = (uint8_t) strtol(argv[i + 2], &endptr, 16);
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3302      	adds	r3, #2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	18d3      	adds	r3, r2, r3
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2208      	movs	r2, #8
 80009e0:	18b9      	adds	r1, r7, r2
 80009e2:	2210      	movs	r2, #16
 80009e4:	0018      	movs	r0, r3
 80009e6:	f002 fb3f 	bl	8003068 <strtol>
 80009ea:	0002      	movs	r2, r0
 80009ec:	230f      	movs	r3, #15
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	701a      	strb	r2, [r3, #0]
		if (*endptr != '\0') {
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d012      	beq.n	8000a20 <cmd_spi_write+0xa4>
			printf("\nInvalid data: %s\n", argv[i + 2]);
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3302      	adds	r3, #2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	18d3      	adds	r3, r2, r3
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <cmd_spi_write+0xf0>)
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f002 fc06 	bl	800321c <iprintf>
			GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <cmd_spi_write+0xe8>)
 8000a12:	695a      	ldr	r2, [r3, #20]
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <cmd_spi_write+0xe8>)
 8000a16:	2180      	movs	r1, #128	@ 0x80
 8000a18:	0149      	lsls	r1, r1, #5
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	615a      	str	r2, [r3, #20]
 8000a1e:	e019      	b.n	8000a54 <cmd_spi_write+0xd8>
			return;
		}
		SPI_WriteByte(data);
 8000a20:	230f      	movs	r3, #15
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	0018      	movs	r0, r3
 8000a28:	f001 fb62 	bl	80020f0 <SPI_WriteByte>
	for (int i = 0; i < num_bytes; i++) {
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbcb      	blt.n	80009d2 <cmd_spi_write+0x56>
	}

	// Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <cmd_spi_write+0xe8>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <cmd_spi_write+0xe8>)
 8000a40:	2180      	movs	r1, #128	@ 0x80
 8000a42:	0149      	lsls	r1, r1, #5
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]

	printf("\nSPI Write Completed: Sent %d bytes\n", num_bytes);
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <cmd_spi_write+0xf4>)
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fbe4 	bl	800321c <iprintf>
}
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b006      	add	sp, #24
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	080046bc 	.word	0x080046bc
 8000a60:	080046f8 	.word	0x080046f8
 8000a64:	48000400 	.word	0x48000400
 8000a68:	ffffefff 	.word	0xffffefff
 8000a6c:	08004730 	.word	0x08004730
 8000a70:	08004744 	.word	0x08004744

08000a74 <cmd_control_spi_write>:

void cmd_control_spi_write(int argc, char *argv[]) {
 8000a74:	b5b0      	push	{r4, r5, r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	dc04      	bgt.n	8000a8e <cmd_control_spi_write+0x1a>
		printf(
 8000a84:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <cmd_control_spi_write+0xcc>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 fc38 	bl	80032fc <puts>
				"\nInvalid command: WRITECONTROL requires register bank, address and data\n");
		return;
 8000a8c:	e055      	b.n	8000b3a <cmd_control_spi_write+0xc6>
	}

	int reg_bank = atoi(argv[1]);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	3304      	adds	r3, #4
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 f991 	bl	8002dbc <atoi>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	617b      	str	r3, [r7, #20]
	if (reg_bank > 3) {
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	dd04      	ble.n	8000aae <cmd_control_spi_write+0x3a>
		printf("\nInvalid Register Bank: Choose between [0, 3]\n");
 8000aa4:	4b27      	ldr	r3, [pc, #156]	@ (8000b44 <cmd_control_spi_write+0xd0>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f002 fc28 	bl	80032fc <puts>
		return;
 8000aac:	e045      	b.n	8000b3a <cmd_control_spi_write+0xc6>
	}
	char *endptr;
	uint8_t addr = (uint8_t) strtol(argv[2], &endptr, 16);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	3308      	adds	r3, #8
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	220c      	movs	r2, #12
 8000ab6:	18b9      	adds	r1, r7, r2
 8000ab8:	2210      	movs	r2, #16
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 fad4 	bl	8003068 <strtol>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	2313      	movs	r3, #19
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	701a      	strb	r2, [r3, #0]

	if (*endptr != '\0') {
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d008      	beq.n	8000ae2 <cmd_control_spi_write+0x6e>
		printf("\nInvalid address: %s\n", argv[2]);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <cmd_control_spi_write+0xd4>)
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fb9e 	bl	800321c <iprintf>
		//GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
		return;
 8000ae0:	e02b      	b.n	8000b3a <cmd_control_spi_write+0xc6>
	}
	uint8_t data = (uint8_t) strtol(argv[3], &endptr, 16);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	330c      	adds	r3, #12
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	220c      	movs	r2, #12
 8000aea:	18b9      	adds	r1, r7, r2
 8000aec:	2210      	movs	r2, #16
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 faba 	bl	8003068 <strtol>
 8000af4:	0002      	movs	r2, r0
 8000af6:	2312      	movs	r3, #18
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	701a      	strb	r2, [r3, #0]
	if (*endptr != '\0') {
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <cmd_control_spi_write+0xa2>
		printf("\nInvalid data: %s\n", argv[3]);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	330c      	adds	r3, #12
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <cmd_control_spi_write+0xd8>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f002 fb84 	bl	800321c <iprintf>
		//GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
		return;
 8000b14:	e011      	b.n	8000b3a <cmd_control_spi_write+0xc6>
	}

	enc_control_write(reg_bank, addr, data);
 8000b16:	2412      	movs	r4, #18
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	2513      	movs	r5, #19
 8000b1e:	197b      	adds	r3, r7, r5
 8000b20:	7819      	ldrb	r1, [r3, #0]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 fca5 	bl	8001474 <enc_control_write>
	printf(
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	7819      	ldrb	r1, [r3, #0]
 8000b2e:	197b      	adds	r3, r7, r5
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	4806      	ldr	r0, [pc, #24]	@ (8000b50 <cmd_control_spi_write+0xdc>)
 8000b36:	f002 fb71 	bl	800321c <iprintf>
			"\nSPI Write Completed: Sent %x data to %x address in %dnd register bank\n",
			data, addr, reg_bank);

}
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b006      	add	sp, #24
 8000b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b40:	0800476c 	.word	0x0800476c
 8000b44:	080047b4 	.word	0x080047b4
 8000b48:	080047e4 	.word	0x080047e4
 8000b4c:	08004730 	.word	0x08004730
 8000b50:	080047fc 	.word	0x080047fc

08000b54 <cmd_buffer_spi_write>:

void cmd_buffer_spi_write(int argc, char *argv[]) {
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b56:	b091      	sub	sp, #68	@ 0x44
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	61f8      	str	r0, [r7, #28]
 8000b5c:	61b9      	str	r1, [r7, #24]
 8000b5e:	466b      	mov	r3, sp
 8000b60:	001e      	movs	r6, r3
	if (argc < 4) {
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	dc04      	bgt.n	8000b72 <cmd_buffer_spi_write+0x1e>
		printf(
 8000b68:	4b5e      	ldr	r3, [pc, #376]	@ (8000ce4 <cmd_buffer_spi_write+0x190>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f002 fbc6 	bl	80032fc <puts>
				"\nInvalid command: WRITEBUFFER requires number of bytes, start address and data\n");
		return;
 8000b70:	e0b3      	b.n	8000cda <cmd_buffer_spi_write+0x186>
	}
	int num_bytes = atoi(argv[1]);
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	3304      	adds	r3, #4
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f002 f91f 	bl	8002dbc <atoi>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (num_bytes < 1) {
 8000b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dc06      	bgt.n	8000b96 <cmd_buffer_spi_write+0x42>
		printf("\nInvalid number of bytes: %d\n", num_bytes);
 8000b88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b8a:	4b57      	ldr	r3, [pc, #348]	@ (8000ce8 <cmd_buffer_spi_write+0x194>)
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f002 fb44 	bl	800321c <iprintf>
		return;
 8000b94:	e0a1      	b.n	8000cda <cmd_buffer_spi_write+0x186>
	}
	char *endptr;
	uint16_t start_address = (uint16_t) strtol(argv[2], &endptr, 16);
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	3308      	adds	r3, #8
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	2118      	movs	r1, #24
 8000ba0:	1852      	adds	r2, r2, r1
 8000ba2:	19d1      	adds	r1, r2, r7
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f002 fa5e 	bl	8003068 <strtol>
 8000bac:	0002      	movs	r2, r0
 8000bae:	231e      	movs	r3, #30
 8000bb0:	2118      	movs	r1, #24
 8000bb2:	185b      	adds	r3, r3, r1
 8000bb4:	19db      	adds	r3, r3, r7
 8000bb6:	801a      	strh	r2, [r3, #0]
	if (*endptr != '\0') {
 8000bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d008      	beq.n	8000bd2 <cmd_buffer_spi_write+0x7e>
		printf("\nInvalid address: %s\n", argv[2]);
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b49      	ldr	r3, [pc, #292]	@ (8000cec <cmd_buffer_spi_write+0x198>)
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f002 fb26 	bl	800321c <iprintf>
		return;
 8000bd0:	e083      	b.n	8000cda <cmd_buffer_spi_write+0x186>
	}
	if (start_address > 0x1FFF) {
 8000bd2:	231e      	movs	r3, #30
 8000bd4:	2218      	movs	r2, #24
 8000bd6:	189b      	adds	r3, r3, r2
 8000bd8:	19db      	adds	r3, r3, r7
 8000bda:	881a      	ldrh	r2, [r3, #0]
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	019b      	lsls	r3, r3, #6
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d308      	bcc.n	8000bf6 <cmd_buffer_spi_write+0xa2>
		printf("\nInvalid address: %s\n", argv[2]);
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	3308      	adds	r3, #8
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4b40      	ldr	r3, [pc, #256]	@ (8000cec <cmd_buffer_spi_write+0x198>)
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 fb14 	bl	800321c <iprintf>
		return;
 8000bf4:	e071      	b.n	8000cda <cmd_buffer_spi_write+0x186>
	}
	uint8_t data_array[num_bytes]; // Array to store data
 8000bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bf8:	1e5a      	subs	r2, r3, #1
 8000bfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	0014      	movs	r4, r2
 8000c00:	2200      	movs	r2, #0
 8000c02:	0015      	movs	r5, r2
 8000c04:	0020      	movs	r0, r4
 8000c06:	0029      	movs	r1, r5
 8000c08:	0002      	movs	r2, r0
 8000c0a:	0f52      	lsrs	r2, r2, #29
 8000c0c:	000c      	movs	r4, r1
 8000c0e:	00e4      	lsls	r4, r4, #3
 8000c10:	617c      	str	r4, [r7, #20]
 8000c12:	697c      	ldr	r4, [r7, #20]
 8000c14:	4314      	orrs	r4, r2
 8000c16:	617c      	str	r4, [r7, #20]
 8000c18:	0002      	movs	r2, r0
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	613a      	str	r2, [r7, #16]
 8000c1e:	001a      	movs	r2, r3
 8000c20:	603a      	str	r2, [r7, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	6838      	ldr	r0, [r7, #0]
 8000c28:	6879      	ldr	r1, [r7, #4]
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	0f52      	lsrs	r2, r2, #29
 8000c2e:	000c      	movs	r4, r1
 8000c30:	00e4      	lsls	r4, r4, #3
 8000c32:	60fc      	str	r4, [r7, #12]
 8000c34:	68fc      	ldr	r4, [r7, #12]
 8000c36:	4314      	orrs	r4, r2
 8000c38:	60fc      	str	r4, [r7, #12]
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	00d2      	lsls	r2, r2, #3
 8000c3e:	60ba      	str	r2, [r7, #8]
 8000c40:	3307      	adds	r3, #7
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	466a      	mov	r2, sp
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	469d      	mov	sp, r3
 8000c4c:	466b      	mov	r3, sp
 8000c4e:	3300      	adds	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i < num_bytes; i++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c56:	e027      	b.n	8000ca8 <cmd_buffer_spi_write+0x154>
		char *endptr;
		data_array[i] = (uint8_t) strtol(argv[i + 3], &endptr, 16);
 8000c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c5a:	3303      	adds	r3, #3
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	18d3      	adds	r3, r2, r3
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	220c      	movs	r2, #12
 8000c66:	2118      	movs	r1, #24
 8000c68:	1852      	adds	r2, r2, r1
 8000c6a:	19d1      	adds	r1, r2, r7
 8000c6c:	2210      	movs	r2, #16
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f002 f9fa 	bl	8003068 <strtol>
 8000c74:	0003      	movs	r3, r0
 8000c76:	b2d9      	uxtb	r1, r3
 8000c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	1c0a      	adds	r2, r1, #0
 8000c80:	701a      	strb	r2, [r3, #0]
		if (*endptr != '\0') {
 8000c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00b      	beq.n	8000ca2 <cmd_buffer_spi_write+0x14e>
			printf("\nInvalid data: %s\n", argv[i + 3]);
 8000c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c8c:	3303      	adds	r3, #3
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	18d3      	adds	r3, r2, r3
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <cmd_buffer_spi_write+0x19c>)
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f002 fabe 	bl	800321c <iprintf>
 8000ca0:	e01b      	b.n	8000cda <cmd_buffer_spi_write+0x186>
	for (int i = 0; i < num_bytes; i++) {
 8000ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ca8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbd3      	blt.n	8000c58 <cmd_buffer_spi_write+0x104>
			return;
		}
	}
	enc_buffer_write(num_bytes, start_address, data_array);
 8000cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cb2:	241e      	movs	r4, #30
 8000cb4:	2318      	movs	r3, #24
 8000cb6:	18e3      	adds	r3, r4, r3
 8000cb8:	19db      	adds	r3, r3, r7
 8000cba:	8819      	ldrh	r1, [r3, #0]
 8000cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fc90 	bl	80015e4 <enc_buffer_write>
	printf(
 8000cc4:	2318      	movs	r3, #24
 8000cc6:	18e3      	adds	r3, r4, r3
 8000cc8:	19db      	adds	r3, r3, r7
 8000cca:	881a      	ldrh	r2, [r3, #0]
 8000ccc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <cmd_buffer_spi_write+0x1a0>)
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f002 faa3 	bl	800321c <iprintf>
 8000cd6:	46b5      	mov	sp, r6
 8000cd8:	e000      	b.n	8000cdc <cmd_buffer_spi_write+0x188>
		return;
 8000cda:	46b5      	mov	sp, r6
			"\nSPI BUFFER Write Completed: Sent %d bytes starting address %04X\n",
			num_bytes, start_address);
}
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b011      	add	sp, #68	@ 0x44
 8000ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	08004844 	.word	0x08004844
 8000ce8:	08004894 	.word	0x08004894
 8000cec:	080047e4 	.word	0x080047e4
 8000cf0:	08004730 	.word	0x08004730
 8000cf4:	080048b4 	.word	0x080048b4

08000cf8 <cmd_buffer_spi_read>:

void cmd_buffer_spi_read(int argc, char *argv[]) {
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b089      	sub	sp, #36	@ 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	dc03      	bgt.n	8000d10 <cmd_buffer_spi_read+0x18>
		printf(
 8000d08:	4b3a      	ldr	r3, [pc, #232]	@ (8000df4 <cmd_buffer_spi_read+0xfc>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f002 faf6 	bl	80032fc <puts>
				"\nInvalid command: Buffer READ requires number of bytes and start address\n");
		//return NULL; // Return NULL to indicate an error
	}

	int num_bytes = atoi(argv[1]); // Parse number of bytes
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	3304      	adds	r3, #4
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f002 f850 	bl	8002dbc <atoi>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	61bb      	str	r3, [r7, #24]
	if (num_bytes <= 0) {
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	dc03      	bgt.n	8000d2e <cmd_buffer_spi_read+0x36>
		printf("\nInvalid number of bytes: Must be greater than 0\n");
 8000d26:	4b34      	ldr	r3, [pc, #208]	@ (8000df8 <cmd_buffer_spi_read+0x100>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fae7 	bl	80032fc <puts>
		//return NULL; // Return NULL to indicate an error
	}

	char *endptr;
	uint16_t start_address = (uint16_t) strtol(argv[2], &endptr, 16);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	3308      	adds	r3, #8
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	220c      	movs	r2, #12
 8000d36:	18b9      	adds	r1, r7, r2
 8000d38:	2210      	movs	r2, #16
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f002 f994 	bl	8003068 <strtol>
 8000d40:	0002      	movs	r2, r0
 8000d42:	2316      	movs	r3, #22
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	801a      	strh	r2, [r3, #0]
	if (*endptr != '\0') {
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d007      	beq.n	8000d60 <cmd_buffer_spi_read+0x68>
		printf("\nInvalid address: %s\n", argv[1]);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	3304      	adds	r3, #4
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <cmd_buffer_spi_read+0x104>)
 8000d58:	0011      	movs	r1, r2
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f002 fa5e 	bl	800321c <iprintf>
		//return NULL;
	}
	if (start_address > 0x1FFF) {
 8000d60:	2316      	movs	r3, #22
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	881a      	ldrh	r2, [r3, #0]
 8000d66:	2380      	movs	r3, #128	@ 0x80
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d303      	bcc.n	8000d76 <cmd_buffer_spi_read+0x7e>
		printf("\nInvalid Buffer Address: Choose between [0, 0x1FFF]\n");
 8000d6e:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <cmd_buffer_spi_read+0x108>)
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 fac3 	bl	80032fc <puts>
		//return NULL; // Return NULL to indicate an error
	}
	uint8_t *data_buffer = (uint8_t*) malloc(num_bytes);
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f002 f825 	bl	8002dc8 <malloc>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	613b      	str	r3, [r7, #16]
	if (!data_buffer) {
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d103      	bne.n	8000d90 <cmd_buffer_spi_read+0x98>
		printf("\nMemory allocation failed\n");
 8000d88:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <cmd_buffer_spi_read+0x10c>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 fab6 	bl	80032fc <puts>
		//return NULL; // Return NULL to indicate an error
	}

	if (num_bytes < 1) {
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	dc05      	bgt.n	8000da2 <cmd_buffer_spi_read+0xaa>
		printf("\nInvalid number of bytes: %d\n", num_bytes);
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <cmd_buffer_spi_read+0x110>)
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f002 fa3d 	bl	800321c <iprintf>
		//return NULL;
	}
	enc_buffer_read(num_bytes, start_address, data_buffer);
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	2416      	movs	r4, #22
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	8819      	ldrh	r1, [r3, #0]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fcb5 	bl	800171c <enc_buffer_read>
	printf("\nSPI Read Completed: Address 0x%02X\n", start_address);
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	881a      	ldrh	r2, [r3, #0]
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <cmd_buffer_spi_read+0x114>)
 8000db8:	0011      	movs	r1, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f002 fa2e 	bl	800321c <iprintf>
	for (int i = 0; i < num_bytes; i++) {
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	e00c      	b.n	8000de0 <cmd_buffer_spi_read+0xe8>
		printf("Data[%d]: 0x%02X\n", i, data_buffer[i]);
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	18d3      	adds	r3, r2, r3
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	001a      	movs	r2, r3
 8000dd0:	69f9      	ldr	r1, [r7, #28]
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <cmd_buffer_spi_read+0x118>)
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f002 fa21 	bl	800321c <iprintf>
	for (int i = 0; i < num_bytes; i++) {
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	69fa      	ldr	r2, [r7, #28]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbee      	blt.n	8000dc6 <cmd_buffer_spi_read+0xce>
	}

	//return data_buffer; // Return the pointer to the data buffer
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b009      	add	sp, #36	@ 0x24
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	080048f8 	.word	0x080048f8
 8000df8:	08004944 	.word	0x08004944
 8000dfc:	080047e4 	.word	0x080047e4
 8000e00:	08004978 	.word	0x08004978
 8000e04:	080049ac 	.word	0x080049ac
 8000e08:	08004894 	.word	0x08004894
 8000e0c:	080049c8 	.word	0x080049c8
 8000e10:	080049f0 	.word	0x080049f0

08000e14 <cmd_spi_read>:

void cmd_spi_read(int argc, char *argv[]) {
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	if (argc < 2) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	dc04      	bgt.n	8000e2e <cmd_spi_read+0x1a>
		printf("\nInvalid command: READ requires address\n");
 8000e24:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <cmd_spi_read+0x98>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f002 fa68 	bl	80032fc <puts>
		return;
 8000e2c:	e03a      	b.n	8000ea4 <cmd_spi_read+0x90>
	}

	// Parse the address
	char *endptr;
	uint8_t addr = (uint8_t) strtol(argv[1], &endptr, 16);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3304      	adds	r3, #4
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2208      	movs	r2, #8
 8000e36:	18b9      	adds	r1, r7, r2
 8000e38:	2210      	movs	r2, #16
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f002 f914 	bl	8003068 <strtol>
 8000e40:	0002      	movs	r2, r0
 8000e42:	230f      	movs	r3, #15
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	701a      	strb	r2, [r3, #0]
	if (*endptr != '\0') {
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d008      	beq.n	8000e62 <cmd_spi_read+0x4e>
		printf("\nInvalid address: %s\n", argv[1]);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	3304      	adds	r3, #4
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <cmd_spi_read+0x9c>)
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f002 f9de 	bl	800321c <iprintf>
		return;
 8000e60:	e020      	b.n	8000ea4 <cmd_spi_read+0x90>
	}

	// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <cmd_spi_read+0xa0>)
 8000e64:	695a      	ldr	r2, [r3, #20]
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <cmd_spi_read+0xa0>)
 8000e68:	4913      	ldr	r1, [pc, #76]	@ (8000eb8 <cmd_spi_read+0xa4>)
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	615a      	str	r2, [r3, #20]

	// Send address and read data
	SPI_WriteByte(addr);           // Send the address
 8000e6e:	250f      	movs	r5, #15
 8000e70:	197b      	adds	r3, r7, r5
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 f93b 	bl	80020f0 <SPI_WriteByte>
	uint8_t data = SPI_ReadByte(); // Read the data
 8000e7a:	260e      	movs	r6, #14
 8000e7c:	19bc      	adds	r4, r7, r6
 8000e7e:	f001 f98d 	bl	800219c <SPI_ReadByte>
 8000e82:	0003      	movs	r3, r0
 8000e84:	7023      	strb	r3, [r4, #0]

	// Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <cmd_spi_read+0xa0>)
 8000e88:	695a      	ldr	r2, [r3, #20]
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <cmd_spi_read+0xa0>)
 8000e8c:	2180      	movs	r1, #128	@ 0x80
 8000e8e:	0149      	lsls	r1, r1, #5
 8000e90:	430a      	orrs	r2, r1
 8000e92:	615a      	str	r2, [r3, #20]

	// Print the received data
	printf("\nSPI Read Completed: Address 0x%02X, Data 0x%02X\n", addr, data);
 8000e94:	197b      	adds	r3, r7, r5
 8000e96:	7819      	ldrb	r1, [r3, #0]
 8000e98:	19bb      	adds	r3, r7, r6
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <cmd_spi_read+0xa8>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f002 f9bc 	bl	800321c <iprintf>
}
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b005      	add	sp, #20
 8000ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	08004a04 	.word	0x08004a04
 8000eb0:	080047e4 	.word	0x080047e4
 8000eb4:	48000400 	.word	0x48000400
 8000eb8:	ffffefff 	.word	0xffffefff
 8000ebc:	08004a2c 	.word	0x08004a2c

08000ec0 <cmd_phy_spi_read>:

void cmd_phy_spi_read(int argc, char *argv[]) {
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	if (argc < 2) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	dc04      	bgt.n	8000eda <cmd_phy_spi_read+0x1a>
		printf("\nInvalid command: PHY Read requires address\n");
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <cmd_phy_spi_read+0x78>)
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f002 fa12 	bl	80032fc <puts>
		return;
 8000ed8:	e02b      	b.n	8000f32 <cmd_phy_spi_read+0x72>
	}

	char *endptr;
	uint8_t addr = (uint8_t) strtol(argv[1], &endptr, 16);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	3304      	adds	r3, #4
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	18b9      	adds	r1, r7, r2
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f002 f8be 	bl	8003068 <strtol>
 8000eec:	0002      	movs	r2, r0
 8000eee:	230f      	movs	r3, #15
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	701a      	strb	r2, [r3, #0]

	if (*endptr != '\0') {
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d008      	beq.n	8000f0e <cmd_phy_spi_read+0x4e>
		printf("\nInvalid address: %s\n", argv[2]);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	3308      	adds	r3, #8
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <cmd_phy_spi_read+0x7c>)
 8000f04:	0011      	movs	r1, r2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f002 f988 	bl	800321c <iprintf>
		//GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
		return;
 8000f0c:	e011      	b.n	8000f32 <cmd_phy_spi_read+0x72>
	}

	uint16_t data = enc_phy_read(addr);
 8000f0e:	250c      	movs	r5, #12
 8000f10:	197c      	adds	r4, r7, r5
 8000f12:	260f      	movs	r6, #15
 8000f14:	19bb      	adds	r3, r7, r6
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 fd0b 	bl	8001934 <enc_phy_read>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	8023      	strh	r3, [r4, #0]
	printf("\nSPI PHY Read Completed: Address 0x%02X, Data 0x%04X\n", addr,
 8000f22:	19bb      	adds	r3, r7, r6
 8000f24:	7819      	ldrb	r1, [r3, #0]
 8000f26:	197b      	adds	r3, r7, r5
 8000f28:	881a      	ldrh	r2, [r3, #0]
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <cmd_phy_spi_read+0x80>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f002 f975 	bl	800321c <iprintf>
			data);

}
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b005      	add	sp, #20
 8000f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f38:	08004a60 	.word	0x08004a60
 8000f3c:	080047e4 	.word	0x080047e4
 8000f40:	08004a8c 	.word	0x08004a8c

08000f44 <cmd_phy_spi_write>:

void cmd_phy_spi_write(int argc, char *argv[]) {
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	dc04      	bgt.n	8000f5e <cmd_phy_spi_write+0x1a>
		printf("\nInvalid command: PHY WRITE requires address and data\n");
 8000f54:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <cmd_phy_spi_write+0xbc>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f002 f9d0 	bl	80032fc <puts>
		return;
 8000f5c:	e04c      	b.n	8000ff8 <cmd_phy_spi_write+0xb4>
	}

	char *endptr;
	uint8_t addr = (uint8_t) strtol(argv[1], &endptr, 16);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3304      	adds	r3, #4
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2208      	movs	r2, #8
 8000f66:	18b9      	adds	r1, r7, r2
 8000f68:	2210      	movs	r2, #16
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f002 f87c 	bl	8003068 <strtol>
 8000f70:	0002      	movs	r2, r0
 8000f72:	230f      	movs	r3, #15
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	701a      	strb	r2, [r3, #0]

	if (*endptr != '\0') {
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d008      	beq.n	8000f92 <cmd_phy_spi_write+0x4e>
		printf("\nInvalid address: %s\n", argv[2]);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	3308      	adds	r3, #8
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <cmd_phy_spi_write+0xc0>)
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f002 f946 	bl	800321c <iprintf>
		//GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
		return;
 8000f90:	e032      	b.n	8000ff8 <cmd_phy_spi_write+0xb4>
	}

	uint16_t data = (uint16_t) strtol(argv[2], &endptr, 16);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	3308      	adds	r3, #8
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2208      	movs	r2, #8
 8000f9a:	18b9      	adds	r1, r7, r2
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f002 f862 	bl	8003068 <strtol>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	210c      	movs	r1, #12
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	801a      	strh	r2, [r3, #0]
	printf("data = %x\n\r", data);
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	881a      	ldrh	r2, [r3, #0]
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <cmd_phy_spi_write+0xc4>)
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f002 f931 	bl	800321c <iprintf>
	if (*endptr != '\0') {
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d008      	beq.n	8000fd4 <cmd_phy_spi_write+0x90>
		printf("\nInvalid data: %s\n", argv[3]);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b10      	ldr	r3, [pc, #64]	@ (800100c <cmd_phy_spi_write+0xc8>)
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f002 f925 	bl	800321c <iprintf>
		//GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
		return;
 8000fd2:	e011      	b.n	8000ff8 <cmd_phy_spi_write+0xb4>
	}

	enc_phy_write(addr, data);
 8000fd4:	240c      	movs	r4, #12
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	250f      	movs	r5, #15
 8000fdc:	197b      	adds	r3, r7, r5
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fcec 	bl	80019c0 <enc_phy_write>

	printf("\nSPI PHY Write Completed: Address 0x%02X, Data 0x%04X\n", addr,
 8000fe8:	197b      	adds	r3, r7, r5
 8000fea:	7819      	ldrb	r1, [r3, #0]
 8000fec:	193b      	adds	r3, r7, r4
 8000fee:	881a      	ldrh	r2, [r3, #0]
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <cmd_phy_spi_write+0xcc>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f002 f912 	bl	800321c <iprintf>
			data);

}
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	08004ac4 	.word	0x08004ac4
 8001004:	080047e4 	.word	0x080047e4
 8001008:	08004afc 	.word	0x08004afc
 800100c:	08004730 	.word	0x08004730
 8001010:	08004b08 	.word	0x08004b08

08001014 <cmd_eth_spi_read>:

void cmd_eth_spi_read(int argc, char *argv[]) {
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	dc04      	bgt.n	800102e <cmd_eth_spi_read+0x1a>
		printf("\nInvalid command: MAC READ requires reg_bank and address\n");
 8001024:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <cmd_eth_spi_read+0xa0>)
 8001026:	0018      	movs	r0, r3
 8001028:	f002 f968 	bl	80032fc <puts>
		return;
 800102c:	e03e      	b.n	80010ac <cmd_eth_spi_read+0x98>
	}

	int reg_bank = atoi(argv[1]);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3304      	adds	r3, #4
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0018      	movs	r0, r3
 8001036:	f001 fec1 	bl	8002dbc <atoi>
 800103a:	0003      	movs	r3, r0
 800103c:	617b      	str	r3, [r7, #20]
	if (reg_bank > 3) {
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b03      	cmp	r3, #3
 8001042:	dd04      	ble.n	800104e <cmd_eth_spi_read+0x3a>
		printf("\nInvalid Register Bank: Choose between [0, 3]\n");
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <cmd_eth_spi_read+0xa4>)
 8001046:	0018      	movs	r0, r3
 8001048:	f002 f958 	bl	80032fc <puts>
		return;
 800104c:	e02e      	b.n	80010ac <cmd_eth_spi_read+0x98>
	}

	char *endptr;
	uint8_t addr = (uint8_t) strtol(argv[2], &endptr, 16);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	3308      	adds	r3, #8
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	220c      	movs	r2, #12
 8001056:	18b9      	adds	r1, r7, r2
 8001058:	2210      	movs	r2, #16
 800105a:	0018      	movs	r0, r3
 800105c:	f002 f804 	bl	8003068 <strtol>
 8001060:	0002      	movs	r2, r0
 8001062:	2313      	movs	r3, #19
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	701a      	strb	r2, [r3, #0]
	if (*endptr != '\0') {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <cmd_eth_spi_read+0x6e>
		printf("\nInvalid address: %s\n", argv[2]);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3308      	adds	r3, #8
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <cmd_eth_spi_read+0xa8>)
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f002 f8ce 	bl	800321c <iprintf>
		return;
 8001080:	e014      	b.n	80010ac <cmd_eth_spi_read+0x98>
	}

	uint8_t data = enc_eth_read(addr, reg_bank);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	2512      	movs	r5, #18
 8001088:	197c      	adds	r4, r7, r5
 800108a:	2613      	movs	r6, #19
 800108c:	19bb      	adds	r3, r7, r6
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	0011      	movs	r1, r2
 8001092:	0018      	movs	r0, r3
 8001094:	f000 fcc4 	bl	8001a20 <enc_eth_read>
 8001098:	0003      	movs	r3, r0
 800109a:	7023      	strb	r3, [r4, #0]

	// Print the received data
	printf("\nSPI ETH Read Completed: Address 0x%02X, Data 0x%02X\n", addr,
 800109c:	19bb      	adds	r3, r7, r6
 800109e:	7819      	ldrb	r1, [r3, #0]
 80010a0:	197b      	adds	r3, r7, r5
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <cmd_eth_spi_read+0xac>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f002 f8b8 	bl	800321c <iprintf>
			data);

}
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b007      	add	sp, #28
 80010b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	08004b40 	.word	0x08004b40
 80010b8:	080047b4 	.word	0x080047b4
 80010bc:	080047e4 	.word	0x080047e4
 80010c0:	08004b7c 	.word	0x08004b7c

080010c4 <cmd_mac_spi_read>:

void cmd_mac_spi_read(int argc, char *argv[]) {
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	dc04      	bgt.n	80010de <cmd_mac_spi_read+0x1a>
		printf("\nInvalid command: MAC READ requires reg_bank and address\n");
 80010d4:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <cmd_mac_spi_read+0xa0>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f002 f910 	bl	80032fc <puts>
		return;
 80010dc:	e03e      	b.n	800115c <cmd_mac_spi_read+0x98>
	}

	int reg_bank = atoi(argv[1]);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3304      	adds	r3, #4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f001 fe69 	bl	8002dbc <atoi>
 80010ea:	0003      	movs	r3, r0
 80010ec:	617b      	str	r3, [r7, #20]
	if (reg_bank > 3) {
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	dd04      	ble.n	80010fe <cmd_mac_spi_read+0x3a>
		printf("\nInvalid Register Bank: Choose between [0, 3]\n");
 80010f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <cmd_mac_spi_read+0xa4>)
 80010f6:	0018      	movs	r0, r3
 80010f8:	f002 f900 	bl	80032fc <puts>
		return;
 80010fc:	e02e      	b.n	800115c <cmd_mac_spi_read+0x98>
	}

	char *endptr;
	uint8_t addr = (uint8_t) strtol(argv[2], &endptr, 16);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3308      	adds	r3, #8
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	220c      	movs	r2, #12
 8001106:	18b9      	adds	r1, r7, r2
 8001108:	2210      	movs	r2, #16
 800110a:	0018      	movs	r0, r3
 800110c:	f001 ffac 	bl	8003068 <strtol>
 8001110:	0002      	movs	r2, r0
 8001112:	2313      	movs	r3, #19
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	701a      	strb	r2, [r3, #0]
	if (*endptr != '\0') {
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <cmd_mac_spi_read+0x6e>
		printf("\nInvalid address: %s\n", argv[2]);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3308      	adds	r3, #8
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <cmd_mac_spi_read+0xa8>)
 8001128:	0011      	movs	r1, r2
 800112a:	0018      	movs	r0, r3
 800112c:	f002 f876 	bl	800321c <iprintf>
		return;
 8001130:	e014      	b.n	800115c <cmd_mac_spi_read+0x98>
	}

	uint8_t data = enc_mac_read(addr, reg_bank);
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	2512      	movs	r5, #18
 8001138:	197c      	adds	r4, r7, r5
 800113a:	2613      	movs	r6, #19
 800113c:	19bb      	adds	r3, r7, r6
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f000 fb94 	bl	8001870 <enc_mac_read>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]

	// Print the received data
	printf("\nSPI MAC Read Completed: Address 0x%02X, Data 0x%02X\n", addr,
 800114c:	19bb      	adds	r3, r7, r6
 800114e:	7819      	ldrb	r1, [r3, #0]
 8001150:	197b      	adds	r3, r7, r5
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <cmd_mac_spi_read+0xac>)
 8001156:	0018      	movs	r0, r3
 8001158:	f002 f860 	bl	800321c <iprintf>
			data);
}
 800115c:	46bd      	mov	sp, r7
 800115e:	b007      	add	sp, #28
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	08004b40 	.word	0x08004b40
 8001168:	080047b4 	.word	0x080047b4
 800116c:	080047e4 	.word	0x080047e4
 8001170:	08004bb4 	.word	0x08004bb4

08001174 <cmd_enc_reset>:

void cmd_enc_reset(int argc, char *argv[]) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	if (argc != 1) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d004      	beq.n	800118e <cmd_enc_reset+0x1a>
		printf("\nInvalid command: Reset \n");
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <cmd_enc_reset+0x2c>)
 8001186:	0018      	movs	r0, r3
 8001188:	f002 f8b8 	bl	80032fc <puts>
		return;
 800118c:	e005      	b.n	800119a <cmd_enc_reset+0x26>
	}

	enc_reset();
 800118e:	f000 fc81 	bl	8001a94 <enc_reset>
	// Print the received data
	printf("\n System Reset");
 8001192:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <cmd_enc_reset+0x30>)
 8001194:	0018      	movs	r0, r3
 8001196:	f002 f841 	bl	800321c <iprintf>
}
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	08004bec 	.word	0x08004bec
 80011a4:	08004c08 	.word	0x08004c08

080011a8 <cmd_enc_init>:

void cmd_enc_init(int argc, char *argv[]) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	if (argc != 7) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b07      	cmp	r3, #7
 80011b6:	d008      	beq.n	80011ca <cmd_enc_init+0x22>
		printf("\nInvalid command: ENC_INIT requires MAC.\n");
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <cmd_enc_init+0x94>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f002 f89e 	bl	80032fc <puts>
		printf("Usage: ENC_INIT MAC1 MAC2 MAC3 MAC4 MAC5 MAC6\n");
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <cmd_enc_init+0x98>)
 80011c2:	0018      	movs	r0, r3
 80011c4:	f002 f89a 	bl	80032fc <puts>
		return;
 80011c8:	e035      	b.n	8001236 <cmd_enc_init+0x8e>
	}

	// Parse MAC address
	uint8_t mac_address[6];
	for (int i = 0; i < 6; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	e026      	b.n	800121e <cmd_enc_init+0x76>
		char *endptr;
		mac_address[i] = (uint8_t) strtol(argv[i + 1], &endptr, 16);
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2208      	movs	r2, #8
 80011de:	18b9      	adds	r1, r7, r2
 80011e0:	2210      	movs	r2, #16
 80011e2:	0018      	movs	r0, r3
 80011e4:	f001 ff40 	bl	8003068 <strtol>
 80011e8:	0003      	movs	r3, r0
 80011ea:	b2d9      	uxtb	r1, r3
 80011ec:	230c      	movs	r3, #12
 80011ee:	18fa      	adds	r2, r7, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	1c0a      	adds	r2, r1, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		if (*endptr != '\0') {
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <cmd_enc_init+0x70>
			printf("\nInvalid MAC address: %s\n", argv[i + 1]);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	18d3      	adds	r3, r2, r3
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <cmd_enc_init+0x9c>)
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f002 f803 	bl	800321c <iprintf>
 8001216:	e00e      	b.n	8001236 <cmd_enc_init+0x8e>
	for (int i = 0; i < 6; i++) {
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b05      	cmp	r3, #5
 8001222:	ddd5      	ble.n	80011d0 <cmd_enc_init+0x28>
			return;
		}
	}

	// Initialize ENC28J60
	enc_init(mac_address);
 8001224:	230c      	movs	r3, #12
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fc4d 	bl	8001ac8 <enc_init>

	printf("\nENC28J60 Initialized.\n");
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <cmd_enc_init+0xa0>)
 8001230:	0018      	movs	r0, r3
 8001232:	f002 f863 	bl	80032fc <puts>
}
 8001236:	46bd      	mov	sp, r7
 8001238:	b006      	add	sp, #24
 800123a:	bd80      	pop	{r7, pc}
 800123c:	08004c18 	.word	0x08004c18
 8001240:	08004c44 	.word	0x08004c44
 8001244:	08004c74 	.word	0x08004c74
 8001248:	08004c90 	.word	0x08004c90

0800124c <cmd_arp_send>:

void cmd_arp_send(int argc, char *argv[]) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	if (argc != 1) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d004      	beq.n	8001266 <cmd_arp_send+0x1a>
		printf("\nInvalid command: Reset \n");
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <cmd_arp_send+0x2c>)
 800125e:	0018      	movs	r0, r3
 8001260:	f002 f84c 	bl	80032fc <puts>
		return;
 8001264:	e005      	b.n	8001272 <cmd_arp_send+0x26>
	}
	arp_request();
 8001266:	f7ff f89b 	bl	80003a0 <arp_request>
	//arp_request(target_ip);
	// Print the received data
	printf("\n\r ARP Request Sent\n\r");
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <cmd_arp_send+0x30>)
 800126c:	0018      	movs	r0, r3
 800126e:	f001 ffd5 	bl	800321c <iprintf>
}
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}
 8001278:	08004bec 	.word	0x08004bec
 800127c:	08004ca8 	.word	0x08004ca8

08001280 <cmd_tcp_packet_process>:

void cmd_tcp_packet_process(int argc, char *argv[]) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	if (argc != 2) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d004      	beq.n	800129a <cmd_tcp_packet_process+0x1a>
		printf("\nInvalid command: packetprocess \n");
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <cmd_tcp_packet_process+0x78>)
 8001292:	0018      	movs	r0, r3
 8001294:	f002 f832 	bl	80032fc <puts>
		return;
 8001298:	e02a      	b.n	80012f0 <cmd_tcp_packet_process+0x70>
	}
	char *endptr;
	uint16_t addr = (uint16_t) strtol(argv[1], &endptr, 16);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3304      	adds	r3, #4
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	18b9      	adds	r1, r7, r2
 80012a4:	2210      	movs	r2, #16
 80012a6:	0018      	movs	r0, r3
 80012a8:	f001 fede 	bl	8003068 <strtol>
 80012ac:	0002      	movs	r2, r0
 80012ae:	210e      	movs	r1, #14
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	801a      	strh	r2, [r3, #0]
	printf("addr = %x\n\r", addr);
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	881a      	ldrh	r2, [r3, #0]
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <cmd_tcp_packet_process+0x7c>)
 80012ba:	0011      	movs	r1, r2
 80012bc:	0018      	movs	r0, r3
 80012be:	f001 ffad 	bl	800321c <iprintf>
	if (*endptr != '\0') {
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d008      	beq.n	80012dc <cmd_tcp_packet_process+0x5c>
		printf("\nInvalid addr: %s\n", argv[1]);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	3304      	adds	r3, #4
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <cmd_tcp_packet_process+0x80>)
 80012d2:	0011      	movs	r1, r2
 80012d4:	0018      	movs	r0, r3
 80012d6:	f001 ffa1 	bl	800321c <iprintf>
		//GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
		return;
 80012da:	e009      	b.n	80012f0 <cmd_tcp_packet_process+0x70>
	}
	process_packet_from_buffer(addr);
 80012dc:	230e      	movs	r3, #14
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f001 facc 	bl	8002880 <process_packet_from_buffer>
	//arp_request(target_ip);
	// Print the received data
	printf("\n\r ARP Request Sent\n\r");
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <cmd_tcp_packet_process+0x84>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 ff96 	bl	800321c <iprintf>
}
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	08004cc0 	.word	0x08004cc0
 80012fc:	08004ce4 	.word	0x08004ce4
 8001300:	08004cf0 	.word	0x08004cf0
 8001304:	08004ca8 	.word	0x08004ca8

08001308 <enc_set_autoinc>:
 *      Author: nadgi
 */
#include "enc.h"
#include "spi.h"

void enc_set_autoinc(void) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~SPI2_CS_PIN;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <enc_set_autoinc+0x70>)
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <enc_set_autoinc+0x70>)
 8001314:	4919      	ldr	r1, [pc, #100]	@ (800137c <enc_set_autoinc+0x74>)
 8001316:	400a      	ands	r2, r1
 8001318:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x1E);
 800131a:	201e      	movs	r0, #30
 800131c:	f000 fee8 	bl	80020f0 <SPI_WriteByte>
	uint8_t data = SPI_ReadByte(); // Read the data from the SPI slave
 8001320:	1dfc      	adds	r4, r7, #7
 8001322:	f000 ff3b 	bl	800219c <SPI_ReadByte>
 8001326:	0003      	movs	r3, r0
 8001328:	7023      	strb	r3, [r4, #0]
	GPIOB->ODR |= SPI2_CS_PIN;
 800132a:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <enc_set_autoinc+0x70>)
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <enc_set_autoinc+0x70>)
 8001330:	2180      	movs	r1, #128	@ 0x80
 8001332:	0149      	lsls	r1, r1, #5
 8001334:	430a      	orrs	r2, r1
 8001336:	615a      	str	r2, [r3, #20]
	data |= (1 << 7); // Set bit 7 of the data to 1
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	1dfa      	adds	r2, r7, #7
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	2180      	movs	r1, #128	@ 0x80
 8001340:	4249      	negs	r1, r1
 8001342:	430a      	orrs	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <enc_set_autoinc+0x70>)
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <enc_set_autoinc+0x70>)
 800134c:	490b      	ldr	r1, [pc, #44]	@ (800137c <enc_set_autoinc+0x74>)
 800134e:	400a      	ands	r2, r1
 8001350:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x5E);      // Write ECON2 address
 8001352:	205e      	movs	r0, #94	@ 0x5e
 8001354:	f000 fecc 	bl	80020f0 <SPI_WriteByte>
	SPI_WriteByte(data);      // Write the modified data with MSB set
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	0018      	movs	r0, r3
 800135e:	f000 fec7 	bl	80020f0 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 8001362:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <enc_set_autoinc+0x70>)
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <enc_set_autoinc+0x70>)
 8001368:	2180      	movs	r1, #128	@ 0x80
 800136a:	0149      	lsls	r1, r1, #5
 800136c:	430a      	orrs	r2, r1
 800136e:	615a      	str	r2, [r3, #20]
}
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b003      	add	sp, #12
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	48000400 	.word	0x48000400
 800137c:	ffffefff 	.word	0xffffefff

08001380 <enc_select_reg_bank>:
void enc_select_reg_bank(uint8_t bank) {
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	0002      	movs	r2, r0
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 800138c:	4b36      	ldr	r3, [pc, #216]	@ (8001468 <enc_select_reg_bank+0xe8>)
 800138e:	695a      	ldr	r2, [r3, #20]
 8001390:	4b35      	ldr	r3, [pc, #212]	@ (8001468 <enc_select_reg_bank+0xe8>)
 8001392:	4936      	ldr	r1, [pc, #216]	@ (800146c <enc_select_reg_bank+0xec>)
 8001394:	400a      	ands	r2, r1
 8001396:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0X1F); // Send the address
 8001398:	201f      	movs	r0, #31
 800139a:	f000 fea9 	bl	80020f0 <SPI_WriteByte>
	uint8_t data = SPI_ReadByte(); // Read the data
 800139e:	250f      	movs	r5, #15
 80013a0:	197c      	adds	r4, r7, r5
 80013a2:	f000 fefb 	bl	800219c <SPI_ReadByte>
 80013a6:	0003      	movs	r3, r0
 80013a8:	7023      	strb	r3, [r4, #0]
	GPIOB->ODR |= SPI2_CS_PIN;
 80013aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <enc_select_reg_bank+0xe8>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <enc_select_reg_bank+0xe8>)
 80013b0:	2180      	movs	r1, #128	@ 0x80
 80013b2:	0149      	lsls	r1, r1, #5
 80013b4:	430a      	orrs	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]

	// Modify the last two bits of 'data' based on 'bank'
	data &= ~0x03; // Clear the last two bits
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	197a      	adds	r2, r7, r5
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	2103      	movs	r1, #3
 80013c0:	438a      	bics	r2, r1
 80013c2:	701a      	strb	r2, [r3, #0]
	switch (bank) {
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d01e      	beq.n	800140a <enc_select_reg_bank+0x8a>
 80013cc:	dc25      	bgt.n	800141a <enc_select_reg_bank+0x9a>
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d013      	beq.n	80013fa <enc_select_reg_bank+0x7a>
 80013d2:	dc22      	bgt.n	800141a <enc_select_reg_bank+0x9a>
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <enc_select_reg_bank+0x5e>
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d006      	beq.n	80013ea <enc_select_reg_bank+0x6a>
 80013dc:	e01d      	b.n	800141a <enc_select_reg_bank+0x9a>
	case 0:
		data |= 0x00; // Last two bits: 00
 80013de:	220f      	movs	r2, #15
 80013e0:	18bb      	adds	r3, r7, r2
 80013e2:	18ba      	adds	r2, r7, r2
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	701a      	strb	r2, [r3, #0]
		break;
 80013e8:	e01b      	b.n	8001422 <enc_select_reg_bank+0xa2>
	case 1:
		data |= 0x01; // Last two bits: 01
 80013ea:	220f      	movs	r2, #15
 80013ec:	18bb      	adds	r3, r7, r2
 80013ee:	18ba      	adds	r2, r7, r2
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
		break;
 80013f8:	e013      	b.n	8001422 <enc_select_reg_bank+0xa2>
	case 2:
		data |= 0x02; // Last two bits: 10
 80013fa:	220f      	movs	r2, #15
 80013fc:	18bb      	adds	r3, r7, r2
 80013fe:	18ba      	adds	r2, r7, r2
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	2102      	movs	r1, #2
 8001404:	430a      	orrs	r2, r1
 8001406:	701a      	strb	r2, [r3, #0]
		break;
 8001408:	e00b      	b.n	8001422 <enc_select_reg_bank+0xa2>
	case 3:
		data |= 0x03; // Last two bits: 11
 800140a:	220f      	movs	r2, #15
 800140c:	18bb      	adds	r3, r7, r2
 800140e:	18ba      	adds	r2, r7, r2
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	2103      	movs	r1, #3
 8001414:	430a      	orrs	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
		break;
 8001418:	e003      	b.n	8001422 <enc_select_reg_bank+0xa2>
	default:
		printf("wrong bank");
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <enc_select_reg_bank+0xf0>)
 800141c:	0018      	movs	r0, r3
 800141e:	f001 fefd 	bl	800321c <iprintf>
	}

	for (int i = 0; i < 16; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	e002      	b.n	800142e <enc_select_reg_bank+0xae>
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	ddf9      	ble.n	8001428 <enc_select_reg_bank+0xa8>
		; // Delay

	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <enc_select_reg_bank+0xe8>)
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <enc_select_reg_bank+0xe8>)
 800143a:	490c      	ldr	r1, [pc, #48]	@ (800146c <enc_select_reg_bank+0xec>)
 800143c:	400a      	ands	r2, r1
 800143e:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x5F);
 8001440:	205f      	movs	r0, #95	@ 0x5f
 8001442:	f000 fe55 	bl	80020f0 <SPI_WriteByte>
	SPI_WriteByte(data); // Send the modified data
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	0018      	movs	r0, r3
 800144e:	f000 fe4f 	bl	80020f0 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <enc_select_reg_bank+0xe8>)
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <enc_select_reg_bank+0xe8>)
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	0149      	lsls	r1, r1, #5
 800145c:	430a      	orrs	r2, r1
 800145e:	615a      	str	r2, [r3, #20]
}
 8001460:	46c0      	nop			@ (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	48000400 	.word	0x48000400
 800146c:	ffffefff 	.word	0xffffefff
 8001470:	08004d04 	.word	0x08004d04

08001474 <enc_control_write>:

void enc_control_write(int reg_bank, uint8_t addr, uint8_t data) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	0008      	movs	r0, r1
 800147e:	0011      	movs	r1, r2
 8001480:	1cfb      	adds	r3, r7, #3
 8001482:	1c02      	adds	r2, r0, #0
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	1cbb      	adds	r3, r7, #2
 8001488:	1c0a      	adds	r2, r1, #0
 800148a:	701a      	strb	r2, [r3, #0]
	uint8_t opcode = 0x40;
 800148c:	200f      	movs	r0, #15
 800148e:	183b      	adds	r3, r7, r0
 8001490:	2240      	movs	r2, #64	@ 0x40
 8001492:	701a      	strb	r2, [r3, #0]
	addr = addr + opcode;
 8001494:	1cfb      	adds	r3, r7, #3
 8001496:	1cf9      	adds	r1, r7, #3
 8001498:	183a      	adds	r2, r7, r0
 800149a:	7809      	ldrb	r1, [r1, #0]
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	188a      	adds	r2, r1, r2
 80014a0:	701a      	strb	r2, [r3, #0]
	enc_select_reg_bank(reg_bank);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff ff6a 	bl	8001380 <enc_select_reg_bank>
	GPIOB->ODR &= ~SPI2_CS_PIN;
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <enc_control_write+0x70>)
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <enc_control_write+0x70>)
 80014b2:	490d      	ldr	r1, [pc, #52]	@ (80014e8 <enc_control_write+0x74>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(addr);
 80014b8:	1cfb      	adds	r3, r7, #3
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	0018      	movs	r0, r3
 80014be:	f000 fe17 	bl	80020f0 <SPI_WriteByte>
	SPI_WriteByte(data);
 80014c2:	1cbb      	adds	r3, r7, #2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	0018      	movs	r0, r3
 80014c8:	f000 fe12 	bl	80020f0 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <enc_control_write+0x70>)
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <enc_control_write+0x70>)
 80014d2:	2180      	movs	r1, #128	@ 0x80
 80014d4:	0149      	lsls	r1, r1, #5
 80014d6:	430a      	orrs	r2, r1
 80014d8:	615a      	str	r2, [r3, #20]
}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b004      	add	sp, #16
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	48000400 	.word	0x48000400
 80014e8:	ffffefff 	.word	0xffffefff

080014ec <enc_buffer_init>:

void enc_buffer_init(uint16_t start_address, uint16_t end_address) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	0002      	movs	r2, r0
 80014f4:	1dbb      	adds	r3, r7, #6
 80014f6:	801a      	strh	r2, [r3, #0]
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	1c0a      	adds	r2, r1, #0
 80014fc:	801a      	strh	r2, [r3, #0]

	if (start_address > 0x1FFF || end_address > 0x1FFF) {
 80014fe:	1dbb      	adds	r3, r7, #6
 8001500:	881a      	ldrh	r2, [r3, #0]
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	429a      	cmp	r2, r3
 8001508:	d205      	bcs.n	8001516 <enc_buffer_init+0x2a>
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	881a      	ldrh	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	429a      	cmp	r2, r3
 8001514:	d308      	bcc.n	8001528 <enc_buffer_init+0x3c>
		printf("\nInvalid Buffer Range: Start 0x%04X, End 0x%04X\n",
 8001516:	1dbb      	adds	r3, r7, #6
 8001518:	8819      	ldrh	r1, [r3, #0]
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	881a      	ldrh	r2, [r3, #0]
 800151e:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <enc_buffer_init+0xf0>)
 8001520:	0018      	movs	r0, r3
 8001522:	f001 fe7b 	bl	800321c <iprintf>
				start_address, end_address);
		return;
 8001526:	e055      	b.n	80015d4 <enc_buffer_init+0xe8>
	}

	start_address &= ~1;  // Align to even address
 8001528:	1dbb      	adds	r3, r7, #6
 800152a:	1dba      	adds	r2, r7, #6
 800152c:	8812      	ldrh	r2, [r2, #0]
 800152e:	2101      	movs	r1, #1
 8001530:	438a      	bics	r2, r1
 8001532:	801a      	strh	r2, [r3, #0]

	enc_control_write(0, 0x00, (uint8_t) (start_address & 0xFF)); // ERDPTL
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	001a      	movs	r2, r3
 800153c:	2100      	movs	r1, #0
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff ff98 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x01, (uint8_t) (start_address >> 8)); // ERDPTH
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	001a      	movs	r2, r3
 8001550:	2101      	movs	r1, #1
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ff8e 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x08, (uint8_t) (start_address & 0xFF)); // ERXSTL
 8001558:	1dbb      	adds	r3, r7, #6
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	001a      	movs	r2, r3
 8001560:	2108      	movs	r1, #8
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff ff86 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x09, (uint8_t) (start_address >> 8)); // ERXSTH
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b29b      	uxth	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	001a      	movs	r2, r3
 8001574:	2109      	movs	r1, #9
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff ff7c 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x0A, (uint8_t) (end_address & 0xFF)); // ERXNDL
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	001a      	movs	r2, r3
 8001584:	210a      	movs	r1, #10
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff ff74 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x0B, (uint8_t) (end_address >> 8)); // ERXNDH
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	b29b      	uxth	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	001a      	movs	r2, r3
 8001598:	210b      	movs	r1, #11
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff ff6a 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x0C, (uint8_t) (start_address & 0xFF)); // ERXRDPTL
 80015a0:	1dbb      	adds	r3, r7, #6
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	001a      	movs	r2, r3
 80015a8:	210c      	movs	r1, #12
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff ff62 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x0D, (uint8_t) (start_address >> 8)); // ERXRDPTH
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	001a      	movs	r2, r3
 80015bc:	210d      	movs	r1, #13
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff ff58 	bl	8001474 <enc_control_write>
	printf("\nBuffer Initialized: Start 0x%04X, End 0x%04X\n", start_address,
 80015c4:	1dbb      	adds	r3, r7, #6
 80015c6:	8819      	ldrh	r1, [r3, #0]
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <enc_buffer_init+0xf4>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f001 fe24 	bl	800321c <iprintf>
			end_address);
}
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	08004d10 	.word	0x08004d10
 80015e0:	08004d44 	.word	0x08004d44

080015e4 <enc_buffer_write>:

void enc_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr) {
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	230a      	movs	r3, #10
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	1c0a      	adds	r2, r1, #0
 80015f4:	801a      	strh	r2, [r3, #0]
	if (num_bytes < 1) {
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	dc06      	bgt.n	800160a <enc_buffer_write+0x26>
		printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4b40      	ldr	r3, [pc, #256]	@ (8001700 <enc_buffer_write+0x11c>)
 8001600:	0011      	movs	r1, r2
 8001602:	0018      	movs	r0, r3
 8001604:	f001 fe0a 	bl	800321c <iprintf>
		return;
 8001608:	e077      	b.n	80016fa <enc_buffer_write+0x116>
	}
	if (start_address > 0x1FFF) {
 800160a:	210a      	movs	r1, #10
 800160c:	187b      	adds	r3, r7, r1
 800160e:	881a      	ldrh	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	019b      	lsls	r3, r3, #6
 8001614:	429a      	cmp	r2, r3
 8001616:	d307      	bcc.n	8001628 <enc_buffer_write+0x44>
		printf("\n\rInvalid address: %04X\n\r", start_address);
 8001618:	187b      	adds	r3, r7, r1
 800161a:	881a      	ldrh	r2, [r3, #0]
 800161c:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <enc_buffer_write+0x120>)
 800161e:	0011      	movs	r1, r2
 8001620:	0018      	movs	r0, r3
 8001622:	f001 fdfb 	bl	800321c <iprintf>
		return;
 8001626:	e068      	b.n	80016fa <enc_buffer_write+0x116>
	}
	if (start_address < TX_BUFFER_START
			|| (start_address + num_bytes) > TX_BUFFER_END) {
 8001628:	210a      	movs	r1, #10
 800162a:	187b      	adds	r3, r7, r1
 800162c:	881a      	ldrh	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	18d2      	adds	r2, r2, r3
	if (start_address < TX_BUFFER_START
 8001632:	2380      	movs	r3, #128	@ 0x80
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	429a      	cmp	r2, r3
 8001638:	db07      	blt.n	800164a <enc_buffer_write+0x66>
		printf("\nInvalid TX Address: Start 0x%04X, Size %d\n", start_address,
 800163a:	187b      	adds	r3, r7, r1
 800163c:	8819      	ldrh	r1, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <enc_buffer_write+0x124>)
 8001642:	0018      	movs	r0, r3
 8001644:	f001 fdea 	bl	800321c <iprintf>
				num_bytes);
		return;
 8001648:	e057      	b.n	80016fa <enc_buffer_write+0x116>
	}
	//buffer_init(0000,start_address-2);
	if (num_bytes > 1) {
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	dd01      	ble.n	8001654 <enc_buffer_write+0x70>
		enc_set_autoinc();
 8001650:	f7ff fe5a 	bl	8001308 <enc_set_autoinc>
	}
	uint8_t higher_byte = (uint8_t) ((start_address >> 8) & 0xFF);
 8001654:	240a      	movs	r4, #10
 8001656:	193b      	adds	r3, r7, r4
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b29a      	uxth	r2, r3
 800165e:	2113      	movs	r1, #19
 8001660:	187b      	adds	r3, r7, r1
 8001662:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t) (start_address & 0xFF);
 8001664:	2512      	movs	r5, #18
 8001666:	197b      	adds	r3, r7, r5
 8001668:	193a      	adds	r2, r7, r4
 800166a:	8812      	ldrh	r2, [r2, #0]
 800166c:	701a      	strb	r2, [r3, #0]

	enc_control_write(0, 0x03, higher_byte); // High byte
 800166e:	187b      	adds	r3, r7, r1
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	001a      	movs	r2, r3
 8001674:	2103      	movs	r1, #3
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff fefc 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x02, lower_byte); //
 800167c:	197b      	adds	r3, r7, r5
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	001a      	movs	r2, r3
 8001682:	2102      	movs	r1, #2
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fef5 	bl	8001474 <enc_control_write>

	uint8_t opcode = 0x7A; // Write buffer memory command
 800168a:	2011      	movs	r0, #17
 800168c:	183b      	adds	r3, r7, r0
 800168e:	227a      	movs	r2, #122	@ 0x7a
 8001690:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN; // Pull CS Low
 8001692:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <enc_buffer_write+0x128>)
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <enc_buffer_write+0x128>)
 8001698:	491d      	ldr	r1, [pc, #116]	@ (8001710 <enc_buffer_write+0x12c>)
 800169a:	400a      	ands	r2, r1
 800169c:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 800169e:	183b      	adds	r3, r7, r0
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 fd24 	bl	80020f0 <SPI_WriteByte>
	printf("Writing %d bytes to buffer starting at address 0x%04X:\n\r",
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	881a      	ldrh	r2, [r3, #0]
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <enc_buffer_write+0x130>)
 80016b0:	0018      	movs	r0, r3
 80016b2:	f001 fdb3 	bl	800321c <iprintf>
			num_bytes, start_address);
	for (int i = 0; i < num_bytes; i++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e013      	b.n	80016e4 <enc_buffer_write+0x100>
		printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	001a      	movs	r2, r3
 80016c6:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <enc_buffer_write+0x134>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f001 fda7 	bl	800321c <iprintf>
		SPI_WriteByte(*data_ptr); // Send data
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	0018      	movs	r0, r3
 80016d4:	f000 fd0c 	bl	80020f0 <SPI_WriteByte>
		data_ptr++;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbe7      	blt.n	80016bc <enc_buffer_write+0xd8>
	}
	GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <enc_buffer_write+0x128>)
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <enc_buffer_write+0x128>)
 80016f2:	2180      	movs	r1, #128	@ 0x80
 80016f4:	0149      	lsls	r1, r1, #5
 80016f6:	430a      	orrs	r2, r1
 80016f8:	615a      	str	r2, [r3, #20]
}
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b006      	add	sp, #24
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	08004d74 	.word	0x08004d74
 8001704:	08004d94 	.word	0x08004d94
 8001708:	08004db0 	.word	0x08004db0
 800170c:	48000400 	.word	0x48000400
 8001710:	ffffefff 	.word	0xffffefff
 8001714:	08004ddc 	.word	0x08004ddc
 8001718:	08004e18 	.word	0x08004e18

0800171c <enc_buffer_read>:


uint16_t enc_buffer_read(int num_bytes, uint16_t start_address,
		uint8_t *data_ptr) {
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	230a      	movs	r3, #10
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	1c0a      	adds	r2, r1, #0
 800172c:	801a      	strh	r2, [r3, #0]
	if (num_bytes < 1) {
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	dc07      	bgt.n	8001744 <enc_buffer_read+0x28>
		printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <enc_buffer_read+0x138>)
 8001738:	0011      	movs	r1, r2
 800173a:	0018      	movs	r0, r3
 800173c:	f001 fd6e 	bl	800321c <iprintf>
		return 0;
 8001740:	2300      	movs	r3, #0
 8001742:	e083      	b.n	800184c <enc_buffer_read+0x130>
	}
	if (start_address > 0x1FFF) {
 8001744:	210a      	movs	r1, #10
 8001746:	187b      	adds	r3, r7, r1
 8001748:	881a      	ldrh	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	019b      	lsls	r3, r3, #6
 800174e:	429a      	cmp	r2, r3
 8001750:	d308      	bcc.n	8001764 <enc_buffer_read+0x48>
		printf("\n\rInvalid address: %04X\n\r", start_address);
 8001752:	187b      	adds	r3, r7, r1
 8001754:	881a      	ldrh	r2, [r3, #0]
 8001756:	4b40      	ldr	r3, [pc, #256]	@ (8001858 <enc_buffer_read+0x13c>)
 8001758:	0011      	movs	r1, r2
 800175a:	0018      	movs	r0, r3
 800175c:	f001 fd5e 	bl	800321c <iprintf>
		return 0;
 8001760:	2300      	movs	r3, #0
 8001762:	e073      	b.n	800184c <enc_buffer_read+0x130>
	}

	if (start_address < RX_BUFFER_START
 8001764:	210a      	movs	r1, #10
 8001766:	187b      	adds	r3, r7, r1
 8001768:	881a      	ldrh	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	@ 0x80
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	429a      	cmp	r2, r3
 8001770:	d307      	bcc.n	8001782 <enc_buffer_read+0x66>
			|| (start_address + num_bytes) > RX_BUFFER_END) {
 8001772:	187b      	adds	r3, r7, r1
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	18d2      	adds	r2, r2, r3
 800177a:	2380      	movs	r3, #128	@ 0x80
 800177c:	019b      	lsls	r3, r3, #6
 800177e:	429a      	cmp	r2, r3
 8001780:	db09      	blt.n	8001796 <enc_buffer_read+0x7a>
		printf("\nInvalid RX Address: Start 0x%04X, Size %d\n", start_address,
 8001782:	230a      	movs	r3, #10
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	8819      	ldrh	r1, [r3, #0]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4b34      	ldr	r3, [pc, #208]	@ (800185c <enc_buffer_read+0x140>)
 800178c:	0018      	movs	r0, r3
 800178e:	f001 fd45 	bl	800321c <iprintf>
				num_bytes);
		return 0;
 8001792:	2300      	movs	r3, #0
 8001794:	e05a      	b.n	800184c <enc_buffer_read+0x130>
	}

	if (num_bytes > 1) {
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	dd01      	ble.n	80017a0 <enc_buffer_read+0x84>
		enc_set_autoinc();
 800179c:	f7ff fdb4 	bl	8001308 <enc_set_autoinc>
	}
	//buffer_init(start_address,start_address+num_bytes);
	uint8_t higher_byte = (uint8_t) ((start_address >> 8) & 0xFF);
 80017a0:	240a      	movs	r4, #10
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	2113      	movs	r1, #19
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t) (start_address & 0xFF);
 80017b0:	2512      	movs	r5, #18
 80017b2:	197b      	adds	r3, r7, r5
 80017b4:	193a      	adds	r2, r7, r4
 80017b6:	8812      	ldrh	r2, [r2, #0]
 80017b8:	701a      	strb	r2, [r3, #0]
	enc_control_write(0, 0x01, higher_byte); // ERDPTH
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	001a      	movs	r2, r3
 80017c0:	2101      	movs	r1, #1
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fe56 	bl	8001474 <enc_control_write>
	enc_control_write(0, 0x00, lower_byte); // ERDPTL
 80017c8:	197b      	adds	r3, r7, r5
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	001a      	movs	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fe4f 	bl	8001474 <enc_control_write>
	printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r",
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	881a      	ldrh	r2, [r3, #0]
 80017da:	68f9      	ldr	r1, [r7, #12]
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <enc_buffer_read+0x144>)
 80017de:	0018      	movs	r0, r3
 80017e0:	f001 fd1c 	bl	800321c <iprintf>
			num_bytes, start_address);
	uint8_t opcode = 0x3A; // Read buffer memory command
 80017e4:	2011      	movs	r0, #17
 80017e6:	183b      	adds	r3, r7, r0
 80017e8:	223a      	movs	r2, #58	@ 0x3a
 80017ea:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN; // Pull CS Low
 80017ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <enc_buffer_read+0x148>)
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <enc_buffer_read+0x148>)
 80017f2:	491d      	ldr	r1, [pc, #116]	@ (8001868 <enc_buffer_read+0x14c>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 80017f8:	183b      	adds	r3, r7, r0
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f000 fc77 	bl	80020f0 <SPI_WriteByte>
	for (int i = 0; i < num_bytes; i++) {
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e014      	b.n	8001832 <enc_buffer_read+0x116>
		*data_ptr = SPI_ReadByte(); // Read data
 8001808:	f000 fcc8 	bl	800219c <SPI_ReadByte>
 800180c:	0003      	movs	r3, r0
 800180e:	001a      	movs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	701a      	strb	r2, [r3, #0]
		printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1c59      	adds	r1, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	001a      	movs	r2, r3
 800181e:	4b13      	ldr	r3, [pc, #76]	@ (800186c <enc_buffer_read+0x150>)
 8001820:	0018      	movs	r0, r3
 8001822:	f001 fcfb 	bl	800321c <iprintf>
		data_ptr++;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	429a      	cmp	r2, r3
 8001838:	dbe6      	blt.n	8001808 <enc_buffer_read+0xec>
	}
	GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <enc_buffer_read+0x148>)
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <enc_buffer_read+0x148>)
 8001840:	2180      	movs	r1, #128	@ 0x80
 8001842:	0149      	lsls	r1, r1, #5
 8001844:	430a      	orrs	r2, r1
 8001846:	615a      	str	r2, [r3, #20]
	return (uint16_t) num_bytes;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	b29b      	uxth	r3, r3
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b006      	add	sp, #24
 8001852:	bdb0      	pop	{r4, r5, r7, pc}
 8001854:	08004d74 	.word	0x08004d74
 8001858:	08004d94 	.word	0x08004d94
 800185c:	08004e2c 	.word	0x08004e2c
 8001860:	08004e58 	.word	0x08004e58
 8001864:	48000400 	.word	0x48000400
 8001868:	ffffefff 	.word	0xffffefff
 800186c:	08004e18 	.word	0x08004e18

08001870 <enc_mac_read>:

uint8_t enc_mac_read(uint8_t addr, uint8_t bank) {
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	0002      	movs	r2, r0
 8001878:	1dfb      	adds	r3, r7, #7
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	1dbb      	adds	r3, r7, #6
 800187e:	1c0a      	adds	r2, r1, #0
 8001880:	701a      	strb	r2, [r3, #0]
	if (addr > 0x1F) {
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b1f      	cmp	r3, #31
 8001888:	d905      	bls.n	8001896 <enc_mac_read+0x26>
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 800188a:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <enc_mac_read+0x7c>)
 800188c:	0018      	movs	r0, r3
 800188e:	f001 fd35 	bl	80032fc <puts>
		return 0;
 8001892:	2300      	movs	r3, #0
 8001894:	e026      	b.n	80018e4 <enc_mac_read+0x74>
	}

	enc_select_reg_bank(bank);
 8001896:	1dbb      	adds	r3, r7, #6
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff fd70 	bl	8001380 <enc_select_reg_bank>
	// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <enc_mac_read+0x80>)
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <enc_mac_read+0x80>)
 80018a6:	4913      	ldr	r1, [pc, #76]	@ (80018f4 <enc_mac_read+0x84>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	615a      	str	r2, [r3, #20]

	// Send address and read data
	SPI_WriteByte(addr);           // Send the address
 80018ac:	1dfb      	adds	r3, r7, #7
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 fc1d 	bl	80020f0 <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 80018b6:	250f      	movs	r5, #15
 80018b8:	197c      	adds	r4, r7, r5
 80018ba:	f000 fc6f 	bl	800219c <SPI_ReadByte>
 80018be:	0003      	movs	r3, r0
 80018c0:	7023      	strb	r3, [r4, #0]

	// Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <enc_mac_read+0x80>)
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <enc_mac_read+0x80>)
 80018c8:	2180      	movs	r1, #128	@ 0x80
 80018ca:	0149      	lsls	r1, r1, #5
 80018cc:	430a      	orrs	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]
	printf("Read: Address 0x%02X, Data 0x%02X\n", addr, data);
 80018d0:	1dfb      	adds	r3, r7, #7
 80018d2:	7819      	ldrb	r1, [r3, #0]
 80018d4:	197b      	adds	r3, r7, r5
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <enc_mac_read+0x88>)
 80018da:	0018      	movs	r0, r3
 80018dc:	f001 fc9e 	bl	800321c <iprintf>

	return data;
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	781b      	ldrb	r3, [r3, #0]
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b004      	add	sp, #16
 80018ea:	bdb0      	pop	{r4, r5, r7, pc}
 80018ec:	08004e94 	.word	0x08004e94
 80018f0:	48000400 	.word	0x48000400
 80018f4:	ffffefff 	.word	0xffffefff
 80018f8:	08004ecc 	.word	0x08004ecc

080018fc <enc_busy_wait>:

void enc_busy_wait(void) {
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
	uint8_t data = enc_mac_read(0x0A, 3); // Read ESTAT register (bank 3)
 8001902:	1dfc      	adds	r4, r7, #7
 8001904:	2103      	movs	r1, #3
 8001906:	200a      	movs	r0, #10
 8001908:	f7ff ffb2 	bl	8001870 <enc_mac_read>
 800190c:	0003      	movs	r3, r0
 800190e:	7023      	strb	r3, [r4, #0]
	while (data & 0x01) {                 // Wait until BUSY bit clears
 8001910:	e006      	b.n	8001920 <enc_busy_wait+0x24>
		data = enc_mac_read(0x0A, 3);
 8001912:	1dfc      	adds	r4, r7, #7
 8001914:	2103      	movs	r1, #3
 8001916:	200a      	movs	r0, #10
 8001918:	f7ff ffaa 	bl	8001870 <enc_mac_read>
 800191c:	0003      	movs	r3, r0
 800191e:	7023      	strb	r3, [r4, #0]
	while (data & 0x01) {                 // Wait until BUSY bit clears
 8001920:	1dfb      	adds	r3, r7, #7
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	4013      	ands	r3, r2
 8001928:	d1f3      	bne.n	8001912 <enc_busy_wait+0x16>
	}
}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	46c0      	nop			@ (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b003      	add	sp, #12
 8001932:	bd90      	pop	{r4, r7, pc}

08001934 <enc_phy_read>:
uint16_t enc_phy_read(uint8_t addr) {
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	0002      	movs	r2, r0
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	701a      	strb	r2, [r3, #0]
	enc_control_write(2, 0x14, addr);
 8001940:	1dfb      	adds	r3, r7, #7
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	001a      	movs	r2, r3
 8001946:	2114      	movs	r1, #20
 8001948:	2002      	movs	r0, #2
 800194a:	f7ff fd93 	bl	8001474 <enc_control_write>
	enc_control_write(2, 0x12, 1);				//MICMD.MIIRD bit set
 800194e:	2201      	movs	r2, #1
 8001950:	2112      	movs	r1, #18
 8001952:	2002      	movs	r0, #2
 8001954:	f7ff fd8e 	bl	8001474 <enc_control_write>

	enc_busy_wait();
 8001958:	f7ff ffd0 	bl	80018fc <enc_busy_wait>

	enc_control_write(2, 0x12, 0);				//MICMD.MIIRD bit cleared
 800195c:	2200      	movs	r2, #0
 800195e:	2112      	movs	r1, #18
 8001960:	2002      	movs	r0, #2
 8001962:	f7ff fd87 	bl	8001474 <enc_control_write>

	uint16_t data_LSB = enc_mac_read(0x18, 2);
 8001966:	2102      	movs	r1, #2
 8001968:	2018      	movs	r0, #24
 800196a:	f7ff ff81 	bl	8001870 <enc_mac_read>
 800196e:	0003      	movs	r3, r0
 8001970:	001a      	movs	r2, r3
 8001972:	240e      	movs	r4, #14
 8001974:	193b      	adds	r3, r7, r4
 8001976:	801a      	strh	r2, [r3, #0]
	uint16_t data_MSB = enc_mac_read(0x19, 2);
 8001978:	2102      	movs	r1, #2
 800197a:	2019      	movs	r0, #25
 800197c:	f7ff ff78 	bl	8001870 <enc_mac_read>
 8001980:	0003      	movs	r3, r0
 8001982:	001a      	movs	r2, r3
 8001984:	210c      	movs	r1, #12
 8001986:	187b      	adds	r3, r7, r1
 8001988:	801a      	strh	r2, [r3, #0]

	uint16_t data = (data_MSB << 8) + data_LSB;
 800198a:	187b      	adds	r3, r7, r1
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b299      	uxth	r1, r3
 8001992:	200a      	movs	r0, #10
 8001994:	183b      	adds	r3, r7, r0
 8001996:	193a      	adds	r2, r7, r4
 8001998:	8812      	ldrh	r2, [r2, #0]
 800199a:	188a      	adds	r2, r1, r2
 800199c:	801a      	strh	r2, [r3, #0]
	printf("PHY Read: Address 0x%02X, Data 0x%04X\n\r", addr, data);
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	7819      	ldrb	r1, [r3, #0]
 80019a2:	0004      	movs	r4, r0
 80019a4:	183b      	adds	r3, r7, r0
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <enc_phy_read+0x88>)
 80019aa:	0018      	movs	r0, r3
 80019ac:	f001 fc36 	bl	800321c <iprintf>
	return data;
 80019b0:	193b      	adds	r3, r7, r4
 80019b2:	881b      	ldrh	r3, [r3, #0]
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b005      	add	sp, #20
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	08004ef0 	.word	0x08004ef0

080019c0 <enc_phy_write>:

void enc_phy_write(uint8_t addr, uint16_t data) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	0002      	movs	r2, r0
 80019c8:	1dfb      	adds	r3, r7, #7
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	1c0a      	adds	r2, r1, #0
 80019d0:	801a      	strh	r2, [r3, #0]
	enc_control_write(2, 0x14, addr);
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	001a      	movs	r2, r3
 80019d8:	2114      	movs	r1, #20
 80019da:	2002      	movs	r0, #2
 80019dc:	f7ff fd4a 	bl	8001474 <enc_control_write>
	enc_control_write(2, 0x16, (uint8_t) (data & 0xFF));
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	001a      	movs	r2, r3
 80019e8:	2116      	movs	r1, #22
 80019ea:	2002      	movs	r0, #2
 80019ec:	f7ff fd42 	bl	8001474 <enc_control_write>
	enc_control_write(2, 0x17, (uint8_t) ((data >> 8) & 0xFF));
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	001a      	movs	r2, r3
 80019fc:	2117      	movs	r1, #23
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff fd38 	bl	8001474 <enc_control_write>
	printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
 8001a04:	1dfb      	adds	r3, r7, #7
 8001a06:	7819      	ldrb	r1, [r3, #0]
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <enc_phy_write+0x5c>)
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f001 fc04 	bl	800321c <iprintf>
}
 8001a14:	46c0      	nop			@ (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	08004f18 	.word	0x08004f18

08001a20 <enc_eth_read>:

uint8_t enc_eth_read(uint8_t addr, uint8_t bank) {
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	0002      	movs	r2, r0
 8001a28:	1dfb      	adds	r3, r7, #7
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	1dbb      	adds	r3, r7, #6
 8001a2e:	1c0a      	adds	r2, r1, #0
 8001a30:	701a      	strb	r2, [r3, #0]
	if (addr > 0x1F) {
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b1f      	cmp	r3, #31
 8001a38:	d903      	bls.n	8001a42 <enc_eth_read+0x22>
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <enc_eth_read+0x68>)
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f001 fc5d 	bl	80032fc <puts>
	}

	enc_select_reg_bank(bank);
 8001a42:	1dbb      	adds	r3, r7, #6
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff fc9a 	bl	8001380 <enc_select_reg_bank>
	// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <enc_eth_read+0x6c>)
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <enc_eth_read+0x6c>)
 8001a52:	490f      	ldr	r1, [pc, #60]	@ (8001a90 <enc_eth_read+0x70>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	615a      	str	r2, [r3, #20]

	// Send address and read data
	SPI_WriteByte(addr);           // Send the address
 8001a58:	1dfb      	adds	r3, r7, #7
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 fb47 	bl	80020f0 <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 8001a62:	250f      	movs	r5, #15
 8001a64:	197c      	adds	r4, r7, r5
 8001a66:	f000 fb99 	bl	800219c <SPI_ReadByte>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	7023      	strb	r3, [r4, #0]

	// Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <enc_eth_read+0x6c>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <enc_eth_read+0x6c>)
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	0149      	lsls	r1, r1, #5
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	615a      	str	r2, [r3, #20]

	return data;
 8001a7c:	197b      	adds	r3, r7, r5
 8001a7e:	781b      	ldrb	r3, [r3, #0]
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bdb0      	pop	{r4, r5, r7, pc}
 8001a88:	08004e94 	.word	0x08004e94
 8001a8c:	48000400 	.word	0x48000400
 8001a90:	ffffefff 	.word	0xffffefff

08001a94 <enc_reset>:

void enc_reset(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <enc_reset+0x2c>)
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <enc_reset+0x2c>)
 8001a9e:	4909      	ldr	r1, [pc, #36]	@ (8001ac4 <enc_reset+0x30>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	615a      	str	r2, [r3, #20]

	SPI_WriteByte(0XFF);
 8001aa4:	20ff      	movs	r0, #255	@ 0xff
 8001aa6:	f000 fb23 	bl	80020f0 <SPI_WriteByte>

	GPIOB->ODR |= SPI2_CS_PIN;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <enc_reset+0x2c>)
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <enc_reset+0x2c>)
 8001ab0:	2180      	movs	r1, #128	@ 0x80
 8001ab2:	0149      	lsls	r1, r1, #5
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	615a      	str	r2, [r3, #20]

}
 8001ab8:	46c0      	nop			@ (mov r8, r8)
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	ffffefff 	.word	0xffffefff

08001ac8 <enc_init>:



void enc_init(const uint8_t *mac) {
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	6078      	str	r0, [r7, #4]
	// Perform a system reset
	enc_reset();
 8001ad0:	f7ff ffe0 	bl	8001a94 <enc_reset>

	// Wait for the ENC28J60 to stabilize (poll CLKRDY bit in ESTAT register)
	while (!(enc_mac_read(0x1D, 0) & 0x01))
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	201d      	movs	r0, #29
 8001ada:	f7ff fec9 	bl	8001870 <enc_mac_read>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0f6      	beq.n	8001ad6 <enc_init+0xe>
		; // ESTAT.CLKRDY

	// Split Memory: Reserve RX and TX buffers
	uint16_t rx_start = RX_BUFFER_START;
 8001ae8:	210e      	movs	r1, #14
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2280      	movs	r2, #128	@ 0x80
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	801a      	strh	r2, [r3, #0]
	uint16_t rx_end = RX_BUFFER_END;
 8001af2:	200c      	movs	r0, #12
 8001af4:	183b      	adds	r3, r7, r0
 8001af6:	4a5e      	ldr	r2, [pc, #376]	@ (8001c70 <enc_init+0x1a8>)
 8001af8:	801a      	strh	r2, [r3, #0]

	// Initialize RX Buffer
	enc_buffer_init(rx_start, rx_end);
 8001afa:	183b      	adds	r3, r7, r0
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	0011      	movs	r1, r2
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff fcf1 	bl	80014ec <enc_buffer_init>

	// Enable MAC Receive
	//spi_control_write(2, 0x00, 0x0D); // MACON1: Enable RX (MARXEN), TXPAUS, RXPAUS

	// Configure MACON3 for padding, CRC, and frame length
	enc_control_write(2, 0x02, 0x70); // MACON3: Padding, CRC, and frame length checking enabled37
 8001b0a:	2270      	movs	r2, #112	@ 0x70
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7ff fcb0 	bl	8001474 <enc_control_write>
	enc_control_write(2, 0x03, 0x40); // MACON4: IEEE compliance00
 8001b14:	2240      	movs	r2, #64	@ 0x40
 8001b16:	2103      	movs	r1, #3
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f7ff fcab 	bl	8001474 <enc_control_write>

	// Set maximum frame length (1518 bytes for standard Ethernet)
	enc_control_write(2, 0x0A, 0xEE); // MAMXFLL
 8001b1e:	22ee      	movs	r2, #238	@ 0xee
 8001b20:	210a      	movs	r1, #10
 8001b22:	2002      	movs	r0, #2
 8001b24:	f7ff fca6 	bl	8001474 <enc_control_write>
	enc_control_write(2, 0x0B, 0x05); // MAMXFLH
 8001b28:	2205      	movs	r2, #5
 8001b2a:	210b      	movs	r1, #11
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f7ff fca1 	bl	8001474 <enc_control_write>

	// Configure Inter-Packet Gap
	enc_control_write(2, 0x04, 0x12); // MABBIPG: Back-to-back gap (Full Duplex)
 8001b32:	2212      	movs	r2, #18
 8001b34:	2104      	movs	r1, #4
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7ff fc9c 	bl	8001474 <enc_control_write>
	enc_control_write(2, 0x06, 0x12); // MAIPGL: Non-back-to-back gap
 8001b3c:	2212      	movs	r2, #18
 8001b3e:	2106      	movs	r1, #6
 8001b40:	2002      	movs	r0, #2
 8001b42:	f7ff fc97 	bl	8001474 <enc_control_write>
	enc_control_write(2, 0x07, 0x0C); // MAIPGH: Non-back-to-back gap (Half Duplex)
 8001b46:	220c      	movs	r2, #12
 8001b48:	2107      	movs	r1, #7
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f7ff fc92 	bl	8001474 <enc_control_write>

	// Configure MAC Address (write in reverse order)
	enc_control_write(3, 0x01, mac[5]); // MAADR6
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3305      	adds	r3, #5
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	001a      	movs	r2, r3
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	f7ff fc8a 	bl	8001474 <enc_control_write>
	enc_control_write(3, 0x00, mac[4]); // MAADR5
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3304      	adds	r3, #4
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	001a      	movs	r2, r3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f7ff fc82 	bl	8001474 <enc_control_write>
	enc_control_write(3, 0x03, mac[3]); // MAADR4
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3303      	adds	r3, #3
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	001a      	movs	r2, r3
 8001b78:	2103      	movs	r1, #3
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	f7ff fc7a 	bl	8001474 <enc_control_write>
	enc_control_write(3, 0x02, mac[2]); // MAADR3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3302      	adds	r3, #2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	001a      	movs	r2, r3
 8001b88:	2102      	movs	r1, #2
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	f7ff fc72 	bl	8001474 <enc_control_write>
	enc_control_write(3, 0x05, mac[1]); // MAADR2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3301      	adds	r3, #1
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	001a      	movs	r2, r3
 8001b98:	2105      	movs	r1, #5
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f7ff fc6a 	bl	8001474 <enc_control_write>
	enc_control_write(3, 0x04, mac[0]); // MAADR1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f7ff fc63 	bl	8001474 <enc_control_write>

	enc_control_write(1, 0x18, 0x80); //unicast filter funcationality register
 8001bae:	2280      	movs	r2, #128	@ 0x80
 8001bb0:	2118      	movs	r1, #24
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7ff fc5e 	bl	8001474 <enc_control_write>
	uint8_t read_macon3 = enc_mac_read(0x03, 2);
 8001bb8:	250b      	movs	r5, #11
 8001bba:	197c      	adds	r4, r7, r5
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f7ff fe56 	bl	8001870 <enc_mac_read>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	7023      	strb	r3, [r4, #0]
	enc_control_write(2, 0x03, (read_macon3 | (1 << 0)));
 8001bc8:	197b      	adds	r3, r7, r5
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	2103      	movs	r1, #3
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f7ff fc4c 	bl	8001474 <enc_control_write>
	uint8_t read_macon1 = enc_mac_read(0x00, 2); //mac enable for reception
 8001bdc:	250a      	movs	r5, #10
 8001bde:	197c      	adds	r4, r7, r5
 8001be0:	2102      	movs	r1, #2
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff fe44 	bl	8001870 <enc_mac_read>
 8001be8:	0003      	movs	r3, r0
 8001bea:	7023      	strb	r3, [r4, #0]
	enc_control_write(2, 0x00, (read_macon1 | (1 << 0))); //mac enable for reception
 8001bec:	197b      	adds	r3, r7, r5
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f7ff fc3a 	bl	8001474 <enc_control_write>
	enc_phy_write(0x00, 0x0100);
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	0019      	movs	r1, r3
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff feda 	bl	80019c0 <enc_phy_write>

	// Configure PHY LEDs for activity indication
	enc_phy_write(0x14, 0x3422); // PHLCON: LEDA=Link/Activity, LEDB=RX/TX Activity
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <enc_init+0x1ac>)
 8001c0e:	0019      	movs	r1, r3
 8001c10:	2014      	movs	r0, #20
 8001c12:	f7ff fed5 	bl	80019c0 <enc_phy_write>
	enc_control_write(0, 0X1F, 0X04); // reception enable bit
 8001c16:	2204      	movs	r2, #4
 8001c18:	211f      	movs	r1, #31
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff fc2a 	bl	8001474 <enc_control_write>
	printf("\nENC28J60 Initialization Complete.\n");
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <enc_init+0x1b0>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f001 fb6a 	bl	80032fc <puts>
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	001c      	movs	r4, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3301      	adds	r3, #1
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	001d      	movs	r5, r3
			mac[2], mac[3], mac[4], mac[5]);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8001c3c:	001e      	movs	r6, r3
			mac[2], mac[3], mac[4], mac[5]);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3303      	adds	r3, #3
 8001c42:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8001c44:	001a      	movs	r2, r3
			mac[2], mac[3], mac[4], mac[5]);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8001c4c:	0019      	movs	r1, r3
			mac[2], mac[3], mac[4], mac[5]);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3305      	adds	r3, #5
 8001c52:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8001c54:	4809      	ldr	r0, [pc, #36]	@ (8001c7c <enc_init+0x1b4>)
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	9101      	str	r1, [sp, #4]
 8001c5a:	9200      	str	r2, [sp, #0]
 8001c5c:	0033      	movs	r3, r6
 8001c5e:	002a      	movs	r2, r5
 8001c60:	0021      	movs	r1, r4
 8001c62:	f001 fadb 	bl	800321c <iprintf>
}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b005      	add	sp, #20
 8001c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	00001fff 	.word	0x00001fff
 8001c74:	00003422 	.word	0x00003422
 8001c78:	08004f44 	.word	0x08004f44
 8001c7c:	08004f68 	.word	0x08004f68

08001c80 <accumulate_line>:
 * Parameters:
 * Buffer and Buffer Size
 *
 * Returns:
 */
void accumulate_line(char *buffer, int max_size) {
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
	char ch;

	while (1) {
		ch = getchar();
 8001c8e:	f001 fabb 	bl	8003208 <getchar>
 8001c92:	0002      	movs	r2, r0
 8001c94:	210b      	movs	r1, #11
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	701a      	strb	r2, [r3, #0]
		if ((ch != 255)) {
 8001c9a:	000a      	movs	r2, r1
 8001c9c:	18bb      	adds	r3, r7, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2bff      	cmp	r3, #255	@ 0xff
 8001ca2:	d0f4      	beq.n	8001c8e <accumulate_line+0xe>
			switch (ch) {
 8001ca4:	18bb      	adds	r3, r7, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001caa:	d018      	beq.n	8001cde <accumulate_line+0x5e>
 8001cac:	dc32      	bgt.n	8001d14 <accumulate_line+0x94>
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d020      	beq.n	8001cf4 <accumulate_line+0x74>
 8001cb2:	dc2f      	bgt.n	8001d14 <accumulate_line+0x94>
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d007      	beq.n	8001cc8 <accumulate_line+0x48>
 8001cb8:	2b0d      	cmp	r3, #13
 8001cba:	d12b      	bne.n	8001d14 <accumulate_line+0x94>
			case '\r':
				buffer[index] = '\0';
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	18d3      	adds	r3, r2, r3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
				return;
 8001cc6:	e04f      	b.n	8001d68 <accumulate_line+0xe8>
			case '\b':
				if (index > 0) {
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	dd48      	ble.n	8001d60 <accumulate_line+0xe0>
					index--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
					printf("\b \b");
 8001cd4:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <accumulate_line+0xf0>)
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 faa0 	bl	800321c <iprintf>
				}
				break;
 8001cdc:	e040      	b.n	8001d60 <accumulate_line+0xe0>
			case '\177':
				if (index > 0) {
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	dd3f      	ble.n	8001d64 <accumulate_line+0xe4>
					index--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
					printf("\177 \177");
 8001cea:	4b22      	ldr	r3, [pc, #136]	@ (8001d74 <accumulate_line+0xf4>)
 8001cec:	0018      	movs	r0, r3
 8001cee:	f001 fa95 	bl	800321c <iprintf>
				}
				break;
 8001cf2:	e037      	b.n	8001d64 <accumulate_line+0xe4>
			case ' ':
				printf("%c", ch);
 8001cf4:	240b      	movs	r4, #11
 8001cf6:	193b      	adds	r3, r7, r4
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f001 fa9e 	bl	800323c <putchar>
				buffer[index] = ch;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	18d3      	adds	r3, r2, r3
 8001d06:	193a      	adds	r2, r7, r4
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	701a      	strb	r2, [r3, #0]
				index++;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
				break;
 8001d12:	e028      	b.n	8001d66 <accumulate_line+0xe6>
			default:
				printf("%c", ch);
 8001d14:	240b      	movs	r4, #11
 8001d16:	193b      	adds	r3, r7, r4
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f001 fa8e 	bl	800323c <putchar>
				buffer[index] = toupper((unsigned char )ch);
 8001d20:	210a      	movs	r1, #10
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	193a      	adds	r2, r7, r4
 8001d26:	7812      	ldrb	r2, [r2, #0]
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <accumulate_line+0xf8>)
 8001d32:	18d3      	adds	r3, r2, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	001a      	movs	r2, r3
 8001d38:	2303      	movs	r3, #3
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d103      	bne.n	8001d48 <accumulate_line+0xc8>
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	3b20      	subs	r3, #32
 8001d46:	e002      	b.n	8001d4e <accumulate_line+0xce>
 8001d48:	230a      	movs	r3, #10
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	188a      	adds	r2, r1, r2
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	7013      	strb	r3, [r2, #0]
				index++;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
				break;
 8001d5e:	e002      	b.n	8001d66 <accumulate_line+0xe6>
				break;
 8001d60:	46c0      	nop			@ (mov r8, r8)
 8001d62:	e794      	b.n	8001c8e <accumulate_line+0xe>
				break;
 8001d64:	46c0      	nop			@ (mov r8, r8)
		ch = getchar();
 8001d66:	e792      	b.n	8001c8e <accumulate_line+0xe>
			}
		}
	}
}
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b005      	add	sp, #20
 8001d6c:	bd90      	pop	{r4, r7, pc}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	08004f94 	.word	0x08004f94
 8001d74:	08004f98 	.word	0x08004f98
 8001d78:	080052f4 	.word	0x080052f4

08001d7c <tokenize_line>:
 *   max capacity of argument count buffer
 *
 * Returns:
 *   None.
 */
int tokenize_line(char *line, char *argv[], int max_tokens) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
	int argc = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
	char *token = strtok(line, " ");
 8001d8c:	4a11      	ldr	r2, [pc, #68]	@ (8001dd4 <tokenize_line+0x58>)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	0011      	movs	r1, r2
 8001d92:	0018      	movs	r0, r3
 8001d94:	f001 fc92 	bl	80036bc <strtok>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 8001d9c:	e00e      	b.n	8001dbc <tokenize_line+0x40>
		argv[argc++] = token;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	617a      	str	r2, [r7, #20]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	18d3      	adds	r3, r2, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	601a      	str	r2, [r3, #0]
		token = strtok(NULL, " ");
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <tokenize_line+0x58>)
 8001db0:	0019      	movs	r1, r3
 8001db2:	2000      	movs	r0, #0
 8001db4:	f001 fc82 	bl	80036bc <strtok>
 8001db8:	0003      	movs	r3, r0
 8001dba:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <tokenize_line+0x4e>
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbe9      	blt.n	8001d9e <tokenize_line+0x22>
	}
	return argc;
 8001dca:	697b      	ldr	r3, [r7, #20]
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b006      	add	sp, #24
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	08004f9c 	.word	0x08004f9c

08001dd8 <process_command>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void process_command(int argc, char *argv[]) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
	if (argc == 0) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <process_command+0x1a>
		printf("\nNo command provided\n");
 8001de8:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <process_command+0x70>)
 8001dea:	0018      	movs	r0, r3
 8001dec:	f001 fa86 	bl	80032fc <puts>
		return;
 8001df0:	e027      	b.n	8001e42 <process_command+0x6a>
	}
	for (int i = 0; i < num_commands; i++) {
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e018      	b.n	8001e2a <process_command+0x52>
		if (strcasecmp(argv[0], commands[i].name) == 0) {
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <process_command+0x74>)
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	00d2      	lsls	r2, r2, #3
 8001e02:	58d3      	ldr	r3, [r2, r3]
 8001e04:	0019      	movs	r1, r3
 8001e06:	f001 fc2d 	bl	8003664 <strcasecmp>
 8001e0a:	1e03      	subs	r3, r0, #0
 8001e0c:	d10a      	bne.n	8001e24 <process_command+0x4c>
			commands[i].handler(argc, argv);
 8001e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <process_command+0x74>)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	18d3      	adds	r3, r2, r3
 8001e16:	3304      	adds	r3, #4
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	0010      	movs	r0, r2
 8001e20:	4798      	blx	r3
			return;
 8001e22:	e00e      	b.n	8001e42 <process_command+0x6a>
	for (int i = 0; i < num_commands; i++) {
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <process_command+0x78>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	dbe1      	blt.n	8001df8 <process_command+0x20>
		}
	}
	printf("\nUnknown command: %s\n", argv[0]);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <process_command+0x7c>)
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f001 f9ed 	bl	800321c <iprintf>
}
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	08004fa0 	.word	0x08004fa0
 8001e4c:	08005260 	.word	0x08005260
 8001e50:	080052e0 	.word	0x080052e0
 8001e54:	08004fb8 	.word	0x08004fb8

08001e58 <USART2_IRQHandler>:
#include "cbfifo.h"

#include "global.h"
#include <stdbool.h>

void USART2_IRQHandler(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
	// Check if RXNE flag is set (data received)
	if (USART2->ISR & USART_ISR_RXNE) {
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <USART2_IRQHandler+0x84>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2220      	movs	r2, #32
 8001e64:	4013      	ands	r3, r2
 8001e66:	d00b      	beq.n	8001e80 <USART2_IRQHandler+0x28>
		char newval = USART2->RDR; // Read the received character
 8001e68:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <USART2_IRQHandler+0x84>)
 8001e6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	1dfb      	adds	r3, r7, #7
 8001e72:	701a      	strb	r2, [r3, #0]
		cbfifo_enqueue(&fiforx, &newval, sizeof(newval));
 8001e74:	1df9      	adds	r1, r7, #7
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <USART2_IRQHandler+0x88>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f7fe fb87 	bl	800058e <cbfifo_enqueue>
	}
	if (USART2->ISR & USART_ISR_TXE) {
 8001e80:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <USART2_IRQHandler+0x84>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2280      	movs	r2, #128	@ 0x80
 8001e86:	4013      	ands	r3, r2
 8001e88:	d023      	beq.n	8001ed2 <USART2_IRQHandler+0x7a>
		char newval; // Read the received character
		if (cbfifo_dequeue(&fifotx, &newval, sizeof(newval)) > 0) {
 8001e8a:	1db9      	adds	r1, r7, #6
 8001e8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <USART2_IRQHandler+0x8c>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7fe fbcb 	bl	800062c <cbfifo_dequeue>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d015      	beq.n	8001ec6 <USART2_IRQHandler+0x6e>
			if (newval == '\n') {
 8001e9a:	1dbb      	adds	r3, r7, #6
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b0a      	cmp	r3, #10
 8001ea0:	d10c      	bne.n	8001ebc <USART2_IRQHandler+0x64>
				USART2->TDR = '\r';
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <USART2_IRQHandler+0x84>)
 8001ea4:	220d      	movs	r2, #13
 8001ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
				while (!(USART2->ISR & USART_ISR_TXE))
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <USART2_IRQHandler+0x84>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	2280      	movs	r2, #128	@ 0x80
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d0fa      	beq.n	8001eaa <USART2_IRQHandler+0x52>
					;
				USART2->TDR = '\n';
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <USART2_IRQHandler+0x84>)
 8001eb6:	220a      	movs	r2, #10
 8001eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
			}
		} else {
			USART2->CR1 &= (~(USART_CR1_TXEIE));
		}
	}
}
 8001eba:	e00a      	b.n	8001ed2 <USART2_IRQHandler+0x7a>
				USART2->TDR = newval; // Send the character
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <USART2_IRQHandler+0x84>)
 8001ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001ec4:	e005      	b.n	8001ed2 <USART2_IRQHandler+0x7a>
			USART2->CR1 &= (~(USART_CR1_TXEIE));
 8001ec6:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <USART2_IRQHandler+0x84>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <USART2_IRQHandler+0x84>)
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	438a      	bics	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	20000120 	.word	0x20000120
 8001ee4:	20000094 	.word	0x20000094

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	0002      	movs	r2, r0
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001efa:	d809      	bhi.n	8001f10 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	001a      	movs	r2, r3
 8001f02:	231f      	movs	r3, #31
 8001f04:	401a      	ands	r2, r3
 8001f06:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <__NVIC_EnableIRQ+0x30>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4091      	lsls	r1, r2
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <uart_init>:
 *      Author: Abhishek Nadgir
 */

#include "init_functions.h"

void uart_init(void) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 8001f20:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <uart_init+0xb0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6898      	ldr	r0, [r3, #8]
 8001f26:	2300      	movs	r3, #0
 8001f28:	2202      	movs	r2, #2
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	f001 f9f0 	bl	8003310 <setvbuf>
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable GPIOA clock
 8001f30:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <uart_init+0xb4>)
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <uart_init+0xb4>)
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	0289      	lsls	r1, r1, #10
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	615a      	str	r2, [r3, #20]
	// Set PA2 (TX) and PA3 (RX) to alternate function mode (AF7 for USART2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);			// Clear
 8001f3e:	2390      	movs	r3, #144	@ 0x90
 8001f40:	05db      	lsls	r3, r3, #23
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2390      	movs	r3, #144	@ 0x90
 8001f46:	05db      	lsls	r3, r3, #23
 8001f48:	21f0      	movs	r1, #240	@ 0xf0
 8001f4a:	438a      	bics	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);// Set AF mode
 8001f4e:	2390      	movs	r3, #144	@ 0x90
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2390      	movs	r3, #144	@ 0x90
 8001f56:	05db      	lsls	r3, r3, #23
 8001f58:	21a0      	movs	r1, #160	@ 0xa0
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos) | (1 << GPIO_AFRL_AFSEL3_Pos); // AF7 (USART2) for PA2 and PA3
 8001f5e:	2390      	movs	r3, #144	@ 0x90
 8001f60:	05db      	lsls	r3, r3, #23
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	2390      	movs	r3, #144	@ 0x90
 8001f66:	05db      	lsls	r3, r3, #23
 8001f68:	2188      	movs	r1, #136	@ 0x88
 8001f6a:	0149      	lsls	r1, r1, #5
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	621a      	str	r2, [r3, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;				// Enable USART2 clock
 8001f70:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <uart_init+0xb4>)
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <uart_init+0xb4>)
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	0289      	lsls	r1, r1, #10
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	61da      	str	r2, [r3, #28]
	USART2->BRR = USART_BRR_VALUE;// Configure baud rate (assuming 24MHz APB1 clock and 19200 baud rate)
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <uart_init+0xb8>)
 8001f80:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <uart_init+0xbc>)
 8001f82:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE; // Enable TX, RX, and RX interrupt
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <uart_init+0xb8>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <uart_init+0xb8>)
 8001f8a:	212c      	movs	r1, #44	@ 0x2c
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_PARITY_CONFIG;
 8001f90:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <uart_init+0xb8>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <uart_init+0xb8>)
 8001f96:	21c0      	movs	r1, #192	@ 0xc0
 8001f98:	00c9      	lsls	r1, r1, #3
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_WORD_LENGTH;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <uart_init+0xb8>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <uart_init+0xb8>)
 8001fa4:	2180      	movs	r1, #128	@ 0x80
 8001fa6:	0149      	lsls	r1, r1, #5
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
	USART2->CR2 |= USART_STOP_BITS;
 8001fac:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <uart_init+0xb8>)
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <uart_init+0xb8>)
 8001fb0:	6852      	ldr	r2, [r2, #4]
 8001fb2:	605a      	str	r2, [r3, #4]
	USART2->CR1 |= USART_CR1_UE;								// Enable USART
 8001fb4:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <uart_init+0xb8>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <uart_init+0xb8>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);			// Enable USART2 interrupt in NVIC
 8001fc0:	201c      	movs	r0, #28
 8001fc2:	f7ff ff91 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000028 	.word	0x20000028
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40004400 	.word	0x40004400
 8001fd8:	000004e2 	.word	0x000004e2

08001fdc <main>:
uint8_t device_mac[6] = { 0x02, 0x04, 0xA3, 0x3C, 0x4D, 0x50 }; // Default MAC
uint8_t target_mac[6] = { 0xFF, 0XFF, 0XFF, 0xFF, 0XFF, 0XFF }; // Default MAC
uint8_t device_ip[4] = { 192, 168, 1, 100 }; // Default IP Address
uint8_t target_ip[4] = { 192, 168, 1, 1 };
void runWebServer(const uint8_t *macAddress, const uint8_t *ipAddress);
int main(void) {
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	4c1b      	ldr	r4, [pc, #108]	@ (800204c <main+0x70>)
 8001fe0:	44a5      	add	sp, r4
 8001fe2:	af00      	add	r7, sp, #0
	/*
	 * Clocks: Processor = 48 Mhz. AHB = 48 MHz. APB = 24 MHz.
	 *
	 */
	//init_uled(); //On board LED Initialisation
	SPI_Init();
 8001fe4:	f000 f83e 	bl	8002064 <SPI_Init>
	uart_init(); //UART 2 Initialisation for Serial COmmunication
 8001fe8:	f7ff ff98 	bl	8001f1c <uart_init>
	cbfifo_init(&fiforx); // Initialising RX Buffer
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <main+0x74>)
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7fe fab6 	bl	8000560 <cbfifo_init>
	cbfifo_init(&fifotx); // Initialising TX buffer
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <main+0x78>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7fe fab2 	bl	8000560 <cbfifo_init>
	char inputval[INPUT_BUFFER_SIZE]; // Defining a buffer to accept the command and Process
	char *argv[ARGUMENT_BUFFER_SIZE]; // Defining a buffer to store Argument Vectors after tokenization
	int argc; //TO store Argument COunt
	printf("\nWelcome to SerialIO!\n");
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <main+0x7c>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f001 f97c 	bl	80032fc <puts>
	enc_init(device_mac);
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <main+0x80>)
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff fd5e 	bl	8001ac8 <enc_init>
	//runWebServer(device_mac,device_ip);
	while (1) {

		printf("\n$$ ");
 800200c:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <main+0x84>)
 800200e:	0018      	movs	r0, r3
 8002010:	f001 f904 	bl	800321c <iprintf>
		accumulate_line(inputval, INPUT_BUFFER_SIZE); //Takes character from Serial Terminal
 8002014:	2481      	movs	r4, #129	@ 0x81
 8002016:	00a4      	lsls	r4, r4, #2
 8002018:	193b      	adds	r3, r7, r4
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff fe2f 	bl	8001c80 <accumulate_line>
		argc = tokenize_line(inputval, argv, ARGUMENT_BUFFER_SIZE); // Takes array of string as input and returs Number of Arguments and buffer of argument vector
 8002022:	1d39      	adds	r1, r7, #4
 8002024:	193b      	adds	r3, r7, r4
 8002026:	2280      	movs	r2, #128	@ 0x80
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff fea7 	bl	8001d7c <tokenize_line>
 800202e:	0003      	movs	r3, r0
 8002030:	21a1      	movs	r1, #161	@ 0xa1
 8002032:	0089      	lsls	r1, r1, #2
 8002034:	187a      	adds	r2, r7, r1
 8002036:	6013      	str	r3, [r2, #0]
		process_command(argc, argv); // Takes argument count and vector as input and processes the command accordingly
 8002038:	1d3a      	adds	r2, r7, #4
 800203a:	187b      	adds	r3, r7, r1
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0011      	movs	r1, r2
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff fec9 	bl	8001dd8 <process_command>
		printf("\n$$ ");
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	e7e0      	b.n	800200c <main+0x30>
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	fffffd74 	.word	0xfffffd74
 8002050:	20000120 	.word	0x20000120
 8002054:	20000094 	.word	0x20000094
 8002058:	08004fd0 	.word	0x08004fd0
 800205c:	20000000 	.word	0x20000000
 8002060:	08004fe8 	.word	0x08004fe8

08002064 <SPI_Init>:
#include "spi.h"

void SPI_Init(void) {
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	// Enable GPIOB clock
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8002068:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <SPI_Init+0x74>)
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <SPI_Init+0x74>)
 800206e:	2180      	movs	r1, #128	@ 0x80
 8002070:	02c9      	lsls	r1, r1, #11
 8002072:	430a      	orrs	r2, r1
 8002074:	615a      	str	r2, [r3, #20]

	// Configure CS, SCK, and MOSI as output
	GPIOB->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER13
 8002076:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <SPI_Init+0x78>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <SPI_Init+0x78>)
 800207c:	4918      	ldr	r1, [pc, #96]	@ (80020e0 <SPI_Init+0x7c>)
 800207e:	400a      	ands	r2, r1
 8002080:	601a      	str	r2, [r3, #0]
			| GPIO_MODER_MODER15); // Clear MODER bits
	GPIOB->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0
 8002082:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <SPI_Init+0x78>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <SPI_Init+0x78>)
 8002088:	218a      	movs	r1, #138	@ 0x8a
 800208a:	05c9      	lsls	r1, r1, #23
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
			| GPIO_MODER_MODER15_0); // Set as output

	// Configure MISO as input
	GPIOB->MODER &= ~GPIO_MODER_MODER14; // Set as input
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <SPI_Init+0x78>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <SPI_Init+0x78>)
 8002096:	4913      	ldr	r1, [pc, #76]	@ (80020e4 <SPI_Init+0x80>)
 8002098:	400a      	ands	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

	// Set all pins to high-speed mode
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR12 | GPIO_OSPEEDR_OSPEEDR13
 800209c:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <SPI_Init+0x78>)
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <SPI_Init+0x78>)
 80020a2:	21ff      	movs	r1, #255	@ 0xff
 80020a4:	0609      	lsls	r1, r1, #24
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
			| GPIO_OSPEEDR_OSPEEDR14 | GPIO_OSPEEDR_OSPEEDR15);

	// Set default states
	GPIOB->ODR |= SPI2_CS_PIN;    // CS High (inactive)
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <SPI_Init+0x78>)
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <SPI_Init+0x78>)
 80020b0:	2180      	movs	r1, #128	@ 0x80
 80020b2:	0149      	lsls	r1, r1, #5
 80020b4:	430a      	orrs	r2, r1
 80020b6:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~SPI2_SCK_PIN;  // SCK Low (idle)
 80020b8:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <SPI_Init+0x78>)
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <SPI_Init+0x78>)
 80020be:	490a      	ldr	r1, [pc, #40]	@ (80020e8 <SPI_Init+0x84>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <SPI_Init+0x78>)
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <SPI_Init+0x78>)
 80020ca:	4908      	ldr	r1, [pc, #32]	@ (80020ec <SPI_Init+0x88>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	615a      	str	r2, [r3, #20]
}
 80020d0:	46c0      	nop			@ (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48000400 	.word	0x48000400
 80020e0:	30ffffff 	.word	0x30ffffff
 80020e4:	cfffffff 	.word	0xcfffffff
 80020e8:	ffffdfff 	.word	0xffffdfff
 80020ec:	ffff7fff 	.word	0xffff7fff

080020f0 <SPI_WriteByte>:

void SPI_WriteByte(uint8_t data) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	0002      	movs	r2, r0
 80020f8:	1dfb      	adds	r3, r7, #7
 80020fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e039      	b.n	8002176 <SPI_WriteByte+0x86>
		// Write the MSB to MOSI
		if (data & 0x80) {
 8002102:	1dfb      	adds	r3, r7, #7
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b25b      	sxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	da07      	bge.n	800211c <SPI_WriteByte+0x2c>
			GPIOB->ODR |= SPI2_MOSI_PIN; // Set MOSI High
 800210c:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <SPI_WriteByte+0xa0>)
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	4b1f      	ldr	r3, [pc, #124]	@ (8002190 <SPI_WriteByte+0xa0>)
 8002112:	2180      	movs	r1, #128	@ 0x80
 8002114:	0209      	lsls	r1, r1, #8
 8002116:	430a      	orrs	r2, r1
 8002118:	615a      	str	r2, [r3, #20]
 800211a:	e005      	b.n	8002128 <SPI_WriteByte+0x38>
		} else {
			GPIOB->ODR &= ~SPI2_MOSI_PIN; // Set MOSI Low
 800211c:	4b1c      	ldr	r3, [pc, #112]	@ (8002190 <SPI_WriteByte+0xa0>)
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <SPI_WriteByte+0xa0>)
 8002122:	491c      	ldr	r1, [pc, #112]	@ (8002194 <SPI_WriteByte+0xa4>)
 8002124:	400a      	ands	r2, r1
 8002126:	615a      	str	r2, [r3, #20]
		}
		data <<= 1; // Shift to the next bit
 8002128:	1dfa      	adds	r2, r7, #7
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	18db      	adds	r3, r3, r3
 8002130:	7013      	strb	r3, [r2, #0]

		// Toggle SCK to clock the bit
		GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 8002132:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <SPI_WriteByte+0xa0>)
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <SPI_WriteByte+0xa0>)
 8002138:	2180      	movs	r1, #128	@ 0x80
 800213a:	0189      	lsls	r1, r1, #6
 800213c:	430a      	orrs	r2, r1
 800213e:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	e002      	b.n	800214c <SPI_WriteByte+0x5c>
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	3301      	adds	r3, #1
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	ddf9      	ble.n	8002146 <SPI_WriteByte+0x56>
			;
		GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 8002152:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <SPI_WriteByte+0xa0>)
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <SPI_WriteByte+0xa0>)
 8002158:	490f      	ldr	r1, [pc, #60]	@ (8002198 <SPI_WriteByte+0xa8>)
 800215a:	400a      	ands	r2, r1
 800215c:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e002      	b.n	800216a <SPI_WriteByte+0x7a>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3301      	adds	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b0f      	cmp	r3, #15
 800216e:	ddf9      	ble.n	8002164 <SPI_WriteByte+0x74>
	for (int i = 0; i < 8; i++) {
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b07      	cmp	r3, #7
 800217a:	ddc2      	ble.n	8002102 <SPI_WriteByte+0x12>
			;
	}
	GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 800217c:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <SPI_WriteByte+0xa0>)
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <SPI_WriteByte+0xa0>)
 8002182:	4904      	ldr	r1, [pc, #16]	@ (8002194 <SPI_WriteByte+0xa4>)
 8002184:	400a      	ands	r2, r1
 8002186:	615a      	str	r2, [r3, #20]
}
 8002188:	46c0      	nop			@ (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b006      	add	sp, #24
 800218e:	bd80      	pop	{r7, pc}
 8002190:	48000400 	.word	0x48000400
 8002194:	ffff7fff 	.word	0xffff7fff
 8002198:	ffffdfff 	.word	0xffffdfff

0800219c <SPI_ReadByte>:

uint8_t SPI_ReadByte(void) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
	uint8_t received_data = 0;
 80021a2:	230f      	movs	r3, #15
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 8; i++) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	e034      	b.n	800221a <SPI_ReadByte+0x7e>
		received_data <<= 1; // Make room for the next bit
 80021b0:	230f      	movs	r3, #15
 80021b2:	18fa      	adds	r2, r7, r3
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	18db      	adds	r3, r3, r3
 80021ba:	7013      	strb	r3, [r2, #0]

		// Toggle SCK to clock the bit
		GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 80021bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <SPI_ReadByte+0x94>)
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <SPI_ReadByte+0x94>)
 80021c2:	2180      	movs	r1, #128	@ 0x80
 80021c4:	0189      	lsls	r1, r1, #6
 80021c6:	430a      	orrs	r2, r1
 80021c8:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	e002      	b.n	80021d6 <SPI_ReadByte+0x3a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3301      	adds	r3, #1
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b0f      	cmp	r3, #15
 80021da:	ddf9      	ble.n	80021d0 <SPI_ReadByte+0x34>
			;

		// Read the bit from MISO
		if (GPIOB->IDR & SPI2_MISO_PIN) {
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <SPI_ReadByte+0x94>)
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	01db      	lsls	r3, r3, #7
 80021e4:	4013      	ands	r3, r2
 80021e6:	d006      	beq.n	80021f6 <SPI_ReadByte+0x5a>
			received_data |= 0x01; // Set the LSB
 80021e8:	220f      	movs	r2, #15
 80021ea:	18bb      	adds	r3, r7, r2
 80021ec:	18ba      	adds	r2, r7, r2
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	430a      	orrs	r2, r1
 80021f4:	701a      	strb	r2, [r3, #0]
		}

		GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 80021f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <SPI_ReadByte+0x94>)
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <SPI_ReadByte+0x94>)
 80021fc:	490d      	ldr	r1, [pc, #52]	@ (8002234 <SPI_ReadByte+0x98>)
 80021fe:	400a      	ands	r2, r1
 8002200:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	e002      	b.n	800220e <SPI_ReadByte+0x72>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	ddf9      	ble.n	8002208 <SPI_ReadByte+0x6c>
	for (int i = 0; i < 8; i++) {
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3301      	adds	r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b07      	cmp	r3, #7
 800221e:	ddc7      	ble.n	80021b0 <SPI_ReadByte+0x14>
			;
	}

	return received_data;
 8002220:	230f      	movs	r3, #15
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	48000400 	.word	0x48000400
 8002234:	ffffdfff 	.word	0xffffdfff

08002238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  return 1;
 800223c:	2301      	movs	r3, #1
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_kill>:

int _kill(int pid, int sig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800224e:	f001 faf5 	bl	800383c <__errno>
 8002252:	0003      	movs	r3, r0
 8002254:	2216      	movs	r2, #22
 8002256:	601a      	str	r2, [r3, #0]
  return -1;
 8002258:	2301      	movs	r3, #1
 800225a:	425b      	negs	r3, r3
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}

08002264 <_exit>:

void _exit (int status)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800226c:	2301      	movs	r3, #1
 800226e:	425a      	negs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	0011      	movs	r1, r2
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff ffe5 	bl	8002244 <_kill>
  while (1) {}    /* Make sure we hang here */
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	e7fd      	b.n	800227a <_exit+0x16>

0800227e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e00a      	b.n	80022a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002290:	f000 fc14 	bl	8002abc <__io_getchar>
 8002294:	0001      	movs	r1, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	60ba      	str	r2, [r7, #8]
 800229c:	b2ca      	uxtb	r2, r1
 800229e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dbf0      	blt.n	8002290 <_read+0x12>
  }

  return len;
 80022ae:	687b      	ldr	r3, [r7, #4]
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b006      	add	sp, #24
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e009      	b.n	80022de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	60ba      	str	r2, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 fc0a 	bl	8002aec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3301      	adds	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dbf1      	blt.n	80022ca <_write+0x12>
  }
  return len;
 80022e6:	687b      	ldr	r3, [r7, #4]
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b006      	add	sp, #24
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_close>:

int _close(int file)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	425b      	negs	r3, r3
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}

08002304 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	0192      	lsls	r2, r2, #6
 8002314:	605a      	str	r2, [r3, #4]
  return 0;
 8002316:	2300      	movs	r3, #0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}

08002320 <_isatty>:

int _isatty(int file)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002328:	2301      	movs	r3, #1
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}

08002332 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800233e:	2300      	movs	r3, #0
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b004      	add	sp, #16
 8002346:	bd80      	pop	{r7, pc}

08002348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002350:	4a14      	ldr	r2, [pc, #80]	@ (80023a4 <_sbrk+0x5c>)
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <_sbrk+0x60>)
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <_sbrk+0x64>)
 8002366:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <_sbrk+0x68>)
 8002368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <_sbrk+0x64>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	18d3      	adds	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d207      	bcs.n	8002388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002378:	f001 fa60 	bl	800383c <__errno>
 800237c:	0003      	movs	r3, r0
 800237e:	220c      	movs	r2, #12
 8002380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002382:	2301      	movs	r3, #1
 8002384:	425b      	negs	r3, r3
 8002386:	e009      	b.n	800239c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002388:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	18d2      	adds	r2, r2, r3
 8002396:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <_sbrk+0x64>)
 8002398:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b006      	add	sp, #24
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20008000 	.word	0x20008000
 80023a8:	00000400 	.word	0x00000400
 80023ac:	200001ac 	.word	0x200001ac
 80023b0:	200008e0 	.word	0x200008e0

080023b4 <calculate_checksum>:
#define IP_HEADER_SIZE 20
#define TCP_HEADER_SIZE 20
#define TX_BUFFER_START 0x0000

// Function to calculate the checksum
uint16_t calculate_checksum(uint8_t *data, uint16_t length) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	000a      	movs	r2, r1
 80023be:	1cbb      	adds	r3, r7, #2
 80023c0:	801a      	strh	r2, [r3, #0]
    uint32_t sum = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]

    // Accumulate checksum
    for (uint16_t i = 0; i < length; i += 2) {
 80023c6:	230a      	movs	r3, #10
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	2200      	movs	r2, #0
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	e033      	b.n	8002438 <calculate_checksum+0x84>
        uint16_t word = (data[i] << 8) + (i + 1 < length ? data[i + 1] : 0);
 80023d0:	210a      	movs	r1, #10
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	18d3      	adds	r3, r2, r3
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	b29a      	uxth	r2, r3
 80023e0:	0008      	movs	r0, r1
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	1c59      	adds	r1, r3, #1
 80023e8:	1cbb      	adds	r3, r7, #2
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	4299      	cmp	r1, r3
 80023ee:	da07      	bge.n	8002400 <calculate_checksum+0x4c>
 80023f0:	183b      	adds	r3, r7, r0
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	18cb      	adds	r3, r1, r3
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	0019      	movs	r1, r3
 80023fe:	e000      	b.n	8002402 <calculate_checksum+0x4e>
 8002400:	2100      	movs	r1, #0
 8002402:	2008      	movs	r0, #8
 8002404:	183b      	adds	r3, r7, r0
 8002406:	188a      	adds	r2, r1, r2
 8002408:	801a      	strh	r2, [r3, #0]
        sum += word;
 800240a:	183b      	adds	r3, r7, r0
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	18d3      	adds	r3, r2, r3
 8002412:	60fb      	str	r3, [r7, #12]

        // Handle carry (wrap around)
        if (sum > 0xFFFF) {
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	2380      	movs	r3, #128	@ 0x80
 8002418:	025b      	lsls	r3, r3, #9
 800241a:	429a      	cmp	r2, r3
 800241c:	d306      	bcc.n	800242c <calculate_checksum+0x78>
            sum = (sum & 0xFFFF) + (sum >> 16);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	0c1a      	lsrs	r2, r3, #16
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	0c1b      	lsrs	r3, r3, #16
 8002428:	18d3      	adds	r3, r2, r3
 800242a:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i += 2) {
 800242c:	220a      	movs	r2, #10
 800242e:	18bb      	adds	r3, r7, r2
 8002430:	18ba      	adds	r2, r7, r2
 8002432:	8812      	ldrh	r2, [r2, #0]
 8002434:	3202      	adds	r2, #2
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	230a      	movs	r3, #10
 800243a:	18fa      	adds	r2, r7, r3
 800243c:	1cbb      	adds	r3, r7, #2
 800243e:	8812      	ldrh	r2, [r2, #0]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d3c4      	bcc.n	80023d0 <calculate_checksum+0x1c>
        }
    }

    // Final wrap-around
    sum = (sum & 0xFFFF) + (sum >> 16);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	0c1a      	lsrs	r2, r3, #16
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	18d3      	adds	r3, r2, r3
 8002452:	60fb      	str	r3, [r7, #12]

    // Return one's complement
    return ~sum;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	b29b      	uxth	r3, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	b29b      	uxth	r3, r3
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b004      	add	sp, #16
 8002462:	bd80      	pop	{r7, pc}

08002464 <calculate_tcp_checksum>:

// Function to calculate TCP checksum (with pseudo-header)
uint16_t calculate_tcp_checksum(uint8_t *pseudo_header, uint8_t *tcp_header, uint16_t tcp_length) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	1dbb      	adds	r3, r7, #6
 8002470:	801a      	strh	r2, [r3, #0]
    uint32_t sum = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]

    // Add pseudo-header
    for (uint16_t i = 0; i < 12; i += 2) {
 8002476:	231a      	movs	r3, #26
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2200      	movs	r2, #0
 800247c:	801a      	strh	r2, [r3, #0]
 800247e:	e02a      	b.n	80024d6 <calculate_tcp_checksum+0x72>
        uint16_t word = (pseudo_header[i] << 8) | pseudo_header[i + 1];
 8002480:	211a      	movs	r1, #26
 8002482:	187b      	adds	r3, r7, r1
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	18d3      	adds	r3, r2, r3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	b21a      	sxth	r2, r3
 8002490:	187b      	adds	r3, r7, r1
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	68f9      	ldr	r1, [r7, #12]
 8002498:	18cb      	adds	r3, r1, r3
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b21b      	sxth	r3, r3
 800249e:	4313      	orrs	r3, r2
 80024a0:	b21a      	sxth	r2, r3
 80024a2:	2114      	movs	r1, #20
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	801a      	strh	r2, [r3, #0]
        sum += word;
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	18d3      	adds	r3, r2, r3
 80024b0:	61fb      	str	r3, [r7, #28]
        if (sum > 0xFFFF) sum = (sum & 0xFFFF) + (sum >> 16);
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	025b      	lsls	r3, r3, #9
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d306      	bcc.n	80024ca <calculate_tcp_checksum+0x66>
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	0c1a      	lsrs	r2, r3, #16
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	18d3      	adds	r3, r2, r3
 80024c8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = 0; i < 12; i += 2) {
 80024ca:	221a      	movs	r2, #26
 80024cc:	18bb      	adds	r3, r7, r2
 80024ce:	18ba      	adds	r2, r7, r2
 80024d0:	8812      	ldrh	r2, [r2, #0]
 80024d2:	3202      	adds	r2, #2
 80024d4:	801a      	strh	r2, [r3, #0]
 80024d6:	231a      	movs	r3, #26
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	2b0b      	cmp	r3, #11
 80024de:	d9cf      	bls.n	8002480 <calculate_tcp_checksum+0x1c>
    }

    // Add TCP header and data
    for (uint16_t i = 0; i < tcp_length; i += 2) {
 80024e0:	2318      	movs	r3, #24
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2200      	movs	r2, #0
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	e034      	b.n	8002554 <calculate_tcp_checksum+0xf0>
        uint16_t word = (tcp_header[i] << 8) | (i + 1 < tcp_length ? tcp_header[i + 1] : 0);
 80024ea:	2118      	movs	r1, #24
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	18d3      	adds	r3, r2, r3
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	0008      	movs	r0, r1
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	1c59      	adds	r1, r3, #1
 8002502:	1dbb      	adds	r3, r7, #6
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	4299      	cmp	r1, r3
 8002508:	da07      	bge.n	800251a <calculate_tcp_checksum+0xb6>
 800250a:	183b      	adds	r3, r7, r0
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	18cb      	adds	r3, r1, r3
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b21b      	sxth	r3, r3
 8002518:	e000      	b.n	800251c <calculate_tcp_checksum+0xb8>
 800251a:	2300      	movs	r3, #0
 800251c:	4313      	orrs	r3, r2
 800251e:	b21a      	sxth	r2, r3
 8002520:	2116      	movs	r1, #22
 8002522:	187b      	adds	r3, r7, r1
 8002524:	801a      	strh	r2, [r3, #0]
        sum += word;
 8002526:	187b      	adds	r3, r7, r1
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	18d3      	adds	r3, r2, r3
 800252e:	61fb      	str	r3, [r7, #28]
        if (sum > 0xFFFF) sum = (sum & 0xFFFF) + (sum >> 16);
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	429a      	cmp	r2, r3
 8002538:	d306      	bcc.n	8002548 <calculate_tcp_checksum+0xe4>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	0c1a      	lsrs	r2, r3, #16
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	0c1b      	lsrs	r3, r3, #16
 8002544:	18d3      	adds	r3, r2, r3
 8002546:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = 0; i < tcp_length; i += 2) {
 8002548:	2218      	movs	r2, #24
 800254a:	18bb      	adds	r3, r7, r2
 800254c:	18ba      	adds	r2, r7, r2
 800254e:	8812      	ldrh	r2, [r2, #0]
 8002550:	3202      	adds	r2, #2
 8002552:	801a      	strh	r2, [r3, #0]
 8002554:	2318      	movs	r3, #24
 8002556:	18fa      	adds	r2, r7, r3
 8002558:	1dbb      	adds	r3, r7, #6
 800255a:	8812      	ldrh	r2, [r2, #0]
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d3c3      	bcc.n	80024ea <calculate_tcp_checksum+0x86>
    }

    // Final wrap-around and one's complement
    return ~((sum & 0xFFFF) + (sum >> 16));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	b29a      	uxth	r2, r3
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	b29b      	uxth	r3, r3
 800256c:	18d3      	adds	r3, r2, r3
 800256e:	b29b      	uxth	r3, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	b29b      	uxth	r3, r3
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b008      	add	sp, #32
 800257a:	bd80      	pop	{r7, pc}

0800257c <process_tcp_packet>:

uint8_t* process_tcp_packet(uint8_t *packet, uint16_t packet_size, uint16_t *response_size) {
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	b093      	sub	sp, #76	@ 0x4c
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	240a      	movs	r4, #10
 8002588:	193b      	adds	r3, r7, r4
 800258a:	1c0a      	adds	r2, r1, #0
 800258c:	801a      	strh	r2, [r3, #0]
    static uint8_t response[MAX_PACKET_SIZE + 1];  // Add extra byte for 0x0E at the start
    memset(response, 0, MAX_PACKET_SIZE + 1);      // Clear the response buffer
 800258e:	4a94      	ldr	r2, [pc, #592]	@ (80027e0 <process_tcp_packet+0x264>)
 8002590:	4b94      	ldr	r3, [pc, #592]	@ (80027e4 <process_tcp_packet+0x268>)
 8002592:	2100      	movs	r1, #0
 8002594:	0018      	movs	r0, r3
 8002596:	f001 f85d 	bl	8003654 <memset>

    response[0] = 0x0E;  // Ensure the first byte of the response is always 0x0E
 800259a:	4b92      	ldr	r3, [pc, #584]	@ (80027e4 <process_tcp_packet+0x268>)
 800259c:	220e      	movs	r2, #14
 800259e:	701a      	strb	r2, [r3, #0]
    uint8_t *data_start = response + 1;  // Start processing after the 0x0E byte
 80025a0:	4b91      	ldr	r3, [pc, #580]	@ (80027e8 <process_tcp_packet+0x26c>)
 80025a2:	647b      	str	r3, [r7, #68]	@ 0x44

    // Validate packet size
    if (packet_size < ETHERNET_HEADER_SIZE + IP_HEADER_SIZE + TCP_HEADER_SIZE) {
 80025a4:	193b      	adds	r3, r7, r4
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	2b35      	cmp	r3, #53	@ 0x35
 80025aa:	d808      	bhi.n	80025be <process_tcp_packet+0x42>
        printf("Invalid packet size: %d\n", packet_size);
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	4b8e      	ldr	r3, [pc, #568]	@ (80027ec <process_tcp_packet+0x270>)
 80025b2:	0011      	movs	r1, r2
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 fe31 	bl	800321c <iprintf>
        return NULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e10c      	b.n	80027d8 <process_tcp_packet+0x25c>
    }

    // Parse the Ethernet header
    uint8_t *ethernet_header = packet;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint8_t *response_ethernet_header = data_start;
 80025c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memcpy(response_ethernet_header, ethernet_header, ETHERNET_HEADER_SIZE);
 80025c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ca:	220e      	movs	r2, #14
 80025cc:	0018      	movs	r0, r3
 80025ce:	f001 f962 	bl	8003896 <memcpy>

    // Swap MAC addresses
    memcpy(response_ethernet_header, ethernet_header + 6, 6);  // Destination MAC
 80025d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d4:	1d99      	adds	r1, r3, #6
 80025d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d8:	2206      	movs	r2, #6
 80025da:	0018      	movs	r0, r3
 80025dc:	f001 f95b 	bl	8003896 <memcpy>
    memcpy(response_ethernet_header + 6, ethernet_header, 6);  // Source MAC
 80025e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e2:	3306      	adds	r3, #6
 80025e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025e6:	2206      	movs	r2, #6
 80025e8:	0018      	movs	r0, r3
 80025ea:	f001 f954 	bl	8003896 <memcpy>

    // Parse the IP header
    uint8_t *ip_header = packet + ETHERNET_HEADER_SIZE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	330e      	adds	r3, #14
 80025f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint8_t *response_ip_header = data_start + ETHERNET_HEADER_SIZE;
 80025f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025f6:	330e      	adds	r3, #14
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(response_ip_header, ip_header, IP_HEADER_SIZE);
 80025fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fe:	2214      	movs	r2, #20
 8002600:	0018      	movs	r0, r3
 8002602:	f001 f948 	bl	8003896 <memcpy>

    // Swap source and destination IPs
    memcpy(response_ip_header + 12, ip_header + 16, 4);  // Source IP
 8002606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002608:	330c      	adds	r3, #12
 800260a:	0018      	movs	r0, r3
 800260c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260e:	3310      	adds	r3, #16
 8002610:	2204      	movs	r2, #4
 8002612:	0019      	movs	r1, r3
 8002614:	f001 f93f 	bl	8003896 <memcpy>
    memcpy(response_ip_header + 16, ip_header + 12, 4);  // Destination IP
 8002618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261a:	3310      	adds	r3, #16
 800261c:	0018      	movs	r0, r3
 800261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002620:	330c      	adds	r3, #12
 8002622:	2204      	movs	r2, #4
 8002624:	0019      	movs	r1, r3
 8002626:	f001 f936 	bl	8003896 <memcpy>
    response_ip_header[10] = 0;  // Clear IP checksum
 800262a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262c:	330a      	adds	r3, #10
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
    response_ip_header[11] = 0;
 8002632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002634:	330b      	adds	r3, #11
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]

    // Parse the TCP header
    uint8_t *tcp_header = packet + ETHERNET_HEADER_SIZE + IP_HEADER_SIZE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3322      	adds	r3, #34	@ 0x22
 800263e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t *response_tcp_header = data_start + ETHERNET_HEADER_SIZE + IP_HEADER_SIZE;
 8002640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002642:	3322      	adds	r3, #34	@ 0x22
 8002644:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(response_tcp_header, tcp_header, TCP_HEADER_SIZE);
 8002646:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264a:	2214      	movs	r2, #20
 800264c:	0018      	movs	r0, r3
 800264e:	f001 f922 	bl	8003896 <memcpy>

    // Swap source and destination ports
    response_tcp_header[0] = tcp_header[2];
 8002652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002654:	789a      	ldrb	r2, [r3, #2]
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	701a      	strb	r2, [r3, #0]
    response_tcp_header[1] = tcp_header[3];
 800265a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265c:	3301      	adds	r3, #1
 800265e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002660:	78d2      	ldrb	r2, [r2, #3]
 8002662:	701a      	strb	r2, [r3, #0]
    response_tcp_header[2] = tcp_header[0];
 8002664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002666:	3302      	adds	r3, #2
 8002668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	701a      	strb	r2, [r3, #0]
    response_tcp_header[3] = tcp_header[1];
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	3303      	adds	r3, #3
 8002672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002674:	7852      	ldrb	r2, [r2, #1]
 8002676:	701a      	strb	r2, [r3, #0]

    // Process sequence and acknowledgment numbers
    uint32_t seq_num = (tcp_header[4] << 24) | (tcp_header[5] << 16) | (tcp_header[6] << 8) | tcp_header[7];
 8002678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267a:	3304      	adds	r3, #4
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	061a      	lsls	r2, r3, #24
 8002680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002682:	3305      	adds	r3, #5
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	431a      	orrs	r2, r3
 800268a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268c:	3306      	adds	r3, #6
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	4313      	orrs	r3, r2
 8002694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002696:	3207      	adds	r2, #7
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ack_num = seq_num + 1;  // ACK for SYN
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	3301      	adds	r3, #1
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
    response_tcp_header[4] = (ack_num >> 24) & 0xFF;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	0e1a      	lsrs	r2, r3, #24
 80026a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026aa:	3304      	adds	r3, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]
    response_tcp_header[5] = (ack_num >> 16) & 0xFF;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	0c1a      	lsrs	r2, r3, #16
 80026b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b6:	3305      	adds	r3, #5
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]
    response_tcp_header[6] = (ack_num >> 8) & 0xFF;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	0a1a      	lsrs	r2, r3, #8
 80026c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c2:	3306      	adds	r3, #6
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]
    response_tcp_header[7] = ack_num & 0xFF;
 80026c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ca:	3307      	adds	r3, #7
 80026cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

    // Set flags: SYN-ACK
    response_tcp_header[13] = 0x12;  // SYN (0x02) + ACK (0x10)
 80026d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d4:	330d      	adds	r3, #13
 80026d6:	2212      	movs	r2, #18
 80026d8:	701a      	strb	r2, [r3, #0]

    // Clear urgent pointer
    response_tcp_header[18] = 0;
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	3312      	adds	r3, #18
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
    response_tcp_header[19] = 0;
 80026e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e4:	3313      	adds	r3, #19
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]

    // Recalculate checksums
    uint16_t tcp_length = TCP_HEADER_SIZE;
 80026ea:	2522      	movs	r5, #34	@ 0x22
 80026ec:	197b      	adds	r3, r7, r5
 80026ee:	2214      	movs	r2, #20
 80026f0:	801a      	strh	r2, [r3, #0]
    uint16_t ip_total_length = IP_HEADER_SIZE + tcp_length;
 80026f2:	2620      	movs	r6, #32
 80026f4:	19bb      	adds	r3, r7, r6
 80026f6:	197a      	adds	r2, r7, r5
 80026f8:	8812      	ldrh	r2, [r2, #0]
 80026fa:	3214      	adds	r2, #20
 80026fc:	801a      	strh	r2, [r3, #0]

    // Update IP total length
    response_ip_header[2] = (ip_total_length >> 8) & 0xFF;
 80026fe:	19bb      	adds	r3, r7, r6
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	b29a      	uxth	r2, r3
 8002706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002708:	3302      	adds	r3, #2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
    response_ip_header[3] = ip_total_length & 0xFF;
 800270e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002710:	3303      	adds	r3, #3
 8002712:	19ba      	adds	r2, r7, r6
 8002714:	8812      	ldrh	r2, [r2, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    // Calculate IP checksum
    uint16_t ip_checksum = calculate_checksum(response_ip_header, IP_HEADER_SIZE);
 800271a:	211e      	movs	r1, #30
 800271c:	187c      	adds	r4, r7, r1
 800271e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002720:	2114      	movs	r1, #20
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff fe46 	bl	80023b4 <calculate_checksum>
 8002728:	0003      	movs	r3, r0
 800272a:	8023      	strh	r3, [r4, #0]
    response_ip_header[10] = (ip_checksum >> 8) & 0xFF;
 800272c:	211e      	movs	r1, #30
 800272e:	187b      	adds	r3, r7, r1
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	b29a      	uxth	r2, r3
 8002736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002738:	330a      	adds	r3, #10
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]
    response_ip_header[11] = ip_checksum & 0xFF;
 800273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002740:	330b      	adds	r3, #11
 8002742:	187a      	adds	r2, r7, r1
 8002744:	8812      	ldrh	r2, [r2, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

    // Calculate TCP checksum with pseudo-header
    uint8_t pseudo_header[12];
    memcpy(pseudo_header, response_ip_header + 12, 4);  // Source IP
 800274a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800274c:	330c      	adds	r3, #12
 800274e:	0019      	movs	r1, r3
 8002750:	2410      	movs	r4, #16
 8002752:	193b      	adds	r3, r7, r4
 8002754:	2204      	movs	r2, #4
 8002756:	0018      	movs	r0, r3
 8002758:	f001 f89d 	bl	8003896 <memcpy>
    memcpy(pseudo_header + 4, response_ip_header + 16, 4);  // Destination IP
 800275c:	193b      	adds	r3, r7, r4
 800275e:	3304      	adds	r3, #4
 8002760:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002762:	3210      	adds	r2, #16
 8002764:	0011      	movs	r1, r2
 8002766:	2204      	movs	r2, #4
 8002768:	0018      	movs	r0, r3
 800276a:	f001 f894 	bl	8003896 <memcpy>
    pseudo_header[8] = 0x00;  // Reserved
 800276e:	0021      	movs	r1, r4
 8002770:	187b      	adds	r3, r7, r1
 8002772:	2200      	movs	r2, #0
 8002774:	721a      	strb	r2, [r3, #8]
    pseudo_header[9] = 0x06;  // Protocol (TCP)
 8002776:	187b      	adds	r3, r7, r1
 8002778:	2206      	movs	r2, #6
 800277a:	725a      	strb	r2, [r3, #9]
    pseudo_header[10] = (tcp_length >> 8) & 0xFF;
 800277c:	197b      	adds	r3, r7, r5
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	b29b      	uxth	r3, r3
 8002784:	b2da      	uxtb	r2, r3
 8002786:	187b      	adds	r3, r7, r1
 8002788:	729a      	strb	r2, [r3, #10]
    pseudo_header[11] = tcp_length & 0xFF;
 800278a:	197b      	adds	r3, r7, r5
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	0008      	movs	r0, r1
 8002792:	187b      	adds	r3, r7, r1
 8002794:	72da      	strb	r2, [r3, #11]

    uint16_t tcp_checksum = calculate_tcp_checksum(pseudo_header, response_tcp_header, tcp_length);
 8002796:	211c      	movs	r1, #28
 8002798:	187c      	adds	r4, r7, r1
 800279a:	197b      	adds	r3, r7, r5
 800279c:	881a      	ldrh	r2, [r3, #0]
 800279e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027a0:	183b      	adds	r3, r7, r0
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff fe5e 	bl	8002464 <calculate_tcp_checksum>
 80027a8:	0003      	movs	r3, r0
 80027aa:	8023      	strh	r3, [r4, #0]
    response_tcp_header[16] = (tcp_checksum >> 8) & 0xFF;
 80027ac:	211c      	movs	r1, #28
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	3310      	adds	r3, #16
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
    response_tcp_header[17] = tcp_checksum & 0xFF;
 80027be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c0:	3311      	adds	r3, #17
 80027c2:	187a      	adds	r2, r7, r1
 80027c4:	8812      	ldrh	r2, [r2, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

    // Set response size (including the shifted start with 0x0E)
    *response_size = 1 + ETHERNET_HEADER_SIZE + ip_total_length;
 80027ca:	19bb      	adds	r3, r7, r6
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	330f      	adds	r3, #15
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	801a      	strh	r2, [r3, #0]

    return response;
 80027d6:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <process_tcp_packet+0x268>)
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b013      	add	sp, #76	@ 0x4c
 80027de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e0:	000005dd 	.word	0x000005dd
 80027e4:	200001b0 	.word	0x200001b0
 80027e8:	200001b1 	.word	0x200001b1
 80027ec:	08004ff0 	.word	0x08004ff0

080027f0 <print_hexdump>:

// Debug function to print a hexdump of the packet
void print_hexdump(const uint8_t *data, uint16_t size) {
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	000a      	movs	r2, r1
 80027fa:	1cbb      	adds	r3, r7, #2
 80027fc:	801a      	strh	r2, [r3, #0]
    printf("\nHexdump (Size: %d):\n", size);
 80027fe:	1cbb      	adds	r3, r7, #2
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <print_hexdump+0x88>)
 8002804:	0011      	movs	r1, r2
 8002806:	0018      	movs	r0, r3
 8002808:	f000 fd08 	bl	800321c <iprintf>
    for (uint16_t i = 0; i < size; i++) {
 800280c:	230e      	movs	r3, #14
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2200      	movs	r2, #0
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	e01b      	b.n	800284e <print_hexdump+0x5e>
        printf("%02X ", data[i]);
 8002816:	240e      	movs	r4, #14
 8002818:	193b      	adds	r3, r7, r4
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	18d3      	adds	r3, r2, r3
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	001a      	movs	r2, r3
 8002824:	4b15      	ldr	r3, [pc, #84]	@ (800287c <print_hexdump+0x8c>)
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fcf7 	bl	800321c <iprintf>
        if ((i + 1) % 16 == 0) {
 800282e:	193b      	adds	r3, r7, r4
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	001a      	movs	r2, r3
 8002836:	230f      	movs	r3, #15
 8002838:	4013      	ands	r3, r2
 800283a:	d102      	bne.n	8002842 <print_hexdump+0x52>
            printf("\n");
 800283c:	200a      	movs	r0, #10
 800283e:	f000 fcfd 	bl	800323c <putchar>
    for (uint16_t i = 0; i < size; i++) {
 8002842:	210e      	movs	r1, #14
 8002844:	187b      	adds	r3, r7, r1
 8002846:	881a      	ldrh	r2, [r3, #0]
 8002848:	187b      	adds	r3, r7, r1
 800284a:	3201      	adds	r2, #1
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	230e      	movs	r3, #14
 8002850:	18fa      	adds	r2, r7, r3
 8002852:	1cbb      	adds	r3, r7, #2
 8002854:	8812      	ldrh	r2, [r2, #0]
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d3dc      	bcc.n	8002816 <print_hexdump+0x26>
        }
    }
    if (size % 16 != 0) {
 800285c:	1cbb      	adds	r3, r7, #2
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	220f      	movs	r2, #15
 8002862:	4013      	ands	r3, r2
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <print_hexdump+0x80>
        printf("\n");
 800286a:	200a      	movs	r0, #10
 800286c:	f000 fce6 	bl	800323c <putchar>
    }
}
 8002870:	46c0      	nop			@ (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b005      	add	sp, #20
 8002876:	bd90      	pop	{r4, r7, pc}
 8002878:	0800500c 	.word	0x0800500c
 800287c:	08005024 	.word	0x08005024

08002880 <process_packet_from_buffer>:

void process_packet_from_buffer(uint16_t start_address) {
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	0002      	movs	r2, r0
 8002888:	1dbb      	adds	r3, r7, #6
 800288a:	801a      	strh	r2, [r3, #0]
    // Ensure valid address
    if (start_address > 0x1FFF) {
 800288c:	1dbb      	adds	r3, r7, #6
 800288e:	881a      	ldrh	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	019b      	lsls	r3, r3, #6
 8002894:	429a      	cmp	r2, r3
 8002896:	d307      	bcc.n	80028a8 <process_packet_from_buffer+0x28>
        printf("\n\rInvalid start address: %04X\n\r", start_address);
 8002898:	1dbb      	adds	r3, r7, #6
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	4b51      	ldr	r3, [pc, #324]	@ (80029e4 <process_packet_from_buffer+0x164>)
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 fcbb 	bl	800321c <iprintf>
        return;
 80028a6:	e09a      	b.n	80029de <process_packet_from_buffer+0x15e>
    uint16_t next_start_address;
    uint16_t packet_size;
    uint16_t response_size; // Variable to hold the response size

    // Step 1: Read start+0 and start+1 to get the next packet start address
    if (enc_buffer_read(2, start_address, next_packet_start) != 2) {
 80028a8:	2310      	movs	r3, #16
 80028aa:	18fa      	adds	r2, r7, r3
 80028ac:	1dbb      	adds	r3, r7, #6
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	0019      	movs	r1, r3
 80028b2:	2002      	movs	r0, #2
 80028b4:	f7fe ff32 	bl	800171c <enc_buffer_read>
 80028b8:	0003      	movs	r3, r0
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d004      	beq.n	80028c8 <process_packet_from_buffer+0x48>
        printf("\n\rFailed to read packet start address bytes\n\r");
 80028be:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <process_packet_from_buffer+0x168>)
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 fcab 	bl	800321c <iprintf>
        return;
 80028c6:	e08a      	b.n	80029de <process_packet_from_buffer+0x15e>
    }

    // Step 2: Calculate the next packet start address (16-bit)
    next_start_address = ((uint16_t)next_packet_start[1] << 8) | next_packet_start[0];
 80028c8:	2110      	movs	r1, #16
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	b21a      	sxth	r2, r3
 80028dc:	211e      	movs	r1, #30
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	801a      	strh	r2, [r3, #0]

    // Step 3: Calculate the size of the packet
    if (next_start_address < start_address) {
 80028e2:	187a      	adds	r2, r7, r1
 80028e4:	1dbb      	adds	r3, r7, #6
 80028e6:	8812      	ldrh	r2, [r2, #0]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d207      	bcs.n	80028fe <process_packet_from_buffer+0x7e>
        printf("\n\rInvalid next start address: 0x%04X\n\r", next_start_address);
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	881a      	ldrh	r2, [r3, #0]
 80028f2:	4b3e      	ldr	r3, [pc, #248]	@ (80029ec <process_packet_from_buffer+0x16c>)
 80028f4:	0011      	movs	r1, r2
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 fc90 	bl	800321c <iprintf>
        return;
 80028fc:	e06f      	b.n	80029de <process_packet_from_buffer+0x15e>
    }
    packet_size = next_start_address - (start_address+6);
 80028fe:	231e      	movs	r3, #30
 8002900:	18fa      	adds	r2, r7, r3
 8002902:	1dbb      	adds	r3, r7, #6
 8002904:	8812      	ldrh	r2, [r2, #0]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	b29a      	uxth	r2, r3
 800290c:	241c      	movs	r4, #28
 800290e:	193b      	adds	r3, r7, r4
 8002910:	3a06      	subs	r2, #6
 8002912:	801a      	strh	r2, [r3, #0]

    // Step 4: Allocate buffer for the packet data
    uint8_t *packet_data = (uint8_t *)malloc(packet_size);
 8002914:	193b      	adds	r3, r7, r4
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 fa55 	bl	8002dc8 <malloc>
 800291e:	0003      	movs	r3, r0
 8002920:	61bb      	str	r3, [r7, #24]
    if (packet_data == NULL) {
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <process_packet_from_buffer+0xb8>
        printf("\n\rMemory allocation failed for packet size: %d\n\r", packet_size);
 8002928:	193b      	adds	r3, r7, r4
 800292a:	881a      	ldrh	r2, [r3, #0]
 800292c:	4b30      	ldr	r3, [pc, #192]	@ (80029f0 <process_packet_from_buffer+0x170>)
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f000 fc73 	bl	800321c <iprintf>
        return;
 8002936:	e052      	b.n	80029de <process_packet_from_buffer+0x15e>
    }

    // Step 5: Read the packet data
    if (enc_buffer_read(packet_size, start_address+6, packet_data) != packet_size) {
 8002938:	241c      	movs	r4, #28
 800293a:	193b      	adds	r3, r7, r4
 800293c:	8818      	ldrh	r0, [r3, #0]
 800293e:	1dbb      	adds	r3, r7, #6
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	3306      	adds	r3, #6
 8002944:	b29b      	uxth	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	0019      	movs	r1, r3
 800294a:	f7fe fee7 	bl	800171c <enc_buffer_read>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	193b      	adds	r3, r7, r4
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	4293      	cmp	r3, r2
 8002958:	d008      	beq.n	800296c <process_packet_from_buffer+0xec>
        printf("\n\rFailed to read packet data\n\r");
 800295a:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <process_packet_from_buffer+0x174>)
 800295c:	0018      	movs	r0, r3
 800295e:	f000 fc5d 	bl	800321c <iprintf>
        free(packet_data);
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 fa39 	bl	8002ddc <free>
        return;
 800296a:	e038      	b.n	80029de <process_packet_from_buffer+0x15e>
    }

    // Step 6: Pass the data to TCP packet processing
    uint8_t *response = process_tcp_packet(packet_data, packet_size, &response_size);
 800296c:	240e      	movs	r4, #14
 800296e:	193a      	adds	r2, r7, r4
 8002970:	231c      	movs	r3, #28
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	8819      	ldrh	r1, [r3, #0]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff fdff 	bl	800257c <process_tcp_packet>
 800297e:	0003      	movs	r3, r0
 8002980:	617b      	str	r3, [r7, #20]

    // Print the response in hexdump format before freeing
    if (response != NULL) {
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d016      	beq.n	80029b6 <process_packet_from_buffer+0x136>
        printf("\nProcessed response data:\n");
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <process_packet_from_buffer+0x178>)
 800298a:	0018      	movs	r0, r3
 800298c:	f000 fcb6 	bl	80032fc <puts>
        print_hexdump(response, response_size);
 8002990:	193b      	adds	r3, r7, r4
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	0011      	movs	r1, r2
 8002998:	0018      	movs	r0, r3
 800299a:	f7ff ff29 	bl	80027f0 <print_hexdump>
        transmit_tcp_packet(response, response_size);
 800299e:	193b      	adds	r3, r7, r4
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	0011      	movs	r1, r2
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 f82c 	bl	8002a04 <transmit_tcp_packet>
        free(response); // Free response memory if allocated dynamically
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 fa14 	bl	8002ddc <free>
 80029b4:	e003      	b.n	80029be <process_packet_from_buffer+0x13e>
    } else {
        printf("\nNo response generated by TCP packet processing.\n");
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <process_packet_from_buffer+0x17c>)
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 fc9f 	bl	80032fc <puts>
    }

    // Step 7: Free the allocated memory
    free(packet_data);
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 fa0b 	bl	8002ddc <free>

    printf("\n\rSuccessfully processed packet of size %d from 0x%04X to 0x%04X\n\r",
 80029c6:	231c      	movs	r3, #28
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	8819      	ldrh	r1, [r3, #0]
 80029cc:	1dbb      	adds	r3, r7, #6
 80029ce:	881a      	ldrh	r2, [r3, #0]
 80029d0:	231e      	movs	r3, #30
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	4809      	ldr	r0, [pc, #36]	@ (8002a00 <process_packet_from_buffer+0x180>)
 80029da:	f000 fc1f 	bl	800321c <iprintf>
           packet_size, start_address, next_start_address - 1);
}
 80029de:	46bd      	mov	sp, r7
 80029e0:	b009      	add	sp, #36	@ 0x24
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	0800502c 	.word	0x0800502c
 80029e8:	0800504c 	.word	0x0800504c
 80029ec:	0800507c 	.word	0x0800507c
 80029f0:	080050a4 	.word	0x080050a4
 80029f4:	080050d8 	.word	0x080050d8
 80029f8:	080050f8 	.word	0x080050f8
 80029fc:	08005114 	.word	0x08005114
 8002a00:	08005148 	.word	0x08005148

08002a04 <transmit_tcp_packet>:


void transmit_tcp_packet(uint8_t *packet, uint16_t packet_size)
{
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	000a      	movs	r2, r1
 8002a0e:	1cbb      	adds	r3, r7, #2
 8002a10:	801a      	strh	r2, [r3, #0]
	//Write the ARP packet to the ENC28J60 buffer
	//uint16_t frame_size = 43; // The total length is now exactly 42 bytes (without padding)
	uint16_t start_address = TX_BUFFER_START;
 8002a12:	210e      	movs	r1, #14
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	2200      	movs	r2, #0
 8002a18:	801a      	strh	r2, [r3, #0]
	if ((start_address + packet_size - 1) > 0x1FFF) {
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	1cbb      	adds	r3, r7, #2
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	18d2      	adds	r2, r2, r3
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	019b      	lsls	r3, r3, #6
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dd04      	ble.n	8002a36 <transmit_tcp_packet+0x32>
		printf("\nInvalid Buffer Size. Buffer exceeds valid address range.\n");
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <transmit_tcp_packet+0xa8>)
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fc64 	bl	80032fc <puts>
		return;
 8002a34:	e036      	b.n	8002aa4 <transmit_tcp_packet+0xa0>
	}
	uint16_t end_address = start_address + packet_size - 1;
 8002a36:	210e      	movs	r1, #14
 8002a38:	187a      	adds	r2, r7, r1
 8002a3a:	1cbb      	adds	r3, r7, #2
 8002a3c:	8812      	ldrh	r2, [r2, #0]
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	250c      	movs	r5, #12
 8002a46:	197b      	adds	r3, r7, r5
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	801a      	strh	r2, [r3, #0]
	enc_buffer_write(packet_size, start_address, packet);
 8002a4c:	1cbb      	adds	r3, r7, #2
 8002a4e:	8818      	ldrh	r0, [r3, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	000c      	movs	r4, r1
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	0019      	movs	r1, r3
 8002a5a:	f7fe fdc3 	bl	80015e4 <enc_buffer_write>

	// Set transmit pointers
	enc28j60_set_transmit_pointers(start_address, end_address);
 8002a5e:	197b      	adds	r3, r7, r5
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	0011      	movs	r1, r2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fd fc23 	bl	80002b4 <enc28j60_set_transmit_pointers>

	// Start transmission
	enc28j60_start_transmission();
 8002a6e:	f7fd fc06 	bl	800027e <enc28j60_start_transmission>

	// Wait for transmission to complete
	if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
 8002a72:	23fa      	movs	r3, #250	@ 0xfa
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7fd fc4d 	bl	8000316 <wait_for_transmission_complete>
 8002a7c:	1e03      	subs	r3, r0, #0
 8002a7e:	d00d      	beq.n	8002a9c <transmit_tcp_packet+0x98>
		// Check if transmission was successful
		if (enc28j60_transmission_successful()) {
 8002a80:	f7fd fc78 	bl	8000374 <enc28j60_transmission_successful>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d004      	beq.n	8002a92 <transmit_tcp_packet+0x8e>
			printf("TCP request sent successfully.\n\r");
 8002a88:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <transmit_tcp_packet+0xac>)
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 fbc6 	bl	800321c <iprintf>
 8002a90:	e008      	b.n	8002aa4 <transmit_tcp_packet+0xa0>
		} else {
			printf("TCP transmission failed. Check error flags.\n\r");
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <transmit_tcp_packet+0xb0>)
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 fbc1 	bl	800321c <iprintf>
 8002a9a:	e003      	b.n	8002aa4 <transmit_tcp_packet+0xa0>
		}
	} else {
		printf(
 8002a9c:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <transmit_tcp_packet+0xb4>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 fbbc 	bl	800321c <iprintf>
				"Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
	}
}
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b004      	add	sp, #16
 8002aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	0800518c 	.word	0x0800518c
 8002ab0:	080051c8 	.word	0x080051c8
 8002ab4:	080051ec 	.word	0x080051ec
 8002ab8:	0800521c 	.word	0x0800521c

08002abc <__io_getchar>:
 *
 * Returns:
 * either received char or -1 if not
 */
int __io_getchar(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
	char ch;
	if(cbfifo_dequeue(&fiforx, &ch, 1)==1)
 8002ac2:	1df9      	adds	r1, r7, #7
 8002ac4:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <__io_getchar+0x2c>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7fd fdaf 	bl	800062c <cbfifo_dequeue>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d102      	bne.n	8002ada <__io_getchar+0x1e>
	{
		return ch;
 8002ad4:	1dfb      	adds	r3, r7, #7
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	e001      	b.n	8002ade <__io_getchar+0x22>
	}
	else
	{
		return -1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	425b      	negs	r3, r3
	}
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b002      	add	sp, #8
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	20000120 	.word	0x20000120

08002aec <__io_putchar>:
 *
 * Returns:
 *  either received 1 or -1(if transmission not successful)
 */
int __io_putchar(int ch)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	while (cbfifo_length(&fifotx) >= 127);
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <__io_putchar+0x48>)
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7fd fddf 	bl	80006bc <cbfifo_length>
 8002afe:	0003      	movs	r3, r0
 8002b00:	2b7e      	cmp	r3, #126	@ 0x7e
 8002b02:	d8f8      	bhi.n	8002af6 <__io_putchar+0xa>
	if(cbfifo_enqueue(&fifotx,&ch,1)==1)
 8002b04:	1d39      	adds	r1, r7, #4
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <__io_putchar+0x48>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7fd fd3f 	bl	800058e <cbfifo_enqueue>
 8002b10:	0003      	movs	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <__io_putchar+0x3a>
	{
		USART2->CR1 |= USART_CR1_TXEIE;
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <__io_putchar+0x4c>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <__io_putchar+0x4c>)
 8002b1c:	2180      	movs	r1, #128	@ 0x80
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
		return 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e001      	b.n	8002b2a <__io_putchar+0x3e>
	}
	else
	{
		return -1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	425b      	negs	r3, r3
	}
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b002      	add	sp, #8
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	20000094 	.word	0x20000094
 8002b38:	40004400 	.word	0x40004400

08002b3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b3c:	480e      	ldr	r0, [pc, #56]	@ (8002b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b40:	f000 f866 	bl	8002c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002b44:	480d      	ldr	r0, [pc, #52]	@ (8002b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b46:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b48:	4a0e      	ldr	r2, [pc, #56]	@ (8002b84 <LoopForever+0xe>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b4c:	e002      	b.n	8002b54 <LoopCopyDataInit>

08002b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b52:	3304      	adds	r3, #4

08002b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b58:	d3f9      	bcc.n	8002b4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b5c:	4c0b      	ldr	r4, [pc, #44]	@ (8002b8c <LoopForever+0x16>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b60:	e001      	b.n	8002b66 <LoopFillZerobss>

08002b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b64:	3204      	adds	r2, #4

08002b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b6a:	f000 fe6d 	bl	8003848 <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 8002b6e:	f000 f895 	bl	8002c9c <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 8002b72:	f7ff fa33 	bl	8001fdc <main>

08002b76 <LoopForever>:

LoopForever:
  b LoopForever
 8002b76:	e7fe      	b.n	8002b76 <LoopForever>
  ldr   r0, =_estack
 8002b78:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002b84:	080054e0 	.word	0x080054e0
  ldr r2, =_sbss
 8002b88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002b8c:	200008dc 	.word	0x200008dc

08002b90 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b90:	e7fe      	b.n	8002b90 <ADC_COMP_IRQHandler>
	...

08002b94 <Set_Clocks_To_48MHz>:
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4b1a      	ldr	r3, [pc, #104]	@ (8002c04 <Set_Clocks_To_48MHz+0x70>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <Set_Clocks_To_48MHz+0x70>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba8:	4b17      	ldr	r3, [pc, #92]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002baa:	2180      	movs	r1, #128	@ 0x80
 8002bac:	0249      	lsls	r1, r1, #9
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	4b14      	ldr	r3, [pc, #80]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	029b      	lsls	r3, r3, #10
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d0f9      	beq.n	8002bb4 <Set_Clocks_To_48MHz+0x20>
 8002bc0:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002bc6:	21f0      	movs	r1, #240	@ 0xf0
 8002bc8:	438a      	bics	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002bd2:	2103      	movs	r1, #3
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	089a      	lsrs	r2, r3, #2
 8002be0:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4053      	eors	r3, r2
 8002be6:	2203      	movs	r2, #3
 8002be8:	4013      	ands	r3, r2
 8002bea:	d1f6      	bne.n	8002bda <Set_Clocks_To_48MHz+0x46>
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a06      	ldr	r2, [pc, #24]	@ (8002c0c <Set_Clocks_To_48MHz+0x78>)
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <Set_Clocks_To_48MHz+0x74>)
 8002bf6:	2180      	movs	r1, #128	@ 0x80
 8002bf8:	00c9      	lsls	r1, r1, #3
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	fffff8ff 	.word	0xfffff8ff

08002c10 <SystemInit>:
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <SystemInit+0x74>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b1a      	ldr	r3, [pc, #104]	@ (8002c84 <SystemInit+0x74>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	4b18      	ldr	r3, [pc, #96]	@ (8002c84 <SystemInit+0x74>)
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <SystemInit+0x74>)
 8002c26:	4918      	ldr	r1, [pc, #96]	@ (8002c88 <SystemInit+0x78>)
 8002c28:	400a      	ands	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <SystemInit+0x74>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <SystemInit+0x74>)
 8002c32:	4916      	ldr	r1, [pc, #88]	@ (8002c8c <SystemInit+0x7c>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <SystemInit+0x74>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <SystemInit+0x74>)
 8002c3e:	4914      	ldr	r1, [pc, #80]	@ (8002c90 <SystemInit+0x80>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	4b0f      	ldr	r3, [pc, #60]	@ (8002c84 <SystemInit+0x74>)
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <SystemInit+0x74>)
 8002c4a:	4912      	ldr	r1, [pc, #72]	@ (8002c94 <SystemInit+0x84>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <SystemInit+0x74>)
 8002c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <SystemInit+0x74>)
 8002c56:	210f      	movs	r1, #15
 8002c58:	438a      	bics	r2, r1
 8002c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c5c:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <SystemInit+0x74>)
 8002c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c60:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <SystemInit+0x74>)
 8002c62:	490d      	ldr	r1, [pc, #52]	@ (8002c98 <SystemInit+0x88>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <SystemInit+0x74>)
 8002c6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <SystemInit+0x74>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	438a      	bics	r2, r1
 8002c72:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c74:	4b03      	ldr	r3, [pc, #12]	@ (8002c84 <SystemInit+0x74>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	f7ff ff8b 	bl	8002b94 <Set_Clocks_To_48MHz>
 8002c7e:	46c0      	nop			@ (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08ffb80c 	.word	0x08ffb80c
 8002c8c:	fef6ffff 	.word	0xfef6ffff
 8002c90:	fffbffff 	.word	0xfffbffff
 8002c94:	ffc0ffff 	.word	0xffc0ffff
 8002c98:	fff0feac 	.word	0xfff0feac

08002c9c <SystemCoreClockUpdate>:
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002da8 <SystemCoreClockUpdate+0x10c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	220c      	movs	r2, #12
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d00f      	beq.n	8002ce2 <SystemCoreClockUpdate+0x46>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d859      	bhi.n	8002d7c <SystemCoreClockUpdate+0xe0>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d015      	beq.n	8002cfa <SystemCoreClockUpdate+0x5e>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d853      	bhi.n	8002d7c <SystemCoreClockUpdate+0xe0>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <SystemCoreClockUpdate+0x4e>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d008      	beq.n	8002cf2 <SystemCoreClockUpdate+0x56>
 8002ce0:	e04c      	b.n	8002d7c <SystemCoreClockUpdate+0xe0>
 8002ce2:	4b32      	ldr	r3, [pc, #200]	@ (8002dac <SystemCoreClockUpdate+0x110>)
 8002ce4:	4a32      	ldr	r2, [pc, #200]	@ (8002db0 <SystemCoreClockUpdate+0x114>)
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e04c      	b.n	8002d84 <SystemCoreClockUpdate+0xe8>
 8002cea:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <SystemCoreClockUpdate+0x110>)
 8002cec:	4a31      	ldr	r2, [pc, #196]	@ (8002db4 <SystemCoreClockUpdate+0x118>)
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e048      	b.n	8002d84 <SystemCoreClockUpdate+0xe8>
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002dac <SystemCoreClockUpdate+0x110>)
 8002cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8002db4 <SystemCoreClockUpdate+0x118>)
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e044      	b.n	8002d84 <SystemCoreClockUpdate+0xe8>
 8002cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002da8 <SystemCoreClockUpdate+0x10c>)
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	23f0      	movs	r3, #240	@ 0xf0
 8002d00:	039b      	lsls	r3, r3, #14
 8002d02:	4013      	ands	r3, r2
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	4b28      	ldr	r3, [pc, #160]	@ (8002da8 <SystemCoreClockUpdate+0x10c>)
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	23c0      	movs	r3, #192	@ 0xc0
 8002d0c:	025b      	lsls	r3, r3, #9
 8002d0e:	4013      	ands	r3, r2
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	0c9b      	lsrs	r3, r3, #18
 8002d16:	3302      	adds	r3, #2
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <SystemCoreClockUpdate+0x10c>)
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	220f      	movs	r2, #15
 8002d20:	4013      	ands	r3, r2
 8002d22:	3301      	adds	r3, #1
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	2380      	movs	r3, #128	@ 0x80
 8002d2a:	025b      	lsls	r3, r3, #9
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d10a      	bne.n	8002d46 <SystemCoreClockUpdate+0xaa>
 8002d30:	6839      	ldr	r1, [r7, #0]
 8002d32:	4820      	ldr	r0, [pc, #128]	@ (8002db4 <SystemCoreClockUpdate+0x118>)
 8002d34:	f7fd f9fa 	bl	800012c <__udivsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	435a      	muls	r2, r3
 8002d40:	4b1a      	ldr	r3, [pc, #104]	@ (8002dac <SystemCoreClockUpdate+0x110>)
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e01e      	b.n	8002d84 <SystemCoreClockUpdate+0xe8>
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	23c0      	movs	r3, #192	@ 0xc0
 8002d4a:	025b      	lsls	r3, r3, #9
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d10a      	bne.n	8002d66 <SystemCoreClockUpdate+0xca>
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	4817      	ldr	r0, [pc, #92]	@ (8002db0 <SystemCoreClockUpdate+0x114>)
 8002d54:	f7fd f9ea 	bl	800012c <__udivsi3>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	435a      	muls	r2, r3
 8002d60:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <SystemCoreClockUpdate+0x110>)
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e00e      	b.n	8002d84 <SystemCoreClockUpdate+0xe8>
 8002d66:	6839      	ldr	r1, [r7, #0]
 8002d68:	4812      	ldr	r0, [pc, #72]	@ (8002db4 <SystemCoreClockUpdate+0x118>)
 8002d6a:	f7fd f9df 	bl	800012c <__udivsi3>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	001a      	movs	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	435a      	muls	r2, r3
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <SystemCoreClockUpdate+0x110>)
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e003      	b.n	8002d84 <SystemCoreClockUpdate+0xe8>
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <SystemCoreClockUpdate+0x110>)
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <SystemCoreClockUpdate+0x118>)
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	4b08      	ldr	r3, [pc, #32]	@ (8002da8 <SystemCoreClockUpdate+0x10c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <SystemCoreClockUpdate+0x11c>)
 8002d90:	5cd3      	ldrb	r3, [r2, r3]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <SystemCoreClockUpdate+0x110>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	40da      	lsrs	r2, r3
 8002d9c:	4b03      	ldr	r3, [pc, #12]	@ (8002dac <SystemCoreClockUpdate+0x110>)
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	46c0      	nop			@ (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b004      	add	sp, #16
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	20000018 	.word	0x20000018
 8002db0:	02dc6c00 	.word	0x02dc6c00
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	080052e4 	.word	0x080052e4

08002dbc <atoi>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	220a      	movs	r2, #10
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	f000 f951 	bl	8003068 <strtol>
 8002dc6:	bd10      	pop	{r4, pc}

08002dc8 <malloc>:
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4b03      	ldr	r3, [pc, #12]	@ (8002dd8 <malloc+0x10>)
 8002dcc:	0001      	movs	r1, r0
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	f000 f830 	bl	8002e34 <_malloc_r>
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	20000028 	.word	0x20000028

08002ddc <free>:
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <free+0x10>)
 8002de0:	0001      	movs	r1, r0
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	f000 fd7e 	bl	80038e4 <_free_r>
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	20000028 	.word	0x20000028

08002df0 <sbrk_aligned>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	4e0f      	ldr	r6, [pc, #60]	@ (8002e30 <sbrk_aligned+0x40>)
 8002df4:	000d      	movs	r5, r1
 8002df6:	6831      	ldr	r1, [r6, #0]
 8002df8:	0004      	movs	r4, r0
 8002dfa:	2900      	cmp	r1, #0
 8002dfc:	d102      	bne.n	8002e04 <sbrk_aligned+0x14>
 8002dfe:	f000 fcf7 	bl	80037f0 <_sbrk_r>
 8002e02:	6030      	str	r0, [r6, #0]
 8002e04:	0029      	movs	r1, r5
 8002e06:	0020      	movs	r0, r4
 8002e08:	f000 fcf2 	bl	80037f0 <_sbrk_r>
 8002e0c:	1c43      	adds	r3, r0, #1
 8002e0e:	d103      	bne.n	8002e18 <sbrk_aligned+0x28>
 8002e10:	2501      	movs	r5, #1
 8002e12:	426d      	negs	r5, r5
 8002e14:	0028      	movs	r0, r5
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	2303      	movs	r3, #3
 8002e1a:	1cc5      	adds	r5, r0, #3
 8002e1c:	439d      	bics	r5, r3
 8002e1e:	42a8      	cmp	r0, r5
 8002e20:	d0f8      	beq.n	8002e14 <sbrk_aligned+0x24>
 8002e22:	1a29      	subs	r1, r5, r0
 8002e24:	0020      	movs	r0, r4
 8002e26:	f000 fce3 	bl	80037f0 <_sbrk_r>
 8002e2a:	3001      	adds	r0, #1
 8002e2c:	d1f2      	bne.n	8002e14 <sbrk_aligned+0x24>
 8002e2e:	e7ef      	b.n	8002e10 <sbrk_aligned+0x20>
 8002e30:	20000790 	.word	0x20000790

08002e34 <_malloc_r>:
 8002e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e36:	2203      	movs	r2, #3
 8002e38:	1ccb      	adds	r3, r1, #3
 8002e3a:	4393      	bics	r3, r2
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	0005      	movs	r5, r0
 8002e40:	001f      	movs	r7, r3
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d234      	bcs.n	8002eb0 <_malloc_r+0x7c>
 8002e46:	270c      	movs	r7, #12
 8002e48:	42b9      	cmp	r1, r7
 8002e4a:	d833      	bhi.n	8002eb4 <_malloc_r+0x80>
 8002e4c:	0028      	movs	r0, r5
 8002e4e:	f000 f871 	bl	8002f34 <__malloc_lock>
 8002e52:	4e37      	ldr	r6, [pc, #220]	@ (8002f30 <_malloc_r+0xfc>)
 8002e54:	6833      	ldr	r3, [r6, #0]
 8002e56:	001c      	movs	r4, r3
 8002e58:	2c00      	cmp	r4, #0
 8002e5a:	d12f      	bne.n	8002ebc <_malloc_r+0x88>
 8002e5c:	0039      	movs	r1, r7
 8002e5e:	0028      	movs	r0, r5
 8002e60:	f7ff ffc6 	bl	8002df0 <sbrk_aligned>
 8002e64:	0004      	movs	r4, r0
 8002e66:	1c43      	adds	r3, r0, #1
 8002e68:	d15f      	bne.n	8002f2a <_malloc_r+0xf6>
 8002e6a:	6834      	ldr	r4, [r6, #0]
 8002e6c:	9400      	str	r4, [sp, #0]
 8002e6e:	9b00      	ldr	r3, [sp, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d14a      	bne.n	8002f0a <_malloc_r+0xd6>
 8002e74:	2c00      	cmp	r4, #0
 8002e76:	d052      	beq.n	8002f1e <_malloc_r+0xea>
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	0028      	movs	r0, r5
 8002e7c:	18e3      	adds	r3, r4, r3
 8002e7e:	9900      	ldr	r1, [sp, #0]
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	f000 fcb5 	bl	80037f0 <_sbrk_r>
 8002e86:	9b01      	ldr	r3, [sp, #4]
 8002e88:	4283      	cmp	r3, r0
 8002e8a:	d148      	bne.n	8002f1e <_malloc_r+0xea>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	0028      	movs	r0, r5
 8002e90:	1aff      	subs	r7, r7, r3
 8002e92:	0039      	movs	r1, r7
 8002e94:	f7ff ffac 	bl	8002df0 <sbrk_aligned>
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d040      	beq.n	8002f1e <_malloc_r+0xea>
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	19db      	adds	r3, r3, r7
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	6833      	ldr	r3, [r6, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	d133      	bne.n	8002f12 <_malloc_r+0xde>
 8002eaa:	9b00      	ldr	r3, [sp, #0]
 8002eac:	6033      	str	r3, [r6, #0]
 8002eae:	e019      	b.n	8002ee4 <_malloc_r+0xb0>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	dac9      	bge.n	8002e48 <_malloc_r+0x14>
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	602b      	str	r3, [r5, #0]
 8002eb8:	2000      	movs	r0, #0
 8002eba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ebc:	6821      	ldr	r1, [r4, #0]
 8002ebe:	1bc9      	subs	r1, r1, r7
 8002ec0:	d420      	bmi.n	8002f04 <_malloc_r+0xd0>
 8002ec2:	290b      	cmp	r1, #11
 8002ec4:	d90a      	bls.n	8002edc <_malloc_r+0xa8>
 8002ec6:	19e2      	adds	r2, r4, r7
 8002ec8:	6027      	str	r7, [r4, #0]
 8002eca:	42a3      	cmp	r3, r4
 8002ecc:	d104      	bne.n	8002ed8 <_malloc_r+0xa4>
 8002ece:	6032      	str	r2, [r6, #0]
 8002ed0:	6863      	ldr	r3, [r4, #4]
 8002ed2:	6011      	str	r1, [r2, #0]
 8002ed4:	6053      	str	r3, [r2, #4]
 8002ed6:	e005      	b.n	8002ee4 <_malloc_r+0xb0>
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	e7f9      	b.n	8002ed0 <_malloc_r+0x9c>
 8002edc:	6862      	ldr	r2, [r4, #4]
 8002ede:	42a3      	cmp	r3, r4
 8002ee0:	d10e      	bne.n	8002f00 <_malloc_r+0xcc>
 8002ee2:	6032      	str	r2, [r6, #0]
 8002ee4:	0028      	movs	r0, r5
 8002ee6:	f000 f82d 	bl	8002f44 <__malloc_unlock>
 8002eea:	0020      	movs	r0, r4
 8002eec:	2207      	movs	r2, #7
 8002eee:	300b      	adds	r0, #11
 8002ef0:	1d23      	adds	r3, r4, #4
 8002ef2:	4390      	bics	r0, r2
 8002ef4:	1ac2      	subs	r2, r0, r3
 8002ef6:	4298      	cmp	r0, r3
 8002ef8:	d0df      	beq.n	8002eba <_malloc_r+0x86>
 8002efa:	1a1b      	subs	r3, r3, r0
 8002efc:	50a3      	str	r3, [r4, r2]
 8002efe:	e7dc      	b.n	8002eba <_malloc_r+0x86>
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	e7ef      	b.n	8002ee4 <_malloc_r+0xb0>
 8002f04:	0023      	movs	r3, r4
 8002f06:	6864      	ldr	r4, [r4, #4]
 8002f08:	e7a6      	b.n	8002e58 <_malloc_r+0x24>
 8002f0a:	9c00      	ldr	r4, [sp, #0]
 8002f0c:	6863      	ldr	r3, [r4, #4]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	e7ad      	b.n	8002e6e <_malloc_r+0x3a>
 8002f12:	001a      	movs	r2, r3
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	42a3      	cmp	r3, r4
 8002f18:	d1fb      	bne.n	8002f12 <_malloc_r+0xde>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e7da      	b.n	8002ed4 <_malloc_r+0xa0>
 8002f1e:	230c      	movs	r3, #12
 8002f20:	0028      	movs	r0, r5
 8002f22:	602b      	str	r3, [r5, #0]
 8002f24:	f000 f80e 	bl	8002f44 <__malloc_unlock>
 8002f28:	e7c6      	b.n	8002eb8 <_malloc_r+0x84>
 8002f2a:	6007      	str	r7, [r0, #0]
 8002f2c:	e7da      	b.n	8002ee4 <_malloc_r+0xb0>
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	20000794 	.word	0x20000794

08002f34 <__malloc_lock>:
 8002f34:	b510      	push	{r4, lr}
 8002f36:	4802      	ldr	r0, [pc, #8]	@ (8002f40 <__malloc_lock+0xc>)
 8002f38:	f000 fcab 	bl	8003892 <__retarget_lock_acquire_recursive>
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	200008d8 	.word	0x200008d8

08002f44 <__malloc_unlock>:
 8002f44:	b510      	push	{r4, lr}
 8002f46:	4802      	ldr	r0, [pc, #8]	@ (8002f50 <__malloc_unlock+0xc>)
 8002f48:	f000 fca4 	bl	8003894 <__retarget_lock_release_recursive>
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	200008d8 	.word	0x200008d8

08002f54 <_strtol_l.constprop.0>:
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	b085      	sub	sp, #20
 8002f58:	0017      	movs	r7, r2
 8002f5a:	001e      	movs	r6, r3
 8002f5c:	9003      	str	r0, [sp, #12]
 8002f5e:	9101      	str	r1, [sp, #4]
 8002f60:	2b24      	cmp	r3, #36	@ 0x24
 8002f62:	d844      	bhi.n	8002fee <_strtol_l.constprop.0+0x9a>
 8002f64:	000c      	movs	r4, r1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d041      	beq.n	8002fee <_strtol_l.constprop.0+0x9a>
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003060 <_strtol_l.constprop.0+0x10c>)
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	469c      	mov	ip, r3
 8002f70:	0023      	movs	r3, r4
 8002f72:	4661      	mov	r1, ip
 8002f74:	781d      	ldrb	r5, [r3, #0]
 8002f76:	3401      	adds	r4, #1
 8002f78:	5d48      	ldrb	r0, [r1, r5]
 8002f7a:	0001      	movs	r1, r0
 8002f7c:	4011      	ands	r1, r2
 8002f7e:	4210      	tst	r0, r2
 8002f80:	d1f6      	bne.n	8002f70 <_strtol_l.constprop.0+0x1c>
 8002f82:	2d2d      	cmp	r5, #45	@ 0x2d
 8002f84:	d13a      	bne.n	8002ffc <_strtol_l.constprop.0+0xa8>
 8002f86:	7825      	ldrb	r5, [r4, #0]
 8002f88:	1c9c      	adds	r4, r3, #2
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2210      	movs	r2, #16
 8002f90:	0033      	movs	r3, r6
 8002f92:	4393      	bics	r3, r2
 8002f94:	d109      	bne.n	8002faa <_strtol_l.constprop.0+0x56>
 8002f96:	2d30      	cmp	r5, #48	@ 0x30
 8002f98:	d136      	bne.n	8003008 <_strtol_l.constprop.0+0xb4>
 8002f9a:	2120      	movs	r1, #32
 8002f9c:	7823      	ldrb	r3, [r4, #0]
 8002f9e:	438b      	bics	r3, r1
 8002fa0:	2b58      	cmp	r3, #88	@ 0x58
 8002fa2:	d131      	bne.n	8003008 <_strtol_l.constprop.0+0xb4>
 8002fa4:	0016      	movs	r6, r2
 8002fa6:	7865      	ldrb	r5, [r4, #1]
 8002fa8:	3402      	adds	r4, #2
 8002faa:	4a2e      	ldr	r2, [pc, #184]	@ (8003064 <_strtol_l.constprop.0+0x110>)
 8002fac:	9b00      	ldr	r3, [sp, #0]
 8002fae:	4694      	mov	ip, r2
 8002fb0:	4463      	add	r3, ip
 8002fb2:	0031      	movs	r1, r6
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	9302      	str	r3, [sp, #8]
 8002fb8:	f7fd f93e 	bl	8000238 <__aeabi_uidivmod>
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4684      	mov	ip, r0
 8002fc0:	0010      	movs	r0, r2
 8002fc2:	002b      	movs	r3, r5
 8002fc4:	3b30      	subs	r3, #48	@ 0x30
 8002fc6:	2b09      	cmp	r3, #9
 8002fc8:	d825      	bhi.n	8003016 <_strtol_l.constprop.0+0xc2>
 8002fca:	001d      	movs	r5, r3
 8002fcc:	42ae      	cmp	r6, r5
 8002fce:	dd31      	ble.n	8003034 <_strtol_l.constprop.0+0xe0>
 8002fd0:	1c53      	adds	r3, r2, #1
 8002fd2:	d009      	beq.n	8002fe8 <_strtol_l.constprop.0+0x94>
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4252      	negs	r2, r2
 8002fd8:	4584      	cmp	ip, r0
 8002fda:	d305      	bcc.n	8002fe8 <_strtol_l.constprop.0+0x94>
 8002fdc:	d101      	bne.n	8002fe2 <_strtol_l.constprop.0+0x8e>
 8002fde:	42a9      	cmp	r1, r5
 8002fe0:	db25      	blt.n	800302e <_strtol_l.constprop.0+0xda>
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4370      	muls	r0, r6
 8002fe6:	1828      	adds	r0, r5, r0
 8002fe8:	7825      	ldrb	r5, [r4, #0]
 8002fea:	3401      	adds	r4, #1
 8002fec:	e7e9      	b.n	8002fc2 <_strtol_l.constprop.0+0x6e>
 8002fee:	f000 fc25 	bl	800383c <__errno>
 8002ff2:	2316      	movs	r3, #22
 8002ff4:	6003      	str	r3, [r0, #0]
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	b005      	add	sp, #20
 8002ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffc:	9100      	str	r1, [sp, #0]
 8002ffe:	2d2b      	cmp	r5, #43	@ 0x2b
 8003000:	d1c5      	bne.n	8002f8e <_strtol_l.constprop.0+0x3a>
 8003002:	7825      	ldrb	r5, [r4, #0]
 8003004:	1c9c      	adds	r4, r3, #2
 8003006:	e7c2      	b.n	8002f8e <_strtol_l.constprop.0+0x3a>
 8003008:	2e00      	cmp	r6, #0
 800300a:	d1ce      	bne.n	8002faa <_strtol_l.constprop.0+0x56>
 800300c:	3608      	adds	r6, #8
 800300e:	2d30      	cmp	r5, #48	@ 0x30
 8003010:	d0cb      	beq.n	8002faa <_strtol_l.constprop.0+0x56>
 8003012:	3602      	adds	r6, #2
 8003014:	e7c9      	b.n	8002faa <_strtol_l.constprop.0+0x56>
 8003016:	002b      	movs	r3, r5
 8003018:	3b41      	subs	r3, #65	@ 0x41
 800301a:	2b19      	cmp	r3, #25
 800301c:	d801      	bhi.n	8003022 <_strtol_l.constprop.0+0xce>
 800301e:	3d37      	subs	r5, #55	@ 0x37
 8003020:	e7d4      	b.n	8002fcc <_strtol_l.constprop.0+0x78>
 8003022:	002b      	movs	r3, r5
 8003024:	3b61      	subs	r3, #97	@ 0x61
 8003026:	2b19      	cmp	r3, #25
 8003028:	d804      	bhi.n	8003034 <_strtol_l.constprop.0+0xe0>
 800302a:	3d57      	subs	r5, #87	@ 0x57
 800302c:	e7ce      	b.n	8002fcc <_strtol_l.constprop.0+0x78>
 800302e:	2201      	movs	r2, #1
 8003030:	4252      	negs	r2, r2
 8003032:	e7d9      	b.n	8002fe8 <_strtol_l.constprop.0+0x94>
 8003034:	1c53      	adds	r3, r2, #1
 8003036:	d108      	bne.n	800304a <_strtol_l.constprop.0+0xf6>
 8003038:	2322      	movs	r3, #34	@ 0x22
 800303a:	9a03      	ldr	r2, [sp, #12]
 800303c:	9802      	ldr	r0, [sp, #8]
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	2f00      	cmp	r7, #0
 8003042:	d0d9      	beq.n	8002ff8 <_strtol_l.constprop.0+0xa4>
 8003044:	1e63      	subs	r3, r4, #1
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	e007      	b.n	800305a <_strtol_l.constprop.0+0x106>
 800304a:	9b00      	ldr	r3, [sp, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d000      	beq.n	8003052 <_strtol_l.constprop.0+0xfe>
 8003050:	4240      	negs	r0, r0
 8003052:	2f00      	cmp	r7, #0
 8003054:	d0d0      	beq.n	8002ff8 <_strtol_l.constprop.0+0xa4>
 8003056:	2a00      	cmp	r2, #0
 8003058:	d1f4      	bne.n	8003044 <_strtol_l.constprop.0+0xf0>
 800305a:	9b01      	ldr	r3, [sp, #4]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	e7cb      	b.n	8002ff8 <_strtol_l.constprop.0+0xa4>
 8003060:	080052f5 	.word	0x080052f5
 8003064:	7fffffff 	.word	0x7fffffff

08003068 <strtol>:
 8003068:	b510      	push	{r4, lr}
 800306a:	4c04      	ldr	r4, [pc, #16]	@ (800307c <strtol+0x14>)
 800306c:	0013      	movs	r3, r2
 800306e:	000a      	movs	r2, r1
 8003070:	0001      	movs	r1, r0
 8003072:	6820      	ldr	r0, [r4, #0]
 8003074:	f7ff ff6e 	bl	8002f54 <_strtol_l.constprop.0>
 8003078:	bd10      	pop	{r4, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	20000028 	.word	0x20000028

08003080 <std>:
 8003080:	2300      	movs	r3, #0
 8003082:	b510      	push	{r4, lr}
 8003084:	0004      	movs	r4, r0
 8003086:	6003      	str	r3, [r0, #0]
 8003088:	6043      	str	r3, [r0, #4]
 800308a:	6083      	str	r3, [r0, #8]
 800308c:	8181      	strh	r1, [r0, #12]
 800308e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003090:	81c2      	strh	r2, [r0, #14]
 8003092:	6103      	str	r3, [r0, #16]
 8003094:	6143      	str	r3, [r0, #20]
 8003096:	6183      	str	r3, [r0, #24]
 8003098:	0019      	movs	r1, r3
 800309a:	2208      	movs	r2, #8
 800309c:	305c      	adds	r0, #92	@ 0x5c
 800309e:	f000 fad9 	bl	8003654 <memset>
 80030a2:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <std+0x50>)
 80030a4:	6224      	str	r4, [r4, #32]
 80030a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80030a8:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <std+0x54>)
 80030aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030ac:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <std+0x58>)
 80030ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030b0:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <std+0x5c>)
 80030b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80030b4:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <std+0x60>)
 80030b6:	429c      	cmp	r4, r3
 80030b8:	d005      	beq.n	80030c6 <std+0x46>
 80030ba:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <std+0x64>)
 80030bc:	429c      	cmp	r4, r3
 80030be:	d002      	beq.n	80030c6 <std+0x46>
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <std+0x68>)
 80030c2:	429c      	cmp	r4, r3
 80030c4:	d103      	bne.n	80030ce <std+0x4e>
 80030c6:	0020      	movs	r0, r4
 80030c8:	3058      	adds	r0, #88	@ 0x58
 80030ca:	f000 fbe1 	bl	8003890 <__retarget_lock_init_recursive>
 80030ce:	bd10      	pop	{r4, pc}
 80030d0:	0800347d 	.word	0x0800347d
 80030d4:	080034a5 	.word	0x080034a5
 80030d8:	080034dd 	.word	0x080034dd
 80030dc:	08003509 	.word	0x08003509
 80030e0:	20000798 	.word	0x20000798
 80030e4:	20000800 	.word	0x20000800
 80030e8:	20000868 	.word	0x20000868

080030ec <stdio_exit_handler>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4a03      	ldr	r2, [pc, #12]	@ (80030fc <stdio_exit_handler+0x10>)
 80030f0:	4903      	ldr	r1, [pc, #12]	@ (8003100 <stdio_exit_handler+0x14>)
 80030f2:	4804      	ldr	r0, [pc, #16]	@ (8003104 <stdio_exit_handler+0x18>)
 80030f4:	f000 f86c 	bl	80031d0 <_fwalk_sglue>
 80030f8:	bd10      	pop	{r4, pc}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	2000001c 	.word	0x2000001c
 8003100:	08004009 	.word	0x08004009
 8003104:	2000002c 	.word	0x2000002c

08003108 <cleanup_stdio>:
 8003108:	6841      	ldr	r1, [r0, #4]
 800310a:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <cleanup_stdio+0x30>)
 800310c:	b510      	push	{r4, lr}
 800310e:	0004      	movs	r4, r0
 8003110:	4299      	cmp	r1, r3
 8003112:	d001      	beq.n	8003118 <cleanup_stdio+0x10>
 8003114:	f000 ff78 	bl	8004008 <_fflush_r>
 8003118:	68a1      	ldr	r1, [r4, #8]
 800311a:	4b08      	ldr	r3, [pc, #32]	@ (800313c <cleanup_stdio+0x34>)
 800311c:	4299      	cmp	r1, r3
 800311e:	d002      	beq.n	8003126 <cleanup_stdio+0x1e>
 8003120:	0020      	movs	r0, r4
 8003122:	f000 ff71 	bl	8004008 <_fflush_r>
 8003126:	68e1      	ldr	r1, [r4, #12]
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <cleanup_stdio+0x38>)
 800312a:	4299      	cmp	r1, r3
 800312c:	d002      	beq.n	8003134 <cleanup_stdio+0x2c>
 800312e:	0020      	movs	r0, r4
 8003130:	f000 ff6a 	bl	8004008 <_fflush_r>
 8003134:	bd10      	pop	{r4, pc}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	20000798 	.word	0x20000798
 800313c:	20000800 	.word	0x20000800
 8003140:	20000868 	.word	0x20000868

08003144 <global_stdio_init.part.0>:
 8003144:	b510      	push	{r4, lr}
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <global_stdio_init.part.0+0x28>)
 8003148:	4a09      	ldr	r2, [pc, #36]	@ (8003170 <global_stdio_init.part.0+0x2c>)
 800314a:	2104      	movs	r1, #4
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	4809      	ldr	r0, [pc, #36]	@ (8003174 <global_stdio_init.part.0+0x30>)
 8003150:	2200      	movs	r2, #0
 8003152:	f7ff ff95 	bl	8003080 <std>
 8003156:	2201      	movs	r2, #1
 8003158:	2109      	movs	r1, #9
 800315a:	4807      	ldr	r0, [pc, #28]	@ (8003178 <global_stdio_init.part.0+0x34>)
 800315c:	f7ff ff90 	bl	8003080 <std>
 8003160:	2202      	movs	r2, #2
 8003162:	2112      	movs	r1, #18
 8003164:	4805      	ldr	r0, [pc, #20]	@ (800317c <global_stdio_init.part.0+0x38>)
 8003166:	f7ff ff8b 	bl	8003080 <std>
 800316a:	bd10      	pop	{r4, pc}
 800316c:	200008d0 	.word	0x200008d0
 8003170:	080030ed 	.word	0x080030ed
 8003174:	20000798 	.word	0x20000798
 8003178:	20000800 	.word	0x20000800
 800317c:	20000868 	.word	0x20000868

08003180 <__sfp_lock_acquire>:
 8003180:	b510      	push	{r4, lr}
 8003182:	4802      	ldr	r0, [pc, #8]	@ (800318c <__sfp_lock_acquire+0xc>)
 8003184:	f000 fb85 	bl	8003892 <__retarget_lock_acquire_recursive>
 8003188:	bd10      	pop	{r4, pc}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	200008d9 	.word	0x200008d9

08003190 <__sfp_lock_release>:
 8003190:	b510      	push	{r4, lr}
 8003192:	4802      	ldr	r0, [pc, #8]	@ (800319c <__sfp_lock_release+0xc>)
 8003194:	f000 fb7e 	bl	8003894 <__retarget_lock_release_recursive>
 8003198:	bd10      	pop	{r4, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	200008d9 	.word	0x200008d9

080031a0 <__sinit>:
 80031a0:	b510      	push	{r4, lr}
 80031a2:	0004      	movs	r4, r0
 80031a4:	f7ff ffec 	bl	8003180 <__sfp_lock_acquire>
 80031a8:	6a23      	ldr	r3, [r4, #32]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <__sinit+0x14>
 80031ae:	f7ff ffef 	bl	8003190 <__sfp_lock_release>
 80031b2:	bd10      	pop	{r4, pc}
 80031b4:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <__sinit+0x28>)
 80031b6:	6223      	str	r3, [r4, #32]
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <__sinit+0x2c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f6      	bne.n	80031ae <__sinit+0xe>
 80031c0:	f7ff ffc0 	bl	8003144 <global_stdio_init.part.0>
 80031c4:	e7f3      	b.n	80031ae <__sinit+0xe>
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	08003109 	.word	0x08003109
 80031cc:	200008d0 	.word	0x200008d0

080031d0 <_fwalk_sglue>:
 80031d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031d2:	0014      	movs	r4, r2
 80031d4:	2600      	movs	r6, #0
 80031d6:	9000      	str	r0, [sp, #0]
 80031d8:	9101      	str	r1, [sp, #4]
 80031da:	68a5      	ldr	r5, [r4, #8]
 80031dc:	6867      	ldr	r7, [r4, #4]
 80031de:	3f01      	subs	r7, #1
 80031e0:	d504      	bpl.n	80031ec <_fwalk_sglue+0x1c>
 80031e2:	6824      	ldr	r4, [r4, #0]
 80031e4:	2c00      	cmp	r4, #0
 80031e6:	d1f8      	bne.n	80031da <_fwalk_sglue+0xa>
 80031e8:	0030      	movs	r0, r6
 80031ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031ec:	89ab      	ldrh	r3, [r5, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d908      	bls.n	8003204 <_fwalk_sglue+0x34>
 80031f2:	220e      	movs	r2, #14
 80031f4:	5eab      	ldrsh	r3, [r5, r2]
 80031f6:	3301      	adds	r3, #1
 80031f8:	d004      	beq.n	8003204 <_fwalk_sglue+0x34>
 80031fa:	0029      	movs	r1, r5
 80031fc:	9800      	ldr	r0, [sp, #0]
 80031fe:	9b01      	ldr	r3, [sp, #4]
 8003200:	4798      	blx	r3
 8003202:	4306      	orrs	r6, r0
 8003204:	3568      	adds	r5, #104	@ 0x68
 8003206:	e7ea      	b.n	80031de <_fwalk_sglue+0xe>

08003208 <getchar>:
 8003208:	b510      	push	{r4, lr}
 800320a:	4b03      	ldr	r3, [pc, #12]	@ (8003218 <getchar+0x10>)
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	6841      	ldr	r1, [r0, #4]
 8003210:	f000 ff36 	bl	8004080 <_getc_r>
 8003214:	bd10      	pop	{r4, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	20000028 	.word	0x20000028

0800321c <iprintf>:
 800321c:	b40f      	push	{r0, r1, r2, r3}
 800321e:	b507      	push	{r0, r1, r2, lr}
 8003220:	4905      	ldr	r1, [pc, #20]	@ (8003238 <iprintf+0x1c>)
 8003222:	ab04      	add	r3, sp, #16
 8003224:	6808      	ldr	r0, [r1, #0]
 8003226:	cb04      	ldmia	r3!, {r2}
 8003228:	6881      	ldr	r1, [r0, #8]
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	f000 fbcc 	bl	80039c8 <_vfiprintf_r>
 8003230:	b003      	add	sp, #12
 8003232:	bc08      	pop	{r3}
 8003234:	b004      	add	sp, #16
 8003236:	4718      	bx	r3
 8003238:	20000028 	.word	0x20000028

0800323c <putchar>:
 800323c:	b510      	push	{r4, lr}
 800323e:	4b03      	ldr	r3, [pc, #12]	@ (800324c <putchar+0x10>)
 8003240:	0001      	movs	r1, r0
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	6882      	ldr	r2, [r0, #8]
 8003246:	f000 ffb4 	bl	80041b2 <_putc_r>
 800324a:	bd10      	pop	{r4, pc}
 800324c:	20000028 	.word	0x20000028

08003250 <_puts_r>:
 8003250:	6a03      	ldr	r3, [r0, #32]
 8003252:	b570      	push	{r4, r5, r6, lr}
 8003254:	0005      	movs	r5, r0
 8003256:	000e      	movs	r6, r1
 8003258:	6884      	ldr	r4, [r0, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <_puts_r+0x12>
 800325e:	f7ff ff9f 	bl	80031a0 <__sinit>
 8003262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003264:	07db      	lsls	r3, r3, #31
 8003266:	d405      	bmi.n	8003274 <_puts_r+0x24>
 8003268:	89a3      	ldrh	r3, [r4, #12]
 800326a:	059b      	lsls	r3, r3, #22
 800326c:	d402      	bmi.n	8003274 <_puts_r+0x24>
 800326e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003270:	f000 fb0f 	bl	8003892 <__retarget_lock_acquire_recursive>
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	071b      	lsls	r3, r3, #28
 8003278:	d502      	bpl.n	8003280 <_puts_r+0x30>
 800327a:	6923      	ldr	r3, [r4, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11f      	bne.n	80032c0 <_puts_r+0x70>
 8003280:	0021      	movs	r1, r4
 8003282:	0028      	movs	r0, r5
 8003284:	f000 f988 	bl	8003598 <__swsetup_r>
 8003288:	2800      	cmp	r0, #0
 800328a:	d019      	beq.n	80032c0 <_puts_r+0x70>
 800328c:	2501      	movs	r5, #1
 800328e:	426d      	negs	r5, r5
 8003290:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003292:	07db      	lsls	r3, r3, #31
 8003294:	d405      	bmi.n	80032a2 <_puts_r+0x52>
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	059b      	lsls	r3, r3, #22
 800329a:	d402      	bmi.n	80032a2 <_puts_r+0x52>
 800329c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800329e:	f000 faf9 	bl	8003894 <__retarget_lock_release_recursive>
 80032a2:	0028      	movs	r0, r5
 80032a4:	bd70      	pop	{r4, r5, r6, pc}
 80032a6:	3601      	adds	r6, #1
 80032a8:	60a3      	str	r3, [r4, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	da04      	bge.n	80032b8 <_puts_r+0x68>
 80032ae:	69a2      	ldr	r2, [r4, #24]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	dc16      	bgt.n	80032e2 <_puts_r+0x92>
 80032b4:	290a      	cmp	r1, #10
 80032b6:	d014      	beq.n	80032e2 <_puts_r+0x92>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	6022      	str	r2, [r4, #0]
 80032be:	7019      	strb	r1, [r3, #0]
 80032c0:	68a3      	ldr	r3, [r4, #8]
 80032c2:	7831      	ldrb	r1, [r6, #0]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	2900      	cmp	r1, #0
 80032c8:	d1ed      	bne.n	80032a6 <_puts_r+0x56>
 80032ca:	60a3      	str	r3, [r4, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	da0f      	bge.n	80032f0 <_puts_r+0xa0>
 80032d0:	0022      	movs	r2, r4
 80032d2:	0028      	movs	r0, r5
 80032d4:	310a      	adds	r1, #10
 80032d6:	f000 f91d 	bl	8003514 <__swbuf_r>
 80032da:	3001      	adds	r0, #1
 80032dc:	d0d6      	beq.n	800328c <_puts_r+0x3c>
 80032de:	250a      	movs	r5, #10
 80032e0:	e7d6      	b.n	8003290 <_puts_r+0x40>
 80032e2:	0022      	movs	r2, r4
 80032e4:	0028      	movs	r0, r5
 80032e6:	f000 f915 	bl	8003514 <__swbuf_r>
 80032ea:	3001      	adds	r0, #1
 80032ec:	d1e8      	bne.n	80032c0 <_puts_r+0x70>
 80032ee:	e7cd      	b.n	800328c <_puts_r+0x3c>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	6022      	str	r2, [r4, #0]
 80032f6:	220a      	movs	r2, #10
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e7f0      	b.n	80032de <_puts_r+0x8e>

080032fc <puts>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	4b03      	ldr	r3, [pc, #12]	@ (800330c <puts+0x10>)
 8003300:	0001      	movs	r1, r0
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	f7ff ffa4 	bl	8003250 <_puts_r>
 8003308:	bd10      	pop	{r4, pc}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	20000028 	.word	0x20000028

08003310 <setvbuf>:
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	001d      	movs	r5, r3
 8003314:	4b57      	ldr	r3, [pc, #348]	@ (8003474 <setvbuf+0x164>)
 8003316:	b085      	sub	sp, #20
 8003318:	681e      	ldr	r6, [r3, #0]
 800331a:	0004      	movs	r4, r0
 800331c:	000f      	movs	r7, r1
 800331e:	9200      	str	r2, [sp, #0]
 8003320:	2e00      	cmp	r6, #0
 8003322:	d005      	beq.n	8003330 <setvbuf+0x20>
 8003324:	6a33      	ldr	r3, [r6, #32]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <setvbuf+0x20>
 800332a:	0030      	movs	r0, r6
 800332c:	f7ff ff38 	bl	80031a0 <__sinit>
 8003330:	9b00      	ldr	r3, [sp, #0]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d005      	beq.n	8003342 <setvbuf+0x32>
 8003336:	2b01      	cmp	r3, #1
 8003338:	d900      	bls.n	800333c <setvbuf+0x2c>
 800333a:	e097      	b.n	800346c <setvbuf+0x15c>
 800333c:	2d00      	cmp	r5, #0
 800333e:	da00      	bge.n	8003342 <setvbuf+0x32>
 8003340:	e094      	b.n	800346c <setvbuf+0x15c>
 8003342:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003344:	07db      	lsls	r3, r3, #31
 8003346:	d405      	bmi.n	8003354 <setvbuf+0x44>
 8003348:	89a3      	ldrh	r3, [r4, #12]
 800334a:	059b      	lsls	r3, r3, #22
 800334c:	d402      	bmi.n	8003354 <setvbuf+0x44>
 800334e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003350:	f000 fa9f 	bl	8003892 <__retarget_lock_acquire_recursive>
 8003354:	0021      	movs	r1, r4
 8003356:	0030      	movs	r0, r6
 8003358:	f000 fe56 	bl	8004008 <_fflush_r>
 800335c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800335e:	2900      	cmp	r1, #0
 8003360:	d008      	beq.n	8003374 <setvbuf+0x64>
 8003362:	0023      	movs	r3, r4
 8003364:	3344      	adds	r3, #68	@ 0x44
 8003366:	4299      	cmp	r1, r3
 8003368:	d002      	beq.n	8003370 <setvbuf+0x60>
 800336a:	0030      	movs	r0, r6
 800336c:	f000 faba 	bl	80038e4 <_free_r>
 8003370:	2300      	movs	r3, #0
 8003372:	6363      	str	r3, [r4, #52]	@ 0x34
 8003374:	2300      	movs	r3, #0
 8003376:	61a3      	str	r3, [r4, #24]
 8003378:	6063      	str	r3, [r4, #4]
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	d503      	bpl.n	8003388 <setvbuf+0x78>
 8003380:	0030      	movs	r0, r6
 8003382:	6921      	ldr	r1, [r4, #16]
 8003384:	f000 faae 	bl	80038e4 <_free_r>
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	4a3b      	ldr	r2, [pc, #236]	@ (8003478 <setvbuf+0x168>)
 800338c:	4013      	ands	r3, r2
 800338e:	81a3      	strh	r3, [r4, #12]
 8003390:	9b00      	ldr	r3, [sp, #0]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d060      	beq.n	8003458 <setvbuf+0x148>
 8003396:	ab03      	add	r3, sp, #12
 8003398:	0021      	movs	r1, r4
 800339a:	0030      	movs	r0, r6
 800339c:	aa02      	add	r2, sp, #8
 800339e:	f000 fe9d 	bl	80040dc <__swhatbuf_r>
 80033a2:	89a3      	ldrh	r3, [r4, #12]
 80033a4:	4303      	orrs	r3, r0
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	d124      	bne.n	80033f6 <setvbuf+0xe6>
 80033ac:	9d02      	ldr	r5, [sp, #8]
 80033ae:	0028      	movs	r0, r5
 80033b0:	f7ff fd0a 	bl	8002dc8 <malloc>
 80033b4:	9501      	str	r5, [sp, #4]
 80033b6:	1e07      	subs	r7, r0, #0
 80033b8:	d148      	bne.n	800344c <setvbuf+0x13c>
 80033ba:	9b02      	ldr	r3, [sp, #8]
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	42ab      	cmp	r3, r5
 80033c0:	d13f      	bne.n	8003442 <setvbuf+0x132>
 80033c2:	2501      	movs	r5, #1
 80033c4:	426d      	negs	r5, r5
 80033c6:	220c      	movs	r2, #12
 80033c8:	5ea3      	ldrsh	r3, [r4, r2]
 80033ca:	2202      	movs	r2, #2
 80033cc:	431a      	orrs	r2, r3
 80033ce:	81a2      	strh	r2, [r4, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	60a2      	str	r2, [r4, #8]
 80033d4:	0022      	movs	r2, r4
 80033d6:	3247      	adds	r2, #71	@ 0x47
 80033d8:	6022      	str	r2, [r4, #0]
 80033da:	6122      	str	r2, [r4, #16]
 80033dc:	2201      	movs	r2, #1
 80033de:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80033e0:	6162      	str	r2, [r4, #20]
 80033e2:	4211      	tst	r1, r2
 80033e4:	d104      	bne.n	80033f0 <setvbuf+0xe0>
 80033e6:	059b      	lsls	r3, r3, #22
 80033e8:	d402      	bmi.n	80033f0 <setvbuf+0xe0>
 80033ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ec:	f000 fa52 	bl	8003894 <__retarget_lock_release_recursive>
 80033f0:	0028      	movs	r0, r5
 80033f2:	b005      	add	sp, #20
 80033f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033f6:	2f00      	cmp	r7, #0
 80033f8:	d0d9      	beq.n	80033ae <setvbuf+0x9e>
 80033fa:	6a33      	ldr	r3, [r6, #32]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <setvbuf+0xf6>
 8003400:	0030      	movs	r0, r6
 8003402:	f7ff fecd 	bl	80031a0 <__sinit>
 8003406:	9b00      	ldr	r3, [sp, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d103      	bne.n	8003414 <setvbuf+0x104>
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	9a00      	ldr	r2, [sp, #0]
 8003410:	431a      	orrs	r2, r3
 8003412:	81a2      	strh	r2, [r4, #12]
 8003414:	220c      	movs	r2, #12
 8003416:	5ea3      	ldrsh	r3, [r4, r2]
 8003418:	2208      	movs	r2, #8
 800341a:	0019      	movs	r1, r3
 800341c:	6027      	str	r7, [r4, #0]
 800341e:	6127      	str	r7, [r4, #16]
 8003420:	6165      	str	r5, [r4, #20]
 8003422:	4011      	ands	r1, r2
 8003424:	4213      	tst	r3, r2
 8003426:	d01b      	beq.n	8003460 <setvbuf+0x150>
 8003428:	07da      	lsls	r2, r3, #31
 800342a:	d517      	bpl.n	800345c <setvbuf+0x14c>
 800342c:	2200      	movs	r2, #0
 800342e:	426d      	negs	r5, r5
 8003430:	60a2      	str	r2, [r4, #8]
 8003432:	61a5      	str	r5, [r4, #24]
 8003434:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003436:	07d2      	lsls	r2, r2, #31
 8003438:	d401      	bmi.n	800343e <setvbuf+0x12e>
 800343a:	059b      	lsls	r3, r3, #22
 800343c:	d512      	bpl.n	8003464 <setvbuf+0x154>
 800343e:	2500      	movs	r5, #0
 8003440:	e7d6      	b.n	80033f0 <setvbuf+0xe0>
 8003442:	9801      	ldr	r0, [sp, #4]
 8003444:	f7ff fcc0 	bl	8002dc8 <malloc>
 8003448:	1e07      	subs	r7, r0, #0
 800344a:	d0ba      	beq.n	80033c2 <setvbuf+0xb2>
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	89a2      	ldrh	r2, [r4, #12]
 8003450:	9d01      	ldr	r5, [sp, #4]
 8003452:	4313      	orrs	r3, r2
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	e7d0      	b.n	80033fa <setvbuf+0xea>
 8003458:	2500      	movs	r5, #0
 800345a:	e7b4      	b.n	80033c6 <setvbuf+0xb6>
 800345c:	60a5      	str	r5, [r4, #8]
 800345e:	e7e9      	b.n	8003434 <setvbuf+0x124>
 8003460:	60a1      	str	r1, [r4, #8]
 8003462:	e7e7      	b.n	8003434 <setvbuf+0x124>
 8003464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003466:	f000 fa15 	bl	8003894 <__retarget_lock_release_recursive>
 800346a:	e7e8      	b.n	800343e <setvbuf+0x12e>
 800346c:	2501      	movs	r5, #1
 800346e:	426d      	negs	r5, r5
 8003470:	e7be      	b.n	80033f0 <setvbuf+0xe0>
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	20000028 	.word	0x20000028
 8003478:	fffff35c 	.word	0xfffff35c

0800347c <__sread>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	000c      	movs	r4, r1
 8003480:	250e      	movs	r5, #14
 8003482:	5f49      	ldrsh	r1, [r1, r5]
 8003484:	f000 f9a0 	bl	80037c8 <_read_r>
 8003488:	2800      	cmp	r0, #0
 800348a:	db03      	blt.n	8003494 <__sread+0x18>
 800348c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800348e:	181b      	adds	r3, r3, r0
 8003490:	6563      	str	r3, [r4, #84]	@ 0x54
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	89a3      	ldrh	r3, [r4, #12]
 8003496:	4a02      	ldr	r2, [pc, #8]	@ (80034a0 <__sread+0x24>)
 8003498:	4013      	ands	r3, r2
 800349a:	81a3      	strh	r3, [r4, #12]
 800349c:	e7f9      	b.n	8003492 <__sread+0x16>
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	ffffefff 	.word	0xffffefff

080034a4 <__swrite>:
 80034a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a6:	001f      	movs	r7, r3
 80034a8:	898b      	ldrh	r3, [r1, #12]
 80034aa:	0005      	movs	r5, r0
 80034ac:	000c      	movs	r4, r1
 80034ae:	0016      	movs	r6, r2
 80034b0:	05db      	lsls	r3, r3, #23
 80034b2:	d505      	bpl.n	80034c0 <__swrite+0x1c>
 80034b4:	230e      	movs	r3, #14
 80034b6:	5ec9      	ldrsh	r1, [r1, r3]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2302      	movs	r3, #2
 80034bc:	f000 f970 	bl	80037a0 <_lseek_r>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	4a05      	ldr	r2, [pc, #20]	@ (80034d8 <__swrite+0x34>)
 80034c4:	0028      	movs	r0, r5
 80034c6:	4013      	ands	r3, r2
 80034c8:	81a3      	strh	r3, [r4, #12]
 80034ca:	0032      	movs	r2, r6
 80034cc:	230e      	movs	r3, #14
 80034ce:	5ee1      	ldrsh	r1, [r4, r3]
 80034d0:	003b      	movs	r3, r7
 80034d2:	f000 f99f 	bl	8003814 <_write_r>
 80034d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d8:	ffffefff 	.word	0xffffefff

080034dc <__sseek>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	000c      	movs	r4, r1
 80034e0:	250e      	movs	r5, #14
 80034e2:	5f49      	ldrsh	r1, [r1, r5]
 80034e4:	f000 f95c 	bl	80037a0 <_lseek_r>
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	1c42      	adds	r2, r0, #1
 80034ec:	d103      	bne.n	80034f6 <__sseek+0x1a>
 80034ee:	4a05      	ldr	r2, [pc, #20]	@ (8003504 <__sseek+0x28>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	81a3      	strh	r3, [r4, #12]
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
 80034f6:	2280      	movs	r2, #128	@ 0x80
 80034f8:	0152      	lsls	r2, r2, #5
 80034fa:	4313      	orrs	r3, r2
 80034fc:	81a3      	strh	r3, [r4, #12]
 80034fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003500:	e7f8      	b.n	80034f4 <__sseek+0x18>
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	ffffefff 	.word	0xffffefff

08003508 <__sclose>:
 8003508:	b510      	push	{r4, lr}
 800350a:	230e      	movs	r3, #14
 800350c:	5ec9      	ldrsh	r1, [r1, r3]
 800350e:	f000 f935 	bl	800377c <_close_r>
 8003512:	bd10      	pop	{r4, pc}

08003514 <__swbuf_r>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	0006      	movs	r6, r0
 8003518:	000d      	movs	r5, r1
 800351a:	0014      	movs	r4, r2
 800351c:	2800      	cmp	r0, #0
 800351e:	d004      	beq.n	800352a <__swbuf_r+0x16>
 8003520:	6a03      	ldr	r3, [r0, #32]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <__swbuf_r+0x16>
 8003526:	f7ff fe3b 	bl	80031a0 <__sinit>
 800352a:	69a3      	ldr	r3, [r4, #24]
 800352c:	60a3      	str	r3, [r4, #8]
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	071b      	lsls	r3, r3, #28
 8003532:	d502      	bpl.n	800353a <__swbuf_r+0x26>
 8003534:	6923      	ldr	r3, [r4, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <__swbuf_r+0x3a>
 800353a:	0021      	movs	r1, r4
 800353c:	0030      	movs	r0, r6
 800353e:	f000 f82b 	bl	8003598 <__swsetup_r>
 8003542:	2800      	cmp	r0, #0
 8003544:	d003      	beq.n	800354e <__swbuf_r+0x3a>
 8003546:	2501      	movs	r5, #1
 8003548:	426d      	negs	r5, r5
 800354a:	0028      	movs	r0, r5
 800354c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800354e:	6923      	ldr	r3, [r4, #16]
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	b2ef      	uxtb	r7, r5
 8003554:	1ac0      	subs	r0, r0, r3
 8003556:	6963      	ldr	r3, [r4, #20]
 8003558:	b2ed      	uxtb	r5, r5
 800355a:	4283      	cmp	r3, r0
 800355c:	dc05      	bgt.n	800356a <__swbuf_r+0x56>
 800355e:	0021      	movs	r1, r4
 8003560:	0030      	movs	r0, r6
 8003562:	f000 fd51 	bl	8004008 <_fflush_r>
 8003566:	2800      	cmp	r0, #0
 8003568:	d1ed      	bne.n	8003546 <__swbuf_r+0x32>
 800356a:	68a3      	ldr	r3, [r4, #8]
 800356c:	3001      	adds	r0, #1
 800356e:	3b01      	subs	r3, #1
 8003570:	60a3      	str	r3, [r4, #8]
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	6022      	str	r2, [r4, #0]
 8003578:	701f      	strb	r7, [r3, #0]
 800357a:	6963      	ldr	r3, [r4, #20]
 800357c:	4283      	cmp	r3, r0
 800357e:	d004      	beq.n	800358a <__swbuf_r+0x76>
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	07db      	lsls	r3, r3, #31
 8003584:	d5e1      	bpl.n	800354a <__swbuf_r+0x36>
 8003586:	2d0a      	cmp	r5, #10
 8003588:	d1df      	bne.n	800354a <__swbuf_r+0x36>
 800358a:	0021      	movs	r1, r4
 800358c:	0030      	movs	r0, r6
 800358e:	f000 fd3b 	bl	8004008 <_fflush_r>
 8003592:	2800      	cmp	r0, #0
 8003594:	d0d9      	beq.n	800354a <__swbuf_r+0x36>
 8003596:	e7d6      	b.n	8003546 <__swbuf_r+0x32>

08003598 <__swsetup_r>:
 8003598:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <__swsetup_r+0xb8>)
 800359a:	b570      	push	{r4, r5, r6, lr}
 800359c:	0005      	movs	r5, r0
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	000c      	movs	r4, r1
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d004      	beq.n	80035b0 <__swsetup_r+0x18>
 80035a6:	6a03      	ldr	r3, [r0, #32]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <__swsetup_r+0x18>
 80035ac:	f7ff fdf8 	bl	80031a0 <__sinit>
 80035b0:	230c      	movs	r3, #12
 80035b2:	5ee2      	ldrsh	r2, [r4, r3]
 80035b4:	0713      	lsls	r3, r2, #28
 80035b6:	d423      	bmi.n	8003600 <__swsetup_r+0x68>
 80035b8:	06d3      	lsls	r3, r2, #27
 80035ba:	d407      	bmi.n	80035cc <__swsetup_r+0x34>
 80035bc:	2309      	movs	r3, #9
 80035be:	602b      	str	r3, [r5, #0]
 80035c0:	2340      	movs	r3, #64	@ 0x40
 80035c2:	2001      	movs	r0, #1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	81a3      	strh	r3, [r4, #12]
 80035c8:	4240      	negs	r0, r0
 80035ca:	e03a      	b.n	8003642 <__swsetup_r+0xaa>
 80035cc:	0752      	lsls	r2, r2, #29
 80035ce:	d513      	bpl.n	80035f8 <__swsetup_r+0x60>
 80035d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035d2:	2900      	cmp	r1, #0
 80035d4:	d008      	beq.n	80035e8 <__swsetup_r+0x50>
 80035d6:	0023      	movs	r3, r4
 80035d8:	3344      	adds	r3, #68	@ 0x44
 80035da:	4299      	cmp	r1, r3
 80035dc:	d002      	beq.n	80035e4 <__swsetup_r+0x4c>
 80035de:	0028      	movs	r0, r5
 80035e0:	f000 f980 	bl	80038e4 <_free_r>
 80035e4:	2300      	movs	r3, #0
 80035e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80035e8:	2224      	movs	r2, #36	@ 0x24
 80035ea:	89a3      	ldrh	r3, [r4, #12]
 80035ec:	4393      	bics	r3, r2
 80035ee:	81a3      	strh	r3, [r4, #12]
 80035f0:	2300      	movs	r3, #0
 80035f2:	6063      	str	r3, [r4, #4]
 80035f4:	6923      	ldr	r3, [r4, #16]
 80035f6:	6023      	str	r3, [r4, #0]
 80035f8:	2308      	movs	r3, #8
 80035fa:	89a2      	ldrh	r2, [r4, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	81a3      	strh	r3, [r4, #12]
 8003600:	6923      	ldr	r3, [r4, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <__swsetup_r+0x86>
 8003606:	21a0      	movs	r1, #160	@ 0xa0
 8003608:	2280      	movs	r2, #128	@ 0x80
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	0089      	lsls	r1, r1, #2
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	400b      	ands	r3, r1
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <__swsetup_r+0x86>
 8003616:	0021      	movs	r1, r4
 8003618:	0028      	movs	r0, r5
 800361a:	f000 fd89 	bl	8004130 <__smakebuf_r>
 800361e:	230c      	movs	r3, #12
 8003620:	5ee2      	ldrsh	r2, [r4, r3]
 8003622:	2101      	movs	r1, #1
 8003624:	0013      	movs	r3, r2
 8003626:	400b      	ands	r3, r1
 8003628:	420a      	tst	r2, r1
 800362a:	d00b      	beq.n	8003644 <__swsetup_r+0xac>
 800362c:	2300      	movs	r3, #0
 800362e:	60a3      	str	r3, [r4, #8]
 8003630:	6963      	ldr	r3, [r4, #20]
 8003632:	425b      	negs	r3, r3
 8003634:	61a3      	str	r3, [r4, #24]
 8003636:	2000      	movs	r0, #0
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	4283      	cmp	r3, r0
 800363c:	d101      	bne.n	8003642 <__swsetup_r+0xaa>
 800363e:	0613      	lsls	r3, r2, #24
 8003640:	d4be      	bmi.n	80035c0 <__swsetup_r+0x28>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	0791      	lsls	r1, r2, #30
 8003646:	d400      	bmi.n	800364a <__swsetup_r+0xb2>
 8003648:	6963      	ldr	r3, [r4, #20]
 800364a:	60a3      	str	r3, [r4, #8]
 800364c:	e7f3      	b.n	8003636 <__swsetup_r+0x9e>
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	20000028 	.word	0x20000028

08003654 <memset>:
 8003654:	0003      	movs	r3, r0
 8003656:	1882      	adds	r2, r0, r2
 8003658:	4293      	cmp	r3, r2
 800365a:	d100      	bne.n	800365e <memset+0xa>
 800365c:	4770      	bx	lr
 800365e:	7019      	strb	r1, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	e7f9      	b.n	8003658 <memset+0x4>

08003664 <strcasecmp>:
 8003664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003666:	0005      	movs	r5, r0
 8003668:	2400      	movs	r4, #0
 800366a:	2703      	movs	r7, #3
 800366c:	4e09      	ldr	r6, [pc, #36]	@ (8003694 <strcasecmp+0x30>)
 800366e:	5d2a      	ldrb	r2, [r5, r4]
 8003670:	5cb3      	ldrb	r3, [r6, r2]
 8003672:	403b      	ands	r3, r7
 8003674:	2b01      	cmp	r3, #1
 8003676:	d100      	bne.n	800367a <strcasecmp+0x16>
 8003678:	3220      	adds	r2, #32
 800367a:	5d0b      	ldrb	r3, [r1, r4]
 800367c:	5cf0      	ldrb	r0, [r6, r3]
 800367e:	4038      	ands	r0, r7
 8003680:	2801      	cmp	r0, #1
 8003682:	d100      	bne.n	8003686 <strcasecmp+0x22>
 8003684:	3320      	adds	r3, #32
 8003686:	1ad0      	subs	r0, r2, r3
 8003688:	429a      	cmp	r2, r3
 800368a:	d102      	bne.n	8003692 <strcasecmp+0x2e>
 800368c:	3401      	adds	r4, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ed      	bne.n	800366e <strcasecmp+0xa>
 8003692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003694:	080052f5 	.word	0x080052f5

08003698 <strncmp>:
 8003698:	b530      	push	{r4, r5, lr}
 800369a:	0005      	movs	r5, r0
 800369c:	1e10      	subs	r0, r2, #0
 800369e:	d00b      	beq.n	80036b8 <strncmp+0x20>
 80036a0:	2400      	movs	r4, #0
 80036a2:	3a01      	subs	r2, #1
 80036a4:	5d2b      	ldrb	r3, [r5, r4]
 80036a6:	5d08      	ldrb	r0, [r1, r4]
 80036a8:	4283      	cmp	r3, r0
 80036aa:	d104      	bne.n	80036b6 <strncmp+0x1e>
 80036ac:	42a2      	cmp	r2, r4
 80036ae:	d002      	beq.n	80036b6 <strncmp+0x1e>
 80036b0:	3401      	adds	r4, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f6      	bne.n	80036a4 <strncmp+0xc>
 80036b6:	1a18      	subs	r0, r3, r0
 80036b8:	bd30      	pop	{r4, r5, pc}
	...

080036bc <strtok>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	4b16      	ldr	r3, [pc, #88]	@ (8003718 <strtok+0x5c>)
 80036c0:	0005      	movs	r5, r0
 80036c2:	681f      	ldr	r7, [r3, #0]
 80036c4:	000e      	movs	r6, r1
 80036c6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80036c8:	2c00      	cmp	r4, #0
 80036ca:	d11d      	bne.n	8003708 <strtok+0x4c>
 80036cc:	2050      	movs	r0, #80	@ 0x50
 80036ce:	f7ff fb7b 	bl	8002dc8 <malloc>
 80036d2:	1e02      	subs	r2, r0, #0
 80036d4:	6478      	str	r0, [r7, #68]	@ 0x44
 80036d6:	d104      	bne.n	80036e2 <strtok+0x26>
 80036d8:	215b      	movs	r1, #91	@ 0x5b
 80036da:	4b10      	ldr	r3, [pc, #64]	@ (800371c <strtok+0x60>)
 80036dc:	4810      	ldr	r0, [pc, #64]	@ (8003720 <strtok+0x64>)
 80036de:	f000 f8e3 	bl	80038a8 <__assert_func>
 80036e2:	6004      	str	r4, [r0, #0]
 80036e4:	6044      	str	r4, [r0, #4]
 80036e6:	6084      	str	r4, [r0, #8]
 80036e8:	60c4      	str	r4, [r0, #12]
 80036ea:	6104      	str	r4, [r0, #16]
 80036ec:	6144      	str	r4, [r0, #20]
 80036ee:	6184      	str	r4, [r0, #24]
 80036f0:	6284      	str	r4, [r0, #40]	@ 0x28
 80036f2:	62c4      	str	r4, [r0, #44]	@ 0x2c
 80036f4:	6304      	str	r4, [r0, #48]	@ 0x30
 80036f6:	6344      	str	r4, [r0, #52]	@ 0x34
 80036f8:	6384      	str	r4, [r0, #56]	@ 0x38
 80036fa:	63c4      	str	r4, [r0, #60]	@ 0x3c
 80036fc:	6404      	str	r4, [r0, #64]	@ 0x40
 80036fe:	6444      	str	r4, [r0, #68]	@ 0x44
 8003700:	6484      	str	r4, [r0, #72]	@ 0x48
 8003702:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8003704:	7704      	strb	r4, [r0, #28]
 8003706:	6244      	str	r4, [r0, #36]	@ 0x24
 8003708:	0031      	movs	r1, r6
 800370a:	0028      	movs	r0, r5
 800370c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800370e:	2301      	movs	r3, #1
 8003710:	f000 f808 	bl	8003724 <__strtok_r>
 8003714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	20000028 	.word	0x20000028
 800371c:	080053f5 	.word	0x080053f5
 8003720:	0800540c 	.word	0x0800540c

08003724 <__strtok_r>:
 8003724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003726:	1e04      	subs	r4, r0, #0
 8003728:	d102      	bne.n	8003730 <__strtok_r+0xc>
 800372a:	6814      	ldr	r4, [r2, #0]
 800372c:	2c00      	cmp	r4, #0
 800372e:	d009      	beq.n	8003744 <__strtok_r+0x20>
 8003730:	0020      	movs	r0, r4
 8003732:	000e      	movs	r6, r1
 8003734:	7805      	ldrb	r5, [r0, #0]
 8003736:	3401      	adds	r4, #1
 8003738:	7837      	ldrb	r7, [r6, #0]
 800373a:	2f00      	cmp	r7, #0
 800373c:	d104      	bne.n	8003748 <__strtok_r+0x24>
 800373e:	2d00      	cmp	r5, #0
 8003740:	d10d      	bne.n	800375e <__strtok_r+0x3a>
 8003742:	6015      	str	r5, [r2, #0]
 8003744:	2000      	movs	r0, #0
 8003746:	e006      	b.n	8003756 <__strtok_r+0x32>
 8003748:	3601      	adds	r6, #1
 800374a:	42bd      	cmp	r5, r7
 800374c:	d1f4      	bne.n	8003738 <__strtok_r+0x14>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ee      	bne.n	8003730 <__strtok_r+0xc>
 8003752:	6014      	str	r4, [r2, #0]
 8003754:	7003      	strb	r3, [r0, #0]
 8003756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003758:	3301      	adds	r3, #1
 800375a:	2d00      	cmp	r5, #0
 800375c:	d102      	bne.n	8003764 <__strtok_r+0x40>
 800375e:	000b      	movs	r3, r1
 8003760:	7826      	ldrb	r6, [r4, #0]
 8003762:	3401      	adds	r4, #1
 8003764:	781d      	ldrb	r5, [r3, #0]
 8003766:	42ae      	cmp	r6, r5
 8003768:	d1f6      	bne.n	8003758 <__strtok_r+0x34>
 800376a:	2300      	movs	r3, #0
 800376c:	001d      	movs	r5, r3
 800376e:	429e      	cmp	r6, r3
 8003770:	d002      	beq.n	8003778 <__strtok_r+0x54>
 8003772:	0023      	movs	r3, r4
 8003774:	1e61      	subs	r1, r4, #1
 8003776:	700d      	strb	r5, [r1, #0]
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e7ec      	b.n	8003756 <__strtok_r+0x32>

0800377c <_close_r>:
 800377c:	2300      	movs	r3, #0
 800377e:	b570      	push	{r4, r5, r6, lr}
 8003780:	4d06      	ldr	r5, [pc, #24]	@ (800379c <_close_r+0x20>)
 8003782:	0004      	movs	r4, r0
 8003784:	0008      	movs	r0, r1
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	f7fe fdb2 	bl	80022f0 <_close>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d103      	bne.n	8003798 <_close_r+0x1c>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d000      	beq.n	8003798 <_close_r+0x1c>
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	bd70      	pop	{r4, r5, r6, pc}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	200008d4 	.word	0x200008d4

080037a0 <_lseek_r>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	0004      	movs	r4, r0
 80037a4:	0008      	movs	r0, r1
 80037a6:	0011      	movs	r1, r2
 80037a8:	001a      	movs	r2, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	4d05      	ldr	r5, [pc, #20]	@ (80037c4 <_lseek_r+0x24>)
 80037ae:	602b      	str	r3, [r5, #0]
 80037b0:	f7fe fdbf 	bl	8002332 <_lseek>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d103      	bne.n	80037c0 <_lseek_r+0x20>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d000      	beq.n	80037c0 <_lseek_r+0x20>
 80037be:	6023      	str	r3, [r4, #0]
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	200008d4 	.word	0x200008d4

080037c8 <_read_r>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	0004      	movs	r4, r0
 80037cc:	0008      	movs	r0, r1
 80037ce:	0011      	movs	r1, r2
 80037d0:	001a      	movs	r2, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	4d05      	ldr	r5, [pc, #20]	@ (80037ec <_read_r+0x24>)
 80037d6:	602b      	str	r3, [r5, #0]
 80037d8:	f7fe fd51 	bl	800227e <_read>
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	d103      	bne.n	80037e8 <_read_r+0x20>
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d000      	beq.n	80037e8 <_read_r+0x20>
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	200008d4 	.word	0x200008d4

080037f0 <_sbrk_r>:
 80037f0:	2300      	movs	r3, #0
 80037f2:	b570      	push	{r4, r5, r6, lr}
 80037f4:	4d06      	ldr	r5, [pc, #24]	@ (8003810 <_sbrk_r+0x20>)
 80037f6:	0004      	movs	r4, r0
 80037f8:	0008      	movs	r0, r1
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	f7fe fda4 	bl	8002348 <_sbrk>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d103      	bne.n	800380c <_sbrk_r+0x1c>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d000      	beq.n	800380c <_sbrk_r+0x1c>
 800380a:	6023      	str	r3, [r4, #0]
 800380c:	bd70      	pop	{r4, r5, r6, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	200008d4 	.word	0x200008d4

08003814 <_write_r>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	0004      	movs	r4, r0
 8003818:	0008      	movs	r0, r1
 800381a:	0011      	movs	r1, r2
 800381c:	001a      	movs	r2, r3
 800381e:	2300      	movs	r3, #0
 8003820:	4d05      	ldr	r5, [pc, #20]	@ (8003838 <_write_r+0x24>)
 8003822:	602b      	str	r3, [r5, #0]
 8003824:	f7fe fd48 	bl	80022b8 <_write>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	d103      	bne.n	8003834 <_write_r+0x20>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d000      	beq.n	8003834 <_write_r+0x20>
 8003832:	6023      	str	r3, [r4, #0]
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	200008d4 	.word	0x200008d4

0800383c <__errno>:
 800383c:	4b01      	ldr	r3, [pc, #4]	@ (8003844 <__errno+0x8>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4770      	bx	lr
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	20000028 	.word	0x20000028

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	2600      	movs	r6, #0
 800384c:	4c0c      	ldr	r4, [pc, #48]	@ (8003880 <__libc_init_array+0x38>)
 800384e:	4d0d      	ldr	r5, [pc, #52]	@ (8003884 <__libc_init_array+0x3c>)
 8003850:	1b64      	subs	r4, r4, r5
 8003852:	10a4      	asrs	r4, r4, #2
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	2600      	movs	r6, #0
 800385a:	f000 fdff 	bl	800445c <_init>
 800385e:	4c0a      	ldr	r4, [pc, #40]	@ (8003888 <__libc_init_array+0x40>)
 8003860:	4d0a      	ldr	r5, [pc, #40]	@ (800388c <__libc_init_array+0x44>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	00b3      	lsls	r3, r6, #2
 800386e:	58eb      	ldr	r3, [r5, r3]
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	00b3      	lsls	r3, r6, #2
 8003878:	58eb      	ldr	r3, [r5, r3]
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	080054d8 	.word	0x080054d8
 8003884:	080054d8 	.word	0x080054d8
 8003888:	080054dc 	.word	0x080054dc
 800388c:	080054d8 	.word	0x080054d8

08003890 <__retarget_lock_init_recursive>:
 8003890:	4770      	bx	lr

08003892 <__retarget_lock_acquire_recursive>:
 8003892:	4770      	bx	lr

08003894 <__retarget_lock_release_recursive>:
 8003894:	4770      	bx	lr

08003896 <memcpy>:
 8003896:	2300      	movs	r3, #0
 8003898:	b510      	push	{r4, lr}
 800389a:	429a      	cmp	r2, r3
 800389c:	d100      	bne.n	80038a0 <memcpy+0xa>
 800389e:	bd10      	pop	{r4, pc}
 80038a0:	5ccc      	ldrb	r4, [r1, r3]
 80038a2:	54c4      	strb	r4, [r0, r3]
 80038a4:	3301      	adds	r3, #1
 80038a6:	e7f8      	b.n	800389a <memcpy+0x4>

080038a8 <__assert_func>:
 80038a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80038aa:	0014      	movs	r4, r2
 80038ac:	001a      	movs	r2, r3
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <__assert_func+0x2c>)
 80038b0:	0005      	movs	r5, r0
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	000e      	movs	r6, r1
 80038b6:	68d8      	ldr	r0, [r3, #12]
 80038b8:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <__assert_func+0x30>)
 80038ba:	2c00      	cmp	r4, #0
 80038bc:	d101      	bne.n	80038c2 <__assert_func+0x1a>
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <__assert_func+0x34>)
 80038c0:	001c      	movs	r4, r3
 80038c2:	4907      	ldr	r1, [pc, #28]	@ (80038e0 <__assert_func+0x38>)
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	9402      	str	r4, [sp, #8]
 80038c8:	002b      	movs	r3, r5
 80038ca:	9600      	str	r6, [sp, #0]
 80038cc:	f000 fbc8 	bl	8004060 <fiprintf>
 80038d0:	f000 fcef 	bl	80042b2 <abort>
 80038d4:	20000028 	.word	0x20000028
 80038d8:	08005466 	.word	0x08005466
 80038dc:	080054a1 	.word	0x080054a1
 80038e0:	08005473 	.word	0x08005473

080038e4 <_free_r>:
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	0005      	movs	r5, r0
 80038e8:	1e0c      	subs	r4, r1, #0
 80038ea:	d010      	beq.n	800390e <_free_r+0x2a>
 80038ec:	3c04      	subs	r4, #4
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da00      	bge.n	80038f6 <_free_r+0x12>
 80038f4:	18e4      	adds	r4, r4, r3
 80038f6:	0028      	movs	r0, r5
 80038f8:	f7ff fb1c 	bl	8002f34 <__malloc_lock>
 80038fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <_free_r+0x90>)
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <_free_r+0x2c>
 8003904:	6063      	str	r3, [r4, #4]
 8003906:	6014      	str	r4, [r2, #0]
 8003908:	0028      	movs	r0, r5
 800390a:	f7ff fb1b 	bl	8002f44 <__malloc_unlock>
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	42a3      	cmp	r3, r4
 8003912:	d908      	bls.n	8003926 <_free_r+0x42>
 8003914:	6820      	ldr	r0, [r4, #0]
 8003916:	1821      	adds	r1, r4, r0
 8003918:	428b      	cmp	r3, r1
 800391a:	d1f3      	bne.n	8003904 <_free_r+0x20>
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	1809      	adds	r1, r1, r0
 8003922:	6021      	str	r1, [r4, #0]
 8003924:	e7ee      	b.n	8003904 <_free_r+0x20>
 8003926:	001a      	movs	r2, r3
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <_free_r+0x4e>
 800392e:	42a3      	cmp	r3, r4
 8003930:	d9f9      	bls.n	8003926 <_free_r+0x42>
 8003932:	6811      	ldr	r1, [r2, #0]
 8003934:	1850      	adds	r0, r2, r1
 8003936:	42a0      	cmp	r0, r4
 8003938:	d10b      	bne.n	8003952 <_free_r+0x6e>
 800393a:	6820      	ldr	r0, [r4, #0]
 800393c:	1809      	adds	r1, r1, r0
 800393e:	1850      	adds	r0, r2, r1
 8003940:	6011      	str	r1, [r2, #0]
 8003942:	4283      	cmp	r3, r0
 8003944:	d1e0      	bne.n	8003908 <_free_r+0x24>
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	1841      	adds	r1, r0, r1
 800394c:	6011      	str	r1, [r2, #0]
 800394e:	6053      	str	r3, [r2, #4]
 8003950:	e7da      	b.n	8003908 <_free_r+0x24>
 8003952:	42a0      	cmp	r0, r4
 8003954:	d902      	bls.n	800395c <_free_r+0x78>
 8003956:	230c      	movs	r3, #12
 8003958:	602b      	str	r3, [r5, #0]
 800395a:	e7d5      	b.n	8003908 <_free_r+0x24>
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	1821      	adds	r1, r4, r0
 8003960:	428b      	cmp	r3, r1
 8003962:	d103      	bne.n	800396c <_free_r+0x88>
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	1809      	adds	r1, r1, r0
 800396a:	6021      	str	r1, [r4, #0]
 800396c:	6063      	str	r3, [r4, #4]
 800396e:	6054      	str	r4, [r2, #4]
 8003970:	e7ca      	b.n	8003908 <_free_r+0x24>
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	20000794 	.word	0x20000794

08003978 <__sfputc_r>:
 8003978:	6893      	ldr	r3, [r2, #8]
 800397a:	b510      	push	{r4, lr}
 800397c:	3b01      	subs	r3, #1
 800397e:	6093      	str	r3, [r2, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	da04      	bge.n	800398e <__sfputc_r+0x16>
 8003984:	6994      	ldr	r4, [r2, #24]
 8003986:	42a3      	cmp	r3, r4
 8003988:	db07      	blt.n	800399a <__sfputc_r+0x22>
 800398a:	290a      	cmp	r1, #10
 800398c:	d005      	beq.n	800399a <__sfputc_r+0x22>
 800398e:	6813      	ldr	r3, [r2, #0]
 8003990:	1c58      	adds	r0, r3, #1
 8003992:	6010      	str	r0, [r2, #0]
 8003994:	7019      	strb	r1, [r3, #0]
 8003996:	0008      	movs	r0, r1
 8003998:	bd10      	pop	{r4, pc}
 800399a:	f7ff fdbb 	bl	8003514 <__swbuf_r>
 800399e:	0001      	movs	r1, r0
 80039a0:	e7f9      	b.n	8003996 <__sfputc_r+0x1e>

080039a2 <__sfputs_r>:
 80039a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a4:	0006      	movs	r6, r0
 80039a6:	000f      	movs	r7, r1
 80039a8:	0014      	movs	r4, r2
 80039aa:	18d5      	adds	r5, r2, r3
 80039ac:	42ac      	cmp	r4, r5
 80039ae:	d101      	bne.n	80039b4 <__sfputs_r+0x12>
 80039b0:	2000      	movs	r0, #0
 80039b2:	e007      	b.n	80039c4 <__sfputs_r+0x22>
 80039b4:	7821      	ldrb	r1, [r4, #0]
 80039b6:	003a      	movs	r2, r7
 80039b8:	0030      	movs	r0, r6
 80039ba:	f7ff ffdd 	bl	8003978 <__sfputc_r>
 80039be:	3401      	adds	r4, #1
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d1f3      	bne.n	80039ac <__sfputs_r+0xa>
 80039c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039c8 <_vfiprintf_r>:
 80039c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ca:	b0a1      	sub	sp, #132	@ 0x84
 80039cc:	000f      	movs	r7, r1
 80039ce:	0015      	movs	r5, r2
 80039d0:	001e      	movs	r6, r3
 80039d2:	9003      	str	r0, [sp, #12]
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d004      	beq.n	80039e2 <_vfiprintf_r+0x1a>
 80039d8:	6a03      	ldr	r3, [r0, #32]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <_vfiprintf_r+0x1a>
 80039de:	f7ff fbdf 	bl	80031a0 <__sinit>
 80039e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039e4:	07db      	lsls	r3, r3, #31
 80039e6:	d405      	bmi.n	80039f4 <_vfiprintf_r+0x2c>
 80039e8:	89bb      	ldrh	r3, [r7, #12]
 80039ea:	059b      	lsls	r3, r3, #22
 80039ec:	d402      	bmi.n	80039f4 <_vfiprintf_r+0x2c>
 80039ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80039f0:	f7ff ff4f 	bl	8003892 <__retarget_lock_acquire_recursive>
 80039f4:	89bb      	ldrh	r3, [r7, #12]
 80039f6:	071b      	lsls	r3, r3, #28
 80039f8:	d502      	bpl.n	8003a00 <_vfiprintf_r+0x38>
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d113      	bne.n	8003a28 <_vfiprintf_r+0x60>
 8003a00:	0039      	movs	r1, r7
 8003a02:	9803      	ldr	r0, [sp, #12]
 8003a04:	f7ff fdc8 	bl	8003598 <__swsetup_r>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d00d      	beq.n	8003a28 <_vfiprintf_r+0x60>
 8003a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a0e:	07db      	lsls	r3, r3, #31
 8003a10:	d503      	bpl.n	8003a1a <_vfiprintf_r+0x52>
 8003a12:	2001      	movs	r0, #1
 8003a14:	4240      	negs	r0, r0
 8003a16:	b021      	add	sp, #132	@ 0x84
 8003a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1a:	89bb      	ldrh	r3, [r7, #12]
 8003a1c:	059b      	lsls	r3, r3, #22
 8003a1e:	d4f8      	bmi.n	8003a12 <_vfiprintf_r+0x4a>
 8003a20:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a22:	f7ff ff37 	bl	8003894 <__retarget_lock_release_recursive>
 8003a26:	e7f4      	b.n	8003a12 <_vfiprintf_r+0x4a>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	ac08      	add	r4, sp, #32
 8003a2c:	6163      	str	r3, [r4, #20]
 8003a2e:	3320      	adds	r3, #32
 8003a30:	7663      	strb	r3, [r4, #25]
 8003a32:	3310      	adds	r3, #16
 8003a34:	76a3      	strb	r3, [r4, #26]
 8003a36:	9607      	str	r6, [sp, #28]
 8003a38:	002e      	movs	r6, r5
 8003a3a:	7833      	ldrb	r3, [r6, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <_vfiprintf_r+0x7c>
 8003a40:	2b25      	cmp	r3, #37	@ 0x25
 8003a42:	d148      	bne.n	8003ad6 <_vfiprintf_r+0x10e>
 8003a44:	1b73      	subs	r3, r6, r5
 8003a46:	9305      	str	r3, [sp, #20]
 8003a48:	42ae      	cmp	r6, r5
 8003a4a:	d00b      	beq.n	8003a64 <_vfiprintf_r+0x9c>
 8003a4c:	002a      	movs	r2, r5
 8003a4e:	0039      	movs	r1, r7
 8003a50:	9803      	ldr	r0, [sp, #12]
 8003a52:	f7ff ffa6 	bl	80039a2 <__sfputs_r>
 8003a56:	3001      	adds	r0, #1
 8003a58:	d100      	bne.n	8003a5c <_vfiprintf_r+0x94>
 8003a5a:	e0ae      	b.n	8003bba <_vfiprintf_r+0x1f2>
 8003a5c:	6963      	ldr	r3, [r4, #20]
 8003a5e:	9a05      	ldr	r2, [sp, #20]
 8003a60:	189b      	adds	r3, r3, r2
 8003a62:	6163      	str	r3, [r4, #20]
 8003a64:	7833      	ldrb	r3, [r6, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d100      	bne.n	8003a6c <_vfiprintf_r+0xa4>
 8003a6a:	e0a6      	b.n	8003bba <_vfiprintf_r+0x1f2>
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2300      	movs	r3, #0
 8003a70:	4252      	negs	r2, r2
 8003a72:	6062      	str	r2, [r4, #4]
 8003a74:	a904      	add	r1, sp, #16
 8003a76:	3254      	adds	r2, #84	@ 0x54
 8003a78:	1852      	adds	r2, r2, r1
 8003a7a:	1c75      	adds	r5, r6, #1
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	60e3      	str	r3, [r4, #12]
 8003a80:	60a3      	str	r3, [r4, #8]
 8003a82:	7013      	strb	r3, [r2, #0]
 8003a84:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a86:	4b59      	ldr	r3, [pc, #356]	@ (8003bec <_vfiprintf_r+0x224>)
 8003a88:	2205      	movs	r2, #5
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	7829      	ldrb	r1, [r5, #0]
 8003a8e:	9305      	str	r3, [sp, #20]
 8003a90:	f000 fc04 	bl	800429c <memchr>
 8003a94:	1c6e      	adds	r6, r5, #1
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d11f      	bne.n	8003ada <_vfiprintf_r+0x112>
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	06d3      	lsls	r3, r2, #27
 8003a9e:	d504      	bpl.n	8003aaa <_vfiprintf_r+0xe2>
 8003aa0:	2353      	movs	r3, #83	@ 0x53
 8003aa2:	a904      	add	r1, sp, #16
 8003aa4:	185b      	adds	r3, r3, r1
 8003aa6:	2120      	movs	r1, #32
 8003aa8:	7019      	strb	r1, [r3, #0]
 8003aaa:	0713      	lsls	r3, r2, #28
 8003aac:	d504      	bpl.n	8003ab8 <_vfiprintf_r+0xf0>
 8003aae:	2353      	movs	r3, #83	@ 0x53
 8003ab0:	a904      	add	r1, sp, #16
 8003ab2:	185b      	adds	r3, r3, r1
 8003ab4:	212b      	movs	r1, #43	@ 0x2b
 8003ab6:	7019      	strb	r1, [r3, #0]
 8003ab8:	782b      	ldrb	r3, [r5, #0]
 8003aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8003abc:	d016      	beq.n	8003aec <_vfiprintf_r+0x124>
 8003abe:	002e      	movs	r6, r5
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	200a      	movs	r0, #10
 8003ac4:	68e3      	ldr	r3, [r4, #12]
 8003ac6:	7832      	ldrb	r2, [r6, #0]
 8003ac8:	1c75      	adds	r5, r6, #1
 8003aca:	3a30      	subs	r2, #48	@ 0x30
 8003acc:	2a09      	cmp	r2, #9
 8003ace:	d950      	bls.n	8003b72 <_vfiprintf_r+0x1aa>
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	d111      	bne.n	8003af8 <_vfiprintf_r+0x130>
 8003ad4:	e017      	b.n	8003b06 <_vfiprintf_r+0x13e>
 8003ad6:	3601      	adds	r6, #1
 8003ad8:	e7af      	b.n	8003a3a <_vfiprintf_r+0x72>
 8003ada:	9b05      	ldr	r3, [sp, #20]
 8003adc:	6822      	ldr	r2, [r4, #0]
 8003ade:	1ac0      	subs	r0, r0, r3
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	4083      	lsls	r3, r0
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	0035      	movs	r5, r6
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	e7cc      	b.n	8003a86 <_vfiprintf_r+0xbe>
 8003aec:	9b07      	ldr	r3, [sp, #28]
 8003aee:	1d19      	adds	r1, r3, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	9107      	str	r1, [sp, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db01      	blt.n	8003afc <_vfiprintf_r+0x134>
 8003af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003afa:	e004      	b.n	8003b06 <_vfiprintf_r+0x13e>
 8003afc:	425b      	negs	r3, r3
 8003afe:	60e3      	str	r3, [r4, #12]
 8003b00:	2302      	movs	r3, #2
 8003b02:	4313      	orrs	r3, r2
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	7833      	ldrb	r3, [r6, #0]
 8003b08:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b0a:	d10c      	bne.n	8003b26 <_vfiprintf_r+0x15e>
 8003b0c:	7873      	ldrb	r3, [r6, #1]
 8003b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b10:	d134      	bne.n	8003b7c <_vfiprintf_r+0x1b4>
 8003b12:	9b07      	ldr	r3, [sp, #28]
 8003b14:	3602      	adds	r6, #2
 8003b16:	1d1a      	adds	r2, r3, #4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	9207      	str	r2, [sp, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	da01      	bge.n	8003b24 <_vfiprintf_r+0x15c>
 8003b20:	2301      	movs	r3, #1
 8003b22:	425b      	negs	r3, r3
 8003b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b26:	4d32      	ldr	r5, [pc, #200]	@ (8003bf0 <_vfiprintf_r+0x228>)
 8003b28:	2203      	movs	r2, #3
 8003b2a:	0028      	movs	r0, r5
 8003b2c:	7831      	ldrb	r1, [r6, #0]
 8003b2e:	f000 fbb5 	bl	800429c <memchr>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d006      	beq.n	8003b44 <_vfiprintf_r+0x17c>
 8003b36:	2340      	movs	r3, #64	@ 0x40
 8003b38:	1b40      	subs	r0, r0, r5
 8003b3a:	4083      	lsls	r3, r0
 8003b3c:	6822      	ldr	r2, [r4, #0]
 8003b3e:	3601      	adds	r6, #1
 8003b40:	4313      	orrs	r3, r2
 8003b42:	6023      	str	r3, [r4, #0]
 8003b44:	7831      	ldrb	r1, [r6, #0]
 8003b46:	2206      	movs	r2, #6
 8003b48:	482a      	ldr	r0, [pc, #168]	@ (8003bf4 <_vfiprintf_r+0x22c>)
 8003b4a:	1c75      	adds	r5, r6, #1
 8003b4c:	7621      	strb	r1, [r4, #24]
 8003b4e:	f000 fba5 	bl	800429c <memchr>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d040      	beq.n	8003bd8 <_vfiprintf_r+0x210>
 8003b56:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <_vfiprintf_r+0x230>)
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d122      	bne.n	8003ba2 <_vfiprintf_r+0x1da>
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	9b07      	ldr	r3, [sp, #28]
 8003b60:	3307      	adds	r3, #7
 8003b62:	4393      	bics	r3, r2
 8003b64:	3308      	adds	r3, #8
 8003b66:	9307      	str	r3, [sp, #28]
 8003b68:	6963      	ldr	r3, [r4, #20]
 8003b6a:	9a04      	ldr	r2, [sp, #16]
 8003b6c:	189b      	adds	r3, r3, r2
 8003b6e:	6163      	str	r3, [r4, #20]
 8003b70:	e762      	b.n	8003a38 <_vfiprintf_r+0x70>
 8003b72:	4343      	muls	r3, r0
 8003b74:	002e      	movs	r6, r5
 8003b76:	2101      	movs	r1, #1
 8003b78:	189b      	adds	r3, r3, r2
 8003b7a:	e7a4      	b.n	8003ac6 <_vfiprintf_r+0xfe>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	200a      	movs	r0, #10
 8003b80:	0019      	movs	r1, r3
 8003b82:	3601      	adds	r6, #1
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	7832      	ldrb	r2, [r6, #0]
 8003b88:	1c75      	adds	r5, r6, #1
 8003b8a:	3a30      	subs	r2, #48	@ 0x30
 8003b8c:	2a09      	cmp	r2, #9
 8003b8e:	d903      	bls.n	8003b98 <_vfiprintf_r+0x1d0>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0c8      	beq.n	8003b26 <_vfiprintf_r+0x15e>
 8003b94:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b96:	e7c6      	b.n	8003b26 <_vfiprintf_r+0x15e>
 8003b98:	4341      	muls	r1, r0
 8003b9a:	002e      	movs	r6, r5
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	1889      	adds	r1, r1, r2
 8003ba0:	e7f1      	b.n	8003b86 <_vfiprintf_r+0x1be>
 8003ba2:	aa07      	add	r2, sp, #28
 8003ba4:	9200      	str	r2, [sp, #0]
 8003ba6:	0021      	movs	r1, r4
 8003ba8:	003a      	movs	r2, r7
 8003baa:	4b14      	ldr	r3, [pc, #80]	@ (8003bfc <_vfiprintf_r+0x234>)
 8003bac:	9803      	ldr	r0, [sp, #12]
 8003bae:	e000      	b.n	8003bb2 <_vfiprintf_r+0x1ea>
 8003bb0:	bf00      	nop
 8003bb2:	9004      	str	r0, [sp, #16]
 8003bb4:	9b04      	ldr	r3, [sp, #16]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	d1d6      	bne.n	8003b68 <_vfiprintf_r+0x1a0>
 8003bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bbc:	07db      	lsls	r3, r3, #31
 8003bbe:	d405      	bmi.n	8003bcc <_vfiprintf_r+0x204>
 8003bc0:	89bb      	ldrh	r3, [r7, #12]
 8003bc2:	059b      	lsls	r3, r3, #22
 8003bc4:	d402      	bmi.n	8003bcc <_vfiprintf_r+0x204>
 8003bc6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003bc8:	f7ff fe64 	bl	8003894 <__retarget_lock_release_recursive>
 8003bcc:	89bb      	ldrh	r3, [r7, #12]
 8003bce:	065b      	lsls	r3, r3, #25
 8003bd0:	d500      	bpl.n	8003bd4 <_vfiprintf_r+0x20c>
 8003bd2:	e71e      	b.n	8003a12 <_vfiprintf_r+0x4a>
 8003bd4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003bd6:	e71e      	b.n	8003a16 <_vfiprintf_r+0x4e>
 8003bd8:	aa07      	add	r2, sp, #28
 8003bda:	9200      	str	r2, [sp, #0]
 8003bdc:	0021      	movs	r1, r4
 8003bde:	003a      	movs	r2, r7
 8003be0:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <_vfiprintf_r+0x234>)
 8003be2:	9803      	ldr	r0, [sp, #12]
 8003be4:	f000 f87c 	bl	8003ce0 <_printf_i>
 8003be8:	e7e3      	b.n	8003bb2 <_vfiprintf_r+0x1ea>
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	080054a2 	.word	0x080054a2
 8003bf0:	080054a8 	.word	0x080054a8
 8003bf4:	080054ac 	.word	0x080054ac
 8003bf8:	00000000 	.word	0x00000000
 8003bfc:	080039a3 	.word	0x080039a3

08003c00 <_printf_common>:
 8003c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c02:	0016      	movs	r6, r2
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	688a      	ldr	r2, [r1, #8]
 8003c08:	690b      	ldr	r3, [r1, #16]
 8003c0a:	000c      	movs	r4, r1
 8003c0c:	9000      	str	r0, [sp, #0]
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	da00      	bge.n	8003c14 <_printf_common+0x14>
 8003c12:	0013      	movs	r3, r2
 8003c14:	0022      	movs	r2, r4
 8003c16:	6033      	str	r3, [r6, #0]
 8003c18:	3243      	adds	r2, #67	@ 0x43
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	2a00      	cmp	r2, #0
 8003c1e:	d001      	beq.n	8003c24 <_printf_common+0x24>
 8003c20:	3301      	adds	r3, #1
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	069b      	lsls	r3, r3, #26
 8003c28:	d502      	bpl.n	8003c30 <_printf_common+0x30>
 8003c2a:	6833      	ldr	r3, [r6, #0]
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	6033      	str	r3, [r6, #0]
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	2306      	movs	r3, #6
 8003c34:	0015      	movs	r5, r2
 8003c36:	401d      	ands	r5, r3
 8003c38:	421a      	tst	r2, r3
 8003c3a:	d027      	beq.n	8003c8c <_printf_common+0x8c>
 8003c3c:	0023      	movs	r3, r4
 8003c3e:	3343      	adds	r3, #67	@ 0x43
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	4193      	sbcs	r3, r2
 8003c46:	6822      	ldr	r2, [r4, #0]
 8003c48:	0692      	lsls	r2, r2, #26
 8003c4a:	d430      	bmi.n	8003cae <_printf_common+0xae>
 8003c4c:	0022      	movs	r2, r4
 8003c4e:	9901      	ldr	r1, [sp, #4]
 8003c50:	9800      	ldr	r0, [sp, #0]
 8003c52:	9d08      	ldr	r5, [sp, #32]
 8003c54:	3243      	adds	r2, #67	@ 0x43
 8003c56:	47a8      	blx	r5
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d025      	beq.n	8003ca8 <_printf_common+0xa8>
 8003c5c:	2206      	movs	r2, #6
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	2500      	movs	r5, #0
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d105      	bne.n	8003c74 <_printf_common+0x74>
 8003c68:	6833      	ldr	r3, [r6, #0]
 8003c6a:	68e5      	ldr	r5, [r4, #12]
 8003c6c:	1aed      	subs	r5, r5, r3
 8003c6e:	43eb      	mvns	r3, r5
 8003c70:	17db      	asrs	r3, r3, #31
 8003c72:	401d      	ands	r5, r3
 8003c74:	68a3      	ldr	r3, [r4, #8]
 8003c76:	6922      	ldr	r2, [r4, #16]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	dd01      	ble.n	8003c80 <_printf_common+0x80>
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	18ed      	adds	r5, r5, r3
 8003c80:	2600      	movs	r6, #0
 8003c82:	42b5      	cmp	r5, r6
 8003c84:	d120      	bne.n	8003cc8 <_printf_common+0xc8>
 8003c86:	2000      	movs	r0, #0
 8003c88:	e010      	b.n	8003cac <_printf_common+0xac>
 8003c8a:	3501      	adds	r5, #1
 8003c8c:	68e3      	ldr	r3, [r4, #12]
 8003c8e:	6832      	ldr	r2, [r6, #0]
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	42ab      	cmp	r3, r5
 8003c94:	ddd2      	ble.n	8003c3c <_printf_common+0x3c>
 8003c96:	0022      	movs	r2, r4
 8003c98:	2301      	movs	r3, #1
 8003c9a:	9901      	ldr	r1, [sp, #4]
 8003c9c:	9800      	ldr	r0, [sp, #0]
 8003c9e:	9f08      	ldr	r7, [sp, #32]
 8003ca0:	3219      	adds	r2, #25
 8003ca2:	47b8      	blx	r7
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d1f0      	bne.n	8003c8a <_printf_common+0x8a>
 8003ca8:	2001      	movs	r0, #1
 8003caa:	4240      	negs	r0, r0
 8003cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cae:	2030      	movs	r0, #48	@ 0x30
 8003cb0:	18e1      	adds	r1, r4, r3
 8003cb2:	3143      	adds	r1, #67	@ 0x43
 8003cb4:	7008      	strb	r0, [r1, #0]
 8003cb6:	0021      	movs	r1, r4
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	3145      	adds	r1, #69	@ 0x45
 8003cbc:	7809      	ldrb	r1, [r1, #0]
 8003cbe:	18a2      	adds	r2, r4, r2
 8003cc0:	3243      	adds	r2, #67	@ 0x43
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	7011      	strb	r1, [r2, #0]
 8003cc6:	e7c1      	b.n	8003c4c <_printf_common+0x4c>
 8003cc8:	0022      	movs	r2, r4
 8003cca:	2301      	movs	r3, #1
 8003ccc:	9901      	ldr	r1, [sp, #4]
 8003cce:	9800      	ldr	r0, [sp, #0]
 8003cd0:	9f08      	ldr	r7, [sp, #32]
 8003cd2:	321a      	adds	r2, #26
 8003cd4:	47b8      	blx	r7
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d0e6      	beq.n	8003ca8 <_printf_common+0xa8>
 8003cda:	3601      	adds	r6, #1
 8003cdc:	e7d1      	b.n	8003c82 <_printf_common+0x82>
	...

08003ce0 <_printf_i>:
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	b08b      	sub	sp, #44	@ 0x2c
 8003ce4:	9206      	str	r2, [sp, #24]
 8003ce6:	000a      	movs	r2, r1
 8003ce8:	3243      	adds	r2, #67	@ 0x43
 8003cea:	9307      	str	r3, [sp, #28]
 8003cec:	9005      	str	r0, [sp, #20]
 8003cee:	9203      	str	r2, [sp, #12]
 8003cf0:	7e0a      	ldrb	r2, [r1, #24]
 8003cf2:	000c      	movs	r4, r1
 8003cf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003cf6:	2a78      	cmp	r2, #120	@ 0x78
 8003cf8:	d809      	bhi.n	8003d0e <_printf_i+0x2e>
 8003cfa:	2a62      	cmp	r2, #98	@ 0x62
 8003cfc:	d80b      	bhi.n	8003d16 <_printf_i+0x36>
 8003cfe:	2a00      	cmp	r2, #0
 8003d00:	d100      	bne.n	8003d04 <_printf_i+0x24>
 8003d02:	e0bc      	b.n	8003e7e <_printf_i+0x19e>
 8003d04:	497b      	ldr	r1, [pc, #492]	@ (8003ef4 <_printf_i+0x214>)
 8003d06:	9104      	str	r1, [sp, #16]
 8003d08:	2a58      	cmp	r2, #88	@ 0x58
 8003d0a:	d100      	bne.n	8003d0e <_printf_i+0x2e>
 8003d0c:	e090      	b.n	8003e30 <_printf_i+0x150>
 8003d0e:	0025      	movs	r5, r4
 8003d10:	3542      	adds	r5, #66	@ 0x42
 8003d12:	702a      	strb	r2, [r5, #0]
 8003d14:	e022      	b.n	8003d5c <_printf_i+0x7c>
 8003d16:	0010      	movs	r0, r2
 8003d18:	3863      	subs	r0, #99	@ 0x63
 8003d1a:	2815      	cmp	r0, #21
 8003d1c:	d8f7      	bhi.n	8003d0e <_printf_i+0x2e>
 8003d1e:	f7fc f9fb 	bl	8000118 <__gnu_thumb1_case_shi>
 8003d22:	0016      	.short	0x0016
 8003d24:	fff6001f 	.word	0xfff6001f
 8003d28:	fff6fff6 	.word	0xfff6fff6
 8003d2c:	001ffff6 	.word	0x001ffff6
 8003d30:	fff6fff6 	.word	0xfff6fff6
 8003d34:	fff6fff6 	.word	0xfff6fff6
 8003d38:	003600a1 	.word	0x003600a1
 8003d3c:	fff60080 	.word	0xfff60080
 8003d40:	00b2fff6 	.word	0x00b2fff6
 8003d44:	0036fff6 	.word	0x0036fff6
 8003d48:	fff6fff6 	.word	0xfff6fff6
 8003d4c:	0084      	.short	0x0084
 8003d4e:	0025      	movs	r5, r4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	3542      	adds	r5, #66	@ 0x42
 8003d54:	1d11      	adds	r1, r2, #4
 8003d56:	6019      	str	r1, [r3, #0]
 8003d58:	6813      	ldr	r3, [r2, #0]
 8003d5a:	702b      	strb	r3, [r5, #0]
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0a0      	b.n	8003ea2 <_printf_i+0x1c2>
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	6809      	ldr	r1, [r1, #0]
 8003d64:	1d02      	adds	r2, r0, #4
 8003d66:	060d      	lsls	r5, r1, #24
 8003d68:	d50b      	bpl.n	8003d82 <_printf_i+0xa2>
 8003d6a:	6806      	ldr	r6, [r0, #0]
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	da03      	bge.n	8003d7a <_printf_i+0x9a>
 8003d72:	232d      	movs	r3, #45	@ 0x2d
 8003d74:	9a03      	ldr	r2, [sp, #12]
 8003d76:	4276      	negs	r6, r6
 8003d78:	7013      	strb	r3, [r2, #0]
 8003d7a:	4b5e      	ldr	r3, [pc, #376]	@ (8003ef4 <_printf_i+0x214>)
 8003d7c:	270a      	movs	r7, #10
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	e018      	b.n	8003db4 <_printf_i+0xd4>
 8003d82:	6806      	ldr	r6, [r0, #0]
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	0649      	lsls	r1, r1, #25
 8003d88:	d5f1      	bpl.n	8003d6e <_printf_i+0x8e>
 8003d8a:	b236      	sxth	r6, r6
 8003d8c:	e7ef      	b.n	8003d6e <_printf_i+0x8e>
 8003d8e:	6808      	ldr	r0, [r1, #0]
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	c940      	ldmia	r1!, {r6}
 8003d94:	0605      	lsls	r5, r0, #24
 8003d96:	d402      	bmi.n	8003d9e <_printf_i+0xbe>
 8003d98:	0640      	lsls	r0, r0, #25
 8003d9a:	d500      	bpl.n	8003d9e <_printf_i+0xbe>
 8003d9c:	b2b6      	uxth	r6, r6
 8003d9e:	6019      	str	r1, [r3, #0]
 8003da0:	4b54      	ldr	r3, [pc, #336]	@ (8003ef4 <_printf_i+0x214>)
 8003da2:	270a      	movs	r7, #10
 8003da4:	9304      	str	r3, [sp, #16]
 8003da6:	2a6f      	cmp	r2, #111	@ 0x6f
 8003da8:	d100      	bne.n	8003dac <_printf_i+0xcc>
 8003daa:	3f02      	subs	r7, #2
 8003dac:	0023      	movs	r3, r4
 8003dae:	2200      	movs	r2, #0
 8003db0:	3343      	adds	r3, #67	@ 0x43
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	6863      	ldr	r3, [r4, #4]
 8003db6:	60a3      	str	r3, [r4, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	db03      	blt.n	8003dc4 <_printf_i+0xe4>
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	438a      	bics	r2, r1
 8003dc2:	6022      	str	r2, [r4, #0]
 8003dc4:	2e00      	cmp	r6, #0
 8003dc6:	d102      	bne.n	8003dce <_printf_i+0xee>
 8003dc8:	9d03      	ldr	r5, [sp, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <_printf_i+0x108>
 8003dce:	9d03      	ldr	r5, [sp, #12]
 8003dd0:	0030      	movs	r0, r6
 8003dd2:	0039      	movs	r1, r7
 8003dd4:	f7fc fa30 	bl	8000238 <__aeabi_uidivmod>
 8003dd8:	9b04      	ldr	r3, [sp, #16]
 8003dda:	3d01      	subs	r5, #1
 8003ddc:	5c5b      	ldrb	r3, [r3, r1]
 8003dde:	702b      	strb	r3, [r5, #0]
 8003de0:	0033      	movs	r3, r6
 8003de2:	0006      	movs	r6, r0
 8003de4:	429f      	cmp	r7, r3
 8003de6:	d9f3      	bls.n	8003dd0 <_printf_i+0xf0>
 8003de8:	2f08      	cmp	r7, #8
 8003dea:	d109      	bne.n	8003e00 <_printf_i+0x120>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	07db      	lsls	r3, r3, #31
 8003df0:	d506      	bpl.n	8003e00 <_printf_i+0x120>
 8003df2:	6862      	ldr	r2, [r4, #4]
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	dc02      	bgt.n	8003e00 <_printf_i+0x120>
 8003dfa:	2330      	movs	r3, #48	@ 0x30
 8003dfc:	3d01      	subs	r5, #1
 8003dfe:	702b      	strb	r3, [r5, #0]
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	1b5b      	subs	r3, r3, r5
 8003e04:	6123      	str	r3, [r4, #16]
 8003e06:	9b07      	ldr	r3, [sp, #28]
 8003e08:	0021      	movs	r1, r4
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	9805      	ldr	r0, [sp, #20]
 8003e0e:	9b06      	ldr	r3, [sp, #24]
 8003e10:	aa09      	add	r2, sp, #36	@ 0x24
 8003e12:	f7ff fef5 	bl	8003c00 <_printf_common>
 8003e16:	3001      	adds	r0, #1
 8003e18:	d148      	bne.n	8003eac <_printf_i+0x1cc>
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	4240      	negs	r0, r0
 8003e1e:	b00b      	add	sp, #44	@ 0x2c
 8003e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e22:	2220      	movs	r2, #32
 8003e24:	6809      	ldr	r1, [r1, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	6022      	str	r2, [r4, #0]
 8003e2a:	2278      	movs	r2, #120	@ 0x78
 8003e2c:	4932      	ldr	r1, [pc, #200]	@ (8003ef8 <_printf_i+0x218>)
 8003e2e:	9104      	str	r1, [sp, #16]
 8003e30:	0021      	movs	r1, r4
 8003e32:	3145      	adds	r1, #69	@ 0x45
 8003e34:	700a      	strb	r2, [r1, #0]
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	6822      	ldr	r2, [r4, #0]
 8003e3a:	c940      	ldmia	r1!, {r6}
 8003e3c:	0610      	lsls	r0, r2, #24
 8003e3e:	d402      	bmi.n	8003e46 <_printf_i+0x166>
 8003e40:	0650      	lsls	r0, r2, #25
 8003e42:	d500      	bpl.n	8003e46 <_printf_i+0x166>
 8003e44:	b2b6      	uxth	r6, r6
 8003e46:	6019      	str	r1, [r3, #0]
 8003e48:	07d3      	lsls	r3, r2, #31
 8003e4a:	d502      	bpl.n	8003e52 <_printf_i+0x172>
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	2e00      	cmp	r6, #0
 8003e54:	d001      	beq.n	8003e5a <_printf_i+0x17a>
 8003e56:	2710      	movs	r7, #16
 8003e58:	e7a8      	b.n	8003dac <_printf_i+0xcc>
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	4393      	bics	r3, r2
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	e7f8      	b.n	8003e56 <_printf_i+0x176>
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	680d      	ldr	r5, [r1, #0]
 8003e68:	1d10      	adds	r0, r2, #4
 8003e6a:	6949      	ldr	r1, [r1, #20]
 8003e6c:	6018      	str	r0, [r3, #0]
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	062e      	lsls	r6, r5, #24
 8003e72:	d501      	bpl.n	8003e78 <_printf_i+0x198>
 8003e74:	6019      	str	r1, [r3, #0]
 8003e76:	e002      	b.n	8003e7e <_printf_i+0x19e>
 8003e78:	066d      	lsls	r5, r5, #25
 8003e7a:	d5fb      	bpl.n	8003e74 <_printf_i+0x194>
 8003e7c:	8019      	strh	r1, [r3, #0]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9d03      	ldr	r5, [sp, #12]
 8003e82:	6123      	str	r3, [r4, #16]
 8003e84:	e7bf      	b.n	8003e06 <_printf_i+0x126>
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	1d11      	adds	r1, r2, #4
 8003e8a:	6019      	str	r1, [r3, #0]
 8003e8c:	6815      	ldr	r5, [r2, #0]
 8003e8e:	2100      	movs	r1, #0
 8003e90:	0028      	movs	r0, r5
 8003e92:	6862      	ldr	r2, [r4, #4]
 8003e94:	f000 fa02 	bl	800429c <memchr>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d001      	beq.n	8003ea0 <_printf_i+0x1c0>
 8003e9c:	1b40      	subs	r0, r0, r5
 8003e9e:	6060      	str	r0, [r4, #4]
 8003ea0:	6863      	ldr	r3, [r4, #4]
 8003ea2:	6123      	str	r3, [r4, #16]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9a03      	ldr	r2, [sp, #12]
 8003ea8:	7013      	strb	r3, [r2, #0]
 8003eaa:	e7ac      	b.n	8003e06 <_printf_i+0x126>
 8003eac:	002a      	movs	r2, r5
 8003eae:	6923      	ldr	r3, [r4, #16]
 8003eb0:	9906      	ldr	r1, [sp, #24]
 8003eb2:	9805      	ldr	r0, [sp, #20]
 8003eb4:	9d07      	ldr	r5, [sp, #28]
 8003eb6:	47a8      	blx	r5
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d0ae      	beq.n	8003e1a <_printf_i+0x13a>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	079b      	lsls	r3, r3, #30
 8003ec0:	d415      	bmi.n	8003eee <_printf_i+0x20e>
 8003ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ec4:	68e0      	ldr	r0, [r4, #12]
 8003ec6:	4298      	cmp	r0, r3
 8003ec8:	daa9      	bge.n	8003e1e <_printf_i+0x13e>
 8003eca:	0018      	movs	r0, r3
 8003ecc:	e7a7      	b.n	8003e1e <_printf_i+0x13e>
 8003ece:	0022      	movs	r2, r4
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	9906      	ldr	r1, [sp, #24]
 8003ed4:	9805      	ldr	r0, [sp, #20]
 8003ed6:	9e07      	ldr	r6, [sp, #28]
 8003ed8:	3219      	adds	r2, #25
 8003eda:	47b0      	blx	r6
 8003edc:	3001      	adds	r0, #1
 8003ede:	d09c      	beq.n	8003e1a <_printf_i+0x13a>
 8003ee0:	3501      	adds	r5, #1
 8003ee2:	68e3      	ldr	r3, [r4, #12]
 8003ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	42ab      	cmp	r3, r5
 8003eea:	dcf0      	bgt.n	8003ece <_printf_i+0x1ee>
 8003eec:	e7e9      	b.n	8003ec2 <_printf_i+0x1e2>
 8003eee:	2500      	movs	r5, #0
 8003ef0:	e7f7      	b.n	8003ee2 <_printf_i+0x202>
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	080054b3 	.word	0x080054b3
 8003ef8:	080054c4 	.word	0x080054c4

08003efc <__sflush_r>:
 8003efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003efe:	220c      	movs	r2, #12
 8003f00:	5e8b      	ldrsh	r3, [r1, r2]
 8003f02:	0005      	movs	r5, r0
 8003f04:	000c      	movs	r4, r1
 8003f06:	071a      	lsls	r2, r3, #28
 8003f08:	d456      	bmi.n	8003fb8 <__sflush_r+0xbc>
 8003f0a:	684a      	ldr	r2, [r1, #4]
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	dc02      	bgt.n	8003f16 <__sflush_r+0x1a>
 8003f10:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	dd4e      	ble.n	8003fb4 <__sflush_r+0xb8>
 8003f16:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003f18:	2f00      	cmp	r7, #0
 8003f1a:	d04b      	beq.n	8003fb4 <__sflush_r+0xb8>
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2080      	movs	r0, #128	@ 0x80
 8003f20:	682e      	ldr	r6, [r5, #0]
 8003f22:	602a      	str	r2, [r5, #0]
 8003f24:	001a      	movs	r2, r3
 8003f26:	0140      	lsls	r0, r0, #5
 8003f28:	6a21      	ldr	r1, [r4, #32]
 8003f2a:	4002      	ands	r2, r0
 8003f2c:	4203      	tst	r3, r0
 8003f2e:	d033      	beq.n	8003f98 <__sflush_r+0x9c>
 8003f30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	075b      	lsls	r3, r3, #29
 8003f36:	d506      	bpl.n	8003f46 <__sflush_r+0x4a>
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <__sflush_r+0x4a>
 8003f42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f44:	1ad2      	subs	r2, r2, r3
 8003f46:	2300      	movs	r3, #0
 8003f48:	0028      	movs	r0, r5
 8003f4a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003f4c:	6a21      	ldr	r1, [r4, #32]
 8003f4e:	47b8      	blx	r7
 8003f50:	89a2      	ldrh	r2, [r4, #12]
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	d106      	bne.n	8003f64 <__sflush_r+0x68>
 8003f56:	6829      	ldr	r1, [r5, #0]
 8003f58:	291d      	cmp	r1, #29
 8003f5a:	d846      	bhi.n	8003fea <__sflush_r+0xee>
 8003f5c:	4b29      	ldr	r3, [pc, #164]	@ (8004004 <__sflush_r+0x108>)
 8003f5e:	410b      	asrs	r3, r1
 8003f60:	07db      	lsls	r3, r3, #31
 8003f62:	d442      	bmi.n	8003fea <__sflush_r+0xee>
 8003f64:	2300      	movs	r3, #0
 8003f66:	6063      	str	r3, [r4, #4]
 8003f68:	6923      	ldr	r3, [r4, #16]
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	04d2      	lsls	r2, r2, #19
 8003f6e:	d505      	bpl.n	8003f7c <__sflush_r+0x80>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <__sflush_r+0x7e>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d100      	bne.n	8003f7c <__sflush_r+0x80>
 8003f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f7e:	602e      	str	r6, [r5, #0]
 8003f80:	2900      	cmp	r1, #0
 8003f82:	d017      	beq.n	8003fb4 <__sflush_r+0xb8>
 8003f84:	0023      	movs	r3, r4
 8003f86:	3344      	adds	r3, #68	@ 0x44
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	d002      	beq.n	8003f92 <__sflush_r+0x96>
 8003f8c:	0028      	movs	r0, r5
 8003f8e:	f7ff fca9 	bl	80038e4 <_free_r>
 8003f92:	2300      	movs	r3, #0
 8003f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f96:	e00d      	b.n	8003fb4 <__sflush_r+0xb8>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	47b8      	blx	r7
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d1c6      	bne.n	8003f32 <__sflush_r+0x36>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0c3      	beq.n	8003f32 <__sflush_r+0x36>
 8003faa:	2b1d      	cmp	r3, #29
 8003fac:	d001      	beq.n	8003fb2 <__sflush_r+0xb6>
 8003fae:	2b16      	cmp	r3, #22
 8003fb0:	d11a      	bne.n	8003fe8 <__sflush_r+0xec>
 8003fb2:	602e      	str	r6, [r5, #0]
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	e01e      	b.n	8003ff6 <__sflush_r+0xfa>
 8003fb8:	690e      	ldr	r6, [r1, #16]
 8003fba:	2e00      	cmp	r6, #0
 8003fbc:	d0fa      	beq.n	8003fb4 <__sflush_r+0xb8>
 8003fbe:	680f      	ldr	r7, [r1, #0]
 8003fc0:	600e      	str	r6, [r1, #0]
 8003fc2:	1bba      	subs	r2, r7, r6
 8003fc4:	9201      	str	r2, [sp, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	079b      	lsls	r3, r3, #30
 8003fca:	d100      	bne.n	8003fce <__sflush_r+0xd2>
 8003fcc:	694a      	ldr	r2, [r1, #20]
 8003fce:	60a2      	str	r2, [r4, #8]
 8003fd0:	9b01      	ldr	r3, [sp, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	ddee      	ble.n	8003fb4 <__sflush_r+0xb8>
 8003fd6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003fd8:	0032      	movs	r2, r6
 8003fda:	001f      	movs	r7, r3
 8003fdc:	0028      	movs	r0, r5
 8003fde:	9b01      	ldr	r3, [sp, #4]
 8003fe0:	6a21      	ldr	r1, [r4, #32]
 8003fe2:	47b8      	blx	r7
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	dc07      	bgt.n	8003ff8 <__sflush_r+0xfc>
 8003fe8:	89a2      	ldrh	r2, [r4, #12]
 8003fea:	2340      	movs	r3, #64	@ 0x40
 8003fec:	2001      	movs	r0, #1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	b21b      	sxth	r3, r3
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	4240      	negs	r0, r0
 8003ff6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ff8:	9b01      	ldr	r3, [sp, #4]
 8003ffa:	1836      	adds	r6, r6, r0
 8003ffc:	1a1b      	subs	r3, r3, r0
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	e7e6      	b.n	8003fd0 <__sflush_r+0xd4>
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	dfbffffe 	.word	0xdfbffffe

08004008 <_fflush_r>:
 8004008:	690b      	ldr	r3, [r1, #16]
 800400a:	b570      	push	{r4, r5, r6, lr}
 800400c:	0005      	movs	r5, r0
 800400e:	000c      	movs	r4, r1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <_fflush_r+0x12>
 8004014:	2500      	movs	r5, #0
 8004016:	0028      	movs	r0, r5
 8004018:	bd70      	pop	{r4, r5, r6, pc}
 800401a:	2800      	cmp	r0, #0
 800401c:	d004      	beq.n	8004028 <_fflush_r+0x20>
 800401e:	6a03      	ldr	r3, [r0, #32]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <_fflush_r+0x20>
 8004024:	f7ff f8bc 	bl	80031a0 <__sinit>
 8004028:	220c      	movs	r2, #12
 800402a:	5ea3      	ldrsh	r3, [r4, r2]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f1      	beq.n	8004014 <_fflush_r+0xc>
 8004030:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004032:	07d2      	lsls	r2, r2, #31
 8004034:	d404      	bmi.n	8004040 <_fflush_r+0x38>
 8004036:	059b      	lsls	r3, r3, #22
 8004038:	d402      	bmi.n	8004040 <_fflush_r+0x38>
 800403a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800403c:	f7ff fc29 	bl	8003892 <__retarget_lock_acquire_recursive>
 8004040:	0028      	movs	r0, r5
 8004042:	0021      	movs	r1, r4
 8004044:	f7ff ff5a 	bl	8003efc <__sflush_r>
 8004048:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800404a:	0005      	movs	r5, r0
 800404c:	07db      	lsls	r3, r3, #31
 800404e:	d4e2      	bmi.n	8004016 <_fflush_r+0xe>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	059b      	lsls	r3, r3, #22
 8004054:	d4df      	bmi.n	8004016 <_fflush_r+0xe>
 8004056:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004058:	f7ff fc1c 	bl	8003894 <__retarget_lock_release_recursive>
 800405c:	e7db      	b.n	8004016 <_fflush_r+0xe>
	...

08004060 <fiprintf>:
 8004060:	b40e      	push	{r1, r2, r3}
 8004062:	b517      	push	{r0, r1, r2, r4, lr}
 8004064:	4c05      	ldr	r4, [pc, #20]	@ (800407c <fiprintf+0x1c>)
 8004066:	ab05      	add	r3, sp, #20
 8004068:	cb04      	ldmia	r3!, {r2}
 800406a:	0001      	movs	r1, r0
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	f7ff fcaa 	bl	80039c8 <_vfiprintf_r>
 8004074:	bc1e      	pop	{r1, r2, r3, r4}
 8004076:	bc08      	pop	{r3}
 8004078:	b003      	add	sp, #12
 800407a:	4718      	bx	r3
 800407c:	20000028 	.word	0x20000028

08004080 <_getc_r>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	0005      	movs	r5, r0
 8004084:	000c      	movs	r4, r1
 8004086:	2800      	cmp	r0, #0
 8004088:	d004      	beq.n	8004094 <_getc_r+0x14>
 800408a:	6a03      	ldr	r3, [r0, #32]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <_getc_r+0x14>
 8004090:	f7ff f886 	bl	80031a0 <__sinit>
 8004094:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004096:	07db      	lsls	r3, r3, #31
 8004098:	d405      	bmi.n	80040a6 <_getc_r+0x26>
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	059b      	lsls	r3, r3, #22
 800409e:	d402      	bmi.n	80040a6 <_getc_r+0x26>
 80040a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040a2:	f7ff fbf6 	bl	8003892 <__retarget_lock_acquire_recursive>
 80040a6:	6863      	ldr	r3, [r4, #4]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	6063      	str	r3, [r4, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	da0f      	bge.n	80040d0 <_getc_r+0x50>
 80040b0:	0028      	movs	r0, r5
 80040b2:	0021      	movs	r1, r4
 80040b4:	f000 f8b3 	bl	800421e <__srget_r>
 80040b8:	0005      	movs	r5, r0
 80040ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040bc:	07db      	lsls	r3, r3, #31
 80040be:	d405      	bmi.n	80040cc <_getc_r+0x4c>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	059b      	lsls	r3, r3, #22
 80040c4:	d402      	bmi.n	80040cc <_getc_r+0x4c>
 80040c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040c8:	f7ff fbe4 	bl	8003894 <__retarget_lock_release_recursive>
 80040cc:	0028      	movs	r0, r5
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	6022      	str	r2, [r4, #0]
 80040d6:	781d      	ldrb	r5, [r3, #0]
 80040d8:	e7ef      	b.n	80040ba <_getc_r+0x3a>
	...

080040dc <__swhatbuf_r>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	000e      	movs	r6, r1
 80040e0:	001d      	movs	r5, r3
 80040e2:	230e      	movs	r3, #14
 80040e4:	5ec9      	ldrsh	r1, [r1, r3]
 80040e6:	0014      	movs	r4, r2
 80040e8:	b096      	sub	sp, #88	@ 0x58
 80040ea:	2900      	cmp	r1, #0
 80040ec:	da0c      	bge.n	8004108 <__swhatbuf_r+0x2c>
 80040ee:	89b2      	ldrh	r2, [r6, #12]
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	0011      	movs	r1, r2
 80040f4:	4019      	ands	r1, r3
 80040f6:	421a      	tst	r2, r3
 80040f8:	d114      	bne.n	8004124 <__swhatbuf_r+0x48>
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	2000      	movs	r0, #0
 8004100:	6029      	str	r1, [r5, #0]
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	b016      	add	sp, #88	@ 0x58
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	466a      	mov	r2, sp
 800410a:	f000 f8a3 	bl	8004254 <_fstat_r>
 800410e:	2800      	cmp	r0, #0
 8004110:	dbed      	blt.n	80040ee <__swhatbuf_r+0x12>
 8004112:	23f0      	movs	r3, #240	@ 0xf0
 8004114:	9901      	ldr	r1, [sp, #4]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	4019      	ands	r1, r3
 800411a:	4b04      	ldr	r3, [pc, #16]	@ (800412c <__swhatbuf_r+0x50>)
 800411c:	18c9      	adds	r1, r1, r3
 800411e:	424b      	negs	r3, r1
 8004120:	4159      	adcs	r1, r3
 8004122:	e7ea      	b.n	80040fa <__swhatbuf_r+0x1e>
 8004124:	2100      	movs	r1, #0
 8004126:	2340      	movs	r3, #64	@ 0x40
 8004128:	e7e9      	b.n	80040fe <__swhatbuf_r+0x22>
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	ffffe000 	.word	0xffffe000

08004130 <__smakebuf_r>:
 8004130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004132:	2602      	movs	r6, #2
 8004134:	898b      	ldrh	r3, [r1, #12]
 8004136:	0005      	movs	r5, r0
 8004138:	000c      	movs	r4, r1
 800413a:	b085      	sub	sp, #20
 800413c:	4233      	tst	r3, r6
 800413e:	d007      	beq.n	8004150 <__smakebuf_r+0x20>
 8004140:	0023      	movs	r3, r4
 8004142:	3347      	adds	r3, #71	@ 0x47
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	6123      	str	r3, [r4, #16]
 8004148:	2301      	movs	r3, #1
 800414a:	6163      	str	r3, [r4, #20]
 800414c:	b005      	add	sp, #20
 800414e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004150:	ab03      	add	r3, sp, #12
 8004152:	aa02      	add	r2, sp, #8
 8004154:	f7ff ffc2 	bl	80040dc <__swhatbuf_r>
 8004158:	9f02      	ldr	r7, [sp, #8]
 800415a:	9001      	str	r0, [sp, #4]
 800415c:	0039      	movs	r1, r7
 800415e:	0028      	movs	r0, r5
 8004160:	f7fe fe68 	bl	8002e34 <_malloc_r>
 8004164:	2800      	cmp	r0, #0
 8004166:	d108      	bne.n	800417a <__smakebuf_r+0x4a>
 8004168:	220c      	movs	r2, #12
 800416a:	5ea3      	ldrsh	r3, [r4, r2]
 800416c:	059a      	lsls	r2, r3, #22
 800416e:	d4ed      	bmi.n	800414c <__smakebuf_r+0x1c>
 8004170:	2203      	movs	r2, #3
 8004172:	4393      	bics	r3, r2
 8004174:	431e      	orrs	r6, r3
 8004176:	81a6      	strh	r6, [r4, #12]
 8004178:	e7e2      	b.n	8004140 <__smakebuf_r+0x10>
 800417a:	2380      	movs	r3, #128	@ 0x80
 800417c:	89a2      	ldrh	r2, [r4, #12]
 800417e:	6020      	str	r0, [r4, #0]
 8004180:	4313      	orrs	r3, r2
 8004182:	81a3      	strh	r3, [r4, #12]
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	6120      	str	r0, [r4, #16]
 8004188:	6167      	str	r7, [r4, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <__smakebuf_r+0x78>
 800418e:	0028      	movs	r0, r5
 8004190:	230e      	movs	r3, #14
 8004192:	5ee1      	ldrsh	r1, [r4, r3]
 8004194:	f000 f870 	bl	8004278 <_isatty_r>
 8004198:	2800      	cmp	r0, #0
 800419a:	d005      	beq.n	80041a8 <__smakebuf_r+0x78>
 800419c:	2303      	movs	r3, #3
 800419e:	89a2      	ldrh	r2, [r4, #12]
 80041a0:	439a      	bics	r2, r3
 80041a2:	3b02      	subs	r3, #2
 80041a4:	4313      	orrs	r3, r2
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	9a01      	ldr	r2, [sp, #4]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	81a3      	strh	r3, [r4, #12]
 80041b0:	e7cc      	b.n	800414c <__smakebuf_r+0x1c>

080041b2 <_putc_r>:
 80041b2:	b570      	push	{r4, r5, r6, lr}
 80041b4:	0006      	movs	r6, r0
 80041b6:	000d      	movs	r5, r1
 80041b8:	0014      	movs	r4, r2
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d004      	beq.n	80041c8 <_putc_r+0x16>
 80041be:	6a03      	ldr	r3, [r0, #32]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <_putc_r+0x16>
 80041c4:	f7fe ffec 	bl	80031a0 <__sinit>
 80041c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041ca:	07db      	lsls	r3, r3, #31
 80041cc:	d405      	bmi.n	80041da <_putc_r+0x28>
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	059b      	lsls	r3, r3, #22
 80041d2:	d402      	bmi.n	80041da <_putc_r+0x28>
 80041d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041d6:	f7ff fb5c 	bl	8003892 <__retarget_lock_acquire_recursive>
 80041da:	68a3      	ldr	r3, [r4, #8]
 80041dc:	3b01      	subs	r3, #1
 80041de:	60a3      	str	r3, [r4, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	da05      	bge.n	80041f0 <_putc_r+0x3e>
 80041e4:	69a2      	ldr	r2, [r4, #24]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	db12      	blt.n	8004210 <_putc_r+0x5e>
 80041ea:	b2eb      	uxtb	r3, r5
 80041ec:	2b0a      	cmp	r3, #10
 80041ee:	d00f      	beq.n	8004210 <_putc_r+0x5e>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	6022      	str	r2, [r4, #0]
 80041f6:	701d      	strb	r5, [r3, #0]
 80041f8:	b2ed      	uxtb	r5, r5
 80041fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041fc:	07db      	lsls	r3, r3, #31
 80041fe:	d405      	bmi.n	800420c <_putc_r+0x5a>
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	059b      	lsls	r3, r3, #22
 8004204:	d402      	bmi.n	800420c <_putc_r+0x5a>
 8004206:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004208:	f7ff fb44 	bl	8003894 <__retarget_lock_release_recursive>
 800420c:	0028      	movs	r0, r5
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	0029      	movs	r1, r5
 8004212:	0022      	movs	r2, r4
 8004214:	0030      	movs	r0, r6
 8004216:	f7ff f97d 	bl	8003514 <__swbuf_r>
 800421a:	0005      	movs	r5, r0
 800421c:	e7ed      	b.n	80041fa <_putc_r+0x48>

0800421e <__srget_r>:
 800421e:	b570      	push	{r4, r5, r6, lr}
 8004220:	0005      	movs	r5, r0
 8004222:	000c      	movs	r4, r1
 8004224:	2800      	cmp	r0, #0
 8004226:	d004      	beq.n	8004232 <__srget_r+0x14>
 8004228:	6a03      	ldr	r3, [r0, #32]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <__srget_r+0x14>
 800422e:	f7fe ffb7 	bl	80031a0 <__sinit>
 8004232:	0021      	movs	r1, r4
 8004234:	0028      	movs	r0, r5
 8004236:	f000 f851 	bl	80042dc <__srefill_r>
 800423a:	2800      	cmp	r0, #0
 800423c:	d107      	bne.n	800424e <__srget_r+0x30>
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	3b01      	subs	r3, #1
 8004242:	6063      	str	r3, [r4, #4]
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	6022      	str	r2, [r4, #0]
 800424a:	7818      	ldrb	r0, [r3, #0]
 800424c:	bd70      	pop	{r4, r5, r6, pc}
 800424e:	2001      	movs	r0, #1
 8004250:	4240      	negs	r0, r0
 8004252:	e7fb      	b.n	800424c <__srget_r+0x2e>

08004254 <_fstat_r>:
 8004254:	2300      	movs	r3, #0
 8004256:	b570      	push	{r4, r5, r6, lr}
 8004258:	4d06      	ldr	r5, [pc, #24]	@ (8004274 <_fstat_r+0x20>)
 800425a:	0004      	movs	r4, r0
 800425c:	0008      	movs	r0, r1
 800425e:	0011      	movs	r1, r2
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	f7fe f84f 	bl	8002304 <_fstat>
 8004266:	1c43      	adds	r3, r0, #1
 8004268:	d103      	bne.n	8004272 <_fstat_r+0x1e>
 800426a:	682b      	ldr	r3, [r5, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d000      	beq.n	8004272 <_fstat_r+0x1e>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	200008d4 	.word	0x200008d4

08004278 <_isatty_r>:
 8004278:	2300      	movs	r3, #0
 800427a:	b570      	push	{r4, r5, r6, lr}
 800427c:	4d06      	ldr	r5, [pc, #24]	@ (8004298 <_isatty_r+0x20>)
 800427e:	0004      	movs	r4, r0
 8004280:	0008      	movs	r0, r1
 8004282:	602b      	str	r3, [r5, #0]
 8004284:	f7fe f84c 	bl	8002320 <_isatty>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d103      	bne.n	8004294 <_isatty_r+0x1c>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d000      	beq.n	8004294 <_isatty_r+0x1c>
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	bd70      	pop	{r4, r5, r6, pc}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	200008d4 	.word	0x200008d4

0800429c <memchr>:
 800429c:	b2c9      	uxtb	r1, r1
 800429e:	1882      	adds	r2, r0, r2
 80042a0:	4290      	cmp	r0, r2
 80042a2:	d101      	bne.n	80042a8 <memchr+0xc>
 80042a4:	2000      	movs	r0, #0
 80042a6:	4770      	bx	lr
 80042a8:	7803      	ldrb	r3, [r0, #0]
 80042aa:	428b      	cmp	r3, r1
 80042ac:	d0fb      	beq.n	80042a6 <memchr+0xa>
 80042ae:	3001      	adds	r0, #1
 80042b0:	e7f6      	b.n	80042a0 <memchr+0x4>

080042b2 <abort>:
 80042b2:	2006      	movs	r0, #6
 80042b4:	b510      	push	{r4, lr}
 80042b6:	f000 f8b1 	bl	800441c <raise>
 80042ba:	2001      	movs	r0, #1
 80042bc:	f7fd ffd2 	bl	8002264 <_exit>

080042c0 <lflush>:
 80042c0:	2209      	movs	r2, #9
 80042c2:	898b      	ldrh	r3, [r1, #12]
 80042c4:	2000      	movs	r0, #0
 80042c6:	b510      	push	{r4, lr}
 80042c8:	4013      	ands	r3, r2
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d103      	bne.n	80042d6 <lflush+0x16>
 80042ce:	4b02      	ldr	r3, [pc, #8]	@ (80042d8 <lflush+0x18>)
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	f7ff fe99 	bl	8004008 <_fflush_r>
 80042d6:	bd10      	pop	{r4, pc}
 80042d8:	20000028 	.word	0x20000028

080042dc <__srefill_r>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	0005      	movs	r5, r0
 80042e0:	000c      	movs	r4, r1
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d004      	beq.n	80042f0 <__srefill_r+0x14>
 80042e6:	6a03      	ldr	r3, [r0, #32]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <__srefill_r+0x14>
 80042ec:	f7fe ff58 	bl	80031a0 <__sinit>
 80042f0:	2300      	movs	r3, #0
 80042f2:	6063      	str	r3, [r4, #4]
 80042f4:	220c      	movs	r2, #12
 80042f6:	5ea3      	ldrsh	r3, [r4, r2]
 80042f8:	069a      	lsls	r2, r3, #26
 80042fa:	d408      	bmi.n	800430e <__srefill_r+0x32>
 80042fc:	075a      	lsls	r2, r3, #29
 80042fe:	d449      	bmi.n	8004394 <__srefill_r+0xb8>
 8004300:	06da      	lsls	r2, r3, #27
 8004302:	d407      	bmi.n	8004314 <__srefill_r+0x38>
 8004304:	2209      	movs	r2, #9
 8004306:	602a      	str	r2, [r5, #0]
 8004308:	3237      	adds	r2, #55	@ 0x37
 800430a:	4313      	orrs	r3, r2
 800430c:	81a3      	strh	r3, [r4, #12]
 800430e:	2001      	movs	r0, #1
 8004310:	4240      	negs	r0, r0
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	2608      	movs	r6, #8
 8004316:	4233      	tst	r3, r6
 8004318:	d00a      	beq.n	8004330 <__srefill_r+0x54>
 800431a:	0021      	movs	r1, r4
 800431c:	0028      	movs	r0, r5
 800431e:	f7ff fe73 	bl	8004008 <_fflush_r>
 8004322:	2800      	cmp	r0, #0
 8004324:	d1f3      	bne.n	800430e <__srefill_r+0x32>
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	60a0      	str	r0, [r4, #8]
 800432a:	43b3      	bics	r3, r6
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	61a0      	str	r0, [r4, #24]
 8004330:	2304      	movs	r3, #4
 8004332:	89a2      	ldrh	r2, [r4, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	6923      	ldr	r3, [r4, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <__srefill_r+0x6a>
 800433e:	0021      	movs	r1, r4
 8004340:	0028      	movs	r0, r5
 8004342:	f7ff fef5 	bl	8004130 <__smakebuf_r>
 8004346:	230c      	movs	r3, #12
 8004348:	5ee6      	ldrsh	r6, [r4, r3]
 800434a:	07b3      	lsls	r3, r6, #30
 800434c:	d00f      	beq.n	800436e <__srefill_r+0x92>
 800434e:	2301      	movs	r3, #1
 8004350:	4a1a      	ldr	r2, [pc, #104]	@ (80043bc <__srefill_r+0xe0>)
 8004352:	81a3      	strh	r3, [r4, #12]
 8004354:	491a      	ldr	r1, [pc, #104]	@ (80043c0 <__srefill_r+0xe4>)
 8004356:	481b      	ldr	r0, [pc, #108]	@ (80043c4 <__srefill_r+0xe8>)
 8004358:	f7fe ff3a 	bl	80031d0 <_fwalk_sglue>
 800435c:	2309      	movs	r3, #9
 800435e:	81a6      	strh	r6, [r4, #12]
 8004360:	401e      	ands	r6, r3
 8004362:	429e      	cmp	r6, r3
 8004364:	d103      	bne.n	800436e <__srefill_r+0x92>
 8004366:	0021      	movs	r1, r4
 8004368:	0028      	movs	r0, r5
 800436a:	f7ff fdc7 	bl	8003efc <__sflush_r>
 800436e:	6922      	ldr	r2, [r4, #16]
 8004370:	0028      	movs	r0, r5
 8004372:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8004374:	6963      	ldr	r3, [r4, #20]
 8004376:	6a21      	ldr	r1, [r4, #32]
 8004378:	6022      	str	r2, [r4, #0]
 800437a:	47b0      	blx	r6
 800437c:	6060      	str	r0, [r4, #4]
 800437e:	2800      	cmp	r0, #0
 8004380:	dc1a      	bgt.n	80043b8 <__srefill_r+0xdc>
 8004382:	230c      	movs	r3, #12
 8004384:	5ee2      	ldrsh	r2, [r4, r3]
 8004386:	2320      	movs	r3, #32
 8004388:	2800      	cmp	r0, #0
 800438a:	d0be      	beq.n	800430a <__srefill_r+0x2e>
 800438c:	2300      	movs	r3, #0
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	3340      	adds	r3, #64	@ 0x40
 8004392:	e7ba      	b.n	800430a <__srefill_r+0x2e>
 8004394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004396:	2900      	cmp	r1, #0
 8004398:	d0ce      	beq.n	8004338 <__srefill_r+0x5c>
 800439a:	0023      	movs	r3, r4
 800439c:	3344      	adds	r3, #68	@ 0x44
 800439e:	4299      	cmp	r1, r3
 80043a0:	d002      	beq.n	80043a8 <__srefill_r+0xcc>
 80043a2:	0028      	movs	r0, r5
 80043a4:	f7ff fa9e 	bl	80038e4 <_free_r>
 80043a8:	2300      	movs	r3, #0
 80043aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80043ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043ae:	6063      	str	r3, [r4, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0c1      	beq.n	8004338 <__srefill_r+0x5c>
 80043b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	2000      	movs	r0, #0
 80043ba:	e7aa      	b.n	8004312 <__srefill_r+0x36>
 80043bc:	2000001c 	.word	0x2000001c
 80043c0:	080042c1 	.word	0x080042c1
 80043c4:	2000002c 	.word	0x2000002c

080043c8 <_raise_r>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	0004      	movs	r4, r0
 80043cc:	000d      	movs	r5, r1
 80043ce:	291f      	cmp	r1, #31
 80043d0:	d904      	bls.n	80043dc <_raise_r+0x14>
 80043d2:	2316      	movs	r3, #22
 80043d4:	6003      	str	r3, [r0, #0]
 80043d6:	2001      	movs	r0, #1
 80043d8:	4240      	negs	r0, r0
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <_raise_r+0x24>
 80043e2:	008a      	lsls	r2, r1, #2
 80043e4:	189b      	adds	r3, r3, r2
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	d108      	bne.n	80043fe <_raise_r+0x36>
 80043ec:	0020      	movs	r0, r4
 80043ee:	f000 f831 	bl	8004454 <_getpid_r>
 80043f2:	002a      	movs	r2, r5
 80043f4:	0001      	movs	r1, r0
 80043f6:	0020      	movs	r0, r4
 80043f8:	f000 f81a 	bl	8004430 <_kill_r>
 80043fc:	e7ed      	b.n	80043da <_raise_r+0x12>
 80043fe:	2a01      	cmp	r2, #1
 8004400:	d009      	beq.n	8004416 <_raise_r+0x4e>
 8004402:	1c51      	adds	r1, r2, #1
 8004404:	d103      	bne.n	800440e <_raise_r+0x46>
 8004406:	2316      	movs	r3, #22
 8004408:	6003      	str	r3, [r0, #0]
 800440a:	2001      	movs	r0, #1
 800440c:	e7e5      	b.n	80043da <_raise_r+0x12>
 800440e:	2100      	movs	r1, #0
 8004410:	0028      	movs	r0, r5
 8004412:	6019      	str	r1, [r3, #0]
 8004414:	4790      	blx	r2
 8004416:	2000      	movs	r0, #0
 8004418:	e7df      	b.n	80043da <_raise_r+0x12>
	...

0800441c <raise>:
 800441c:	b510      	push	{r4, lr}
 800441e:	4b03      	ldr	r3, [pc, #12]	@ (800442c <raise+0x10>)
 8004420:	0001      	movs	r1, r0
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	f7ff ffd0 	bl	80043c8 <_raise_r>
 8004428:	bd10      	pop	{r4, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	20000028 	.word	0x20000028

08004430 <_kill_r>:
 8004430:	2300      	movs	r3, #0
 8004432:	b570      	push	{r4, r5, r6, lr}
 8004434:	4d06      	ldr	r5, [pc, #24]	@ (8004450 <_kill_r+0x20>)
 8004436:	0004      	movs	r4, r0
 8004438:	0008      	movs	r0, r1
 800443a:	0011      	movs	r1, r2
 800443c:	602b      	str	r3, [r5, #0]
 800443e:	f7fd ff01 	bl	8002244 <_kill>
 8004442:	1c43      	adds	r3, r0, #1
 8004444:	d103      	bne.n	800444e <_kill_r+0x1e>
 8004446:	682b      	ldr	r3, [r5, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d000      	beq.n	800444e <_kill_r+0x1e>
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	200008d4 	.word	0x200008d4

08004454 <_getpid_r>:
 8004454:	b510      	push	{r4, lr}
 8004456:	f7fd feef 	bl	8002238 <_getpid>
 800445a:	bd10      	pop	{r4, pc}

0800445c <_init>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr

08004468 <_fini>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr
