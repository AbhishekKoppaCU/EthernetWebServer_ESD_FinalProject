
Assignment6_SerialIO_Answer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003250  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  08003310  08003310  00004310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c5c  08003c5c  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  08003c5c  08003c5c  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c5c  08003c5c  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c60  08003c60  00004c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003c64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000060  08003cc4  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08003cc4  000052e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003505  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001164  00000000  00000000  0000858d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  000096f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000026f  00000000  00000000  00009a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015826  00000000  00000000  00009cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d04  00000000  00000000  0001f4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000698f9  00000000  00000000  000251f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0008eaea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016a4  00000000  00000000  0008eb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  00090214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032f8 	.word	0x080032f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080032f8 	.word	0x080032f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <cbfifo_init>:


/*
 * Initialize the FIFO structure.
 */
void cbfifo_init(cbfifo_t *fifo) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d00b      	beq.n	800026a <cbfifo_init+0x26>
        fifo->write = 0;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2280      	movs	r2, #128	@ 0x80
 8000256:	2100      	movs	r1, #0
 8000258:	5099      	str	r1, [r3, r2]
        fifo->read = 0;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2284      	movs	r2, #132	@ 0x84
 800025e:	2100      	movs	r1, #0
 8000260:	5099      	str	r1, [r3, r2]
        fifo->length = 0;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2288      	movs	r2, #136	@ 0x88
 8000266:	2100      	movs	r1, #0
 8000268:	5099      	str	r1, [r3, r2]
    }
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <cbfifo_enqueue>:
 *
 * Returns:
 *   The number of bytes actually enqueued, which could be 0.
 *   In case of an error, returns (size_t) -1.
 */
size_t cbfifo_enqueue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 8000272:	b580      	push	{r7, lr}
 8000274:	b088      	sub	sp, #32
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL) {
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <cbfifo_enqueue+0x18>
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <cbfifo_enqueue+0x1e>
        return FIFO_ERROR;
 800028a:	2301      	movs	r3, #1
 800028c:	425b      	negs	r3, r3
 800028e:	e03b      	b.n	8000308 <cbfifo_enqueue+0x96>
    }
    if (nbyte == 0) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d101      	bne.n	800029a <cbfifo_enqueue+0x28>
        return 0;
 8000296:	2300      	movs	r3, #0
 8000298:	e036      	b.n	8000308 <cbfifo_enqueue+0x96>
    }
    size_t blank = (MAX_FIFO_SIZE - (fifo->length));
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	2288      	movs	r2, #136	@ 0x88
 800029e:	589b      	ldr	r3, [r3, r2]
 80002a0:	2280      	movs	r2, #128	@ 0x80
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	61bb      	str	r3, [r7, #24]
    if (blank == 0) {
 80002a6:	69bb      	ldr	r3, [r7, #24]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d101      	bne.n	80002b0 <cbfifo_enqueue+0x3e>
        return 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	e02b      	b.n	8000308 <cbfifo_enqueue+0x96>
    }
    size_t endq = (nbyte <= blank) ? nbyte : blank;
 80002b0:	69ba      	ldr	r2, [r7, #24]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d900      	bls.n	80002ba <cbfifo_enqueue+0x48>
 80002b8:	0013      	movs	r3, r2
 80002ba:	617b      	str	r3, [r7, #20]
    uint8_t *temp = (uint8_t*)buf;
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < endq; i++) {
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
 80002c4:	e01b      	b.n	80002fe <cbfifo_enqueue+0x8c>
        fifo->buffer[fifo->write] = temp[i];
 80002c6:	693a      	ldr	r2, [r7, #16]
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	18d2      	adds	r2, r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2180      	movs	r1, #128	@ 0x80
 80002d0:	585b      	ldr	r3, [r3, r1]
 80002d2:	7811      	ldrb	r1, [r2, #0]
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	54d1      	strb	r1, [r2, r3]
        fifo->length++;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2288      	movs	r2, #136	@ 0x88
 80002dc:	589b      	ldr	r3, [r3, r2]
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	2188      	movs	r1, #136	@ 0x88
 80002e4:	505a      	str	r2, [r3, r1]
        fifo->write = ((fifo->write + 1) & (MAX_FIFO_SIZE-1)); // Increment write pointer with wrap-around
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2280      	movs	r2, #128	@ 0x80
 80002ea:	589b      	ldr	r3, [r3, r2]
 80002ec:	3301      	adds	r3, #1
 80002ee:	227f      	movs	r2, #127	@ 0x7f
 80002f0:	401a      	ands	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2180      	movs	r1, #128	@ 0x80
 80002f6:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	3301      	adds	r3, #1
 80002fc:	61fb      	str	r3, [r7, #28]
 80002fe:	69fa      	ldr	r2, [r7, #28]
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3df      	bcc.n	80002c6 <cbfifo_enqueue+0x54>
    }
    return endq;
 8000306:	697b      	ldr	r3, [r7, #20]
}
 8000308:	0018      	movs	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	b008      	add	sp, #32
 800030e:	bd80      	pop	{r7, pc}

08000310 <cbfifo_dequeue>:
 *   nbyte   Bytes of data requested
 *
 * Returns:
 *   The number of bytes actually removed.
 */
size_t cbfifo_dequeue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL || nbyte == 0 || fifo->length == 0) {
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d00a      	beq.n	8000338 <cbfifo_dequeue+0x28>
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d007      	beq.n	8000338 <cbfifo_dequeue+0x28>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <cbfifo_dequeue+0x28>
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2288      	movs	r2, #136	@ 0x88
 8000332:	589b      	ldr	r3, [r3, r2]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d101      	bne.n	800033c <cbfifo_dequeue+0x2c>
        return 0;
 8000338:	2300      	movs	r3, #0
 800033a:	e02d      	b.n	8000398 <cbfifo_dequeue+0x88>
    }
    size_t endq = (nbyte <= fifo->length) ? nbyte : fifo->length;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	2288      	movs	r2, #136	@ 0x88
 8000340:	589a      	ldr	r2, [r3, r2]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4293      	cmp	r3, r2
 8000346:	d900      	bls.n	800034a <cbfifo_dequeue+0x3a>
 8000348:	0013      	movs	r3, r2
 800034a:	61bb      	str	r3, [r7, #24]
    uint8_t *temp = (uint8_t*)buf;
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < endq; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
 8000354:	e01b      	b.n	800038e <cbfifo_dequeue+0x7e>
        temp[i] = fifo->buffer[fifo->read];
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2284      	movs	r2, #132	@ 0x84
 800035a:	589a      	ldr	r2, [r3, r2]
 800035c:	6979      	ldr	r1, [r7, #20]
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	18cb      	adds	r3, r1, r3
 8000362:	68f9      	ldr	r1, [r7, #12]
 8000364:	5c8a      	ldrb	r2, [r1, r2]
 8000366:	701a      	strb	r2, [r3, #0]
        fifo->length--;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2288      	movs	r2, #136	@ 0x88
 800036c:	589b      	ldr	r3, [r3, r2]
 800036e:	1e5a      	subs	r2, r3, #1
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	2188      	movs	r1, #136	@ 0x88
 8000374:	505a      	str	r2, [r3, r1]
        fifo->read = ((fifo->read + 1) & (MAX_FIFO_SIZE-1)); // Increment read pointer with wrap-around
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2284      	movs	r2, #132	@ 0x84
 800037a:	589b      	ldr	r3, [r3, r2]
 800037c:	3301      	adds	r3, #1
 800037e:	227f      	movs	r2, #127	@ 0x7f
 8000380:	401a      	ands	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2184      	movs	r1, #132	@ 0x84
 8000386:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	3301      	adds	r3, #1
 800038c:	61fb      	str	r3, [r7, #28]
 800038e:	69fa      	ldr	r2, [r7, #28]
 8000390:	69bb      	ldr	r3, [r7, #24]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3df      	bcc.n	8000356 <cbfifo_dequeue+0x46>
    }
    return endq;
 8000396:	69bb      	ldr	r3, [r7, #24]
}
 8000398:	0018      	movs	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	b008      	add	sp, #32
 800039e:	bd80      	pop	{r7, pc}

080003a0 <cbfifo_length>:
 *   fifo    Pointer to the FIFO structure
 *
 * Returns:
 *   Number of bytes currently available to be dequeued from the FIFO.
 */
size_t cbfifo_length(cbfifo_t *fifo) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
    return (fifo != NULL) ? fifo->length : 0; // Return length or 0 if fifo is NULL
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d003      	beq.n	80003b6 <cbfifo_length+0x16>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2288      	movs	r2, #136	@ 0x88
 80003b2:	589b      	ldr	r3, [r3, r2]
 80003b4:	e000      	b.n	80003b8 <cbfifo_length+0x18>
 80003b6:	2300      	movs	r3, #0
}
 80003b8:	0018      	movs	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b002      	add	sp, #8
 80003be:	bd80      	pop	{r7, pc}

080003c0 <ULED_ON>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_ON() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_ON_MASK;
 80003c4:	2390      	movs	r3, #144	@ 0x90
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	699a      	ldr	r2, [r3, #24]
 80003ca:	2390      	movs	r3, #144	@ 0x90
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2120      	movs	r1, #32
 80003d0:	430a      	orrs	r2, r1
 80003d2:	619a      	str	r2, [r3, #24]
}
 80003d4:	46c0      	nop			@ (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <ULED_OFF>:
 * 	 None.
 *
 * Returns:
 *   None.
 */
void ULED_OFF() {
 80003da:	b580      	push	{r7, lr}
 80003dc:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= ULED_OFF_MASK;
 80003de:	2390      	movs	r3, #144	@ 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	699a      	ldr	r2, [r3, #24]
 80003e4:	2390      	movs	r3, #144	@ 0x90
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	2180      	movs	r1, #128	@ 0x80
 80003ea:	0389      	lsls	r1, r1, #14
 80003ec:	430a      	orrs	r2, r1
 80003ee:	619a      	str	r2, [r3, #24]
}
 80003f0:	46c0      	nop			@ (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <cmd_led>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_led(int argc, char *argv[]) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	if (argc != 2) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b02      	cmp	r3, #2
 8000406:	d004      	beq.n	8000412 <cmd_led+0x1a>
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 8000408:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <cmd_led+0x6c>)
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fecc 	bl	80021a8 <puts>
		return;
 8000410:	e025      	b.n	800045e <cmd_led+0x66>
	}
	if (strcasecmp(argv[1], "ON") == 0) {
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	3304      	adds	r3, #4
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <cmd_led+0x70>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f002 f877 	bl	8002510 <strcasecmp>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d106      	bne.n	8000434 <cmd_led+0x3c>
		ULED_ON();
 8000426:	f7ff ffcb 	bl	80003c0 <ULED_ON>
		printf("\nLED turned ON\n");
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <cmd_led+0x74>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 febb 	bl	80021a8 <puts>
 8000432:	e014      	b.n	800045e <cmd_led+0x66>
	} else if (strcasecmp(argv[1], "OFF") == 0) {
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	3304      	adds	r3, #4
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <cmd_led+0x78>)
 800043c:	0011      	movs	r1, r2
 800043e:	0018      	movs	r0, r3
 8000440:	f002 f866 	bl	8002510 <strcasecmp>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d106      	bne.n	8000456 <cmd_led+0x5e>
		ULED_OFF();
 8000448:	f7ff ffc7 	bl	80003da <ULED_OFF>
		printf("\nLED turned OFF\n");
 800044c:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <cmd_led+0x7c>)
 800044e:	0018      	movs	r0, r3
 8000450:	f001 feaa 	bl	80021a8 <puts>
 8000454:	e003      	b.n	800045e <cmd_led+0x66>
	} else {
		printf("\nInvalid command: LED requires 'ON' or 'OFF'\n");
 8000456:	4b03      	ldr	r3, [pc, #12]	@ (8000464 <cmd_led+0x6c>)
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fea5 	bl	80021a8 <puts>
	}
}
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	08003378 	.word	0x08003378
 8000468:	080033a8 	.word	0x080033a8
 800046c:	080033ac 	.word	0x080033ac
 8000470:	080033bc 	.word	0x080033bc
 8000474:	080033c0 	.word	0x080033c0

08000478 <cmd_echo>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_echo(int argc, char *argv[]) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	printf("\n");
 8000482:	200a      	movs	r0, #10
 8000484:	f001 fe30 	bl	80020e8 <putchar>
	for (int i = 1; i < argc; i++) {
 8000488:	2301      	movs	r3, #1
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e00c      	b.n	80004a8 <cmd_echo+0x30>
		printf("%s ", argv[i]);
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	18d3      	adds	r3, r2, r3
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <cmd_echo+0x48>)
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fe13 	bl	80020c8 <iprintf>
	for (int i = 1; i < argc; i++) {
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dbee      	blt.n	800048e <cmd_echo+0x16>
	}
	printf("\n");
 80004b0:	200a      	movs	r0, #10
 80004b2:	f001 fe19 	bl	80020e8 <putchar>
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	080033d0 	.word	0x080033d0

080004c4 <cmd_hexdump>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void cmd_hexdump(int argc, char *argv[]) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	if (argc != 3) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d004      	beq.n	80004de <cmd_hexdump+0x1a>
		printf(
 80004d4:	4b5b      	ldr	r3, [pc, #364]	@ (8000644 <cmd_hexdump+0x180>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 fe66 	bl	80021a8 <puts>
				"\nInvalid command: HEXDUMP requires start and stop addresses\n");
		return;
 80004dc:	e0ae      	b.n	800063c <cmd_hexdump+0x178>
	}

	char *start_address_str = argv[1];
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	613b      	str	r3, [r7, #16]
	if (strlen(start_address_str) < 1 || strlen(start_address_str) > 8) {
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d006      	beq.n	80004fa <cmd_hexdump+0x36>
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff fe0a 	bl	8000108 <strlen>
 80004f4:	0003      	movs	r3, r0
 80004f6:	2b08      	cmp	r3, #8
 80004f8:	d904      	bls.n	8000504 <cmd_hexdump+0x40>
		printf("\nInvalid address\n");
 80004fa:	4b53      	ldr	r3, [pc, #332]	@ (8000648 <cmd_hexdump+0x184>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fe53 	bl	80021a8 <puts>
		return;
 8000502:	e09b      	b.n	800063c <cmd_hexdump+0x178>
	}

	for (int i = 0; i < strlen(start_address_str); i++) {
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
 8000508:	e01f      	b.n	800054a <cmd_hexdump+0x86>
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	693a      	ldr	r2, [r7, #16]
 800050e:	18d3      	adds	r3, r2, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b2f      	cmp	r3, #47	@ 0x2f
 8000514:	d905      	bls.n	8000522 <cmd_hexdump+0x5e>
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	18d3      	adds	r3, r2, r3
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b39      	cmp	r3, #57	@ 0x39
 8000520:	d910      	bls.n	8000544 <cmd_hexdump+0x80>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	18d3      	adds	r3, r2, r3
 8000528:	781b      	ldrb	r3, [r3, #0]
		if (!((start_address_str[i] >= '0' && start_address_str[i] <= '9')
 800052a:	2b40      	cmp	r3, #64	@ 0x40
 800052c:	d905      	bls.n	800053a <cmd_hexdump+0x76>
				|| (start_address_str[i] >= 'A' && start_address_str[i] <= 'F'))) {
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	18d3      	adds	r3, r2, r3
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b46      	cmp	r3, #70	@ 0x46
 8000538:	d904      	bls.n	8000544 <cmd_hexdump+0x80>
			printf("\nInvalid address\n");
 800053a:	4b43      	ldr	r3, [pc, #268]	@ (8000648 <cmd_hexdump+0x184>)
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fe33 	bl	80021a8 <puts>
			return;
 8000542:	e07b      	b.n	800063c <cmd_hexdump+0x178>
	for (int i = 0; i < strlen(start_address_str); i++) {
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	3301      	adds	r3, #1
 8000548:	61fb      	str	r3, [r7, #28]
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	0018      	movs	r0, r3
 800054e:	f7ff fddb 	bl	8000108 <strlen>
 8000552:	0002      	movs	r2, r0
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	429a      	cmp	r2, r3
 8000558:	d8d7      	bhi.n	800050a <cmd_hexdump+0x46>
		}
	}
	unsigned int start = (unsigned int) strtol(argv[1], NULL, 16);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	3304      	adds	r3, #4
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2210      	movs	r2, #16
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f001 fcd5 	bl	8001f14 <strtol>
 800056a:	0003      	movs	r3, r0
 800056c:	60fb      	str	r3, [r7, #12]
	unsigned int length;

	switch (strncmp(argv[2], "0X", 2) == 0) {
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3308      	adds	r3, #8
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4935      	ldr	r1, [pc, #212]	@ (800064c <cmd_hexdump+0x188>)
 8000576:	2202      	movs	r2, #2
 8000578:	0018      	movs	r0, r3
 800057a:	f001 ffe3 	bl	8002544 <strncmp>
 800057e:	0003      	movs	r3, r0
 8000580:	425a      	negs	r2, r3
 8000582:	4153      	adcs	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00c      	beq.n	80005a4 <cmd_hexdump+0xe0>
 800058a:	2b01      	cmp	r3, #1
 800058c:	d115      	bne.n	80005ba <cmd_hexdump+0xf6>
	case 1:
		length = (unsigned int) strtol(argv[2], NULL, 16);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	3308      	adds	r3, #8
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2210      	movs	r2, #16
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fcbb 	bl	8001f14 <strtol>
 800059e:	0003      	movs	r3, r0
 80005a0:	61bb      	str	r3, [r7, #24]
		break;
 80005a2:	e00a      	b.n	80005ba <cmd_hexdump+0xf6>
	case 0:
		length = (unsigned int) strtol(argv[2], NULL, 10);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	3308      	adds	r3, #8
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	220a      	movs	r2, #10
 80005ac:	2100      	movs	r1, #0
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fcb0 	bl	8001f14 <strtol>
 80005b4:	0003      	movs	r3, r0
 80005b6:	61bb      	str	r3, [r7, #24]
		break;
 80005b8:	46c0      	nop			@ (mov r8, r8)
	}

	if (length == 0 || length >= 640) {
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d004      	beq.n	80005ca <cmd_hexdump+0x106>
 80005c0:	69ba      	ldr	r2, [r7, #24]
 80005c2:	23a0      	movs	r3, #160	@ 0xa0
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d304      	bcc.n	80005d4 <cmd_hexdump+0x110>
		printf("\nInvalid length\n");
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <cmd_hexdump+0x18c>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fdeb 	bl	80021a8 <puts>
		return;
 80005d2:	e033      	b.n	800063c <cmd_hexdump+0x178>
	}

	printf("\nHexdump from %08X to %08X\n", start, start + length - 1);
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	68f9      	ldr	r1, [r7, #12]
 80005de:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <cmd_hexdump+0x190>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fd71 	bl	80020c8 <iprintf>

	char *buff = (char*) start;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < length; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e01e      	b.n	800062e <cmd_hexdump+0x16a>
		if ((i % 8) == 0) {
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	2207      	movs	r2, #7
 80005f4:	4013      	ands	r3, r2
 80005f6:	d10d      	bne.n	8000614 <cmd_hexdump+0x150>
			if (i != 0) {
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <cmd_hexdump+0x140>
				printf("\n");
 80005fe:	200a      	movs	r0, #10
 8000600:	f001 fd72 	bl	80020e8 <putchar>
			}
			printf("%08X ", start + i);  // Address with underscores
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	18d2      	adds	r2, r2, r3
 800060a:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <cmd_hexdump+0x194>)
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fd5a 	bl	80020c8 <iprintf>
		}
		printf("%02X ", (unsigned char) buff[i]);
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	001a      	movs	r2, r3
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <cmd_hexdump+0x198>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fd50 	bl	80020c8 <iprintf>
	for (int i = 0; i < length; i++) {
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	3301      	adds	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	69ba      	ldr	r2, [r7, #24]
 8000632:	429a      	cmp	r2, r3
 8000634:	d8dc      	bhi.n	80005f0 <cmd_hexdump+0x12c>
	}

	printf("\n");
 8000636:	200a      	movs	r0, #10
 8000638:	f001 fd56 	bl	80020e8 <putchar>
}
 800063c:	46bd      	mov	sp, r7
 800063e:	b008      	add	sp, #32
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	080033d4 	.word	0x080033d4
 8000648:	08003410 	.word	0x08003410
 800064c:	08003424 	.word	0x08003424
 8000650:	08003428 	.word	0x08003428
 8000654:	08003438 	.word	0x08003438
 8000658:	08003454 	.word	0x08003454
 800065c:	0800345c 	.word	0x0800345c

08000660 <accumulate_line>:
 * Parameters:
 * Buffer and Buffer Size
 *
 * Returns:
 */
void accumulate_line(char *buffer, int max_size) {
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	int index = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
	char ch;

	while (1) {
		ch = getchar();
 800066e:	f001 fd21 	bl	80020b4 <getchar>
 8000672:	0002      	movs	r2, r0
 8000674:	210b      	movs	r1, #11
 8000676:	187b      	adds	r3, r7, r1
 8000678:	701a      	strb	r2, [r3, #0]
		if ((ch != 255)) {
 800067a:	000a      	movs	r2, r1
 800067c:	18bb      	adds	r3, r7, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2bff      	cmp	r3, #255	@ 0xff
 8000682:	d0f4      	beq.n	800066e <accumulate_line+0xe>
			switch (ch) {
 8000684:	18bb      	adds	r3, r7, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b7f      	cmp	r3, #127	@ 0x7f
 800068a:	d018      	beq.n	80006be <accumulate_line+0x5e>
 800068c:	dc32      	bgt.n	80006f4 <accumulate_line+0x94>
 800068e:	2b20      	cmp	r3, #32
 8000690:	d020      	beq.n	80006d4 <accumulate_line+0x74>
 8000692:	dc2f      	bgt.n	80006f4 <accumulate_line+0x94>
 8000694:	2b08      	cmp	r3, #8
 8000696:	d007      	beq.n	80006a8 <accumulate_line+0x48>
 8000698:	2b0d      	cmp	r3, #13
 800069a:	d12b      	bne.n	80006f4 <accumulate_line+0x94>
			case '\r':
				buffer[index] = '\0';
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	18d3      	adds	r3, r2, r3
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
				return;
 80006a6:	e04f      	b.n	8000748 <accumulate_line+0xe8>
			case '\b':
				if (index > 0) {
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dd48      	ble.n	8000740 <accumulate_line+0xe0>
					index--;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
					printf("\b \b");
 80006b4:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <accumulate_line+0xf0>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fd06 	bl	80020c8 <iprintf>
				}
				break;
 80006bc:	e040      	b.n	8000740 <accumulate_line+0xe0>
			case '\177':
				if (index > 0) {
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dd3f      	ble.n	8000744 <accumulate_line+0xe4>
					index--;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
					printf("\177 \177");
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <accumulate_line+0xf4>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fcfb 	bl	80020c8 <iprintf>
				}
				break;
 80006d2:	e037      	b.n	8000744 <accumulate_line+0xe4>
			case ' ':
				printf("%c", ch);
 80006d4:	240b      	movs	r4, #11
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fd04 	bl	80020e8 <putchar>
				buffer[index] = ch;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	193a      	adds	r2, r7, r4
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	701a      	strb	r2, [r3, #0]
				index++;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
				break;
 80006f2:	e028      	b.n	8000746 <accumulate_line+0xe6>
			default:
				printf("%c", ch);
 80006f4:	240b      	movs	r4, #11
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 fcf4 	bl	80020e8 <putchar>
				buffer[index] = toupper((unsigned char )ch);
 8000700:	210a      	movs	r1, #10
 8000702:	187b      	adds	r3, r7, r1
 8000704:	193a      	adds	r2, r7, r4
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	187b      	adds	r3, r7, r1
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <accumulate_line+0xf8>)
 8000712:	18d3      	adds	r3, r2, r3
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	001a      	movs	r2, r3
 8000718:	2303      	movs	r3, #3
 800071a:	4013      	ands	r3, r2
 800071c:	2b02      	cmp	r3, #2
 800071e:	d103      	bne.n	8000728 <accumulate_line+0xc8>
 8000720:	187b      	adds	r3, r7, r1
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3b20      	subs	r3, #32
 8000726:	e002      	b.n	800072e <accumulate_line+0xce>
 8000728:	230a      	movs	r3, #10
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	188a      	adds	r2, r1, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	7013      	strb	r3, [r2, #0]
				index++;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
				break;
 800073e:	e002      	b.n	8000746 <accumulate_line+0xe6>
				break;
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	e794      	b.n	800066e <accumulate_line+0xe>
				break;
 8000744:	46c0      	nop			@ (mov r8, r8)
		ch = getchar();
 8000746:	e792      	b.n	800066e <accumulate_line+0xe>
			}
		}
	}
}
 8000748:	46bd      	mov	sp, r7
 800074a:	b005      	add	sp, #20
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	08003464 	.word	0x08003464
 8000754:	08003468 	.word	0x08003468
 8000758:	08003a78 	.word	0x08003a78

0800075c <tokenize_line>:
 *   max capacity of argument count buffer
 *
 * Returns:
 *   None.
 */
int tokenize_line(char *line, char *argv[], int max_tokens) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	int argc = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
	char *token = strtok(line, " ");
 800076c:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <tokenize_line+0x58>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fef8 	bl	8002568 <strtok>
 8000778:	0003      	movs	r3, r0
 800077a:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 800077c:	e00e      	b.n	800079c <tokenize_line+0x40>
		argv[argc++] = token;
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	617a      	str	r2, [r7, #20]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	601a      	str	r2, [r3, #0]
		token = strtok(NULL, " ");
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <tokenize_line+0x58>)
 8000790:	0019      	movs	r1, r3
 8000792:	2000      	movs	r0, #0
 8000794:	f001 fee8 	bl	8002568 <strtok>
 8000798:	0003      	movs	r3, r0
 800079a:	613b      	str	r3, [r7, #16]
	while (token != NULL && argc < max_tokens) {
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d003      	beq.n	80007aa <tokenize_line+0x4e>
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dbe9      	blt.n	800077e <tokenize_line+0x22>
	}
	return argc;
 80007aa:	697b      	ldr	r3, [r7, #20]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b006      	add	sp, #24
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	0800346c 	.word	0x0800346c

080007b8 <process_command>:
 *   argv    Argument Vector
 *
 * Returns:
 *   None.
 */
void process_command(int argc, char *argv[]) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	if (argc == 0) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d104      	bne.n	80007d2 <process_command+0x1a>
		printf("\nNo command provided\n");
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <process_command+0x70>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 fcec 	bl	80021a8 <puts>
		return;
 80007d0:	e027      	b.n	8000822 <process_command+0x6a>
	}
	for (int i = 0; i < num_commands; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e018      	b.n	800080a <process_command+0x52>
		if (strcasecmp(argv[0], commands[i].name) == 0) {
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <process_command+0x74>)
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	00d2      	lsls	r2, r2, #3
 80007e2:	58d3      	ldr	r3, [r2, r3]
 80007e4:	0019      	movs	r1, r3
 80007e6:	f001 fe93 	bl	8002510 <strcasecmp>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d10a      	bne.n	8000804 <process_command+0x4c>
			commands[i].handler(argc, argv);
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <process_command+0x74>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	3304      	adds	r3, #4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	0010      	movs	r0, r2
 8000800:	4798      	blx	r3
			return;
 8000802:	e00e      	b.n	8000822 <process_command+0x6a>
	for (int i = 0; i < num_commands; i++) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <process_command+0x78>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbe1      	blt.n	80007d8 <process_command+0x20>
		}
	}
	printf("\nUnknown command: %s\n", argv[0]);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <process_command+0x7c>)
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f001 fc53 	bl	80020c8 <iprintf>
}
 8000822:	46bd      	mov	sp, r7
 8000824:	b004      	add	sp, #16
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08003470 	.word	0x08003470
 800082c:	08003a0c 	.word	0x08003a0c
 8000830:	08003a64 	.word	0x08003a64
 8000834:	08003488 	.word	0x08003488

08000838 <USART2_IRQHandler>:

#include "global.h"
#include <stdbool.h>

void USART2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	// Check if RXNE flag is set (data received)
	if (USART2->ISR & USART_ISR_RXNE)
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	2220      	movs	r2, #32
 8000844:	4013      	ands	r3, r2
 8000846:	d00b      	beq.n	8000860 <USART2_IRQHandler+0x28>
	{
		char newval = USART2->RDR; // Read the received character
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <USART2_IRQHandler+0x84>)
 800084a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800084c:	b29b      	uxth	r3, r3
 800084e:	b2da      	uxtb	r2, r3
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	701a      	strb	r2, [r3, #0]
		cbfifo_enqueue(&fiforx,&newval,sizeof(newval));
 8000854:	1df9      	adds	r1, r7, #7
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <USART2_IRQHandler+0x88>)
 8000858:	2201      	movs	r2, #1
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff fd09 	bl	8000272 <cbfifo_enqueue>
	}
	if (USART2->ISR & USART_ISR_TXE)
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	4013      	ands	r3, r2
 8000868:	d023      	beq.n	80008b2 <USART2_IRQHandler+0x7a>
	{
		char newval; // Read the received character
		if(cbfifo_dequeue(&fifotx,&newval,sizeof(newval))>0)
 800086a:	1db9      	adds	r1, r7, #6
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <USART2_IRQHandler+0x8c>)
 800086e:	2201      	movs	r2, #1
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff fd4d 	bl	8000310 <cbfifo_dequeue>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d015      	beq.n	80008a6 <USART2_IRQHandler+0x6e>
		{
			 if (newval == '\n')
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b0a      	cmp	r3, #10
 8000880:	d10c      	bne.n	800089c <USART2_IRQHandler+0x64>
			 {
	                USART2->TDR = '\r';
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000884:	220d      	movs	r2, #13
 8000886:	851a      	strh	r2, [r3, #40]	@ 0x28
	                while (!(USART2->ISR & USART_ISR_TXE));
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <USART2_IRQHandler+0x84>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	4013      	ands	r3, r2
 8000892:	d0fa      	beq.n	800088a <USART2_IRQHandler+0x52>
	                USART2->TDR = '\n';
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <USART2_IRQHandler+0x84>)
 8000896:	220a      	movs	r2, #10
 8000898:	851a      	strh	r2, [r3, #40]	@ 0x28
		else
		{
			USART2->CR1 &= (~(USART_CR1_TXEIE));
		}
	}
}
 800089a:	e00a      	b.n	80008b2 <USART2_IRQHandler+0x7a>
				 USART2->TDR = newval; // Send the character
 800089c:	1dbb      	adds	r3, r7, #6
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <USART2_IRQHandler+0x84>)
 80008a2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80008a4:	e005      	b.n	80008b2 <USART2_IRQHandler+0x7a>
			USART2->CR1 &= (~(USART_CR1_TXEIE));
 80008a6:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <USART2_IRQHandler+0x84>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <USART2_IRQHandler+0x84>)
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	438a      	bics	r2, r1
 80008b0:	601a      	str	r2, [r3, #0]
}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	40004400 	.word	0x40004400
 80008c0:	20000108 	.word	0x20000108
 80008c4:	2000007c 	.word	0x2000007c

080008c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008da:	d809      	bhi.n	80008f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	001a      	movs	r2, r3
 80008e2:	231f      	movs	r3, #31
 80008e4:	401a      	ands	r2, r3
 80008e6:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <__NVIC_EnableIRQ+0x30>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	4091      	lsls	r1, r2
 80008ec:	000a      	movs	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	e000e100 	.word	0xe000e100

080008fc <uart_init>:
 *      Author: Abhishek Nadgir
 */

#include "init_functions.h"

void uart_init(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 8000900:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <uart_init+0xb0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6898      	ldr	r0, [r3, #8]
 8000906:	2300      	movs	r3, #0
 8000908:	2202      	movs	r2, #2
 800090a:	2100      	movs	r1, #0
 800090c:	f001 fc56 	bl	80021bc <setvbuf>
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable GPIOA clock
 8000910:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <uart_init+0xb4>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <uart_init+0xb4>)
 8000916:	2180      	movs	r1, #128	@ 0x80
 8000918:	0289      	lsls	r1, r1, #10
 800091a:	430a      	orrs	r2, r1
 800091c:	615a      	str	r2, [r3, #20]
	// Set PA2 (TX) and PA3 (RX) to alternate function mode (AF7 for USART2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);			// Clear
 800091e:	2390      	movs	r3, #144	@ 0x90
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	2390      	movs	r3, #144	@ 0x90
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	21f0      	movs	r1, #240	@ 0xf0
 800092a:	438a      	bics	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);// Set AF mode
 800092e:	2390      	movs	r3, #144	@ 0x90
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2390      	movs	r3, #144	@ 0x90
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	21a0      	movs	r1, #160	@ 0xa0
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos) | (1 << GPIO_AFRL_AFSEL3_Pos); // AF7 (USART2) for PA2 and PA3
 800093e:	2390      	movs	r3, #144	@ 0x90
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	6a1a      	ldr	r2, [r3, #32]
 8000944:	2390      	movs	r3, #144	@ 0x90
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	2188      	movs	r1, #136	@ 0x88
 800094a:	0149      	lsls	r1, r1, #5
 800094c:	430a      	orrs	r2, r1
 800094e:	621a      	str	r2, [r3, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;				// Enable USART2 clock
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <uart_init+0xb4>)
 8000952:	69da      	ldr	r2, [r3, #28]
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <uart_init+0xb4>)
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	0289      	lsls	r1, r1, #10
 800095a:	430a      	orrs	r2, r1
 800095c:	61da      	str	r2, [r3, #28]
	USART2->BRR = USART_BRR_VALUE;// Configure baud rate (assuming 24MHz APB1 clock and 19200 baud rate)
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <uart_init+0xb8>)
 8000960:	4a15      	ldr	r2, [pc, #84]	@ (80009b8 <uart_init+0xbc>)
 8000962:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE; // Enable TX, RX, and RX interrupt
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <uart_init+0xb8>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <uart_init+0xb8>)
 800096a:	212c      	movs	r1, #44	@ 0x2c
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_PARITY_CONFIG;
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <uart_init+0xb8>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <uart_init+0xb8>)
 8000976:	21c0      	movs	r1, #192	@ 0xc0
 8000978:	00c9      	lsls	r1, r1, #3
 800097a:	430a      	orrs	r2, r1
 800097c:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_WORD_LENGTH;
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <uart_init+0xb8>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <uart_init+0xb8>)
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	0149      	lsls	r1, r1, #5
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
	USART2->CR2 |= USART_STOP_BITS;
 800098c:	4a09      	ldr	r2, [pc, #36]	@ (80009b4 <uart_init+0xb8>)
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <uart_init+0xb8>)
 8000990:	6852      	ldr	r2, [r2, #4]
 8000992:	605a      	str	r2, [r3, #4]
	USART2->CR1 |= USART_CR1_UE;								// Enable USART
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <uart_init+0xb8>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <uart_init+0xb8>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);			// Enable USART2 interrupt in NVIC
 80009a0:	201c      	movs	r0, #28
 80009a2:	f7ff ff91 	bl	80008c8 <__NVIC_EnableIRQ>
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000010 	.word	0x20000010
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40004400 	.word	0x40004400
 80009b8:	000004e2 	.word	0x000004e2

080009bc <main>:
 ******************************************************************************
 */
// Reference USed: Lecture Presentation Slides utilised for Command table and Command processing
#include "main.h"
#include "spi.h"
int main(void) {
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	4c30      	ldr	r4, [pc, #192]	@ (8000a80 <main+0xc4>)
 80009c0:	44a5      	add	sp, r4
 80009c2:	af00      	add	r7, sp, #0
	/*
	 * Clocks: Processor = 48 Mhz. AHB = 48 MHz. APB = 24 MHz.
	 *
	 */
	//init_uled(); //On board LED Initialisation
	uart_init(); //UART 2 Initialisation for Serial COmmunication
 80009c4:	f7ff ff9a 	bl	80008fc <uart_init>
	cbfifo_init(&fiforx); // Initialising RX Buffer
 80009c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a84 <main+0xc8>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fc3a 	bl	8000244 <cbfifo_init>
	cbfifo_init(&fifotx); // Initialising TX buffer
 80009d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <main+0xcc>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fc36 	bl	8000244 <cbfifo_init>
	char inputval[INPUT_BUFFER_SIZE]; // Defining a buffer to accept the command and Process
	char *argv[ARGUMENT_BUFFER_SIZE]; // Defining a buffer to store Argument Vectors after tokenization
	int argc; //TO store Argument COunt
	printf("\nWelcome to SerialIO!\n");
 80009d8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a8c <main+0xd0>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 fbe4 	bl	80021a8 <puts>
	//IO_Init();
	SPI_Init();
 80009e0:	f000 f862 	bl	8000aa8 <SPI_Init>
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3); // Clear
 80009e4:	2390      	movs	r3, #144	@ 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	2390      	movs	r3, #144	@ 0x90
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	21f0      	movs	r1, #240	@ 0xf0
 80009f0:	438a      	bics	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1); // Set to AF mode
 80009f4:	2390      	movs	r3, #144	@ 0x90
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	2390      	movs	r3, #144	@ 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	21a0      	movs	r1, #160	@ 0xa0
 8000a00:	430a      	orrs	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos) | (1 << GPIO_AFRL_AFSEL3_Pos); // AF7
 8000a04:	2390      	movs	r3, #144	@ 0x90
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	6a1a      	ldr	r2, [r3, #32]
 8000a0a:	2390      	movs	r3, #144	@ 0x90
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2188      	movs	r1, #136	@ 0x88
 8000a10:	0149      	lsls	r1, r1, #5
 8000a12:	430a      	orrs	r2, r1
 8000a14:	621a      	str	r2, [r3, #32]

	printf("SPI2->CR1: 0x%08lX\n", SPI2->CR1);
 8000a16:	4b1e      	ldr	r3, [pc, #120]	@ (8000a90 <main+0xd4>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <main+0xd8>)
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fb52 	bl	80020c8 <iprintf>
	printf("SPI2->CR2: 0x%08lX\n", SPI2->CR2);
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <main+0xd4>)
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <main+0xdc>)
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fb4b 	bl	80020c8 <iprintf>
	printf("GPIOB->AFR[1]: 0x%08lX\n", GPIOB->AFR[1]);
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <main+0xe0>)
 8000a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <main+0xe4>)
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 fb44 	bl	80020c8 <iprintf>
	while (1) {
		printf("\n$$ ");
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <main+0xe8>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f001 fb40 	bl	80020c8 <iprintf>
		accumulate_line(inputval, INPUT_BUFFER_SIZE); //Takes character from Serial Terminal
 8000a48:	2481      	movs	r4, #129	@ 0x81
 8000a4a:	00a4      	lsls	r4, r4, #2
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	2180      	movs	r1, #128	@ 0x80
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fe05 	bl	8000660 <accumulate_line>
		argc = tokenize_line(inputval, argv, ARGUMENT_BUFFER_SIZE); // Takes array of string as input and returs Number of Arguments and buffer of argument vector
 8000a56:	1d39      	adds	r1, r7, #4
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff fe7d 	bl	800075c <tokenize_line>
 8000a62:	0003      	movs	r3, r0
 8000a64:	21a1      	movs	r1, #161	@ 0xa1
 8000a66:	0089      	lsls	r1, r1, #2
 8000a68:	187a      	adds	r2, r7, r1
 8000a6a:	6013      	str	r3, [r2, #0]
		process_command(argc, argv); // Takes argument count and vector as input and processes the command accordingly
 8000a6c:	1d3a      	adds	r2, r7, #4
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff fe9f 	bl	80007b8 <process_command>
		printf("\n$$ ");
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	e7e0      	b.n	8000a40 <main+0x84>
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	fffffd74 	.word	0xfffffd74
 8000a84:	20000108 	.word	0x20000108
 8000a88:	2000007c 	.word	0x2000007c
 8000a8c:	080034a0 	.word	0x080034a0
 8000a90:	40003800 	.word	0x40003800
 8000a94:	080034b8 	.word	0x080034b8
 8000a98:	080034cc 	.word	0x080034cc
 8000a9c:	48000400 	.word	0x48000400
 8000aa0:	080034e0 	.word	0x080034e0
 8000aa4:	080034f8 	.word	0x080034f8

08000aa8 <SPI_Init>:
#define SPI2_CS_PORT   GPIOB
#define SPI2_SCK_PORT  GPIOB
#define SPI2_MISO_PORT GPIOB
#define SPI2_MOSI_PORT GPIOB

void SPI_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <SPI_Init+0x74>)
 8000aae:	695a      	ldr	r2, [r3, #20]
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <SPI_Init+0x74>)
 8000ab2:	2180      	movs	r1, #128	@ 0x80
 8000ab4:	02c9      	lsls	r1, r1, #11
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	615a      	str	r2, [r3, #20]

    // Configure CS, SCK, and MOSI as output
    GPIOB->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER13 | GPIO_MODER_MODER15); // Clear MODER bits
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <SPI_Init+0x78>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <SPI_Init+0x78>)
 8000ac0:	4918      	ldr	r1, [pc, #96]	@ (8000b24 <SPI_Init+0x7c>)
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER15_0); // Set as output
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <SPI_Init+0x78>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <SPI_Init+0x78>)
 8000acc:	218a      	movs	r1, #138	@ 0x8a
 8000ace:	05c9      	lsls	r1, r1, #23
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	601a      	str	r2, [r3, #0]

    // Configure MISO as input
    GPIOB->MODER &= ~GPIO_MODER_MODER14; // Set as input
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <SPI_Init+0x78>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <SPI_Init+0x78>)
 8000ada:	4913      	ldr	r1, [pc, #76]	@ (8000b28 <SPI_Init+0x80>)
 8000adc:	400a      	ands	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]

    // Set all pins to high-speed mode
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR12 | GPIO_OSPEEDR_OSPEEDR13 | GPIO_OSPEEDR_OSPEEDR14 | GPIO_OSPEEDR_OSPEEDR15);
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <SPI_Init+0x78>)
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <SPI_Init+0x78>)
 8000ae6:	21ff      	movs	r1, #255	@ 0xff
 8000ae8:	0609      	lsls	r1, r1, #24
 8000aea:	430a      	orrs	r2, r1
 8000aec:	609a      	str	r2, [r3, #8]

    // Set default states
    GPIOB->ODR |= SPI2_CS_PIN;    // CS High (inactive)
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <SPI_Init+0x78>)
 8000af0:	695a      	ldr	r2, [r3, #20]
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <SPI_Init+0x78>)
 8000af4:	2180      	movs	r1, #128	@ 0x80
 8000af6:	0149      	lsls	r1, r1, #5
 8000af8:	430a      	orrs	r2, r1
 8000afa:	615a      	str	r2, [r3, #20]
    GPIOB->ODR &= ~SPI2_SCK_PIN;  // SCK Low (idle)
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <SPI_Init+0x78>)
 8000afe:	695a      	ldr	r2, [r3, #20]
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <SPI_Init+0x78>)
 8000b02:	490a      	ldr	r1, [pc, #40]	@ (8000b2c <SPI_Init+0x84>)
 8000b04:	400a      	ands	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
    GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <SPI_Init+0x78>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <SPI_Init+0x78>)
 8000b0e:	4908      	ldr	r1, [pc, #32]	@ (8000b30 <SPI_Init+0x88>)
 8000b10:	400a      	ands	r2, r1
 8000b12:	615a      	str	r2, [r3, #20]
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	30ffffff 	.word	0x30ffffff
 8000b28:	cfffffff 	.word	0xcfffffff
 8000b2c:	ffffdfff 	.word	0xffffdfff
 8000b30:	ffff7fff 	.word	0xffff7fff

08000b34 <SPI_WriteByte>:
void SPI_WriteByte(uint8_t data) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e039      	b.n	8000bba <SPI_WriteByte+0x86>
        // Write the MSB to MOSI
        if (data & 0x80) {
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da07      	bge.n	8000b60 <SPI_WriteByte+0x2c>
            GPIOB->ODR |= SPI2_MOSI_PIN; // Set MOSI High
 8000b50:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <SPI_WriteByte+0x98>)
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <SPI_WriteByte+0x98>)
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	0209      	lsls	r1, r1, #8
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	e005      	b.n	8000b6c <SPI_WriteByte+0x38>
        } else {
            GPIOB->ODR &= ~SPI2_MOSI_PIN; // Set MOSI Low
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <SPI_WriteByte+0x98>)
 8000b62:	695a      	ldr	r2, [r3, #20]
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <SPI_WriteByte+0x98>)
 8000b66:	491a      	ldr	r1, [pc, #104]	@ (8000bd0 <SPI_WriteByte+0x9c>)
 8000b68:	400a      	ands	r2, r1
 8000b6a:	615a      	str	r2, [r3, #20]
        }
        data <<= 1; // Shift to the next bit
 8000b6c:	1dfa      	adds	r2, r7, #7
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	18db      	adds	r3, r3, r3
 8000b74:	7013      	strb	r3, [r2, #0]

        // Toggle SCK to clock the bit
        GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <SPI_WriteByte+0x98>)
 8000b78:	695a      	ldr	r2, [r3, #20]
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <SPI_WriteByte+0x98>)
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	0189      	lsls	r1, r1, #6
 8000b80:	430a      	orrs	r2, r1
 8000b82:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	e002      	b.n	8000b90 <SPI_WriteByte+0x5c>
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	ddf9      	ble.n	8000b8a <SPI_WriteByte+0x56>
        GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <SPI_WriteByte+0x98>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <SPI_WriteByte+0x98>)
 8000b9c:	490d      	ldr	r1, [pc, #52]	@ (8000bd4 <SPI_WriteByte+0xa0>)
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	e002      	b.n	8000bae <SPI_WriteByte+0x7a>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3301      	adds	r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	ddf9      	ble.n	8000ba8 <SPI_WriteByte+0x74>
    for (int i = 0; i < 8; i++) {
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2b07      	cmp	r3, #7
 8000bbe:	ddc2      	ble.n	8000b46 <SPI_WriteByte+0x12>
    }
}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b006      	add	sp, #24
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	ffff7fff 	.word	0xffff7fff
 8000bd4:	ffffdfff 	.word	0xffffdfff

08000bd8 <spi_set_autoinc>:
void spi_set_autoinc(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <spi_set_autoinc+0x30>)
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <spi_set_autoinc+0x30>)
 8000be2:	490a      	ldr	r1, [pc, #40]	@ (8000c0c <spi_set_autoinc+0x34>)
 8000be4:	400a      	ands	r2, r1
 8000be6:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x5E);			//ECON2
 8000be8:	205e      	movs	r0, #94	@ 0x5e
 8000bea:	f7ff ffa3 	bl	8000b34 <SPI_WriteByte>
	SPI_WriteByte(0x80);			//AUTOINC bit set
 8000bee:	2080      	movs	r0, #128	@ 0x80
 8000bf0:	f7ff ffa0 	bl	8000b34 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <spi_set_autoinc+0x30>)
 8000bf6:	695a      	ldr	r2, [r3, #20]
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <spi_set_autoinc+0x30>)
 8000bfa:	2180      	movs	r1, #128	@ 0x80
 8000bfc:	0149      	lsls	r1, r1, #5
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	615a      	str	r2, [r3, #20]
}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	ffffefff 	.word	0xffffefff

08000c10 <select_reg_bank>:
void select_reg_bank(uint8_t bank)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <select_reg_bank+0x40>)
 8000c1e:	695a      	ldr	r2, [r3, #20]
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <select_reg_bank+0x40>)
 8000c22:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <select_reg_bank+0x44>)
 8000c24:	400a      	ands	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(0x5F);
 8000c28:	205f      	movs	r0, #95	@ 0x5f
 8000c2a:	f7ff ff83 	bl	8000b34 <SPI_WriteByte>
	SPI_WriteByte(bank);
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff ff7e 	bl	8000b34 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <select_reg_bank+0x40>)
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <select_reg_bank+0x40>)
 8000c3e:	2180      	movs	r1, #128	@ 0x80
 8000c40:	0149      	lsls	r1, r1, #5
 8000c42:	430a      	orrs	r2, r1
 8000c44:	615a      	str	r2, [r3, #20]
}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	48000400 	.word	0x48000400
 8000c54:	ffffefff 	.word	0xffffefff

08000c58 <cmd_spi_write>:


void cmd_spi_write(int argc, char *argv[]) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
    if (argc < 3) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	dc04      	bgt.n	8000c72 <cmd_spi_write+0x1a>
        printf("\nInvalid command: WRITE requires number of bytes and data\n");
 8000c68:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <cmd_spi_write+0xe0>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 fa9c 	bl	80021a8 <puts>
        return;
 8000c70:	e05e      	b.n	8000d30 <cmd_spi_write+0xd8>
    }

    int num_bytes = atoi(argv[1]);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	3304      	adds	r3, #4
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 ffff 	bl	8001c7c <atoi>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	613b      	str	r3, [r7, #16]
    if (num_bytes <= 0 || argc != (num_bytes + 2)) {
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dd04      	ble.n	8000c92 <cmd_spi_write+0x3a>
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d004      	beq.n	8000c9c <cmd_spi_write+0x44>
        printf("\nInvalid command: Incorrect number of data arguments\n");
 8000c92:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <cmd_spi_write+0xe4>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 fa87 	bl	80021a8 <puts>
        return;
 8000c9a:	e049      	b.n	8000d30 <cmd_spi_write+0xd8>
    }

    // Pull CS Low
    GPIOB->ODR &= ~SPI2_CS_PIN;
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <cmd_spi_write+0xe8>)
 8000c9e:	695a      	ldr	r2, [r3, #20]
 8000ca0:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <cmd_spi_write+0xe8>)
 8000ca2:	4928      	ldr	r1, [pc, #160]	@ (8000d44 <cmd_spi_write+0xec>)
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	615a      	str	r2, [r3, #20]

    // Write each byte
    for (int i = 0; i < num_bytes; i++) {
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e02f      	b.n	8000d0e <cmd_spi_write+0xb6>
        char *endptr;
        uint8_t data = (uint8_t)strtol(argv[i + 2], &endptr, 16);
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	18d3      	adds	r3, r2, r3
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2208      	movs	r2, #8
 8000cbc:	18b9      	adds	r1, r7, r2
 8000cbe:	2210      	movs	r2, #16
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 f927 	bl	8001f14 <strtol>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	230f      	movs	r3, #15
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	701a      	strb	r2, [r3, #0]
        if (*endptr != '\0') {
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d012      	beq.n	8000cfc <cmd_spi_write+0xa4>
            printf("\nInvalid data: %s\n", argv[i + 2]);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3302      	adds	r3, #2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	18d3      	adds	r3, r2, r3
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <cmd_spi_write+0xf0>)
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f001 f9ee 	bl	80020c8 <iprintf>
            GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <cmd_spi_write+0xe8>)
 8000cee:	695a      	ldr	r2, [r3, #20]
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <cmd_spi_write+0xe8>)
 8000cf2:	2180      	movs	r1, #128	@ 0x80
 8000cf4:	0149      	lsls	r1, r1, #5
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	e019      	b.n	8000d30 <cmd_spi_write+0xd8>
            return;
        }
        SPI_WriteByte(data);
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff ff16 	bl	8000b34 <SPI_WriteByte>
    for (int i = 0; i < num_bytes; i++) {
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbcb      	blt.n	8000cae <cmd_spi_write+0x56>
    }

    // Pull CS High
    GPIOB->ODR |= SPI2_CS_PIN;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <cmd_spi_write+0xe8>)
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <cmd_spi_write+0xe8>)
 8000d1c:	2180      	movs	r1, #128	@ 0x80
 8000d1e:	0149      	lsls	r1, r1, #5
 8000d20:	430a      	orrs	r2, r1
 8000d22:	615a      	str	r2, [r3, #20]

    printf("\nSPI Write Completed: Sent %d bytes\n", num_bytes);
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <cmd_spi_write+0xf4>)
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f001 f9cc 	bl	80020c8 <iprintf>
}
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b006      	add	sp, #24
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	08003500 	.word	0x08003500
 8000d3c:	0800353c 	.word	0x0800353c
 8000d40:	48000400 	.word	0x48000400
 8000d44:	ffffefff 	.word	0xffffefff
 8000d48:	08003574 	.word	0x08003574
 8000d4c:	08003588 	.word	0x08003588

08000d50 <spi_control_write>:
void spi_control_write(int reg_bank,uint8_t addr,uint8_t data)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	0008      	movs	r0, r1
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	1cfb      	adds	r3, r7, #3
 8000d5e:	1c02      	adds	r2, r0, #0
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	1cbb      	adds	r3, r7, #2
 8000d64:	1c0a      	adds	r2, r1, #0
 8000d66:	701a      	strb	r2, [r3, #0]
    uint8_t opcode = 0x40;
 8000d68:	200f      	movs	r0, #15
 8000d6a:	183b      	adds	r3, r7, r0
 8000d6c:	2240      	movs	r2, #64	@ 0x40
 8000d6e:	701a      	strb	r2, [r3, #0]
    addr = addr + opcode;
 8000d70:	1cfb      	adds	r3, r7, #3
 8000d72:	1cf9      	adds	r1, r7, #3
 8000d74:	183a      	adds	r2, r7, r0
 8000d76:	7809      	ldrb	r1, [r1, #0]
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	188a      	adds	r2, r1, r2
 8000d7c:	701a      	strb	r2, [r3, #0]
	select_reg_bank(reg_bank);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff ff44 	bl	8000c10 <select_reg_bank>
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <spi_control_write+0x70>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <spi_control_write+0x70>)
 8000d8e:	490d      	ldr	r1, [pc, #52]	@ (8000dc4 <spi_control_write+0x74>)
 8000d90:	400a      	ands	r2, r1
 8000d92:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(addr);
 8000d94:	1cfb      	adds	r3, r7, #3
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fecb 	bl	8000b34 <SPI_WriteByte>
    SPI_WriteByte(data);
 8000d9e:	1cbb      	adds	r3, r7, #2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fec6 	bl	8000b34 <SPI_WriteByte>
    GPIOB->ODR |= SPI2_CS_PIN;
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <spi_control_write+0x70>)
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <spi_control_write+0x70>)
 8000dae:	2180      	movs	r1, #128	@ 0x80
 8000db0:	0149      	lsls	r1, r1, #5
 8000db2:	430a      	orrs	r2, r1
 8000db4:	615a      	str	r2, [r3, #20]
}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	ffffefff 	.word	0xffffefff

08000dc8 <cmd_control_spi_write>:
void cmd_control_spi_write(int argc, char *argv[])
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	dc04      	bgt.n	8000de2 <cmd_control_spi_write+0x1a>
	        printf("\nInvalid command: WRITECONTROL requires register bank, address and data\n");
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e94 <cmd_control_spi_write+0xcc>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f001 f9e4 	bl	80021a8 <puts>
	        return;
 8000de0:	e055      	b.n	8000e8e <cmd_control_spi_write+0xc6>
	    }

	int reg_bank = atoi(argv[1]);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	3304      	adds	r3, #4
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 ff47 	bl	8001c7c <atoi>
 8000dee:	0003      	movs	r3, r0
 8000df0:	617b      	str	r3, [r7, #20]
	if(reg_bank > 3)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	dd04      	ble.n	8000e02 <cmd_control_spi_write+0x3a>
	{
		printf("\nInvalid Register Bank: Choose between [0, 3]\n");
 8000df8:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <cmd_control_spi_write+0xd0>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f001 f9d4 	bl	80021a8 <puts>
	  return;
 8000e00:	e045      	b.n	8000e8e <cmd_control_spi_write+0xc6>
	}
	char *endptr;
	    uint8_t addr = (uint8_t)strtol(argv[2], &endptr, 16);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3308      	adds	r3, #8
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	220c      	movs	r2, #12
 8000e0a:	18b9      	adds	r1, r7, r2
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 f880 	bl	8001f14 <strtol>
 8000e14:	0002      	movs	r2, r0
 8000e16:	2313      	movs	r3, #19
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	701a      	strb	r2, [r3, #0]

	    if (*endptr != '\0') {
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d008      	beq.n	8000e36 <cmd_control_spi_write+0x6e>
	                printf("\nInvalid address: %s\n", argv[2]);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	3308      	adds	r3, #8
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <cmd_control_spi_write+0xd4>)
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f001 f94a 	bl	80020c8 <iprintf>
	                //GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
	                return;
 8000e34:	e02b      	b.n	8000e8e <cmd_control_spi_write+0xc6>
	            }
	    uint8_t  data= (uint8_t)strtol(argv[3], &endptr, 16);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	330c      	adds	r3, #12
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	18b9      	adds	r1, r7, r2
 8000e40:	2210      	movs	r2, #16
 8000e42:	0018      	movs	r0, r3
 8000e44:	f001 f866 	bl	8001f14 <strtol>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	2312      	movs	r3, #18
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	701a      	strb	r2, [r3, #0]
	    if (*endptr != '\0') {
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d008      	beq.n	8000e6a <cmd_control_spi_write+0xa2>
	                printf("\nInvalid data: %s\n", argv[3]);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	330c      	adds	r3, #12
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <cmd_control_spi_write+0xd8>)
 8000e60:	0011      	movs	r1, r2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f001 f930 	bl	80020c8 <iprintf>
	                //GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
	                return;
 8000e68:	e011      	b.n	8000e8e <cmd_control_spi_write+0xc6>
	            }

	    spi_control_write(reg_bank,addr,data);
 8000e6a:	2412      	movs	r4, #18
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	2513      	movs	r5, #19
 8000e72:	197b      	adds	r3, r7, r5
 8000e74:	7819      	ldrb	r1, [r3, #0]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff69 	bl	8000d50 <spi_control_write>
	    printf("\nSPI Write Completed: Sent %x data to %x address in %dnd register bank\n", data, addr, reg_bank);
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	7819      	ldrb	r1, [r3, #0]
 8000e82:	197b      	adds	r3, r7, r5
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	4806      	ldr	r0, [pc, #24]	@ (8000ea4 <cmd_control_spi_write+0xdc>)
 8000e8a:	f001 f91d 	bl	80020c8 <iprintf>

}
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b006      	add	sp, #24
 8000e92:	bdb0      	pop	{r4, r5, r7, pc}
 8000e94:	080035b0 	.word	0x080035b0
 8000e98:	080035f8 	.word	0x080035f8
 8000e9c:	08003628 	.word	0x08003628
 8000ea0:	08003574 	.word	0x08003574
 8000ea4:	08003640 	.word	0x08003640

08000ea8 <buffer_init>:
void buffer_init(uint16_t start_address, uint16_t size) {
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	0002      	movs	r2, r0
 8000eb0:	1dbb      	adds	r3, r7, #6
 8000eb2:	801a      	strh	r2, [r3, #0]
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	1c0a      	adds	r2, r1, #0
 8000eb8:	801a      	strh	r2, [r3, #0]
    if (start_address > 0x1FFF || (start_address + size) > 0x1FFF) {
 8000eba:	1dbb      	adds	r3, r7, #6
 8000ebc:	881a      	ldrh	r2, [r3, #0]
 8000ebe:	2380      	movs	r3, #128	@ 0x80
 8000ec0:	019b      	lsls	r3, r3, #6
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d208      	bcs.n	8000ed8 <buffer_init+0x30>
 8000ec6:	1dbb      	adds	r3, r7, #6
 8000ec8:	881a      	ldrh	r2, [r3, #0]
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	18d2      	adds	r2, r2, r3
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	019b      	lsls	r3, r3, #6
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	db08      	blt.n	8000eea <buffer_init+0x42>
        printf("\nInvalid Buffer Address or Size: Start 0x%04X, Size 0x%04X\n", start_address, size);
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	8819      	ldrh	r1, [r3, #0]
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	881a      	ldrh	r2, [r3, #0]
 8000ee0:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <buffer_init+0xc8>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 f8f0 	bl	80020c8 <iprintf>
        return;
 8000ee8:	e03f      	b.n	8000f6a <buffer_init+0xc2>
    }

    // Ensure start and end addresses are even
    uint16_t erxst = start_address & ~1; // Make sure ERXST is even
 8000eea:	240e      	movs	r4, #14
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	1dba      	adds	r2, r7, #6
 8000ef0:	8812      	ldrh	r2, [r2, #0]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	438a      	bics	r2, r1
 8000ef6:	801a      	strh	r2, [r3, #0]
    uint16_t erxnd = (start_address + size - 1) & ~1; // Make sure ERXND is even
 8000ef8:	1dba      	adds	r2, r7, #6
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	8812      	ldrh	r2, [r2, #0]
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	250c      	movs	r5, #12
 8000f0a:	197b      	adds	r3, r7, r5
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	438a      	bics	r2, r1
 8000f10:	801a      	strh	r2, [r3, #0]

    // Write ERXST
    spi_control_write(0, 0x08, (uint8_t)(erxst >> 8)); // High byte of ERXST
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	2108      	movs	r1, #8
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ff15 	bl	8000d50 <spi_control_write>
    spi_control_write(0, 0x09, (uint8_t)(erxst & 0xFF)); // Low byte of ERXST
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2109      	movs	r1, #9
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ff0d 	bl	8000d50 <spi_control_write>

    // Write ERXND
    spi_control_write(0, 0x0A, (uint8_t)(erxnd >> 8)); // High byte of ERXND
 8000f36:	197b      	adds	r3, r7, r5
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	001a      	movs	r2, r3
 8000f42:	210a      	movs	r1, #10
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff ff03 	bl	8000d50 <spi_control_write>
    spi_control_write(0, 0x0B, (uint8_t)(erxnd & 0xFF)); // Low byte of ERXND
 8000f4a:	197b      	adds	r3, r7, r5
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	001a      	movs	r2, r3
 8000f52:	210b      	movs	r1, #11
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fefb 	bl	8000d50 <spi_control_write>

    printf("\nBuffer Initialized: Start 0x%04X, End 0x%04X\n", erxst, erxnd);
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	8819      	ldrh	r1, [r3, #0]
 8000f5e:	197b      	adds	r3, r7, r5
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <buffer_init+0xcc>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 f8af 	bl	80020c8 <iprintf>
}
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b004      	add	sp, #16
 8000f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f70:	08003688 	.word	0x08003688
 8000f74:	080036c4 	.word	0x080036c4

08000f78 <spi_buffer_write>:
void spi_buffer_write(int num_bytes,uint16_t start_address,uint8_t *data_ptr)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	230a      	movs	r3, #10
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	1c0a      	adds	r2, r1, #0
 8000f88:	801a      	strh	r2, [r3, #0]
	if(num_bytes < 1)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dc06      	bgt.n	8000f9e <spi_buffer_write+0x26>
		{
			printf("\nInvalid number of bytes: %d\n",num_bytes);
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4b34      	ldr	r3, [pc, #208]	@ (8001064 <spi_buffer_write+0xec>)
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 f896 	bl	80020c8 <iprintf>
			return;
 8000f9c:	e05f      	b.n	800105e <spi_buffer_write+0xe6>
		}
	if(start_address > 0x1FFF)
 8000f9e:	210a      	movs	r1, #10
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	019b      	lsls	r3, r3, #6
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d307      	bcc.n	8000fbc <spi_buffer_write+0x44>
		{
			printf("\nInvalid address: %04Xn",start_address);
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	881a      	ldrh	r2, [r3, #0]
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001068 <spi_buffer_write+0xf0>)
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f001 f887 	bl	80020c8 <iprintf>
		  return;
 8000fba:	e050      	b.n	800105e <spi_buffer_write+0xe6>
		}
	buffer_init(0x0000, start_address - 1);
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff6d 	bl	8000ea8 <buffer_init>
	if(num_bytes > 1)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	dd01      	ble.n	8000fd8 <spi_buffer_write+0x60>
		{
			spi_set_autoinc();
 8000fd4:	f7ff fe00 	bl	8000bd8 <spi_set_autoinc>
		}
	uint8_t higher_byte = (uint8_t)((start_address >> 8) & 0xFF);
 8000fd8:	210a      	movs	r1, #10
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	2013      	movs	r0, #19
 8000fe4:	183b      	adds	r3, r7, r0
 8000fe6:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t)(start_address & 0xFF);
 8000fe8:	2412      	movs	r4, #18
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	187a      	adds	r2, r7, r1
 8000fee:	8812      	ldrh	r2, [r2, #0]
 8000ff0:	701a      	strb	r2, [r3, #0]
	spi_control_write(0, 0X03, higher_byte); // High byte
 8000ff2:	183b      	adds	r3, r7, r0
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fea8 	bl	8000d50 <spi_control_write>
	spi_control_write(0, 0X02, lower_byte); // Low byte
 8001000:	193b      	adds	r3, r7, r4
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	2102      	movs	r1, #2
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fea1 	bl	8000d50 <spi_control_write>
	uint8_t opcode = 0x7A;
 800100e:	2011      	movs	r0, #17
 8001010:	183b      	adds	r3, r7, r0
 8001012:	227a      	movs	r2, #122	@ 0x7a
 8001014:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <spi_buffer_write+0xf4>)
 8001018:	695a      	ldr	r2, [r3, #20]
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <spi_buffer_write+0xf4>)
 800101c:	4914      	ldr	r1, [pc, #80]	@ (8001070 <spi_buffer_write+0xf8>)
 800101e:	400a      	ands	r2, r1
 8001020:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 8001022:	183b      	adds	r3, r7, r0
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff fd84 	bl	8000b34 <SPI_WriteByte>
	for (int i = 0; i < num_bytes; i++) {
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e00a      	b.n	8001048 <spi_buffer_write+0xd0>
	        SPI_WriteByte(*data_ptr);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff fd7c 	bl	8000b34 <SPI_WriteByte>
	        data_ptr++;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3301      	adds	r3, #1
 8001040:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf0      	blt.n	8001032 <spi_buffer_write+0xba>
	    }
	GPIOB->ODR |= SPI2_CS_PIN;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <spi_buffer_write+0xf4>)
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <spi_buffer_write+0xf4>)
 8001056:	2180      	movs	r1, #128	@ 0x80
 8001058:	0149      	lsls	r1, r1, #5
 800105a:	430a      	orrs	r2, r1
 800105c:	615a      	str	r2, [r3, #20]
}
 800105e:	46bd      	mov	sp, r7
 8001060:	b007      	add	sp, #28
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	080036f4 	.word	0x080036f4
 8001068:	08003714 	.word	0x08003714
 800106c:	48000400 	.word	0x48000400
 8001070:	ffffefff 	.word	0xffffefff

08001074 <cmd_buffer_spi_write>:

void cmd_buffer_spi_write(int argc, char *argv[])
{
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	b091      	sub	sp, #68	@ 0x44
 8001078:	af00      	add	r7, sp, #0
 800107a:	61f8      	str	r0, [r7, #28]
 800107c:	61b9      	str	r1, [r7, #24]
 800107e:	466b      	mov	r3, sp
 8001080:	001e      	movs	r6, r3
	if (argc < 4) {
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	2b03      	cmp	r3, #3
 8001086:	dc04      	bgt.n	8001092 <cmd_buffer_spi_write+0x1e>
		printf("\nInvalid command: WRITEBUFFER requires number of bytes, start address and data\n");
 8001088:	4b5e      	ldr	r3, [pc, #376]	@ (8001204 <cmd_buffer_spi_write+0x190>)
 800108a:	0018      	movs	r0, r3
 800108c:	f001 f88c 	bl	80021a8 <puts>
		        return;
 8001090:	e0b3      	b.n	80011fa <cmd_buffer_spi_write+0x186>
		    }
	int num_bytes = atoi(argv[1]);
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	3304      	adds	r3, #4
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0018      	movs	r0, r3
 800109a:	f000 fdef 	bl	8001c7c <atoi>
 800109e:	0003      	movs	r3, r0
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	if(num_bytes < 1)
 80010a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dc06      	bgt.n	80010b6 <cmd_buffer_spi_write+0x42>
	{
		printf("\nInvalid number of bytes: %d\n",num_bytes);
 80010a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010aa:	4b57      	ldr	r3, [pc, #348]	@ (8001208 <cmd_buffer_spi_write+0x194>)
 80010ac:	0011      	movs	r1, r2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f001 f80a 	bl	80020c8 <iprintf>
		return;
 80010b4:	e0a1      	b.n	80011fa <cmd_buffer_spi_write+0x186>
	}
	char *endptr;
	uint16_t start_address = (uint16_t)strtol(argv[2], &endptr, 16);
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	3308      	adds	r3, #8
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	2118      	movs	r1, #24
 80010c0:	1852      	adds	r2, r2, r1
 80010c2:	19d1      	adds	r1, r2, r7
 80010c4:	2210      	movs	r2, #16
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 ff24 	bl	8001f14 <strtol>
 80010cc:	0002      	movs	r2, r0
 80010ce:	231e      	movs	r3, #30
 80010d0:	2118      	movs	r1, #24
 80010d2:	185b      	adds	r3, r3, r1
 80010d4:	19db      	adds	r3, r3, r7
 80010d6:	801a      	strh	r2, [r3, #0]
	if (*endptr != '\0') {
 80010d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <cmd_buffer_spi_write+0x7e>
	        printf("\nInvalid address: %s\n", argv[2]);
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	3308      	adds	r3, #8
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b49      	ldr	r3, [pc, #292]	@ (800120c <cmd_buffer_spi_write+0x198>)
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 ffec 	bl	80020c8 <iprintf>
	        return;
 80010f0:	e083      	b.n	80011fa <cmd_buffer_spi_write+0x186>
	    }
	if(start_address > 0x1FFF)
 80010f2:	231e      	movs	r3, #30
 80010f4:	2218      	movs	r2, #24
 80010f6:	189b      	adds	r3, r3, r2
 80010f8:	19db      	adds	r3, r3, r7
 80010fa:	881a      	ldrh	r2, [r3, #0]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	019b      	lsls	r3, r3, #6
 8001100:	429a      	cmp	r2, r3
 8001102:	d308      	bcc.n	8001116 <cmd_buffer_spi_write+0xa2>
		{
			printf("\nInvalid address: %s\n", argv[2]);
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	3308      	adds	r3, #8
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b40      	ldr	r3, [pc, #256]	@ (800120c <cmd_buffer_spi_write+0x198>)
 800110c:	0011      	movs	r1, r2
 800110e:	0018      	movs	r0, r3
 8001110:	f000 ffda 	bl	80020c8 <iprintf>
		  return;
 8001114:	e071      	b.n	80011fa <cmd_buffer_spi_write+0x186>
		}
    uint8_t data_array[num_bytes]; // Array to store data
 8001116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001118:	1e5a      	subs	r2, r3, #1
 800111a:	633a      	str	r2, [r7, #48]	@ 0x30
 800111c:	001a      	movs	r2, r3
 800111e:	0014      	movs	r4, r2
 8001120:	2200      	movs	r2, #0
 8001122:	0015      	movs	r5, r2
 8001124:	0020      	movs	r0, r4
 8001126:	0029      	movs	r1, r5
 8001128:	0002      	movs	r2, r0
 800112a:	0f52      	lsrs	r2, r2, #29
 800112c:	000c      	movs	r4, r1
 800112e:	00e4      	lsls	r4, r4, #3
 8001130:	617c      	str	r4, [r7, #20]
 8001132:	697c      	ldr	r4, [r7, #20]
 8001134:	4314      	orrs	r4, r2
 8001136:	617c      	str	r4, [r7, #20]
 8001138:	0002      	movs	r2, r0
 800113a:	00d2      	lsls	r2, r2, #3
 800113c:	613a      	str	r2, [r7, #16]
 800113e:	001a      	movs	r2, r3
 8001140:	603a      	str	r2, [r7, #0]
 8001142:	2200      	movs	r2, #0
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	0002      	movs	r2, r0
 800114c:	0f52      	lsrs	r2, r2, #29
 800114e:	000c      	movs	r4, r1
 8001150:	00e4      	lsls	r4, r4, #3
 8001152:	60fc      	str	r4, [r7, #12]
 8001154:	68fc      	ldr	r4, [r7, #12]
 8001156:	4314      	orrs	r4, r2
 8001158:	60fc      	str	r4, [r7, #12]
 800115a:	0002      	movs	r2, r0
 800115c:	00d2      	lsls	r2, r2, #3
 800115e:	60ba      	str	r2, [r7, #8]
 8001160:	3307      	adds	r3, #7
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	466a      	mov	r2, sp
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	469d      	mov	sp, r3
 800116c:	466b      	mov	r3, sp
 800116e:	3300      	adds	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < num_bytes; i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001176:	e027      	b.n	80011c8 <cmd_buffer_spi_write+0x154>
        char *endptr;
        data_array[i] = (uint8_t)strtol(argv[i + 3], &endptr, 16);
 8001178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800117a:	3303      	adds	r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	18d3      	adds	r3, r2, r3
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	220c      	movs	r2, #12
 8001186:	2118      	movs	r1, #24
 8001188:	1852      	adds	r2, r2, r1
 800118a:	19d1      	adds	r1, r2, r7
 800118c:	2210      	movs	r2, #16
 800118e:	0018      	movs	r0, r3
 8001190:	f000 fec0 	bl	8001f14 <strtol>
 8001194:	0003      	movs	r3, r0
 8001196:	b2d9      	uxtb	r1, r3
 8001198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800119a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800119c:	18d3      	adds	r3, r2, r3
 800119e:	1c0a      	adds	r2, r1, #0
 80011a0:	701a      	strb	r2, [r3, #0]
        if (*endptr != '\0') {
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <cmd_buffer_spi_write+0x14e>
            printf("\nInvalid data: %s\n", argv[i + 3]);
 80011aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ac:	3303      	adds	r3, #3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	18d3      	adds	r3, r2, r3
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <cmd_buffer_spi_write+0x19c>)
 80011b8:	0011      	movs	r1, r2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 ff84 	bl	80020c8 <iprintf>
 80011c0:	e01b      	b.n	80011fa <cmd_buffer_spi_write+0x186>
    for (int i = 0; i < num_bytes; i++) {
 80011c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011c4:	3301      	adds	r3, #1
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbd3      	blt.n	8001178 <cmd_buffer_spi_write+0x104>
            return ;
        }
    }
    spi_buffer_write(num_bytes,start_address,data_array);
 80011d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011d2:	241e      	movs	r4, #30
 80011d4:	2318      	movs	r3, #24
 80011d6:	18e3      	adds	r3, r4, r3
 80011d8:	19db      	adds	r3, r3, r7
 80011da:	8819      	ldrh	r1, [r3, #0]
 80011dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff feca 	bl	8000f78 <spi_buffer_write>
	printf("\nSPI BUFFER Write Completed: Sent %d bytes starting address %04X\n", num_bytes, start_address);
 80011e4:	2318      	movs	r3, #24
 80011e6:	18e3      	adds	r3, r4, r3
 80011e8:	19db      	adds	r3, r3, r7
 80011ea:	881a      	ldrh	r2, [r3, #0]
 80011ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <cmd_buffer_spi_write+0x1a0>)
 80011f0:	0018      	movs	r0, r3
 80011f2:	f000 ff69 	bl	80020c8 <iprintf>
 80011f6:	46b5      	mov	sp, r6
 80011f8:	e000      	b.n	80011fc <cmd_buffer_spi_write+0x188>
		        return;
 80011fa:	46b5      	mov	sp, r6
}
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b011      	add	sp, #68	@ 0x44
 8001200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	0800372c 	.word	0x0800372c
 8001208:	080036f4 	.word	0x080036f4
 800120c:	08003628 	.word	0x08003628
 8001210:	08003574 	.word	0x08003574
 8001214:	0800377c 	.word	0x0800377c

08001218 <SPI_ReadByte>:

uint8_t SPI_ReadByte(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
    uint8_t received_data = 0;
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 8; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	e034      	b.n	8001296 <SPI_ReadByte+0x7e>
        received_data <<= 1; // Make room for the next bit
 800122c:	230f      	movs	r3, #15
 800122e:	18fa      	adds	r2, r7, r3
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	18db      	adds	r3, r3, r3
 8001236:	7013      	strb	r3, [r2, #0]

        // Toggle SCK to clock the bit
        GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <SPI_ReadByte+0x94>)
 800123a:	695a      	ldr	r2, [r3, #20]
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <SPI_ReadByte+0x94>)
 800123e:	2180      	movs	r1, #128	@ 0x80
 8001240:	0189      	lsls	r1, r1, #6
 8001242:	430a      	orrs	r2, r1
 8001244:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e002      	b.n	8001252 <SPI_ReadByte+0x3a>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3301      	adds	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	ddf9      	ble.n	800124c <SPI_ReadByte+0x34>

        // Read the bit from MISO
        if (GPIOB->IDR & SPI2_MISO_PIN) {
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <SPI_ReadByte+0x94>)
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	01db      	lsls	r3, r3, #7
 8001260:	4013      	ands	r3, r2
 8001262:	d006      	beq.n	8001272 <SPI_ReadByte+0x5a>
            received_data |= 0x01; // Set the LSB
 8001264:	220f      	movs	r2, #15
 8001266:	18bb      	adds	r3, r7, r2
 8001268:	18ba      	adds	r2, r7, r2
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	430a      	orrs	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
        }

        GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <SPI_ReadByte+0x94>)
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <SPI_ReadByte+0x94>)
 8001278:	490d      	ldr	r1, [pc, #52]	@ (80012b0 <SPI_ReadByte+0x98>)
 800127a:	400a      	ands	r2, r1
 800127c:	615a      	str	r2, [r3, #20]
        //DELAY_SHORT();               // Small delay
        for (int i =0; i <16; i++);
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	e002      	b.n	800128a <SPI_ReadByte+0x72>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	ddf9      	ble.n	8001284 <SPI_ReadByte+0x6c>
    for (int i = 0; i < 8; i++) {
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b07      	cmp	r3, #7
 800129a:	ddc7      	ble.n	800122c <SPI_ReadByte+0x14>
    }

    return received_data;
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	48000400 	.word	0x48000400
 80012b0:	ffffdfff 	.word	0xffffdfff

080012b4 <spi_buffer_read>:
void spi_buffer_read(int num_bytes,uint16_t start_address,uint8_t *data_ptr)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	230a      	movs	r3, #10
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	1c0a      	adds	r2, r1, #0
 80012c4:	801a      	strh	r2, [r3, #0]
	if(num_bytes < 1)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dc06      	bgt.n	80012da <spi_buffer_read+0x26>
		{
			printf("\nInvalid number of bytes: %d\n",num_bytes);
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4b35      	ldr	r3, [pc, #212]	@ (80013a4 <spi_buffer_read+0xf0>)
 80012d0:	0011      	movs	r1, r2
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fef8 	bl	80020c8 <iprintf>
			return;
 80012d8:	e060      	b.n	800139c <spi_buffer_read+0xe8>
		}
	if(start_address > 0x1FFF)
 80012da:	210a      	movs	r1, #10
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	881a      	ldrh	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	@ 0x80
 80012e2:	019b      	lsls	r3, r3, #6
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d307      	bcc.n	80012f8 <spi_buffer_read+0x44>
		{
			printf("\nInvalid address: %04Xn",start_address);
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	881a      	ldrh	r2, [r3, #0]
 80012ec:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <spi_buffer_read+0xf4>)
 80012ee:	0011      	movs	r1, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 fee9 	bl	80020c8 <iprintf>
		  return;
 80012f6:	e051      	b.n	800139c <spi_buffer_read+0xe8>
		}

	if(num_bytes > 1)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	dd01      	ble.n	8001302 <spi_buffer_read+0x4e>
		{
			spi_set_autoinc();
 80012fe:	f7ff fc6b 	bl	8000bd8 <spi_set_autoinc>
		}
	buffer_init(start_address, num_bytes);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	b29a      	uxth	r2, r3
 8001306:	240a      	movs	r4, #10
 8001308:	193b      	adds	r3, r7, r4
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	0011      	movs	r1, r2
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff fdca 	bl	8000ea8 <buffer_init>
	uint8_t higher_byte = (uint8_t)(((start_address) >> 8) & 0xFF);
 8001314:	0021      	movs	r1, r4
 8001316:	187b      	adds	r3, r7, r1
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	2013      	movs	r0, #19
 8001320:	183b      	adds	r3, r7, r0
 8001322:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t)((start_address) & 0xFF);
 8001324:	2412      	movs	r4, #18
 8001326:	193b      	adds	r3, r7, r4
 8001328:	187a      	adds	r2, r7, r1
 800132a:	8812      	ldrh	r2, [r2, #0]
 800132c:	701a      	strb	r2, [r3, #0]
	spi_control_write(0, 0X01, higher_byte); // High byte
 800132e:	183b      	adds	r3, r7, r0
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	001a      	movs	r2, r3
 8001334:	2101      	movs	r1, #1
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff fd0a 	bl	8000d50 <spi_control_write>
	spi_control_write(0, 0X00, lower_byte); // Low byte
 800133c:	193b      	adds	r3, r7, r4
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	001a      	movs	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fd03 	bl	8000d50 <spi_control_write>
	uint8_t opcode = 0x3A;
 800134a:	2011      	movs	r0, #17
 800134c:	183b      	adds	r3, r7, r0
 800134e:	223a      	movs	r2, #58	@ 0x3a
 8001350:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <spi_buffer_read+0xf8>)
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <spi_buffer_read+0xf8>)
 8001358:	4915      	ldr	r1, [pc, #84]	@ (80013b0 <spi_buffer_read+0xfc>)
 800135a:	400a      	ands	r2, r1
 800135c:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 800135e:	183b      	adds	r3, r7, r0
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff fbe6 	bl	8000b34 <SPI_WriteByte>
	for (int i = 0; i < num_bytes; i++) {
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e00b      	b.n	8001386 <spi_buffer_read+0xd2>
		  *data_ptr=SPI_ReadByte();
 800136e:	f7ff ff53 	bl	8001218 <SPI_ReadByte>
 8001372:	0003      	movs	r3, r0
 8001374:	001a      	movs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	701a      	strb	r2, [r3, #0]
	       data_ptr++;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	429a      	cmp	r2, r3
 800138c:	dbef      	blt.n	800136e <spi_buffer_read+0xba>
	    }
	GPIOB->ODR |= SPI2_CS_PIN;
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <spi_buffer_read+0xf8>)
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <spi_buffer_read+0xf8>)
 8001394:	2180      	movs	r1, #128	@ 0x80
 8001396:	0149      	lsls	r1, r1, #5
 8001398:	430a      	orrs	r2, r1
 800139a:	615a      	str	r2, [r3, #20]
}
 800139c:	46bd      	mov	sp, r7
 800139e:	b007      	add	sp, #28
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	080036f4 	.word	0x080036f4
 80013a8:	08003714 	.word	0x08003714
 80013ac:	48000400 	.word	0x48000400
 80013b0:	ffffefff 	.word	0xffffefff

080013b4 <cmd_buffer_spi_read>:
uint8_t* cmd_buffer_spi_read(int argc, char *argv[])
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
    if (argc < 3) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	dc05      	bgt.n	80013d0 <cmd_buffer_spi_read+0x1c>
        printf("\nInvalid command: Buffer READ requires number of bytes and start address\n");
 80013c4:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <cmd_buffer_spi_read+0x114>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f000 feee 	bl	80021a8 <puts>
        return NULL; // Return NULL to indicate an error
 80013cc:	2300      	movs	r3, #0
 80013ce:	e076      	b.n	80014be <cmd_buffer_spi_read+0x10a>
    }

    int num_bytes = atoi(argv[1]); // Parse number of bytes
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3304      	adds	r3, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	0018      	movs	r0, r3
 80013d8:	f000 fc50 	bl	8001c7c <atoi>
 80013dc:	0003      	movs	r3, r0
 80013de:	61bb      	str	r3, [r7, #24]
    if (num_bytes <= 0) {
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dc05      	bgt.n	80013f2 <cmd_buffer_spi_read+0x3e>
        printf("\nInvalid number of bytes: Must be greater than 0\n");
 80013e6:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <cmd_buffer_spi_read+0x118>)
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 fedd 	bl	80021a8 <puts>
        return NULL; // Return NULL to indicate an error
 80013ee:	2300      	movs	r3, #0
 80013f0:	e065      	b.n	80014be <cmd_buffer_spi_read+0x10a>
    }

    char *endptr;
    uint16_t start_address = (uint16_t)strtol(argv[2], &endptr, 16);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3308      	adds	r3, #8
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	220c      	movs	r2, #12
 80013fa:	18b9      	adds	r1, r7, r2
 80013fc:	2210      	movs	r2, #16
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 fd88 	bl	8001f14 <strtol>
 8001404:	0002      	movs	r2, r0
 8001406:	2316      	movs	r3, #22
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	801a      	strh	r2, [r3, #0]
    if (*endptr != '\0') {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d009      	beq.n	8001428 <cmd_buffer_spi_read+0x74>
            printf("\nInvalid address: %s\n", argv[1]);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	3304      	adds	r3, #4
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b2d      	ldr	r3, [pc, #180]	@ (80014d0 <cmd_buffer_spi_read+0x11c>)
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f000 fe52 	bl	80020c8 <iprintf>
            return NULL;
 8001424:	2300      	movs	r3, #0
 8001426:	e04a      	b.n	80014be <cmd_buffer_spi_read+0x10a>
        }
    if (start_address > 0x1FFF) {
 8001428:	2316      	movs	r3, #22
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	881a      	ldrh	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	429a      	cmp	r2, r3
 8001434:	d305      	bcc.n	8001442 <cmd_buffer_spi_read+0x8e>
        printf("\nInvalid Buffer Address: Choose between [0, 0x1FFF]\n");
 8001436:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <cmd_buffer_spi_read+0x120>)
 8001438:	0018      	movs	r0, r3
 800143a:	f000 feb5 	bl	80021a8 <puts>
        return NULL; // Return NULL to indicate an error
 800143e:	2300      	movs	r3, #0
 8001440:	e03d      	b.n	80014be <cmd_buffer_spi_read+0x10a>
    }
    uint8_t *data_buffer = (uint8_t *)malloc(num_bytes);
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	0018      	movs	r0, r3
 8001446:	f000 fc1f 	bl	8001c88 <malloc>
 800144a:	0003      	movs	r3, r0
 800144c:	613b      	str	r3, [r7, #16]
    if (!data_buffer) {
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d105      	bne.n	8001460 <cmd_buffer_spi_read+0xac>
        printf("\nMemory allocation failed\n");
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <cmd_buffer_spi_read+0x124>)
 8001456:	0018      	movs	r0, r3
 8001458:	f000 fea6 	bl	80021a8 <puts>
        return NULL; // Return NULL to indicate an error
 800145c:	2300      	movs	r3, #0
 800145e:	e02e      	b.n	80014be <cmd_buffer_spi_read+0x10a>
    }

	if(num_bytes < 1)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	dc07      	bgt.n	8001476 <cmd_buffer_spi_read+0xc2>
		{
			printf("\nInvalid number of bytes: %d\n",num_bytes);
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <cmd_buffer_spi_read+0x128>)
 800146a:	0011      	movs	r1, r2
 800146c:	0018      	movs	r0, r3
 800146e:	f000 fe2b 	bl	80020c8 <iprintf>
			return NULL;
 8001472:	2300      	movs	r3, #0
 8001474:	e023      	b.n	80014be <cmd_buffer_spi_read+0x10a>
		}
	spi_buffer_read(num_bytes,start_address,data_buffer);
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	2416      	movs	r4, #22
 800147a:	193b      	adds	r3, r7, r4
 800147c:	8819      	ldrh	r1, [r3, #0]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff ff17 	bl	80012b4 <spi_buffer_read>
    printf("\nSPI Read Completed: Address 0x%02X\n", start_address);
 8001486:	193b      	adds	r3, r7, r4
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <cmd_buffer_spi_read+0x12c>)
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fe1a 	bl	80020c8 <iprintf>
    for (int i = 0; i < num_bytes; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	e00c      	b.n	80014b4 <cmd_buffer_spi_read+0x100>
        printf("Data[%d]: 0x%02X\n", i, data_buffer[i]);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	18d3      	adds	r3, r2, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	001a      	movs	r2, r3
 80014a4:	69f9      	ldr	r1, [r7, #28]
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <cmd_buffer_spi_read+0x130>)
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 fe0d 	bl	80020c8 <iprintf>
    for (int i = 0; i < num_bytes; i++) {
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbee      	blt.n	800149a <cmd_buffer_spi_read+0xe6>
    }

    return data_buffer; // Return the pointer to the data buffer
 80014bc:	693b      	ldr	r3, [r7, #16]
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b009      	add	sp, #36	@ 0x24
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	080037c0 	.word	0x080037c0
 80014cc:	0800380c 	.word	0x0800380c
 80014d0:	08003628 	.word	0x08003628
 80014d4:	08003840 	.word	0x08003840
 80014d8:	08003874 	.word	0x08003874
 80014dc:	080036f4 	.word	0x080036f4
 80014e0:	08003890 	.word	0x08003890
 80014e4:	080038b8 	.word	0x080038b8

080014e8 <cmd_spi_read>:

void cmd_spi_read(int argc, char *argv[]) {
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    if (argc < 2) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	dc04      	bgt.n	8001502 <cmd_spi_read+0x1a>
        printf("\nInvalid command: READ requires address\n");
 80014f8:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <cmd_spi_read+0x98>)
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 fe54 	bl	80021a8 <puts>
        return;
 8001500:	e03a      	b.n	8001578 <cmd_spi_read+0x90>
    }

    // Parse the address
    char *endptr;
    uint8_t addr = (uint8_t)strtol(argv[1], &endptr, 16);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3304      	adds	r3, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2208      	movs	r2, #8
 800150a:	18b9      	adds	r1, r7, r2
 800150c:	2210      	movs	r2, #16
 800150e:	0018      	movs	r0, r3
 8001510:	f000 fd00 	bl	8001f14 <strtol>
 8001514:	0002      	movs	r2, r0
 8001516:	230f      	movs	r3, #15
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	701a      	strb	r2, [r3, #0]
    if (*endptr != '\0') {
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <cmd_spi_read+0x4e>
        printf("\nInvalid address: %s\n", argv[1]);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3304      	adds	r3, #4
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <cmd_spi_read+0x9c>)
 800152c:	0011      	movs	r1, r2
 800152e:	0018      	movs	r0, r3
 8001530:	f000 fdca 	bl	80020c8 <iprintf>
        return;
 8001534:	e020      	b.n	8001578 <cmd_spi_read+0x90>
    }

    // Pull CS Low
    GPIOB->ODR &= ~SPI2_CS_PIN;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <cmd_spi_read+0xa0>)
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <cmd_spi_read+0xa0>)
 800153c:	4913      	ldr	r1, [pc, #76]	@ (800158c <cmd_spi_read+0xa4>)
 800153e:	400a      	ands	r2, r1
 8001540:	615a      	str	r2, [r3, #20]

    // Send address and read data
    SPI_WriteByte(addr);           // Send the address
 8001542:	250f      	movs	r5, #15
 8001544:	197b      	adds	r3, r7, r5
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff faf3 	bl	8000b34 <SPI_WriteByte>
    uint8_t data = SPI_ReadByte(); // Read the data
 800154e:	260e      	movs	r6, #14
 8001550:	19bc      	adds	r4, r7, r6
 8001552:	f7ff fe61 	bl	8001218 <SPI_ReadByte>
 8001556:	0003      	movs	r3, r0
 8001558:	7023      	strb	r3, [r4, #0]

    // Pull CS High
    GPIOB->ODR |= SPI2_CS_PIN;
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <cmd_spi_read+0xa0>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <cmd_spi_read+0xa0>)
 8001560:	2180      	movs	r1, #128	@ 0x80
 8001562:	0149      	lsls	r1, r1, #5
 8001564:	430a      	orrs	r2, r1
 8001566:	615a      	str	r2, [r3, #20]

    // Print the received data
    printf("\nSPI Read Completed: Address 0x%02X, Data 0x%02X\n", addr, data);
 8001568:	197b      	adds	r3, r7, r5
 800156a:	7819      	ldrb	r1, [r3, #0]
 800156c:	19bb      	adds	r3, r7, r6
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <cmd_spi_read+0xa8>)
 8001572:	0018      	movs	r0, r3
 8001574:	f000 fda8 	bl	80020c8 <iprintf>
}
 8001578:	46bd      	mov	sp, r7
 800157a:	b005      	add	sp, #20
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	080038cc 	.word	0x080038cc
 8001584:	08003628 	.word	0x08003628
 8001588:	48000400 	.word	0x48000400
 800158c:	ffffefff 	.word	0xffffefff
 8001590:	080038f4 	.word	0x080038f4

08001594 <cmd_phy_spi_write>:




void cmd_phy_spi_write(int argc, char *argv[])
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
	if (argc < 3)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	dc04      	bgt.n	80015ae <cmd_phy_spi_write+0x1a>
	{
	  printf("\nInvalid command: WRITE requires number of bytes and data\n");
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <cmd_phy_spi_write+0x20>)
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 fdfe 	bl	80021a8 <puts>
	  return;
 80015ac:	46c0      	nop			@ (mov r8, r8)
	 }


}
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	08003500 	.word	0x08003500

080015b8 <mac_spi_read>:

uint8_t mac_spi_read(uint8_t addr, uint8_t bank)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0002      	movs	r2, r0
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	1dbb      	adds	r3, r7, #6
 80015c6:	1c0a      	adds	r2, r1, #0
 80015c8:	701a      	strb	r2, [r3, #0]
	if(addr > 0x1F)
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b1f      	cmp	r3, #31
 80015d0:	d903      	bls.n	80015da <mac_spi_read+0x22>
	{
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <mac_spi_read+0x68>)
 80015d4:	0018      	movs	r0, r3
 80015d6:	f000 fde7 	bl	80021a8 <puts>
	}

	select_reg_bank(bank);
 80015da:	1dbb      	adds	r3, r7, #6
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0018      	movs	r0, r3
 80015e0:	f7ff fb16 	bl	8000c10 <select_reg_bank>
				// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <mac_spi_read+0x6c>)
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <mac_spi_read+0x6c>)
 80015ea:	490f      	ldr	r1, [pc, #60]	@ (8001628 <mac_spi_read+0x70>)
 80015ec:	400a      	ands	r2, r1
 80015ee:	615a      	str	r2, [r3, #20]

		        // Send address and read data
	SPI_WriteByte(addr);           // Send the address
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff fa9d 	bl	8000b34 <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 80015fa:	250f      	movs	r5, #15
 80015fc:	197c      	adds	r4, r7, r5
 80015fe:	f7ff fe0b 	bl	8001218 <SPI_ReadByte>
 8001602:	0003      	movs	r3, r0
 8001604:	7023      	strb	r3, [r4, #0]

		        // Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <mac_spi_read+0x6c>)
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <mac_spi_read+0x6c>)
 800160c:	2180      	movs	r1, #128	@ 0x80
 800160e:	0149      	lsls	r1, r1, #5
 8001610:	430a      	orrs	r2, r1
 8001612:	615a      	str	r2, [r3, #20]

	return data;
 8001614:	197b      	adds	r3, r7, r5
 8001616:	781b      	ldrb	r3, [r3, #0]
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bdb0      	pop	{r4, r5, r7, pc}
 8001620:	08003928 	.word	0x08003928
 8001624:	48000400 	.word	0x48000400
 8001628:	ffffefff 	.word	0xffffefff

0800162c <eth_spi_read>:

uint8_t eth_spi_read(uint8_t addr, uint8_t bank)
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	0002      	movs	r2, r0
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	701a      	strb	r2, [r3, #0]
 8001638:	1dbb      	adds	r3, r7, #6
 800163a:	1c0a      	adds	r2, r1, #0
 800163c:	701a      	strb	r2, [r3, #0]
	if(addr > 0x1F)
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b1f      	cmp	r3, #31
 8001644:	d903      	bls.n	800164e <eth_spi_read+0x22>
	{
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <eth_spi_read+0x68>)
 8001648:	0018      	movs	r0, r3
 800164a:	f000 fdad 	bl	80021a8 <puts>
	}

	select_reg_bank(bank);
 800164e:	1dbb      	adds	r3, r7, #6
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff fadc 	bl	8000c10 <select_reg_bank>
				// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <eth_spi_read+0x6c>)
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <eth_spi_read+0x6c>)
 800165e:	490f      	ldr	r1, [pc, #60]	@ (800169c <eth_spi_read+0x70>)
 8001660:	400a      	ands	r2, r1
 8001662:	615a      	str	r2, [r3, #20]

		        // Send address and read data
	SPI_WriteByte(addr);           // Send the address
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff fa63 	bl	8000b34 <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 800166e:	250f      	movs	r5, #15
 8001670:	197c      	adds	r4, r7, r5
 8001672:	f7ff fdd1 	bl	8001218 <SPI_ReadByte>
 8001676:	0003      	movs	r3, r0
 8001678:	7023      	strb	r3, [r4, #0]

		        // Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <eth_spi_read+0x6c>)
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <eth_spi_read+0x6c>)
 8001680:	2180      	movs	r1, #128	@ 0x80
 8001682:	0149      	lsls	r1, r1, #5
 8001684:	430a      	orrs	r2, r1
 8001686:	615a      	str	r2, [r3, #20]

	return data;
 8001688:	197b      	adds	r3, r7, r5
 800168a:	781b      	ldrb	r3, [r3, #0]
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b004      	add	sp, #16
 8001692:	bdb0      	pop	{r4, r5, r7, pc}
 8001694:	08003928 	.word	0x08003928
 8001698:	48000400 	.word	0x48000400
 800169c:	ffffefff 	.word	0xffffefff

080016a0 <cmd_eth_spi_read>:

void cmd_eth_spi_read(int argc, char *argv[])
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	if (argc < 3)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	dc04      	bgt.n	80016ba <cmd_eth_spi_read+0x1a>
	{
		 printf("\nInvalid command: MAC READ requires reg_bank and address\n");
 80016b0:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <cmd_eth_spi_read+0xa0>)
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 fd78 	bl	80021a8 <puts>
		 return;
 80016b8:	e03e      	b.n	8001738 <cmd_eth_spi_read+0x98>
	}

	int reg_bank = atoi(argv[1]);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3304      	adds	r3, #4
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f000 fadb 	bl	8001c7c <atoi>
 80016c6:	0003      	movs	r3, r0
 80016c8:	617b      	str	r3, [r7, #20]
	if(reg_bank > 3)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	dd04      	ble.n	80016da <cmd_eth_spi_read+0x3a>
	{
		printf("\nInvalid Register Bank: Choose between [0, 3]\n");
 80016d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <cmd_eth_spi_read+0xa4>)
 80016d2:	0018      	movs	r0, r3
 80016d4:	f000 fd68 	bl	80021a8 <puts>
		return;
 80016d8:	e02e      	b.n	8001738 <cmd_eth_spi_read+0x98>
	}


	char *endptr;
	uint8_t addr = (uint8_t)strtol(argv[2], &endptr, 16);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3308      	adds	r3, #8
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	220c      	movs	r2, #12
 80016e2:	18b9      	adds	r1, r7, r2
 80016e4:	2210      	movs	r2, #16
 80016e6:	0018      	movs	r0, r3
 80016e8:	f000 fc14 	bl	8001f14 <strtol>
 80016ec:	0002      	movs	r2, r0
 80016ee:	2313      	movs	r3, #19
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	701a      	strb	r2, [r3, #0]
	if (*endptr != '\0')
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <cmd_eth_spi_read+0x6e>
	{
		printf("\nInvalid address: %s\n", argv[2]);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	3308      	adds	r3, #8
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <cmd_eth_spi_read+0xa8>)
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f000 fcde 	bl	80020c8 <iprintf>
		return;
 800170c:	e014      	b.n	8001738 <cmd_eth_spi_read+0x98>
	}

	uint8_t data = eth_spi_read(addr, reg_bank);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	2512      	movs	r5, #18
 8001714:	197c      	adds	r4, r7, r5
 8001716:	2613      	movs	r6, #19
 8001718:	19bb      	adds	r3, r7, r6
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	0011      	movs	r1, r2
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff ff84 	bl	800162c <eth_spi_read>
 8001724:	0003      	movs	r3, r0
 8001726:	7023      	strb	r3, [r4, #0]

						    	            // Print the received data
	printf("\nSPI ETH Read Completed: Address 0x%02X, Data 0x%02X\n", addr, data);
 8001728:	19bb      	adds	r3, r7, r6
 800172a:	7819      	ldrb	r1, [r3, #0]
 800172c:	197b      	adds	r3, r7, r5
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <cmd_eth_spi_read+0xac>)
 8001732:	0018      	movs	r0, r3
 8001734:	f000 fcc8 	bl	80020c8 <iprintf>

}
 8001738:	46bd      	mov	sp, r7
 800173a:	b007      	add	sp, #28
 800173c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	08003960 	.word	0x08003960
 8001744:	080035f8 	.word	0x080035f8
 8001748:	08003628 	.word	0x08003628
 800174c:	0800399c 	.word	0x0800399c

08001750 <cmd_mac_spi_read>:

void cmd_mac_spi_read(int argc, char *argv[])
{
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
			if (argc < 3)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	dc04      	bgt.n	800176a <cmd_mac_spi_read+0x1a>
			{
	        printf("\nInvalid command: MAC READ requires reg_bank and address\n");
 8001760:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <cmd_mac_spi_read+0xa0>)
 8001762:	0018      	movs	r0, r3
 8001764:	f000 fd20 	bl	80021a8 <puts>
	        return;
 8001768:	e03e      	b.n	80017e8 <cmd_mac_spi_read+0x98>
	    }

			int reg_bank = atoi(argv[1]);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	3304      	adds	r3, #4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0018      	movs	r0, r3
 8001772:	f000 fa83 	bl	8001c7c <atoi>
 8001776:	0003      	movs	r3, r0
 8001778:	617b      	str	r3, [r7, #20]
			if(reg_bank > 3)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b03      	cmp	r3, #3
 800177e:	dd04      	ble.n	800178a <cmd_mac_spi_read+0x3a>
			{
					printf("\nInvalid Register Bank: Choose between [0, 3]\n");
 8001780:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <cmd_mac_spi_read+0xa4>)
 8001782:	0018      	movs	r0, r3
 8001784:	f000 fd10 	bl	80021a8 <puts>
				  return;
 8001788:	e02e      	b.n	80017e8 <cmd_mac_spi_read+0x98>
			}


	    char *endptr;
	    uint8_t addr = (uint8_t)strtol(argv[2], &endptr, 16);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3308      	adds	r3, #8
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	220c      	movs	r2, #12
 8001792:	18b9      	adds	r1, r7, r2
 8001794:	2210      	movs	r2, #16
 8001796:	0018      	movs	r0, r3
 8001798:	f000 fbbc 	bl	8001f14 <strtol>
 800179c:	0002      	movs	r2, r0
 800179e:	2313      	movs	r3, #19
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	701a      	strb	r2, [r3, #0]
	    if (*endptr != '\0')
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <cmd_mac_spi_read+0x6e>
	    {
	        printf("\nInvalid address: %s\n", argv[2]);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	3308      	adds	r3, #8
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <cmd_mac_spi_read+0xa8>)
 80017b4:	0011      	movs	r1, r2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 fc86 	bl	80020c8 <iprintf>
	        return;
 80017bc:	e014      	b.n	80017e8 <cmd_mac_spi_read+0x98>
	    }

	    uint8_t data = mac_spi_read(addr, reg_bank);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	2512      	movs	r5, #18
 80017c4:	197c      	adds	r4, r7, r5
 80017c6:	2613      	movs	r6, #19
 80017c8:	19bb      	adds	r3, r7, r6
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	0011      	movs	r1, r2
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff fef2 	bl	80015b8 <mac_spi_read>
 80017d4:	0003      	movs	r3, r0
 80017d6:	7023      	strb	r3, [r4, #0]

	            // Print the received data
	    printf("\nSPI MAC Read Completed: Address 0x%02X, Data 0x%02X\n", addr, data);
 80017d8:	19bb      	adds	r3, r7, r6
 80017da:	7819      	ldrb	r1, [r3, #0]
 80017dc:	197b      	adds	r3, r7, r5
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <cmd_mac_spi_read+0xac>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fc70 	bl	80020c8 <iprintf>
}
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b007      	add	sp, #28
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	08003960 	.word	0x08003960
 80017f4:	080035f8 	.word	0x080035f8
 80017f8:	08003628 	.word	0x08003628
 80017fc:	080039d4 	.word	0x080039d4

08001800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001816:	f000 ff67 	bl	80026e8 <__errno>
 800181a:	0003      	movs	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
  return -1;
 8001820:	2301      	movs	r3, #1
 8001822:	425b      	negs	r3, r3
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001834:	2301      	movs	r3, #1
 8001836:	425a      	negs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff ffe5 	bl	800180c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	e7fd      	b.n	8001842 <_exit+0x16>

08001846 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e00a      	b.n	800186e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001858:	f000 f890 	bl	800197c <__io_getchar>
 800185c:	0001      	movs	r1, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	b2ca      	uxtb	r2, r1
 8001866:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3301      	adds	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	dbf0      	blt.n	8001858 <_read+0x12>
  }

  return len;
 8001876:	687b      	ldr	r3, [r7, #4]
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b006      	add	sp, #24
 800187e:	bd80      	pop	{r7, pc}

08001880 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e009      	b.n	80018a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	60ba      	str	r2, [r7, #8]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	0018      	movs	r0, r3
 800189c:	f000 f886 	bl	80019ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbf1      	blt.n	8001892 <_write+0x12>
  }
  return len;
 80018ae:	687b      	ldr	r3, [r7, #4]
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b006      	add	sp, #24
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_close>:

int _close(int file)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	425b      	negs	r3, r3
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b002      	add	sp, #8
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2280      	movs	r2, #128	@ 0x80
 80018da:	0192      	lsls	r2, r2, #6
 80018dc:	605a      	str	r2, [r3, #4]
  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_isatty>:

int _isatty(int file)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b002      	add	sp, #8
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001906:	2300      	movs	r3, #0
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b004      	add	sp, #16
 800190e:	bd80      	pop	{r7, pc}

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	@ (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f000 fed2 	bl	80026e8 <__errno>
 8001944:	0003      	movs	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	2301      	movs	r3, #1
 800194c:	425b      	negs	r3, r3
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	18d2      	adds	r2, r2, r3
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <_sbrk+0x64>)
 8001960:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b006      	add	sp, #24
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20008000 	.word	0x20008000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000194 	.word	0x20000194
 8001978:	200002e8 	.word	0x200002e8

0800197c <__io_getchar>:
 *
 * Returns:
 * either received char or -1 if not
 */
int __io_getchar(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	char ch;
	if(cbfifo_dequeue(&fiforx, &ch, 1)==1)
 8001982:	1df9      	adds	r1, r7, #7
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <__io_getchar+0x2c>)
 8001986:	2201      	movs	r2, #1
 8001988:	0018      	movs	r0, r3
 800198a:	f7fe fcc1 	bl	8000310 <cbfifo_dequeue>
 800198e:	0003      	movs	r3, r0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d102      	bne.n	800199a <__io_getchar+0x1e>
	{
		return ch;
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	e001      	b.n	800199e <__io_getchar+0x22>
	}
	else
	{
		return -1;
 800199a:	2301      	movs	r3, #1
 800199c:	425b      	negs	r3, r3
	}
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	20000108 	.word	0x20000108

080019ac <__io_putchar>:
 *
 * Returns:
 *  either received 1 or -1(if transmission not successful)
 */
int __io_putchar(int ch)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	while (cbfifo_length(&fifotx) >= 127);
 80019b4:	46c0      	nop			@ (mov r8, r8)
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <__io_putchar+0x48>)
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7fe fcf1 	bl	80003a0 <cbfifo_length>
 80019be:	0003      	movs	r3, r0
 80019c0:	2b7e      	cmp	r3, #126	@ 0x7e
 80019c2:	d8f8      	bhi.n	80019b6 <__io_putchar+0xa>
	if(cbfifo_enqueue(&fifotx,&ch,1)==1)
 80019c4:	1d39      	adds	r1, r7, #4
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <__io_putchar+0x48>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7fe fc51 	bl	8000272 <cbfifo_enqueue>
 80019d0:	0003      	movs	r3, r0
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <__io_putchar+0x3a>
	{
		USART2->CR1 |= USART_CR1_TXEIE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <__io_putchar+0x4c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <__io_putchar+0x4c>)
 80019dc:	2180      	movs	r1, #128	@ 0x80
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
		return 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e001      	b.n	80019ea <__io_putchar+0x3e>
	}
	else
	{
		return -1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	425b      	negs	r3, r3
	}
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b002      	add	sp, #8
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	2000007c 	.word	0x2000007c
 80019f8:	40004400 	.word	0x40004400

080019fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019fc:	480e      	ldr	r0, [pc, #56]	@ (8001a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a00:	f000 f866 	bl	8001ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001a04:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a06:	490e      	ldr	r1, [pc, #56]	@ (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a08:	4a0e      	ldr	r2, [pc, #56]	@ (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a1c:	4c0b      	ldr	r4, [pc, #44]	@ (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a2a:	f000 fe63 	bl	80026f4 <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 8001a2e:	f000 f895 	bl	8001b5c <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7fe ffc3 	bl	80009bc <main>

08001a36 <LoopForever>:

LoopForever:
  b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   r0, =_estack
 8001a38:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a44:	08003c64 	.word	0x08003c64
  ldr r2, =_sbss
 8001a48:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a4c:	200002e4 	.word	0x200002e4

08001a50 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC_COMP_IRQHandler>
	...

08001a54 <Set_Clocks_To_48MHz>:
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <Set_Clocks_To_48MHz+0x70>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <Set_Clocks_To_48MHz+0x70>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a68:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001a6a:	2180      	movs	r1, #128	@ 0x80
 8001a6c:	0249      	lsls	r1, r1, #9
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	029b      	lsls	r3, r3, #10
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d0f9      	beq.n	8001a74 <Set_Clocks_To_48MHz+0x20>
 8001a80:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001a86:	21f0      	movs	r1, #240	@ 0xf0
 8001a88:	438a      	bics	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001a92:	2103      	movs	r1, #3
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	46c0      	nop			@ (mov r8, r8)
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	089a      	lsrs	r2, r3, #2
 8001aa0:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4053      	eors	r3, r2
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d1f6      	bne.n	8001a9a <Set_Clocks_To_48MHz+0x46>
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a06      	ldr	r2, [pc, #24]	@ (8001acc <Set_Clocks_To_48MHz+0x78>)
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <Set_Clocks_To_48MHz+0x74>)
 8001ab6:	2180      	movs	r1, #128	@ 0x80
 8001ab8:	00c9      	lsls	r1, r1, #3
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	fffff8ff 	.word	0xfffff8ff

08001ad0 <SystemInit>:
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <SystemInit+0x74>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <SystemInit+0x74>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <SystemInit+0x74>)
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <SystemInit+0x74>)
 8001ae6:	4918      	ldr	r1, [pc, #96]	@ (8001b48 <SystemInit+0x78>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <SystemInit+0x74>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <SystemInit+0x74>)
 8001af2:	4916      	ldr	r1, [pc, #88]	@ (8001b4c <SystemInit+0x7c>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <SystemInit+0x74>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <SystemInit+0x74>)
 8001afe:	4914      	ldr	r1, [pc, #80]	@ (8001b50 <SystemInit+0x80>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <SystemInit+0x74>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <SystemInit+0x74>)
 8001b0a:	4912      	ldr	r1, [pc, #72]	@ (8001b54 <SystemInit+0x84>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <SystemInit+0x74>)
 8001b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <SystemInit+0x74>)
 8001b16:	210f      	movs	r1, #15
 8001b18:	438a      	bics	r2, r1
 8001b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <SystemInit+0x74>)
 8001b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <SystemInit+0x74>)
 8001b22:	490d      	ldr	r1, [pc, #52]	@ (8001b58 <SystemInit+0x88>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <SystemInit+0x74>)
 8001b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <SystemInit+0x74>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	438a      	bics	r2, r1
 8001b32:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <SystemInit+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	f7ff ff8b 	bl	8001a54 <Set_Clocks_To_48MHz>
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08ffb80c 	.word	0x08ffb80c
 8001b4c:	fef6ffff 	.word	0xfef6ffff
 8001b50:	fffbffff 	.word	0xfffbffff
 8001b54:	ffc0ffff 	.word	0xffc0ffff
 8001b58:	fff0feac 	.word	0xfff0feac

08001b5c <SystemCoreClockUpdate>:
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4b3d      	ldr	r3, [pc, #244]	@ (8001c68 <SystemCoreClockUpdate+0x10c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	220c      	movs	r2, #12
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d00f      	beq.n	8001ba2 <SystemCoreClockUpdate+0x46>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d859      	bhi.n	8001c3c <SystemCoreClockUpdate+0xe0>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d015      	beq.n	8001bba <SystemCoreClockUpdate+0x5e>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d853      	bhi.n	8001c3c <SystemCoreClockUpdate+0xe0>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <SystemCoreClockUpdate+0x4e>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d008      	beq.n	8001bb2 <SystemCoreClockUpdate+0x56>
 8001ba0:	e04c      	b.n	8001c3c <SystemCoreClockUpdate+0xe0>
 8001ba2:	4b32      	ldr	r3, [pc, #200]	@ (8001c6c <SystemCoreClockUpdate+0x110>)
 8001ba4:	4a32      	ldr	r2, [pc, #200]	@ (8001c70 <SystemCoreClockUpdate+0x114>)
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e04c      	b.n	8001c44 <SystemCoreClockUpdate+0xe8>
 8001baa:	4b30      	ldr	r3, [pc, #192]	@ (8001c6c <SystemCoreClockUpdate+0x110>)
 8001bac:	4a31      	ldr	r2, [pc, #196]	@ (8001c74 <SystemCoreClockUpdate+0x118>)
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e048      	b.n	8001c44 <SystemCoreClockUpdate+0xe8>
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c6c <SystemCoreClockUpdate+0x110>)
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8001c74 <SystemCoreClockUpdate+0x118>)
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e044      	b.n	8001c44 <SystemCoreClockUpdate+0xe8>
 8001bba:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <SystemCoreClockUpdate+0x10c>)
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	23f0      	movs	r3, #240	@ 0xf0
 8001bc0:	039b      	lsls	r3, r3, #14
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <SystemCoreClockUpdate+0x10c>)
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	23c0      	movs	r3, #192	@ 0xc0
 8001bcc:	025b      	lsls	r3, r3, #9
 8001bce:	4013      	ands	r3, r2
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	0c9b      	lsrs	r3, r3, #18
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <SystemCoreClockUpdate+0x10c>)
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	220f      	movs	r2, #15
 8001be0:	4013      	ands	r3, r2
 8001be2:	3301      	adds	r3, #1
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d10a      	bne.n	8001c06 <SystemCoreClockUpdate+0xaa>
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	4820      	ldr	r0, [pc, #128]	@ (8001c74 <SystemCoreClockUpdate+0x118>)
 8001bf4:	f7fe fa9a 	bl	800012c <__udivsi3>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	435a      	muls	r2, r3
 8001c00:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <SystemCoreClockUpdate+0x110>)
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e01e      	b.n	8001c44 <SystemCoreClockUpdate+0xe8>
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	23c0      	movs	r3, #192	@ 0xc0
 8001c0a:	025b      	lsls	r3, r3, #9
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10a      	bne.n	8001c26 <SystemCoreClockUpdate+0xca>
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	4817      	ldr	r0, [pc, #92]	@ (8001c70 <SystemCoreClockUpdate+0x114>)
 8001c14:	f7fe fa8a 	bl	800012c <__udivsi3>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	435a      	muls	r2, r3
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <SystemCoreClockUpdate+0x110>)
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e00e      	b.n	8001c44 <SystemCoreClockUpdate+0xe8>
 8001c26:	6839      	ldr	r1, [r7, #0]
 8001c28:	4812      	ldr	r0, [pc, #72]	@ (8001c74 <SystemCoreClockUpdate+0x118>)
 8001c2a:	f7fe fa7f 	bl	800012c <__udivsi3>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	001a      	movs	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	435a      	muls	r2, r3
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <SystemCoreClockUpdate+0x110>)
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e003      	b.n	8001c44 <SystemCoreClockUpdate+0xe8>
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <SystemCoreClockUpdate+0x110>)
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <SystemCoreClockUpdate+0x118>)
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <SystemCoreClockUpdate+0x10c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <SystemCoreClockUpdate+0x11c>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <SystemCoreClockUpdate+0x110>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	40da      	lsrs	r2, r3
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <SystemCoreClockUpdate+0x110>)
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	02dc6c00 	.word	0x02dc6c00
 8001c74:	007a1200 	.word	0x007a1200
 8001c78:	08003a68 	.word	0x08003a68

08001c7c <atoi>:
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	220a      	movs	r2, #10
 8001c80:	2100      	movs	r1, #0
 8001c82:	f000 f947 	bl	8001f14 <strtol>
 8001c86:	bd10      	pop	{r4, pc}

08001c88 <malloc>:
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <malloc+0x10>)
 8001c8c:	0001      	movs	r1, r0
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	f000 f826 	bl	8001ce0 <_malloc_r>
 8001c94:	bd10      	pop	{r4, pc}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	20000010 	.word	0x20000010

08001c9c <sbrk_aligned>:
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8001cdc <sbrk_aligned+0x40>)
 8001ca0:	000d      	movs	r5, r1
 8001ca2:	6831      	ldr	r1, [r6, #0]
 8001ca4:	0004      	movs	r4, r0
 8001ca6:	2900      	cmp	r1, #0
 8001ca8:	d102      	bne.n	8001cb0 <sbrk_aligned+0x14>
 8001caa:	f000 fcf7 	bl	800269c <_sbrk_r>
 8001cae:	6030      	str	r0, [r6, #0]
 8001cb0:	0029      	movs	r1, r5
 8001cb2:	0020      	movs	r0, r4
 8001cb4:	f000 fcf2 	bl	800269c <_sbrk_r>
 8001cb8:	1c43      	adds	r3, r0, #1
 8001cba:	d103      	bne.n	8001cc4 <sbrk_aligned+0x28>
 8001cbc:	2501      	movs	r5, #1
 8001cbe:	426d      	negs	r5, r5
 8001cc0:	0028      	movs	r0, r5
 8001cc2:	bd70      	pop	{r4, r5, r6, pc}
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	1cc5      	adds	r5, r0, #3
 8001cc8:	439d      	bics	r5, r3
 8001cca:	42a8      	cmp	r0, r5
 8001ccc:	d0f8      	beq.n	8001cc0 <sbrk_aligned+0x24>
 8001cce:	1a29      	subs	r1, r5, r0
 8001cd0:	0020      	movs	r0, r4
 8001cd2:	f000 fce3 	bl	800269c <_sbrk_r>
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	d1f2      	bne.n	8001cc0 <sbrk_aligned+0x24>
 8001cda:	e7ef      	b.n	8001cbc <sbrk_aligned+0x20>
 8001cdc:	20000198 	.word	0x20000198

08001ce0 <_malloc_r>:
 8001ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	1ccb      	adds	r3, r1, #3
 8001ce6:	4393      	bics	r3, r2
 8001ce8:	3308      	adds	r3, #8
 8001cea:	0005      	movs	r5, r0
 8001cec:	001f      	movs	r7, r3
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d234      	bcs.n	8001d5c <_malloc_r+0x7c>
 8001cf2:	270c      	movs	r7, #12
 8001cf4:	42b9      	cmp	r1, r7
 8001cf6:	d833      	bhi.n	8001d60 <_malloc_r+0x80>
 8001cf8:	0028      	movs	r0, r5
 8001cfa:	f000 f871 	bl	8001de0 <__malloc_lock>
 8001cfe:	4e37      	ldr	r6, [pc, #220]	@ (8001ddc <_malloc_r+0xfc>)
 8001d00:	6833      	ldr	r3, [r6, #0]
 8001d02:	001c      	movs	r4, r3
 8001d04:	2c00      	cmp	r4, #0
 8001d06:	d12f      	bne.n	8001d68 <_malloc_r+0x88>
 8001d08:	0039      	movs	r1, r7
 8001d0a:	0028      	movs	r0, r5
 8001d0c:	f7ff ffc6 	bl	8001c9c <sbrk_aligned>
 8001d10:	0004      	movs	r4, r0
 8001d12:	1c43      	adds	r3, r0, #1
 8001d14:	d15f      	bne.n	8001dd6 <_malloc_r+0xf6>
 8001d16:	6834      	ldr	r4, [r6, #0]
 8001d18:	9400      	str	r4, [sp, #0]
 8001d1a:	9b00      	ldr	r3, [sp, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d14a      	bne.n	8001db6 <_malloc_r+0xd6>
 8001d20:	2c00      	cmp	r4, #0
 8001d22:	d052      	beq.n	8001dca <_malloc_r+0xea>
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	0028      	movs	r0, r5
 8001d28:	18e3      	adds	r3, r4, r3
 8001d2a:	9900      	ldr	r1, [sp, #0]
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	f000 fcb5 	bl	800269c <_sbrk_r>
 8001d32:	9b01      	ldr	r3, [sp, #4]
 8001d34:	4283      	cmp	r3, r0
 8001d36:	d148      	bne.n	8001dca <_malloc_r+0xea>
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	0028      	movs	r0, r5
 8001d3c:	1aff      	subs	r7, r7, r3
 8001d3e:	0039      	movs	r1, r7
 8001d40:	f7ff ffac 	bl	8001c9c <sbrk_aligned>
 8001d44:	3001      	adds	r0, #1
 8001d46:	d040      	beq.n	8001dca <_malloc_r+0xea>
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	19db      	adds	r3, r3, r7
 8001d4c:	6023      	str	r3, [r4, #0]
 8001d4e:	6833      	ldr	r3, [r6, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	2a00      	cmp	r2, #0
 8001d54:	d133      	bne.n	8001dbe <_malloc_r+0xde>
 8001d56:	9b00      	ldr	r3, [sp, #0]
 8001d58:	6033      	str	r3, [r6, #0]
 8001d5a:	e019      	b.n	8001d90 <_malloc_r+0xb0>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	dac9      	bge.n	8001cf4 <_malloc_r+0x14>
 8001d60:	230c      	movs	r3, #12
 8001d62:	602b      	str	r3, [r5, #0]
 8001d64:	2000      	movs	r0, #0
 8001d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d68:	6821      	ldr	r1, [r4, #0]
 8001d6a:	1bc9      	subs	r1, r1, r7
 8001d6c:	d420      	bmi.n	8001db0 <_malloc_r+0xd0>
 8001d6e:	290b      	cmp	r1, #11
 8001d70:	d90a      	bls.n	8001d88 <_malloc_r+0xa8>
 8001d72:	19e2      	adds	r2, r4, r7
 8001d74:	6027      	str	r7, [r4, #0]
 8001d76:	42a3      	cmp	r3, r4
 8001d78:	d104      	bne.n	8001d84 <_malloc_r+0xa4>
 8001d7a:	6032      	str	r2, [r6, #0]
 8001d7c:	6863      	ldr	r3, [r4, #4]
 8001d7e:	6011      	str	r1, [r2, #0]
 8001d80:	6053      	str	r3, [r2, #4]
 8001d82:	e005      	b.n	8001d90 <_malloc_r+0xb0>
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	e7f9      	b.n	8001d7c <_malloc_r+0x9c>
 8001d88:	6862      	ldr	r2, [r4, #4]
 8001d8a:	42a3      	cmp	r3, r4
 8001d8c:	d10e      	bne.n	8001dac <_malloc_r+0xcc>
 8001d8e:	6032      	str	r2, [r6, #0]
 8001d90:	0028      	movs	r0, r5
 8001d92:	f000 f82d 	bl	8001df0 <__malloc_unlock>
 8001d96:	0020      	movs	r0, r4
 8001d98:	2207      	movs	r2, #7
 8001d9a:	300b      	adds	r0, #11
 8001d9c:	1d23      	adds	r3, r4, #4
 8001d9e:	4390      	bics	r0, r2
 8001da0:	1ac2      	subs	r2, r0, r3
 8001da2:	4298      	cmp	r0, r3
 8001da4:	d0df      	beq.n	8001d66 <_malloc_r+0x86>
 8001da6:	1a1b      	subs	r3, r3, r0
 8001da8:	50a3      	str	r3, [r4, r2]
 8001daa:	e7dc      	b.n	8001d66 <_malloc_r+0x86>
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	e7ef      	b.n	8001d90 <_malloc_r+0xb0>
 8001db0:	0023      	movs	r3, r4
 8001db2:	6864      	ldr	r4, [r4, #4]
 8001db4:	e7a6      	b.n	8001d04 <_malloc_r+0x24>
 8001db6:	9c00      	ldr	r4, [sp, #0]
 8001db8:	6863      	ldr	r3, [r4, #4]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	e7ad      	b.n	8001d1a <_malloc_r+0x3a>
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	42a3      	cmp	r3, r4
 8001dc4:	d1fb      	bne.n	8001dbe <_malloc_r+0xde>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e7da      	b.n	8001d80 <_malloc_r+0xa0>
 8001dca:	230c      	movs	r3, #12
 8001dcc:	0028      	movs	r0, r5
 8001dce:	602b      	str	r3, [r5, #0]
 8001dd0:	f000 f80e 	bl	8001df0 <__malloc_unlock>
 8001dd4:	e7c6      	b.n	8001d64 <_malloc_r+0x84>
 8001dd6:	6007      	str	r7, [r0, #0]
 8001dd8:	e7da      	b.n	8001d90 <_malloc_r+0xb0>
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	2000019c 	.word	0x2000019c

08001de0 <__malloc_lock>:
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4802      	ldr	r0, [pc, #8]	@ (8001dec <__malloc_lock+0xc>)
 8001de4:	f000 fcab 	bl	800273e <__retarget_lock_acquire_recursive>
 8001de8:	bd10      	pop	{r4, pc}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	200002e0 	.word	0x200002e0

08001df0 <__malloc_unlock>:
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <__malloc_unlock+0xc>)
 8001df4:	f000 fca4 	bl	8002740 <__retarget_lock_release_recursive>
 8001df8:	bd10      	pop	{r4, pc}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	200002e0 	.word	0x200002e0

08001e00 <_strtol_l.constprop.0>:
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	b085      	sub	sp, #20
 8001e04:	0017      	movs	r7, r2
 8001e06:	001e      	movs	r6, r3
 8001e08:	9003      	str	r0, [sp, #12]
 8001e0a:	9101      	str	r1, [sp, #4]
 8001e0c:	2b24      	cmp	r3, #36	@ 0x24
 8001e0e:	d844      	bhi.n	8001e9a <_strtol_l.constprop.0+0x9a>
 8001e10:	000c      	movs	r4, r1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d041      	beq.n	8001e9a <_strtol_l.constprop.0+0x9a>
 8001e16:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <_strtol_l.constprop.0+0x10c>)
 8001e18:	2208      	movs	r2, #8
 8001e1a:	469c      	mov	ip, r3
 8001e1c:	0023      	movs	r3, r4
 8001e1e:	4661      	mov	r1, ip
 8001e20:	781d      	ldrb	r5, [r3, #0]
 8001e22:	3401      	adds	r4, #1
 8001e24:	5d48      	ldrb	r0, [r1, r5]
 8001e26:	0001      	movs	r1, r0
 8001e28:	4011      	ands	r1, r2
 8001e2a:	4210      	tst	r0, r2
 8001e2c:	d1f6      	bne.n	8001e1c <_strtol_l.constprop.0+0x1c>
 8001e2e:	2d2d      	cmp	r5, #45	@ 0x2d
 8001e30:	d13a      	bne.n	8001ea8 <_strtol_l.constprop.0+0xa8>
 8001e32:	7825      	ldrb	r5, [r4, #0]
 8001e34:	1c9c      	adds	r4, r3, #2
 8001e36:	2301      	movs	r3, #1
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	0033      	movs	r3, r6
 8001e3e:	4393      	bics	r3, r2
 8001e40:	d109      	bne.n	8001e56 <_strtol_l.constprop.0+0x56>
 8001e42:	2d30      	cmp	r5, #48	@ 0x30
 8001e44:	d136      	bne.n	8001eb4 <_strtol_l.constprop.0+0xb4>
 8001e46:	2120      	movs	r1, #32
 8001e48:	7823      	ldrb	r3, [r4, #0]
 8001e4a:	438b      	bics	r3, r1
 8001e4c:	2b58      	cmp	r3, #88	@ 0x58
 8001e4e:	d131      	bne.n	8001eb4 <_strtol_l.constprop.0+0xb4>
 8001e50:	0016      	movs	r6, r2
 8001e52:	7865      	ldrb	r5, [r4, #1]
 8001e54:	3402      	adds	r4, #2
 8001e56:	4a2e      	ldr	r2, [pc, #184]	@ (8001f10 <_strtol_l.constprop.0+0x110>)
 8001e58:	9b00      	ldr	r3, [sp, #0]
 8001e5a:	4694      	mov	ip, r2
 8001e5c:	4463      	add	r3, ip
 8001e5e:	0031      	movs	r1, r6
 8001e60:	0018      	movs	r0, r3
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	f7fe f9e8 	bl	8000238 <__aeabi_uidivmod>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4684      	mov	ip, r0
 8001e6c:	0010      	movs	r0, r2
 8001e6e:	002b      	movs	r3, r5
 8001e70:	3b30      	subs	r3, #48	@ 0x30
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	d825      	bhi.n	8001ec2 <_strtol_l.constprop.0+0xc2>
 8001e76:	001d      	movs	r5, r3
 8001e78:	42ae      	cmp	r6, r5
 8001e7a:	dd31      	ble.n	8001ee0 <_strtol_l.constprop.0+0xe0>
 8001e7c:	1c53      	adds	r3, r2, #1
 8001e7e:	d009      	beq.n	8001e94 <_strtol_l.constprop.0+0x94>
 8001e80:	2201      	movs	r2, #1
 8001e82:	4252      	negs	r2, r2
 8001e84:	4584      	cmp	ip, r0
 8001e86:	d305      	bcc.n	8001e94 <_strtol_l.constprop.0+0x94>
 8001e88:	d101      	bne.n	8001e8e <_strtol_l.constprop.0+0x8e>
 8001e8a:	42a9      	cmp	r1, r5
 8001e8c:	db25      	blt.n	8001eda <_strtol_l.constprop.0+0xda>
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4370      	muls	r0, r6
 8001e92:	1828      	adds	r0, r5, r0
 8001e94:	7825      	ldrb	r5, [r4, #0]
 8001e96:	3401      	adds	r4, #1
 8001e98:	e7e9      	b.n	8001e6e <_strtol_l.constprop.0+0x6e>
 8001e9a:	f000 fc25 	bl	80026e8 <__errno>
 8001e9e:	2316      	movs	r3, #22
 8001ea0:	6003      	str	r3, [r0, #0]
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	b005      	add	sp, #20
 8001ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea8:	9100      	str	r1, [sp, #0]
 8001eaa:	2d2b      	cmp	r5, #43	@ 0x2b
 8001eac:	d1c5      	bne.n	8001e3a <_strtol_l.constprop.0+0x3a>
 8001eae:	7825      	ldrb	r5, [r4, #0]
 8001eb0:	1c9c      	adds	r4, r3, #2
 8001eb2:	e7c2      	b.n	8001e3a <_strtol_l.constprop.0+0x3a>
 8001eb4:	2e00      	cmp	r6, #0
 8001eb6:	d1ce      	bne.n	8001e56 <_strtol_l.constprop.0+0x56>
 8001eb8:	3608      	adds	r6, #8
 8001eba:	2d30      	cmp	r5, #48	@ 0x30
 8001ebc:	d0cb      	beq.n	8001e56 <_strtol_l.constprop.0+0x56>
 8001ebe:	3602      	adds	r6, #2
 8001ec0:	e7c9      	b.n	8001e56 <_strtol_l.constprop.0+0x56>
 8001ec2:	002b      	movs	r3, r5
 8001ec4:	3b41      	subs	r3, #65	@ 0x41
 8001ec6:	2b19      	cmp	r3, #25
 8001ec8:	d801      	bhi.n	8001ece <_strtol_l.constprop.0+0xce>
 8001eca:	3d37      	subs	r5, #55	@ 0x37
 8001ecc:	e7d4      	b.n	8001e78 <_strtol_l.constprop.0+0x78>
 8001ece:	002b      	movs	r3, r5
 8001ed0:	3b61      	subs	r3, #97	@ 0x61
 8001ed2:	2b19      	cmp	r3, #25
 8001ed4:	d804      	bhi.n	8001ee0 <_strtol_l.constprop.0+0xe0>
 8001ed6:	3d57      	subs	r5, #87	@ 0x57
 8001ed8:	e7ce      	b.n	8001e78 <_strtol_l.constprop.0+0x78>
 8001eda:	2201      	movs	r2, #1
 8001edc:	4252      	negs	r2, r2
 8001ede:	e7d9      	b.n	8001e94 <_strtol_l.constprop.0+0x94>
 8001ee0:	1c53      	adds	r3, r2, #1
 8001ee2:	d108      	bne.n	8001ef6 <_strtol_l.constprop.0+0xf6>
 8001ee4:	2322      	movs	r3, #34	@ 0x22
 8001ee6:	9a03      	ldr	r2, [sp, #12]
 8001ee8:	9802      	ldr	r0, [sp, #8]
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	2f00      	cmp	r7, #0
 8001eee:	d0d9      	beq.n	8001ea4 <_strtol_l.constprop.0+0xa4>
 8001ef0:	1e63      	subs	r3, r4, #1
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	e007      	b.n	8001f06 <_strtol_l.constprop.0+0x106>
 8001ef6:	9b00      	ldr	r3, [sp, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d000      	beq.n	8001efe <_strtol_l.constprop.0+0xfe>
 8001efc:	4240      	negs	r0, r0
 8001efe:	2f00      	cmp	r7, #0
 8001f00:	d0d0      	beq.n	8001ea4 <_strtol_l.constprop.0+0xa4>
 8001f02:	2a00      	cmp	r2, #0
 8001f04:	d1f4      	bne.n	8001ef0 <_strtol_l.constprop.0+0xf0>
 8001f06:	9b01      	ldr	r3, [sp, #4]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	e7cb      	b.n	8001ea4 <_strtol_l.constprop.0+0xa4>
 8001f0c:	08003a79 	.word	0x08003a79
 8001f10:	7fffffff 	.word	0x7fffffff

08001f14 <strtol>:
 8001f14:	b510      	push	{r4, lr}
 8001f16:	4c04      	ldr	r4, [pc, #16]	@ (8001f28 <strtol+0x14>)
 8001f18:	0013      	movs	r3, r2
 8001f1a:	000a      	movs	r2, r1
 8001f1c:	0001      	movs	r1, r0
 8001f1e:	6820      	ldr	r0, [r4, #0]
 8001f20:	f7ff ff6e 	bl	8001e00 <_strtol_l.constprop.0>
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	20000010 	.word	0x20000010

08001f2c <std>:
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	b510      	push	{r4, lr}
 8001f30:	0004      	movs	r4, r0
 8001f32:	6003      	str	r3, [r0, #0]
 8001f34:	6043      	str	r3, [r0, #4]
 8001f36:	6083      	str	r3, [r0, #8]
 8001f38:	8181      	strh	r1, [r0, #12]
 8001f3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f3c:	81c2      	strh	r2, [r0, #14]
 8001f3e:	6103      	str	r3, [r0, #16]
 8001f40:	6143      	str	r3, [r0, #20]
 8001f42:	6183      	str	r3, [r0, #24]
 8001f44:	0019      	movs	r1, r3
 8001f46:	2208      	movs	r2, #8
 8001f48:	305c      	adds	r0, #92	@ 0x5c
 8001f4a:	f000 fad9 	bl	8002500 <memset>
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <std+0x50>)
 8001f50:	6224      	str	r4, [r4, #32]
 8001f52:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f54:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <std+0x54>)
 8001f56:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f58:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <std+0x58>)
 8001f5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <std+0x5c>)
 8001f5e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <std+0x60>)
 8001f62:	429c      	cmp	r4, r3
 8001f64:	d005      	beq.n	8001f72 <std+0x46>
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <std+0x64>)
 8001f68:	429c      	cmp	r4, r3
 8001f6a:	d002      	beq.n	8001f72 <std+0x46>
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <std+0x68>)
 8001f6e:	429c      	cmp	r4, r3
 8001f70:	d103      	bne.n	8001f7a <std+0x4e>
 8001f72:	0020      	movs	r0, r4
 8001f74:	3058      	adds	r0, #88	@ 0x58
 8001f76:	f000 fbe1 	bl	800273c <__retarget_lock_init_recursive>
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	08002329 	.word	0x08002329
 8001f80:	08002351 	.word	0x08002351
 8001f84:	08002389 	.word	0x08002389
 8001f88:	080023b5 	.word	0x080023b5
 8001f8c:	200001a0 	.word	0x200001a0
 8001f90:	20000208 	.word	0x20000208
 8001f94:	20000270 	.word	0x20000270

08001f98 <stdio_exit_handler>:
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	4a03      	ldr	r2, [pc, #12]	@ (8001fa8 <stdio_exit_handler+0x10>)
 8001f9c:	4903      	ldr	r1, [pc, #12]	@ (8001fac <stdio_exit_handler+0x14>)
 8001f9e:	4804      	ldr	r0, [pc, #16]	@ (8001fb0 <stdio_exit_handler+0x18>)
 8001fa0:	f000 f86c 	bl	800207c <_fwalk_sglue>
 8001fa4:	bd10      	pop	{r4, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	08002ea5 	.word	0x08002ea5
 8001fb0:	20000014 	.word	0x20000014

08001fb4 <cleanup_stdio>:
 8001fb4:	6841      	ldr	r1, [r0, #4]
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <cleanup_stdio+0x30>)
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	0004      	movs	r4, r0
 8001fbc:	4299      	cmp	r1, r3
 8001fbe:	d001      	beq.n	8001fc4 <cleanup_stdio+0x10>
 8001fc0:	f000 ff70 	bl	8002ea4 <_fflush_r>
 8001fc4:	68a1      	ldr	r1, [r4, #8]
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <cleanup_stdio+0x34>)
 8001fc8:	4299      	cmp	r1, r3
 8001fca:	d002      	beq.n	8001fd2 <cleanup_stdio+0x1e>
 8001fcc:	0020      	movs	r0, r4
 8001fce:	f000 ff69 	bl	8002ea4 <_fflush_r>
 8001fd2:	68e1      	ldr	r1, [r4, #12]
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <cleanup_stdio+0x38>)
 8001fd6:	4299      	cmp	r1, r3
 8001fd8:	d002      	beq.n	8001fe0 <cleanup_stdio+0x2c>
 8001fda:	0020      	movs	r0, r4
 8001fdc:	f000 ff62 	bl	8002ea4 <_fflush_r>
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	200001a0 	.word	0x200001a0
 8001fe8:	20000208 	.word	0x20000208
 8001fec:	20000270 	.word	0x20000270

08001ff0 <global_stdio_init.part.0>:
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <global_stdio_init.part.0+0x28>)
 8001ff4:	4a09      	ldr	r2, [pc, #36]	@ (800201c <global_stdio_init.part.0+0x2c>)
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	4809      	ldr	r0, [pc, #36]	@ (8002020 <global_stdio_init.part.0+0x30>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f7ff ff95 	bl	8001f2c <std>
 8002002:	2201      	movs	r2, #1
 8002004:	2109      	movs	r1, #9
 8002006:	4807      	ldr	r0, [pc, #28]	@ (8002024 <global_stdio_init.part.0+0x34>)
 8002008:	f7ff ff90 	bl	8001f2c <std>
 800200c:	2202      	movs	r2, #2
 800200e:	2112      	movs	r1, #18
 8002010:	4805      	ldr	r0, [pc, #20]	@ (8002028 <global_stdio_init.part.0+0x38>)
 8002012:	f7ff ff8b 	bl	8001f2c <std>
 8002016:	bd10      	pop	{r4, pc}
 8002018:	200002d8 	.word	0x200002d8
 800201c:	08001f99 	.word	0x08001f99
 8002020:	200001a0 	.word	0x200001a0
 8002024:	20000208 	.word	0x20000208
 8002028:	20000270 	.word	0x20000270

0800202c <__sfp_lock_acquire>:
 800202c:	b510      	push	{r4, lr}
 800202e:	4802      	ldr	r0, [pc, #8]	@ (8002038 <__sfp_lock_acquire+0xc>)
 8002030:	f000 fb85 	bl	800273e <__retarget_lock_acquire_recursive>
 8002034:	bd10      	pop	{r4, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	200002e1 	.word	0x200002e1

0800203c <__sfp_lock_release>:
 800203c:	b510      	push	{r4, lr}
 800203e:	4802      	ldr	r0, [pc, #8]	@ (8002048 <__sfp_lock_release+0xc>)
 8002040:	f000 fb7e 	bl	8002740 <__retarget_lock_release_recursive>
 8002044:	bd10      	pop	{r4, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	200002e1 	.word	0x200002e1

0800204c <__sinit>:
 800204c:	b510      	push	{r4, lr}
 800204e:	0004      	movs	r4, r0
 8002050:	f7ff ffec 	bl	800202c <__sfp_lock_acquire>
 8002054:	6a23      	ldr	r3, [r4, #32]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <__sinit+0x14>
 800205a:	f7ff ffef 	bl	800203c <__sfp_lock_release>
 800205e:	bd10      	pop	{r4, pc}
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <__sinit+0x28>)
 8002062:	6223      	str	r3, [r4, #32]
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <__sinit+0x2c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f6      	bne.n	800205a <__sinit+0xe>
 800206c:	f7ff ffc0 	bl	8001ff0 <global_stdio_init.part.0>
 8002070:	e7f3      	b.n	800205a <__sinit+0xe>
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	08001fb5 	.word	0x08001fb5
 8002078:	200002d8 	.word	0x200002d8

0800207c <_fwalk_sglue>:
 800207c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800207e:	0014      	movs	r4, r2
 8002080:	2600      	movs	r6, #0
 8002082:	9000      	str	r0, [sp, #0]
 8002084:	9101      	str	r1, [sp, #4]
 8002086:	68a5      	ldr	r5, [r4, #8]
 8002088:	6867      	ldr	r7, [r4, #4]
 800208a:	3f01      	subs	r7, #1
 800208c:	d504      	bpl.n	8002098 <_fwalk_sglue+0x1c>
 800208e:	6824      	ldr	r4, [r4, #0]
 8002090:	2c00      	cmp	r4, #0
 8002092:	d1f8      	bne.n	8002086 <_fwalk_sglue+0xa>
 8002094:	0030      	movs	r0, r6
 8002096:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002098:	89ab      	ldrh	r3, [r5, #12]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d908      	bls.n	80020b0 <_fwalk_sglue+0x34>
 800209e:	220e      	movs	r2, #14
 80020a0:	5eab      	ldrsh	r3, [r5, r2]
 80020a2:	3301      	adds	r3, #1
 80020a4:	d004      	beq.n	80020b0 <_fwalk_sglue+0x34>
 80020a6:	0029      	movs	r1, r5
 80020a8:	9800      	ldr	r0, [sp, #0]
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	4798      	blx	r3
 80020ae:	4306      	orrs	r6, r0
 80020b0:	3568      	adds	r5, #104	@ 0x68
 80020b2:	e7ea      	b.n	800208a <_fwalk_sglue+0xe>

080020b4 <getchar>:
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4b03      	ldr	r3, [pc, #12]	@ (80020c4 <getchar+0x10>)
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	6841      	ldr	r1, [r0, #4]
 80020bc:	f000 ff2e 	bl	8002f1c <_getc_r>
 80020c0:	bd10      	pop	{r4, pc}
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	20000010 	.word	0x20000010

080020c8 <iprintf>:
 80020c8:	b40f      	push	{r0, r1, r2, r3}
 80020ca:	b507      	push	{r0, r1, r2, lr}
 80020cc:	4905      	ldr	r1, [pc, #20]	@ (80020e4 <iprintf+0x1c>)
 80020ce:	ab04      	add	r3, sp, #16
 80020d0:	6808      	ldr	r0, [r1, #0]
 80020d2:	cb04      	ldmia	r3!, {r2}
 80020d4:	6881      	ldr	r1, [r0, #8]
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	f000 fbc4 	bl	8002864 <_vfiprintf_r>
 80020dc:	b003      	add	sp, #12
 80020de:	bc08      	pop	{r3}
 80020e0:	b004      	add	sp, #16
 80020e2:	4718      	bx	r3
 80020e4:	20000010 	.word	0x20000010

080020e8 <putchar>:
 80020e8:	b510      	push	{r4, lr}
 80020ea:	4b03      	ldr	r3, [pc, #12]	@ (80020f8 <putchar+0x10>)
 80020ec:	0001      	movs	r1, r0
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	6882      	ldr	r2, [r0, #8]
 80020f2:	f000 ffac 	bl	800304e <_putc_r>
 80020f6:	bd10      	pop	{r4, pc}
 80020f8:	20000010 	.word	0x20000010

080020fc <_puts_r>:
 80020fc:	6a03      	ldr	r3, [r0, #32]
 80020fe:	b570      	push	{r4, r5, r6, lr}
 8002100:	0005      	movs	r5, r0
 8002102:	000e      	movs	r6, r1
 8002104:	6884      	ldr	r4, [r0, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <_puts_r+0x12>
 800210a:	f7ff ff9f 	bl	800204c <__sinit>
 800210e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002110:	07db      	lsls	r3, r3, #31
 8002112:	d405      	bmi.n	8002120 <_puts_r+0x24>
 8002114:	89a3      	ldrh	r3, [r4, #12]
 8002116:	059b      	lsls	r3, r3, #22
 8002118:	d402      	bmi.n	8002120 <_puts_r+0x24>
 800211a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800211c:	f000 fb0f 	bl	800273e <__retarget_lock_acquire_recursive>
 8002120:	89a3      	ldrh	r3, [r4, #12]
 8002122:	071b      	lsls	r3, r3, #28
 8002124:	d502      	bpl.n	800212c <_puts_r+0x30>
 8002126:	6923      	ldr	r3, [r4, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d11f      	bne.n	800216c <_puts_r+0x70>
 800212c:	0021      	movs	r1, r4
 800212e:	0028      	movs	r0, r5
 8002130:	f000 f988 	bl	8002444 <__swsetup_r>
 8002134:	2800      	cmp	r0, #0
 8002136:	d019      	beq.n	800216c <_puts_r+0x70>
 8002138:	2501      	movs	r5, #1
 800213a:	426d      	negs	r5, r5
 800213c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800213e:	07db      	lsls	r3, r3, #31
 8002140:	d405      	bmi.n	800214e <_puts_r+0x52>
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	059b      	lsls	r3, r3, #22
 8002146:	d402      	bmi.n	800214e <_puts_r+0x52>
 8002148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800214a:	f000 faf9 	bl	8002740 <__retarget_lock_release_recursive>
 800214e:	0028      	movs	r0, r5
 8002150:	bd70      	pop	{r4, r5, r6, pc}
 8002152:	3601      	adds	r6, #1
 8002154:	60a3      	str	r3, [r4, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	da04      	bge.n	8002164 <_puts_r+0x68>
 800215a:	69a2      	ldr	r2, [r4, #24]
 800215c:	429a      	cmp	r2, r3
 800215e:	dc16      	bgt.n	800218e <_puts_r+0x92>
 8002160:	290a      	cmp	r1, #10
 8002162:	d014      	beq.n	800218e <_puts_r+0x92>
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	6022      	str	r2, [r4, #0]
 800216a:	7019      	strb	r1, [r3, #0]
 800216c:	68a3      	ldr	r3, [r4, #8]
 800216e:	7831      	ldrb	r1, [r6, #0]
 8002170:	3b01      	subs	r3, #1
 8002172:	2900      	cmp	r1, #0
 8002174:	d1ed      	bne.n	8002152 <_puts_r+0x56>
 8002176:	60a3      	str	r3, [r4, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da0f      	bge.n	800219c <_puts_r+0xa0>
 800217c:	0022      	movs	r2, r4
 800217e:	0028      	movs	r0, r5
 8002180:	310a      	adds	r1, #10
 8002182:	f000 f91d 	bl	80023c0 <__swbuf_r>
 8002186:	3001      	adds	r0, #1
 8002188:	d0d6      	beq.n	8002138 <_puts_r+0x3c>
 800218a:	250a      	movs	r5, #10
 800218c:	e7d6      	b.n	800213c <_puts_r+0x40>
 800218e:	0022      	movs	r2, r4
 8002190:	0028      	movs	r0, r5
 8002192:	f000 f915 	bl	80023c0 <__swbuf_r>
 8002196:	3001      	adds	r0, #1
 8002198:	d1e8      	bne.n	800216c <_puts_r+0x70>
 800219a:	e7cd      	b.n	8002138 <_puts_r+0x3c>
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	6022      	str	r2, [r4, #0]
 80021a2:	220a      	movs	r2, #10
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e7f0      	b.n	800218a <_puts_r+0x8e>

080021a8 <puts>:
 80021a8:	b510      	push	{r4, lr}
 80021aa:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <puts+0x10>)
 80021ac:	0001      	movs	r1, r0
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	f7ff ffa4 	bl	80020fc <_puts_r>
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	20000010 	.word	0x20000010

080021bc <setvbuf>:
 80021bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021be:	001d      	movs	r5, r3
 80021c0:	4b57      	ldr	r3, [pc, #348]	@ (8002320 <setvbuf+0x164>)
 80021c2:	b085      	sub	sp, #20
 80021c4:	681e      	ldr	r6, [r3, #0]
 80021c6:	0004      	movs	r4, r0
 80021c8:	000f      	movs	r7, r1
 80021ca:	9200      	str	r2, [sp, #0]
 80021cc:	2e00      	cmp	r6, #0
 80021ce:	d005      	beq.n	80021dc <setvbuf+0x20>
 80021d0:	6a33      	ldr	r3, [r6, #32]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <setvbuf+0x20>
 80021d6:	0030      	movs	r0, r6
 80021d8:	f7ff ff38 	bl	800204c <__sinit>
 80021dc:	9b00      	ldr	r3, [sp, #0]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d005      	beq.n	80021ee <setvbuf+0x32>
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d900      	bls.n	80021e8 <setvbuf+0x2c>
 80021e6:	e097      	b.n	8002318 <setvbuf+0x15c>
 80021e8:	2d00      	cmp	r5, #0
 80021ea:	da00      	bge.n	80021ee <setvbuf+0x32>
 80021ec:	e094      	b.n	8002318 <setvbuf+0x15c>
 80021ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021f0:	07db      	lsls	r3, r3, #31
 80021f2:	d405      	bmi.n	8002200 <setvbuf+0x44>
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	059b      	lsls	r3, r3, #22
 80021f8:	d402      	bmi.n	8002200 <setvbuf+0x44>
 80021fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021fc:	f000 fa9f 	bl	800273e <__retarget_lock_acquire_recursive>
 8002200:	0021      	movs	r1, r4
 8002202:	0030      	movs	r0, r6
 8002204:	f000 fe4e 	bl	8002ea4 <_fflush_r>
 8002208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800220a:	2900      	cmp	r1, #0
 800220c:	d008      	beq.n	8002220 <setvbuf+0x64>
 800220e:	0023      	movs	r3, r4
 8002210:	3344      	adds	r3, #68	@ 0x44
 8002212:	4299      	cmp	r1, r3
 8002214:	d002      	beq.n	800221c <setvbuf+0x60>
 8002216:	0030      	movs	r0, r6
 8002218:	f000 fab2 	bl	8002780 <_free_r>
 800221c:	2300      	movs	r3, #0
 800221e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002220:	2300      	movs	r3, #0
 8002222:	61a3      	str	r3, [r4, #24]
 8002224:	6063      	str	r3, [r4, #4]
 8002226:	89a3      	ldrh	r3, [r4, #12]
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	d503      	bpl.n	8002234 <setvbuf+0x78>
 800222c:	0030      	movs	r0, r6
 800222e:	6921      	ldr	r1, [r4, #16]
 8002230:	f000 faa6 	bl	8002780 <_free_r>
 8002234:	89a3      	ldrh	r3, [r4, #12]
 8002236:	4a3b      	ldr	r2, [pc, #236]	@ (8002324 <setvbuf+0x168>)
 8002238:	4013      	ands	r3, r2
 800223a:	81a3      	strh	r3, [r4, #12]
 800223c:	9b00      	ldr	r3, [sp, #0]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d060      	beq.n	8002304 <setvbuf+0x148>
 8002242:	ab03      	add	r3, sp, #12
 8002244:	0021      	movs	r1, r4
 8002246:	0030      	movs	r0, r6
 8002248:	aa02      	add	r2, sp, #8
 800224a:	f000 fe95 	bl	8002f78 <__swhatbuf_r>
 800224e:	89a3      	ldrh	r3, [r4, #12]
 8002250:	4303      	orrs	r3, r0
 8002252:	81a3      	strh	r3, [r4, #12]
 8002254:	2d00      	cmp	r5, #0
 8002256:	d124      	bne.n	80022a2 <setvbuf+0xe6>
 8002258:	9d02      	ldr	r5, [sp, #8]
 800225a:	0028      	movs	r0, r5
 800225c:	f7ff fd14 	bl	8001c88 <malloc>
 8002260:	9501      	str	r5, [sp, #4]
 8002262:	1e07      	subs	r7, r0, #0
 8002264:	d148      	bne.n	80022f8 <setvbuf+0x13c>
 8002266:	9b02      	ldr	r3, [sp, #8]
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	42ab      	cmp	r3, r5
 800226c:	d13f      	bne.n	80022ee <setvbuf+0x132>
 800226e:	2501      	movs	r5, #1
 8002270:	426d      	negs	r5, r5
 8002272:	220c      	movs	r2, #12
 8002274:	5ea3      	ldrsh	r3, [r4, r2]
 8002276:	2202      	movs	r2, #2
 8002278:	431a      	orrs	r2, r3
 800227a:	81a2      	strh	r2, [r4, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	60a2      	str	r2, [r4, #8]
 8002280:	0022      	movs	r2, r4
 8002282:	3247      	adds	r2, #71	@ 0x47
 8002284:	6022      	str	r2, [r4, #0]
 8002286:	6122      	str	r2, [r4, #16]
 8002288:	2201      	movs	r2, #1
 800228a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800228c:	6162      	str	r2, [r4, #20]
 800228e:	4211      	tst	r1, r2
 8002290:	d104      	bne.n	800229c <setvbuf+0xe0>
 8002292:	059b      	lsls	r3, r3, #22
 8002294:	d402      	bmi.n	800229c <setvbuf+0xe0>
 8002296:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002298:	f000 fa52 	bl	8002740 <__retarget_lock_release_recursive>
 800229c:	0028      	movs	r0, r5
 800229e:	b005      	add	sp, #20
 80022a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a2:	2f00      	cmp	r7, #0
 80022a4:	d0d9      	beq.n	800225a <setvbuf+0x9e>
 80022a6:	6a33      	ldr	r3, [r6, #32]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <setvbuf+0xf6>
 80022ac:	0030      	movs	r0, r6
 80022ae:	f7ff fecd 	bl	800204c <__sinit>
 80022b2:	9b00      	ldr	r3, [sp, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d103      	bne.n	80022c0 <setvbuf+0x104>
 80022b8:	89a3      	ldrh	r3, [r4, #12]
 80022ba:	9a00      	ldr	r2, [sp, #0]
 80022bc:	431a      	orrs	r2, r3
 80022be:	81a2      	strh	r2, [r4, #12]
 80022c0:	220c      	movs	r2, #12
 80022c2:	5ea3      	ldrsh	r3, [r4, r2]
 80022c4:	2208      	movs	r2, #8
 80022c6:	0019      	movs	r1, r3
 80022c8:	6027      	str	r7, [r4, #0]
 80022ca:	6127      	str	r7, [r4, #16]
 80022cc:	6165      	str	r5, [r4, #20]
 80022ce:	4011      	ands	r1, r2
 80022d0:	4213      	tst	r3, r2
 80022d2:	d01b      	beq.n	800230c <setvbuf+0x150>
 80022d4:	07da      	lsls	r2, r3, #31
 80022d6:	d517      	bpl.n	8002308 <setvbuf+0x14c>
 80022d8:	2200      	movs	r2, #0
 80022da:	426d      	negs	r5, r5
 80022dc:	60a2      	str	r2, [r4, #8]
 80022de:	61a5      	str	r5, [r4, #24]
 80022e0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80022e2:	07d2      	lsls	r2, r2, #31
 80022e4:	d401      	bmi.n	80022ea <setvbuf+0x12e>
 80022e6:	059b      	lsls	r3, r3, #22
 80022e8:	d512      	bpl.n	8002310 <setvbuf+0x154>
 80022ea:	2500      	movs	r5, #0
 80022ec:	e7d6      	b.n	800229c <setvbuf+0xe0>
 80022ee:	9801      	ldr	r0, [sp, #4]
 80022f0:	f7ff fcca 	bl	8001c88 <malloc>
 80022f4:	1e07      	subs	r7, r0, #0
 80022f6:	d0ba      	beq.n	800226e <setvbuf+0xb2>
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	89a2      	ldrh	r2, [r4, #12]
 80022fc:	9d01      	ldr	r5, [sp, #4]
 80022fe:	4313      	orrs	r3, r2
 8002300:	81a3      	strh	r3, [r4, #12]
 8002302:	e7d0      	b.n	80022a6 <setvbuf+0xea>
 8002304:	2500      	movs	r5, #0
 8002306:	e7b4      	b.n	8002272 <setvbuf+0xb6>
 8002308:	60a5      	str	r5, [r4, #8]
 800230a:	e7e9      	b.n	80022e0 <setvbuf+0x124>
 800230c:	60a1      	str	r1, [r4, #8]
 800230e:	e7e7      	b.n	80022e0 <setvbuf+0x124>
 8002310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002312:	f000 fa15 	bl	8002740 <__retarget_lock_release_recursive>
 8002316:	e7e8      	b.n	80022ea <setvbuf+0x12e>
 8002318:	2501      	movs	r5, #1
 800231a:	426d      	negs	r5, r5
 800231c:	e7be      	b.n	800229c <setvbuf+0xe0>
 800231e:	46c0      	nop			@ (mov r8, r8)
 8002320:	20000010 	.word	0x20000010
 8002324:	fffff35c 	.word	0xfffff35c

08002328 <__sread>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	000c      	movs	r4, r1
 800232c:	250e      	movs	r5, #14
 800232e:	5f49      	ldrsh	r1, [r1, r5]
 8002330:	f000 f9a0 	bl	8002674 <_read_r>
 8002334:	2800      	cmp	r0, #0
 8002336:	db03      	blt.n	8002340 <__sread+0x18>
 8002338:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800233a:	181b      	adds	r3, r3, r0
 800233c:	6563      	str	r3, [r4, #84]	@ 0x54
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	89a3      	ldrh	r3, [r4, #12]
 8002342:	4a02      	ldr	r2, [pc, #8]	@ (800234c <__sread+0x24>)
 8002344:	4013      	ands	r3, r2
 8002346:	81a3      	strh	r3, [r4, #12]
 8002348:	e7f9      	b.n	800233e <__sread+0x16>
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	ffffefff 	.word	0xffffefff

08002350 <__swrite>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	001f      	movs	r7, r3
 8002354:	898b      	ldrh	r3, [r1, #12]
 8002356:	0005      	movs	r5, r0
 8002358:	000c      	movs	r4, r1
 800235a:	0016      	movs	r6, r2
 800235c:	05db      	lsls	r3, r3, #23
 800235e:	d505      	bpl.n	800236c <__swrite+0x1c>
 8002360:	230e      	movs	r3, #14
 8002362:	5ec9      	ldrsh	r1, [r1, r3]
 8002364:	2200      	movs	r2, #0
 8002366:	2302      	movs	r3, #2
 8002368:	f000 f970 	bl	800264c <_lseek_r>
 800236c:	89a3      	ldrh	r3, [r4, #12]
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <__swrite+0x34>)
 8002370:	0028      	movs	r0, r5
 8002372:	4013      	ands	r3, r2
 8002374:	81a3      	strh	r3, [r4, #12]
 8002376:	0032      	movs	r2, r6
 8002378:	230e      	movs	r3, #14
 800237a:	5ee1      	ldrsh	r1, [r4, r3]
 800237c:	003b      	movs	r3, r7
 800237e:	f000 f99f 	bl	80026c0 <_write_r>
 8002382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002384:	ffffefff 	.word	0xffffefff

08002388 <__sseek>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	000c      	movs	r4, r1
 800238c:	250e      	movs	r5, #14
 800238e:	5f49      	ldrsh	r1, [r1, r5]
 8002390:	f000 f95c 	bl	800264c <_lseek_r>
 8002394:	89a3      	ldrh	r3, [r4, #12]
 8002396:	1c42      	adds	r2, r0, #1
 8002398:	d103      	bne.n	80023a2 <__sseek+0x1a>
 800239a:	4a05      	ldr	r2, [pc, #20]	@ (80023b0 <__sseek+0x28>)
 800239c:	4013      	ands	r3, r2
 800239e:	81a3      	strh	r3, [r4, #12]
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
 80023a2:	2280      	movs	r2, #128	@ 0x80
 80023a4:	0152      	lsls	r2, r2, #5
 80023a6:	4313      	orrs	r3, r2
 80023a8:	81a3      	strh	r3, [r4, #12]
 80023aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80023ac:	e7f8      	b.n	80023a0 <__sseek+0x18>
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	ffffefff 	.word	0xffffefff

080023b4 <__sclose>:
 80023b4:	b510      	push	{r4, lr}
 80023b6:	230e      	movs	r3, #14
 80023b8:	5ec9      	ldrsh	r1, [r1, r3]
 80023ba:	f000 f935 	bl	8002628 <_close_r>
 80023be:	bd10      	pop	{r4, pc}

080023c0 <__swbuf_r>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	0006      	movs	r6, r0
 80023c4:	000d      	movs	r5, r1
 80023c6:	0014      	movs	r4, r2
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d004      	beq.n	80023d6 <__swbuf_r+0x16>
 80023cc:	6a03      	ldr	r3, [r0, #32]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <__swbuf_r+0x16>
 80023d2:	f7ff fe3b 	bl	800204c <__sinit>
 80023d6:	69a3      	ldr	r3, [r4, #24]
 80023d8:	60a3      	str	r3, [r4, #8]
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	071b      	lsls	r3, r3, #28
 80023de:	d502      	bpl.n	80023e6 <__swbuf_r+0x26>
 80023e0:	6923      	ldr	r3, [r4, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <__swbuf_r+0x3a>
 80023e6:	0021      	movs	r1, r4
 80023e8:	0030      	movs	r0, r6
 80023ea:	f000 f82b 	bl	8002444 <__swsetup_r>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d003      	beq.n	80023fa <__swbuf_r+0x3a>
 80023f2:	2501      	movs	r5, #1
 80023f4:	426d      	negs	r5, r5
 80023f6:	0028      	movs	r0, r5
 80023f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023fa:	6923      	ldr	r3, [r4, #16]
 80023fc:	6820      	ldr	r0, [r4, #0]
 80023fe:	b2ef      	uxtb	r7, r5
 8002400:	1ac0      	subs	r0, r0, r3
 8002402:	6963      	ldr	r3, [r4, #20]
 8002404:	b2ed      	uxtb	r5, r5
 8002406:	4283      	cmp	r3, r0
 8002408:	dc05      	bgt.n	8002416 <__swbuf_r+0x56>
 800240a:	0021      	movs	r1, r4
 800240c:	0030      	movs	r0, r6
 800240e:	f000 fd49 	bl	8002ea4 <_fflush_r>
 8002412:	2800      	cmp	r0, #0
 8002414:	d1ed      	bne.n	80023f2 <__swbuf_r+0x32>
 8002416:	68a3      	ldr	r3, [r4, #8]
 8002418:	3001      	adds	r0, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	60a3      	str	r3, [r4, #8]
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	6022      	str	r2, [r4, #0]
 8002424:	701f      	strb	r7, [r3, #0]
 8002426:	6963      	ldr	r3, [r4, #20]
 8002428:	4283      	cmp	r3, r0
 800242a:	d004      	beq.n	8002436 <__swbuf_r+0x76>
 800242c:	89a3      	ldrh	r3, [r4, #12]
 800242e:	07db      	lsls	r3, r3, #31
 8002430:	d5e1      	bpl.n	80023f6 <__swbuf_r+0x36>
 8002432:	2d0a      	cmp	r5, #10
 8002434:	d1df      	bne.n	80023f6 <__swbuf_r+0x36>
 8002436:	0021      	movs	r1, r4
 8002438:	0030      	movs	r0, r6
 800243a:	f000 fd33 	bl	8002ea4 <_fflush_r>
 800243e:	2800      	cmp	r0, #0
 8002440:	d0d9      	beq.n	80023f6 <__swbuf_r+0x36>
 8002442:	e7d6      	b.n	80023f2 <__swbuf_r+0x32>

08002444 <__swsetup_r>:
 8002444:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <__swsetup_r+0xb8>)
 8002446:	b570      	push	{r4, r5, r6, lr}
 8002448:	0005      	movs	r5, r0
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	000c      	movs	r4, r1
 800244e:	2800      	cmp	r0, #0
 8002450:	d004      	beq.n	800245c <__swsetup_r+0x18>
 8002452:	6a03      	ldr	r3, [r0, #32]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <__swsetup_r+0x18>
 8002458:	f7ff fdf8 	bl	800204c <__sinit>
 800245c:	230c      	movs	r3, #12
 800245e:	5ee2      	ldrsh	r2, [r4, r3]
 8002460:	0713      	lsls	r3, r2, #28
 8002462:	d423      	bmi.n	80024ac <__swsetup_r+0x68>
 8002464:	06d3      	lsls	r3, r2, #27
 8002466:	d407      	bmi.n	8002478 <__swsetup_r+0x34>
 8002468:	2309      	movs	r3, #9
 800246a:	602b      	str	r3, [r5, #0]
 800246c:	2340      	movs	r3, #64	@ 0x40
 800246e:	2001      	movs	r0, #1
 8002470:	4313      	orrs	r3, r2
 8002472:	81a3      	strh	r3, [r4, #12]
 8002474:	4240      	negs	r0, r0
 8002476:	e03a      	b.n	80024ee <__swsetup_r+0xaa>
 8002478:	0752      	lsls	r2, r2, #29
 800247a:	d513      	bpl.n	80024a4 <__swsetup_r+0x60>
 800247c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800247e:	2900      	cmp	r1, #0
 8002480:	d008      	beq.n	8002494 <__swsetup_r+0x50>
 8002482:	0023      	movs	r3, r4
 8002484:	3344      	adds	r3, #68	@ 0x44
 8002486:	4299      	cmp	r1, r3
 8002488:	d002      	beq.n	8002490 <__swsetup_r+0x4c>
 800248a:	0028      	movs	r0, r5
 800248c:	f000 f978 	bl	8002780 <_free_r>
 8002490:	2300      	movs	r3, #0
 8002492:	6363      	str	r3, [r4, #52]	@ 0x34
 8002494:	2224      	movs	r2, #36	@ 0x24
 8002496:	89a3      	ldrh	r3, [r4, #12]
 8002498:	4393      	bics	r3, r2
 800249a:	81a3      	strh	r3, [r4, #12]
 800249c:	2300      	movs	r3, #0
 800249e:	6063      	str	r3, [r4, #4]
 80024a0:	6923      	ldr	r3, [r4, #16]
 80024a2:	6023      	str	r3, [r4, #0]
 80024a4:	2308      	movs	r3, #8
 80024a6:	89a2      	ldrh	r2, [r4, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	81a3      	strh	r3, [r4, #12]
 80024ac:	6923      	ldr	r3, [r4, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10b      	bne.n	80024ca <__swsetup_r+0x86>
 80024b2:	21a0      	movs	r1, #160	@ 0xa0
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	89a3      	ldrh	r3, [r4, #12]
 80024b8:	0089      	lsls	r1, r1, #2
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	400b      	ands	r3, r1
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <__swsetup_r+0x86>
 80024c2:	0021      	movs	r1, r4
 80024c4:	0028      	movs	r0, r5
 80024c6:	f000 fd81 	bl	8002fcc <__smakebuf_r>
 80024ca:	230c      	movs	r3, #12
 80024cc:	5ee2      	ldrsh	r2, [r4, r3]
 80024ce:	2101      	movs	r1, #1
 80024d0:	0013      	movs	r3, r2
 80024d2:	400b      	ands	r3, r1
 80024d4:	420a      	tst	r2, r1
 80024d6:	d00b      	beq.n	80024f0 <__swsetup_r+0xac>
 80024d8:	2300      	movs	r3, #0
 80024da:	60a3      	str	r3, [r4, #8]
 80024dc:	6963      	ldr	r3, [r4, #20]
 80024de:	425b      	negs	r3, r3
 80024e0:	61a3      	str	r3, [r4, #24]
 80024e2:	2000      	movs	r0, #0
 80024e4:	6923      	ldr	r3, [r4, #16]
 80024e6:	4283      	cmp	r3, r0
 80024e8:	d101      	bne.n	80024ee <__swsetup_r+0xaa>
 80024ea:	0613      	lsls	r3, r2, #24
 80024ec:	d4be      	bmi.n	800246c <__swsetup_r+0x28>
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	0791      	lsls	r1, r2, #30
 80024f2:	d400      	bmi.n	80024f6 <__swsetup_r+0xb2>
 80024f4:	6963      	ldr	r3, [r4, #20]
 80024f6:	60a3      	str	r3, [r4, #8]
 80024f8:	e7f3      	b.n	80024e2 <__swsetup_r+0x9e>
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	20000010 	.word	0x20000010

08002500 <memset>:
 8002500:	0003      	movs	r3, r0
 8002502:	1882      	adds	r2, r0, r2
 8002504:	4293      	cmp	r3, r2
 8002506:	d100      	bne.n	800250a <memset+0xa>
 8002508:	4770      	bx	lr
 800250a:	7019      	strb	r1, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	e7f9      	b.n	8002504 <memset+0x4>

08002510 <strcasecmp>:
 8002510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002512:	0005      	movs	r5, r0
 8002514:	2400      	movs	r4, #0
 8002516:	2703      	movs	r7, #3
 8002518:	4e09      	ldr	r6, [pc, #36]	@ (8002540 <strcasecmp+0x30>)
 800251a:	5d2a      	ldrb	r2, [r5, r4]
 800251c:	5cb3      	ldrb	r3, [r6, r2]
 800251e:	403b      	ands	r3, r7
 8002520:	2b01      	cmp	r3, #1
 8002522:	d100      	bne.n	8002526 <strcasecmp+0x16>
 8002524:	3220      	adds	r2, #32
 8002526:	5d0b      	ldrb	r3, [r1, r4]
 8002528:	5cf0      	ldrb	r0, [r6, r3]
 800252a:	4038      	ands	r0, r7
 800252c:	2801      	cmp	r0, #1
 800252e:	d100      	bne.n	8002532 <strcasecmp+0x22>
 8002530:	3320      	adds	r3, #32
 8002532:	1ad0      	subs	r0, r2, r3
 8002534:	429a      	cmp	r2, r3
 8002536:	d102      	bne.n	800253e <strcasecmp+0x2e>
 8002538:	3401      	adds	r4, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ed      	bne.n	800251a <strcasecmp+0xa>
 800253e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002540:	08003a79 	.word	0x08003a79

08002544 <strncmp>:
 8002544:	b530      	push	{r4, r5, lr}
 8002546:	0005      	movs	r5, r0
 8002548:	1e10      	subs	r0, r2, #0
 800254a:	d00b      	beq.n	8002564 <strncmp+0x20>
 800254c:	2400      	movs	r4, #0
 800254e:	3a01      	subs	r2, #1
 8002550:	5d2b      	ldrb	r3, [r5, r4]
 8002552:	5d08      	ldrb	r0, [r1, r4]
 8002554:	4283      	cmp	r3, r0
 8002556:	d104      	bne.n	8002562 <strncmp+0x1e>
 8002558:	42a2      	cmp	r2, r4
 800255a:	d002      	beq.n	8002562 <strncmp+0x1e>
 800255c:	3401      	adds	r4, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f6      	bne.n	8002550 <strncmp+0xc>
 8002562:	1a18      	subs	r0, r3, r0
 8002564:	bd30      	pop	{r4, r5, pc}
	...

08002568 <strtok>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <strtok+0x5c>)
 800256c:	0005      	movs	r5, r0
 800256e:	681f      	ldr	r7, [r3, #0]
 8002570:	000e      	movs	r6, r1
 8002572:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002574:	2c00      	cmp	r4, #0
 8002576:	d11d      	bne.n	80025b4 <strtok+0x4c>
 8002578:	2050      	movs	r0, #80	@ 0x50
 800257a:	f7ff fb85 	bl	8001c88 <malloc>
 800257e:	1e02      	subs	r2, r0, #0
 8002580:	6478      	str	r0, [r7, #68]	@ 0x44
 8002582:	d104      	bne.n	800258e <strtok+0x26>
 8002584:	215b      	movs	r1, #91	@ 0x5b
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <strtok+0x60>)
 8002588:	4810      	ldr	r0, [pc, #64]	@ (80025cc <strtok+0x64>)
 800258a:	f000 f8db 	bl	8002744 <__assert_func>
 800258e:	6004      	str	r4, [r0, #0]
 8002590:	6044      	str	r4, [r0, #4]
 8002592:	6084      	str	r4, [r0, #8]
 8002594:	60c4      	str	r4, [r0, #12]
 8002596:	6104      	str	r4, [r0, #16]
 8002598:	6144      	str	r4, [r0, #20]
 800259a:	6184      	str	r4, [r0, #24]
 800259c:	6284      	str	r4, [r0, #40]	@ 0x28
 800259e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 80025a0:	6304      	str	r4, [r0, #48]	@ 0x30
 80025a2:	6344      	str	r4, [r0, #52]	@ 0x34
 80025a4:	6384      	str	r4, [r0, #56]	@ 0x38
 80025a6:	63c4      	str	r4, [r0, #60]	@ 0x3c
 80025a8:	6404      	str	r4, [r0, #64]	@ 0x40
 80025aa:	6444      	str	r4, [r0, #68]	@ 0x44
 80025ac:	6484      	str	r4, [r0, #72]	@ 0x48
 80025ae:	64c4      	str	r4, [r0, #76]	@ 0x4c
 80025b0:	7704      	strb	r4, [r0, #28]
 80025b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80025b4:	0031      	movs	r1, r6
 80025b6:	0028      	movs	r0, r5
 80025b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025ba:	2301      	movs	r3, #1
 80025bc:	f000 f808 	bl	80025d0 <__strtok_r>
 80025c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	20000010 	.word	0x20000010
 80025c8:	08003b79 	.word	0x08003b79
 80025cc:	08003b90 	.word	0x08003b90

080025d0 <__strtok_r>:
 80025d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d2:	1e04      	subs	r4, r0, #0
 80025d4:	d102      	bne.n	80025dc <__strtok_r+0xc>
 80025d6:	6814      	ldr	r4, [r2, #0]
 80025d8:	2c00      	cmp	r4, #0
 80025da:	d009      	beq.n	80025f0 <__strtok_r+0x20>
 80025dc:	0020      	movs	r0, r4
 80025de:	000e      	movs	r6, r1
 80025e0:	7805      	ldrb	r5, [r0, #0]
 80025e2:	3401      	adds	r4, #1
 80025e4:	7837      	ldrb	r7, [r6, #0]
 80025e6:	2f00      	cmp	r7, #0
 80025e8:	d104      	bne.n	80025f4 <__strtok_r+0x24>
 80025ea:	2d00      	cmp	r5, #0
 80025ec:	d10d      	bne.n	800260a <__strtok_r+0x3a>
 80025ee:	6015      	str	r5, [r2, #0]
 80025f0:	2000      	movs	r0, #0
 80025f2:	e006      	b.n	8002602 <__strtok_r+0x32>
 80025f4:	3601      	adds	r6, #1
 80025f6:	42bd      	cmp	r5, r7
 80025f8:	d1f4      	bne.n	80025e4 <__strtok_r+0x14>
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ee      	bne.n	80025dc <__strtok_r+0xc>
 80025fe:	6014      	str	r4, [r2, #0]
 8002600:	7003      	strb	r3, [r0, #0]
 8002602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002604:	3301      	adds	r3, #1
 8002606:	2d00      	cmp	r5, #0
 8002608:	d102      	bne.n	8002610 <__strtok_r+0x40>
 800260a:	000b      	movs	r3, r1
 800260c:	7826      	ldrb	r6, [r4, #0]
 800260e:	3401      	adds	r4, #1
 8002610:	781d      	ldrb	r5, [r3, #0]
 8002612:	42ae      	cmp	r6, r5
 8002614:	d1f6      	bne.n	8002604 <__strtok_r+0x34>
 8002616:	2300      	movs	r3, #0
 8002618:	001d      	movs	r5, r3
 800261a:	429e      	cmp	r6, r3
 800261c:	d002      	beq.n	8002624 <__strtok_r+0x54>
 800261e:	0023      	movs	r3, r4
 8002620:	1e61      	subs	r1, r4, #1
 8002622:	700d      	strb	r5, [r1, #0]
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e7ec      	b.n	8002602 <__strtok_r+0x32>

08002628 <_close_r>:
 8002628:	2300      	movs	r3, #0
 800262a:	b570      	push	{r4, r5, r6, lr}
 800262c:	4d06      	ldr	r5, [pc, #24]	@ (8002648 <_close_r+0x20>)
 800262e:	0004      	movs	r4, r0
 8002630:	0008      	movs	r0, r1
 8002632:	602b      	str	r3, [r5, #0]
 8002634:	f7ff f940 	bl	80018b8 <_close>
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	d103      	bne.n	8002644 <_close_r+0x1c>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d000      	beq.n	8002644 <_close_r+0x1c>
 8002642:	6023      	str	r3, [r4, #0]
 8002644:	bd70      	pop	{r4, r5, r6, pc}
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	200002dc 	.word	0x200002dc

0800264c <_lseek_r>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	0004      	movs	r4, r0
 8002650:	0008      	movs	r0, r1
 8002652:	0011      	movs	r1, r2
 8002654:	001a      	movs	r2, r3
 8002656:	2300      	movs	r3, #0
 8002658:	4d05      	ldr	r5, [pc, #20]	@ (8002670 <_lseek_r+0x24>)
 800265a:	602b      	str	r3, [r5, #0]
 800265c:	f7ff f94d 	bl	80018fa <_lseek>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d103      	bne.n	800266c <_lseek_r+0x20>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d000      	beq.n	800266c <_lseek_r+0x20>
 800266a:	6023      	str	r3, [r4, #0]
 800266c:	bd70      	pop	{r4, r5, r6, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	200002dc 	.word	0x200002dc

08002674 <_read_r>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	0004      	movs	r4, r0
 8002678:	0008      	movs	r0, r1
 800267a:	0011      	movs	r1, r2
 800267c:	001a      	movs	r2, r3
 800267e:	2300      	movs	r3, #0
 8002680:	4d05      	ldr	r5, [pc, #20]	@ (8002698 <_read_r+0x24>)
 8002682:	602b      	str	r3, [r5, #0]
 8002684:	f7ff f8df 	bl	8001846 <_read>
 8002688:	1c43      	adds	r3, r0, #1
 800268a:	d103      	bne.n	8002694 <_read_r+0x20>
 800268c:	682b      	ldr	r3, [r5, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d000      	beq.n	8002694 <_read_r+0x20>
 8002692:	6023      	str	r3, [r4, #0]
 8002694:	bd70      	pop	{r4, r5, r6, pc}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	200002dc 	.word	0x200002dc

0800269c <_sbrk_r>:
 800269c:	2300      	movs	r3, #0
 800269e:	b570      	push	{r4, r5, r6, lr}
 80026a0:	4d06      	ldr	r5, [pc, #24]	@ (80026bc <_sbrk_r+0x20>)
 80026a2:	0004      	movs	r4, r0
 80026a4:	0008      	movs	r0, r1
 80026a6:	602b      	str	r3, [r5, #0]
 80026a8:	f7ff f932 	bl	8001910 <_sbrk>
 80026ac:	1c43      	adds	r3, r0, #1
 80026ae:	d103      	bne.n	80026b8 <_sbrk_r+0x1c>
 80026b0:	682b      	ldr	r3, [r5, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d000      	beq.n	80026b8 <_sbrk_r+0x1c>
 80026b6:	6023      	str	r3, [r4, #0]
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	200002dc 	.word	0x200002dc

080026c0 <_write_r>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	0004      	movs	r4, r0
 80026c4:	0008      	movs	r0, r1
 80026c6:	0011      	movs	r1, r2
 80026c8:	001a      	movs	r2, r3
 80026ca:	2300      	movs	r3, #0
 80026cc:	4d05      	ldr	r5, [pc, #20]	@ (80026e4 <_write_r+0x24>)
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	f7ff f8d6 	bl	8001880 <_write>
 80026d4:	1c43      	adds	r3, r0, #1
 80026d6:	d103      	bne.n	80026e0 <_write_r+0x20>
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d000      	beq.n	80026e0 <_write_r+0x20>
 80026de:	6023      	str	r3, [r4, #0]
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	200002dc 	.word	0x200002dc

080026e8 <__errno>:
 80026e8:	4b01      	ldr	r3, [pc, #4]	@ (80026f0 <__errno+0x8>)
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	4770      	bx	lr
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	20000010 	.word	0x20000010

080026f4 <__libc_init_array>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	2600      	movs	r6, #0
 80026f8:	4c0c      	ldr	r4, [pc, #48]	@ (800272c <__libc_init_array+0x38>)
 80026fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002730 <__libc_init_array+0x3c>)
 80026fc:	1b64      	subs	r4, r4, r5
 80026fe:	10a4      	asrs	r4, r4, #2
 8002700:	42a6      	cmp	r6, r4
 8002702:	d109      	bne.n	8002718 <__libc_init_array+0x24>
 8002704:	2600      	movs	r6, #0
 8002706:	f000 fdf7 	bl	80032f8 <_init>
 800270a:	4c0a      	ldr	r4, [pc, #40]	@ (8002734 <__libc_init_array+0x40>)
 800270c:	4d0a      	ldr	r5, [pc, #40]	@ (8002738 <__libc_init_array+0x44>)
 800270e:	1b64      	subs	r4, r4, r5
 8002710:	10a4      	asrs	r4, r4, #2
 8002712:	42a6      	cmp	r6, r4
 8002714:	d105      	bne.n	8002722 <__libc_init_array+0x2e>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	00b3      	lsls	r3, r6, #2
 800271a:	58eb      	ldr	r3, [r5, r3]
 800271c:	4798      	blx	r3
 800271e:	3601      	adds	r6, #1
 8002720:	e7ee      	b.n	8002700 <__libc_init_array+0xc>
 8002722:	00b3      	lsls	r3, r6, #2
 8002724:	58eb      	ldr	r3, [r5, r3]
 8002726:	4798      	blx	r3
 8002728:	3601      	adds	r6, #1
 800272a:	e7f2      	b.n	8002712 <__libc_init_array+0x1e>
 800272c:	08003c5c 	.word	0x08003c5c
 8002730:	08003c5c 	.word	0x08003c5c
 8002734:	08003c60 	.word	0x08003c60
 8002738:	08003c5c 	.word	0x08003c5c

0800273c <__retarget_lock_init_recursive>:
 800273c:	4770      	bx	lr

0800273e <__retarget_lock_acquire_recursive>:
 800273e:	4770      	bx	lr

08002740 <__retarget_lock_release_recursive>:
 8002740:	4770      	bx	lr
	...

08002744 <__assert_func>:
 8002744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002746:	0014      	movs	r4, r2
 8002748:	001a      	movs	r2, r3
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <__assert_func+0x2c>)
 800274c:	0005      	movs	r5, r0
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	000e      	movs	r6, r1
 8002752:	68d8      	ldr	r0, [r3, #12]
 8002754:	4b07      	ldr	r3, [pc, #28]	@ (8002774 <__assert_func+0x30>)
 8002756:	2c00      	cmp	r4, #0
 8002758:	d101      	bne.n	800275e <__assert_func+0x1a>
 800275a:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <__assert_func+0x34>)
 800275c:	001c      	movs	r4, r3
 800275e:	4907      	ldr	r1, [pc, #28]	@ (800277c <__assert_func+0x38>)
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	9402      	str	r4, [sp, #8]
 8002764:	002b      	movs	r3, r5
 8002766:	9600      	str	r6, [sp, #0]
 8002768:	f000 fbc8 	bl	8002efc <fiprintf>
 800276c:	f000 fcef 	bl	800314e <abort>
 8002770:	20000010 	.word	0x20000010
 8002774:	08003bea 	.word	0x08003bea
 8002778:	08003c25 	.word	0x08003c25
 800277c:	08003bf7 	.word	0x08003bf7

08002780 <_free_r>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	0005      	movs	r5, r0
 8002784:	1e0c      	subs	r4, r1, #0
 8002786:	d010      	beq.n	80027aa <_free_r+0x2a>
 8002788:	3c04      	subs	r4, #4
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	da00      	bge.n	8002792 <_free_r+0x12>
 8002790:	18e4      	adds	r4, r4, r3
 8002792:	0028      	movs	r0, r5
 8002794:	f7ff fb24 	bl	8001de0 <__malloc_lock>
 8002798:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <_free_r+0x90>)
 800279a:	6813      	ldr	r3, [r2, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <_free_r+0x2c>
 80027a0:	6063      	str	r3, [r4, #4]
 80027a2:	6014      	str	r4, [r2, #0]
 80027a4:	0028      	movs	r0, r5
 80027a6:	f7ff fb23 	bl	8001df0 <__malloc_unlock>
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	42a3      	cmp	r3, r4
 80027ae:	d908      	bls.n	80027c2 <_free_r+0x42>
 80027b0:	6820      	ldr	r0, [r4, #0]
 80027b2:	1821      	adds	r1, r4, r0
 80027b4:	428b      	cmp	r3, r1
 80027b6:	d1f3      	bne.n	80027a0 <_free_r+0x20>
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	1809      	adds	r1, r1, r0
 80027be:	6021      	str	r1, [r4, #0]
 80027c0:	e7ee      	b.n	80027a0 <_free_r+0x20>
 80027c2:	001a      	movs	r2, r3
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <_free_r+0x4e>
 80027ca:	42a3      	cmp	r3, r4
 80027cc:	d9f9      	bls.n	80027c2 <_free_r+0x42>
 80027ce:	6811      	ldr	r1, [r2, #0]
 80027d0:	1850      	adds	r0, r2, r1
 80027d2:	42a0      	cmp	r0, r4
 80027d4:	d10b      	bne.n	80027ee <_free_r+0x6e>
 80027d6:	6820      	ldr	r0, [r4, #0]
 80027d8:	1809      	adds	r1, r1, r0
 80027da:	1850      	adds	r0, r2, r1
 80027dc:	6011      	str	r1, [r2, #0]
 80027de:	4283      	cmp	r3, r0
 80027e0:	d1e0      	bne.n	80027a4 <_free_r+0x24>
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	1841      	adds	r1, r0, r1
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	6053      	str	r3, [r2, #4]
 80027ec:	e7da      	b.n	80027a4 <_free_r+0x24>
 80027ee:	42a0      	cmp	r0, r4
 80027f0:	d902      	bls.n	80027f8 <_free_r+0x78>
 80027f2:	230c      	movs	r3, #12
 80027f4:	602b      	str	r3, [r5, #0]
 80027f6:	e7d5      	b.n	80027a4 <_free_r+0x24>
 80027f8:	6820      	ldr	r0, [r4, #0]
 80027fa:	1821      	adds	r1, r4, r0
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d103      	bne.n	8002808 <_free_r+0x88>
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	1809      	adds	r1, r1, r0
 8002806:	6021      	str	r1, [r4, #0]
 8002808:	6063      	str	r3, [r4, #4]
 800280a:	6054      	str	r4, [r2, #4]
 800280c:	e7ca      	b.n	80027a4 <_free_r+0x24>
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	2000019c 	.word	0x2000019c

08002814 <__sfputc_r>:
 8002814:	6893      	ldr	r3, [r2, #8]
 8002816:	b510      	push	{r4, lr}
 8002818:	3b01      	subs	r3, #1
 800281a:	6093      	str	r3, [r2, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	da04      	bge.n	800282a <__sfputc_r+0x16>
 8002820:	6994      	ldr	r4, [r2, #24]
 8002822:	42a3      	cmp	r3, r4
 8002824:	db07      	blt.n	8002836 <__sfputc_r+0x22>
 8002826:	290a      	cmp	r1, #10
 8002828:	d005      	beq.n	8002836 <__sfputc_r+0x22>
 800282a:	6813      	ldr	r3, [r2, #0]
 800282c:	1c58      	adds	r0, r3, #1
 800282e:	6010      	str	r0, [r2, #0]
 8002830:	7019      	strb	r1, [r3, #0]
 8002832:	0008      	movs	r0, r1
 8002834:	bd10      	pop	{r4, pc}
 8002836:	f7ff fdc3 	bl	80023c0 <__swbuf_r>
 800283a:	0001      	movs	r1, r0
 800283c:	e7f9      	b.n	8002832 <__sfputc_r+0x1e>

0800283e <__sfputs_r>:
 800283e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002840:	0006      	movs	r6, r0
 8002842:	000f      	movs	r7, r1
 8002844:	0014      	movs	r4, r2
 8002846:	18d5      	adds	r5, r2, r3
 8002848:	42ac      	cmp	r4, r5
 800284a:	d101      	bne.n	8002850 <__sfputs_r+0x12>
 800284c:	2000      	movs	r0, #0
 800284e:	e007      	b.n	8002860 <__sfputs_r+0x22>
 8002850:	7821      	ldrb	r1, [r4, #0]
 8002852:	003a      	movs	r2, r7
 8002854:	0030      	movs	r0, r6
 8002856:	f7ff ffdd 	bl	8002814 <__sfputc_r>
 800285a:	3401      	adds	r4, #1
 800285c:	1c43      	adds	r3, r0, #1
 800285e:	d1f3      	bne.n	8002848 <__sfputs_r+0xa>
 8002860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002864 <_vfiprintf_r>:
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	b0a1      	sub	sp, #132	@ 0x84
 8002868:	000f      	movs	r7, r1
 800286a:	0015      	movs	r5, r2
 800286c:	001e      	movs	r6, r3
 800286e:	9003      	str	r0, [sp, #12]
 8002870:	2800      	cmp	r0, #0
 8002872:	d004      	beq.n	800287e <_vfiprintf_r+0x1a>
 8002874:	6a03      	ldr	r3, [r0, #32]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <_vfiprintf_r+0x1a>
 800287a:	f7ff fbe7 	bl	800204c <__sinit>
 800287e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002880:	07db      	lsls	r3, r3, #31
 8002882:	d405      	bmi.n	8002890 <_vfiprintf_r+0x2c>
 8002884:	89bb      	ldrh	r3, [r7, #12]
 8002886:	059b      	lsls	r3, r3, #22
 8002888:	d402      	bmi.n	8002890 <_vfiprintf_r+0x2c>
 800288a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800288c:	f7ff ff57 	bl	800273e <__retarget_lock_acquire_recursive>
 8002890:	89bb      	ldrh	r3, [r7, #12]
 8002892:	071b      	lsls	r3, r3, #28
 8002894:	d502      	bpl.n	800289c <_vfiprintf_r+0x38>
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d113      	bne.n	80028c4 <_vfiprintf_r+0x60>
 800289c:	0039      	movs	r1, r7
 800289e:	9803      	ldr	r0, [sp, #12]
 80028a0:	f7ff fdd0 	bl	8002444 <__swsetup_r>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d00d      	beq.n	80028c4 <_vfiprintf_r+0x60>
 80028a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028aa:	07db      	lsls	r3, r3, #31
 80028ac:	d503      	bpl.n	80028b6 <_vfiprintf_r+0x52>
 80028ae:	2001      	movs	r0, #1
 80028b0:	4240      	negs	r0, r0
 80028b2:	b021      	add	sp, #132	@ 0x84
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b6:	89bb      	ldrh	r3, [r7, #12]
 80028b8:	059b      	lsls	r3, r3, #22
 80028ba:	d4f8      	bmi.n	80028ae <_vfiprintf_r+0x4a>
 80028bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80028be:	f7ff ff3f 	bl	8002740 <__retarget_lock_release_recursive>
 80028c2:	e7f4      	b.n	80028ae <_vfiprintf_r+0x4a>
 80028c4:	2300      	movs	r3, #0
 80028c6:	ac08      	add	r4, sp, #32
 80028c8:	6163      	str	r3, [r4, #20]
 80028ca:	3320      	adds	r3, #32
 80028cc:	7663      	strb	r3, [r4, #25]
 80028ce:	3310      	adds	r3, #16
 80028d0:	76a3      	strb	r3, [r4, #26]
 80028d2:	9607      	str	r6, [sp, #28]
 80028d4:	002e      	movs	r6, r5
 80028d6:	7833      	ldrb	r3, [r6, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <_vfiprintf_r+0x7c>
 80028dc:	2b25      	cmp	r3, #37	@ 0x25
 80028de:	d148      	bne.n	8002972 <_vfiprintf_r+0x10e>
 80028e0:	1b73      	subs	r3, r6, r5
 80028e2:	9305      	str	r3, [sp, #20]
 80028e4:	42ae      	cmp	r6, r5
 80028e6:	d00b      	beq.n	8002900 <_vfiprintf_r+0x9c>
 80028e8:	002a      	movs	r2, r5
 80028ea:	0039      	movs	r1, r7
 80028ec:	9803      	ldr	r0, [sp, #12]
 80028ee:	f7ff ffa6 	bl	800283e <__sfputs_r>
 80028f2:	3001      	adds	r0, #1
 80028f4:	d100      	bne.n	80028f8 <_vfiprintf_r+0x94>
 80028f6:	e0ae      	b.n	8002a56 <_vfiprintf_r+0x1f2>
 80028f8:	6963      	ldr	r3, [r4, #20]
 80028fa:	9a05      	ldr	r2, [sp, #20]
 80028fc:	189b      	adds	r3, r3, r2
 80028fe:	6163      	str	r3, [r4, #20]
 8002900:	7833      	ldrb	r3, [r6, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d100      	bne.n	8002908 <_vfiprintf_r+0xa4>
 8002906:	e0a6      	b.n	8002a56 <_vfiprintf_r+0x1f2>
 8002908:	2201      	movs	r2, #1
 800290a:	2300      	movs	r3, #0
 800290c:	4252      	negs	r2, r2
 800290e:	6062      	str	r2, [r4, #4]
 8002910:	a904      	add	r1, sp, #16
 8002912:	3254      	adds	r2, #84	@ 0x54
 8002914:	1852      	adds	r2, r2, r1
 8002916:	1c75      	adds	r5, r6, #1
 8002918:	6023      	str	r3, [r4, #0]
 800291a:	60e3      	str	r3, [r4, #12]
 800291c:	60a3      	str	r3, [r4, #8]
 800291e:	7013      	strb	r3, [r2, #0]
 8002920:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002922:	4b59      	ldr	r3, [pc, #356]	@ (8002a88 <_vfiprintf_r+0x224>)
 8002924:	2205      	movs	r2, #5
 8002926:	0018      	movs	r0, r3
 8002928:	7829      	ldrb	r1, [r5, #0]
 800292a:	9305      	str	r3, [sp, #20]
 800292c:	f000 fc04 	bl	8003138 <memchr>
 8002930:	1c6e      	adds	r6, r5, #1
 8002932:	2800      	cmp	r0, #0
 8002934:	d11f      	bne.n	8002976 <_vfiprintf_r+0x112>
 8002936:	6822      	ldr	r2, [r4, #0]
 8002938:	06d3      	lsls	r3, r2, #27
 800293a:	d504      	bpl.n	8002946 <_vfiprintf_r+0xe2>
 800293c:	2353      	movs	r3, #83	@ 0x53
 800293e:	a904      	add	r1, sp, #16
 8002940:	185b      	adds	r3, r3, r1
 8002942:	2120      	movs	r1, #32
 8002944:	7019      	strb	r1, [r3, #0]
 8002946:	0713      	lsls	r3, r2, #28
 8002948:	d504      	bpl.n	8002954 <_vfiprintf_r+0xf0>
 800294a:	2353      	movs	r3, #83	@ 0x53
 800294c:	a904      	add	r1, sp, #16
 800294e:	185b      	adds	r3, r3, r1
 8002950:	212b      	movs	r1, #43	@ 0x2b
 8002952:	7019      	strb	r1, [r3, #0]
 8002954:	782b      	ldrb	r3, [r5, #0]
 8002956:	2b2a      	cmp	r3, #42	@ 0x2a
 8002958:	d016      	beq.n	8002988 <_vfiprintf_r+0x124>
 800295a:	002e      	movs	r6, r5
 800295c:	2100      	movs	r1, #0
 800295e:	200a      	movs	r0, #10
 8002960:	68e3      	ldr	r3, [r4, #12]
 8002962:	7832      	ldrb	r2, [r6, #0]
 8002964:	1c75      	adds	r5, r6, #1
 8002966:	3a30      	subs	r2, #48	@ 0x30
 8002968:	2a09      	cmp	r2, #9
 800296a:	d950      	bls.n	8002a0e <_vfiprintf_r+0x1aa>
 800296c:	2900      	cmp	r1, #0
 800296e:	d111      	bne.n	8002994 <_vfiprintf_r+0x130>
 8002970:	e017      	b.n	80029a2 <_vfiprintf_r+0x13e>
 8002972:	3601      	adds	r6, #1
 8002974:	e7af      	b.n	80028d6 <_vfiprintf_r+0x72>
 8002976:	9b05      	ldr	r3, [sp, #20]
 8002978:	6822      	ldr	r2, [r4, #0]
 800297a:	1ac0      	subs	r0, r0, r3
 800297c:	2301      	movs	r3, #1
 800297e:	4083      	lsls	r3, r0
 8002980:	4313      	orrs	r3, r2
 8002982:	0035      	movs	r5, r6
 8002984:	6023      	str	r3, [r4, #0]
 8002986:	e7cc      	b.n	8002922 <_vfiprintf_r+0xbe>
 8002988:	9b07      	ldr	r3, [sp, #28]
 800298a:	1d19      	adds	r1, r3, #4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	9107      	str	r1, [sp, #28]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db01      	blt.n	8002998 <_vfiprintf_r+0x134>
 8002994:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002996:	e004      	b.n	80029a2 <_vfiprintf_r+0x13e>
 8002998:	425b      	negs	r3, r3
 800299a:	60e3      	str	r3, [r4, #12]
 800299c:	2302      	movs	r3, #2
 800299e:	4313      	orrs	r3, r2
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	7833      	ldrb	r3, [r6, #0]
 80029a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80029a6:	d10c      	bne.n	80029c2 <_vfiprintf_r+0x15e>
 80029a8:	7873      	ldrb	r3, [r6, #1]
 80029aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80029ac:	d134      	bne.n	8002a18 <_vfiprintf_r+0x1b4>
 80029ae:	9b07      	ldr	r3, [sp, #28]
 80029b0:	3602      	adds	r6, #2
 80029b2:	1d1a      	adds	r2, r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	9207      	str	r2, [sp, #28]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	da01      	bge.n	80029c0 <_vfiprintf_r+0x15c>
 80029bc:	2301      	movs	r3, #1
 80029be:	425b      	negs	r3, r3
 80029c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80029c2:	4d32      	ldr	r5, [pc, #200]	@ (8002a8c <_vfiprintf_r+0x228>)
 80029c4:	2203      	movs	r2, #3
 80029c6:	0028      	movs	r0, r5
 80029c8:	7831      	ldrb	r1, [r6, #0]
 80029ca:	f000 fbb5 	bl	8003138 <memchr>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d006      	beq.n	80029e0 <_vfiprintf_r+0x17c>
 80029d2:	2340      	movs	r3, #64	@ 0x40
 80029d4:	1b40      	subs	r0, r0, r5
 80029d6:	4083      	lsls	r3, r0
 80029d8:	6822      	ldr	r2, [r4, #0]
 80029da:	3601      	adds	r6, #1
 80029dc:	4313      	orrs	r3, r2
 80029de:	6023      	str	r3, [r4, #0]
 80029e0:	7831      	ldrb	r1, [r6, #0]
 80029e2:	2206      	movs	r2, #6
 80029e4:	482a      	ldr	r0, [pc, #168]	@ (8002a90 <_vfiprintf_r+0x22c>)
 80029e6:	1c75      	adds	r5, r6, #1
 80029e8:	7621      	strb	r1, [r4, #24]
 80029ea:	f000 fba5 	bl	8003138 <memchr>
 80029ee:	2800      	cmp	r0, #0
 80029f0:	d040      	beq.n	8002a74 <_vfiprintf_r+0x210>
 80029f2:	4b28      	ldr	r3, [pc, #160]	@ (8002a94 <_vfiprintf_r+0x230>)
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d122      	bne.n	8002a3e <_vfiprintf_r+0x1da>
 80029f8:	2207      	movs	r2, #7
 80029fa:	9b07      	ldr	r3, [sp, #28]
 80029fc:	3307      	adds	r3, #7
 80029fe:	4393      	bics	r3, r2
 8002a00:	3308      	adds	r3, #8
 8002a02:	9307      	str	r3, [sp, #28]
 8002a04:	6963      	ldr	r3, [r4, #20]
 8002a06:	9a04      	ldr	r2, [sp, #16]
 8002a08:	189b      	adds	r3, r3, r2
 8002a0a:	6163      	str	r3, [r4, #20]
 8002a0c:	e762      	b.n	80028d4 <_vfiprintf_r+0x70>
 8002a0e:	4343      	muls	r3, r0
 8002a10:	002e      	movs	r6, r5
 8002a12:	2101      	movs	r1, #1
 8002a14:	189b      	adds	r3, r3, r2
 8002a16:	e7a4      	b.n	8002962 <_vfiprintf_r+0xfe>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	200a      	movs	r0, #10
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	3601      	adds	r6, #1
 8002a20:	6063      	str	r3, [r4, #4]
 8002a22:	7832      	ldrb	r2, [r6, #0]
 8002a24:	1c75      	adds	r5, r6, #1
 8002a26:	3a30      	subs	r2, #48	@ 0x30
 8002a28:	2a09      	cmp	r2, #9
 8002a2a:	d903      	bls.n	8002a34 <_vfiprintf_r+0x1d0>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0c8      	beq.n	80029c2 <_vfiprintf_r+0x15e>
 8002a30:	9109      	str	r1, [sp, #36]	@ 0x24
 8002a32:	e7c6      	b.n	80029c2 <_vfiprintf_r+0x15e>
 8002a34:	4341      	muls	r1, r0
 8002a36:	002e      	movs	r6, r5
 8002a38:	2301      	movs	r3, #1
 8002a3a:	1889      	adds	r1, r1, r2
 8002a3c:	e7f1      	b.n	8002a22 <_vfiprintf_r+0x1be>
 8002a3e:	aa07      	add	r2, sp, #28
 8002a40:	9200      	str	r2, [sp, #0]
 8002a42:	0021      	movs	r1, r4
 8002a44:	003a      	movs	r2, r7
 8002a46:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <_vfiprintf_r+0x234>)
 8002a48:	9803      	ldr	r0, [sp, #12]
 8002a4a:	e000      	b.n	8002a4e <_vfiprintf_r+0x1ea>
 8002a4c:	bf00      	nop
 8002a4e:	9004      	str	r0, [sp, #16]
 8002a50:	9b04      	ldr	r3, [sp, #16]
 8002a52:	3301      	adds	r3, #1
 8002a54:	d1d6      	bne.n	8002a04 <_vfiprintf_r+0x1a0>
 8002a56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a58:	07db      	lsls	r3, r3, #31
 8002a5a:	d405      	bmi.n	8002a68 <_vfiprintf_r+0x204>
 8002a5c:	89bb      	ldrh	r3, [r7, #12]
 8002a5e:	059b      	lsls	r3, r3, #22
 8002a60:	d402      	bmi.n	8002a68 <_vfiprintf_r+0x204>
 8002a62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002a64:	f7ff fe6c 	bl	8002740 <__retarget_lock_release_recursive>
 8002a68:	89bb      	ldrh	r3, [r7, #12]
 8002a6a:	065b      	lsls	r3, r3, #25
 8002a6c:	d500      	bpl.n	8002a70 <_vfiprintf_r+0x20c>
 8002a6e:	e71e      	b.n	80028ae <_vfiprintf_r+0x4a>
 8002a70:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002a72:	e71e      	b.n	80028b2 <_vfiprintf_r+0x4e>
 8002a74:	aa07      	add	r2, sp, #28
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	0021      	movs	r1, r4
 8002a7a:	003a      	movs	r2, r7
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <_vfiprintf_r+0x234>)
 8002a7e:	9803      	ldr	r0, [sp, #12]
 8002a80:	f000 f87c 	bl	8002b7c <_printf_i>
 8002a84:	e7e3      	b.n	8002a4e <_vfiprintf_r+0x1ea>
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	08003c26 	.word	0x08003c26
 8002a8c:	08003c2c 	.word	0x08003c2c
 8002a90:	08003c30 	.word	0x08003c30
 8002a94:	00000000 	.word	0x00000000
 8002a98:	0800283f 	.word	0x0800283f

08002a9c <_printf_common>:
 8002a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a9e:	0016      	movs	r6, r2
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	688a      	ldr	r2, [r1, #8]
 8002aa4:	690b      	ldr	r3, [r1, #16]
 8002aa6:	000c      	movs	r4, r1
 8002aa8:	9000      	str	r0, [sp, #0]
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	da00      	bge.n	8002ab0 <_printf_common+0x14>
 8002aae:	0013      	movs	r3, r2
 8002ab0:	0022      	movs	r2, r4
 8002ab2:	6033      	str	r3, [r6, #0]
 8002ab4:	3243      	adds	r2, #67	@ 0x43
 8002ab6:	7812      	ldrb	r2, [r2, #0]
 8002ab8:	2a00      	cmp	r2, #0
 8002aba:	d001      	beq.n	8002ac0 <_printf_common+0x24>
 8002abc:	3301      	adds	r3, #1
 8002abe:	6033      	str	r3, [r6, #0]
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	d502      	bpl.n	8002acc <_printf_common+0x30>
 8002ac6:	6833      	ldr	r3, [r6, #0]
 8002ac8:	3302      	adds	r3, #2
 8002aca:	6033      	str	r3, [r6, #0]
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	2306      	movs	r3, #6
 8002ad0:	0015      	movs	r5, r2
 8002ad2:	401d      	ands	r5, r3
 8002ad4:	421a      	tst	r2, r3
 8002ad6:	d027      	beq.n	8002b28 <_printf_common+0x8c>
 8002ad8:	0023      	movs	r3, r4
 8002ada:	3343      	adds	r3, #67	@ 0x43
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	1e5a      	subs	r2, r3, #1
 8002ae0:	4193      	sbcs	r3, r2
 8002ae2:	6822      	ldr	r2, [r4, #0]
 8002ae4:	0692      	lsls	r2, r2, #26
 8002ae6:	d430      	bmi.n	8002b4a <_printf_common+0xae>
 8002ae8:	0022      	movs	r2, r4
 8002aea:	9901      	ldr	r1, [sp, #4]
 8002aec:	9800      	ldr	r0, [sp, #0]
 8002aee:	9d08      	ldr	r5, [sp, #32]
 8002af0:	3243      	adds	r2, #67	@ 0x43
 8002af2:	47a8      	blx	r5
 8002af4:	3001      	adds	r0, #1
 8002af6:	d025      	beq.n	8002b44 <_printf_common+0xa8>
 8002af8:	2206      	movs	r2, #6
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	2500      	movs	r5, #0
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d105      	bne.n	8002b10 <_printf_common+0x74>
 8002b04:	6833      	ldr	r3, [r6, #0]
 8002b06:	68e5      	ldr	r5, [r4, #12]
 8002b08:	1aed      	subs	r5, r5, r3
 8002b0a:	43eb      	mvns	r3, r5
 8002b0c:	17db      	asrs	r3, r3, #31
 8002b0e:	401d      	ands	r5, r3
 8002b10:	68a3      	ldr	r3, [r4, #8]
 8002b12:	6922      	ldr	r2, [r4, #16]
 8002b14:	4293      	cmp	r3, r2
 8002b16:	dd01      	ble.n	8002b1c <_printf_common+0x80>
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	18ed      	adds	r5, r5, r3
 8002b1c:	2600      	movs	r6, #0
 8002b1e:	42b5      	cmp	r5, r6
 8002b20:	d120      	bne.n	8002b64 <_printf_common+0xc8>
 8002b22:	2000      	movs	r0, #0
 8002b24:	e010      	b.n	8002b48 <_printf_common+0xac>
 8002b26:	3501      	adds	r5, #1
 8002b28:	68e3      	ldr	r3, [r4, #12]
 8002b2a:	6832      	ldr	r2, [r6, #0]
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	42ab      	cmp	r3, r5
 8002b30:	ddd2      	ble.n	8002ad8 <_printf_common+0x3c>
 8002b32:	0022      	movs	r2, r4
 8002b34:	2301      	movs	r3, #1
 8002b36:	9901      	ldr	r1, [sp, #4]
 8002b38:	9800      	ldr	r0, [sp, #0]
 8002b3a:	9f08      	ldr	r7, [sp, #32]
 8002b3c:	3219      	adds	r2, #25
 8002b3e:	47b8      	blx	r7
 8002b40:	3001      	adds	r0, #1
 8002b42:	d1f0      	bne.n	8002b26 <_printf_common+0x8a>
 8002b44:	2001      	movs	r0, #1
 8002b46:	4240      	negs	r0, r0
 8002b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b4a:	2030      	movs	r0, #48	@ 0x30
 8002b4c:	18e1      	adds	r1, r4, r3
 8002b4e:	3143      	adds	r1, #67	@ 0x43
 8002b50:	7008      	strb	r0, [r1, #0]
 8002b52:	0021      	movs	r1, r4
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	3145      	adds	r1, #69	@ 0x45
 8002b58:	7809      	ldrb	r1, [r1, #0]
 8002b5a:	18a2      	adds	r2, r4, r2
 8002b5c:	3243      	adds	r2, #67	@ 0x43
 8002b5e:	3302      	adds	r3, #2
 8002b60:	7011      	strb	r1, [r2, #0]
 8002b62:	e7c1      	b.n	8002ae8 <_printf_common+0x4c>
 8002b64:	0022      	movs	r2, r4
 8002b66:	2301      	movs	r3, #1
 8002b68:	9901      	ldr	r1, [sp, #4]
 8002b6a:	9800      	ldr	r0, [sp, #0]
 8002b6c:	9f08      	ldr	r7, [sp, #32]
 8002b6e:	321a      	adds	r2, #26
 8002b70:	47b8      	blx	r7
 8002b72:	3001      	adds	r0, #1
 8002b74:	d0e6      	beq.n	8002b44 <_printf_common+0xa8>
 8002b76:	3601      	adds	r6, #1
 8002b78:	e7d1      	b.n	8002b1e <_printf_common+0x82>
	...

08002b7c <_printf_i>:
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	b08b      	sub	sp, #44	@ 0x2c
 8002b80:	9206      	str	r2, [sp, #24]
 8002b82:	000a      	movs	r2, r1
 8002b84:	3243      	adds	r2, #67	@ 0x43
 8002b86:	9307      	str	r3, [sp, #28]
 8002b88:	9005      	str	r0, [sp, #20]
 8002b8a:	9203      	str	r2, [sp, #12]
 8002b8c:	7e0a      	ldrb	r2, [r1, #24]
 8002b8e:	000c      	movs	r4, r1
 8002b90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002b92:	2a78      	cmp	r2, #120	@ 0x78
 8002b94:	d809      	bhi.n	8002baa <_printf_i+0x2e>
 8002b96:	2a62      	cmp	r2, #98	@ 0x62
 8002b98:	d80b      	bhi.n	8002bb2 <_printf_i+0x36>
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d100      	bne.n	8002ba0 <_printf_i+0x24>
 8002b9e:	e0bc      	b.n	8002d1a <_printf_i+0x19e>
 8002ba0:	497b      	ldr	r1, [pc, #492]	@ (8002d90 <_printf_i+0x214>)
 8002ba2:	9104      	str	r1, [sp, #16]
 8002ba4:	2a58      	cmp	r2, #88	@ 0x58
 8002ba6:	d100      	bne.n	8002baa <_printf_i+0x2e>
 8002ba8:	e090      	b.n	8002ccc <_printf_i+0x150>
 8002baa:	0025      	movs	r5, r4
 8002bac:	3542      	adds	r5, #66	@ 0x42
 8002bae:	702a      	strb	r2, [r5, #0]
 8002bb0:	e022      	b.n	8002bf8 <_printf_i+0x7c>
 8002bb2:	0010      	movs	r0, r2
 8002bb4:	3863      	subs	r0, #99	@ 0x63
 8002bb6:	2815      	cmp	r0, #21
 8002bb8:	d8f7      	bhi.n	8002baa <_printf_i+0x2e>
 8002bba:	f7fd faad 	bl	8000118 <__gnu_thumb1_case_shi>
 8002bbe:	0016      	.short	0x0016
 8002bc0:	fff6001f 	.word	0xfff6001f
 8002bc4:	fff6fff6 	.word	0xfff6fff6
 8002bc8:	001ffff6 	.word	0x001ffff6
 8002bcc:	fff6fff6 	.word	0xfff6fff6
 8002bd0:	fff6fff6 	.word	0xfff6fff6
 8002bd4:	003600a1 	.word	0x003600a1
 8002bd8:	fff60080 	.word	0xfff60080
 8002bdc:	00b2fff6 	.word	0x00b2fff6
 8002be0:	0036fff6 	.word	0x0036fff6
 8002be4:	fff6fff6 	.word	0xfff6fff6
 8002be8:	0084      	.short	0x0084
 8002bea:	0025      	movs	r5, r4
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	3542      	adds	r5, #66	@ 0x42
 8002bf0:	1d11      	adds	r1, r2, #4
 8002bf2:	6019      	str	r1, [r3, #0]
 8002bf4:	6813      	ldr	r3, [r2, #0]
 8002bf6:	702b      	strb	r3, [r5, #0]
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0a0      	b.n	8002d3e <_printf_i+0x1c2>
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	6809      	ldr	r1, [r1, #0]
 8002c00:	1d02      	adds	r2, r0, #4
 8002c02:	060d      	lsls	r5, r1, #24
 8002c04:	d50b      	bpl.n	8002c1e <_printf_i+0xa2>
 8002c06:	6806      	ldr	r6, [r0, #0]
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	2e00      	cmp	r6, #0
 8002c0c:	da03      	bge.n	8002c16 <_printf_i+0x9a>
 8002c0e:	232d      	movs	r3, #45	@ 0x2d
 8002c10:	9a03      	ldr	r2, [sp, #12]
 8002c12:	4276      	negs	r6, r6
 8002c14:	7013      	strb	r3, [r2, #0]
 8002c16:	4b5e      	ldr	r3, [pc, #376]	@ (8002d90 <_printf_i+0x214>)
 8002c18:	270a      	movs	r7, #10
 8002c1a:	9304      	str	r3, [sp, #16]
 8002c1c:	e018      	b.n	8002c50 <_printf_i+0xd4>
 8002c1e:	6806      	ldr	r6, [r0, #0]
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	0649      	lsls	r1, r1, #25
 8002c24:	d5f1      	bpl.n	8002c0a <_printf_i+0x8e>
 8002c26:	b236      	sxth	r6, r6
 8002c28:	e7ef      	b.n	8002c0a <_printf_i+0x8e>
 8002c2a:	6808      	ldr	r0, [r1, #0]
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	c940      	ldmia	r1!, {r6}
 8002c30:	0605      	lsls	r5, r0, #24
 8002c32:	d402      	bmi.n	8002c3a <_printf_i+0xbe>
 8002c34:	0640      	lsls	r0, r0, #25
 8002c36:	d500      	bpl.n	8002c3a <_printf_i+0xbe>
 8002c38:	b2b6      	uxth	r6, r6
 8002c3a:	6019      	str	r1, [r3, #0]
 8002c3c:	4b54      	ldr	r3, [pc, #336]	@ (8002d90 <_printf_i+0x214>)
 8002c3e:	270a      	movs	r7, #10
 8002c40:	9304      	str	r3, [sp, #16]
 8002c42:	2a6f      	cmp	r2, #111	@ 0x6f
 8002c44:	d100      	bne.n	8002c48 <_printf_i+0xcc>
 8002c46:	3f02      	subs	r7, #2
 8002c48:	0023      	movs	r3, r4
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	3343      	adds	r3, #67	@ 0x43
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	6863      	ldr	r3, [r4, #4]
 8002c52:	60a3      	str	r3, [r4, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	db03      	blt.n	8002c60 <_printf_i+0xe4>
 8002c58:	2104      	movs	r1, #4
 8002c5a:	6822      	ldr	r2, [r4, #0]
 8002c5c:	438a      	bics	r2, r1
 8002c5e:	6022      	str	r2, [r4, #0]
 8002c60:	2e00      	cmp	r6, #0
 8002c62:	d102      	bne.n	8002c6a <_printf_i+0xee>
 8002c64:	9d03      	ldr	r5, [sp, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <_printf_i+0x108>
 8002c6a:	9d03      	ldr	r5, [sp, #12]
 8002c6c:	0030      	movs	r0, r6
 8002c6e:	0039      	movs	r1, r7
 8002c70:	f7fd fae2 	bl	8000238 <__aeabi_uidivmod>
 8002c74:	9b04      	ldr	r3, [sp, #16]
 8002c76:	3d01      	subs	r5, #1
 8002c78:	5c5b      	ldrb	r3, [r3, r1]
 8002c7a:	702b      	strb	r3, [r5, #0]
 8002c7c:	0033      	movs	r3, r6
 8002c7e:	0006      	movs	r6, r0
 8002c80:	429f      	cmp	r7, r3
 8002c82:	d9f3      	bls.n	8002c6c <_printf_i+0xf0>
 8002c84:	2f08      	cmp	r7, #8
 8002c86:	d109      	bne.n	8002c9c <_printf_i+0x120>
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	07db      	lsls	r3, r3, #31
 8002c8c:	d506      	bpl.n	8002c9c <_printf_i+0x120>
 8002c8e:	6862      	ldr	r2, [r4, #4]
 8002c90:	6923      	ldr	r3, [r4, #16]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	dc02      	bgt.n	8002c9c <_printf_i+0x120>
 8002c96:	2330      	movs	r3, #48	@ 0x30
 8002c98:	3d01      	subs	r5, #1
 8002c9a:	702b      	strb	r3, [r5, #0]
 8002c9c:	9b03      	ldr	r3, [sp, #12]
 8002c9e:	1b5b      	subs	r3, r3, r5
 8002ca0:	6123      	str	r3, [r4, #16]
 8002ca2:	9b07      	ldr	r3, [sp, #28]
 8002ca4:	0021      	movs	r1, r4
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	9805      	ldr	r0, [sp, #20]
 8002caa:	9b06      	ldr	r3, [sp, #24]
 8002cac:	aa09      	add	r2, sp, #36	@ 0x24
 8002cae:	f7ff fef5 	bl	8002a9c <_printf_common>
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d148      	bne.n	8002d48 <_printf_i+0x1cc>
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	4240      	negs	r0, r0
 8002cba:	b00b      	add	sp, #44	@ 0x2c
 8002cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	6809      	ldr	r1, [r1, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	6022      	str	r2, [r4, #0]
 8002cc6:	2278      	movs	r2, #120	@ 0x78
 8002cc8:	4932      	ldr	r1, [pc, #200]	@ (8002d94 <_printf_i+0x218>)
 8002cca:	9104      	str	r1, [sp, #16]
 8002ccc:	0021      	movs	r1, r4
 8002cce:	3145      	adds	r1, #69	@ 0x45
 8002cd0:	700a      	strb	r2, [r1, #0]
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	c940      	ldmia	r1!, {r6}
 8002cd8:	0610      	lsls	r0, r2, #24
 8002cda:	d402      	bmi.n	8002ce2 <_printf_i+0x166>
 8002cdc:	0650      	lsls	r0, r2, #25
 8002cde:	d500      	bpl.n	8002ce2 <_printf_i+0x166>
 8002ce0:	b2b6      	uxth	r6, r6
 8002ce2:	6019      	str	r1, [r3, #0]
 8002ce4:	07d3      	lsls	r3, r2, #31
 8002ce6:	d502      	bpl.n	8002cee <_printf_i+0x172>
 8002ce8:	2320      	movs	r3, #32
 8002cea:	4313      	orrs	r3, r2
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	2e00      	cmp	r6, #0
 8002cf0:	d001      	beq.n	8002cf6 <_printf_i+0x17a>
 8002cf2:	2710      	movs	r7, #16
 8002cf4:	e7a8      	b.n	8002c48 <_printf_i+0xcc>
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	6023      	str	r3, [r4, #0]
 8002cfe:	e7f8      	b.n	8002cf2 <_printf_i+0x176>
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	680d      	ldr	r5, [r1, #0]
 8002d04:	1d10      	adds	r0, r2, #4
 8002d06:	6949      	ldr	r1, [r1, #20]
 8002d08:	6018      	str	r0, [r3, #0]
 8002d0a:	6813      	ldr	r3, [r2, #0]
 8002d0c:	062e      	lsls	r6, r5, #24
 8002d0e:	d501      	bpl.n	8002d14 <_printf_i+0x198>
 8002d10:	6019      	str	r1, [r3, #0]
 8002d12:	e002      	b.n	8002d1a <_printf_i+0x19e>
 8002d14:	066d      	lsls	r5, r5, #25
 8002d16:	d5fb      	bpl.n	8002d10 <_printf_i+0x194>
 8002d18:	8019      	strh	r1, [r3, #0]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9d03      	ldr	r5, [sp, #12]
 8002d1e:	6123      	str	r3, [r4, #16]
 8002d20:	e7bf      	b.n	8002ca2 <_printf_i+0x126>
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	1d11      	adds	r1, r2, #4
 8002d26:	6019      	str	r1, [r3, #0]
 8002d28:	6815      	ldr	r5, [r2, #0]
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	0028      	movs	r0, r5
 8002d2e:	6862      	ldr	r2, [r4, #4]
 8002d30:	f000 fa02 	bl	8003138 <memchr>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d001      	beq.n	8002d3c <_printf_i+0x1c0>
 8002d38:	1b40      	subs	r0, r0, r5
 8002d3a:	6060      	str	r0, [r4, #4]
 8002d3c:	6863      	ldr	r3, [r4, #4]
 8002d3e:	6123      	str	r3, [r4, #16]
 8002d40:	2300      	movs	r3, #0
 8002d42:	9a03      	ldr	r2, [sp, #12]
 8002d44:	7013      	strb	r3, [r2, #0]
 8002d46:	e7ac      	b.n	8002ca2 <_printf_i+0x126>
 8002d48:	002a      	movs	r2, r5
 8002d4a:	6923      	ldr	r3, [r4, #16]
 8002d4c:	9906      	ldr	r1, [sp, #24]
 8002d4e:	9805      	ldr	r0, [sp, #20]
 8002d50:	9d07      	ldr	r5, [sp, #28]
 8002d52:	47a8      	blx	r5
 8002d54:	3001      	adds	r0, #1
 8002d56:	d0ae      	beq.n	8002cb6 <_printf_i+0x13a>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	079b      	lsls	r3, r3, #30
 8002d5c:	d415      	bmi.n	8002d8a <_printf_i+0x20e>
 8002d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d60:	68e0      	ldr	r0, [r4, #12]
 8002d62:	4298      	cmp	r0, r3
 8002d64:	daa9      	bge.n	8002cba <_printf_i+0x13e>
 8002d66:	0018      	movs	r0, r3
 8002d68:	e7a7      	b.n	8002cba <_printf_i+0x13e>
 8002d6a:	0022      	movs	r2, r4
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	9906      	ldr	r1, [sp, #24]
 8002d70:	9805      	ldr	r0, [sp, #20]
 8002d72:	9e07      	ldr	r6, [sp, #28]
 8002d74:	3219      	adds	r2, #25
 8002d76:	47b0      	blx	r6
 8002d78:	3001      	adds	r0, #1
 8002d7a:	d09c      	beq.n	8002cb6 <_printf_i+0x13a>
 8002d7c:	3501      	adds	r5, #1
 8002d7e:	68e3      	ldr	r3, [r4, #12]
 8002d80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	42ab      	cmp	r3, r5
 8002d86:	dcf0      	bgt.n	8002d6a <_printf_i+0x1ee>
 8002d88:	e7e9      	b.n	8002d5e <_printf_i+0x1e2>
 8002d8a:	2500      	movs	r5, #0
 8002d8c:	e7f7      	b.n	8002d7e <_printf_i+0x202>
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	08003c37 	.word	0x08003c37
 8002d94:	08003c48 	.word	0x08003c48

08002d98 <__sflush_r>:
 8002d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	5e8b      	ldrsh	r3, [r1, r2]
 8002d9e:	0005      	movs	r5, r0
 8002da0:	000c      	movs	r4, r1
 8002da2:	071a      	lsls	r2, r3, #28
 8002da4:	d456      	bmi.n	8002e54 <__sflush_r+0xbc>
 8002da6:	684a      	ldr	r2, [r1, #4]
 8002da8:	2a00      	cmp	r2, #0
 8002daa:	dc02      	bgt.n	8002db2 <__sflush_r+0x1a>
 8002dac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002dae:	2a00      	cmp	r2, #0
 8002db0:	dd4e      	ble.n	8002e50 <__sflush_r+0xb8>
 8002db2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002db4:	2f00      	cmp	r7, #0
 8002db6:	d04b      	beq.n	8002e50 <__sflush_r+0xb8>
 8002db8:	2200      	movs	r2, #0
 8002dba:	2080      	movs	r0, #128	@ 0x80
 8002dbc:	682e      	ldr	r6, [r5, #0]
 8002dbe:	602a      	str	r2, [r5, #0]
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	0140      	lsls	r0, r0, #5
 8002dc4:	6a21      	ldr	r1, [r4, #32]
 8002dc6:	4002      	ands	r2, r0
 8002dc8:	4203      	tst	r3, r0
 8002dca:	d033      	beq.n	8002e34 <__sflush_r+0x9c>
 8002dcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002dce:	89a3      	ldrh	r3, [r4, #12]
 8002dd0:	075b      	lsls	r3, r3, #29
 8002dd2:	d506      	bpl.n	8002de2 <__sflush_r+0x4a>
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	1ad2      	subs	r2, r2, r3
 8002dd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <__sflush_r+0x4a>
 8002dde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002de0:	1ad2      	subs	r2, r2, r3
 8002de2:	2300      	movs	r3, #0
 8002de4:	0028      	movs	r0, r5
 8002de6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002de8:	6a21      	ldr	r1, [r4, #32]
 8002dea:	47b8      	blx	r7
 8002dec:	89a2      	ldrh	r2, [r4, #12]
 8002dee:	1c43      	adds	r3, r0, #1
 8002df0:	d106      	bne.n	8002e00 <__sflush_r+0x68>
 8002df2:	6829      	ldr	r1, [r5, #0]
 8002df4:	291d      	cmp	r1, #29
 8002df6:	d846      	bhi.n	8002e86 <__sflush_r+0xee>
 8002df8:	4b29      	ldr	r3, [pc, #164]	@ (8002ea0 <__sflush_r+0x108>)
 8002dfa:	410b      	asrs	r3, r1
 8002dfc:	07db      	lsls	r3, r3, #31
 8002dfe:	d442      	bmi.n	8002e86 <__sflush_r+0xee>
 8002e00:	2300      	movs	r3, #0
 8002e02:	6063      	str	r3, [r4, #4]
 8002e04:	6923      	ldr	r3, [r4, #16]
 8002e06:	6023      	str	r3, [r4, #0]
 8002e08:	04d2      	lsls	r2, r2, #19
 8002e0a:	d505      	bpl.n	8002e18 <__sflush_r+0x80>
 8002e0c:	1c43      	adds	r3, r0, #1
 8002e0e:	d102      	bne.n	8002e16 <__sflush_r+0x7e>
 8002e10:	682b      	ldr	r3, [r5, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d100      	bne.n	8002e18 <__sflush_r+0x80>
 8002e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e1a:	602e      	str	r6, [r5, #0]
 8002e1c:	2900      	cmp	r1, #0
 8002e1e:	d017      	beq.n	8002e50 <__sflush_r+0xb8>
 8002e20:	0023      	movs	r3, r4
 8002e22:	3344      	adds	r3, #68	@ 0x44
 8002e24:	4299      	cmp	r1, r3
 8002e26:	d002      	beq.n	8002e2e <__sflush_r+0x96>
 8002e28:	0028      	movs	r0, r5
 8002e2a:	f7ff fca9 	bl	8002780 <_free_r>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e32:	e00d      	b.n	8002e50 <__sflush_r+0xb8>
 8002e34:	2301      	movs	r3, #1
 8002e36:	0028      	movs	r0, r5
 8002e38:	47b8      	blx	r7
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d1c6      	bne.n	8002dce <__sflush_r+0x36>
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0c3      	beq.n	8002dce <__sflush_r+0x36>
 8002e46:	2b1d      	cmp	r3, #29
 8002e48:	d001      	beq.n	8002e4e <__sflush_r+0xb6>
 8002e4a:	2b16      	cmp	r3, #22
 8002e4c:	d11a      	bne.n	8002e84 <__sflush_r+0xec>
 8002e4e:	602e      	str	r6, [r5, #0]
 8002e50:	2000      	movs	r0, #0
 8002e52:	e01e      	b.n	8002e92 <__sflush_r+0xfa>
 8002e54:	690e      	ldr	r6, [r1, #16]
 8002e56:	2e00      	cmp	r6, #0
 8002e58:	d0fa      	beq.n	8002e50 <__sflush_r+0xb8>
 8002e5a:	680f      	ldr	r7, [r1, #0]
 8002e5c:	600e      	str	r6, [r1, #0]
 8002e5e:	1bba      	subs	r2, r7, r6
 8002e60:	9201      	str	r2, [sp, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	079b      	lsls	r3, r3, #30
 8002e66:	d100      	bne.n	8002e6a <__sflush_r+0xd2>
 8002e68:	694a      	ldr	r2, [r1, #20]
 8002e6a:	60a2      	str	r2, [r4, #8]
 8002e6c:	9b01      	ldr	r3, [sp, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	ddee      	ble.n	8002e50 <__sflush_r+0xb8>
 8002e72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e74:	0032      	movs	r2, r6
 8002e76:	001f      	movs	r7, r3
 8002e78:	0028      	movs	r0, r5
 8002e7a:	9b01      	ldr	r3, [sp, #4]
 8002e7c:	6a21      	ldr	r1, [r4, #32]
 8002e7e:	47b8      	blx	r7
 8002e80:	2800      	cmp	r0, #0
 8002e82:	dc07      	bgt.n	8002e94 <__sflush_r+0xfc>
 8002e84:	89a2      	ldrh	r2, [r4, #12]
 8002e86:	2340      	movs	r3, #64	@ 0x40
 8002e88:	2001      	movs	r0, #1
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	81a3      	strh	r3, [r4, #12]
 8002e90:	4240      	negs	r0, r0
 8002e92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e94:	9b01      	ldr	r3, [sp, #4]
 8002e96:	1836      	adds	r6, r6, r0
 8002e98:	1a1b      	subs	r3, r3, r0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	e7e6      	b.n	8002e6c <__sflush_r+0xd4>
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	dfbffffe 	.word	0xdfbffffe

08002ea4 <_fflush_r>:
 8002ea4:	690b      	ldr	r3, [r1, #16]
 8002ea6:	b570      	push	{r4, r5, r6, lr}
 8002ea8:	0005      	movs	r5, r0
 8002eaa:	000c      	movs	r4, r1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <_fflush_r+0x12>
 8002eb0:	2500      	movs	r5, #0
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d004      	beq.n	8002ec4 <_fflush_r+0x20>
 8002eba:	6a03      	ldr	r3, [r0, #32]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <_fflush_r+0x20>
 8002ec0:	f7ff f8c4 	bl	800204c <__sinit>
 8002ec4:	220c      	movs	r2, #12
 8002ec6:	5ea3      	ldrsh	r3, [r4, r2]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f1      	beq.n	8002eb0 <_fflush_r+0xc>
 8002ecc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002ece:	07d2      	lsls	r2, r2, #31
 8002ed0:	d404      	bmi.n	8002edc <_fflush_r+0x38>
 8002ed2:	059b      	lsls	r3, r3, #22
 8002ed4:	d402      	bmi.n	8002edc <_fflush_r+0x38>
 8002ed6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ed8:	f7ff fc31 	bl	800273e <__retarget_lock_acquire_recursive>
 8002edc:	0028      	movs	r0, r5
 8002ede:	0021      	movs	r1, r4
 8002ee0:	f7ff ff5a 	bl	8002d98 <__sflush_r>
 8002ee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ee6:	0005      	movs	r5, r0
 8002ee8:	07db      	lsls	r3, r3, #31
 8002eea:	d4e2      	bmi.n	8002eb2 <_fflush_r+0xe>
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	059b      	lsls	r3, r3, #22
 8002ef0:	d4df      	bmi.n	8002eb2 <_fflush_r+0xe>
 8002ef2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ef4:	f7ff fc24 	bl	8002740 <__retarget_lock_release_recursive>
 8002ef8:	e7db      	b.n	8002eb2 <_fflush_r+0xe>
	...

08002efc <fiprintf>:
 8002efc:	b40e      	push	{r1, r2, r3}
 8002efe:	b517      	push	{r0, r1, r2, r4, lr}
 8002f00:	4c05      	ldr	r4, [pc, #20]	@ (8002f18 <fiprintf+0x1c>)
 8002f02:	ab05      	add	r3, sp, #20
 8002f04:	cb04      	ldmia	r3!, {r2}
 8002f06:	0001      	movs	r1, r0
 8002f08:	6820      	ldr	r0, [r4, #0]
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	f7ff fcaa 	bl	8002864 <_vfiprintf_r>
 8002f10:	bc1e      	pop	{r1, r2, r3, r4}
 8002f12:	bc08      	pop	{r3}
 8002f14:	b003      	add	sp, #12
 8002f16:	4718      	bx	r3
 8002f18:	20000010 	.word	0x20000010

08002f1c <_getc_r>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	0005      	movs	r5, r0
 8002f20:	000c      	movs	r4, r1
 8002f22:	2800      	cmp	r0, #0
 8002f24:	d004      	beq.n	8002f30 <_getc_r+0x14>
 8002f26:	6a03      	ldr	r3, [r0, #32]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <_getc_r+0x14>
 8002f2c:	f7ff f88e 	bl	800204c <__sinit>
 8002f30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f32:	07db      	lsls	r3, r3, #31
 8002f34:	d405      	bmi.n	8002f42 <_getc_r+0x26>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	059b      	lsls	r3, r3, #22
 8002f3a:	d402      	bmi.n	8002f42 <_getc_r+0x26>
 8002f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f3e:	f7ff fbfe 	bl	800273e <__retarget_lock_acquire_recursive>
 8002f42:	6863      	ldr	r3, [r4, #4]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	6063      	str	r3, [r4, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da0f      	bge.n	8002f6c <_getc_r+0x50>
 8002f4c:	0028      	movs	r0, r5
 8002f4e:	0021      	movs	r1, r4
 8002f50:	f000 f8b3 	bl	80030ba <__srget_r>
 8002f54:	0005      	movs	r5, r0
 8002f56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f58:	07db      	lsls	r3, r3, #31
 8002f5a:	d405      	bmi.n	8002f68 <_getc_r+0x4c>
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	059b      	lsls	r3, r3, #22
 8002f60:	d402      	bmi.n	8002f68 <_getc_r+0x4c>
 8002f62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f64:	f7ff fbec 	bl	8002740 <__retarget_lock_release_recursive>
 8002f68:	0028      	movs	r0, r5
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	6022      	str	r2, [r4, #0]
 8002f72:	781d      	ldrb	r5, [r3, #0]
 8002f74:	e7ef      	b.n	8002f56 <_getc_r+0x3a>
	...

08002f78 <__swhatbuf_r>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	000e      	movs	r6, r1
 8002f7c:	001d      	movs	r5, r3
 8002f7e:	230e      	movs	r3, #14
 8002f80:	5ec9      	ldrsh	r1, [r1, r3]
 8002f82:	0014      	movs	r4, r2
 8002f84:	b096      	sub	sp, #88	@ 0x58
 8002f86:	2900      	cmp	r1, #0
 8002f88:	da0c      	bge.n	8002fa4 <__swhatbuf_r+0x2c>
 8002f8a:	89b2      	ldrh	r2, [r6, #12]
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	0011      	movs	r1, r2
 8002f90:	4019      	ands	r1, r3
 8002f92:	421a      	tst	r2, r3
 8002f94:	d114      	bne.n	8002fc0 <__swhatbuf_r+0x48>
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	6029      	str	r1, [r5, #0]
 8002f9e:	6023      	str	r3, [r4, #0]
 8002fa0:	b016      	add	sp, #88	@ 0x58
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	466a      	mov	r2, sp
 8002fa6:	f000 f8a3 	bl	80030f0 <_fstat_r>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	dbed      	blt.n	8002f8a <__swhatbuf_r+0x12>
 8002fae:	23f0      	movs	r3, #240	@ 0xf0
 8002fb0:	9901      	ldr	r1, [sp, #4]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	4019      	ands	r1, r3
 8002fb6:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <__swhatbuf_r+0x50>)
 8002fb8:	18c9      	adds	r1, r1, r3
 8002fba:	424b      	negs	r3, r1
 8002fbc:	4159      	adcs	r1, r3
 8002fbe:	e7ea      	b.n	8002f96 <__swhatbuf_r+0x1e>
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2340      	movs	r3, #64	@ 0x40
 8002fc4:	e7e9      	b.n	8002f9a <__swhatbuf_r+0x22>
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	ffffe000 	.word	0xffffe000

08002fcc <__smakebuf_r>:
 8002fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fce:	2602      	movs	r6, #2
 8002fd0:	898b      	ldrh	r3, [r1, #12]
 8002fd2:	0005      	movs	r5, r0
 8002fd4:	000c      	movs	r4, r1
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	4233      	tst	r3, r6
 8002fda:	d007      	beq.n	8002fec <__smakebuf_r+0x20>
 8002fdc:	0023      	movs	r3, r4
 8002fde:	3347      	adds	r3, #71	@ 0x47
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	6123      	str	r3, [r4, #16]
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	6163      	str	r3, [r4, #20]
 8002fe8:	b005      	add	sp, #20
 8002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fec:	ab03      	add	r3, sp, #12
 8002fee:	aa02      	add	r2, sp, #8
 8002ff0:	f7ff ffc2 	bl	8002f78 <__swhatbuf_r>
 8002ff4:	9f02      	ldr	r7, [sp, #8]
 8002ff6:	9001      	str	r0, [sp, #4]
 8002ff8:	0039      	movs	r1, r7
 8002ffa:	0028      	movs	r0, r5
 8002ffc:	f7fe fe70 	bl	8001ce0 <_malloc_r>
 8003000:	2800      	cmp	r0, #0
 8003002:	d108      	bne.n	8003016 <__smakebuf_r+0x4a>
 8003004:	220c      	movs	r2, #12
 8003006:	5ea3      	ldrsh	r3, [r4, r2]
 8003008:	059a      	lsls	r2, r3, #22
 800300a:	d4ed      	bmi.n	8002fe8 <__smakebuf_r+0x1c>
 800300c:	2203      	movs	r2, #3
 800300e:	4393      	bics	r3, r2
 8003010:	431e      	orrs	r6, r3
 8003012:	81a6      	strh	r6, [r4, #12]
 8003014:	e7e2      	b.n	8002fdc <__smakebuf_r+0x10>
 8003016:	2380      	movs	r3, #128	@ 0x80
 8003018:	89a2      	ldrh	r2, [r4, #12]
 800301a:	6020      	str	r0, [r4, #0]
 800301c:	4313      	orrs	r3, r2
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	9b03      	ldr	r3, [sp, #12]
 8003022:	6120      	str	r0, [r4, #16]
 8003024:	6167      	str	r7, [r4, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <__smakebuf_r+0x78>
 800302a:	0028      	movs	r0, r5
 800302c:	230e      	movs	r3, #14
 800302e:	5ee1      	ldrsh	r1, [r4, r3]
 8003030:	f000 f870 	bl	8003114 <_isatty_r>
 8003034:	2800      	cmp	r0, #0
 8003036:	d005      	beq.n	8003044 <__smakebuf_r+0x78>
 8003038:	2303      	movs	r3, #3
 800303a:	89a2      	ldrh	r2, [r4, #12]
 800303c:	439a      	bics	r2, r3
 800303e:	3b02      	subs	r3, #2
 8003040:	4313      	orrs	r3, r2
 8003042:	81a3      	strh	r3, [r4, #12]
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	9a01      	ldr	r2, [sp, #4]
 8003048:	4313      	orrs	r3, r2
 800304a:	81a3      	strh	r3, [r4, #12]
 800304c:	e7cc      	b.n	8002fe8 <__smakebuf_r+0x1c>

0800304e <_putc_r>:
 800304e:	b570      	push	{r4, r5, r6, lr}
 8003050:	0006      	movs	r6, r0
 8003052:	000d      	movs	r5, r1
 8003054:	0014      	movs	r4, r2
 8003056:	2800      	cmp	r0, #0
 8003058:	d004      	beq.n	8003064 <_putc_r+0x16>
 800305a:	6a03      	ldr	r3, [r0, #32]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <_putc_r+0x16>
 8003060:	f7fe fff4 	bl	800204c <__sinit>
 8003064:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003066:	07db      	lsls	r3, r3, #31
 8003068:	d405      	bmi.n	8003076 <_putc_r+0x28>
 800306a:	89a3      	ldrh	r3, [r4, #12]
 800306c:	059b      	lsls	r3, r3, #22
 800306e:	d402      	bmi.n	8003076 <_putc_r+0x28>
 8003070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003072:	f7ff fb64 	bl	800273e <__retarget_lock_acquire_recursive>
 8003076:	68a3      	ldr	r3, [r4, #8]
 8003078:	3b01      	subs	r3, #1
 800307a:	60a3      	str	r3, [r4, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da05      	bge.n	800308c <_putc_r+0x3e>
 8003080:	69a2      	ldr	r2, [r4, #24]
 8003082:	4293      	cmp	r3, r2
 8003084:	db12      	blt.n	80030ac <_putc_r+0x5e>
 8003086:	b2eb      	uxtb	r3, r5
 8003088:	2b0a      	cmp	r3, #10
 800308a:	d00f      	beq.n	80030ac <_putc_r+0x5e>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	6022      	str	r2, [r4, #0]
 8003092:	701d      	strb	r5, [r3, #0]
 8003094:	b2ed      	uxtb	r5, r5
 8003096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003098:	07db      	lsls	r3, r3, #31
 800309a:	d405      	bmi.n	80030a8 <_putc_r+0x5a>
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	059b      	lsls	r3, r3, #22
 80030a0:	d402      	bmi.n	80030a8 <_putc_r+0x5a>
 80030a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030a4:	f7ff fb4c 	bl	8002740 <__retarget_lock_release_recursive>
 80030a8:	0028      	movs	r0, r5
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	0029      	movs	r1, r5
 80030ae:	0022      	movs	r2, r4
 80030b0:	0030      	movs	r0, r6
 80030b2:	f7ff f985 	bl	80023c0 <__swbuf_r>
 80030b6:	0005      	movs	r5, r0
 80030b8:	e7ed      	b.n	8003096 <_putc_r+0x48>

080030ba <__srget_r>:
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	0005      	movs	r5, r0
 80030be:	000c      	movs	r4, r1
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d004      	beq.n	80030ce <__srget_r+0x14>
 80030c4:	6a03      	ldr	r3, [r0, #32]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <__srget_r+0x14>
 80030ca:	f7fe ffbf 	bl	800204c <__sinit>
 80030ce:	0021      	movs	r1, r4
 80030d0:	0028      	movs	r0, r5
 80030d2:	f000 f851 	bl	8003178 <__srefill_r>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d107      	bne.n	80030ea <__srget_r+0x30>
 80030da:	6863      	ldr	r3, [r4, #4]
 80030dc:	3b01      	subs	r3, #1
 80030de:	6063      	str	r3, [r4, #4]
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	6022      	str	r2, [r4, #0]
 80030e6:	7818      	ldrb	r0, [r3, #0]
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	2001      	movs	r0, #1
 80030ec:	4240      	negs	r0, r0
 80030ee:	e7fb      	b.n	80030e8 <__srget_r+0x2e>

080030f0 <_fstat_r>:
 80030f0:	2300      	movs	r3, #0
 80030f2:	b570      	push	{r4, r5, r6, lr}
 80030f4:	4d06      	ldr	r5, [pc, #24]	@ (8003110 <_fstat_r+0x20>)
 80030f6:	0004      	movs	r4, r0
 80030f8:	0008      	movs	r0, r1
 80030fa:	0011      	movs	r1, r2
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	f7fe fbe5 	bl	80018cc <_fstat>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	d103      	bne.n	800310e <_fstat_r+0x1e>
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d000      	beq.n	800310e <_fstat_r+0x1e>
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	200002dc 	.word	0x200002dc

08003114 <_isatty_r>:
 8003114:	2300      	movs	r3, #0
 8003116:	b570      	push	{r4, r5, r6, lr}
 8003118:	4d06      	ldr	r5, [pc, #24]	@ (8003134 <_isatty_r+0x20>)
 800311a:	0004      	movs	r4, r0
 800311c:	0008      	movs	r0, r1
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	f7fe fbe2 	bl	80018e8 <_isatty>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d103      	bne.n	8003130 <_isatty_r+0x1c>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d000      	beq.n	8003130 <_isatty_r+0x1c>
 800312e:	6023      	str	r3, [r4, #0]
 8003130:	bd70      	pop	{r4, r5, r6, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	200002dc 	.word	0x200002dc

08003138 <memchr>:
 8003138:	b2c9      	uxtb	r1, r1
 800313a:	1882      	adds	r2, r0, r2
 800313c:	4290      	cmp	r0, r2
 800313e:	d101      	bne.n	8003144 <memchr+0xc>
 8003140:	2000      	movs	r0, #0
 8003142:	4770      	bx	lr
 8003144:	7803      	ldrb	r3, [r0, #0]
 8003146:	428b      	cmp	r3, r1
 8003148:	d0fb      	beq.n	8003142 <memchr+0xa>
 800314a:	3001      	adds	r0, #1
 800314c:	e7f6      	b.n	800313c <memchr+0x4>

0800314e <abort>:
 800314e:	2006      	movs	r0, #6
 8003150:	b510      	push	{r4, lr}
 8003152:	f000 f8b1 	bl	80032b8 <raise>
 8003156:	2001      	movs	r0, #1
 8003158:	f7fe fb68 	bl	800182c <_exit>

0800315c <lflush>:
 800315c:	2209      	movs	r2, #9
 800315e:	898b      	ldrh	r3, [r1, #12]
 8003160:	2000      	movs	r0, #0
 8003162:	b510      	push	{r4, lr}
 8003164:	4013      	ands	r3, r2
 8003166:	4293      	cmp	r3, r2
 8003168:	d103      	bne.n	8003172 <lflush+0x16>
 800316a:	4b02      	ldr	r3, [pc, #8]	@ (8003174 <lflush+0x18>)
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	f7ff fe99 	bl	8002ea4 <_fflush_r>
 8003172:	bd10      	pop	{r4, pc}
 8003174:	20000010 	.word	0x20000010

08003178 <__srefill_r>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	0005      	movs	r5, r0
 800317c:	000c      	movs	r4, r1
 800317e:	2800      	cmp	r0, #0
 8003180:	d004      	beq.n	800318c <__srefill_r+0x14>
 8003182:	6a03      	ldr	r3, [r0, #32]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <__srefill_r+0x14>
 8003188:	f7fe ff60 	bl	800204c <__sinit>
 800318c:	2300      	movs	r3, #0
 800318e:	6063      	str	r3, [r4, #4]
 8003190:	220c      	movs	r2, #12
 8003192:	5ea3      	ldrsh	r3, [r4, r2]
 8003194:	069a      	lsls	r2, r3, #26
 8003196:	d408      	bmi.n	80031aa <__srefill_r+0x32>
 8003198:	075a      	lsls	r2, r3, #29
 800319a:	d449      	bmi.n	8003230 <__srefill_r+0xb8>
 800319c:	06da      	lsls	r2, r3, #27
 800319e:	d407      	bmi.n	80031b0 <__srefill_r+0x38>
 80031a0:	2209      	movs	r2, #9
 80031a2:	602a      	str	r2, [r5, #0]
 80031a4:	3237      	adds	r2, #55	@ 0x37
 80031a6:	4313      	orrs	r3, r2
 80031a8:	81a3      	strh	r3, [r4, #12]
 80031aa:	2001      	movs	r0, #1
 80031ac:	4240      	negs	r0, r0
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	2608      	movs	r6, #8
 80031b2:	4233      	tst	r3, r6
 80031b4:	d00a      	beq.n	80031cc <__srefill_r+0x54>
 80031b6:	0021      	movs	r1, r4
 80031b8:	0028      	movs	r0, r5
 80031ba:	f7ff fe73 	bl	8002ea4 <_fflush_r>
 80031be:	2800      	cmp	r0, #0
 80031c0:	d1f3      	bne.n	80031aa <__srefill_r+0x32>
 80031c2:	89a3      	ldrh	r3, [r4, #12]
 80031c4:	60a0      	str	r0, [r4, #8]
 80031c6:	43b3      	bics	r3, r6
 80031c8:	81a3      	strh	r3, [r4, #12]
 80031ca:	61a0      	str	r0, [r4, #24]
 80031cc:	2304      	movs	r3, #4
 80031ce:	89a2      	ldrh	r2, [r4, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	81a3      	strh	r3, [r4, #12]
 80031d4:	6923      	ldr	r3, [r4, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d103      	bne.n	80031e2 <__srefill_r+0x6a>
 80031da:	0021      	movs	r1, r4
 80031dc:	0028      	movs	r0, r5
 80031de:	f7ff fef5 	bl	8002fcc <__smakebuf_r>
 80031e2:	230c      	movs	r3, #12
 80031e4:	5ee6      	ldrsh	r6, [r4, r3]
 80031e6:	07b3      	lsls	r3, r6, #30
 80031e8:	d00f      	beq.n	800320a <__srefill_r+0x92>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <__srefill_r+0xe0>)
 80031ee:	81a3      	strh	r3, [r4, #12]
 80031f0:	491a      	ldr	r1, [pc, #104]	@ (800325c <__srefill_r+0xe4>)
 80031f2:	481b      	ldr	r0, [pc, #108]	@ (8003260 <__srefill_r+0xe8>)
 80031f4:	f7fe ff42 	bl	800207c <_fwalk_sglue>
 80031f8:	2309      	movs	r3, #9
 80031fa:	81a6      	strh	r6, [r4, #12]
 80031fc:	401e      	ands	r6, r3
 80031fe:	429e      	cmp	r6, r3
 8003200:	d103      	bne.n	800320a <__srefill_r+0x92>
 8003202:	0021      	movs	r1, r4
 8003204:	0028      	movs	r0, r5
 8003206:	f7ff fdc7 	bl	8002d98 <__sflush_r>
 800320a:	6922      	ldr	r2, [r4, #16]
 800320c:	0028      	movs	r0, r5
 800320e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8003210:	6963      	ldr	r3, [r4, #20]
 8003212:	6a21      	ldr	r1, [r4, #32]
 8003214:	6022      	str	r2, [r4, #0]
 8003216:	47b0      	blx	r6
 8003218:	6060      	str	r0, [r4, #4]
 800321a:	2800      	cmp	r0, #0
 800321c:	dc1a      	bgt.n	8003254 <__srefill_r+0xdc>
 800321e:	230c      	movs	r3, #12
 8003220:	5ee2      	ldrsh	r2, [r4, r3]
 8003222:	2320      	movs	r3, #32
 8003224:	2800      	cmp	r0, #0
 8003226:	d0be      	beq.n	80031a6 <__srefill_r+0x2e>
 8003228:	2300      	movs	r3, #0
 800322a:	6063      	str	r3, [r4, #4]
 800322c:	3340      	adds	r3, #64	@ 0x40
 800322e:	e7ba      	b.n	80031a6 <__srefill_r+0x2e>
 8003230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003232:	2900      	cmp	r1, #0
 8003234:	d0ce      	beq.n	80031d4 <__srefill_r+0x5c>
 8003236:	0023      	movs	r3, r4
 8003238:	3344      	adds	r3, #68	@ 0x44
 800323a:	4299      	cmp	r1, r3
 800323c:	d002      	beq.n	8003244 <__srefill_r+0xcc>
 800323e:	0028      	movs	r0, r5
 8003240:	f7ff fa9e 	bl	8002780 <_free_r>
 8003244:	2300      	movs	r3, #0
 8003246:	6363      	str	r3, [r4, #52]	@ 0x34
 8003248:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800324a:	6063      	str	r3, [r4, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0c1      	beq.n	80031d4 <__srefill_r+0x5c>
 8003250:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003252:	6023      	str	r3, [r4, #0]
 8003254:	2000      	movs	r0, #0
 8003256:	e7aa      	b.n	80031ae <__srefill_r+0x36>
 8003258:	20000004 	.word	0x20000004
 800325c:	0800315d 	.word	0x0800315d
 8003260:	20000014 	.word	0x20000014

08003264 <_raise_r>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	0004      	movs	r4, r0
 8003268:	000d      	movs	r5, r1
 800326a:	291f      	cmp	r1, #31
 800326c:	d904      	bls.n	8003278 <_raise_r+0x14>
 800326e:	2316      	movs	r3, #22
 8003270:	6003      	str	r3, [r0, #0]
 8003272:	2001      	movs	r0, #1
 8003274:	4240      	negs	r0, r0
 8003276:	bd70      	pop	{r4, r5, r6, pc}
 8003278:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <_raise_r+0x24>
 800327e:	008a      	lsls	r2, r1, #2
 8003280:	189b      	adds	r3, r3, r2
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2a00      	cmp	r2, #0
 8003286:	d108      	bne.n	800329a <_raise_r+0x36>
 8003288:	0020      	movs	r0, r4
 800328a:	f000 f831 	bl	80032f0 <_getpid_r>
 800328e:	002a      	movs	r2, r5
 8003290:	0001      	movs	r1, r0
 8003292:	0020      	movs	r0, r4
 8003294:	f000 f81a 	bl	80032cc <_kill_r>
 8003298:	e7ed      	b.n	8003276 <_raise_r+0x12>
 800329a:	2a01      	cmp	r2, #1
 800329c:	d009      	beq.n	80032b2 <_raise_r+0x4e>
 800329e:	1c51      	adds	r1, r2, #1
 80032a0:	d103      	bne.n	80032aa <_raise_r+0x46>
 80032a2:	2316      	movs	r3, #22
 80032a4:	6003      	str	r3, [r0, #0]
 80032a6:	2001      	movs	r0, #1
 80032a8:	e7e5      	b.n	8003276 <_raise_r+0x12>
 80032aa:	2100      	movs	r1, #0
 80032ac:	0028      	movs	r0, r5
 80032ae:	6019      	str	r1, [r3, #0]
 80032b0:	4790      	blx	r2
 80032b2:	2000      	movs	r0, #0
 80032b4:	e7df      	b.n	8003276 <_raise_r+0x12>
	...

080032b8 <raise>:
 80032b8:	b510      	push	{r4, lr}
 80032ba:	4b03      	ldr	r3, [pc, #12]	@ (80032c8 <raise+0x10>)
 80032bc:	0001      	movs	r1, r0
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	f7ff ffd0 	bl	8003264 <_raise_r>
 80032c4:	bd10      	pop	{r4, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	20000010 	.word	0x20000010

080032cc <_kill_r>:
 80032cc:	2300      	movs	r3, #0
 80032ce:	b570      	push	{r4, r5, r6, lr}
 80032d0:	4d06      	ldr	r5, [pc, #24]	@ (80032ec <_kill_r+0x20>)
 80032d2:	0004      	movs	r4, r0
 80032d4:	0008      	movs	r0, r1
 80032d6:	0011      	movs	r1, r2
 80032d8:	602b      	str	r3, [r5, #0]
 80032da:	f7fe fa97 	bl	800180c <_kill>
 80032de:	1c43      	adds	r3, r0, #1
 80032e0:	d103      	bne.n	80032ea <_kill_r+0x1e>
 80032e2:	682b      	ldr	r3, [r5, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d000      	beq.n	80032ea <_kill_r+0x1e>
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	200002dc 	.word	0x200002dc

080032f0 <_getpid_r>:
 80032f0:	b510      	push	{r4, lr}
 80032f2:	f7fe fa85 	bl	8001800 <_getpid>
 80032f6:	bd10      	pop	{r4, pc}

080032f8 <_init>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fe:	bc08      	pop	{r3}
 8003300:	469e      	mov	lr, r3
 8003302:	4770      	bx	lr

08003304 <_fini>:
 8003304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330a:	bc08      	pop	{r3}
 800330c:	469e      	mov	lr, r3
 800330e:	4770      	bx	lr
